/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 20:48:29 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.comma();
      Token token0 = xPathLexer0.at();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('`');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_|vTqD");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("_", token1.getTokenText());
      
      xPathLexer0.dollar();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.dollar();
      xPathLexer0.plus();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("q", token4.getTokenText());
      
      xPathLexer0.getXPath();
      Token token5 = xPathLexer0.plus();
      assertEquals("D", token5.getTokenText());
      
      String string0 = token3.toString();
      assertEquals("[ (26) (v)", string0);
      
      xPathLexer0.pipe();
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.leftBracket();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.or();
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      xPathLexer0.dollar();
      int int0 = xPathLexer0.endPosition();
      assertEquals(7, int0);
      
      Token token10 = xPathLexer0.leftBracket();
      assertEquals(3, token10.getTokenType());
      
      xPathLexer0.consume(7);
      xPathLexer0.relationalOperator();
      xPathLexer0.setPreviousToken(token3);
      Token token11 = xPathLexer0.colon();
      assertEquals(18, token11.getTokenType());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[EtFOB");
      xPathLexer0.leftParen();
      xPathLexer0.rightBracket();
      xPathLexer0.rightBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.whitespace();
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer0.notEquals();
      xPathLexer0.dollar();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1354));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("F", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (6) (q)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("0{", token2.getTokenText());
      
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      Token token3 = xPathLexer0.slashes();
      assertEquals("(", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      
      char char0 = xPathLexer0.LA(3221);
      assertEquals('\uFFFF', char0);
      
      Token token5 = xPathLexer0.dollar();
      assertEquals("u", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(">", token6.getTokenText());
      
      xPathLexer0.endPosition();
      xPathLexer0.consume(3221);
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer0.rightBracket();
      assertEquals(4, token9.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token10 = xPathLexer0.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer0.not();
      assertEquals(23, token11.getTokenType());
      
      xPathLexer0.getPreviousToken();
      Token token12 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token12.getTokenType());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      xPathLexer0.setXPath("%n/7");
      xPathLexer0.comma();
      xPathLexer0.colon();
      xPathLexer0.identifier();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.isIdentifierChar('9');
      xPathLexer0.not();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.rightBracket();
      xPathLexer0.plus();
      xPathLexer0.at();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("rliv9F7gP^!e]");
      xPathLexer0.not();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.or();
      xPathLexer0.consume();
      xPathLexer0.whitespace();
      xPathLexer0.literal();
      xPathLexer0.minus();
      xPathLexer0.LA(0);
      Token token0 = xPathLexer0.nextToken();
      Token token1 = xPathLexer0.nextToken();
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("!", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("oz3r}\"/H9Vyly");
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      xPathLexer0.leftBracket();
      xPathLexer0.whitespace();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      xPathLexer0.minus();
      xPathLexer0.setXPath("Vo\"Q}nv]QaG");
      xPathLexer0.pipe();
      xPathLexer0.div();
      xPathLexer0.operatorName();
      xPathLexer0.minus();
      xPathLexer0.comma();
      xPathLexer0.rightParen();
      xPathLexer0.setXPath("");
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      boolean boolean0 = xPathLexer0.isIdentifierChar('n');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightBracket();
      xPathLexer0.mod();
      xPathLexer0.div();
      xPathLexer0.notEquals();
      xPathLexer0.consume(2425);
      xPathLexer0.comma();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.comma();
      xPathLexer0.setXPath("UHBH- v");
      xPathLexer0.getPreviousToken();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      xPathLexer0.and();
      xPathLexer0.LA(0);
      xPathLexer0.plus();
      xPathLexer0.isIdentifierStartChar('U');
      xPathLexer0.colon();
      xPathLexer0.dollar();
      xPathLexer0.getXPath();
      xPathLexer0.minus();
      xPathLexer0.endPosition();
      xPathLexer0.leftBracket();
      xPathLexer0.and();
      xPathLexer0.at();
      xPathLexer0.getXPath();
      xPathLexer0.nextToken();
      xPathLexer0.rightBracket();
      xPathLexer0.setPreviousToken((Token) null);
      assertEquals("UHBH- v", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.minus();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (6) (q)", string0);
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("0", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals("{", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("[ (6) (q)");
      xPathLexer1.whitespace();
      xPathLexer0.star();
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      assertEquals("(", token3.getTokenText());
      
      Token token4 = xPathLexer1.star();
      assertEquals("(", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer1.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("6", token5.getTokenText());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals("", token6.getTokenText());
      
      Token token7 = xPathLexer1.dollar();
      assertEquals(26, token7.getTokenType());
      assertEquals(")", token7.getTokenText());
      
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer0.identifier();
      assertEquals("A", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer1.nextToken();
      assertEquals("(", token10.getTokenText());
      assertEquals(1, token10.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      Token token11 = xPathLexer0.leftBracket();
      assertEquals("@", token11.getTokenText());
      assertEquals(3, token11.getTokenType());
      
      xPathLexer0.mod();
      Token token12 = xPathLexer1.plus();
      assertEquals(5, token12.getTokenType());
      assertEquals("q", token12.getTokenText());
      
      Token token13 = xPathLexer1.not();
      assertEquals(")", token13.getTokenText());
      assertEquals(23, token13.getTokenType());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_R'(x7jy^K-ox");
      xPathLexer0.setXPath("_R'(x7jy^K-ox");
      Token token0 = xPathLexer0.doubleColon();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.whitespace();
      xPathLexer0.star();
      token0.toString();
      token0.toString();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.pipe();
      xPathLexer0.minus();
      xPathLexer0.pipe();
      xPathLexer0.dollar();
      xPathLexer0.colon();
      xPathLexer0.pipe();
      xPathLexer0.getXPath();
      xPathLexer0.number();
      xPathLexer0.getXPath();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('n');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      xPathLexer0.setXPath("%n/7");
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("%", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("n/7", token5.getTokenText());
      
      Token token6 = xPathLexer0.identifier();
      assertEquals(15, token6.getTokenType());
      assertEquals("n", token6.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.mod();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('V');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wnN1H3");
      xPathLexer0.whitespace();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      xPathLexer0.star();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightParen();
      xPathLexer1.not();
      xPathLexer1.nextToken();
      xPathLexer1.isIdentifierChar('6');
      Token token1 = xPathLexer1.or();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.identifier();
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.and();
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer1 = new XPathLexer("py=vW/A;$g");
      xPathLexer1.minus();
      xPathLexer1.consume(1);
      xPathLexer0.or();
      xPathLexer0.not();
      xPathLexer1.nextToken();
      boolean boolean0 = xPathLexer0.isIdentifierChar('o');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@Nr'~1EcC");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.leftBracket();
      xPathLexer0.nextToken();
      token0.toString();
      Token token2 = xPathLexer0.notEquals();
      token2.toString();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.star();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i\"1,gAoDzy5lV?J#");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("i", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals("\"", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("i\"1,gAoDzy5lV?J#");
      xPathLexer1.setXPath("");
      Token token2 = xPathLexer1.colon();
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
      
      xPathLexer0.consume();
      xPathLexer1.mod();
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('V');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i\"1,gAoDzy5lV?J#");
      xPathLexer0.plus();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.and();
      xPathLexer1.currentPosition();
      xPathLexer1.minus();
      xPathLexer1.not();
      xPathLexer0.nextToken();
      boolean boolean0 = xPathLexer0.isIdentifierChar('\\');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+i0");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.dollar();
      assertEquals("+", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      xPathLexer1.isIdentifierChar('+');
      xPathLexer1.currentPosition();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("i", token1.getTokenText());
      
      xPathLexer1.or();
      Token token2 = xPathLexer0.not();
      assertEquals("0", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('');
      assertTrue(boolean0);
      
      Token token4 = xPathLexer1.slashes();
      assertEquals(11, token4.getTokenType());
      
      int int0 = xPathLexer1.endPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+i0");
      Token token0 = xPathLexer0.star();
      assertEquals("+", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("+i0");
      xPathLexer0.setXPath("+i0");
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("+", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("+", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("i0", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      assertNotNull(token3);
      
      xPathLexer0.consume();
      xPathLexer1.mod();
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('V');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("] #<t-+]UMYMMc");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(4, token0.getTokenType());
      assertEquals("]", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      assertEquals(" ", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("] #<t-+]UMYMMc");
      xPathLexer1.setXPath("");
      Token token2 = xPathLexer1.colon();
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("#<t-+]UMYMMc", token3.getTokenText());
      
      Token token4 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.mod();
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('5');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      xPathLexer0.and();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(1, int0);
      
      XPathLexer xPathLexer1 = new XPathLexer("py=vW/A;$g");
      xPathLexer1.identifierOrOperatorName();
      Token token2 = xPathLexer1.minus();
      assertEquals("=", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      xPathLexer1.consume(1);
      xPathLexer0.or();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("W", token4.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('o');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i\"1,gAoDzy5lV?J#");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("i", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("\"", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("1", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i\"1,gAoDzy5lV?J#");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("i\"", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("1", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.currentPosition();
      Token token2 = xPathLexer0.minus();
      assertEquals(",", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("g", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("AoDzy5lV", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+i0");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.dollar();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.star();
      String string0 = token0.toString();
      assertEquals("[ (26) (+)", string0);
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("i", token1.getTokenText());
      
      Token token2 = xPathLexer1.star();
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.number();
      assertEquals("0", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer2.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      boolean boolean1 = xPathLexer2.isIdentifierChar(':');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("] #<t-+]UMYMMc");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(4, token0.getTokenType());
      assertEquals("]", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("] #<t-+]UMYMMc");
      xPathLexer1.setXPath("");
      Token token2 = xPathLexer1.colon();
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("#<t-+]UMYMMc", token3.getTokenText());
      
      Token token4 = xPathLexer1.identifierOrOperatorName();
      assertNotNull(token4);
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.consume();
      Token token5 = xPathLexer0.relationalOperator();
      assertEquals("<", token5.getTokenText());
      assertEquals(7, token5.getTokenType());
      assertNotNull(token5);
      
      Token token6 = xPathLexer0.number();
      assertEquals("", token6.getTokenText());
      assertEquals(30, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.minus();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.consume(2);
      xPathLexer0.or();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      boolean boolean0 = xPathLexer2.isIdentifierChar('o');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+i0");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("+", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("+i0");
      xPathLexer0.setXPath("+i0");
      Token token1 = xPathLexer0.colon();
      assertEquals("+", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("+", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer1.identifierOrOperatorName();
      assertEquals("i0", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("+i0");
      xPathLexer2.consume();
      xPathLexer2.relationalOperator();
      Token token4 = xPathLexer2.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      xPathLexer0.rightParen();
      xPathLexer0.leftBracket();
      xPathLexer0.whitespace();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      xPathLexer0.minus();
      xPathLexer0.setXPath("Vo\"Q}nv]QaG");
      xPathLexer0.pipe();
      xPathLexer0.div();
      xPathLexer0.operatorName();
      xPathLexer0.minus();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer("Vo\"Q}nv]QaG");
      xPathLexer1.nextToken();
      boolean boolean0 = xPathLexer1.isIdentifierChar('S');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer1 = new XPathLexer("py=vW/A;$g");
      Token token4 = xPathLexer1.minus();
      assertEquals(6, token4.getTokenType());
      assertEquals("p", token4.getTokenText());
      
      xPathLexer1.consume(2);
      xPathLexer1.relationalOperator();
      xPathLexer0.or();
      Token token5 = xPathLexer1.comma();
      assertEquals(32, token5.getTokenType());
      assertEquals("v", token5.getTokenText());
      
      Token token6 = xPathLexer0.rightParen();
      assertEquals(2, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('B');
      assertTrue(boolean0);
      
      Token token8 = xPathLexer1.slashes();
      assertEquals(12, token8.getTokenType());
      assertEquals("W/", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("] #<t-+]UMYMMc");
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("] #<t-+]UMYMMc");
      xPathLexer1.setXPath("");
      xPathLexer0.consume();
      xPathLexer1.colon();
      xPathLexer1.rightParen();
      xPathLexer1.not();
      xPathLexer0.nextToken();
      xPathLexer1.isIdentifierChar('6');
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+i0");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.dollar();
      assertEquals("+", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      xPathLexer1.isIdentifierChar('+');
      XPathLexer xPathLexer2 = new XPathLexer("k^*Uo07q3LT>k]%e{bO");
      xPathLexer2.currentPosition();
      Token token1 = xPathLexer2.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("k", token1.getTokenText());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.not();
      assertEquals("i", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(30, token3.getTokenType());
      assertEquals("0", token3.getTokenText());
      
      xPathLexer2.isIdentifierChar(']');
      Token token4 = xPathLexer1.slashes();
      assertEquals(11, token4.getTokenType());
      
      int int0 = xPathLexer2.endPosition();
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+i0");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("+", token0.getTokenText());
      
      xPathLexer1.isIdentifierChar('+');
      XPathLexer xPathLexer2 = new XPathLexer("ARiRO^E$NYb82");
      xPathLexer2.currentPosition();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("i", token1.getTokenText());
      
      xPathLexer1.or();
      Token token2 = xPathLexer2.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("A", token2.getTokenText());
      
      Token token3 = xPathLexer2.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("RiRO", token3.getTokenText());
      
      xPathLexer0.isIdentifierChar('3');
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.slashes();
      assertEquals(11, token4.getTokenType());
      
      int int0 = xPathLexer3.endPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.minus();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.doubleColon();
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      xPathLexer0.slashes();
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      xPathLexer0.setXPath("");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.colon();
      XPathLexer xPathLexer2 = new XPathLexer("[ (6) (q)");
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.identifierOrOperatorName();
      xPathLexer2.consume();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.slashes();
      xPathLexer4.relationalOperator();
      xPathLexer0.number();
      xPathLexer0.consume((-44));
      Token token1 = xPathLexer1.mod();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("] #<t-+]UMYMMc");
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("] #<t-+]UMYMMc");
      xPathLexer0.LA(3221);
      xPathLexer0.dollar();
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.endPosition();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.consume(0);
      xPathLexer0.hasMoreChars();
      xPathLexer1.pipe();
      xPathLexer1.notEquals();
      xPathLexer2.dots();
      xPathLexer0.rightBracket();
      xPathLexer2.relationalOperator();
      xPathLexer1.at();
      xPathLexer2.not();
      xPathLexer1.getPreviousToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.colon();
      assertEquals("F", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals("q", token1.getTokenText());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.colon();
      assertEquals(18, token2.getTokenType());
      
      xPathLexer0.or();
      xPathLexer1.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer2.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer1.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer0.dots();
      assertEquals("{", token6.getTokenText());
      
      Token token7 = xPathLexer0.minus();
      assertEquals("<", token7.getTokenText());
      
      xPathLexer1.setXPath("Vo\"Q}nv]QaG");
      Token token8 = xPathLexer3.pipe();
      assertEquals(17, token8.getTokenType());
      
      xPathLexer1.div();
      Token token9 = xPathLexer0.nextToken();
      assertEquals("4", token9.getTokenText());
      assertEquals(30, token9.getTokenType());
      
      Token token10 = xPathLexer3.minus();
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer1.comma();
      assertEquals("V", token11.getTokenText());
      assertEquals(32, token11.getTokenType());
      
      Token token12 = xPathLexer3.rightParen();
      assertEquals(2, token12.getTokenType());
      
      Token token13 = xPathLexer0.nextToken();
      assertEquals(1, token13.getTokenType());
      
      boolean boolean0 = xPathLexer2.isIdentifierChar('B');
      assertTrue(boolean0);
      
      Token token14 = xPathLexer1.slashes();
      assertEquals("o", token14.getTokenText());
      assertEquals(11, token14.getTokenType());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8kc)cGWr#*,bMJ<X");
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer1 = new XPathLexer("8kc)cGWr#*,bMJ<X");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.minus();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.consume((-1138));
      // Undeclared exception!
      try { 
        xPathLexer1.or();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i\"1,gAoDzy5lV?J#");
      Token token0 = xPathLexer0.plus();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (5) (i)", string0);
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("\"", token1.getTokenText());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.rightParen();
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("1", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(32, token4.getTokenType());
      assertEquals(",", token4.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('s');
      assertTrue(boolean0);
      
      Token token5 = xPathLexer0.colon();
      assertEquals("g", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.setXPath("|{7F8@ 0iJk`");
      xPathLexer1.colon();
      xPathLexer0.nextToken();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.consume();
      Token token0 = xPathLexer1.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      Token token0 = xPathLexer0.whitespace();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("n", token1.getTokenText());
      
      token0.toString();
      token0.toString();
      xPathLexer0.star();
      String string0 = token0.toString();
      assertEquals("[ (-2) ()", string0);
      
      Token token2 = xPathLexer0.not();
      assertEquals("!", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals("1", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals("", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('-');
      assertTrue(boolean0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer1.slashes();
      assertEquals(11, token6.getTokenType());
      
      int int0 = xPathLexer1.endPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i\"1,gAoDzy5lV?J#");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("i\"", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("1", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.currentPosition();
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("g", token3.getTokenText());
      
      Token token4 = xPathLexer0.not();
      assertEquals("A", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("oDzy5lV", token5.getTokenText());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      assertEquals("?", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("] #<t-+]UMYMMc");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals(" ", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("] #<t-+]UMYMMc");
      char char0 = xPathLexer0.LA(3221);
      assertEquals('\uFFFF', char0);
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("#", token1.getTokenText());
      
      Token token2 = xPathLexer1.rightBracket();
      assertEquals("]", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.endPosition();
      XPathLexer xPathLexer3 = new XPathLexer();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      Token token3 = xPathLexer1.pipe();
      assertEquals(" ", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer1.notEquals();
      assertEquals("#<", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer2.dots();
      assertEquals(13, token5.getTokenType());
      
      xPathLexer1.operatorName();
      Token token6 = xPathLexer1.minus();
      assertEquals(6, token6.getTokenType());
      assertEquals("t", token6.getTokenText());
      
      Token token7 = xPathLexer1.not();
      assertEquals("-", token7.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer(";zw&IX");
      Token token8 = xPathLexer4.nextToken();
      assertEquals(";zw&IX", token8.getTokenText());
      
      Token token9 = xPathLexer3.not();
      assertEquals(23, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.notEquals();
      Token token1 = xPathLexer0.minus();
      token1.toString();
      token1.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.colon();
      xPathLexer0.rightBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.div();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("F", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      Token token2 = xPathLexer0.notEquals();
      token2.toString();
      token2.toString();
      token1.toString();
      String string0 = token2.toString();
      assertEquals("[ (22) (0{)", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (6) (q)", string1);
      
      Token token3 = xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token3);
      assertEquals("<", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("4", token4.getTokenText());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      assertEquals("(", token5.getTokenText());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals("Ku", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      assertEquals(">", token7.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("[ (6) (q)");
      xPathLexer2.div();
      Token token8 = xPathLexer0.minus();
      assertEquals(6, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.colon();
      assertEquals("F", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals("q", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("0", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.colon();
      assertEquals(18, token3.getTokenType());
      
      xPathLexer1.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer2.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer0.notEquals();
      assertEquals("{<", token5.getTokenText());
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer1.at();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      assertEquals("4", token7.getTokenText());
      
      Token token8 = xPathLexer0.minus();
      assertEquals("(", token8.getTokenText());
      
      xPathLexer1.setXPath("Vo\"Q}nv]QaG");
      Token token9 = xPathLexer3.pipe();
      assertEquals(17, token9.getTokenType());
      
      xPathLexer0.nextToken();
      Token token10 = xPathLexer3.minus();
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer2.whitespace();
      assertEquals((-2), token11.getTokenType());
      
      Token token12 = xPathLexer3.rightParen();
      assertEquals(2, token12.getTokenType());
      
      Token token13 = xPathLexer0.nextToken();
      assertEquals((-1), token13.getTokenType());
      
      boolean boolean0 = xPathLexer2.isIdentifierChar('B');
      assertTrue(boolean0);
      
      Token token14 = xPathLexer1.slashes();
      assertEquals(11, token14.getTokenType());
      assertEquals("V", token14.getTokenText());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@Nr'~1EcC");
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      xPathLexer0.setXPath("%n/7");
      xPathLexer0.colon();
      xPathLexer0.identifier();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.doubleColon();
      xPathLexer0.isIdentifierChar(')');
      xPathLexer0.not();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":.cP6NK4|d+zp");
      xPathLexer0.whitespace();
      xPathLexer0.slashes();
      xPathLexer0.div();
      xPathLexer0.whitespace();
      xPathLexer0.operatorName();
      xPathLexer0.identifier();
      xPathLexer0.number();
      xPathLexer0.whitespace();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer(":.cP6NK4|d+zp");
      xPathLexer1.and();
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer2 = new XPathLexer(":.cP6NK4|d+zp");
      xPathLexer0.minus();
      xPathLexer0.consume(11);
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer(":.cP6NK4|d+zp");
      xPathLexer3.not();
      xPathLexer3.nextToken();
      boolean boolean0 = xPathLexer1.isIdentifierChar('Y');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      Token token0 = xPathLexer0.whitespace();
      Token token1 = xPathLexer0.dots();
      assertEquals("n", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(23, token3.getTokenType());
      
      token2.toString();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (3) (>)", string0);
      
      xPathLexer0.nextToken();
      String string1 = token0.toString();
      assertEquals("[ (-2) ()", string1);
      
      xPathLexer0.setPreviousToken(token2);
      Token token4 = xPathLexer0.not();
      assertEquals("H", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      assertEquals("3", token5.getTokenText());
      
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      
      xPathLexer0.or();
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer0.pipe();
      assertEquals(17, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('_');
      assertTrue(boolean0);
      
      Token token1 = xPathLexer1.comma();
      assertEquals(32, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("Fq0", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      Token token2 = xPathLexer0.notEquals();
      token2.toString();
      token2.toString();
      token1.toString();
      String string0 = token2.toString();
      assertEquals("[ (22) (<4)", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (6) ({)", string1);
      
      Token token3 = xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token3);
      assertEquals(17, token3.getTokenType());
      assertEquals("(", token3.getTokenText());
      
      Token token4 = xPathLexer0.colon();
      assertEquals("K", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      assertEquals("", token6.getTokenText());
      
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      assertEquals(">", token7.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("[ (6) ({)");
      xPathLexer2.div();
      xPathLexer0.minus();
      xPathLexer2.div();
      Token token8 = xPathLexer2.dollar();
      assertEquals(26, token8.getTokenType());
      assertEquals("[", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i\"1,gAoDzy5lV?J#");
      xPathLexer0.notEquals();
      xPathLexer0.plus();
      xPathLexer0.leftBracket();
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer0.minus();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      boolean boolean0 = xPathLexer0.isIdentifierChar('h');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.equals();
      xPathLexer0.literal();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      xPathLexer0.setXPath("%n/7");
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      xPathLexer0.identifier();
      xPathLexer0.nextToken();
      boolean boolean0 = xPathLexer0.isIdentifierChar('\\');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i\"1,gAoDzy5lV?J#");
      xPathLexer0.doubleColon();
      xPathLexer0.plus();
      xPathLexer0.leftBracket();
      xPathLexer0.dots();
      xPathLexer0.and();
      xPathLexer0.minus();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      boolean boolean0 = xPathLexer0.isIdentifierChar('\\');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.minus();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (6) (q)", string0);
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("0", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("{", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (6) (q)");
      xPathLexer1.whitespace();
      xPathLexer0.star();
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      assertEquals("4", token3.getTokenText());
      
      Token token4 = xPathLexer1.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("(", token4.getTokenText());
      
      Token token5 = xPathLexer1.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("6", token5.getTokenText());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals("Ku", token7.getTokenText());
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer0.identifier();
      assertEquals(15, token8.getTokenType());
      assertEquals("", token8.getTokenText());
      
      Token token9 = xPathLexer1.nextToken();
      assertEquals(2, token9.getTokenType());
      assertEquals(")", token9.getTokenText());
      
      xPathLexer0.hasMoreChars();
      Token token10 = xPathLexer0.leftBracket();
      assertEquals(3, token10.getTokenType());
      assertEquals(">", token10.getTokenText());
      
      xPathLexer0.mod();
      Token token11 = xPathLexer1.plus();
      assertEquals(5, token11.getTokenType());
      assertEquals(" ", token11.getTokenText());
      
      Token token12 = xPathLexer1.not();
      assertEquals(23, token12.getTokenType());
      assertEquals("(", token12.getTokenText());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":.cP6NK4|d+zp");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.slashes();
      assertEquals(".", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.whitespace();
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.and();
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals("d", token3.getTokenText());
      
      Token token4 = xPathLexer0.minus();
      assertEquals("+", token4.getTokenText());
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals("z", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('h');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.minus();
      token0.toString();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer("}9cjWTnis__G%");
      xPathLexer1.minus();
      xPathLexer0.consume(6);
      xPathLexer1.or();
      xPathLexer1.not();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("b&LJnM?RYEk>iu#TY]W");
      xPathLexer1.isIdentifierChar('.');
      Token token1 = xPathLexer2.literal();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.colon();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.colon();
      xPathLexer0.or();
      xPathLexer1.rightParen();
      xPathLexer0.or();
      xPathLexer1.and();
      xPathLexer0.currentPosition();
      xPathLexer1.minus();
      xPathLexer1.not();
      Token token1 = xPathLexer0.nextToken();
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8kc)cGWr#*,bMJ<X");
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer1 = new XPathLexer("8kc)cGWr#*,bMJ<X");
      xPathLexer1.colon();
      Token token1 = xPathLexer1.leftBracket();
      token1.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer1.colon();
      xPathLexer1.rightBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.dots();
      Token token2 = xPathLexer1.or();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume(2834);
      xPathLexer0.nextToken();
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertFalse(boolean0);
      
      Token token0 = xPathLexer1.pipe();
      assertEquals(17, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer(".~C&yp~(");
      Token token1 = xPathLexer2.number();
      assertEquals(31, token1.getTokenType());
      
      Token token2 = xPathLexer2.dots();
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer2.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer2.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("&", token4.getTokenText());
      
      xPathLexer1.getPreviousToken();
      Token token5 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token5.getTokenType());
      
      Token token6 = xPathLexer1.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer0.whitespace();
      assertEquals((-2), token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":.cP6NK4|d+zp");
      Token token0 = xPathLexer0.star();
      assertEquals(":", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(31, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8kc)cGWr#*,bMJ<X");
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (-2) ()", string0);
      
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer1 = new XPathLexer("8kc)cGWr#*,bMJ<X");
      Token token1 = xPathLexer1.colon();
      assertEquals("8", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer1.consume(3);
      xPathLexer0.or();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("c", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("GWr#*,bMJ<X", token3.getTokenText());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("G", token4.getTokenText());
      
      int int0 = xPathLexer1.endPosition();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i\"1,gAoDzy5lV?J#");
      xPathLexer0.doubleColon();
      xPathLexer0.plus();
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      xPathLexer0.minus();
      xPathLexer1.consume((-2820));
      xPathLexer0.or();
      xPathLexer1.not();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        xPathLexer1.dots();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("] #<t-+]UMYMMc");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals(" ", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("#<", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("] #<t-+]UMYMMc");
      char char0 = xPathLexer0.LA(3221);
      assertEquals('\uFFFF', char0);
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("t", token2.getTokenText());
      
      Token token3 = xPathLexer1.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("]", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.endPosition();
      xPathLexer2.setXPath("");
      Token token4 = xPathLexer2.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(6, token5.getTokenType());
      assertEquals("-", token5.getTokenText());
      
      Token token6 = xPathLexer0.identifier();
      assertEquals("", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals("#<t-+]UMYMMc", token7.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('y');
      assertTrue(boolean0);
      
      Token token8 = xPathLexer1.identifierOrOperatorName();
      assertNull(token8);
      
      Token token9 = xPathLexer2.plus();
      assertEquals(5, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i\"1,gAoDzy5lV?J#");
      xPathLexer0.notEquals();
      xPathLexer0.plus();
      xPathLexer0.leftBracket();
      xPathLexer0.plus();
      xPathLexer0.not();
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer0.minus();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("F", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (6) (q)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer("}9cjWTnis__G%");
      xPathLexer1.minus();
      xPathLexer0.consume(6);
      xPathLexer1.or();
      xPathLexer1.not();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("u", token2.getTokenText());
      
      Token token3 = xPathLexer1.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("c", token3.getTokenText());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals("jWTnis__G", token4.getTokenText());
      
      boolean boolean0 = xPathLexer1.isIdentifierChar('t');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      Token token0 = xPathLexer0.whitespace();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("n", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (-2) ()", string0);
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(9, token2.getTokenType());
      assertEquals(">", token2.getTokenText());
      
      xPathLexer0.hasMoreChars();
      Token token3 = xPathLexer0.pipe();
      assertEquals("!", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token4 = xPathLexer1.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer1.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer1.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      assertEquals("1", token7.getTokenText());
      
      xPathLexer1.getPreviousToken();
      xPathLexer1.getPreviousToken();
      Token token8 = xPathLexer0.dollar();
      assertEquals("H", token8.getTokenText());
      assertEquals(26, token8.getTokenType());
      
      Token token9 = xPathLexer1.whitespace();
      assertEquals((-2), token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8kc)cGWr#*,bMJ<X");
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (-2) ()", string0);
      
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer1 = new XPathLexer("8kc)cGWr#*,bMJ<X");
      xPathLexer1.currentPosition();
      XPathLexer xPathLexer2 = new XPathLexer("[ (-2) ()");
      Token token1 = xPathLexer0.minus();
      assertEquals(")", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      xPathLexer1.consume(1);
      xPathLexer1.or();
      Token token2 = xPathLexer1.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("k", token2.getTokenText());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals("c", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer2.dollar();
      assertEquals("[", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":.cP6NK4|d+zp");
      xPathLexer0.whitespace();
      xPathLexer0.slashes();
      xPathLexer0.div();
      xPathLexer0.whitespace();
      xPathLexer0.operatorName();
      xPathLexer0.number();
      xPathLexer0.whitespace();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer(":.cP6NK4|d+zp");
      xPathLexer1.and();
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer2 = new XPathLexer(":.cP6NK4|d+zp");
      xPathLexer0.minus();
      xPathLexer0.consume(5);
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer(":.cP6NK4|d+zp");
      xPathLexer3.not();
      xPathLexer1.dots();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":.cP6NK4|d+zp");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.slashes();
      assertEquals(".", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.whitespace();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals("6", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(":.cP6NK4|d+zp");
      Token token4 = xPathLexer1.leftBracket();
      assertEquals(":", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      xPathLexer1.and();
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer2 = new XPathLexer(":.cP6NK4|d+zp");
      Token token5 = xPathLexer0.minus();
      assertEquals("N", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      xPathLexer0.consume(5);
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer(":.cP6NK4|d+zp");
      Token token6 = xPathLexer3.not();
      assertEquals(":", token6.getTokenText());
      
      Token token7 = xPathLexer3.nextToken();
      assertEquals(13, token7.getTokenType());
      assertEquals(".", token7.getTokenText());
      
      boolean boolean0 = xPathLexer1.isIdentifierChar('Y');
      assertTrue(boolean0);
      
      Token token8 = xPathLexer3.not();
      assertEquals(23, token8.getTokenType());
      
      Token token9 = xPathLexer2.nextToken();
      assertEquals(":", token9.getTokenText());
      assertEquals(18, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      xPathLexer0.rightParen();
      xPathLexer0.minus();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("Dhz4m_2v.~aC}");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer2.plus();
      xPathLexer2.colon();
      String string0 = xPathLexer0.getXPath();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.colon();
      assertEquals("F", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("Lgr");
      Token token1 = xPathLexer1.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("L", token1.getTokenText());
      
      xPathLexer1.currentPosition();
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token2 = xPathLexer1.minus();
      assertEquals("g", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      xPathLexer1.consume((-2820));
      xPathLexer0.or();
      Token token3 = xPathLexer2.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("q0", token4.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      boolean boolean0 = xPathLexer2.isIdentifierChar('z');
      assertTrue(boolean0);
      
      xPathLexer3.currentPosition();
      Token token5 = xPathLexer3.star();
      assertEquals(20, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      Token token0 = xPathLexer0.whitespace();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("n", token1.getTokenText());
      
      token0.toString();
      token0.toString();
      Token token2 = xPathLexer0.star();
      assertEquals(">", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (-2) ()", string0);
      
      Token token3 = xPathLexer0.not();
      assertEquals("!", token3.getTokenText());
      
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("[ (-2) ()");
      Token token4 = xPathLexer1.nextToken();
      assertEquals(3, token4.getTokenType());
      assertEquals("[", token4.getTokenText());
      
      Token token5 = xPathLexer1.comma();
      assertEquals(" ", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      xPathLexer1.or();
      xPathLexer0.whitespace();
      Token token7 = xPathLexer1.literal();
      assertEquals("-2) ", token7.getTokenText());
      assertNotNull(token7);
      assertEquals(27, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.not();
      xPathLexer0.star();
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("%n/7");
      xPathLexer0.number();
      xPathLexer0.identifier();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.not();
      xPathLexer0.isIdentifierChar('2');
      xPathLexer0.equals();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i\"1,gAoDzy5lV?J#");
      Token token0 = xPathLexer0.not();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (23) (i)", string0);
      
      Token token1 = xPathLexer0.rightBracket();
      String string1 = token1.toString();
      assertEquals("[ (4) (\")", string1);
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("1", token2.getTokenText());
      
      Token token3 = xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token3);
      assertEquals(32, token3.getTokenType());
      assertEquals(",", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.colon();
      assertEquals(18, token4.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      Token token6 = xPathLexer2.dots();
      assertEquals(13, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("");
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer5.div();
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      assertEquals("?", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":.cP6NK4|d+zp");
      Token token0 = xPathLexer0.whitespace();
      Token token1 = xPathLexer0.slashes();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.currentPosition();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer(":.cP6NK4|d+zp");
      Token token2 = xPathLexer1.leftBracket();
      token2.toString();
      token2.toString();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.colon();
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer1.or();
      assertNull(token3);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":.cP6NK4|d+zp");
      xPathLexer0.whitespace();
      xPathLexer0.slashes();
      xPathLexer0.div();
      xPathLexer0.whitespace();
      xPathLexer0.operatorName();
      xPathLexer0.number();
      xPathLexer0.whitespace();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer(":.cP6NK4|d+zp");
      xPathLexer1.leftBracket();
      xPathLexer1.and();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.not();
      xPathLexer0.isIdentifierChar('A');
      xPathLexer1.equals();
      xPathLexer1.mod();
      xPathLexer1.nextToken();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":.cP6NK4|d+zp");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.slashes();
      assertEquals(".", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.and();
      xPathLexer0.setXPath(":.cP6NK4|d+zp");
      xPathLexer0.number();
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals(".", token2.getTokenText());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("c", token3.getTokenText());
      
      xPathLexer0.not();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("6", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals("N", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("K4|d+zp", token6.getTokenText());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d<Cb*C9rj>09{^7K");
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Y>CI%H*_l");
      xPathLexer0.consume();
      xPathLexer0.setXPath("Y>CI%H*_l");
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (13) (>)", string0);
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("CI", token1.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      Token token2 = xPathLexer0.slashes();
      assertEquals("%", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals("H", token3.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.div();
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      xPathLexer0.div();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals("_", token5.getTokenText());
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+ssAqNJ\u0001u#a~_,>&9");
      Token token0 = xPathLexer0.whitespace();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("ssAqNJ\u0001u", token1.getTokenText());
      
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (-2) ()", string0);
      
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer1 = new XPathLexer("+ssAqNJ\u0001u#a~_,>&9");
      xPathLexer0.minus();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("+ssAqNJ\u0001u#a~_,>&9");
      xPathLexer3.and();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("a", token2.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token3 = xPathLexer4.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer2.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer3.nextToken();
      assertEquals("+", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@Nr'~1EcC");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.slashes();
      Token token1 = xPathLexer0.notEquals();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i\"1,gAoDzy5lV?J#");
      Token token0 = xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.notEquals();
      token0.toString();
      token1.toString();
      token1.toString();
      String string0 = token0.toString();
      assertEquals("[ (19) (i\")", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (22) (1,)", string1);
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("g", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken(token0);
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer1.dots();
      assertEquals(13, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("[ (22) (1,)");
      xPathLexer3.div();
      Token token7 = xPathLexer2.minus();
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer3.nextToken();
      assertEquals("[", token8.getTokenText());
      
      Token token9 = xPathLexer2.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer2.leftBracket();
      assertEquals(3, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Y>CI%H*_l");
      xPathLexer0.consume();
      xPathLexer0.setXPath("Y>CI%H*_l");
      Token token0 = xPathLexer0.slashes();
      assertEquals("Y", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (13) (>)", string0);
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("CI", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      Token token3 = xPathLexer0.colon();
      assertEquals("%", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      assertEquals("H", token4.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("'cDg ^UX[vVVUyA");
      Token token5 = xPathLexer0.not();
      assertEquals("_", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals("", token6.getTokenText());
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("l", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.minus();
      token0.toString();
      token0.toString();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.star();
      xPathLexer1.comma();
      xPathLexer0.star();
      xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.colon();
      xPathLexer1.setPreviousToken(token1);
      xPathLexer1.rightBracket();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.dots();
      Token token2 = xPathLexer1.or();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume(0);
      xPathLexer0.nextToken();
      xPathLexer1.hasMoreChars();
      xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer(".~C&yp~(");
      xPathLexer2.number();
      xPathLexer2.dots();
      xPathLexer2.rightBracket();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer(".~C&yp~(");
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer2.nextToken();
      xPathLexer2.setXPath(") (");
      assertNotSame(xPathLexer2, xPathLexer1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Y>CI%H*_l");
      xPathLexer0.consume();
      xPathLexer0.setXPath("Y>CI%H*_l");
      Token token0 = xPathLexer0.slashes();
      assertEquals("Y", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (13) (>)", string0);
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("CI", token2.getTokenText());
      
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("[ (13) (>)");
      Token token3 = xPathLexer2.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("[", token3.getTokenText());
      
      Token token4 = xPathLexer1.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.star();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("*", token6.getTokenText());
      assertEquals(20, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":.cP6NK4|d+zp");
      XPathLexer xPathLexer1 = new XPathLexer("<0n%V`xscl");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(":", token0.getTokenText());
      
      Token token1 = xPathLexer1.minus();
      assertEquals("<", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer1.notEquals();
      String string0 = token2.toString();
      assertEquals("[ (22) (0n)", string0);
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(".", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals("c", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("#m[jt0h_@jdvzU");
      xPathLexer2.identifier();
      xPathLexer2.consume();
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer(")");
      Token token6 = xPathLexer1.not();
      assertEquals(23, token6.getTokenType());
      assertEquals("%", token6.getTokenText());
      
      Token token7 = xPathLexer2.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("m", token7.getTokenText());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("6", token8.getTokenText());
      assertEquals(30, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      token0.toString();
      Token token1 = xPathLexer0.slashes();
      Token token2 = xPathLexer0.dots();
      String string0 = token0.toString();
      assertEquals("[ (2) (F)", string0);
      
      Token token3 = xPathLexer0.pipe();
      String string1 = token3.toString();
      assertEquals("[ (17) ({)", string1);
      
      String string2 = token2.toString();
      assertEquals("[ (13) (0)", string2);
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      assertEquals("<4", token4.getTokenText());
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals(11, token1.getTokenType());
      assertEquals("q", token1.getTokenText());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      assertEquals("(", token5.getTokenText());
      
      xPathLexer0.identifier();
      xPathLexer0.consume();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("A", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("'cDg ^UX[vVVUyA");
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      assertEquals("@", token7.getTokenText());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("8", token8.getTokenText());
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals("", token9.getTokenText());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("B(dh7Mc[Hq=c!#");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("B", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("dh7Mc", token2.getTokenText());
      
      Token token3 = xPathLexer0.slashes();
      String string0 = token3.toString();
      assertEquals("[ (11) ([)", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (1) (()", string1);
      
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.mod();
      xPathLexer0.minus();
      xPathLexer1.consume(8);
      xPathLexer0.or();
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      assertEquals("q", token4.getTokenText());
      
      Token token5 = xPathLexer1.not();
      assertEquals(23, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token6 = xPathLexer2.nextToken();
      assertEquals((-1), token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("RoQXWh`]>{5G(|v");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("Ro", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("Q", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("X", token2.getTokenText());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("W", token3.getTokenText());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.minus();
      assertEquals("h", token4.getTokenText());
      assertEquals(6, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("uMV+9_;-");
      Token token5 = xPathLexer1.not();
      assertEquals("u", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals("MV", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("`]>{5G(|v", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.rightParen();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (2) (F)", string0);
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("q", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("0", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (2) (F)");
      xPathLexer1.whitespace();
      Token token3 = xPathLexer0.whitespace();
      String string1 = token3.toString();
      assertEquals("[ (-2) ()", string1);
      
      xPathLexer0.or();
      Token token4 = xPathLexer1.star();
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer1.number();
      assertEquals("2", token5.getTokenText());
      assertEquals(30, token5.getTokenType());
      
      xPathLexer1.nextToken();
      Token token6 = xPathLexer1.identifierOrOperatorName();
      assertNull(token6);
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals("(", token7.getTokenText());
      assertEquals(1, token7.getTokenType());
      
      Token token8 = xPathLexer0.dollar();
      assertEquals("<", token8.getTokenText());
      assertEquals(26, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("a0Y?Jjs,3k  J/Rx");
      Token token0 = xPathLexer0.whitespace();
      Token token1 = xPathLexer0.slashes();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.currentPosition();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer("a0Y?Jjs,3k  J/Rx");
      Token token2 = xPathLexer1.leftBracket();
      token2.toString();
      token2.toString();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.colon();
      xPathLexer0.and();
      Token token3 = xPathLexer0.operatorName();
      assertNull(token3);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.hasMoreChars();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer(".~C&yp~(");
      Token token0 = xPathLexer1.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer(".~C&yp~(");
      xPathLexer2.and();
      xPathLexer1.minus();
      xPathLexer2.not();
      xPathLexer2.star();
      xPathLexer1.nextToken();
      Token token1 = xPathLexer0.nextToken();
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("RoQXWh`]>{5G(|v");
      XPathLexer xPathLexer1 = new XPathLexer("RoQXWh`]>{5G(|v");
      Token token0 = xPathLexer1.not();
      assertEquals("R", token0.getTokenText());
      
      Token token1 = xPathLexer1.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      Token token2 = xPathLexer1.dots();
      assertEquals("Q", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      xPathLexer1.and();
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("R", token3.getTokenText());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("`]>{5G(|v", token5.getTokenText());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals("XWh", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('M');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("] #<t-+]UMYMMc");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("]", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath(" Exe;4=|.p1<");
      Token token1 = xPathLexer1.colon();
      assertEquals(" ", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("#<t-+]UMYMMc", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      xPathLexer0.identifier();
      Token token4 = xPathLexer1.nextToken();
      assertEquals("Exe", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      assertEquals("<t", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("] #<t-+]UMYMMc");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.star();
      assertEquals(" ", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("#", token1.getTokenText());
      
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("] #<t-+]UMYMMc");
      xPathLexer1.setXPath("");
      Token token2 = xPathLexer0.at();
      assertEquals("<", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer1.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer1.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("t-+]UMYMMc", token5.getTokenText());
      
      Token token6 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.isIdentifierChar('+');
      xPathLexer0.setXPath("ARiRO^E$NYb82");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("A", token0.getTokenText());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertNotNull(token2);
      assertEquals("RiRO", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer2.plus();
      assertEquals(5, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("^E$NYb82", token4.getTokenText());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      assertEquals("^", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":.cP6NK4|d+zp");
      XPathLexer xPathLexer1 = new XPathLexer(":.cP6NK4|d+zp");
      Token token0 = xPathLexer0.nextToken();
      String string0 = token0.toString();
      assertEquals("[ (18) (:)", string0);
      
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token1 = xPathLexer0.minus();
      assertEquals(".", token1.getTokenText());
      
      Token token2 = xPathLexer2.minus();
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer2.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("I/G");
      Token token4 = xPathLexer3.nextToken();
      assertEquals("I", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jT~h-8l5e9X~{}{");
      Token token0 = xPathLexer0.dots();
      assertEquals("j", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      token2.toString();
      token2.toString();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (22) (h-)", string0);
      
      xPathLexer0.setPreviousToken(token2);
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("8", token3.getTokenText());
      
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      assertEquals("l", token4.getTokenText());
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.and();
      xPathLexer0.isIdentifierStartChar('B');
      xPathLexer0.consume();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("e9X", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i\"1,g%AoDzy5lV?J#");
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer("2p_t");
      xPathLexer1.not();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("i", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer1.dots();
      assertEquals("p", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.and();
      Token token2 = xPathLexer1.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("_", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("\"", token3.getTokenText());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("t", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("2p_t");
      Token token5 = xPathLexer2.nextToken();
      assertEquals(30, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":.cP6NK4|d+zp");
      Token token0 = xPathLexer0.whitespace();
      Token token1 = xPathLexer0.slashes();
      assertEquals(".", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.nextToken();
      String string0 = token0.toString();
      assertEquals("[ (-2) ()", string0);
      
      xPathLexer0.currentPosition();
      Token token2 = xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer("SWV>GHl4o");
      Token token3 = xPathLexer1.leftBracket();
      String string1 = token3.toString();
      assertEquals("[ (3) (S)", string1);
      
      xPathLexer1.colon();
      xPathLexer0.setPreviousToken(token2);
      assertEquals("|", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals("d", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer1.plus();
      assertEquals("V", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i\"1,gAoDzy5lVFJ#");
      Token token0 = xPathLexer0.plus();
      assertEquals("i", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("\"", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.currentPosition();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("3");
      Token token2 = xPathLexer1.nextToken();
      assertEquals("3", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(",", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      xPathLexer0.getXPath();
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      assertEquals("gAoDzy5lVFJ", token4.getTokenText());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("#", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":.cP6NK4|d+zp");
      XPathLexer xPathLexer1 = new XPathLexer(":.cP6NK4|d+zp");
      xPathLexer0.minus();
      xPathLexer0.identifier();
      xPathLexer0.and();
      xPathLexer0.minus();
      xPathLexer1.not();
      XPathLexer xPathLexer2 = new XPathLexer("hG6%RZCq");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("hG6%RZCq");
      xPathLexer3.nextToken();
      xPathLexer3.pipe();
      String string0 = xPathLexer2.getXPath();
      assertEquals("hG6%RZCq", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("QLZHhhb!7\"h/|\")t5");
      Token token0 = xPathLexer0.not();
      assertEquals("Q", token0.getTokenText());
      
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("Z", token1.getTokenText());
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.minus();
      assertEquals("H", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("i\"1,gAoDzy5lV?J#");
      Token token5 = xPathLexer0.nextToken();
      assertEquals("b", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer1.rightParen();
      assertEquals(2, token6.getTokenType());
      assertEquals("i", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("3b^LRgMH~@");
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.slashes();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.currentPosition();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer("3b^LRgMH~@");
      Token token1 = xPathLexer1.leftBracket();
      token1.toString();
      xPathLexer1.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      Token token2 = xPathLexer1.or();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":.cP6NK4|d+zp");
      Token token0 = xPathLexer0.whitespace();
      Token token1 = xPathLexer0.dollar();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.currentPosition();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer(":.cP6NK4|d+zp");
      Token token2 = xPathLexer1.leftBracket();
      token2.toString();
      token2.toString();
      xPathLexer1.whitespace();
      token2.toString();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.colon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.or();
      boolean boolean0 = xPathLexer1.isIdentifierChar('$');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("RoQXWh`]>{5G(|v");
      XPathLexer xPathLexer1 = new XPathLexer("RoQXWh`]>{5G(|v");
      Token token0 = xPathLexer1.not();
      xPathLexer1.leftBracket();
      Token token1 = xPathLexer1.dots();
      xPathLexer1.and();
      xPathLexer0.minus();
      token0.toString();
      token1.toString();
      xPathLexer1.setPreviousToken(token0);
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.colon();
      xPathLexer1.identifierOrOperatorName();
      Token token2 = xPathLexer1.or();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":.cP6NK4|d+zp");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals(":", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("c", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.and();
      Token token3 = xPathLexer0.star();
      assertEquals("P", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("56DT");
      Token token5 = xPathLexer2.nextToken();
      assertEquals(30, token5.getTokenType());
      assertEquals("56", token5.getTokenText());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("6", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+i0");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("xCL@q%4Xbh/%");
      xPathLexer0.number();
      XPathLexer xPathLexer2 = new XPathLexer("?f&5yr^?hZc2I");
      xPathLexer2.star();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("BI=tH(");
      xPathLexer1.relationalOperator();
      Token token2 = xPathLexer1.nextToken();
      assertEquals("BI", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      xPathLexer1.and();
      xPathLexer1.or();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ ");
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer("H$o6");
      xPathLexer1.pipe();
      xPathLexer1.nextToken();
      xPathLexer0.consume((-1907));
      assertNotSame(xPathLexer0, xPathLexer1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":.cP6NK4|d+zp");
      Token token0 = xPathLexer0.not();
      assertEquals(":", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("c", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("a(~ 0'M(R\"Oh[");
      xPathLexer1.nextToken();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("P6NK4", token3.getTokenText());
      
      Token token4 = xPathLexer1.leftParen();
      assertEquals(1, token4.getTokenType());
      assertEquals("(", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i\"1,gAoDzy5lV?J#");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("i\"", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("1", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals(",", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("gAoDzy5lV", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      assertEquals("?", token4.getTokenText());
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("J#", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("9gTf:ppX$(`if");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("9", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("gTf:ppX$(`if", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.identifier();
      assertEquals("m", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.and();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ce.8ru3q7dx+");
      xPathLexer0.consume();
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.doubleColon();
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("ik2=SEL.`=");
      Token token0 = xPathLexer0.at();
      xPathLexer0.minus();
      token0.toString();
      xPathLexer0.dots();
      xPathLexer0.literal();
      xPathLexer0.leftBracket();
      xPathLexer0.dots();
      xPathLexer0.and();
      xPathLexer0.pipe();
      xPathLexer0.identifier();
      xPathLexer0.dots();
      xPathLexer0.number();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.literal();
      xPathLexer0.whitespace();
      xPathLexer0.star();
      xPathLexer0.consume((-1373));
      xPathLexer0.equals();
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      XPathLexer xPathLexer1 = new XPathLexer("|Z|S,C");
      Token token0 = xPathLexer1.rightBracket();
      assertEquals("|", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("Z", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("0U&>Tr8'_pXUT");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("0", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("U&>Tr8'_pXUT", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      assertEquals("U", token2.getTokenText());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("a");
      xPathLexer0.setXPath("a");
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":.cP6NK+h4|d+zp");
      Token token0 = xPathLexer0.dots();
      xPathLexer0.and();
      Token token1 = xPathLexer0.dollar();
      token1.toString();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("P", token2.getTokenText());
      
      String string0 = token1.toString();
      assertEquals("[ (26) (c)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals(":.", token0.getTokenText());
      assertEquals(14, token0.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("6", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("9gTf:ppX$(`if");
      Token token0 = xPathLexer0.equals();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (21) (9)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.getPreviousToken();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("gTf", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".1Olyn!c=]*1V8");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(31, token0.getTokenType());
      assertEquals(".1", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("Olyn!c=]*1V8", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("WN5S~rHaR|.");
      Token token0 = xPathLexer0.minus();
      assertEquals("W", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer0.slashes();
      assertEquals("N", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("5", token2.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("S~rHaR|.", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("klP>7>GxOj_4?MsA");
      xPathLexer0.and();
      Token token0 = xPathLexer0.minus();
      assertEquals("k", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals("l", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer0.slashes();
      assertEquals("P", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(">", token3.getTokenText());
      assertEquals(9, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      assertEquals("7", token4.getTokenText());
      
      Token token5 = xPathLexer1.nextToken();
      assertEquals((-1), token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":tm:2Bak/");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(":t", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals("m", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(":2", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("B", token3.getTokenText());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.notEquals();
      assertEquals("ak", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      assertEquals("", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mm");
      Token token0 = xPathLexer0.literal();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$/PYB");
      Token token0 = xPathLexer0.slashes();
      String string0 = token0.toString();
      assertEquals("[ (12) ($/)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("PYB", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" 4+;k4I!YK5ae|");
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      Token token1 = new Token(10, "", 10, 45);
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\".8bGV?[Z8");
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.dollar();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
