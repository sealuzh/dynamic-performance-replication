/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 10:43:34 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 11;
      Parser parser0 = new Parser("(ar]jITy", 11);
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      String string0 = "T[,e%30|;\\vD-";
      int int1 = (-2283);
      try { 
        Parser.parse("T[,e%30|;vD-", (-2283));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[,e%30|;vD-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        Parser.parse("?_%&y+@FIX&ePR&0", 8520);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        Parser.parse("+-OvD/qw%HJlL", 6528);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        Parser.parse("m(?P<", (-3111));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        Parser.parse("G[c-WNV.t7&,i05--q", 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `c-W`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      try { 
        Parser.parse("|?P<", 109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Regexp regexp0 = Parser.parse(".", 20);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        Parser.parse("X(", (-27));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `X(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "";
      Parser.parse("", 484);
      String string1 = "~W*d3w~;nL[3S6&~";
      int int0 = 4180;
      try { 
        Parser.parse("~W*d3w~;nL[3S6&~", 4180);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[3S6&~`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "*";
      int int0 = 1893;
      try { 
        Parser.parse("*", 1893);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "";
      int int0 = (-1156);
      Parser parser0 = new Parser("", (-1156));
      Parser.parse("", (-1156));
      try { 
        Parser.parse("/-LGfz;i%~)A8Qp~H)l", (-1156));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      try { 
        Parser.parse(")", 1232);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "D>`8{d(}A[^e5YxZ";
      int int0 = 2159;
      Parser parser0 = new Parser("D>`8{d(}A[^e5YxZ", 2159);
      Regexp[] regexpArray0 = new Regexp[8];
      int int1 = 0;
      try { 
        Parser.parse("D>`8{d(}A[^e5YxZ", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[^e5YxZ`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      try { 
        Parser.parse("{?,p+pGYA", (-1331));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `{?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      try { 
        Parser.parse("e[^,D", 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[^,D`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Regexp regexp0 = Parser.parse(":.", 625);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Parser parser0 = new Parser("WoxtDZjQ", (-435));
      Parser.parse("", (-435));
      Parser.parse("AI:v", 0);
      Regexp regexp0 = Parser.parse("WoxtDZjQ", 693);
      Regexp regexp1 = Parser.parse("WoxtDZjQ", (-435));
      Parser.parse("^c4%3`._F7.a,tY<DUm", (-3099));
      Regexp regexp2 = Parser.parse("^c4%3`._F7.a,tY<DUm", (-815));
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp2;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-435), (-815));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "^\\K00-cx{10F|FF}";
      Parser.parse("^K00-cx{10F|FF}", 256);
      int int0 = (-1458);
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 55;
      Parser parser0 = new Parser("-+)W&GU&:_>~Pu/Ec", 55);
      Regexp[] regexpArray0 = new Regexp[9];
      int int1 = 0;
      try { 
        Parser.parse("-+)W&GU&:_>~Pu/Ec", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|", 2105);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      int int0 = 0;
      Regexp regexp0 = Parser.parse("{&bs|ry", 0);
      regexpArray0[0] = regexp0;
      int int1 = 0;
      Regexp regexp1 = Parser.parse("", 0);
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp0);
      regexp4.max = 0;
      regexpArray0[4] = regexp4;
      Regexp regexp5 = Parser.parse("{&bs|ry", 0);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = Parser.parse("", 0);
      regexpArray0[6] = regexp6;
      int int2 = (-1891);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1891), 3716);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "(";
      try { 
        Parser.parse("(", 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Regexp regexp0 = Parser.parse("8|}d", (-684));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Regexp regexp0 = Parser.parse(" |", 16);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "61n>.y('~x-@ZP";
      int int0 = 569;
      try { 
        Parser.parse("61n>.y('~x-@ZP", 569);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `61n>.y('~x-@ZP`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      try { 
        Parser.parse("[", (-47));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Regexp regexp0 = Parser.parse("$C", 1);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = null;
      int int0 = 3679;
      Parser parser0 = new Parser((String) null, 3679);
      try { 
        Parser.parse("$n}uj[l?7", 3260);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[l?7`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 0;
      Parser.subarray((Regexp[]) null, 0, 0);
      Regexp[] regexpArray0 = new Regexp[6];
      String string0 = "\\C";
      Regexp regexp0 = Parser.parse("C", 0);
      regexpArray0[0] = regexp0;
      int int1 = 895;
      Regexp regexp1 = Parser.parse(string0, int1);
      regexpArray0[1] = regexp1;
      String string1 = null;
      String string2 = "";
      int[] intArray0 = new int[5];
      intArray0[0] = int1;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int1;
      regexp1.runes = intArray0;
      regexp0.equals(string2);
      // Undeclared exception!
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "mHWGw{";
      int int0 = (-2565);
      Parser.parse("mHWGw{", (-2565));
      String string1 = "f:H\\.yX~%";
      Regexp regexp0 = Parser.parse("f:H.yX~%", 97);
      Regexp[] regexpArray0 = new Regexp[1];
      regexp0.subs = regexpArray0;
      regexpArray0[0] = regexp0;
      int[] intArray0 = new int[4];
      intArray0[0] = 97;
      intArray0[1] = 97;
      intArray0[2] = (-2565);
      intArray0[3] = 97;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      String string0 = "9%CGoqYpBTVwOH1M]U";
      Parser.parse("KZ|W>3{@5~h#{\"0;=", (-2555));
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      Parser.parse("9%CGoqYpBTVwOH1M]U", (-2555));
      Parser.parse("p.yX~%", (-2555));
      int int0 = 3716;
      int int1 = 3;
      int int2 = 2401;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[0];
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 3636, 3636);
      Parser.parse("", 3636);
      Parser.parse("\f", 3636);
      Parser.parse("", 4694);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, (-3701), 36);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "\\p";
      Parser parser0 = new Parser("p", 534);
      Parser.parse("p", 81);
      String string1 = "\\.";
      int int0 = (-1067);
      Parser.parse(string1, int0);
      String string2 = "e(XQK\"vC/";
      int int1 = 1331;
      Parser.parse(string2, int1);
      int int2 = 1489;
      // Undeclared exception!
      try { 
        Parser.parse(string0, int2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      try { 
        Parser.parse("[-~Ye", 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-~Ye`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp0);
      regexpArray0[3] = regexp4;
      Parser.subarray(regexpArray0, 3636, 3636);
      try { 
        Parser.parse("O*RIzD[-oVh{XzHLh}", 3636);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-oVh{XzHLh}`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      try { 
        Parser.parse("O.*RIzD[-oVh{XzLh}", 2084);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-oVh{XzLh}`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[0];
      Parser.subarray(regexpArray0, 3636, 3636);
      Parser.parse("U;!dSaH", 11621);
      Parser.parse("invalid character class", 3636);
      Parser.parse("", 11621);
      try { 
        Parser.parse("w9(", (-539));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `w9(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d", 2132);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:^space:]", 4960);
      Parser.parse("[:^space:]", 1364);
      Regexp regexp1 = Parser.parse("invalid character class range", (-5253));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:]p", 3268);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      try { 
        Parser.parse("[]", (-964));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[]`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "(?-m:$)";
      Parser parser0 = new Parser("(?-m:$)", 316);
      Regexp regexp0 = Parser.parse("", 120598);
      Regexp regexp1 = new Regexp(regexp0);
      try { 
        Parser.parse(";*(%cccE{0,[&`d", 7072);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[&`d`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp2 = new Regexp(regexp_Op1);
      Regexp regexp3 = Parser.parse("{5", 656);
      Regexp regexp4 = Parser.parse("{5", (-1274));
      assertTrue(regexp4.equals((Object)regexp3));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      try { 
        Parser.parse(";*(%ccE{0,[&d", 4188);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[&d`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      try { 
        Parser.parse("&{0'\u0002;FW`{^e5R(", 316);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `&{0'\u0002;FW`{^e5R(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-m:$)", 1475);
      Parser.parse("e(XQK\"vC/", 1475);
      Parser.parse(".", (-3246));
      Regexp regexp1 = Parser.parse("(?-m:$)", 1489);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?s:.)", 8256);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "(?-:.)";
      try { 
        Parser.parse("(?-:.)", 625);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      try { 
        Parser.parse("(?:", 109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "s_$g2]jTl=&<c";
      int int0 = 36;
      Regexp regexp0 = Parser.parse("s_$g2]jTl=&<c", 36);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      regexp0.toString();
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      int int1 = 43;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 36, 43);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 4965;
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp1);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp1);
      regexpArray0[4] = regexp4;
      int int1 = 128359;
      Regexp regexp5 = Parser.parse("pp", 128359);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = Parser.parse("(?-m", 128359);
      regexpArray0[6] = regexp6;
      try { 
        Parser.parse("(?-m", 4965);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-m`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Parser parser0 = new Parser("Cypri|t", 8463);
      Regexp regexp0 = Parser.parse("Cypri|t", 105);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Parser.parse("(?-s:.)", 625);
      Parser parser0 = new Parser("(?-s:.)", (-2163));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Parser parser0 = new Parser("PR o9(z1sj1", 461);
      try { 
        Parser.parse("PR o9(z1sj1", 461);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `PR o9(z1sj1`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 461;
      Regexp regexp0 = Parser.parse("pXzHLh}", 461);
      String string0 = "qY'a3;xDaC8%md#.#Qj";
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "invalid character class range";
      String string1 = "(?(?-m:$)";
      try { 
        Parser.parse("(?(?-m:$)", 4960);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Parser parser0 = new Parser("^|0B{i@}.um", (-430));
      Regexp regexp0 = Parser.parse("^|0B{i@}.um", 2065);
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexp0.min = (-462);
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexpArray0[8] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 65294, (-430));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Regexp regexp0 = Parser.parse("N^|k", 4348);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "(?(?-m:$)";
      Parser.parse("ZbVN@~Wt", 49);
      int int0 = 1364;
      Parser.parse("borJ{4}v>:r,UHg0", 52);
      try { 
        Parser.parse("p??qR^(meKn7", 10213);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `p??qR^(meKn7`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Regexp regexp0 = Parser.parse("boJ{4}v:r,UHg", (-1724));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Parser parser0 = new Parser(",o\"_u.w!\"9bH]iof", 16);
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[2] = regexp2;
      Regexp.Op regexp_Op2 = Regexp.Op.CAPTURE;
      Regexp regexp3 = new Regexp(regexp_Op2);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = Parser.parse("rk{}{", 16);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp_Op1);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = new Regexp(regexp_Op0);
      regexpArray0[6] = regexp6;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 16, 16);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "(?:.";
      int int0 = 625;
      try { 
        Parser.parse("(?:.", 625);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?:.`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Regexp regexp0 = Parser.parse("$R%QF8? -,Bd%fi", 1893);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("$R%QF8? -,Bd%fi", (-2821));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Parser.parse("|;", (-1061));
      Parser.parse("|;", 49);
      Parser.parse("30", 1472);
      Parser.parse("|;", 316);
      Parser.parse("pp", 208);
      String string0 = "[:D-";
      int int0 = (-599);
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Parser parser0 = new Parser("(?-m:$)", 316);
      int int0 = 120598;
      Regexp regexp0 = Parser.parse("", 120598);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Parser.parse("", 120598);
      Parser.parse("C", 10213);
      String string0 = "tx7A'";
      Regexp regexp3 = Parser.parse(string0, int0);
      assertFalse(regexp3.equals((Object)regexp2));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 625;
      Regexp regexp0 = Parser.parse("(?:.", (-765));
      Regexp regexp1 = new Regexp(regexp0);
      try { 
        Parser.parse("ST`q.k]<c1()K)?l2f", 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "D>`8{d(}A[^e5YxZ";
      try { 
        Parser.parse("D>`8{d(}A[^e5YxZ", (-3));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[^e5YxZ`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 461;
      Parser parser0 = new Parser("--97R{", 461);
      Regexp regexp0 = Parser.parse("d", 461);
      Regexp regexp1 = new Regexp(regexp0);
      Parser.parse("--97R{", 109);
      String string0 = "\\C";
      try { 
        Parser.parse("c`bl9k6)ZgC[&uQmwhG", (-1364));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Regexp regexp0 = Parser.parse("N^ig+{AzQ", 115);
      Parser.parse("\n{", 2132);
      Regexp regexp1 = Parser.parse("(?:.", 94);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 3636;
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[1] = regexp2;
      regexp1.cap = 2941;
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[2] = regexp3;
      regexpArray0[3] = regexp2;
      Parser.subarray(regexpArray0, 3636, 3636);
      String string0 = "O*RIzD[-oVh{XzHLh}";
      try { 
        Parser.parse("O*RIzD[-oVh{XzHLh}", 2941);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-oVh{XzHLh}`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Parser parser0 = new Parser("STAR", 2284);
      Regexp regexp0 = Parser.parse("", 2284);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Parser.parse("", 2284);
      Parser.parse("invalid nested repetition operator", 461);
      Regexp regexp3 = Parser.parse("%#W/$M", 2284);
      assertFalse(regexp3.equals((Object)regexp2));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Regexp regexp0 = Parser.parse(".", 85);
      Parser.parse(".", 85);
      Parser.parse(".", 66);
      String string0 = regexp0.toString();
      assertEquals("(?-s:.)", string0);
      
      Regexp regexp1 = Parser.parse("(?i:.)", (-2872));
      Regexp regexp2 = Parser.parse(".", 120);
      assertTrue(regexp2.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      try { 
        Parser.parse(" Xg4$ww=/X[", 2132);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      try { 
        Parser.parse("k|a-G!$z^OrtXbvO|?", 105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "(";
      try { 
        Parser.parse("l|v)6qjlUtpQmak8F|", 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Regexp regexp0 = Parser.parse("X|d", 600);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x", 128);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", (-1923));
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexp0.subs = regexpArray0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 5908, 5908);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "^\\x00-\\x{10FFFF}";
      int int0 = 865;
      Parser.parse("^x00-x{10FFFF}", 865);
      String string1 = "(?(?(?(?-m:$)";
      try { 
        Parser.parse("(?(?(?(?-m:$)", 865);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x{", 2612);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^x0-cx{10FHF}", 1204);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Regexp regexp0 = Parser.parse("P\"R+-#7ab590lHc;` ", 1045);
      Parser parser0 = new Parser("P\"R+-#7ab590lHc;` ", 105);
      Regexp regexp1 = Parser.parse("P\"R+-#7ab590lHc;` ", 1045);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 55;
      Regexp regexp0 = Parser.parse(".", 55);
      regexp0.reinit();
      Parser.parse("0|", 2840);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      Object object0 = new Object();
      regexp0.equals(object0);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 305, 80);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Regexp regexp0 = Parser.parse("P{Xzx@HLh}", 3824);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Parser.parse(".", 85);
      Parser.parse(".", 85);
      Regexp regexp0 = Parser.parse(".", (-2052));
      Parser parser0 = new Parser(".", 4);
      Parser.subarray((Regexp[]) null, 3718, 3718);
      Parser.parse("J+8(nD=KK2cPQ9,\"=", 3247);
      Regexp regexp1 = Parser.parse("P{", (-2052));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "^\\x002\\v{10FFFF}";
      String string1 = "(?(?(?(?-m:$)";
      Parser.parse("^x002v{10FFFF}", 2561);
      try { 
        Parser.parse("(?(?(?(?-m:$)", 2561);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Parser.parse("{03l", 100);
      Parser parser0 = new Parser((String) null, (-1467));
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 3187);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "\\t:\\";
      int int0 = 2132;
      Parser.parse("\t:", 2132);
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: trailing backslash at end of expression
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0001", (-116));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0005Ss78b$e", 2105);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Regexp regexp0 = Parser.parse("haC|j$", 2132);
      Regexp regexp1 = Parser.parse("\u0005Ss78b$e", 124);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      try { 
        Parser.parse("VHf^f(U7\u0007U@QdIi", 3385);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `VHf^f(U7\u0007U@QdIi`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Parser parser0 = new Parser("\b", 625);
      Regexp regexp0 = Parser.parse(" O1#x>", 2067);
      Regexp regexp1 = Parser.parse("\b", 6468);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      try { 
        Parser.parse("n([j-82uh4 NzEL>0", 2088);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `j-8`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Regexp regexp0 = Parser.parse("GB#]/:4\u0005", 1333);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      String string0 = "\\A";
      int int0 = (-688);
      Regexp regexp0 = Parser.parse("A", (-688));
      regexpArray0[0] = regexp0;
      int int1 = 3601;
      Regexp regexp1 = Parser.parse("A", 3601);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexpArray0[0]);
      regexpArray0[2] = regexp2;
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\A`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Regexp regexp0 = Parser.parse("V<e.,H\u0006rcr{]3", 2137);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = (-3875);
      Parser parser0 = new Parser("@hDR?f,/@Q%", (-3875));
      try { 
        Parser.parse("PP\\", (-3875));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: trailing backslash at end of expression
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pP", (-2320));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PP", (-263));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Regexp regexp0 = Parser.parse("z", (-2368));
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexp0.toString();
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-2368), 968);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = (-1552);
      String string0 = "\\1p";
      Parser.parse("\u0001p", (-1552));
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      try { 
        Parser.parse("M[b-pNkd/LwN\"", (-43));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[b-pNkd/LwN\"`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[::]", 9);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Parser parser0 = new Parser("`~o)*h", 67);
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp0 = Parser.parse("Imperial_Aramaic", 67);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("`~o)*h", 67);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp2);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp1);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = Parser.parse("4tM7rB/]|Y", 97);
      regexpArray0[6] = regexp6;
      Regexp regexp7 = new Regexp(regexp1);
      regexpArray0[7] = regexp7;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 67, 67);
      assertNotSame(regexpArray0, regexpArray1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Regexp regexp0 = Parser.parse(">9y<o&v|>5{", 256);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      try { 
        Parser.parse("PP\\", (-2100));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: trailing backslash at end of expression
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\rjDCT\"*VA$?8gH^tF'", 2733);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Regexp regexp0 = Parser.parse("X|d", 125);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 127942, 103);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      try { 
        Parser.parse("5*\u0003P_N(~tvr^%Uq", (-51));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `5*\u0003P_N(~tvr^%Uq`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Regexp regexp0 = Parser.parse("X|d", 2144);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Parser parser0 = new Parser("g[f.Z`#80rnfQ", 1114111);
      Regexp[] regexpArray0 = new Regexp[6];
      try { 
        Parser.parse("=9o>C\u0004[[Qpevd/ku\"", (-828));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[[Qpevd/ku\"`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Parser parser0 = new Parser("invalid character class", 66639);
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_MATCH;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("[:;]kTk'@Q>", 66639);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("4uM%S", 8960);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = Parser.parse("[:;]kTk'@Q>", 9);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = Parser.parse("", 1);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = new Regexp(regexp_Op1);
      regexpArray0[6] = regexp6;
      Regexp regexp7 = new Regexp(regexp_Op0);
      regexpArray0[7] = regexp7;
      Regexp regexp8 = new Regexp(regexp7);
      regexpArray0[8] = regexp8;
      regexp8.cap = 55;
      int int0 = 85;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 42, 85);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[;:]p", 3268);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp0 = Parser.parse("Iu&", 1);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("Iu&", 8);
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp1);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = new Regexp(regexp3);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = Parser.parse(">E8+\u0003'R", 8);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = new Regexp(regexp0);
      regexpArray0[6] = regexp7;
      int int0 = 46;
      int int1 = 128541;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      int int0 = 120;
      Regexp regexp2 = Parser.parse("D", 120);
      regexpArray0[2] = regexp2;
      try { 
        Parser.parse("[:#i", 120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:#i`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Regexp regexp0 = Parser.parse(":|:HduX>IXS.U'", (-1024));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Parser parser0 = new Parser("g6", 120);
      Parser.parse(":|:HduX>IXS.U'", 120);
      Parser.parse("g6", 72);
      Parser.parse("&wOlc~`O:}'&AoBh", 53);
      int int0 = 1348;
      Parser.parse("D`1iqi`F~{U&U#", 1348);
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("b%8f*#HeR.Dt", 120);
      Regexp.Op regexp_Op1 = Regexp.Op.CHAR_CLASS;
      regexp1.op = regexp_Op1;
      regexpArray0[1] = regexp1;
      regexp0.reinit();
      int int1 = 8155;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 8155, (-984));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Parser.parse("\u0000", 9);
      assertFalse(regexp2.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 10;
      Parser.parse("C", 10);
      Regexp regexp0 = Parser.parse("P", 10);
      Parser parser0 = new Parser("[:Lh}", 10);
      Parser.parse("<U~\u0000+-NSzZrzeII<.", (-2527));
      Parser.parse("[:Lh}", 10);
      regexp0.max = 10;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 10, 10);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, 10, 3972);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Regexp regexp0 = Parser.parse("C_q\u0000*ko=]", 16);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[3] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 16, 16);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 4137;
      try { 
        Parser.parse("&w0\"\u0002;FPW`{^P5SN(", 4137);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `&w0\"\u0002;FPW`{^P5SN(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Parser parser0 = new Parser("xs!SNJyuB`+{`iN/", 10);
      Regexp regexp0 = Parser.parse("xs!SNJyuB`+{`iN/", 105);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Regexp regexp0 = Parser.parse("C_Pq\u0000ko>=] ", 1800);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "5OyWRQ";
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Parser.parse("\u0000", 9);
      assertFalse(regexp2.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?)T,P", 64);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = ";*(%cccE{0,9&d";
      try { 
        Parser.parse(";*(%cccE{0,9&d", (-704));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `;*(%cccE{0,9&d`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:x00-x{10FFFF}]", 2932);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:x00-x{10FFF}]", 8657);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "(?UT@";
      int int0 = 43596;
      try { 
        Parser.parse("(?UT@", 43596);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?UT`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Regexp regexp0 = Parser.parse(",|d", 65);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pLh}", 2541);
      assertNotNull(regexp0);
  }
}
