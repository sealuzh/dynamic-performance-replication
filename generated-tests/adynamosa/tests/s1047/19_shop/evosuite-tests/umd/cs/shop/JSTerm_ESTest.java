/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 05:30:10 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.LinkedList;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("JSUtil>>stringTokenizer is =eturnino %%");
      StringReader stringReader0 = new StringReader("-");
      stringReader0.ready();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      JSJshopVars.leftPar = 1;
      jSTerm0.addElement(jSTerm1);
      jSTerm1.isGround();
      jSTerm1.containsAll(jSTerm1);
      stringReader0.reset();
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm0.isGround();
      StringReader stringReader1 = new StringReader("-");
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm3.addAll(1, (Collection) jSTerm0);
      jSTerm0.makeFunction();
      JSJshopVars.greaterT = 40;
      jSTerm0.matches(jSTerm2);
      jSTerm2.print();
      jSTerm0.equals(jSTerm2);
      jSTerm0.isEval();
      jSTerm2.equals(jSTerm0);
      jSTerm0.iterator();
      StringReader stringReader2 = new StringReader("<[f*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("JSUtil>>stringTokenizer is =eturnino %%");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      JSJshopVars.leftPar = 1;
      jSTerm0.addElement(jSTerm1);
      jSTerm1.equals(jSTerm0);
      StringReader stringReader0 = new StringReader("!49{~@g$[30r$+#Hjbp");
      StringReader stringReader1 = new StringReader("");
      stringReader1.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      jSTerm0.makeEval(true);
      stringReader1.close();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(3000L);
      jSTerm1.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2 >= 2
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("W$m<I");
      StringReader stringReader0 = new StringReader("-");
      stringReader0.ready();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.addElement(jSTerm1);
      jSTerm1.isFunction();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.containsAll(jSTerm1);
      stringReader0.reset();
      JSTerm jSTerm3 = jSTerm0.call();
      Integer integer0 = new Integer(803);
      jSTerm1.removeElement(integer0);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      jSTerm2.isGround();
      StringReader stringReader1 = new StringReader("-");
      JSJshopVars.leftPar = 45;
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm3);
      jSTerm3.containsAll(jSTerm1);
      jSTerm1.isGround();
      jSTerm0.isEval();
      jSTerm3.equals(jSTerm0);
      jSTerm3.applySubstitutionPF(jSSubstitution0);
      jSTerm0.iterator();
      StringReader stringReader2 = new StringReader("xpectid");
      jSTerm0.matches(jSTerm3, jSSubstitution0);
      System.setCurrentTimeMillis(45);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("JSUtil>>stringTokenizer is =eturnino %%");
      StringReader stringReader0 = new StringReader("-");
      stringReader0.ready();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      JSJshopVars.leftPar = 1;
      jSTerm0.addElement(jSTerm1);
      jSTerm1.isFunction();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.containsAll(jSTerm1);
      stringReader0.reset();
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm2.isGround();
      StringReader stringReader1 = new StringReader("-");
      jSTerm0.makeFunction();
      JSJshopVars.greaterT = 40;
      jSTerm1.removeAllElements();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm3);
      jSTerm3.print();
      jSTerm3.containsAll(jSTerm1);
      jSTerm1.isGround();
      jSTerm0.isEval();
      jSTerm3.equals(jSTerm0);
      jSTerm0.iterator();
      StringReader stringReader2 = new StringReader("<[f*");
      jSTerm2.matches(jSTerm3, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("JSUtil>>stringTokenizer is =eturnino %%");
      StringReader stringReader0 = new StringReader("-");
      stringReader0.ready();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.addElement(jSTerm1);
      jSTerm1.isFunction();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.containsAll(jSTerm1);
      jSTerm0.toStr();
      stringReader0.reset();
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm2.isGround();
      StringReader stringReader1 = new StringReader("-");
      JSJshopVars.greaterT = 420;
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm1.removeAllElements();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm3);
      jSTerm3.containsAll(jSTerm1);
      jSTerm1.isGround();
      jSTerm0.isEval();
      streamTokenizer0.wordChars(420, 0);
      jSTerm2.isGround();
      StringReader stringReader2 = new StringReader("xpecting");
      StringReader stringReader3 = new StringReader("JSUtil>>stringTokenizer is =eturnino %%");
      jSTerm0.matches(jSTerm3, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("JSUtil>>stringTokenizer is =eturnino %%");
      StringReader stringReader0 = new StringReader("-");
      stringReader0.ready();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.addElement(jSTerm1);
      jSTerm1.isFunction();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.containsAll(jSTerm1);
      jSTerm0.toStr();
      stringReader0.reset();
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm3.isEmpty();
      jSTerm2.isGround();
      StringReader stringReader1 = new StringReader("-");
      JSJshopVars.greaterT = 420;
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm1.removeAllElements();
      jSTerm0.matches(jSTerm3);
      jSTerm3.containsAll(jSTerm1);
      jSTerm1.isGround();
      jSTerm0.isEval();
      streamTokenizer0.wordChars(420, 0);
      jSTerm2.isGround();
      String string0 = "xpecting";
      StringReader stringReader2 = new StringReader("xpecting");
      StringReader stringReader3 = null;
      try {
        stringReader3 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("JSUtil>>stringTokenizer is returning %%");
      StringReader stringReader0 = new StringReader("-");
      stringReader0.ready();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.addElement(jSTerm1);
      jSTerm1.isFunction();
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.print();
      System.setCurrentTimeMillis((-3093));
      StringReader stringReader1 = new StringReader("-");
      jSTerm1.equals(jSTerm2);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm3 = new JSTerm();
      JSJshopVars.backquote = (-4);
      jSTerm0.listIterator();
      jSTerm1.makeVariable();
      jSTerm3.isGround();
      System.setCurrentTimeMillis((-1203L));
      jSTerm3.equals(jSTerm0);
      JSTerm jSTerm4 = jSTerm1.call();
      JSTerm jSTerm5 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm1.isGround();
      jSTerm0.matches((JSPredicateForm) jSTerm3);
      JSTerm jSTerm6 = new JSTerm();
      jSTerm6.isEmpty();
      StringReader stringReader2 = new StringReader("%");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSSubstitution jSSubstitution1 = jSTerm5.matches(jSTerm3);
      JSSubstitution jSSubstitution2 = jSTerm3.matches(jSTerm4);
      jSTerm4.equals(jSTerm0);
      jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.print();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("JSUtil>>stringTokenizer is returning %%%");
      StringReader stringReader0 = new StringReader("-");
      stringReader0.ready();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.addElement(jSTerm1);
      jSTerm0.isGround();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.matches(jSTerm0);
      System.setCurrentTimeMillis((-1203L));
      StringReader stringReader1 = new StringReader("-");
      StringReader stringReader2 = new StringReader("1kH~m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm1.makeVariable();
      System.setCurrentTimeMillis((-2));
      JSTerm jSTerm4 = jSTerm1.call();
      jSTerm3.containsAll(jSTerm1);
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      jSTerm3.isGround();
      jSTerm1.isVariable();
      jSTerm0.isGround();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      jSTerm4.matches(jSTerm3);
      JSSubstitution jSSubstitution0 = jSTerm3.matches(jSTerm5);
      jSTerm4.equals(jSTerm1);
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.matches(jSTerm3);
      assertEquals("[JSUtil>>stringTokenizer is returning %%%, [JSUtil>>stringTokenizer is returning %%%]]", jSTerm0.toString());
      assertFalse(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("c;Be8Z3=8;l~B?m)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      streamTokenizer0.nval = 1.0;
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSJshopVars.slash = (-1437139303);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      JSJshopVars.leftBrac = 32;
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      JSJshopVars.coma = (-1437139303);
      jSTerm1.print();
      jSTerm2.print();
      jSTerm4.call();
      JSTerm jSTerm5 = jSTerm2.standardizerTerm();
      JSTerm jSTerm6 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm5.matches(jSTerm6, jSSubstitution0);
      assertEquals(8.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSSubstitution0, jSSubstitution1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("JSUtil>>stringTokenizer is returning %%%");
      StringReader stringReader0 = new StringReader("-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.addElement(jSTerm1);
      jSTerm0.isGround();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.containsAll(jSTerm1);
      stringReader0.reset();
      jSTerm1.cloneT();
      JSTerm jSTerm3 = jSTerm0.call();
      streamTokenizer0.wordChars((-2), (-2));
      jSTerm1.addAll((Collection) jSTerm2);
      jSTerm2.isGround();
      StringReader stringReader1 = new StringReader("-");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm3);
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm5.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("JSUtil>>stringTokenizer is returning %%%");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      boolean boolean0 = jSTerm0.equals(jSTerm0);
      assertFalse(boolean0);
      
      jSSubstitution0.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(43, stringBuffer0.length());
      
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution3.standarizerSubs();
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("JSUtil>>stringTokenizer is returning %%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm1.listIterator();
      jSTerm0.makeVariable();
      jSTerm1.spliterator();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm2.replaceAll(unaryOperator0);
      System.setCurrentTimeMillis(32);
      jSTerm1.isEmpty();
      assertFalse(jSTerm0.isConstant());
      
      StringBuffer stringBuffer1 = jSTerm2.toStr();
      assertEquals("JSUtil>>stringTokenizer ", stringBuffer1.toString());
      
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution5 = jSTerm0.matches(jSTerm1, jSSubstitution3);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      assertFalse(jSTerm3.isFunction());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isVariable());
      
      JSSubstitution jSSubstitution6 = jSTerm1.matches(jSTerm2);
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSSubstitution6.equals((Object)jSSubstitution5));
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSSubstitution6.fail());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm2.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.setSize(1290);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.print();
      jSTerm0.makeEval(true);
      jSTerm0.print();
      System.setCurrentTimeMillis(669L);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution2);
      assertEquals(1290, jSTerm0.capacity());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightBrac = 1;
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      jSTerm0.add((Object) "/");
      jSTerm0.print();
      jSTerm0.makeEval(true);
      jSTerm0.print();
      jSTerm0.makeVariable();
      System.setCurrentTimeMillis(2976L);
      System.setCurrentTimeMillis(2976L);
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      jSTerm0.add((Object) "/");
      jSTerm0.print();
      jSTerm0.makeEval(true);
      jSTerm0.print();
      System.setCurrentTimeMillis(2976L);
      System.setCurrentTimeMillis(2976L);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R(:W,m");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) stringReader0);
      jSTerm0.print();
      jSTerm0.makeEval(true);
      System.setCurrentTimeMillis((-1L));
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "\"");
      jSTerm0.print();
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertTrue(boolean0);
      assertFalse(jSTerm1.isConstant());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.trimToSize();
      StringReader stringReader0 = new StringReader("?;js#m'zt&F=&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm0.clear();
      jSTerm1.isGround();
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R(vW m");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("JSUtil>>stringTokenizer is returning %%%");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.equals(jSTerm0);
      jSSubstitution0.print();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.isVariable();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm1);
      jSTerm1.matches(jSTerm4, jSSubstitution0);
      jSTerm4.ensureCapacity(85);
      jSTerm0.isEval();
      jSTerm2.matches(jSTerm0);
      JSTerm jSTerm5 = jSTerm4.cloneT();
      jSTerm5.print();
      System.setCurrentTimeMillis((-1203L));
      StringReader stringReader0 = new StringReader("JSUtil>>stringTokenizer is returning %%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm6 = new JSTerm(streamTokenizer0);
      jSTerm5.listIterator();
      assertFalse(jSTerm4.isVariable());
      
      jSTerm4.makeVariable();
      jSTerm5.spliterator();
      System.setCurrentTimeMillis(1110L);
      jSTerm1.equals(jSTerm3);
      jSTerm1.call();
      jSTerm2.isGround();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm7 = new JSTerm(streamTokenizer0);
      jSTerm2.toStr();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm8 = new JSTerm(streamTokenizer2);
      jSTerm4.matches(jSTerm8);
      assertNotSame(jSTerm0, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("JSUtil>>stringTokenizer is returning %%%");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("JSUtil>>stringTokenizer is returning %%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      jSSubstitution0.print();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.isVariable();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm4);
      jSTerm4.matches(jSTerm5, jSSubstitution0);
      jSTerm4.isEval();
      jSTerm2.matches(jSTerm4);
      jSTerm3.cloneT();
      jSTerm1.print();
      System.setCurrentTimeMillis((-1203L));
      StringReader stringReader1 = new StringReader("(O1");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm6 = new JSTerm(streamTokenizer0);
      jSTerm2.listIterator();
      jSTerm6.makeVariable();
      jSTerm1.spliterator();
      System.setCurrentTimeMillis((-1203L));
      jSTerm0.equals(jSTerm6);
      jSTerm0.call();
      jSTerm3.isGround();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm7 = null;
      try {
        jSTerm7 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("0%z3Y_.x{[j>|I,");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("JSUtil>>stringTokenizer is returning %%%");
      StringReader stringReader0 = new StringReader("-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.addElement(jSTerm1);
      jSTerm0.isGround();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.containsAll(jSTerm1);
      JSTerm jSTerm3 = jSTerm1.cloneT();
      JSTerm jSTerm4 = jSTerm0.call();
      streamTokenizer0.wordChars((-2), (-2));
      JSTerm jSTerm5 = new JSTerm();
      jSTerm5.matches(jSTerm3);
      jSTerm4.cloneT();
      // Undeclared exception!
      try { 
        jSTerm2.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("JSUtil>>stringTokenizer is returning %%%");
      StringReader stringReader0 = new StringReader("-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.addElement(jSTerm1);
      UnaryOperator.identity();
      jSTerm0.isGround();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.matches(jSTerm2);
      jSTerm1.cloneT();
      jSTerm0.call();
      streamTokenizer0.wordChars((-2), (-2));
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("JSUtil>>stringTokenizer is returning %%%");
      StringReader stringReader0 = new StringReader("-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.addElement(jSTerm1);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<JSSubstitution, JSSubstitution> function0 = Function.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.replaceAll(unaryOperator0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSSubstitution0.remove((Object) function0);
      JSTerm jSTerm2 = jSTerm1.call();
      streamTokenizer1.commentChar(61);
      jSTerm2.isGround();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.matches(jSTerm2, jSSubstitution1);
      jSTerm2.matches(jSTerm1);
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("JSUtil>>stringTokenizer is returning %%%");
      StringReader stringReader0 = new StringReader("-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      streamTokenizer0.ttype = 10;
      Object object0 = jSTerm0.clone();
      jSTerm0.addElement(object0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.isEval();
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("I)h");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm0.isEval());
      
      jSTerm0.makeEval(true);
      jSTerm0.call();
      assertTrue(jSTerm0.isEval());
      
      boolean boolean0 = jSTerm0.isEval();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("JSUtil>>stringTokenizer is returning %%%");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.equals(jSTerm0);
      jSSubstitution0.print();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.isVariable();
      JSTerm jSTerm2 = new JSTerm();
      StringReader stringReader0 = new StringReader("JSUtil>>stringTokenizer is returning %%%");
      StringReader stringReader1 = new StringReader("xpecting");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-2008), 184);
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm3.add((Object) jSTerm1);
      jSTerm3.print();
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution0);
      StringReader stringReader2 = new StringReader("2r");
      jSTerm4.clonePF();
      jSTerm2.matches((JSPredicateForm) jSTerm3);
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm4.remove(33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 33
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.setSize(89);
      jSTerm0.isGround();
      jSTerm0.isVariable();
      jSTerm0.isVariable();
      StringReader stringReader0 = new StringReader("elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(89);
      jSTerm0.isGround();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      JSTerm jSTerm3 = new JSTerm();
      System.setCurrentTimeMillis(0L);
      jSTerm3.isEval();
      jSTerm3.equals(jSTerm0);
      jSTerm0.toStr();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("JSUtil>>stringTokenizer is returning %%%");
      int int0 = 831;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.setSize(831);
      jSTerm1.isGround();
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.setSize(89);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.isConstant();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.print();
      StringReader stringReader0 = new StringReader("Expecting constant symbol as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("JSUtil>>stringTokenizer is returning %%%");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      boolean boolean0 = jSTerm0.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.print();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.isVariable();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1, jSSubstitution2);
      assertFalse(jSSubstitution3.fail());
      
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.isEval();
      JSSubstitution jSSubstitution4 = jSTerm1.matches(jSTerm2);
      assertTrue(jSSubstitution4.fail());
      
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm3.print();
      assertTrue(jSTerm3.isFunction());
      
      System.setCurrentTimeMillis(1496L);
      boolean boolean1 = jSTerm1.isEval();
      assertFalse(boolean1);
      
      boolean boolean2 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm1.isConstant());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("JSUtil>>stringTokenizer is returning %%%");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("r4\"0NHiZT");
      StringReader stringReader1 = new StringReader("(^sc!Zr6eGY[R{6:}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.isEval();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("JSUtil>>stringTokenizer is returning %%%");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.print();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.addElement((Object) null);
      jSTerm0.clone();
      jSTerm1.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) ".");
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("JA;o4Y|Z+R;w;P^");
      JSJshopVars.interrogation = (-2001);
      jSTerm0.add((Object) "JA;o4Y|Z+R;w;P^");
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      jSTerm0.isConstant();
      int int0 = 36;
      jSTerm0.setSize(36);
      jSTerm0.setSize(36);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("hVmMWNR)}wjI=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSJshopVars.verticalL = 1923;
      streamTokenizer0.quoteChar((-3));
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertEquals(41, streamTokenizer0.ttype);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      jSTerm0.setSize(37);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.setSize(33);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = null;
      Object object0 = null;
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R(:,m");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "JSUtil>>stringTokenizer is returning %%%";
      JSJshopVars.rightPar = 0;
      jSTerm0.addElement("JSUtil>>stringTokenizer is returning %%%");
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.print();
      JSTerm jSTerm1 = new JSTerm();
      StreamTokenizer streamTokenizer0 = null;
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("?");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("JSUtil>>stringTokenizer is returning %%%");
      StringReader stringReader0 = new StringReader("min");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.isVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm3.isVariable();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.matches(jSTerm1, jSSubstitution1);
      StringReader stringReader1 = new StringReader(">");
      StringReader stringReader2 = new StringReader("");
      stringReader1.skip((-829L));
      jSTerm1.isConstant();
      JSTerm jSTerm4 = new JSTerm();
      StringReader stringReader3 = new StringReader("min");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      StringReader stringReader4 = new StringReader(" Term expected");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm4.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      StringReader stringReader0 = new StringReader("jsutil>>stringtokenizer");
      stringReader0.read();
      StringReader stringReader1 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.commentChar(41);
      jSTerm0.isGround();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, jSSubstitution2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("JSUtil>>stringTokenizer is returning %%%");
      StringReader stringReader0 = new StringReader("JSUtil>>stringTokenizer is returning %%%");
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.isVariable();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm1.matches(jSTerm2, jSSubstitution1);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.isEval();
      StringReader stringReader1 = new StringReader("");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm3.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      int int0 = 37;
      jSTerm0.setSize(89);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution2);
      jSTerm0.isVariable();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAll(jSTerm0);
      StringReader stringReader0 = new StringReader(",@?,j|zv>?v@,/=bC");
      StringReader stringReader1 = new StringReader("HXN;Q");
      JSJshopVars.percent = 2;
      StringReader stringReader2 = new StringReader("df=qM:w]Lgk");
      jSTerm0.isVariable();
      JSTerm jSTerm1 = new JSTerm();
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      stringReader2.read(charArray0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAll(jSTerm0);
      StringReader stringReader0 = new StringReader("_{t'5cPEtW");
      StringReader stringReader1 = new StringReader("HXN;Q");
      JSJshopVars.percent = 2;
      StringReader stringReader2 = new StringReader("df=qM:w]Lgk");
      jSTerm0.isVariable();
      char[] charArray0 = new char[5];
      charArray0[0] = 'p';
      stringReader2.read(charArray0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAll(jSTerm0);
      StringReader stringReader0 = new StringReader(",@?,j|zv>?v@,/=bC");
      StringReader stringReader1 = new StringReader("HXN;Q");
      JSJshopVars.percent = 2;
      StringReader stringReader2 = new StringReader("df=qM:w]Lgk");
      jSTerm0.isVariable();
      JSTerm jSTerm1 = new JSTerm();
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      stringReader2.read(charArray0);
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSSubstitution0.spliterator();
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" N) ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isConstant();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = jSTerm2.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm3);
      assertEquals("[nil]", jSTerm3.toString());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertTrue(jSSubstitution0.fail());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightPar = 0;
      jSTerm0.addElement("JSUtil>>stringTokenizer is returning %%%");
      StringReader stringReader0 = new StringReader("JSUtil>>stringTokenizer is returning %%%");
      stringReader0.read();
      JSJshopVars.minus = 40;
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(41);
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      
      jSTerm2.isConstant();
      assertFalse(jSTerm2.isEval());
      
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = jSTerm1.cloneT();
      assertTrue(jSTerm5.isFunction());
      assertNotSame(jSTerm1, jSTerm5);
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightPar = 0;
      jSTerm0.addElement("JSUtil>>stringTokenizer is returning %%%");
      StringReader stringReader0 = new StringReader("JSUtil>>stringTokenizer is returning %%%");
      stringReader0.read();
      JSJshopVars.minus = 40;
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(41);
      jSTerm0.isGround();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.isConstant();
      JSTerm jSTerm2 = new JSTerm();
      System.setCurrentTimeMillis(74);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.trimToSize();
      jSTerm0.setSize(37);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightPar = 0;
      jSTerm0.addElement("JSUtil>>stringTokenizer is returning %%%");
      StringReader stringReader0 = new StringReader("JSUtil>>stringTokenizer is returning %%%");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(41);
      jSTerm0.isGround();
      StringReader stringReader1 = new StringReader("");
      jSTerm0.isVariable();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "JSUtil>>stringTokenizer is re\\urning %%%";
      JSJshopVars.rightPar = 0;
      jSTerm0.addElement(string0);
      StringReader stringReader0 = new StringReader(string0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      
      StringReader stringReader1 = new StringReader("KwKrEJmP-");
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      JSTerm jSTerm2 = jSTerm0.call();
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "JSUtil>>stringTokenizer is re\\urning %%%";
      JSJshopVars.rightPar = 0;
      jSTerm0.addElement(string0);
      StringReader stringReader0 = new StringReader(string0);
      StringReader stringReader1 = new StringReader(string0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = 32;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.isVariable();
      assertFalse(jSTerm1.isEval());
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      assertFalse(jSTerm2.isEval());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSTerm2.isConstant());
      
      JSTerm jSTerm3 = jSTerm1.parseList(streamTokenizer0);
      assertEquals(32, streamTokenizer0.ttype);
      assertFalse(jSTerm3.isConstant());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      jSTerm0.setSize(37);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("HH;Gfy.38T_lXCpRl1u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAll(jSTerm0);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm1.isConstant());
      
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = new JSTerm();
      assertFalse(jSTerm4.equals((Object)jSTerm2));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      jSTerm0.setSize(37);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JSTerm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.trimToSize();
      jSTerm1.matches(jSTerm0);
      jSTerm0.isVariable();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSSubstitution1.fail());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertFalse(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = jSTerm0.call();
      boolean boolean0 = jSTerm1.isVariable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(jSTerm0.isVariable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAll(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("kx;h~p#RGtVW$*1cs");
      stringReader0.skip((-2063L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.print();
      jSTerm0.toStr();
      jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.listIterator((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      StringReader stringReader0 = new StringReader("oD@E");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      boolean boolean0 = jSTerm2.equals(jSTerm0);
      assertFalse(boolean0);
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isConstant());
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm2.isEval());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(jSTerm0.isVariable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ) ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("'h*%0rX ");
      jSTerm0.toStr();
      jSTerm0.isGround();
      jSTerm0.isEval();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      jSTerm0.trimToSize();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement(jSTerm1);
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = (-2);
      JSJshopVars.leftBrac = (-2);
      jSTerm0.makeVariable();
      jSTerm0.trimToSize();
      jSTerm0.ensureCapacity((-2));
      jSTerm0.isEval();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      System.setCurrentTimeMillis(2373L);
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(" ) ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[nil]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.matches(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      int int0 = 37;
      jSTerm0.setSize(37);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JSTerm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.isVariable();
      assertEquals("[%%%]", jSTerm0.toString());
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSSubstitution1.fail());
      assertFalse(jSTerm1.isVariable());
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertFalse(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = true;
      jSTerm0.setSize(10);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader(".n;f0qk8!!D");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm1.makeEval(false);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      stringReader0.skip(0L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution2.fail());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("P^>\":>gB2Q>U|djsrZ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("B,");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSJshopVars.dot = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightPar = 0;
      jSTerm0.addElement("JSUtil>>stringTokenizer is returning %%%");
      StringReader stringReader0 = new StringReader("JSUtil>>stringTokenizer is returning %%%");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = 41;
      streamTokenizer0.commentChar(41);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("nil");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      char[] charArray0 = new char[6];
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      
      charArray0[0] = '-';
      charArray0[1] = 'Z';
      charArray0[2] = 'i';
      charArray0[3] = 'F';
      charArray0[4] = '>';
      charArray0[5] = ' ';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate.isEqual((Object) "");
      JSTerm jSTerm3 = jSTerm1.call();
      assertNotSame(jSTerm1, jSTerm2);
      assertEquals(1, jSTerm3.capacity());
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSTerm0.addAll(0, (Collection) linkedList0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm2, jSSubstitution0);
      StringReader stringReader0 = new StringReader("ki");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("nil");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(44);
      StringReader stringReader1 = new StringReader("<");
      stringReader1.close();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Line : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Li/e : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(41, 41);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      jSTerm0.isEval();
      jSTerm0.equals(jSTerm0);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.greaterT = 701;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate1.and(predicate2);
      predicate2.negate();
      predicate2.test((Object) null);
      predicate1.negate();
      jSSubstitution0.removeIf(predicate0);
      jSSubstitution0.add((Object) "");
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSTerm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isFunction();
      jSTerm0.removeAllElements();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.sval = "umd.cs.shop.JSTerm";
      stringReader0.reset();
      streamTokenizer0.ordinaryChar(1264);
      jSTerm0.makeEval(false);
      jSTerm0.isFunction();
      jSTerm0.isEval();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Line : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      jSTerm0.isEval();
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("HAAE`}j=8vVV");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.resetSyntax();
      jSTerm0.makeConstant();
      JSJshopVars.backquote = (-1);
      jSTerm0.isConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = 'A';
      int int0 = 437;
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, (-1), 437);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isConstant();
      StringReader stringReader0 = new StringReader("sNi;NZ}zPF/y");
      // Undeclared exception!
      try { 
        jSTerm0.remove(611);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 611
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("kx;h~p#RGtVW$*1cs");
      stringReader0.skip((-2063L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.toStr();
      // Undeclared exception!
      try { 
        jSTerm1.listIterator((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.plus = 0;
      jSTerm0.makeVariable();
      JSJshopVars.rightPar = (-4118);
      StringReader stringReader0 = new StringReader("S:eb;<");
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.listIterator();
      jSTerm0.makeFunction();
      jSTerm0.isFunction();
      jSTerm0.makeConstant();
      jSTerm0.isEval();
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEval();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.apostrophe = (-1682);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSTerm0.addAll(0, (Collection) linkedList0);
      JSJshopVars.exclamation = 3290;
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      jSTerm0.isEval();
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "nil";
      StringReader stringReader0 = new StringReader("nil");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(44);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("notequal");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.print();
      assertFalse(jSTerm1.isEval());
      
      jSTerm1.makeEval(true);
      assertTrue(jSTerm1.isEval());
      
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 701;
      JSJshopVars.greaterT = 701;
      jSTerm0.parallelStream();
      Reader reader0 = null;
      JSJshopVars.interrogation = 1555;
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.VarCounter = 47;
      jSTerm0.isVariable();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
