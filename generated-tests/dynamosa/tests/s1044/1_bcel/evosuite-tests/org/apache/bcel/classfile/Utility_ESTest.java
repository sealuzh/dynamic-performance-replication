/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 23:27:28 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.charset.Charset;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.EnclosingMethod;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.compactClassName("short");
      Utility.getSignature("short");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "S";
      stringArray0[1] = "S";
      stringArray0[2] = "short";
      stringArray0[3] = "short";
      stringArray0[4] = "short";
      String string0 = Utility.methodTypeToSignature("? extends ", stringArray0);
      assertEquals("(LS;LS;SSS)L?;", string0);
      
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.methodTypeToSignature("S", stringArray0);
      boolean boolean0 = Utility.isSet((byte)0, (byte)0);
      assertFalse(boolean0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(LS;LS;SSS)LS;");
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "? extends ";
      objectArray0[2] = (Object) "short";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[5] = (Object) "(LS;LS;SSS)LS;";
      objectArray0[6] = (Object) "short";
      objectArray0[7] = (Object) "short";
      byte byte0 = Utility.typeOfSignature("S");
      assertEquals((byte)9, byte0);
      
      String string1 = Utility.methodSignatureToString("(LS;LS;SSS)LS;", "short", "char", true);
      assertEquals("char S short(S arg1, S arg2, short arg3, short arg4, short arg5)", string1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = Utility.clearBit(12, 83);
      assertEquals(12, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-68);
      ConstantFloat constantFloat0 = new ConstantFloat(250.0F);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2204), (-2204), false);
      assertEquals("0:    lor\n1:    newarray\t\t<<illegal type>>\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
      
      short short0 = Utility.searchOpcode(";NEQMf");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.classOrInterface((byte) (-127));
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Utility.classOrInterface(1961);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte) (-7);
      byteArray0[7] = (byte) (-73);
      byteArray0[8] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("pop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: pop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("Object");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Object
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte) (-60);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 180, (-2021), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 191, 609);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('/');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "";
      Object object1 = new Object();
      objectArray0[6] = object1;
      String string1 = Utility.printArray(objectArray0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "(-~K'";
      try { 
        Utility.typeOfMethodSignature("(-~K'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (-~K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.clearBit((byte)45, 88);
      String string0 = Utility.format(45, 2592, true, 't');
      Utility.classOrInterface((-1595));
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 45tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('e');
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-78);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-78), (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-75);
      byteArray0[0] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-55), 2941);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = true;
      Utility.getSignature("(Mc#j$sVcl5ec");
      byte[] byteArray0 = new byte[4];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (-2281), 163);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Gu7Hlu*f4-axi/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Gu7Hlu*f4-axi/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.signatureToString("FnAdASl]");
      Utility.searchOpcode("freturn");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, 191);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.getSignature("java.lang.");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-15);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-15), 156, true);
      Utility.methodSignatureReturnType("Ljava/lang/;");
      Utility.setBit(90, (byte)46);
      Utility.toHexString(byteArray0);
      Utility.accessToString(976, true);
      String string0 = "short";
      try { 
        Utility.typeOfMethodSignature("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[2];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t\t#");
      stringArray0[0] = "\t\t#";
      stringArray0[1] = "\t\t#";
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "Xf|1=bypYm06d", "\t\t#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Utility.compactClassName("short");
      Utility.getSignature("");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "L;";
      stringArray0[1] = "L;";
      stringArray0[2] = "";
      stringArray0[3] = "short";
      stringArray0[4] = "";
      Utility.methodTypeToSignature("? extends ", stringArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      Utility.methodTypeToSignature("L;", stringArray0);
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.classOrInterface(1961);
      Utility.classOrInterface(1129);
      Utility.typeOfSignature("V");
      Utility.setBit((byte)12, 3);
      try { 
        Utility.decode("class", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Utility.convertString("RRuhW");
      Utility.compactClassName("RRuhW", true);
      Utility.clearBit(700, 700);
      Utility.classOrInterface(19);
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      Utility.printArray((Object[]) null, true, true);
      try { 
        Utility.typeOfSignature("RRuhW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RRuhW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)27;
      try { 
        Utility.typeOfSignature("4nJLeq:!~jW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4nJLeq:!~jW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.typeOfSignature("Illegal type: ");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "JTKL", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Constant[] constantArray0 = new Constant[13];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-118);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.format(13, (byte) (-118), false, '|');
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("java.lang.String");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.String'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('7');
      Utility.toHexString(byteArray0);
      File file0 = MockFile.createTempFile("00 eb ae 06 00 bb 00", "00 eb ae 06 00 bb 00");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "00 eb ae 06 00 bb 00";
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)6;
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) "short";
      objectArray0[6] = (Object) (byte) (-69);
      objectArray0[7] = (Object) (byte) (-69);
      PrintStream printStream0 = mockPrintStream0.format("short", objectArray0);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) file0;
      objectArray1[1] = (Object) mockPrintStream0;
      objectArray1[2] = (Object) (byte)0;
      objectArray1[3] = (Object) (byte)0;
      objectArray1[4] = (Object) (byte) (-82);
      objectArray1[5] = (Object) (byte) (-69);
      objectArray1[6] = object0;
      objectArray1[7] = (Object) (byte)6;
      objectArray1[8] = (Object) (byte) (-82);
      Utility.printArray(printStream0, objectArray1);
      assertEquals(165L, file0.length());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = Utility.clearBit(180, (-558));
      assertEquals(180, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 45 66 45 45 45 45 87", string0);
      
      byte byte0 = Utility.typeOfSignature("Zr`l?N%3;#v7dr@i");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)86;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)86;
      byteArray0[6] = (byte)86;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)86, 26);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-108);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('x');
      byte[] byteArray1 = new byte[0];
      Utility.toHexString(byteArray1);
      try { 
        Utility.typeOfSignature("2\">zM*w\":yj3)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2\">zM*w\":yj3)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-6);
      String string0 = "Wqw2Iu,ZA";
      try { 
        Utility.typeOfSignature("Wqw2Iu,ZA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Wqw2Iu,ZA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.signatureToString("File ", true);
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("\tdefault = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\tdefault = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "A/>iT;1 <&IC<Mt/`";
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.clearBit(4318, (-238));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fdyT");
      ConstantClass constantClass0 = new ConstantClass(80);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, (-238), 4318);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("land", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.convertString("RRuhW");
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)34;
      int int0 = 52;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 52);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("E;v#@<U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E;v#@<U'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 214, (int) (byte)73);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      Utility.compactClassName("&kS|ZBvP%-d,id]e", true);
      Utility.compactClassName("&kS|ZBvP%-d,id]e", "!0|mhl0a:%)#f%mC)X", true);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('^');
      assertFalse(boolean0);
      
      Utility.compactClassName("Ev?", true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ev?");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ev?", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ev?'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-62);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1712, (byte) (-62));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.accessToString(113, true);
      try { 
        Utility.typeOfSignature("lreturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        Utility.equals(byteArray0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 0;
      Utility.isSet(59, 0);
      try { 
        Utility.decode("<", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)6, (int) (byte)6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)101;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)101, (int) (byte)101, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Utility.convertString("Synthetic");
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)68;
      byteArray0[1] = (byte)60;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\t(wide)";
      stringArray0[1] = "Synthetic";
      Utility.methodTypeToSignature("\t(wide)", stringArray0);
      MockFile mockFile0 = new MockFile("newarray", "short");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "(_gN-#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"(_gN-#\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte) (-42);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, 3, 81);
      // Undeclared exception!
      try { 
        Utility.signatureToString("5:    <illegal opcode>\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `5:    <illegal opcode>
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utility.clearBit(4318, (-238));
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      Utility.printArray(objectArray0, false, true);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) "org.apache.bcel.classfile.AnnotationDefault";
      Object object0 = new Object();
      objectArray1[1] = object0;
      objectArray1[2] = (Object) "(ne`i";
      objectArray1[3] = (Object) "";
      Object object1 = new Object();
      objectArray1[4] = object1;
      objectArray1[5] = (Object) "org.apache.bcel.classfile.AnnotationDefault";
      objectArray1[6] = (Object) "\"\", null, null, null, null, null";
      objectArray1[7] = object0;
      objectArray1[8] = (Object) "";
      Utility.printArray(objectArray1, false, false);
      try { 
        Utility.typeOfSignature("(ne`i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (ne`i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("4Uoh|*t", "4Uoh|*t", "4Uoh|*t", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4Uoh|*t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, false);
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("o$A");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(3522, (byte)0);
      constantArray0[1] = (Constant) constantNameAndType0;
      int int0 = (-2632);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2632), (-465));
      constantArray0[2] = (Constant) constantMethodHandle0;
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((InputStream) null, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "float";
      stringArray0[1] = "float";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)25;
      byteArray0[3] = (byte)59;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray0 = new byte[7];
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[2];
      byte byte0 = (byte) (-86);
      byteArray1[0] = (byte) (-86);
      byteArray1[1] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)80, 177);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = Utility.signatureToString("Invalid type: ");
      assertEquals("int", string0);
      
      String string1 = Utility.getSignature("Invalid type: ");
      assertEquals("LInvalid;", string1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.setBit((-254), (-254));
      Utility.compactClassName("org.apache.bcel.classfile.Utility", true);
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.Utility", "V", "goto_w", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Utility.clearBit(0, (-1689));
      Utility.searchOpcode("");
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "r5QF";
      try { 
        Utility.methodSignatureArgumentTypes("r5QF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: r5QF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)85, (int) (byte)85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "\"U";
      try { 
        Utility.typeOfSignature("\"U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utility.clearBit(4318, (-238));
      String string0 = "";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      Utility.isSet((-238), (-2463));
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)26;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 1a 00 00 00 00", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(548, 548);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-71);
      constantPool0.copy();
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("29 b9 1b 3c 04 00 00", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte byte0 = (byte) (-50);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = null;
      int int0 = (-1942);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (-1942), (int) (byte) (-50), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)88;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-79), (int) (byte) (-79));
      assertEquals("0:    nop\n1:    pop2\n2:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = Utility.compactClassName("7", "7", false);
      assertEquals("7", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("ifnonnull\t\t#6939", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("c7 1b 1b 1b", string1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-100);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-100), (-365));
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    astore_0\n1:    ifge\t\t#-25599\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    astore_0
         // 1:    ifge\t\t#-25599
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // 7:    nop
         // 8:    nop
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.accessToString(1396, false);
      Integer integer0 = new Integer(616);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, 2437, 724, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utility.convertString("RRuhW");
      Utility.compactClassName("RRuhW", true);
      Utility.clearBit(700, 700);
      Utility.classOrInterface(19);
      Utility.printArray((Object[]) null, true, true);
      try { 
        Utility.methodSignatureReturnType("QX1-tx8<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QX1-tx8<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.convertString("SimpleElementValue class does not know how to stringify type ");
      Utility.compactClassName("cHCn4i>[+kZ", true);
      Utility.classOrInterface((-3127));
      Utility.classOrInterface(3941);
      try { 
        Utility.typeOfSignature("@?~z}5@kz5tck&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @?~z}5@kz5tck&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-21);
      String string0 = "";
      Utility.searchOpcode("lookupswitch");
      String string1 = "athrow";
      Utility.compactClassName("athrow");
      String string2 = "jsr_w";
      try { 
        Utility.methodSignatureArgumentTypes("jsr_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jsr_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)98;
      byteArray1[1] = (byte)98;
      String string0 = Utility.codeToString(byteArray1, constantPool0, (-3884), (-1537));
      assertEquals("0:    fadd\n1:    fadd\n", string0);
      
      String string1 = Utility.printArray((Object[]) constantArray0, false, false);
      assertEquals("null", string1);
      
      byte byte0 = Utility.typeOfSignature("FnAdASl]");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)45;
      byteArray0[2] = (byte) (-109);
      byteArray0[5] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)45);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)45;
      byteArray1[1] = (byte)45;
      byteArray1[2] = (byte) (-109);
      byteArray1[3] = (byte)45;
      byteArray1[4] = (byte) (-109);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 45, 91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte) (-42);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-81), 52);
      assertEquals("0:    if_acmpeq\t\t#0\n3:    dreturn\n4:    dstore_0\n5:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "Synthetic";
      Utility.convertString("Synthetic");
      try { 
        Utility.methodSignatureArgumentTypes("\t(wide)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t(wide)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = Utility.convertString("e_");
      String string1 = Utility.replace("e_", "E3!6RXjMH%}dM>*qm*", "E3!6RXjMH%}dM>*qm*");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utility.classOrInterface(1961);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte)94);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)94, (int) (byte)94);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)45;
      byteArray0[2] = (byte) (-110);
      byteArray0[5] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      byteSequence0.readByte();
      byteSequence0.reset();
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 00 92 00 00 2d", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("88 00 00 00", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)76;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)81;
      byteArray1[1] = (byte)76;
      byteArray1[2] = (byte)89;
      byteArray1[3] = (byte)76;
      byteArray1[4] = (byte)81;
      byteArray1[5] = (byte)81;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 454, (int) (byte)89);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utility.compactClassName("short");
      Utility.getSignature(":");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "L:;";
      stringArray0[1] = "L:;";
      stringArray0[2] = ":";
      stringArray0[3] = "short";
      stringArray0[4] = ":";
      Utility.methodTypeToSignature("? extends ", stringArray0);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)48;
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)27;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)123;
      Utility.replace("CONSTANT_Utf8", "V", "invokeinterface");
      Utility.signatureToString("D!?MvVv");
      Utility.typeOfSignature("Bj>P={=X;qz\"T:k");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}&hk I");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Utility.clearBit(4318, (-238));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)69;
      Utility.isJavaIdentifierPart('H');
      Utility.toHexString(byteArray0);
      Utility.convertString("@&*?k9Sf");
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-100);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-100), (-365));
      assertEquals("0:    astore_0\n1:    ifge\t\t#-25599\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("4b 9c 9c 00 00 00 00 00 00", string1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = Utility.isJavaIdentifierPart('Z');
      assertTrue(boolean0);
      
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 00 00 00 00 00 00", string0);
      
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      String string1 = Utility.printArray(objectArray0, true);
      assertEquals("{null}", string1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)70;
      byteArray1[1] = (byte)70;
      byteArray1[2] = (byte)70;
      byteArray1[3] = (byte) (-81);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence1, constantPool0, true);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("46 af 46 00 00 00", string0);
      
      String string1 = Utility.accessToString((int) (byte) (-81));
      assertEquals("public private protected static synchronized transient native interface abstract strictfp synthetic annotation enum", string1);
      
      Utility.codeToString(byteSequence1, constantPool0, true);
      String string2 = Utility.encode(byteArray1, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-88);
      byteArray0[1] = (byte) (-88);
      byteArray0[3] = (byte)0;
      Utility.isJavaIdentifierPart('B');
      Utility.toHexString(byteArray0);
      Utility.convertString("@*?9Sf");
      Utility.convertString("=r_9CBG#RjM5");
      // Undeclared exception!
      try { 
        Utility.signatureToString("PD*BhTYPG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PD*BhTYPG'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = Utility.classOrInterface(1946);
      assertEquals("interface", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)95;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$A$A_$A$A", string1);
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)95;
      byteArray1[1] = (byte)95;
      byteArray1[2] = (byte)95;
      byteArray1[3] = (byte)95;
      boolean boolean0 = Utility.equals(byteArray1, byteArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Utility.convertString("NV(1Kq`\" C");
      Utility.compactClassName("Unreachable default case reached!", true);
      Utility.classOrInterface(178);
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.signatureToString("U`,|2yA~8xTU&", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U`,|2yA~8xTU&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('{');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)98;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("0$a9o$ff$eeb", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray1 = Utility.decode("0$a9o$ff$eeb", false);
      assertArrayEquals(new byte[] {(byte)48, (byte) (-87), (byte)111, (byte) (-1), (byte) (-18), (byte)98}, byteArray1);
      assertEquals(6, byteArray1.length);
      
      String string1 = Utility.getSignature("0$a9o$ff$eeb");
      assertEquals("L0$a9o$ff$eeb;", string1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = Utility.clearBit(57, 54);
      assertEquals(57, int0);
      
      String string0 = Utility.classOrInterface(19);
      assertEquals("class", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) "\t(wide)";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertEquals("{null, null, \"\t(wide)\"}", string1);
      
      byte[] byteArray0 = new byte[0];
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)58;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-83), (int) (byte) (-83));
      assertEquals("0:    pop2\n1:    astore\t\t%0\n", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("58 3a 00", string1);
      
      String string2 = Utility.getSignature("0:    pop2\n1:    astore\t\t%0\n");
      assertEquals("L0:;", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string3 = Utility.accessToString(74, true);
      assertEquals("private static volatile", string3);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-15);
      byteArray0[7] = (byte) (-15);
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)91;
      Utility.classOrInterface((byte)86);
      Utility.isSet((byte)86, (byte) (-15));
      objectArray0[3] = (Object) (byte)86;
      objectArray0[4] = (Object) (byte)91;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Utility.compactClassName("short");
      Utility.getSignature(":");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "L:;";
      stringArray0[1] = "L:;";
      stringArray0[2] = ":";
      stringArray0[3] = "short";
      stringArray0[4] = ":";
      Utility.methodTypeToSignature("? extends ", stringArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      Utility.methodTypeToSignature("L:;", stringArray0);
      Utility.isSet((byte)48, (byte)48);
      Utility.replace(";qxdEbh*:", ":", "(LL:;;LL:;;L:;SL:;)LL:;;");
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "? extends ";
      objectArray0[2] = (Object) "short";
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)31, (-1848));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = Utility.signatureToString("ZfuW}$J", true);
      assertEquals("boolean", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      String string1 = Utility.accessToString(1024);
      assertEquals("abstract", string1);
      
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$q$$$j$b1$3cz", string2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = new Integer((-238));
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      String string0 = Utility.convertString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "float";
      stringArray0[1] = "float";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.methodTypeToSignature("float", stringArray0);
      assertEquals("(FF)F", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte)22;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence1, constantPool0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lload\t\t%0", string1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Utility.replace("gt$g!bBq+^GtROtCs", "gt$g!bBq+^GtROtCs", "gt$g!bBq+^GtROtCs");
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[2];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t\t#");
      stringArray0[0] = "\t\t#";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)102;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("0e 55 19 3c 84 3e 66", string0);
      
      String string1 = Utility.signatureToString("JG}5lqy5'4:0");
      assertEquals("long", string1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)93;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 187, (-313));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Utility.classOrInterface(2053);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte)95);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)95, (-1382));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Utility.isJavaIdentifierPart('D');
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-87);
      Utility.toHexString(byteArray1);
      Utility.accessToString((int) (byte) (-87));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)48, 196);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('7');
      Utility.toHexString(byteArray0);
      Utility.convertString("~<]&'#bZc#es");
      Utility.convertString("@&*?k9Sf");
      // Undeclared exception!
      try { 
        Utility.signatureToString("=r_9CBG#RjM5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `=r_9CBG#RjM5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-286), (-1723545902));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = Utility.classOrInterface(18);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eZ)mD_G?[)/C6!nbs");
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore\t\t%94", string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("38 5e 38 00 00 00 00", string2);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Utility.classOrInterface(0);
      Utility.isJavaIdentifierPart('6');
      int int0 = 173;
      Utility.format(92, 173, true, 'T');
      Utility.classOrInterface(0);
      String string0 = "&}nWH";
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "92TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT";
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "92TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT";
      objectArray0[3] = (Object) "&}nWH";
      objectArray0[4] = (Object) "class";
      objectArray0[5] = (Object) "class";
      objectArray0[6] = (Object) "92TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT";
      Object object1 = new Object();
      objectArray0[7] = object1;
      Utility.printArray(objectArray0, false, true);
      try { 
        Utility.typeOfSignature("92TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 92TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.signatureToString("FnAdASl]");
      Utility.searchOpcode("freturn");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)92;
      Utility.codeToString(byteArray0, (ConstantPool) null, 2, (int) (byte) (-6));
      try { 
        Utility.methodSignatureArgumentTypes("Cqqw>?V)T hP#l~wm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Cqqw>?V)T hP#l~wm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 00 00 00 00", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Utility.decode("class", false);
      Utility.clearBit((-491), (-591));
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte byte0 = (byte)28;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)28;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)28, 118);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)45;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-107);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte) (-82);
      byteArray0[8] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      int int0 = 73;
      try { 
        Utility.methodSignatureArgumentTypes("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(926, 926);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.compactClassName("\"", "r3:vH!gp`Rm?5BO+z_<", true);
      try { 
        Utility.typeOfSignature("<o5[x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <o5[x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-1);
      String string0 = " arg";
      // Undeclared exception!
      Utility.replace("gt$g!bBq+^GtROtCs", "", "org.apache.bcel.classfile.InnerClass");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-83);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)19, (-4506));
      assertEquals("19:   nop\n", string0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-2282), (-2282));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("3e 00 00 00", string0);
      
      String string1 = Utility.convertString("istore_3");
      assertEquals("istore_3", string1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Utility.isSet((-2282), (-2282));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)75;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("isub", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType(")c&cvn2gr_I\fYsU7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `c&cvn2gr_I\fYsU7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Utility.isSet((-2282), (-2282));
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte) (-6);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 67, 138);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      String string0 = "i2b";
      Utility.replace("i2b", "i2b", "i2b");
      String string1 = "(9%p(pMZo#]MjqyL6Ak";
      try { 
        Utility.methodSignatureArgumentTypes("(9%p(pMZo#]MjqyL6Ak");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `9%p(pMZo#]MjqyL6Ak'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = Utility.compactClassName("_", true);
      assertEquals("_", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(256, 2588);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-34));
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-34));
      constantArray0[3] = (Constant) constantInteger0;
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantMethodref1.clone();
      constantArray0[4] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore\t\t%222", string1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)77;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 102, 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Utility.convertString("vm");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)5;
      Utility.toHexString(byteArray0);
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureReturnType("double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `double'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Utility.classOrInterface(0);
      byte[] byteArray0 = new byte[8];
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read(byteArray0);
      Utility.format(0, 8, true, 'A');
      Utility.classOrInterface(194);
      try { 
        Utility.typeOfSignature("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ba^7j0[;b";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("\t\t#", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[;b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Utility.isSet((-2282), (-2282));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-59);
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-59), (int) (byte) (-59), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.getSignature("Only element values of type enum can be built with this ctor - type specified: ");
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("? extends ", stringArray0);
      Utility.methodTypeToSignature(")Tt >gji5r@tr", stringArray0);
      Utility.isSet((byte)48, (byte)48);
      Utility.replace("? extends ", "Only element values of type enum can be built with this ctor - type specified: ", ";qxdEbh*:");
      // Undeclared exception!
      try { 
        Utility.signatureToString(";qxdEbh*:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;qxdEbh*:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Utility.replace("", ">", "");
      String[] stringArray0 = new String[4];
      stringArray0[0] = ">";
      stringArray0[1] = ">";
      stringArray0[2] = "\"";
      stringArray0[3] = "";
      Utility.methodTypeToSignature("", stringArray0);
      Utility.accessToString(0, true);
      Utility.printArray((Object[]) stringArray0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-66);
      byte byte0 = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-94);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfSignature("athrow");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: athrow
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)126;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-241), (int) (byte)126);
      assertEquals("0:    sastore\n1:    iand\n2:    sastore\n3:    sastore\n4:    iand\n5:    lstore_0\n6:    iand\n", string0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      String string0 = "FnAdASl]";
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)98;
      byteArray1[1] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (-3884), (-1537));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fadd
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-107);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)45, 73);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)45;
      byteArray0[2] = (byte) (-110);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)45);
      // Undeclared exception!
      try { 
        Utility.signatureToString("aload_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `aload_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("StackMap", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature("Ku9thZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ku9thZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Utility.accessToString((-2374), true);
      Utility.setBit((-2374), 254);
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1499, (-2374), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "5:r[GGcz\"";
      try { 
        Utility.typeOfSignature("5:r[GGcz\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5:r[GGcz\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Utility.searchOpcode("k1a");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)66;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)66, 4711);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-16);
      byte byte0 = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-110);
      Utility.encode(byteArray0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.decode("$f0$z$cf$92", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodTypeToSignature("(.>VLS", (String[]) null);
      Utility.fillup("", (byte) (-110), false, '4');
      Utility.getSignature("");
      Utility.printArray((Object[]) null, false, false);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Utility.compactClassName("short");
      Utility.getSignature(":");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "L:;";
      stringArray0[1] = "L:;";
      stringArray0[2] = ":";
      stringArray0[3] = "short";
      stringArray0[4] = ":";
      Utility.methodTypeToSignature("? extends ", stringArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      Utility.methodTypeToSignature("L:;", stringArray0);
      Utility.isSet((byte)48, (byte)48);
      String string0 = Utility.replace(";qxdEbh*:", ":", "(LL:;;LL:;;L:;SL:;)LL:;;");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)48;
      objectArray0[1] = (Object) "? extends ";
      objectArray0[2] = (Object) "short";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "L:;";
      objectArray0[5] = (Object) "(LL:;;LL:;;L:;SL:;)LL:;;";
      objectArray0[6] = (Object) ":";
      objectArray0[7] = (Object) ":";
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("3cF7yrV$?37", false);
      Utility.classOrInterface((-3118));
      Utility.classOrInterface((-3118));
      try { 
        Utility.typeOfSignature("3cF7yrV$?37");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3cF7yrV$?37
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('7');
      Utility.toHexString(byteArray0);
      Utility.convertString("");
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 254, false, '7');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)80;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)80, (-2559));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)80, (int) (byte)82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      short short0 = Utility.searchOpcode("k1a");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("42 42 42 00 00 00", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.accessToString((int) (byte)0);
      assertEquals("", string0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Utility.accessToString((-2374), false);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Utility.searchOpcode("k1a");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte) (-14);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 180, 2295);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)66;
      String string0 = Utility.signatureToString("J`$w", false);
      assertEquals("long", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("42 00 00 00 00 00 00", string1);
      
      boolean boolean0 = Utility.isSet((byte)66, 43);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.signatureToString("BBwQ9:']=WQ\"", false);
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = Utility.signatureToString("CS$?4t84~8hkd", false);
      assertEquals("char", string0);
      
      String string1 = Utility.compactClassName("CS$?4t84~8hkd", "[]", false);
      assertEquals("CS$?4t84~8hkd", string1);
      
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('B');
      Utility.toHexString(byteArray0);
      String string0 = "org.apache.bcel.util.ClassPath$Zip";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "org.apache.bcel.util.ClassPath$Zip");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2958), (int) (byte)16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Utility.getSignature("Illegal type: ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)126;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-110), 512);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)58;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-83), (int) (byte) (-83));
      Utility.encode(byteArray0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-88), (int) (byte)84, true);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "0:    bastore\n", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      Utility.signatureToString("LL#;;V", true);
      String[] stringArray0 = Constants.ITEM_NAMES;
      // Undeclared exception!
      try { 
        Utility.signatureToString("L#", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup2_x2", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Utility.isSet(3185, 3185);
      Utility.format(180, 3185, true, 'e');
      Utility.classOrInterface(3185);
      try { 
        Utility.typeOfSignature("Yvr./");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Yvr./
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Utility.setBit(578, (byte)0);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-69);
      byteArray1[1] = (byte) (-69);
      byteArray1[2] = (byte) (-69);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-69);
      byteArray1[5] = (byte)0;
      Utility.equals(byteArray1, byteArray0);
      try { 
        Utility.typeOfMethodSignature("byte");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = ".";
      try { 
        Utility.typeOfSignature(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)89;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "org.apache.commons.io.filefilter.OrFileFilter", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)97;
      Utility.equals(byteArray0, byteArray0);
      Utility.methodSignatureReturnType("V", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("gt$g!bBq+^GtROtCs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `gt$g!bBq+^GtROtCs'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 29, true, '\"');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Utility.convertString("RRuhW");
      Utility.compactClassName("RRuhW", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "RRuhW";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RRuhW");
      ConstantClass constantClass0 = new ConstantClass(766);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      // Undeclared exception!
      try { 
        Utility.signatureToString("RRuhW", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RRuhW'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Utility.isSet((-2282), (-2282));
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Utility.searchOpcode("goto_w");
      Utility.accessToString(62);
      try { 
        Utility.typeOfSignature("private protected static final synchronized");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: private protected static final synchronized
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ba^7j0[;b";
      stringArray0[1] = "ba^7j0[;b";
      stringArray0[2] = "ba^7j0[;b";
      stringArray0[3] = "ba^7j0[;b";
      stringArray0[4] = "ba^7j0[;b";
      stringArray0[5] = "ba^7j0[;b";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("ba^7j0[;b", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[;b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)4;
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-95);
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte) (-85);
      byteArray1[3] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-95), (-785));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmplt\t\t#1195
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Utility.isSet(1466, 1466);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)46;
      Utility.equals(byteArray0, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-67), (-3566));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 21038. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String[] stringArray0 = new String[6];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t\t#");
      stringArray0[1] = "\t\t#";
      String string0 = Utility.printArray((Object[]) stringArray0, false, false);
      assertEquals("null, \t\t#, null, null, null, null", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte) (-87);
      byteArray0[8] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(3, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ret\t\t%31", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-73);
      byteArray0[3] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readFloat();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 519, (int) (byte)48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("RRuhW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RRuhW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-110);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)72, 74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Utility.isSet(49, 49);
      Utility.isSet(49, 49);
      // Undeclared exception!
      try { 
        Utility.signatureToString("The list of names must not be null", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The list of names must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Utility.getSignature("(Mc#j$sVcl5ec");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[0] = (byte)12;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byteSequence0.skipBytes(0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-72), 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fconst_1
         // 1:    nop
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Utility.clearBit(4349, 4349);
      String string0 = "gY";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "gY";
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)4;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-1), (-1382), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    sipush\t\t-8175
         // 4:    impdep2
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)66;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-698), 5081, false);
      String string0 = null;
      Utility.methodSignatureReturnType("Invalid signature: ");
      Utility.setBit((byte)54, 4280);
      Utility.toHexString(byteArray0);
      Utility.accessToString(1973, true);
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = Utility.compactClassName("ouRjd");
      assertEquals("ouRjd", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Utility.compactClassName("\t\t<");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)85, 1232);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      boolean boolean0 = true;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)78;
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)78, true);
      try { 
        Utility.methodSignatureReturnType("float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `float'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Constant[] constantArray0 = new Constant[14];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("23", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Utility.isJavaIdentifierPart('\\');
      Utility.isJavaIdentifierPart('\\');
      Utility.format(0, 180, false, 't');
      Utility.classOrInterface(180);
      try { 
        Utility.typeOfSignature("ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-2);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence1);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-58), (-3196));
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.toHexString(byteArray0);
      String string0 = Utility.convertString("c6 c3 f2 fe");
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int int0 = Utility.setBit((-2468), (-2468));
      assertEquals((-2468), int0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = Utility.decode("e!@wB}MWO@,}x", false);
      Utility.compactClassName("");
      String string0 = Utility.codeToString(byteArray0, constantPool1, 11, 144, true);
      assertEquals("11:   lushr\n12:   ishl\n", string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-103);
      Utility.equals(byteArray0, byteArray1);
      Utility.compactClassName("v[a[LW", "v[a[LW", true);
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte)83;
      byteArray0[8] = (byte) (-79);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 184, 3281);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Utility.accessToString((-2374), true);
      Utility.setBit((-2374), 254);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.getSignature("private static final transient abstract synthetic annotation enum");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte) (-33);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)122, (-747), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)75;
      byte byte0 = (byte)60;
      byteArray0[4] = (byte)60;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-7), (int) (byte) (-71), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 47435. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("[A94sp4-8bIkbeh4Eo", "[A94sp4-8bIkbeh4Eo", "[A94sp4-8bIkbeh4Eo", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [A94sp4-8bIkbeh4Eo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Utility.clearBit(4318, (-238));
      Utility.format(19, 19, true, 't');
      Utility.classOrInterface((-2834));
      Utility.typeOfSignature("Invalid signature: `");
      Utility.compactClassName("\t\t%", false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Invalid signature: `";
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) "\t\t%";
      Utility.printArray(objectArray0, true);
      Utility.printArray(objectArray0, true, true);
      try { 
        Utility.typeOfSignature("{Invalid signature: `, class, \t\t%}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {Invalid signature: `, class, \t\t%}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.typeOfSignature("!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Utility.classOrInterface(0);
      Utility.isJavaIdentifierPart('a');
      int int0 = 0;
      char char0 = 'T';
      Utility.format(92, 173, true, 'T');
      Utility.classOrInterface(0);
      Utility.compactClassName("$", true);
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null, true);
      Utility.printArray((Object[]) null, true, true);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = Utility.format(610, 610, false, '#');
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      try { 
        Utility.methodSignatureToString("invokestatic", "invokestatic", "invokestatic", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokestatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte) (-87);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("athrow");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: athrow
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#]{TT1jiZ.9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #]{TT1jiZ.9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Utility.methodTypeToSignature("vSk7O(H", (String[]) null);
      byte[] byteArray0 = null;
      MockFile mockFile0 = new MockFile("java.lang.org.apache.bcel.classfile.Utility", "()LvSk7O(H;");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("org.apache.commons.io.filefilter.AgeFileFilter", "()LvSk7O(H;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"()LvSk7O(H;\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.isJavaIdentifierPart('2');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("caload", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Utility.signatureToString("FnAd%Sl]");
      Utility.searchOpcode("fretu-rn");
      String string0 = "/";
      try { 
        Utility.decode("/", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-71);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.signatureToString("V", true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      EnclosingMethod enclosingMethod0 = null;
      try {
        enclosingMethod0 = new EnclosingMethod((byte) (-71), 41, byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = "iw[Z$6)XD*EMx";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.decode("iw[Z$6)XD*EMx", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"6)\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      int int0 = Utility.clearBit(0, (-1689));
      assertEquals(0, int0);
      
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
      
      Utility.compactClassName("", "", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-2);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Utility.equals(byteArray0, byteArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), (int) (byte) (-71));
      String[] stringArray0 = Constants.CONSTANT_NAMES;
      assertEquals(13, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte byte0 = (byte) (-84);
      byte byte1 = (byte)109;
      Utility.accessToString((int) (byte)0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("m2a.3b>kRoP$YR[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = Utility.convertString("\t");
      assertEquals("\t", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.clearBit(4549, 171);
      Utility.getSignature("W1");
      // Undeclared exception!
      Utility.replace("LW1;", "", "\t");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Utility.convertString("NV(1Kq`\" C");
      Utility.compactClassName("Unreachable default case reached!", true);
      Utility.classOrInterface(65);
      Utility.classOrInterface(178);
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)71;
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-84), 421);
      try { 
        Utility.methodSignatureArgumentTypes("0:    dstore_0\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    dstore_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.toHexString(byteArray0);
      Utility.searchOpcode("nop");
      try { 
        Utility.typeOfSignature("a9 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: a9 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[aGY/D%f+l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [aGY/D%f+l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = Utility.accessToString((-2374), true);
      int int0 = Utility.setBit((-2374), 254);
      assertEquals((-2374), int0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = Utility.decode("private static final transient abstract synthetic annotation enum", false);
      assertEquals(65, byteArray0.length);
      
      String string1 = Utility.compactClassName("private static final transient abstract synthetic annotation enum");
      assertTrue(string1.equals((Object)string0));
      
      int int1 = Utility.clearBit((-1779), 1083);
      assertEquals((-134219507), int1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("LL?I:@;;V");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = "3'?FD<";
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte) (-96);
      byteArray0[8] = (byte) (-74);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("Pfm$3f$b1$7b$f8$a0$b6", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[0];
      String string2 = Utility.printArray(objectArray0, false);
      assertEquals("", string2);
      
      String string3 = Utility.compactClassName("50 66 6d 3f b1 7b f8 a0 b6");
      assertTrue(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)43;
      byteArray0[1] = (byte)43;
      boolean boolean0 = true;
      Utility.accessToString((int) (byte)43, true);
      Utility.classOrInterface((byte)43);
      Utility.typeOfSignature("D");
      Utility.replace("D", "class", (String) null);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("void", "D");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // D
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = Utility.classOrInterface((-3127));
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y@Z~a{v-RV", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y@Z~a{v-RV'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      ConstantClass constantClass0 = new ConstantClass(122);
      constantClass0.clone();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)67;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 122, (int) (byte) (-87));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 33961. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Utility.classOrInterface(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte) (-12);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      String string0 = "d#HRd2S$";
      int int0 = (-299);
      int int1 = (-2151);
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      int int2 = 118;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = Utility.getSignature("Invalid type: ");
      assertEquals("LInvalid;", string0);
      
      String string1 = Utility.signatureToString("Invalid type: ", false);
      assertEquals("int", string1);
      
      byte[] byteArray0 = new byte[0];
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Utility.classOrInterface(174);
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      Utility.printArray((Object[]) null, true, false);
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = "A/>iT;1 <&IC<Mt/`";
      try { 
        Utility.typeOfMethodSignature("A/>iT;1 <&IC<Mt/`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A/>iT;1 <&IC<Mt/`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Utility.clearBit(73, (-52));
      Utility.classOrInterface((-1996));
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "\t(wide)";
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) classPath0;
      objectArray0[3] = (Object) "class";
      objectArray0[4] = (Object) classPath0;
      objectArray0[5] = (Object) "class";
      objectArray0[6] = (Object) "class";
      Utility.printArray(objectArray0, false, true);
      try { 
        Utility.typeOfSignature("+kLt2DLGR]`&6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: kLt2DLGR]`&6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "[]";
      Utility.compactClassName("[]");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-1);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 57, (int) (byte) (-1), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Utility.convertString("RRuhW");
      Utility.compactClassName("RRuhW", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "RRuhW";
      stringArray0[1] = "RRuhW";
      stringArray0[2] = "RRuhW";
      stringArray0[3] = "RRuhW";
      stringArray0[4] = "RRuhW";
      stringArray0[5] = "RRuhW";
      stringArray0[6] = "RRuhW";
      Utility.methodTypeToSignature("RRuhW", stringArray0);
      byte[] byteArray0 = null;
      MockFile mockFile0 = new MockFile("RRuhW", "\r");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "RRuhW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"RRuhW\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Utility.clearBit(4318, (-238));
      Utility.classOrInterface((-2834));
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) classPath0;
      objectArray0[4] = (Object) "class";
      objectArray0[5] = (Object) classPath0;
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.typeOfSignature(", null, null, null, class, ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , null, null, null, class, 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("lload", "=05/>S", true);
      try { 
        Utility.typeOfSignature("=05/>S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =05/>S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte)45;
      Utility.encode(byteArray0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = true;
      try { 
        Utility.decode("$z$_$92$z$cf$z", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, constantPool0, false);
      assertEquals("areturn", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      int int0 = 83;
      Utility.clearBit(12, 83);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte)83;
      int int1 = (-2352);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 75, (-2352), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature("=(+i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =(+i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Utility.compactClassName("[]");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 46, 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("isub");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `isub'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "float";
      stringArray0[1] = "float";
      Utility.methodTypeToSignature("float", stringArray0);
      ConstantPool constantPool1 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ConstantPool constantPool2 = null;
      try {
        constantPool2 = new ConstantPool(byteSequence1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 65
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-90);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-82);
      byteArray1[1] = (byte)15;
      byteArray1[2] = (byte) (-90);
      byteArray1[3] = (byte) (-90);
      byteArray1[4] = (byte) (-82);
      byteArray1[5] = (byte) (-90);
      byteArray1[6] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, (int) (byte)15, (int) (byte) (-90));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)89;
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble((-1265.941619460834));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantDouble constantDouble1 = new ConstantDouble((byte)89);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantClass constantClass0 = new ConstantClass((byte)89);
      constantDouble0.copy();
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-4);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.classOrInterface((-2282));
      try { 
        Utility.methodSignatureToString("interface", "8>4n.F", "8>4n.F", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ")\t";
      stringArray0[1] = "W?fq-o}8:`Q(:,] ";
      stringArray0[2] = ")\t";
      Utility.methodTypeToSignature(")\t", stringArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.setBit(254, 254);
      Utility.encode(byteArray0, true);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfMethodSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)26;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)26;
      byteArray1[1] = (byte)26;
      byteArray1[2] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.toHexString(byteArray1);
      Utility.accessToString((int) (byte)26);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)26, (int) (byte)26);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte byte0 = (byte)55;
      byte byte1 = (byte) (-82);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-112);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 173, 58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-107);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte) (-82);
      byteArray0[8] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)45, 73);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Utility.typeOfSignature("Lfreturn;V");
      byte byte0 = Utility.typeOfSignature("Tt^ln");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Utility.replace("rL*vq)&", ">", "rL*vq)&");
      String[] stringArray0 = new String[4];
      stringArray0[0] = ">";
      stringArray0[1] = ">";
      String string0 = "\\\"";
      stringArray0[2] = "\"";
      stringArray0[3] = "rL*vq)&";
      Utility.methodTypeToSignature("rL*vq)&", stringArray0);
      try { 
        Utility.methodSignatureReturnType("(L>;L>;L\";LrL*vq)&;)LrL*vq)&;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `&;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Utility.classOrInterface(7);
      String string0 = ">";
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("20 20 20", string0);
      
      short short0 = Utility.searchOpcode("lload_2");
      assertEquals((short)32, short0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Utility.isSet((-2282), (-2282));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ineg", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-127);
      byteArray1[1] = (byte)56;
      byteArray1[2] = (byte) (-127);
      byteArray1[3] = (byte) (-127);
      String string0 = Utility.toHexString(byteArray1);
      assertEquals("81 38 81 81", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble((-1265.941619460834));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantDouble constantDouble1 = new ConstantDouble((byte)66);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantDouble1.accept(emptyVisitor0);
      constantArray0[1] = (Constant) constantDouble1;
      constantDouble1.copy();
      ConstantClass constantClass0 = new ConstantClass((byte)66);
      constantDouble0.copy();
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[2] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("42", string0);
      
      String string1 = Utility.convertString("i2c");
      assertEquals("i2c", string1);
      
      String string2 = Utility.signatureToString("Lclass;V");
      assertEquals("class", string2);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[1] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 512, 512);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Utility.signatureToString("FnAdASl]");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.toHexString(byteArray0);
      Utility.accessToString(81);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)58, 77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Integer integer0 = new Integer(254);
      try { 
        Utility.typeOfSignature("+%0?s'>IR-N;xs*/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %0?s'>IR-N;xs*_/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      Utility.typeOfSignature("The array of prefixes must not be null");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<");
      String[] stringArray0 = Constants.OPCODE_NAMES;
      assertEquals(256, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = Utility.classOrInterface((-1));
      assertEquals("interface", string0);
      
      String string1 = Utility.accessToString((-1), true);
      assertEquals("public private protected static final volatile transient native abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      int int0 = Utility.clearBit(180, 180);
      assertEquals(180, int0);
      
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("22 22 22 00 00 00 00 00 00 00 00 00 00 00 00 00", string0);
      
      String string1 = Utility.accessToString(963);
      assertEquals("public private volatile transient native interface", string1);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("6cJxt}R");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(bufferedOutputStream0, charset0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "6cJxt}R");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) charset0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "6cJxt}R";
      objectArray0[3] = (Object) outputStreamWriter0;
      objectArray0[4] = (Object) "6cJxt}R";
      Utility.printArray(printWriter0, objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)60;
      byteArray0[8] = (byte)93;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)60, (int) (byte)127);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = "HySJ@fD \"n{Q7GVKc";
      int int0 = 16384;
      boolean boolean0 = true;
      char char0 = 'c';
      // Undeclared exception!
      Utility.fillup("HySJ@fD \"n{Q7GVKc", 16384, true, 'c');
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-74);
      try { 
        Utility.typeOfSignature("HGqqta");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HGqqta
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\t\t#";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("\t\t#", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Utility.typeOfSignature("Sc<N4gnUFkrecx|eg");
      byte byte0 = Utility.typeOfSignature("Sc<N4gnUFkrecx|eg");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Utility.compactClassName("RRuhW");
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)34;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 52);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("RRuhW", "RRuhW", "RRuhW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RRuhW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Utility.classOrInterface(1946);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1946, 1946, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)82;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$5b$5b$5bRR", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.decode("", false);
      int int0 = Utility.clearBit((-1345), (-1345));
      assertEquals(2147482303, int0);
      
      String string1 = Utility.getSignature("$5b$5b$5bRR");
      assertEquals("L$5b$5b$5bRR;", string1);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1241, (int) (byte)47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, 0, 3214);
      Utility.isSet(0, 13);
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-125);
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-76);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1417), (int) (byte) (-76));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      int int0 = 3185;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature("*#8UjO)Jift>;1n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #8UjO)Jift>;1n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-2282), (-2282));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      byteSequence0.reset();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("3e b4 6e 0e", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      boolean boolean0 = Utility.isSet(73, 73);
      assertFalse(boolean0);
      
      byte byte0 = (byte)26;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Wqw2Izu,ZA", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wqw2Izu,ZA'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      int int0 = 7;
      Utility.classOrInterface(7);
      String string0 = "HF";
      try { 
        Utility.typeOfSignature("HF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(39, 42);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(39, 69);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[2] = (Constant) constantMethodHandle2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(39, 69, (LocalVariable[]) null, constantPool0);
      LocalVariableTable localVariableTable1 = new LocalVariableTable(localVariableTable0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null, true, localVariableTable1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)98;
      byteArray1[1] = (byte) (-67);
      Utility.toHexString(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-67), 161, true);
      Utility.signatureToString("FnAdASl]");
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Utility.isJavaIdentifierPart('^');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte)110;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)127, (-280));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("27 44 a7", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-59);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)123, (int) (byte)58, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("StackMap", stringArray0);
      assertEquals("()LStackMap;", string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte) (-90);
      byte[] byteArray1 = new byte[25];
      byteArray1[0] = (byte) (-90);
      byteArray1[1] = (byte) (-90);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("java.lang.[]", stringArray0);
      Utility.isSet((byte) (-90), 36);
      Utility.replace("Invalid type: ", "java.lang.[]", "{Hvm:c{H<");
      Object object0 = new Object();
      Utility.printArray((Object[]) stringArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("\"", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RMO");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.signatureToString("DA1w?R/0", true);
      assertEquals("double", string0);
      
      String string1 = Utility.convertString("[8c!5zD>V");
      assertEquals("[8c!5zD>V", string1);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Utility.isJavaIdentifierPart('&');
      Utility.format(92, (-3052), true, 'e');
      Utility.typeOfSignature("V");
      Utility.methodTypeToSignature("V", (String[]) null);
      try { 
        Utility.typeOfSignature("()LV;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ()LV;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = Utility.fillup("Bo)u | F'", 154, true, '{');
      assertEquals("Bo)u | F'{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{", string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("The list of names must not be null", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The list of names must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 111, (int) (byte) (-92));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      Utility.convertString("FnAdASl]");
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-76);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-76), 171);
      assertEquals("0:    iflt\t\t#17076\n", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("9b 42 b4", string1);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      int int0 = (-2282);
      Utility.isSet((-2282), (-2282));
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)48;
      Utility.isSet(69, (byte) (-96));
      String string0 = "M`4),!t{Bf";
      // Undeclared exception!
      try { 
        Utility.signatureToString("M`4),!t{Bf", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M`4),!t{Bf'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Utility.clearBit(4318, (-238));
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      Utility.printArray(objectArray0, false, true);
      try { 
        Utility.typeOfSignature("\"\", null, null, null, null, null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"\", null, null, null, null, null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Utility.accessToString((-2374), true);
      Utility.setBit((-2374), 254);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.decode("private static final transient abstract synthetic annotation enum", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("MZ&/+>8e_&p%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MZ&/+>8e_&p%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Utility.convertString("RRuhW");
      Utility.compactClassName("RRuhW", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "RRuhW";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RRuhW");
      ConstantClass constantClass0 = new ConstantClass(766);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass0;
      constantArray0[5] = (Constant) constantClass0;
      constantArray0[6] = (Constant) constantClass0;
      constantArray0[7] = (Constant) constantClass0;
      constantArray0[8] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.printArray((Object[]) stringArray0, true, false);
      try { 
        Utility.typeOfSignature(")/:F [l)@8{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )/:F [l)@8{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Utility.getSignature("short");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "S";
      stringArray0[1] = "S";
      stringArray0[2] = "short";
      stringArray0[3] = "S";
      stringArray0[4] = "short";
      boolean boolean0 = true;
      Utility.signatureToString("S", true);
      try { 
        Utility.methodSignatureArgumentTypes("(9%p(pMZo#]MjqyL6Ak");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `9%p(pMZo#]MjqyL6Ak'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Utility.isJavaIdentifierPart('e');
      Utility.format(92, (byte)2, true, '!');
      try { 
        Utility.typeOfSignature("92");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 92
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      try { 
        Utility.typeOfSignature(", offset delta=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , offset delta=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Utility.classOrInterface((-966));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte)40);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("28 28 5e 28", "ifle", "static synchronized");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 28 28 5e 28
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-108);
      Utility.equals(byteArray0, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      String string0 = Utility.toHexString(byteArray0);
      String string1 = Utility.signatureToString("FnAdASl]");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Utility.accessToString((-2374), true);
      Utility.setBit((-2374), 254);
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$l$8b$I$A$A$A$A$A$A$A", "#p[", ">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      byte byte0 = (byte) (-87);
      byte[] byteArray0 = new byte[1];
      byte byte1 = (byte)59;
      byteArray0[0] = (byte)59;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)59, (int) (byte) (-87));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "float";
      stringArray0[1] = "float";
      Utility.methodTypeToSignature("float", stringArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readFloat();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 107, 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Utility.convertString("RRuhW");
      Utility.compactClassName("RRuhW", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "RRuhW";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RRuhW");
      ConstantClass constantClass0 = new ConstantClass(766);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantClass0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)0;
      Utility.encode(byteArray0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("RRuhW");
      PrintWriter printWriter0 = mockPrintWriter0.append('J');
      Utility.printArray(printWriter0, (Object[]) constantArray0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$A$A$A$A", string0);
      
      byte[] byteArray1 = Utility.decode("$A$A$A$A$A$A", false);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      try { 
        Utility.typeOfSignature("$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Utility.isJavaIdentifierPart('D');
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte) (-87));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)58, 2083);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("14 1b 00 00 00 00", string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      boolean boolean0 = true;
      Utility.format(40, 172, true, 'E');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 39
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Utility.accessToString(0);
      char char0 = '6';
      Utility.isJavaIdentifierPart('6');
      Utility.format(92, 0, true, 'T');
      Utility.classOrInterface(0);
      String string0 = "&}nWH";
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[2] = (Object) "92";
      objectArray0[3] = (Object) "&}nWH";
      objectArray0[4] = (Object) "class";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "92";
      Object object1 = new Object();
      objectArray0[7] = object1;
      Utility.printArray(objectArray0, false, true);
      try { 
        Utility.typeOfSignature("92");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 92
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "float";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[1] = (byte) (-123);
      byteArray1[2] = (byte) (-123);
      byteArray1[3] = (byte) (-123);
      byteArray1[4] = (byte) (-123);
      byteArray1[5] = (byte) (-123);
      byteArray1[6] = (byte) (-123);
      byteArray1[7] = (byte) (-123);
      byteArray1[8] = (byte) (-123);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.readUnsignedShort();
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("i2l", string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.setBit((-254), (-254));
      Utility.compactClassName("org.apache.bcel.classfile.Utility", true);
      Utility.isJavaIdentifierPart('6');
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "V#c1Pi,Z<l^XY", "z(DW9[d8 6P~O_)>", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)60;
      byteArray0[6] = (byte) (-7);
      byteArray0[7] = (byte) (-9);
      byteArray0[8] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("4b b9 b9 4b 3c 00 f9 f7 00", string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("J2wxENV O(<V>J");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1928), 36);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = Utility.compactClassName("_", true);
      assertEquals("_", string0);
      
      String string1 = Utility.compactClassName("_", "_", true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = Utility.compactClassName("xky5xD/VuM!.wcaCXw6", "", false);
      assertEquals("xky5xD.VuM!.wcaCXw6", string0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.ConstantInvokeDynamic");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)25;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)25, 184, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)80;
      byteArray0[2] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Utility.replace("P", "G", "Invalid type: ");
      try { 
        Utility.typeOfSignature("P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Constant[] constantArray0 = new Constant[13];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = Utility.classOrInterface(1946);
      assertEquals("interface", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("5a 28 00 00 00", string1);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Utility.classOrInterface(7);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-99);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)59;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-1869), (int) (byte)92);
      // Undeclared exception!
      try { 
        Utility.signatureToString("_})u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `_})u'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)14;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("Z__$5c$O", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray1 = Utility.decode("Z__$5c$O", false);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)95;
      byteArray2[1] = (byte)63;
      byteArray2[2] = (byte)92;
      byteArray2[3] = (byte)14;
      byteArray2[4] = (byte)95;
      boolean boolean0 = Utility.equals(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)90, (byte)95, (byte)95, (byte)92, (byte)14}, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-21);
      byteArray0[6] = (byte) (-74);
      Utility.encode(byteArray0, false);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)0, (byte)25);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4, (int) (byte) (-21));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 60160. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\"";
      Utility.compactClassName("\"", "\"", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)122;
      Utility.toHexString(byteArray0);
      String string0 = Utility.compactClassName("float");
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)122;
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte)36;
      byteArray1[3] = (byte) (-60);
      byteArray1[4] = (byte)87;
      byteArray1[5] = (byte) (-60);
      byteArray1[6] = (byte)122;
      byteArray1[7] = (byte)67;
      byteArray1[8] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)98;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray1[1] = (byte) (-67);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[8c!5zD>V");
      Utility.signatureToString("FnAdASl]", true);
      try { 
        Utility.methodSignatureReturnType("java.lang.RRuhW", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.RRuhW'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String string0 = "Synthetic";
      Utility.convertString("Synthetic");
      String string1 = "\t(wide)";
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)62;
      Constant[] constantArray0 = new Constant[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\t(wide)");
      ConstantClass constantClass0 = new ConstantClass(766);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2409, (-1899));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "float";
      stringArray0[1] = "float";
      stringArray0[2] = "void";
      stringArray0[4] = "float";
      stringArray0[5] = "float";
      String string0 = "|(E!xU(";
      stringArray0[6] = "|(E!xU(";
      try { 
        Utility.methodTypeToSignature("float", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)51;
      byteArray0[4] = (byte)84;
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte) (-15);
      byteArray0[8] = (byte)51;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)51, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)98;
      byteArray1[1] = (byte)98;
      String string0 = Utility.codeToString(byteArray1, constantPool0, (-1537), 2034);
      assertEquals("0:    fadd\n1:    fadd\n", string0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)126;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)126, 159);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-15), (int) (byte) (-15), true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Utility.classOrInterface(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)33;
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) (byte) (-103);
      objectArray0[2] = (Object) (byte) (-103);
      objectArray0[3] = (Object) (byte) (-4);
      Utility.printArray(objectArray0, false, false);
      String string0 = "!v2og]>8";
      try { 
        Utility.typeOfSignature("!v2og]>8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: v2og]>8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String string0 = "-~K'";
      try { 
        Utility.typeOfSignature("-~K'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -~K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Utility.convertString("RRuhW");
      Utility.compactClassName("RRuhW", true);
      String[] stringArray0 = new String[7];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RRuhW");
      String string0 = "6B/N6B}6^";
      // Undeclared exception!
      try { 
        Utility.compactClassName("6B/N6B}6^", stringArray0[0], true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Utility.isJavaIdentifierPart('D');
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-54);
      try { 
        Utility.typeOfSignature("?`f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?`f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)121;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)73, (int) (byte)121);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.accessToString((-845), false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Kd'h>GXc9>r", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Kd'h>GXc9>r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)47;
      byteArray1[1] = (byte)47;
      byteArray1[2] = (byte)50;
      byteArray1[3] = (byte)50;
      byteArray1[4] = (byte)47;
      byteArray1[5] = (byte) (-55);
      byteArray1[6] = (byte) (-55);
      byteArray1[7] = (byte)47;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (-1011), (int) (byte)47, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    laload
         // 1:    laload
         // 2:    aaload
         // 3:    aaload
         // 4:    laload
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = Utility.fillup("Smjilv}*z@@RmS", (-2143), false, '\\');
      assertEquals("Smjilv}*z@@RmS", string0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[2] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 180, (int) (byte)71);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureReturnType("The list of names must not be null", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The list of names must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.bcel.classfile.FieldOrMethod", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.FieldOrMethod
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = Utility.getSignature("gt$g!bBq+^GtROtCs");
      assertEquals("Lgt$g!bBq+^GtROtCs;", string0);
      
      String string1 = Utility.signatureToString("Lgt$g!bBq+^GtROtCs;", false);
      assertEquals("gt$g!bBq+^GtROtCs", string1);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      try { 
        Utility.typeOfSignature("@j:!s|-&^Y;N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @j:!s|-&^Y;N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('\"');
      try { 
        Utility.typeOfSignature("*P:)8_LSk(k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P:)8_LSk(k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("monitorenter", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `monitorenter'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "float";
      stringArray0[1] = "float";
      String string0 = Utility.methodTypeToSignature("float", stringArray0);
      assertEquals("(FF)F", string0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(FF)F", false);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("byte", (String[]) null);
      assertEquals("()B", string0);
      
      int int0 = Utility.clearBit(58, 58);
      assertEquals(58, int0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = "ba^7j0[;b";
      Utility.isJavaIdentifierPart('$');
      Utility.isJavaIdentifierPart('$');
      Utility.format(180, (-86), false, 'U');
      Utility.classOrInterface(184);
      try { 
        Utility.typeOfSignature("mWdbKtdt]Ex/.'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: mWdbKtdt]Ex/.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = Utility.compactClassName("instanceof", "ireturn", true);
      assertEquals("instanceof", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte) (-109);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-109), 1019, true);
      assertEquals("0:    dstore_2\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    saload\n4:    lstore\t\t%147\n", string1);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('C');
      Utility.toHexString(byteArray0);
      String string0 = Utility.convertString(",n\"Kz2{");
      String string1 = Utility.fillup(",n\"Kz2{", 3676, true, 'B');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\"N=OzTi-y2!=t:vl";
      stringArray0[1] = "\"N=OzTi-y2!=t:vl";
      stringArray0[2] = "\"N=OzTi-y2!=t:vl";
      Utility.compactClassName("\"N=OzTi-y2!=t:vl");
      Utility.accessToString(178, true);
      try { 
        Utility.methodSignatureArgumentTypes("FdN!eF'oGG]frY9m", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: FdN!eF'oGG]frY9m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("invokedynamic", "invokedynamic", true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Utility.isJavaIdentifierPart('D');
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte) (-87));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2548, (-1901));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = Utility.classOrInterface(1951);
      assertEquals("interface", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("DUrL$$`Os4ff>u<&(");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)60;
      byteArray1[1] = (byte)40;
      byteArray1[2] = (byte)20;
      byteArray1[3] = (byte)40;
      byteArray1[4] = (byte)40;
      String string1 = Utility.toHexString(byteArray1);
      assertEquals("3c 28 14 28 28", string1);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Utility.accessToString((-713));
      Utility.getSignature("public private protected final synchronized native abstract strictfp synthetic annotation enum");
      File file0 = MockFile.createTempFile("Lpublic;", "public private protected final synchronized native abstract strictfp synthetic annotation enum");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "Lpublic;";
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) "public private protected final synchronized native abstract strictfp synthetic annotation enum";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(353L, file0.length());
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.setBit((-254), (-254));
      Utility.compactClassName("org.apache.bcel.classfile.Utility", true);
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      String string0 = Utility.signatureToString("SAME_LOCALS_1_STACK_EXTENDED");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("getstatic", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `getstatic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      int int0 = 0;
      Utility.isSet((-1737), 0);
      try { 
        Utility.decode("<", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = "RRuhW";
      Utility.convertString("RRuhW");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-86);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1417), (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte) (-124));
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3, 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "float";
      stringArray0[1] = "float";
      Utility.methodTypeToSignature("float", stringArray0);
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)27;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)27, (int) (byte)7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Utility.getSignature("short");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "S";
      stringArray0[1] = "S";
      stringArray0[2] = "short";
      Utility.methodSignatureReturnType("S", false);
      Utility.convertString("T'XV6gNmiV8YQD59k");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Hw(&isJRYj22[U=[m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hw(&isJRYj22[U=[m'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Utility.compactClassName("short");
      // Undeclared exception!
      try { 
        Utility.signatureToString("X>!", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X>!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Utility.clearBit(4349, 4349);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "gY";
      Utility.compactClassName("[]");
      String[] stringArray0 = new String[9];
      stringArray0[0] = ",f3tfaV|y@RGU";
      stringArray0[1] = "[]";
      stringArray0[2] = "";
      stringArray0[3] = "[]";
      stringArray0[4] = ",f3tfaV|y@RGU";
      stringArray0[5] = "QO^TI";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[6] = ",f3tfaV|y@RGU";
      stringArray0[7] = "gY";
      stringArray0[8] = "[]";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(",f3tfaV|y@RGU", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-71);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-100);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)90;
      byteArray0[0] = (byte)90;
      int int0 = 15;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 15, (int) (byte)90, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-V?FD<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -V?FD<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      byte byte0 = (byte)17;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)17, (int) (byte)17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass((-1093));
      Object[] objectArray0 = new Object[4];
      constantClass0.copy();
      objectArray0[0] = (Object) constantClass0;
      constantClass0.copy();
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) constantClass0;
      objectArray0[3] = (Object) constantClass0;
      Utility.printArray(objectArray0, false, false);
      Object object1 = new Object();
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Utility.clearBit(4318, (-238));
      Utility.format(19, 19, true, 't');
      String string0 = Utility.classOrInterface((-2834));
      Utility.typeOfSignature("Invalid signature: `");
      Utility.compactClassName("\t\t%", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.setBit((-254), (-254));
      Utility.encode(byteArray0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$l$8b$I$A$A$A$A$A$A$A");
      mockPrintWriter0.print(true);
      mockPrintWriter0.append('Z');
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = 3214;
      Utility.isSet(0, 176);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      Utility.isJavaIdentifierPart('9');
      boolean boolean0 = true;
      String string0 = Utility.format(575, 1150, true, '!');
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("I\nvalid type: ");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte) (-71);
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)60;
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-7), (int) (byte) (-71), false);
      Utility.convertString("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    istore_1\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n");
      Utility.classOrInterface(47);
      Utility.classOrInterface(47);
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    istore_1\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    istore_1
         // 5:    nop
         // 6:    nop
         // 7:    nop
         // 8:    nop
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)45;
      byteArray0[5] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)45);
      try { 
        Utility.typeOfSignature("0:    nop\n1:    nop\n2:    aload_3\n3:    nop\n4:    nop\n5:    aload_3\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    nop
         // 1:    nop
         // 2:    aload_3
         // 3:    nop
         // 4:    nop
         // 5:    aload_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, 0, 3214);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      Utility.isJavaIdentifierPart('d');
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("+O", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `+O'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Utility.convertString("RRuhW");
      String string0 = Utility.compactClassName("RRuhW", true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "short");
      String string1 = Utility.classOrInterface(19);
      assertEquals("class", string1);
      
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) classPath0;
      objectArray0[1] = (Object) "RRuhW";
      objectArray0[2] = (Object) classPath0;
      objectArray0[3] = (Object) classPath0;
      String string2 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"\", \"RRuhW\", \"\", \"\"", string2);
      
      byte byte0 = Utility.typeOfSignature("CI");
      assertEquals((byte)5, byte0);
      
      String string3 = Utility.convertString("RRuhW");
      assertTrue(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = " (";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("\t\t#", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte) (-107);
      byteArray0[8] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-107), (int) (byte)55, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aload_3
         // 1:    fcmpl
         // 2:    fcmpl
         // 3:    aload_3
         // 4:    fcmpl
         // 5:    aload_3
         // 6:    fcmpl
         // 7:    fcmpl
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String string0 = "";
      Utility.replace("org.apache.bcel.classfile.Utility$1", ", high = ", "");
      int int0 = (-491);
      boolean boolean0 = false;
      Utility.fillup(" '(@g]2@B[o", (-491), false, '!');
      String string1 = "class";
      Utility.decode("class", false);
      Utility.clearBit((-491), (-591));
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("if_acmpeq", stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("()Lif_acmpeq;", true);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Utility.clearBit(4318, (-238));
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      Utility.printArray(objectArray0, false, true);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte) (-53);
      byteArray0[7] = (byte) (-84);
      byteArray0[8] = (byte)99;
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Utility.isJavaIdentifierPart('e');
      Utility.format(92, (byte)0, true, '!');
      try { 
        Utility.typeOfSignature("92");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 92
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.decode("", false);
      String string1 = Utility.getSignature("");
      assertEquals("L;", string1);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String[] stringArray0 = new String[6];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('7');
      Utility.toHexString(byteArray0);
      MockFile mockFile0 = new MockFile("bb bb bb 00", "@&*?k9Sf");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object object0 = new Object();
      PrintStream printStream0 = mockPrintStream0.format("\t(wide)", (Object[]) stringArray0);
      Utility.printArray(printStream0, (Object[]) stringArray0);
      assertEquals(44L, mockFile0.length());
      
      Utility.accessToString((-3793));
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("bb bb bb 00", string0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      try { 
        Utility.typeOfSignature("Mm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Mm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("CR");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)23;
      ConstantClass constantClass0 = new ConstantClass(766);
      Object object0 = constantClass0.clone();
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) object0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)23, (int) (byte)23);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = "float";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "float";
      stringArray0[1] = "float";
      Utility.methodTypeToSignature("float", stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(FF)F");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-108);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-108), (int) (byte)48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ifnonnull\t\t#12336
         // 3:    wide\t(wide)
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-47);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)41;
      byteArray1[1] = (byte)41;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)41, (int) (byte)41, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-39), 3189);
      int int0 = 0;
      Utility.isSet(0, 15);
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-49);
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte) (-49);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('f');
      Utility.toHexString(byteArray0);
      Utility.convertString("java.lang.");
      Utility.fillup("java.lang.", 198, false, 'Z');
      Utility.compactClassName("cf 00 ff 00 cf cf cf 00 00");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-49);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[4];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-49), (byte) (-1));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      try { 
        Constant.readConstant(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -1
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)80, 177);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      boolean boolean0 = Utility.isSet(3185, 3185);
      assertFalse(boolean0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Object");
      ConstantClass constantClass0 = new ConstantClass(180);
      String string0 = Utility.convertString("\"");
      assertEquals("\\\"", string0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)56;
      byteArray0[2] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore\t\t%0", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("38 00 1d", string1);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("OW_MM$dF6X_l>iT[zrN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OW_MM$dF6X_l>iT[zrN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)0;
      boolean boolean0 = false;
      String string0 = "O";
      try { 
        Utility.typeOfSignature(";|+Cw\"b>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;|+Cw\"b>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      try { 
        Utility.typeOfSignature("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3'?FD<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3'?FD<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Utility.accessToString((-2374), false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2374), (int) (byte) (-79));
      Utility.convertString("0:    return\n");
      try { 
        Utility.typeOfSignature("u_|EiWva9SG%R{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: u_|EiWva9SG%R{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Utility.isJavaIdentifierPart('e');
      Utility.format(92, (byte)0, true, '!');
      String string0 = "&}nWH";
      try { 
        Utility.typeOfSignature("&}nWH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &}nWH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      boolean boolean0 = Utility.isSet(63, 63);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte) (-110);
      byteArray0[7] = (byte)127;
      byteArray0[8] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.accessToString((int) (byte)127, false);
      assertEquals("public private protected static final synchronized volatile", string0);
      
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.compactClassName("land");
      assertEquals("land", string1);
      
      boolean boolean1 = Utility.isSet((-2623), (byte)127);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "float";
      stringArray0[1] = "float";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)25;
      byteArray0[3] = (byte)59;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("aload\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.isJavaIdentifierPart('2');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)122;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)122, 189, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 6939. Constant pool size is: 6
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance(")7>~l4");
      ConstantLong constantLong0 = new ConstantLong(512);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature(")7>~l4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )7>~l4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      short short0 = Utility.searchOpcode("~PF9G");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Utility.compactClassName("short");
      Utility.getSignature("short");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "S";
      stringArray0[1] = "S";
      stringArray0[2] = "short";
      stringArray0[3] = "short";
      stringArray0[4] = "short";
      Utility.methodTypeToSignature("short", stringArray0);
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = Utility.methodTypeToSignature("S", stringArray0);
      assertEquals("(LS;LS;SSS)LS;", string0);
      
      boolean boolean0 = Utility.isSet((byte)0, (byte)0);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "short";
      objectArray0[2] = (Object) "short";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[5] = (Object) "(LS;LS;SSS)LS;";
      objectArray0[6] = (Object) "short";
      objectArray0[7] = (Object) "short";
      byte byte0 = Utility.typeOfSignature("S");
      assertEquals((byte)9, byte0);
      
      String string1 = Utility.methodSignatureToString("(LS;LS;SSS)LS;", "short", "char", true);
      assertEquals("char S short(S arg1, S arg2, short arg3, short arg4, short arg5)", string1);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Utility.compactClassName("? extends ");
      // Undeclared exception!
      try { 
        Utility.signatureToString("]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-2282), (-2282));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.toHexString(byteArray0);
      String string1 = Utility.convertString("74 6a 61 7e a5");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)96;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 198, 198, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)26;
      // Undeclared exception!
      try { 
        Utility.signatureToString("O4eUoh|*t", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O4eUoh|*t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)38;
      byteArray1[1] = (byte) (-81);
      byteArray1[2] = (byte)27;
      byteArray1[3] = (byte) (-70);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence2.readByte();
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence3, (ConstantPool) null, true);
      String string0 = Utility.toHexString(byteArray1);
      assertEquals("26 af 1b ba", string0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "V0:mOjp)[rk@(Cb:@");
      Utility.getSignature("iaload");
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[2] = (byte) (-69);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte) (-110);
      byteArray0[8] = (byte) (-69);
      Utility.encode(byteArray0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.decode("$92$A$_$bb$_$_$_$92$bb", false);
      Utility.printArray((Object[]) null, false, false);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "IZLJM$,!";
      stringArray0[1] = "Warning: Padding byte != 0 in ";
      stringArray0[2] = "IZLJM$,!";
      stringArray0[3] = "mt)8$7'qaMW#z";
      stringArray0[4] = "IZLJM$,!";
      Utility.methodTypeToSignature("IZLJM$,!", stringArray0);
      MockFile mockFile0 = new MockFile("akcZ14mT{#+sw", "mt)8$7'qaMW#z");
      File file0 = MockFile.createTempFile("(LIZLJM$,!;LWarning:;LIZLJM$,!;Lmt)8$7'qaMW#z;LIZLJM$,!;)LIZLJM$,!;", "", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-124), (-2093064));
      Utility.accessToString(22);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iinc\t\t%132\t-124", string0);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-92);
      byteArray0[0] = (byte) (-124);
      byteArray0[3] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      byteSequence1.markSupported();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte)0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)123;
      Utility.signatureToString("ZfuW}$J", false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("7b", string0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = ">";
      try { 
        Utility.typeOfSignature("7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)76;
      byteArray0[0] = (byte)76;
      Utility.equals(byteArray0, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Utility.classOrInterface(7);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-74);
      Utility.encode(byteArray0, true);
      int int0 = 552;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-74), 552);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantArray0[1] = (Constant) constantMethodHandle1;
      constantArray0[2] = (Constant) constantMethodHandle1;
      constantArray0[3] = (Constant) constantMethodHandle1;
      constantArray0[4] = (Constant) constantMethodHandle0;
      constantArray0[5] = (Constant) constantMethodHandle1;
      constantArray0[6] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 162, 256);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-39), 3214);
      Utility.isSet(0, 22);
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = Utility.decode(":", false);
      Utility.equals(byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.Utility$1", "invokestatic", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("iwZC6$6)WeEMc", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WeEMc'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      String string0 = Utility.convertString("\t");
      assertEquals("\t", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)107;
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-84), (int) (byte) (-84));
      assertEquals("0:    dstore_0\n1:    dstore_0\n2:    ireturn\n3:    dstore_0\n4:    dmul\n", string1);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      String string0 = Utility.replace("gt$g!bBq+^GtROtCs", "gt$g!bBq+^GtROtCs", "gt$g!bBq+^GtROtCs");
      assertEquals("gt$g!bBq+^GtROtCs", string0);
      
      String string1 = Utility.compactClassName("invokestatic");
      assertEquals("invokestatic", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "E+h`62YK9V[";
      Object object0 = new Object();
      Object object1 = new Object();
      byte byte0 = Utility.typeOfSignature("JG9C5}Y");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("B>[K4Xg1+v");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      int int0 = new Integer((-238));
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, true);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) "org.apache.bcel.classfile.AnnotationDefault";
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("<f]z9'G<r!oRaBKn~e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <f]z9'G<r!oRaBKn~e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      Utility.searchOpcode("short");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.reset();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)112;
      byteArray1[1] = (byte)84;
      byteArray1[2] = (byte)84;
      byteArray1[3] = (byte) (-55);
      byteArray1[4] = (byte)112;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantPool constantPool2 = null;
      try {
        constantPool2 = new ConstantPool(byteSequence1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 84
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (int) (byte) (-91), (int) (byte) (-91));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("f2i", string0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = Utility.format(6030, 6030, true, 'R');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-67);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, string0);
      byteArray0[1] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)42;
      byte byte0 = (byte)19;
      byteArray0[1] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)42, (int) (byte)42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Utility.isSet(73, 73);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-105);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Utility.isJavaIdentifierPart('n');
      try { 
        Utility.methodSignatureArgumentTypes("caload");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: caload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)26;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 511, 53);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      char char0 = '\\';
      Utility.isJavaIdentifierPart('\\');
      Utility.isJavaIdentifierPart('\\');
      Utility.accessToString(1955);
      String string0 = "Ko.3_Tx";
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1277));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray1, constantPool1, (-1), 62);
      try { 
        Utility.typeOfSignature("*NSP[p8mF}k`=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NSP[p8mF}k`=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Utility.clearBit(4318, (-238));
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      boolean boolean0 = true;
      Utility.printArray(objectArray0, false, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(ne`i", "org.apache.bcel.classfile.AnnotationDefault", "org.apache.bcel.classfile.AnnotationDefault", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ne`i'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-6387), (-6387));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ifle\t\t#-1403", string0);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[11];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.classOrInterface(53);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "8>4n.F", "class", false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("00 bb bb 00", "long", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "float";
      stringArray0[1] = "float";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.methodTypeToSignature("float", stringArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("lload\t\t%0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lload\t\t%0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("NoNj78eA-b", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NoNj78eA-b'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = constantPool1.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool2, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-59);
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-59), (int) (byte) (-59), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 50432. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Utility.classOrInterface(0);
      Utility.isJavaIdentifierPart('e');
      Utility.format(92, 0, true, '!');
      Utility.classOrInterface((byte)0);
      String string0 = "&}nWH";
      try { 
        Utility.typeOfSignature("&}nWH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &}nWH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Utility.compactClassName(", high = ", true);
      String string0 = "\n\t\tthrows ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n\t\tthrows ");
      ConstantClass constantClass0 = new ConstantClass((byte)24);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)24, (-592));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)80;
      byte byte0 = (byte)15;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)121;
      byteArray0[7] = (byte) (-28);
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 74, (int) (byte)121);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      String string0 = Utility.classOrInterface((-682));
      assertEquals("class", string0);
      
      byte[] byteArray0 = Utility.decode("'(u$%-&eRZd", false);
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)39, (byte)40, (byte)117, (byte)0, (byte)45, (byte)38, (byte)101, (byte)82, (byte)90, (byte)100}, byteArray0);
      
      String string1 = Utility.compactClassName("java.lang.", false);
      assertEquals("java.lang.", string1);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lF<US1vb\\", "", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lF<US1vb\\
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      String string0 = "";
      Utility.searchOpcode("");
      Utility.compactClassName("");
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Utility.isJavaIdentifierPart('9');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)77;
      int int0 = 605;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1281), 605);
      String string0 = "putfield";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    astore_2\n", "putfield", "putfield", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    astore_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)60;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)60;
      byteArray1[1] = (byte)60;
      byteArray1[2] = (byte)60;
      Utility.equals(byteArray1, byteArray0);
      boolean boolean0 = Utility.isJavaIdentifierPart('7');
      assertTrue(boolean0);
      
      String string0 = Utility.toHexString(byteArray0);
      String string1 = Utility.convertString("00 3c 3c 00");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Utility.convertString("RRuhW");
      boolean boolean0 = true;
      Utility.compactClassName("RRuhW", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "RRuhW";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RRuhW");
      Utility.format((byte)24, 0, false, 'H');
      Utility.classOrInterface((-3102));
      try { 
        Utility.typeOfSignature("&:B@gy<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &:B@gy<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Utility.compactClassName("8q.1>/Rm6+Dd$J{", true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"");
      ConstantClass constantClass0 = new ConstantClass((-105));
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(4318);
      constantArray0[2] = (Constant) constantMethodType0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass0;
      constantArray0[5] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 766, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Utility.getSignature("RRuhW");
      Utility.compactClassName("RRuhW", false);
      Utility.clearBit(738, 738);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "LRRuhW;";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "RRuhW";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "LRRuhW;";
      objectArray0[5] = (Object) "RRuhW";
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.typeOfSignature(";F=&2]1BFf1g>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;F=&2]1BFf1g>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Utility.isJavaIdentifierPart('^');
      Utility.classOrInterface(7);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "class");
      ConstantClass constantClass0 = new ConstantClass(7);
      Utility.getSignature("Invalid signature: ");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "void", "class");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      PrintStream printStream0 = null;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)21;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iload\t\t%21", string0);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ifnonnull\t\t#6912", string0);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-71);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 47360. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Utility.compactClassName("_", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)67;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 107, 62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Constant[] constantArray0 = new Constant[15];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "X";
      Utility.convertString("X");
      try { 
        Utility.typeOfSignature("X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Utility.isJavaIdentifierPart('e');
      Utility.format((byte) (-69), (byte) (-69), true, 'e');
      Utility.compactClassName("-69", true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "-69";
      objectArray0[1] = (Object) "-69";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "-69";
      objectArray0[4] = (Object) "-69";
      objectArray0[5] = (Object) "-69";
      Utility.printArray(objectArray0, true);
      Utility.printArray(objectArray0, true, false);
      try { 
        Utility.typeOfSignature("&}nWH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &}nWH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Utility.isSet(3185, 3185);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Object");
      ConstantClass constantClass0 = new ConstantClass(180);
      Utility.getSignature("\"");
      // Undeclared exception!
      try { 
        Utility.signatureToString("P rW+nfPP]J`Jv}S4,$", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P rW+nfPP]J`Jv}S4,$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Utility.replace("gt$g!bBq+^GtROtCs", "gt$g!bBq+^GtROtCs", "gt$g!bBq+^GtROtCs");
      String string0 = "invokestatic";
      Utility.compactClassName("invokestatic");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "E+h`62YK9V[";
      try { 
        Utility.typeOfSignature("E+h`62YK9V[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E+h`62YK9V[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Utility.getSignature("short");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "S";
      stringArray0[1] = "? extends ";
      stringArray0[2] = "short";
      stringArray0[3] = "S";
      stringArray0[4] = "? extends ";
      Utility.methodTypeToSignature("? extends ", stringArray0);
      byte byte0 = (byte)29;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("9[s^RQ5", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[s^RQ5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Utility.convertString("SyJthetic");
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)60;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Code(max_stack = ";
      stringArray0[1] = "SyJthetic";
      stringArray0[2] = "SyJthetic";
      stringArray0[3] = "SyJthetic";
      stringArray0[4] = "SyJthetic";
      Utility.methodTypeToSignature("SyJthetic", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "jsr_w", "YUyr<{ZZ\"", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Utility.isJavaIdentifierPart('/');
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      Utility.classOrInterface(1907);
      String string0 = "D";
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ifeq\t\t#-26367", string0);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      String string0 = Utility.convertString("Va==b[ `^$i{QY\"MF");
      assertEquals("Va==b[ `^$i{QY\\\"MF", string0);
      
      String string1 = Utility.compactClassName("Va==b[ `^$i{QY\"MF", true);
      String string2 = Utility.compactClassName("Va==b[ `^$i{QY\"MF", "Va==b[ `^$i{QY\"MF", false);
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Mm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Mm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      String string0 = Utility.getSignature("iW)?N`o>i]!m F%Yx;");
      assertEquals("LiW)?N`o>i]!m;", string0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      String string0 = Utility.classOrInterface(167);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byteArray0[0] = (byte)91;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(46, 102);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("daload", string0);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("2f 8e 8e 8e 8e 8e 98 8e", string0);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      int int0 = 14;
      Utility.setBit(14, 46);
      Utility.encode(byteArray0, true);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      String string0 = "RRuhW";
      Utility.convertString("RRuhW");
      boolean boolean0 = true;
      Utility.compactClassName("RRuhW", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "RRuhW";
      stringArray0[1] = "RRuhW";
      stringArray0[2] = "RRuhW";
      stringArray0[3] = "RRuhW";
      stringArray0[4] = "RRuhW";
      stringArray0[5] = "RRuhW";
      stringArray0[6] = "RRuhW";
      Utility.methodTypeToSignature("RRuhW", stringArray0);
      MockFile mockFile0 = new MockFile("RRuhW", "\r");
      Utility.isSet(186, 5);
      // Undeclared exception!
      try { 
        Utility.signatureToString("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `long'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Utility.getSignature("short");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "S";
      stringArray0[1] = "? extends ";
      stringArray0[2] = "short";
      stringArray0[3] = "S";
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)106;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-112), (int) (byte) (-112));
      try { 
        Utility.typeOfSignature("mL.9[-`.Y\"f)gD.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: mL.9[-`.Y\"f)gD.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Utility.isJavaIdentifierPart('D');
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-54);
      String[] stringArray0 = Constants.OPCODE_NAMES;
      try { 
        Utility.typeOfSignature("?`f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?`f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.accessToString(10);
      assertEquals("private static", string0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Utility.convertString("CONSTANT_Double");
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, false);
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("o$A");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(3522, (byte)0);
      constantArray0[1] = (Constant) constantNameAndType0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = (-2632);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2632), (-465));
      constantArray0[2] = (Constant) constantMethodHandle0;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)88;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-79), (int) (byte) (-79));
      Utility.convertString("0:    pop2\n1:    pop2\n2:    nop\n");
      try { 
        Utility.typeOfSignature("0:    pop2\n1:    pop2\n2:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    pop2
         // 1:    pop2
         // 2:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Utility.getSignature(")U2j+");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(3680, (-1911));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Utility.clearBit(4349, 4349);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "gY";
      Utility.compactClassName("[]");
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Utility.setBit(40, 2619);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, "ladd");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)51;
      byteArray0[4] = (byte)84;
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte)21;
      byteArray0[8] = (byte)51;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)51, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Utility.classOrInterface(0);
      Utility.isJavaIdentifierPart('a');
      Utility.format(92, 173, true, 'T');
      Utility.printArray((Object[]) null, true, false);
      Object object0 = new Object();
      Object object1 = new Object();
      try { 
        Utility.typeOfSignature("we,ybS;;uD#EE9^hv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: we,ybS;;uD#EE9^hv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ret", false);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)114, (byte)101, (byte)116}, byteArray0);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".]O][O!+)[";
      stringArray0[1] = ".]O][O!+)[";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(".]O][O!+)[", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[O!+)[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      ByteSequence byteSequence0 = null;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)8;
      byteArray0[0] = (byte)8;
      byte byte1 = (byte)97;
      byteArray0[1] = (byte)97;
      byte byte2 = (byte)46;
      byteArray0[2] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      String string0 = Utility.accessToString((-2374), true);
      assertEquals("private static final transient abstract synthetic annotation enum", string0);
      
      int int0 = Utility.setBit((-2374), 254);
      assertEquals((-2374), int0);
      
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (-2374), 1499, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)81;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1738), 476);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      // Undeclared exception!
      try { 
        Utility.decode("Rki4z$uv$fV", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fV\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      Utility.compactClassName("short");
      Utility.getSignature("t");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Lt;";
      stringArray0[1] = "Lt;";
      stringArray0[2] = "t";
      stringArray0[3] = "short";
      stringArray0[4] = "t";
      String string0 = Utility.methodTypeToSignature("? extends ", stringArray0);
      assertEquals("(LLt;;LLt;;Lt;SLt;)L?;", string0);
      
      String string1 = Utility.signatureToString("J{H;&V+pzrM", true);
      assertEquals("long", string1);
      
      String string2 = Utility.compactClassName("boolean", "? extends ", false);
      assertEquals("boolean", string2);
      
      byte byte0 = Utility.typeOfSignature("Lt;");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      byte byte0 = (byte)26;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ql8(@clMAN^U*Yp", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ql8(@clMAN^U*Yp'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-62);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-62), (int) (byte) (-62));
      assertEquals("0:    monitorenter\n1:    monitorenter\n2:    monitorenter\n", string0);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("invokedynamic", "invokedynamic", true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "invokedynamic";
      Utility.printArray(objectArray0);
      Utility.compactClassName("#x\"<HeBGd@L&$ Vqco", "invokedynamic", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      Utility.clearBit(57, 54);
      Utility.classOrInterface(19);
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) classPath0;
      objectArray0[1] = (Object) classPath0;
      objectArray0[2] = (Object) "\t(wide)";
      Utility.printArray(objectArray0, true, true);
      try { 
        Utility.typeOfSignature("%>y/73_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %>y/73_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      Utility.accessToString((-2374), false);
      Utility.setBit((-2374), (-2374));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte)126;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureReturnType("private static final synchronized transient interface abstract synthetic annotation enum", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `private static final synchronized transient interface abstract synthetic annotation enum'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)56;
      byteArray0[2] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)7, (int) (byte)18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      Utility.classOrInterface(1961);
      Utility.searchOpcode("interface");
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.reset();
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      byte byte0 = (byte)28;
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte)28);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      Constant[] constantArray0 = new Constant[13];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-118);
      constantPool0.copy();
      byteArray0[1] = (byte) (-118);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-118), (int) (byte) (-118));
      assertEquals("0:    l2d\n1:    l2d\n", string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("U6%bgc&^VC#", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U6%bgc&^VC#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      Utility.classOrInterface(1951);
      try { 
        Utility.typeOfSignature("Yvr./");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Yvr./
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      String string0 = Utility.classOrInterface(0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)12;
      byteArray0[3] = (byte)51;
      byteArray0[7] = (byte) (-1);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$A3$99$M$A$ff", string1);
      
      String string2 = Utility.compactClassName("lshr");
      assertEquals("lshr", string2);
      
      String string3 = Utility.methodSignatureReturnType("CONSTANT_Utf8", true);
      assertEquals("char", string3);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      Utility.compactClassName("short");
      Utility.getSignature(":");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "L:;";
      stringArray0[1] = "L:;";
      stringArray0[2] = ":";
      stringArray0[3] = "short";
      stringArray0[4] = ":";
      Utility.methodTypeToSignature("? extends ", stringArray0);
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      Utility.methodTypeToSignature("L:;", stringArray0);
      Utility.isSet((byte)48, (byte)48);
      Utility.replace(";qxdEbh*:", ":", "(LL:;;LL:;;L:;SL:;)LL:;;");
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "? extends ";
      objectArray0[2] = (Object) "short";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "L:;";
      objectArray0[5] = (Object) "(LL:;;LL:;;L:;SL:;)LL:;;";
      objectArray0[6] = (Object) ":";
      objectArray0[7] = (Object) ":";
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(LL:;;LL:;;L:;SL:;)L?;", ";qxdEbh*:", "ret");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;LL:;;L:;SL:;)L?;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)43;
      byteArray0[1] = (byte)43;
      Utility.accessToString((int) (byte)43, true);
      Utility.classOrInterface((byte)43);
      Utility.typeOfSignature("D");
      // Undeclared exception!
      try { 
        Utility.signatureToString("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-2282), (-2282));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.compactClassName("lneg");
      assertEquals("lneg", string0);
      
      String string1 = Utility.fillup(">K", (-2282), true, '*');
      assertEquals(">K", string1);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("d2i", string0);
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)0;
      int int0 = 92;
      boolean boolean0 = false;
      Utility.format((byte) (-69), (-435), false, '1');
      try { 
        Utility.methodSignatureArgumentTypes("-69");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -69
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      Utility.isJavaIdentifierPart('\'');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)127;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)127, (-1957));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence1, constantPool0, true);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("1b", string0);
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      Utility.signatureToString("CS$?4t84~8hkd", false);
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-90);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("d0 a6", string0);
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.toHexString(byteArray0);
      Utility.searchOpcode("? extends ");
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.decode("istore_0", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      Constant[] constantArray0 = new Constant[13];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readFloat();
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)2, (int) (byte) (-41));
      try { 
        Utility.typeOfSignature("2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2:    nop
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // 7:    nop
         // 8:    nop
         // 9:    nop
         // 10:   nop
         // 11:   nop
         // 12:   nop
         // 13:   nop
         // 14:   nop
         // 15:   nop
         // 16:   nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      try { 
        Utility.decode("Pk`wkYYj]$wT", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-69);
      byteArray0[1] = (byte) (-69);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-69);
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (byte) (-69);
      objectArray0[3] = (Object) (byte) (-69);
      Utility.printArray(objectArray0, true, true);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "/:~uGAvjo8>z_", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      try { 
        Utility.typeOfSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-59);
      Utility.equals(byteArray0, byteArray0);
      byte byte0 = (byte) (-78);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-78), (int) (byte) (-9), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      String string0 = "";
      Utility.searchOpcode("");
      boolean boolean0 = false;
      Utility.compactClassName("", false);
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 183, 183);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      Utility.convertString("Synthetic");
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)24;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Synthetic");
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("Synthetic", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("Synthetic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Synthetic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      Utility.classOrInterface(1961);
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte) (-7);
      byteArray0[7] = (byte) (-7);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte) (-7));
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 134, 106);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)106;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-112), (int) (byte) (-112));
      assertEquals("0:    fmul\n1:    fmul\n2:    nop\n", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("6a 6a 00", string1);
      
      String string2 = Utility.getSignature("0:    fmul\n1:    fmul\n2:    nop\n");
      assertEquals("L0:;", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string3 = Utility.accessToString(74, false);
      assertEquals("private static volatile", string3);
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      Utility.isSet((-2282), (-2282));
      Utility.typeOfSignature("[]");
      String[] stringArray0 = Constants.CONSTANT_NAMES;
      assertEquals(13, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence1, constantPool1, true);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("20 a5 20 20 20 20 20 00", string0);
      
      short short0 = Utility.searchOpcode("invokevirtual");
      assertEquals((short)182, short0);
      
      String string1 = Utility.replace("invokevirtual", "mzmsM", ".v");
      assertEquals("invokevirtual", string1);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)58;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("astore\t\t%0", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("3a 00 3a 3a 00 00 00", string1);
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      String string0 = "A/>iT;1 <&IC<Mt/`";
      try { 
        Utility.typeOfSignature("A/>iT;1 <&IC<Mt/`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A/>iT;1 <&IC<Mt/`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      Utility.isSet(3185, 3185);
      Utility.typeOfSignature("Lfreturn;V");
      String string0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = Utility.isJavaIdentifierPart('D');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence2, constantPool0, true);
      String string1 = Utility.codeToString(byteSequence2, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      try { 
        Utility.typeOfSignature("iconst_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iconst_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[2] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      int int0 = Utility.setBit(254, 254);
      assertEquals(1073742078, int0);
      
      String string0 = Utility.signatureToString("Invalid type: ");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = Utility.isJavaIdentifierPart('7');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-126);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 194);
      assertEquals("0:    fstore_1\n1:    nop\n2:    ixor\n", string0);
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      Constant[] constantArray0 = new Constant[11];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      byte[] byteArray1 = Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      Utility.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)31, (byte) (-117), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(10, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-88);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-88);
      byteArray1[1] = (byte)72;
      byteArray1[2] = (byte)72;
      byteArray1[3] = (byte)98;
      byteArray1[4] = (byte)98;
      byteArray1[5] = (byte) (-88);
      byteArray1[6] = (byte) (-66);
      byteArray1[7] = (byte) (-88);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals(3, byteSequence1.getIndex());
      
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("48 02 a8", string0);
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      String string0 = Utility.getSignature("sastore");
      assertEquals("Lsastore;", string0);
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = false;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-117), (int) (byte)40, false);
      Utility.compactClassName("", "9|e5T\"2l%@=pJG|e&", false);
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      Utility.clearBit(0, 0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-2);
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object1;
      objectArray0[1] = object3;
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$IN", "java.lang.Object@40fd7bfd, java.lang.Object@1b9997e7, java.lang.Object@40fd7bfd, java.lang.Object@5ce0f24b", "int", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $IN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-86);
      byteArray1[1] = (byte) (-86);
      byteArray1[2] = (byte) (-86);
      byteArray1[3] = (byte) (-86);
      byteArray1[4] = (byte) (-86);
      byteArray1[5] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.close();
      byteSequence0.reset();
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-2282), (-2282));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ladd", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("61 90 13", string1);
      
      short short0 = Utility.searchOpcode("ladd");
      assertEquals((short)97, short0);
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-69);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-69);
      byteArray1[3] = (byte) (-69);
      Utility.equals(byteArray1, byteArray0);
      Utility.toHexString(byteArray1);
      // Undeclared exception!
      try { 
        Utility.signatureToString("njdASYL]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `njdASYL]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      String string0 = Utility.compactClassName("eljkcOzP{&", "wZoqH>!A;T", true);
      assertEquals("eljkcOzP{&", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)104;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("imul", string1);
      
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("E!$yB#e?G,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E!$yB#e?G,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "float";
      stringArray0[1] = "float";
      Utility.methodTypeToSignature("float", stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = "java.lang.[]";
      Utility.methodTypeToSignature("java.lang.[]", stringArray0);
      Utility.isSet((-2153), (byte)48);
      Utility.replace("}", "Invalid type: ", "el{L~F_Ge-oCG/");
      Object object0 = new Object();
      Utility.printArray((Object[]) constantArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("float", "java.lang.[]", "long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-108);
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) constantPool0;
      objectArray0[2] = (Object) (byte) (-103);
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) (byte) (-108);
      objectArray0[5] = (Object) constantPool0;
      objectArray0[6] = (Object) constantPool0;
      // Undeclared exception!
      try { 
        Utility.printArray(objectArray0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)24;
      byteArray1[1] = (byte)101;
      byteArray1[2] = (byte)13;
      byteArray1[3] = (byte) (-101);
      byteArray1[4] = (byte) (-101);
      byteArray1[5] = (byte) (-101);
      byteArray1[6] = (byte) (-76);
      byteArray1[7] = (byte) (-101);
      byteArray1[8] = (byte)13;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence0.readFloat();
      byteSequence1.readByte();
      byteSequence0.reset();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 26027. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      Utility.getSignature("\t\t#");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "L#;";
      stringArray0[1] = "\t\t#";
      stringArray0[2] = "L#;";
      stringArray0[3] = "L#;";
      stringArray0[4] = "\t\t#";
      stringArray0[5] = "ACC_SUPER flag\t\t";
      stringArray0[6] = "\t\t#";
      stringArray0[7] = "\t\t#";
      Utility.methodTypeToSignature("L#;", stringArray0);
      Utility.typeOfSignature("L#;");
      Utility.printArray((Object[]) stringArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\t\t#");
      PrintStream printStream0 = mockPrintStream0.printf("L#;", (Object[]) stringArray0);
      Utility.printArray(printStream0, (Object[]) stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      // Undeclared exception!
      try { 
        Utility.decode("Rki4z$uv$fV", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fV\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, (int) (byte)16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "float";
      stringArray0[1] = "float";
      String string0 = Utility.methodTypeToSignature("float", stringArray0);
      assertEquals("(FF)F", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("8b ff 8b 8b 8b 8b 00", string1);
      
      String string2 = Utility.accessToString((int) (byte) (-117));
      assertEquals("public private static transient native interface abstract strictfp synthetic annotation enum", string2);
      
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), (-1947));
      assertEquals("0:    f2i\n1:    impdep2\n2:    f2i\n3:    f2i\n4:    f2i\n5:    f2i\n6:    nop\n", string3);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string4 = Utility.accessToString((-1947), false);
      assertEquals("public protected synchronized volatile strictfp synthetic annotation enum", string4);
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      String[] stringArray0 = Constants.CLASS_TYPE_NAMES;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.decode("org.apache.bcel.classfile.FieldOrMethod", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)114;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1464, 161);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)75;
      byteArray0[3] = (byte) (-102);
      byteArray0[5] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.compactClassName("aW,R[)^.Ha");
      assertEquals("aW,R[)^.Ha", string0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ifne\t\t#19355", string1);
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.setBit(254, 254);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.Utility", "#p[", "goto_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)76;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      byte byte0 = Utility.typeOfSignature("FnAdASl]");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2970, 2970);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantArray0[1] = (Constant) constantMethodHandle1;
      constantArray0[2] = (Constant) constantMethodHandle1;
      constantArray0[3] = (Constant) constantMethodHandle0;
      constantArray0[4] = (Constant) constantMethodHandle1;
      constantArray0[5] = (Constant) constantMethodHandle1;
      constantArray0[6] = (Constant) constantMethodHandle0;
      constantArray0[7] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)62;
      constantMethodHandle0.toString();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("-!zjS#6&hc'kC>$", "multianewarray", "49 ba 3e 00 00", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -!zjS#6&hc'kC>$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.compactClassName("Q", "pzPqkIkF\"ED0i=|+", false);
      try { 
        Utility.typeOfSignature("Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-103);
      String string0 = "#tNmYngP@-R+<eE:tSq";
      try { 
        Utility.typeOfSignature("#tNmYngP@-R+<eE:tSq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #tNmYngP@-R+<eE:tSq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1029, (int) (byte)64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("RRuhW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RRuhW'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      String string0 = "FnAdASl]";
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)98;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray1[1] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.toHexString(byteArray1);
      Utility.accessToString(193);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 47616. Constant pool size is: 6
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Utility.isJavaIdentifierPart('t');
      Utility.encode(byteArray0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Utility.decode("$A$A$A$A", false);
      Utility.getSignature("$A$A$A$A");
      try { 
        Utility.methodSignatureToString("", "L$A$A$A$A;", "L$A$A$A$A;", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("if_icmpeq\t\t#0", string0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("nop", string1);
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      Utility.classOrInterface(0);
      Utility.isJavaIdentifierPart('a');
      boolean boolean0 = true;
      Utility.format(92, 173, true, 'T');
      Utility.classOrInterface(0);
      String string0 = "&}nWH";
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-71);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-71), (int) (byte) (-71));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      Utility.clearBit(4318, (-238));
      Utility.convertString(" P<[x\t8");
      Object object0 = new Object();
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)17;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$RM$R$R$5b$R", string0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]tN");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray1 = Utility.decode("X0.=QVMFcB$", false);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)88, (byte)48, (byte)46, (byte)61, (byte)81, (byte)86, (byte)77, (byte)70, (byte)99, (byte)66}, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      Utility.getSignature("gt$g!bBq+^GtROtCs");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.toHexString(byteArray0);
      Utility.accessToString(186);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2548, (int) (byte)40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)59;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("9d 18 a5 00 de 12 3b", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifgt\t\t#6309", string1);
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)26;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.methodSignatureReturnType("V", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString(", class=<unknown>", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `, class=<unknown>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      Utility.classOrInterface(7);
      try { 
        Utility.typeOfSignature("G93$?#!f4AO<V_m)9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G93$?#!f4AO<V_m)9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      String string0 = Utility.classOrInterface(1820);
      assertEquals("interface", string0);
      
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "interface";
      objectArray0[1] = (Object) classPath0;
      objectArray0[2] = (Object) classPath0;
      objectArray0[4] = (Object) classPath0;
      String string1 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string1);
      assertEquals("{\"interface\", \"\", \"\", null, \"\"}", string1);
      
      byte byte0 = Utility.typeOfSignature("Bg/t.~8:VM%)Lox9)");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2970, 2970);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantArray0[1] = (Constant) constantMethodHandle1;
      constantArray0[2] = (Constant) constantMethodHandle1;
      constantArray0[3] = (Constant) constantMethodHandle0;
      constantArray0[4] = (Constant) constantMethodHandle1;
      constantArray0[5] = (Constant) constantMethodHandle1;
      constantArray0[6] = (Constant) constantMethodHandle0;
      constantArray0[7] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byte byte0 = (byte) (-70);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)121;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 93, 256);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 15941. Constant pool size is: 8
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('8');
      Utility.toHexString(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-69);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-69);
      byteArray1[3] = (byte) (-69);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-69);
      Utility.toHexString(byteArray1);
      Utility.convertString("pc#");
      String string0 = Utility.signatureToString("Lclass;V");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      Utility.clearBit(4318, (-238));
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ")\t";
      stringArray0[1] = "W?fq-o}8:`Q(:,] ";
      stringArray0[2] = ")\t";
      Utility.methodTypeToSignature(")\t", stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)17;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      Utility.classOrInterface(1961);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte) (-7);
      byteArray0[7] = (byte) (-7);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte) (-7));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 23, (int) (byte) (-122));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      Utility.classOrInterface(1961);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.toHexString(byteArray0);
      Utility.isJavaIdentifierPart('_');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2842, 2842);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      String string0 = "Synthetic";
      Utility.convertString("Synthetic");
      String string1 = "\t(wide)";
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)24;
      Constant[] constantArray0 = new Constant[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Synthetic");
      ConstantClass constantClass0 = new ConstantClass(766);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2409, 2761);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[0] = (byte) (-127);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-127), true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    lor\n1:    nop\n2:    nop\n3:    nop\n", "0:    lor\n1:    nop\n2:    nop\n3:    nop\n", "0:    lor\n1:    nop\n2:    nop\n3:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    lor
         // 1:    nop
         // 2:    nop
         // 3:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      try { 
        Utility.typeOfSignature("E;9=GaI5R4|rO}h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E;9=GaI5R4|rO}h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-69);
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1417), (int) (byte) (-69));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-100);
      byteArray0[4] = (byte)74;
      byteArray0[6] = (byte)50;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)50, (int) (byte)50, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-49);
      byte byte0 = (byte) (-110);
      byteArray0[3] = (byte) (-110);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean1 = true;
      try { 
        Utility.decode("$f0$z$cf$92", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('7');
      Utility.toHexString(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1794279204), (-1794279204), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-16);
      try { 
        Utility.typeOfSignature("/E*?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /E*?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      Utility.clearBit(4318, (-238));
      char char0 = 't';
      Utility.format(19, 19, true, 't');
      Utility.classOrInterface((-2834));
      try { 
        Utility.typeOfSignature("19ttttttttttttttttt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 19ttttttttttttttttt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-69);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte) (-69);
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('\"');
      Utility.toHexString(byteArray0);
      Utility.convertString("bb bb bb 00");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "bb bb bb 00";
      objectArray0[1] = (Object) (byte) (-69);
      objectArray0[2] = (Object) "bb bb bb 00";
      Utility.printArray(objectArray0, true, false);
      try { 
        Utility.typeOfSignature("O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)101;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)101, (int) (byte)101);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      Utility.signatureToString("FnAdASl]");
      Utility.searchOpcode("freturn");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-85);
      byteArray0[0] = (byte) (-85);
      byte byte1 = (byte) (-79);
      byte byte2 = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      byteSequence1.reset();
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "float";
      stringArray0[1] = "float";
      Utility.methodTypeToSignature("float", stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = Utility.methodTypeToSignature("java.lang.[]", stringArray0);
      assertEquals("(FF)[Ljava/lang/;", string0);
      
      boolean boolean0 = Utility.isSet((byte)48, (byte)48);
      assertFalse(boolean0);
      
      String string1 = Utility.replace("}", "Invalid type: ", "el{L~F_Ge-oCG/");
      assertEquals("}", string1);
      
      Object object0 = new Object();
      String string2 = Utility.printArray((Object[]) constantArray0);
      assertNotNull(string2);
      assertEquals("{null}", string2);
      
      Utility.signatureToString("Invalid type: ", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string3 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fdiv", string3);
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      int int0 = Utility.setBit((-242), (-242));
      assertEquals((-242), int0);
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      String string0 = Utility.accessToString(4100);
      assertEquals("protected synthetic", string0);
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      Utility.isJavaIdentifierPart('9');
      Utility.accessToString((-1799), false);
      Integer integer0 = new Integer(57);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-9);
      byteArray0[5] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 98, 57, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 63289. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-16);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("x", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lload_2", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("20 07 07", string1);
      
      short short0 = Utility.searchOpcode("lload_2");
      assertEquals((short)32, short0);
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      try { 
        Utility.typeOfSignature("REC\"ZYy#]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: REC\"ZYy#]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      String string0 = "0";
      try { 
        Utility.typeOfSignature("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-2282), (-2282));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("land", string0);
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      Utility.compactClassName("short");
      Utility.isJavaIdentifierPart('{');
      try { 
        Utility.methodSignatureArgumentTypes("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      try { 
        Utility.typeOfSignature("6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Warning: Padding byte != 0 in ", "Warning: Padding byte != 0 in ", "Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-84), 1543, true);
      assertEquals("0:    nop\n1:    ireturn\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[1] = (byte) (-106);
      byteArray1[5] = (byte)81;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 201, 176);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)27, (int) (byte)27);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      String string0 = "{|";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("{|", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      String string0 = Utility.getSignature("7zQByuB[]XZIOz");
      assertEquals("[L7zQByuB;", string0);
      
      String string1 = Utility.compactClassName("7zQByuB[]XZIOz", ">_+o)bR|6", true);
      assertEquals("7zQByuB[]XZIOz", string1);
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)67;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$AC$A", string0);
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-30);
      byteArray0[6] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 2
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y~rKuyhUjYBR[PIxm", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y~rKuyhUjYBR[PIxm'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-84), 1543, true);
      assertEquals("0:    nop\n1:    ireturn\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string0);
      
      String string1 = Utility.getSignature("0:    nop\n1:    ireturn\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n");
      assertEquals("L0:;", string1);
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 00 00", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      DataInputStream.readUTF((DataInput) dataInputStream0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("nop", string1);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = Utility.setBit((byte)0, 192);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      Utility.accessToString((-2374), true);
      String string0 = "Ko.3_Tx";
      String string1 = "impdep2";
      Utility.compactClassName("Ko.3_Tx", "impdep2", true);
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("ishl", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ishl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1588, (int) (byte)123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      Utility.getSignature("char");
      // Undeclared exception!
      try { 
        Utility.signatureToString("char", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `char'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)79;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$86O", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray1 = Utility.decode("$86O", false);
      assertArrayEquals(new byte[] {(byte) (-122), (byte)79}, byteArray1);
      
      String string1 = Utility.getSignature("$86O");
      assertEquals("L$86O;", string1);
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      Utility.signatureToString("SYSTEM", false);
      try { 
        Utility.typeOfSignature("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte)40);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      Utility.classOrInterface(1946);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)95, (int) (byte)40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      Utility.accessToString((-2374), false);
      int int0 = new Integer(254);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-9);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-9), (int) (byte) (-9), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 808, 1300);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      Utility.setBit(5035, 640);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)76;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)65;
      byteArray1[1] = (byte)36;
      byteArray1[2] = (byte)76;
      byteArray1[3] = (byte)122;
      byteArray1[4] = (byte)36;
      byteArray1[5] = (byte)76;
      byteArray1[6] = (byte)65;
      Utility.equals(byteArray1, byteArray0);
      try { 
        Utility.typeOfMethodSignature("$AzAL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $AzAL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-122);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$86$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("i2f", string1);
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      String string0 = Utility.accessToString((-2374), true);
      int int0 = Utility.setBit((-2374), 254);
      assertEquals((-2374), int0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = Utility.decode("private static final transient abstract synthetic annotation enum", false);
      String string1 = Utility.compactClassName("private static final transient abstract synthetic annotation enum");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.codeToString(byteArray0, constantPool0, (-2374), 133, false);
      assertEquals("0:    irem\n1:    frem\n2:    lmul\n3:    fneg\n4:    ladd\n5:    ineg\n6:    lsub\n7:    lload_2\n8:    drem\n9:    ineg\n10:   ladd\n11:   ineg\n12:   lmul\n13:   dadd\n14:   lload_2\n15:   fsub\n16:   lmul\n17:   fdiv\n18:   ladd\n19:   idiv\n20:   lload_2\n21:   ineg\n22:   frem\n23:   ladd\n24:   fdiv\n25:   drem\n26:   lmul\n27:   lsub\n28:   fdiv\n29:   ineg\n30:   lload_2\n31:   ladd\n32:   fadd\n33:   drem\n34:   ineg\n35:   frem\n36:   ladd\n37:   dadd\n38:   ineg\n39:   lload_2\n40:   drem\n41:   lshl\n42:   fdiv\n43:   ineg\n44:   imul\n45:   lsub\n46:   ineg\n47:   lmul\n48:   dadd\n49:   lload_2\n50:   ladd\n51:   fdiv\n52:   fdiv\n53:   ddiv\n54:   ineg\n55:   ladd\n56:   ineg\n57:   lmul\n58:   ddiv\n59:   fdiv\n60:   lload_2\n61:   lsub\n62:   fdiv\n63:   lneg\n64:   ldiv\n", string2);
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      String string0 = Utility.accessToString(324);
      assertEquals("protected volatile native", string0);
      
      byte[] byteArray0 = Utility.decode("'(u$%-&eRZd", false);
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)39, (byte)40, (byte)117, (byte)0, (byte)45, (byte)38, (byte)101, (byte)82, (byte)90, (byte)100}, byteArray0);
      
      String string1 = Utility.compactClassName("'(u$%-&eRZd");
      assertEquals("'(u$%-&eRZd", string1);
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      Utility.convertString("66dI|(a|Bf'bDG{");
      Utility.compactClassName("66dI|(a|Bf'bDG{", true);
      Utility.compactClassName("66d\\I|(a\\|Bf'bDG{", "rhYSdb*J%MZBj&)&eW6", true);
      try { 
        Utility.typeOfSignature("]LGSEb4*l`g>O#+\"JSr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ]LGSEb4*l`g>O#+\"JSr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      String[] stringArray0 = new String[6];
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)0;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      boolean boolean1 = Utility.isJavaIdentifierPart('7');
      assertTrue(boolean1 == boolean0);
      
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 bb bb 00", string0);
      
      String string1 = Utility.convertString("@&*?k9Sf");
      assertEquals("@&*?k9Sf", string1);
      
      String string2 = Utility.fillup("3", 0, true, '7');
      assertEquals("3", string2);
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.accessToString((-845), false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2437), (-845));
      Utility.convertString(";/#");
      Utility.typeOfSignature("[]");
      String[] stringArray0 = new String[7];
      stringArray0[0] = ";/#";
      stringArray0[1] = "invokespecial";
      stringArray0[2] = "[]";
      stringArray0[3] = "public private final synchronized transient abstract strictfp synthetic annotation enum";
      stringArray0[4] = "invokespecial";
      stringArray0[5] = ";/#";
      stringArray0[6] = "invokespecial";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("invokespecial", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)38;
      byteArray1[2] = (byte)27;
      byteArray1[3] = (byte) (-70);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence3, (ConstantPool) null, true);
      assertEquals("dload_0", string0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("nop", string1);
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "if_icmplt", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      Locale.getISOLanguages();
      try { 
        Utility.methodSignatureReturnType("E+h`62YK9V[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E+h`62YK9V['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      Utility.convertString("\t");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte) (-84);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-84), 185);
      Utility.convertString("ifne");
      Utility.getSignature("ifne");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      
      String string0 = Utility.accessToString((int) (byte) (-84), false);
      assertEquals("protected static synchronized transient native interface abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\"";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte) (-57);
      byteArray0[7] = (byte) (-60);
      byteArray0[8] = (byte) (-108);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 200, (int) (byte)13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mcd|> )Q75Cq#\"\"");
      ConstantClass constantClass0 = new ConstantClass((-26));
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool2 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool2, false);
      assertEquals(1, byteSequence0.getIndex());
      
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("2e 00 00 00 00 00 00 00 00", string0);
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      Constant[] constantArray0 = new Constant[13];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-74);
      byteArray1[1] = (byte) (-23);
      byteArray1[2] = (byte) (-65);
      byteArray1[3] = (byte)16;
      byteArray1[4] = (byte) (-49);
      byteArray1[5] = (byte)16;
      byteArray1[6] = (byte) (-23);
      byteArray1[7] = (byte)27;
      Utility.toHexString(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-65), 68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 59839. Constant pool size is: 13
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)39;
      byteArray1[1] = (byte)39;
      byteArray1[2] = (byte)123;
      byteArray1[3] = (byte)39;
      byteArray1[4] = (byte)123;
      byteArray1[5] = (byte)39;
      byteArray1[6] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.toHexString(byteArray0);
      Code code0 = null;
      try {
        code0 = new Code((Code) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Code", e);
      }
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      Utility.convertString("RRuhW");
      Utility.compactClassName("RRuhW", true);
      String[] stringArray0 = new String[7];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RRuhW");
      String string0 = "6B/N6B}6^";
      String string1 = "6qVC1d-W _A";
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("6qVC1d-W _A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6qVC1d-W _A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)95;
      Utility.encode(byteArray0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.decode("ob$ffbb0X_", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      Utility.clearBit(4318, (-238));
      Utility.format(19, 19, true, 't');
      Utility.classOrInterface((-2834));
      try { 
        Utility.typeOfSignature("19ttttttttttttttttt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 19ttttttttttttttttt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      Utility.setBit((-254), (-254));
      Utility.compactClassName("org.apache.bcel.classfile.Utility", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.bcel.classfile.Utility");
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.format("char", objectArray0);
      Utility.isSet(45, (-250));
      Utility.compactClassName("org.apache.bcel.classfile.Utility");
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      Utility.replace("rL*vq)&", ">", "rL*vq)&");
      String[] stringArray0 = new String[4];
      stringArray0[0] = ">";
      stringArray0[1] = ">";
      stringArray0[2] = "\"";
      stringArray0[3] = "rL*vq)&";
      Utility.methodTypeToSignature("rL*vq)&", stringArray0);
      Utility.accessToString(0, true);
      Utility.printArray((Object[]) stringArray0, true);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
