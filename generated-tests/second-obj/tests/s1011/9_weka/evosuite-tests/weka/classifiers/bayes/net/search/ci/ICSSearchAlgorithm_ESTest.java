/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:53:03 GMT 2018
 */

package weka.classifiers.bayes.net.search.ci;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm;
import weka.classifiers.lazy.kstar.KStarConstants;
import weka.core.Attribute;
import weka.core.Capabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ICSSearchAlgorithm_ESTest extends ICSSearchAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.name(3184);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      String string0 = iCSSearchAlgorithm0.getRevision();
      assertEquals("8034", string0);
      
      iCSSearchAlgorithm0.getOptions();
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "\\~";
      ICSSearchAlgorithm.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-1446);
      intArray0[2] = 111;
      intArray0[4] = 26;
      iCSSearchAlgorithm_SeparationSet0.m_set = intArray0;
      iCSSearchAlgorithm_SeparationSet0.contains(10);
      boolean[][] booleanArray0 = new boolean[0][1];
      iCSSearchAlgorithm0.setMaxCardinality(1376);
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.existsSepSet(1376, 10, 10, booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      FileSystemHandling.shouldAllThrowIOExceptions();
      iCSSearchAlgorithm0.globalInfo();
      BayesNet bayesNet0 = new BayesNet();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", arrayList0, 10);
      iCSSearchAlgorithm0.search(bayesNet0, instances0);
      instances0.remove((Object) "@relation");
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      iCSSearchAlgorithm0.getRevision();
      iCSSearchAlgorithm0.setMaxCardinality(10);
      assertEquals(10, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean[][] booleanArray0 = new boolean[1][1];
      String string0 = iCSSearchAlgorithm0.maxCardinalityTipText();
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", string0);
      
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", arrayList0, 10);
      iCSSearchAlgorithm0.search((BayesNet) null, instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Function.identity();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = KDTreeNodeSplitter.MIN;
      int int1 = iCSSearchAlgorithm0.next(10, (-615), (byte) (-115), booleanArray0);
      assertEquals(11, int1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.";
      iCSSearchAlgorithm0.setOptions(stringArray0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      iCSSearchAlgorithm_SeparationSet0.getRevision();
      BayesNet bayesNet0 = new BayesNet();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("8034", arrayList0, 35);
      iCSSearchAlgorithm0.search(bayesNet0, instances0);
      Properties properties0 = new Properties();
      Attribute attribute0 = new Attribute(".arff");
      boolean[][] booleanArray0 = new boolean[10][4];
      iCSSearchAlgorithm_SeparationSet0.m_set = iCSSearchAlgorithm_SeparationSet0.m_set;
      attribute0.setStringValue("DF0");
      ICSSearchAlgorithm.SeparationSet[] iCSSearchAlgorithm_SeparationSetArray0 = new ICSSearchAlgorithm.SeparationSet[1];
      arrayList0.add(attribute0);
      iCSSearchAlgorithm_SeparationSetArray0[0] = iCSSearchAlgorithm_SeparationSet0;
      ICSSearchAlgorithm.SeparationSet[] iCSSearchAlgorithm_SeparationSetArray1 = new ICSSearchAlgorithm.SeparationSet[8];
      iCSSearchAlgorithm_SeparationSetArray1[2] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray0[0] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray1[5] = iCSSearchAlgorithm_SeparationSet0;
      ICSSearchAlgorithm.SeparationSet[][] iCSSearchAlgorithm_SeparationSetArray2 = new ICSSearchAlgorithm.SeparationSet[1][0];
      iCSSearchAlgorithm_SeparationSetArray1[1] = iCSSearchAlgorithm_SeparationSet0;
      Attribute.typeToString((-1633));
      iCSSearchAlgorithm_SeparationSetArray2[0] = iCSSearchAlgorithm_SeparationSetArray1;
      iCSSearchAlgorithm0.calcVeeNodes(booleanArray0, booleanArray0, iCSSearchAlgorithm_SeparationSetArray2);
      iCSSearchAlgorithm0.listOptions();
      Random.setNextRandom(3);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertNotNull(iCSSearchAlgorithm0);
      
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      assertNull(bayesNet0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(6625);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Attribute attribute0 = new Attribute("No model estimator set");
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isString());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.isRegular());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isString());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.isRegular());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertTrue(boolean0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(0);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Instances instances0 = new Instances("string", arrayList0, 2);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals((-1), instances0.classIndex());
      assertEquals("string", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertNotNull(instances0);
      
      arrayList0.trimToSize();
      assertNotSame(arrayList0, arrayList1);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      ArrayList<String> arrayList2 = new ArrayList<String>();
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertNotNull(arrayList2);
      
      boolean boolean3 = arrayList0.add(attribute0);
      assertNotSame(arrayList0, arrayList1);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isString());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.index());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.isRegular());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertTrue(boolean3);
      
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.CISearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertNotNull(iCSSearchAlgorithm0);
      
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      assertNull(bayesNet0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(6625);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Attribute attribute0 = new Attribute("herein", 6625);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertEquals(6625, attribute0.index());
      assertTrue(attribute0.isAveragable());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertNotNull(attribute0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertEquals(6625, attribute0.index());
      assertTrue(attribute0.isAveragable());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertTrue(boolean0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Attribute attribute1 = new Attribute("K", linkedList0, 10);
      assertFalse(attribute1.equals((Object)attribute0));
      assertEquals(0, linkedList0.size());
      assertEquals("", attribute1.getDateFormat());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertTrue(attribute1.isNominal());
      assertFalse(attribute1.isAveragable());
      assertFalse(attribute1.isRegular());
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertEquals(10, attribute1.index());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertEquals(1, attribute1.type());
      assertFalse(attribute1.isRelationValued());
      assertFalse(attribute1.isDate());
      assertEquals(0, attribute1.numValues());
      assertFalse(attribute1.hasZeropoint());
      assertEquals(0.0, attribute1.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute1.ordering());
      assertEquals(0.0, attribute1.getLowerNumericBound(), 0.01);
      assertFalse(attribute1.isString());
      assertFalse(attribute1.isNumeric());
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertNotNull(attribute1);
      
      Stream<String> stream0 = linkedList0.parallelStream();
      assertEquals(0, linkedList0.size());
      assertNotNull(stream0);
      
      String string0 = iCSSearchAlgorithm0.globalInfo();
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", string0);
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      arrayList0.ensureCapacity(6625);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Instances instances0 = new Instances("herein", arrayList0, 95);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals("herein", instances0.relationName());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertNotNull(instances0);
      
      iCSSearchAlgorithm0.setMaxCardinality(1);
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals(1, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertNotNull(iCSSearchAlgorithm0);
      
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertNotNull(iCSSearchAlgorithm_SeparationSet0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = iCSSearchAlgorithm_SeparationSet0.getRevision();
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("8034", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[10];
      BayesNet bayesNet0 = new BayesNet();
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals(2, bayesNet0.graphType());
      assertFalse(bayesNet0.getDebug());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertNotNull(bayesNet0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(6593);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8034");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Instances instances0 = new Instances("8034", arrayList0, 13);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("8034", instances0.relationName());
      assertEquals((-1), instances0.classIndex());
      assertNotNull(instances0);
      
      iCSSearchAlgorithm0.search(bayesNet0, instances0);
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals(2, bayesNet0.graphType());
      assertFalse(bayesNet0.getDebug());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("8034", instances0.relationName());
      assertEquals((-1), instances0.classIndex());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      iCSSearchAlgorithm0.setMarkovBlanketClassifier(true);
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertTrue(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Attribute attribute0 = new Attribute("8034", arrayList1, (byte)0);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(attribute0.isRegular());
      assertEquals(0, attribute0.index());
      assertFalse(attribute0.hasZeropoint());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(1, attribute0.type());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.ordering());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNumeric());
      assertFalse(attribute0.isString());
      assertTrue(attribute0.isNominal());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isAveragable());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertNotNull(attribute0);
      
      boolean boolean5 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "real");
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5);
      
      int int0 = KStarConstants.M_NORMAL;
      assertEquals(3, int0);
      
      Instances instances1 = new Instances("cHWI\";>=&G.5/8(I@", arrayList0, 2);
      assertTrue(instances1.equals((Object)instances0));
      assertEquals("cHWI\";>=&G.5/8(I@", instances1.relationName());
      assertEquals(0, instances1.numAttributes());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertEquals(0, instances1.size());
      assertEquals((-1), instances1.classIndex());
      assertEquals(0, instances1.numInstances());
      assertFalse(instances1.checkForStringAttributes());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(instances1);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling1));
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling2);
      
      iCSSearchAlgorithm0.search(bayesNet0, instances1);
      assertNotSame(instances1, instances0);
      assertTrue(instances1.equals((Object)instances0));
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertTrue(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("cHWI\";>=&G.5/8(I@", instances1.relationName());
      assertEquals(0, instances1.numAttributes());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertEquals(0, instances1.size());
      assertEquals((-1), instances1.classIndex());
      assertEquals(0, instances1.numInstances());
      assertFalse(instances1.checkForStringAttributes());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals(2, bayesNet0.graphType());
      assertFalse(bayesNet0.getDebug());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet1 = iCSSearchAlgorithm0.existsSepSet((-1614), 2237, 1, (boolean[][]) null);
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertTrue(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertNull(iCSSearchAlgorithm_SeparationSet1);
      
      iCSSearchAlgorithm0.calcArcDirections((boolean[][]) null, (boolean[][]) null);
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertTrue(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertNotNull(iCSSearchAlgorithm0);
      
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertNotNull(iCSSearchAlgorithm_SeparationSet0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean[][] booleanArray0 = new boolean[0][1];
      String string0 = iCSSearchAlgorithm_SeparationSet0.getRevision();
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("8034", string0);
      assertNotNull(string0);
      
      iCSSearchAlgorithm0.setMaxCardinality(1388);
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals(1388, iCSSearchAlgorithm0.getMaxCardinality());
      
      String string1 = iCSSearchAlgorithm_SeparationSet0.getRevision();
      assertTrue(string1.equals((Object)string0));
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals(1388, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("8034", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-126);
      BayesNet bayesNet0 = new BayesNet();
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals(2, bayesNet0.graphType());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertFalse(bayesNet0.getDebug());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertNotNull(bayesNet0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(6595);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Instances instances0 = new Instances("8034", arrayList0, 10);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals("8034", instances0.relationName());
      assertNotNull(instances0);
      
      iCSSearchAlgorithm0.search(bayesNet0, instances0);
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals(1388, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals(2, bayesNet0.graphType());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertFalse(bayesNet0.getDebug());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals("8034", instances0.relationName());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet1 = iCSSearchAlgorithm0.existsSepSet(10, 10, 2, booleanArray0);
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals(1388, iCSSearchAlgorithm0.getMaxCardinality());
      assertNull(iCSSearchAlgorithm_SeparationSet1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertNotNull(iCSSearchAlgorithm0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      BayesNet bayesNet0 = new BayesNet();
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertFalse(bayesNet0.getDebug());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals(2, bayesNet0.graphType());
      assertNotNull(bayesNet0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      iCSSearchAlgorithm0.setMarkovBlanketClassifier(true);
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertTrue(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      String string0 = iCSSearchAlgorithm0.toString();
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertTrue(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("SearchAlgorithm\n", string0);
      assertNotNull(string0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String[] stringArray0 = iCSSearchAlgorithm0.getOptions();
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertTrue(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertNotNull(stringArray0);
      
      iCSSearchAlgorithm0.setOptions(stringArray0);
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertTrue(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertNotNull(iCSSearchAlgorithm0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean[][] booleanArray0 = new boolean[0][1];
      String string0 = iCSSearchAlgorithm0.maxCardinalityTipText();
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", string0);
      assertNotNull(string0);
      
      BayesNet bayesNet0 = new BayesNet();
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertFalse(bayesNet0.getDebug());
      assertEquals(2, bayesNet0.graphType());
      assertNotNull(bayesNet0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Instances instances0 = new Instances("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", arrayList0, 10);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertNotNull(instances0);
      
      iCSSearchAlgorithm0.search(bayesNet0, instances0);
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertFalse(bayesNet0.getDebug());
      assertEquals(2, bayesNet0.graphType());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      
      boolean boolean1 = instances0.remove((Object) "@relation");
      assertFalse(boolean1 == boolean0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertFalse(boolean1);
      
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      instances0.replaceAll(unaryOperator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      
      String string1 = iCSSearchAlgorithm0.getRevision();
      assertFalse(string1.equals((Object)string0));
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("8034", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".bsi";
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.next((byte) (-115), 221, 1424, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 221
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertNotNull(iCSSearchAlgorithm0);
      
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertNotNull(iCSSearchAlgorithm_SeparationSet0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = iCSSearchAlgorithm_SeparationSet0.getRevision();
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("8034", string0);
      assertNotNull(string0);
      
      BayesNet bayesNet0 = new BayesNet();
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertFalse(bayesNet0.getDebug());
      assertEquals(2, bayesNet0.graphType());
      assertNotNull(bayesNet0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Instances instances0 = new Instances("8034", arrayList0, 13);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("8034", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numAttributes());
      assertNotNull(instances0);
      
      iCSSearchAlgorithm0.search(bayesNet0, instances0);
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertFalse(bayesNet0.getDebug());
      assertEquals(2, bayesNet0.graphType());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("8034", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numAttributes());
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      Attribute attribute0 = new Attribute(".arff");
      assertEquals("", attribute0.getDateFormat());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.numValues());
      assertEquals((-1), attribute0.index());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isRegular());
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertNotNull(attribute0);
      
      boolean boolean2 = arrayList0.add(attribute0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.numValues());
      assertEquals((-1), attribute0.index());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isRegular());
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertTrue(boolean2);
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      boolean boolean3 = arrayList0.add(attribute0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.numValues());
      assertEquals((-1), attribute0.index());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isRegular());
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertTrue(boolean3);
      
      BayesNet bayesNet1 = new BayesNet();
      assertFalse(bayesNet1.equals((Object)bayesNet0));
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet1.BIFFileTipText());
      assertFalse(bayesNet1.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet1.useADTreeTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet1.debugTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet1.globalInfo());
      assertEquals(2, bayesNet1.graphType());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet1.estimatorTipText());
      assertFalse(bayesNet1.getDebug());
      assertEquals("Select method used for searching network structures.", bayesNet1.searchAlgorithmTipText());
      assertNotNull(bayesNet1);
      
      Enumeration enumeration0 = iCSSearchAlgorithm0.listOptions();
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertNotNull(enumeration0);
      
      boolean[][] booleanArray0 = new boolean[9][4];
      Attribute attribute1 = (Attribute)attribute0.copy();
      assertNotSame(attribute1, attribute0);
      assertNotSame(attribute0, attribute1);
      assertTrue(attribute1.equals((Object)attribute0));
      assertTrue(attribute1.isRegular());
      assertTrue(attribute1.isAveragable());
      assertEquals(0, attribute1.numValues());
      assertTrue(attribute1.hasZeropoint());
      assertEquals("", attribute1.getDateFormat());
      assertEquals((-1), attribute1.index());
      assertEquals(Double.POSITIVE_INFINITY, attribute1.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute1.getLowerNumericBound(), 0.01);
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertEquals(0, attribute1.type());
      assertEquals(1, attribute1.ordering());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertFalse(attribute1.isRelationValued());
      assertTrue(attribute1.isNumeric());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertFalse(attribute1.isDate());
      assertFalse(attribute1.isNominal());
      assertFalse(attribute1.isString());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.numValues());
      assertEquals((-1), attribute0.index());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isRegular());
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertNotNull(attribute1);
      
      iCSSearchAlgorithm0.calcArcDirections(booleanArray0, booleanArray0);
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      
      Enumeration enumeration1 = iCSSearchAlgorithm0.listOptions();
      assertNotSame(enumeration1, enumeration0);
      assertFalse(enumeration1.equals((Object)enumeration0));
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertNotNull(enumeration1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertNotNull(iCSSearchAlgorithm0);
      
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertNotNull(iCSSearchAlgorithm_SeparationSet0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = iCSSearchAlgorithm0.maxCardinalityTipText();
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", string0);
      assertNotNull(string0);
      
      String string1 = iCSSearchAlgorithm0.maxCardinalityTipText();
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[7];
      BayesNet bayesNet0 = new BayesNet();
      assertEquals(2, bayesNet0.graphType());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertFalse(bayesNet0.getDebug());
      assertNotNull(bayesNet0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      BayesNet bayesNet1 = (BayesNet)AbstractClassifier.makeCopy(bayesNet0);
      assertNotSame(bayesNet0, bayesNet1);
      assertNotSame(bayesNet1, bayesNet0);
      assertFalse(bayesNet1.equals((Object)bayesNet0));
      assertEquals(2, bayesNet0.graphType());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertFalse(bayesNet0.getDebug());
      assertFalse(bayesNet1.getDebug());
      assertEquals("Select method used for searching network structures.", bayesNet1.searchAlgorithmTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet1.debugTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet1.globalInfo());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet1.BIFFileTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet1.estimatorTipText());
      assertFalse(bayesNet1.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet1.useADTreeTipText());
      assertEquals(2, bayesNet1.graphType());
      assertNotNull(bayesNet1);
      
      Instances instances0 = new Instances("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", arrayList0, 10);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numAttributes());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals((-1), instances0.classIndex());
      assertNotNull(instances0);
      
      String string2 = iCSSearchAlgorithm_SeparationSet0.getRevision();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("8034", string2);
      assertNotNull(string2);
      
      Capabilities capabilities0 = bayesNet0.getCapabilities();
      assertNotSame(bayesNet0, bayesNet1);
      assertFalse(bayesNet0.equals((Object)bayesNet1));
      assertEquals(2, bayesNet0.graphType());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertFalse(bayesNet0.getDebug());
      assertEquals(0, capabilities0.getMinimumNumberInstances());
      assertFalse(capabilities0.hasDependencies());
      assertNotNull(capabilities0);
      
      iCSSearchAlgorithm0.search(bayesNet0, instances0);
      assertNotSame(bayesNet0, bayesNet1);
      assertFalse(bayesNet0.equals((Object)bayesNet1));
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals(2, bayesNet0.graphType());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertFalse(bayesNet0.getDebug());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numAttributes());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals((-1), instances0.classIndex());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Function<Object, Object> function0 = Function.identity();
      assertNotNull(function0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      String string3 = iCSSearchAlgorithm0.maxNrOfParentsTipText();
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", string3);
      assertNotNull(string3);
      
      String string4 = locale0.getDisplayScript();
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", string4);
      assertNotNull(string4);
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      String string5 = locale0.getDisplayVariant();
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", string5);
      assertNotNull(string5);
      
      Attribute attribute0 = new Attribute("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", arrayList1, (byte)0);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0, attribute0.index());
      assertFalse(attribute0.hasZeropoint());
      assertFalse(attribute0.isRegular());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.ordering());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNominal());
      assertFalse(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertEquals(1, attribute0.type());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertNotNull(attribute0);
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0, attribute0.index());
      assertFalse(attribute0.hasZeropoint());
      assertFalse(attribute0.isRegular());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.ordering());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNominal());
      assertFalse(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertEquals(1, attribute0.type());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertTrue(boolean1);
      
      instances0.sort(494);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals((-1), instances0.classIndex());
      
      Attribute attribute1 = new Attribute("@relation", 6587);
      assertFalse(attribute1.equals((Object)attribute0));
      assertTrue(attribute1.isNumeric());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertEquals(1, attribute1.ordering());
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertTrue(attribute1.isRegular());
      assertTrue(attribute1.isAveragable());
      assertTrue(attribute1.hasZeropoint());
      assertEquals("", attribute1.getDateFormat());
      assertEquals(6587, attribute1.index());
      assertFalse(attribute1.isRelationValued());
      assertFalse(attribute1.isString());
      assertEquals(Double.NEGATIVE_INFINITY, attribute1.getLowerNumericBound(), 0.01);
      assertFalse(attribute1.isNominal());
      assertEquals(Double.POSITIVE_INFINITY, attribute1.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute1.type());
      assertEquals(0, attribute1.numValues());
      assertFalse(attribute1.isDate());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertNotNull(attribute1);
      
      boolean boolean2 = arrayList0.add(attribute1);
      assertNotSame(attribute1, attribute0);
      assertFalse(attribute1.equals((Object)attribute0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(attribute1.isNumeric());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertEquals(1, attribute1.ordering());
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertTrue(attribute1.isRegular());
      assertTrue(attribute1.isAveragable());
      assertTrue(attribute1.hasZeropoint());
      assertEquals("", attribute1.getDateFormat());
      assertEquals(6587, attribute1.index());
      assertFalse(attribute1.isRelationValued());
      assertFalse(attribute1.isString());
      assertEquals(Double.NEGATIVE_INFINITY, attribute1.getLowerNumericBound(), 0.01);
      assertFalse(attribute1.isNominal());
      assertEquals(Double.POSITIVE_INFINITY, attribute1.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute1.type());
      assertEquals(0, attribute1.numValues());
      assertFalse(attribute1.isDate());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertTrue(boolean2);
      
      Enumeration enumeration0 = iCSSearchAlgorithm0.listOptions();
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertNotNull(enumeration0);
      
      int int0 = iCSSearchAlgorithm0.maxn();
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals(2, int0);
      
      boolean[][] booleanArray0 = new boolean[5][1];
      boolean[] booleanArray1 = new boolean[2];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[0];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray0[1] = booleanArray2;
      boolean[] booleanArray3 = new boolean[4];
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      booleanArray3[0] = true;
      booleanArray3[1] = true;
      booleanArray3[2] = true;
      booleanArray3[3] = true;
      booleanArray0[2] = booleanArray3;
      boolean[] booleanArray4 = new boolean[1];
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      
      booleanArray4[0] = true;
      booleanArray0[3] = booleanArray4;
      boolean[] booleanArray5 = new boolean[5];
      assertFalse(booleanArray5.equals((Object)booleanArray4));
      assertFalse(booleanArray5.equals((Object)booleanArray3));
      assertFalse(booleanArray5.equals((Object)booleanArray1));
      assertFalse(booleanArray5.equals((Object)booleanArray2));
      
      booleanArray5[0] = true;
      booleanArray5[1] = true;
      booleanArray5[2] = true;
      booleanArray5[3] = true;
      booleanArray5[4] = true;
      booleanArray0[4] = booleanArray5;
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcArcDirections(booleanArray0, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertNotNull(iCSSearchAlgorithm0);
      
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertNotNull(iCSSearchAlgorithm_SeparationSet0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = iCSSearchAlgorithm_SeparationSet0.getRevision();
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("8034", string0);
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BayesNet bayesNet0 = new BayesNet();
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals(2, bayesNet0.graphType());
      assertFalse(bayesNet0.getDebug());
      assertNotNull(bayesNet0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(6595);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Instances instances0 = new Instances("8034", arrayList0, 13);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("8034", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numAttributes());
      assertNotNull(instances0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      iCSSearchAlgorithm0.setMarkovBlanketClassifier(true);
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertTrue(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      
      Attribute attribute0 = new Attribute(".arff");
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals((-1), attribute0.index());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertNotNull(attribute0);
      
      boolean boolean3 = arrayList0.add(attribute0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals((-1), attribute0.index());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertTrue(boolean3);
      
      String string1 = iCSSearchAlgorithm0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertTrue(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("SearchAlgorithm\n", string1);
      assertNotNull(string1);
      
      boolean boolean4 = arrayList0.add(attribute0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals((-1), attribute0.index());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertTrue(boolean4);
      
      boolean boolean5 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5);
      
      boolean boolean6 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "real");
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6);
      
      iCSSearchAlgorithm0.setMaxCardinality((-3142));
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertTrue(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals((-3142), iCSSearchAlgorithm0.getMaxCardinality());
      
      System.setCurrentTimeMillis(4);
      try { 
        iCSSearchAlgorithm0.search(bayesNet0, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.BayesNet", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertNotNull(iCSSearchAlgorithm0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = iCSSearchAlgorithm0.maxCardinalityTipText();
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", string0);
      assertNotNull(string0);
      
      BayesNet bayesNet0 = new BayesNet();
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertFalse(bayesNet0.getDebug());
      assertEquals(2, bayesNet0.graphType());
      assertNotNull(bayesNet0);
      
      String string1 = bayesNet0.toXMLBIF03();
      assertFalse(string1.equals((Object)string0));
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertFalse(bayesNet0.getDebug());
      assertEquals(2, bayesNet0.graphType());
      assertEquals("<!--No model built yet-->", string1);
      assertNotNull(string1);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Instances instances0 = new Instances("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", arrayList0, 10);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", instances0.relationName());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertNotNull(instances0);
      
      iCSSearchAlgorithm0.search(bayesNet0, instances0);
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertFalse(bayesNet0.getDebug());
      assertEquals(2, bayesNet0.graphType());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", instances0.relationName());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      
      boolean boolean1 = instances0.remove((Object) "@relation");
      assertFalse(boolean1 == boolean0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", instances0.relationName());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertFalse(boolean1);
      
      Attribute attribute0 = new Attribute(".arff", "57", 1415);
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertEquals(0, attribute0.numValues());
      assertEquals(3, attribute0.type());
      assertFalse(attribute0.isString());
      assertEquals(1415, attribute0.index());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("57", attribute0.getDateFormat());
      assertFalse(attribute0.isAveragable());
      assertFalse(attribute0.hasZeropoint());
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertNotNull(attribute0);
      
      instances0.deleteAttributeType(1415);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", instances0.relationName());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      
      boolean boolean2 = arrayList0.add(attribute0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertEquals(0, attribute0.numValues());
      assertEquals(3, attribute0.type());
      assertFalse(attribute0.isString());
      assertEquals(1415, attribute0.index());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("57", attribute0.getDateFormat());
      assertFalse(attribute0.isAveragable());
      assertFalse(attribute0.hasZeropoint());
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertTrue(boolean2);
      
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      String string2 = iCSSearchAlgorithm0.getRevision();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("8034", string2);
      assertNotNull(string2);
      
      boolean[][] booleanArray0 = new boolean[8][8];
      boolean[] booleanArray1 = new boolean[3];
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[7];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = true;
      booleanArray2[4] = true;
      booleanArray2[5] = true;
      booleanArray2[6] = false;
      booleanArray0[1] = booleanArray2;
      boolean[] booleanArray3 = new boolean[8];
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      
      booleanArray3[0] = true;
      booleanArray3[1] = false;
      booleanArray3[2] = true;
      booleanArray3[3] = true;
      booleanArray3[4] = true;
      booleanArray3[6] = false;
      booleanArray3[7] = false;
      boolean[] booleanArray4 = new boolean[7];
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      
      booleanArray4[0] = true;
      booleanArray4[1] = true;
      booleanArray4[2] = true;
      booleanArray4[3] = false;
      booleanArray4[4] = true;
      booleanArray4[5] = true;
      booleanArray4[6] = false;
      booleanArray0[3] = booleanArray4;
      booleanArray0[4] = booleanArray1;
      boolean[] booleanArray5 = new boolean[7];
      assertFalse(booleanArray5.equals((Object)booleanArray4));
      assertFalse(booleanArray5.equals((Object)booleanArray3));
      assertFalse(booleanArray5.equals((Object)booleanArray2));
      assertFalse(booleanArray5.equals((Object)booleanArray1));
      
      booleanArray5[0] = true;
      booleanArray5[1] = true;
      booleanArray5[2] = true;
      booleanArray5[3] = true;
      booleanArray5[4] = true;
      booleanArray5[5] = true;
      booleanArray5[6] = true;
      booleanArray0[5] = booleanArray5;
      boolean[] booleanArray6 = new boolean[0];
      assertFalse(booleanArray6.equals((Object)booleanArray2));
      assertFalse(booleanArray6.equals((Object)booleanArray1));
      assertFalse(booleanArray6.equals((Object)booleanArray3));
      assertFalse(booleanArray6.equals((Object)booleanArray5));
      assertFalse(booleanArray6.equals((Object)booleanArray4));
      
      booleanArray0[6] = booleanArray6;
      boolean[] booleanArray7 = new boolean[2];
      assertFalse(booleanArray7.equals((Object)booleanArray5));
      assertFalse(booleanArray7.equals((Object)booleanArray6));
      assertFalse(booleanArray7.equals((Object)booleanArray3));
      assertFalse(booleanArray7.equals((Object)booleanArray4));
      assertFalse(booleanArray7.equals((Object)booleanArray1));
      assertFalse(booleanArray7.equals((Object)booleanArray2));
      
      booleanArray7[0] = false;
      booleanArray7[1] = true;
      booleanArray0[7] = booleanArray7;
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcArcDirections(booleanArray0, (boolean[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertNotNull(iCSSearchAlgorithm0);
      
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertNotNull(iCSSearchAlgorithm_SeparationSet0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = iCSSearchAlgorithm_SeparationSet0.getRevision();
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("8034", string0);
      assertNotNull(string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(6595);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Instances instances0 = new Instances("8034", arrayList0, 13);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals("8034", instances0.relationName());
      assertNotNull(instances0);
      
      Instances instances1 = new Instances("(&h", arrayList0, 2161);
      assertTrue(instances1.equals((Object)instances0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(instances1.checkForStringAttributes());
      assertEquals("(&h", instances1.relationName());
      assertEquals(0, instances1.numInstances());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertEquals(0, instances1.numAttributes());
      assertEquals((-1), instances1.classIndex());
      assertNotNull(instances1);
      
      BayesNet bayesNet0 = new BayesNet();
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals(2, bayesNet0.graphType());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertFalse(bayesNet0.getDebug());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertNotNull(bayesNet0);
      
      iCSSearchAlgorithm0.search(bayesNet0, instances0);
      assertNotSame(instances0, instances1);
      assertTrue(instances0.equals((Object)instances1));
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals("8034", instances0.relationName());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals(2, bayesNet0.graphType());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertFalse(bayesNet0.getDebug());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      assertTrue(protectedProperties0.isEmpty());
      assertNotNull(protectedProperties0);
      
      iCSSearchAlgorithm0.setMarkovBlanketClassifier(true);
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertTrue(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      
      Attribute attribute0 = new Attribute(".arff");
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals((-1), attribute0.index());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isRegular());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isAveragable());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertNotNull(attribute0);
      
      boolean boolean4 = arrayList0.add(attribute0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals((-1), attribute0.index());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isRegular());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isAveragable());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertTrue(boolean4);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      String string1 = iCSSearchAlgorithm0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertTrue(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("SearchAlgorithm\n", string1);
      assertNotNull(string1);
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Attribute attribute1 = new Attribute((String) null, arrayList1, 2);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(attribute1.isRegular());
      assertEquals(0, attribute1.numValues());
      assertFalse(attribute1.hasZeropoint());
      assertEquals(0.0, attribute1.getUpperNumericBound(), 0.01);
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertEquals(0.0, attribute1.getLowerNumericBound(), 0.01);
      assertEquals(1, attribute1.type());
      assertEquals(2, attribute1.index());
      assertFalse(attribute1.isAveragable());
      assertTrue(attribute1.isNominal());
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertEquals(0, attribute1.ordering());
      assertEquals("", attribute1.getDateFormat());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertFalse(attribute1.isDate());
      assertFalse(attribute1.isString());
      assertFalse(attribute1.isNumeric());
      assertFalse(attribute1.isRelationValued());
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertNotNull(attribute1);
      
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      assertFalse(arrayList2.equals((Object)arrayList0));
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertNotNull(arrayList2);
      
      iCSSearchAlgorithm0.setMaxCardinality(0);
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals(0, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertTrue(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      
      System.setCurrentTimeMillis(4);
      boolean[][] booleanArray0 = new boolean[7][0];
      boolean[] booleanArray1 = new boolean[7];
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      booleanArray1[6] = true;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[0];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray0[1] = booleanArray2;
      boolean[] booleanArray3 = new boolean[6];
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      booleanArray3[0] = true;
      booleanArray3[1] = true;
      booleanArray3[2] = false;
      booleanArray3[3] = true;
      booleanArray3[4] = false;
      booleanArray3[5] = false;
      booleanArray0[2] = booleanArray3;
      boolean[] booleanArray4 = new boolean[9];
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      
      booleanArray4[0] = true;
      booleanArray4[1] = true;
      booleanArray4[2] = true;
      booleanArray4[3] = false;
      booleanArray4[4] = false;
      booleanArray4[5] = true;
      booleanArray4[6] = true;
      booleanArray4[7] = false;
      booleanArray4[8] = true;
      booleanArray0[3] = booleanArray4;
      boolean[] booleanArray5 = new boolean[1];
      assertFalse(booleanArray5.equals((Object)booleanArray4));
      assertFalse(booleanArray5.equals((Object)booleanArray1));
      assertFalse(booleanArray5.equals((Object)booleanArray2));
      assertFalse(booleanArray5.equals((Object)booleanArray3));
      
      booleanArray5[0] = true;
      booleanArray0[4] = booleanArray5;
      boolean[] booleanArray6 = new boolean[2];
      assertFalse(booleanArray6.equals((Object)booleanArray5));
      assertFalse(booleanArray6.equals((Object)booleanArray2));
      assertFalse(booleanArray6.equals((Object)booleanArray1));
      assertFalse(booleanArray6.equals((Object)booleanArray4));
      assertFalse(booleanArray6.equals((Object)booleanArray3));
      
      booleanArray6[0] = true;
      booleanArray6[1] = false;
      booleanArray0[5] = booleanArray6;
      boolean[] booleanArray7 = new boolean[9];
      assertFalse(booleanArray7.equals((Object)booleanArray4));
      assertFalse(booleanArray7.equals((Object)booleanArray5));
      assertFalse(booleanArray7.equals((Object)booleanArray6));
      assertFalse(booleanArray7.equals((Object)booleanArray2));
      assertFalse(booleanArray7.equals((Object)booleanArray3));
      assertFalse(booleanArray7.equals((Object)booleanArray1));
      
      booleanArray7[0] = true;
      booleanArray7[1] = true;
      booleanArray7[2] = true;
      booleanArray7[3] = true;
      booleanArray7[4] = true;
      booleanArray7[5] = true;
      booleanArray7[6] = true;
      booleanArray7[7] = false;
      booleanArray7[8] = true;
      booleanArray0[6] = booleanArray7;
      iCSSearchAlgorithm0.calcArcDirections(booleanArray0, booleanArray0);
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals(0, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertTrue(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertNotNull(iCSSearchAlgorithm0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertNotNull(iCSSearchAlgorithm_SeparationSet0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = iCSSearchAlgorithm_SeparationSet0.getRevision();
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("8034", string0);
      assertNotNull(string0);
      
      BayesNet bayesNet0 = new BayesNet();
      assertFalse(bayesNet0.getDebug());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals(2, bayesNet0.graphType());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertNotNull(bayesNet0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Instances instances0 = new Instances("8034", arrayList0, 35);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals((-1), instances0.classIndex());
      assertEquals("8034", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertNotNull(instances0);
      
      iCSSearchAlgorithm0.search(bayesNet0, instances0);
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertFalse(bayesNet0.getDebug());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals(2, bayesNet0.graphType());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals((-1), instances0.classIndex());
      assertEquals("8034", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      
      Attribute attribute0 = new Attribute(".arff");
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertNotNull(attribute0);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = arrayList0.add(attribute0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertTrue(boolean4);
      
      boolean boolean5 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@end");
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5);
      
      boolean[][] booleanArray0 = new boolean[10][4];
      iCSSearchAlgorithm_SeparationSet0.m_set = iCSSearchAlgorithm_SeparationSet0.m_set;
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      
      attribute0.setStringValue("VDF0");
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      
      ICSSearchAlgorithm.SeparationSet[] iCSSearchAlgorithm_SeparationSetArray0 = new ICSSearchAlgorithm.SeparationSet[1];
      boolean boolean6 = arrayList0.add(attribute0);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertTrue(boolean6);
      
      iCSSearchAlgorithm_SeparationSetArray0[0] = iCSSearchAlgorithm_SeparationSet0;
      ICSSearchAlgorithm.SeparationSet[] iCSSearchAlgorithm_SeparationSetArray1 = new ICSSearchAlgorithm.SeparationSet[8];
      assertFalse(iCSSearchAlgorithm_SeparationSetArray1.equals((Object)iCSSearchAlgorithm_SeparationSetArray0));
      
      iCSSearchAlgorithm_SeparationSetArray0[0] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray1[5] = iCSSearchAlgorithm_SeparationSetArray1[2];
      ICSSearchAlgorithm.SeparationSet[][] iCSSearchAlgorithm_SeparationSetArray2 = new ICSSearchAlgorithm.SeparationSet[1][0];
      iCSSearchAlgorithm_SeparationSetArray1[1] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray2[0] = iCSSearchAlgorithm_SeparationSetArray1;
      iCSSearchAlgorithm0.calcVeeNodes(booleanArray0, booleanArray0, iCSSearchAlgorithm_SeparationSetArray2);
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      
      String string1 = iCSSearchAlgorithm0.maxCardinalityTipText();
      assertFalse(string1.equals((Object)string0));
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertNotNull(iCSSearchAlgorithm0);
      
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertNotNull(iCSSearchAlgorithm_SeparationSet0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = iCSSearchAlgorithm_SeparationSet0.getRevision();
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("8034", string0);
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BayesNet bayesNet0 = new BayesNet();
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals(2, bayesNet0.graphType());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertFalse(bayesNet0.getDebug());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertNotNull(bayesNet0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 13;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(6573);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      Instances instances0 = new Instances("8034", arrayList0, 13);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals("8034", instances0.relationName());
      assertEquals(0, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertNotNull(instances0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      iCSSearchAlgorithm0.setMarkovBlanketClassifier(true);
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertTrue(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      
      Attribute attribute0 = new Attribute(".arff");
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isRegular());
      assertEquals((-1), attribute0.index());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertNotNull(attribute0);
      
      boolean boolean4 = arrayList0.add(attribute0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isRegular());
      assertEquals((-1), attribute0.index());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertTrue(boolean4);
      
      String string1 = iCSSearchAlgorithm0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertTrue(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("SearchAlgorithm\n", string1);
      assertNotNull(string1);
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Attribute attribute1 = attribute0.copy(".arff");
      assertNotSame(attribute1, attribute0);
      assertNotSame(attribute0, attribute1);
      assertTrue(attribute1.equals((Object)attribute0));
      assertEquals("", attribute1.getDateFormat());
      assertFalse(attribute1.isNominal());
      assertTrue(attribute1.isAveragable());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute1.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute1.numValues());
      assertTrue(attribute1.isNumeric());
      assertFalse(attribute1.isDate());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertFalse(attribute1.isString());
      assertFalse(attribute1.isRelationValued());
      assertEquals(0, attribute1.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute1.getLowerNumericBound(), 0.01);
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertEquals(1, attribute1.ordering());
      assertTrue(attribute1.hasZeropoint());
      assertTrue(attribute1.isRegular());
      assertEquals((-1), attribute1.index());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isRegular());
      assertEquals((-1), attribute0.index());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertNotNull(attribute1);
      
      boolean boolean5 = arrayList0.add(attribute1);
      assertNotSame(attribute1, attribute0);
      assertNotSame(attribute0, attribute1);
      assertTrue(attribute1.equals((Object)attribute0));
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertTrue(attribute0.equals((Object)attribute1));
      assertEquals("", attribute1.getDateFormat());
      assertFalse(attribute1.isNominal());
      assertTrue(attribute1.isAveragable());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute1.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute1.numValues());
      assertTrue(attribute1.isNumeric());
      assertFalse(attribute1.isDate());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertFalse(attribute1.isString());
      assertFalse(attribute1.isRelationValued());
      assertEquals(0, attribute1.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute1.getLowerNumericBound(), 0.01);
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertEquals(1, attribute1.ordering());
      assertTrue(attribute1.hasZeropoint());
      assertTrue(attribute1.isRegular());
      assertEquals((-1), attribute1.index());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isRegular());
      assertEquals((-1), attribute0.index());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertTrue(boolean5);
      
      int int0 = attribute0.addRelation((Instances) null);
      assertNotSame(attribute0, attribute1);
      assertTrue(attribute0.equals((Object)attribute1));
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isRegular());
      assertEquals((-1), attribute0.index());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals((-1), int0);
      
      String string2 = attribute0.equalsMsg(arrayList0);
      assertNotSame(attribute0, attribute1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(attribute0.equals((Object)attribute1));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isRegular());
      assertEquals((-1), attribute0.index());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals("Object has wrong class", string2);
      assertNotNull(string2);
      
      boolean boolean6 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6);
      
      boolean boolean7 = arrayList0.add(attribute0);
      assertNotSame(attribute0, attribute1);
      assertFalse(boolean7 == boolean2);
      assertFalse(boolean7 == boolean3);
      assertFalse(boolean7 == boolean1);
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean5);
      assertTrue(attribute0.equals((Object)attribute1));
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isRegular());
      assertEquals((-1), attribute0.index());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertTrue(boolean7);
      
      iCSSearchAlgorithm0.setMaxCardinality((-3142));
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertTrue(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals((-3142), iCSSearchAlgorithm0.getMaxCardinality());
      
      System.setCurrentTimeMillis(4);
      try { 
        iCSSearchAlgorithm0.search(bayesNet0, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.BayesNet", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertNotNull(iCSSearchAlgorithm0);
      
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertNotNull(iCSSearchAlgorithm_SeparationSet0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = iCSSearchAlgorithm_SeparationSet0.getRevision();
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("8034", string0);
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BayesNet bayesNet0 = new BayesNet();
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals(2, bayesNet0.graphType());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertFalse(bayesNet0.getDebug());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertNotNull(bayesNet0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 13;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(6573);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      Instances instances0 = new Instances("8034", arrayList0, 13);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numAttributes());
      assertEquals("8034", instances0.relationName());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertNotNull(instances0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Attribute attribute0 = new Attribute(".arff");
      assertEquals((-1), attribute0.index());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isRegular());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertNotNull(attribute0);
      
      boolean boolean4 = arrayList0.add(attribute0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1), attribute0.index());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isRegular());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertTrue(boolean4);
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      Attribute attribute1 = attribute0.copy(".arff");
      assertNotSame(attribute1, attribute0);
      assertNotSame(attribute0, attribute1);
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(attribute1.isNominal());
      assertTrue(attribute1.isAveragable());
      assertTrue(attribute1.isRegular());
      assertEquals("", attribute1.getDateFormat());
      assertTrue(attribute1.hasZeropoint());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertEquals((-1), attribute1.index());
      assertFalse(attribute1.isDate());
      assertFalse(attribute1.isString());
      assertEquals(Double.POSITIVE_INFINITY, attribute1.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute1.ordering());
      assertEquals(0, attribute1.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute1.getLowerNumericBound(), 0.01);
      assertTrue(attribute1.isNumeric());
      assertEquals(0, attribute1.numValues());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertFalse(attribute1.isRelationValued());
      assertEquals((-1), attribute0.index());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isRegular());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertNotNull(attribute1);
      
      boolean boolean5 = arrayList0.add(attribute1);
      assertNotSame(attribute1, attribute0);
      assertNotSame(attribute0, attribute1);
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertTrue(attribute0.equals((Object)attribute1));
      assertFalse(attribute1.isNominal());
      assertTrue(attribute1.isAveragable());
      assertTrue(attribute1.isRegular());
      assertEquals("", attribute1.getDateFormat());
      assertTrue(attribute1.hasZeropoint());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertEquals((-1), attribute1.index());
      assertFalse(attribute1.isDate());
      assertFalse(attribute1.isString());
      assertEquals(Double.POSITIVE_INFINITY, attribute1.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute1.ordering());
      assertEquals(0, attribute1.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute1.getLowerNumericBound(), 0.01);
      assertTrue(attribute1.isNumeric());
      assertEquals(0, attribute1.numValues());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertFalse(attribute1.isRelationValued());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals((-1), attribute0.index());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isRegular());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertTrue(boolean5);
      
      int int0 = attribute0.addRelation((Instances) null);
      assertNotSame(attribute0, attribute1);
      assertTrue(attribute0.equals((Object)attribute1));
      assertEquals((-1), attribute0.index());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isRegular());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals((-1), int0);
      
      String string1 = attribute0.equalsMsg(arrayList0);
      assertNotSame(attribute0, attribute1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(attribute0.equals((Object)attribute1));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals((-1), attribute0.index());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isRegular());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals("Object has wrong class", string1);
      assertNotNull(string1);
      
      boolean boolean6 = arrayList0.add(attribute0);
      assertNotSame(attribute0, attribute1);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertTrue(attribute0.equals((Object)attribute1));
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertEquals((-1), attribute0.index());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isRegular());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertTrue(boolean6);
      
      Enumeration enumeration0 = attribute0.enumerateValues();
      assertNotSame(attribute0, attribute1);
      assertTrue(attribute0.equals((Object)attribute1));
      assertEquals((-1), attribute0.index());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isRegular());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertNull(enumeration0);
      
      boolean boolean7 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7 == boolean0);
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7);
      
      boolean boolean8 = arrayList0.add(attribute0);
      assertNotSame(attribute0, attribute1);
      assertFalse(boolean8 == boolean2);
      assertFalse(boolean8 == boolean7);
      assertTrue(boolean8 == boolean6);
      assertTrue(boolean8 == boolean5);
      assertFalse(boolean8 == boolean3);
      assertFalse(boolean8 == boolean1);
      assertTrue(boolean8 == boolean0);
      assertTrue(boolean8 == boolean4);
      assertTrue(attribute0.equals((Object)attribute1));
      assertFalse(arrayList0.isEmpty());
      assertEquals(4, arrayList0.size());
      assertEquals((-1), attribute0.index());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isRegular());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertTrue(boolean8);
      
      iCSSearchAlgorithm0.setMaxCardinality((-3142));
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals((-3142), iCSSearchAlgorithm0.getMaxCardinality());
      
      System.setCurrentTimeMillis(4);
      try { 
        iCSSearchAlgorithm0.search(bayesNet0, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.BayesNet", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertNotNull(iCSSearchAlgorithm0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertNotNull(iCSSearchAlgorithm_SeparationSet0);
      
      String string0 = iCSSearchAlgorithm_SeparationSet0.getRevision();
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("8034", string0);
      assertNotNull(string0);
      
      BayesNet bayesNet0 = new BayesNet();
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertFalse(bayesNet0.getDebug());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals(2, bayesNet0.graphType());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertNotNull(bayesNet0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Instances instances0 = new Instances("8034", arrayList0, 35);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("8034", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numAttributes());
      assertNotNull(instances0);
      
      iCSSearchAlgorithm0.search(bayesNet0, instances0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertFalse(bayesNet0.getDebug());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals(2, bayesNet0.graphType());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("8034", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numAttributes());
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      Attribute attribute0 = new Attribute(".arff");
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertNotNull(attribute0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = arrayList0.add(attribute0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertTrue(boolean3);
      
      boolean boolean4 = arrayList0.add(attribute0);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertTrue(boolean4);
      
      Attribute attribute1 = (Attribute)attribute0.copy();
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertTrue(attribute1.equals((Object)attribute0));
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals("", attribute1.getDateFormat());
      assertFalse(attribute1.isNominal());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertTrue(attribute1.isAveragable());
      assertTrue(attribute1.isRegular());
      assertEquals(1, attribute1.ordering());
      assertTrue(attribute1.hasZeropoint());
      assertEquals((-1), attribute1.index());
      assertEquals(0, attribute1.type());
      assertFalse(attribute1.isRelationValued());
      assertFalse(attribute1.isString());
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertEquals(Double.NEGATIVE_INFINITY, attribute1.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute1.getUpperNumericBound(), 0.01);
      assertTrue(attribute1.isNumeric());
      assertEquals(0, attribute1.numValues());
      assertFalse(attribute1.isDate());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertNotNull(attribute1);
      
      boolean[][] booleanArray0 = new boolean[10][4];
      iCSSearchAlgorithm_SeparationSet0.m_set = iCSSearchAlgorithm_SeparationSet0.m_set;
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      
      attribute0.setStringValue("VDF0");
      assertNotSame(attribute0, attribute1);
      assertTrue(attribute0.equals((Object)attribute1));
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      
      ICSSearchAlgorithm.SeparationSet[] iCSSearchAlgorithm_SeparationSetArray0 = new ICSSearchAlgorithm.SeparationSet[1];
      boolean boolean5 = arrayList0.add(attribute0);
      assertNotSame(attribute0, attribute1);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertTrue(attribute0.equals((Object)attribute1));
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertTrue(boolean5);
      
      iCSSearchAlgorithm_SeparationSetArray0[0] = iCSSearchAlgorithm_SeparationSet0;
      ICSSearchAlgorithm.SeparationSet[] iCSSearchAlgorithm_SeparationSetArray1 = new ICSSearchAlgorithm.SeparationSet[8];
      assertFalse(iCSSearchAlgorithm_SeparationSetArray1.equals((Object)iCSSearchAlgorithm_SeparationSetArray0));
      
      iCSSearchAlgorithm_SeparationSetArray0[0] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray1[5] = iCSSearchAlgorithm_SeparationSetArray1[2];
      ICSSearchAlgorithm.SeparationSet[][] iCSSearchAlgorithm_SeparationSetArray2 = new ICSSearchAlgorithm.SeparationSet[1][0];
      iCSSearchAlgorithm_SeparationSetArray1[1] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray2[0] = iCSSearchAlgorithm_SeparationSetArray1;
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcVeeNodes(booleanArray0, booleanArray0, iCSSearchAlgorithm_SeparationSetArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }
}
