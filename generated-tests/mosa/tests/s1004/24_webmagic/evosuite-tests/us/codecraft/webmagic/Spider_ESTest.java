/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:12:53 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.SmartContentSelector;
import us.codecraft.webmagic.thread.CountableThreadPool;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Thread interrupted when sleep", "Thread interrupted when sleep");
      Spider spider1 = spider0.setUUID("Thread interrupted when sleep");
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider2 = spider1.setExecutorService(forkJoinPool0);
      // Undeclared exception!
      try { 
        spider2.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread i=terrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Thread i=terrupted when sleep", "Thread i=terrupted when sleep");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Request request0 = new Request();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider1.stop();
      String[] stringArray0 = new String[0];
      Spider spider2 = spider1.addUrl(stringArray0);
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setSpawnUrl(true);
      // Undeclared exception!
      try { 
        spider0.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      boolean boolean0 = true;
      Spider spider2 = spider1.setSpawnUrl(true);
      Request[] requestArray0 = new Request[0];
      spider2.addRequest(requestArray0);
      SmartContentSelector smartContentSelector0 = new SmartContentSelector();
      // Undeclared exception!
      try { 
        smartContentSelector0.selectList("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.SmartContentSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider0.pipeline(multiPagePipeline0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Thread interrupted when sleep", "Thread interrupted when sleep");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("!eJ>{AXTqb=BGDo* 1");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool.commonPool();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2);
      spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 2);
      Spider spider1 = spider0.setExitWhenComplete(true);
      // Undeclared exception!
      try { 
        spider1.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("rwiG?u]`^py*).;ire");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      Spider spider1 = spider0.clearPipeline();
      spider1.stop();
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thred interrupted when sleep");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("Thred interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "Thred interrupted when sleep");
      Request request0 = new Request();
      spider0.stop();
      Spider spider1 = spider0.thread(3871);
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<Ua,0/E");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("=h),9Ko5");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Request request0 = new Request();
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      LinkedTransferQueue<String> linkedTransferQueue1 = new LinkedTransferQueue<String>();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("d");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider.Status spider_Status0 = Spider.Status.Init;
      Spider spider1 = Spider.create(simplePageProcessor0);
      spider0.setEmptySleepTime(1353);
      spider1.getCollectorPipeline();
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("m.185^SZ!t");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "Thread i=terrupted when sleep");
      Request request0 = new Request();
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider1.stop();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("OqzJ");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setUUID(", method='");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("OqzJ", "OqzJ");
      Request request0 = new Request();
      spider0.stop();
      Spider spider1 = spider0.pipeline((Pipeline) null);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread i=terrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Thread i=terrupted when sleep", "~c");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VNt");
      Spider spider0 = new Spider(simplePageProcessor0);
      SynchronousQueue<ConsolePipeline> synchronousQueue0 = new SynchronousQueue<ConsolePipeline>();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>(synchronousQueue0);
      spider0.setPipelines(linkedList0);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<Ua,0/E");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.get("Thread interrupted when sleep");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Thread interrupted when sleep";
      stringArray0[1] = "Thread interrupted when sleep";
      stringArray0[2] = "Thread interrupted when sleep";
      stringArray0[3] = "Thread interrupted when sleep";
      stringArray0[4] = "Thread interrupted when sleep";
      stringArray0[5] = "Thread interrupted when sleep";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Thread interrupted when sleep", "Thread interrupted when sleep");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Request request0 = new Request();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[2];
      requestArray0[0] = request0;
      requestArray0[1] = request0;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("OqzJ");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("OqzJ", "OqzJ");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider1.getThreadAlive();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      // Undeclared exception!
      try { 
        spider1.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("< a,0/E");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider0.sleep(547);
      // Undeclared exception!
      try { 
        spider0.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", (String) null);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setSpawnUrl(true);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider3 = spider2.startRequest(linkedList0);
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Thread interrupted when sleep", "Thread interrupted when sleep");
      spider0.setDownloader(phantomJSDownloader0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1341);
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("!eJ>{AXTqb=BGDo* 1");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      spider0.addPipeline(collectorPipeline0);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Thread interrupted when sleep", "Thread interrupted when sleep");
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1341);
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 1341);
      spider1.stop();
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("OqzJ");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getThreadAlive();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      LinkedTransferQueue<String> linkedTransferQueue1 = new LinkedTransferQueue<String>();
      // Undeclared exception!
      try { 
        spider0.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.setSpawnUrl(false);
      Spider spider3 = spider2.setExitWhenComplete(true);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Init");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider4 = spider3.setScheduler(duplicateRemovedScheduler0);
      fileCacheQueueScheduler0.getTotalRequestsCount(spider3);
      spider4.setUUID("Init");
      Spider spider5 = Spider.create(simplePageProcessor0);
      fileCacheQueueScheduler0.poll(spider5);
      Spider spider6 = spider4.downloader((Downloader) null);
      spider6.getUUID();
      spider0.setEmptySleepTime(2526);
      spider5.getScheduler();
      Spider.create(simplePageProcessor0);
      Spider spider7 = spider3.setSpawnUrl(true);
      spider7.getThreadAlive();
      MockThread mockThread0 = new MockThread();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider5.addPipeline(multiPagePipeline0);
      // Undeclared exception!
      try { 
        spider4.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Thread interrupted when sleep", "Thread interrupted when sleep");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1323);
      Spider spider2 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 1323);
      spider2.initComponent();
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Spider.Status.fromValue(11);
      FilePipeline filePipeline0 = new FilePipeline();
      assertEquals("/data/webmagic/", filePipeline0.getPath());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      LinkedTransferQueue<String> linkedTransferQueue1 = new LinkedTransferQueue<String>();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("fP");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getStatus();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thred interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Thred interrupted when sleep", "Thred interrupted when sleep");
      spider0.setDownloader(phantomJSDownloader0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Thred interrupted when sleep");
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("0v*d.;*w&f");
      Spider spider0 = Spider.create(simplePageProcessor1);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      linkedTransferQueue0.add("0v*d.;*w&f");
      Request[] requestArray0 = new Request[1];
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      requestArray0[0] = null;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<Ua,0/E");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      Page page1 = page0.setRawText("#f50c[I");
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page1, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Thread interrupted when sleep");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Request request0 = new Request();
      List<SpiderListener> list0 = spider1.getSpiderListeners();
      assertNull(list0);
      
      boolean boolean0 = spider1.isExitWhenComplete();
      assertTrue(boolean0);
      
      spider0.runAsync();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      Page page0 = new Page();
      Page page1 = page0.setRawText("#f50c[I");
      spider0.extractAndAddRequests(page0, false);
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Thread interrupted when sleep", "Thread interrupted when sleep");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      CountableThreadPool countableThreadPool0 = new CountableThreadPool(995);
      spider1.threadPool = countableThreadPool0;
      spider0.getThreadAlive();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      LinkedTransferQueue<String> linkedTransferQueue1 = new LinkedTransferQueue<String>();
      linkedTransferQueue1.isEmpty();
      spider0.initComponent();
      spider0.stop();
      Spider spider2 = spider0.setDownloader(phantomJSDownloader0);
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Thread interrupted when sleep", "Thread interrupted when sleep");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      LinkedTransferQueue<String> linkedTransferQueue1 = new LinkedTransferQueue<String>();
      linkedTransferQueue0.isEmpty();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("");
      spider1.stop();
      Spider spider2 = spider0.setDownloader(phantomJSDownloader0);
      assertTrue(spider2.isExitWhenComplete());
      
      spider0.run();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("OqzJ");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      spider1.start();
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        spider1.onError(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Thread interrupted when sleep", "Thread interrupted when sleep");
      spider0.setDownloader(phantomJSDownloader0);
      boolean boolean0 = spider0.isSpawnUrl();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("OqzJ");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("OqzJ", "OqzJ");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      int int0 = spider1.getThreadAlive();
      assertEquals(0, int0);
      assertTrue(spider1.isExitWhenComplete());
      
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      LinkedTransferQueue<String> linkedTransferQueue1 = new LinkedTransferQueue<String>();
      spider1.getAll((Collection<String>) linkedTransferQueue1);
      spider1.initComponent();
      long long0 = spider1.getPageCount();
      assertEquals(0L, long0);
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Thread interrupted when sleep", "Thread interrupted when sleep");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider2 = spider1.startUrls(linkedList0);
      assertTrue(spider2.isExitWhenComplete());
      
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      spider0.getAll((Collection<String>) linkedTransferQueue0);
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread i=terrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Thread i=terrupted when sleep", "Thread i=terrupted when sleep");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1341);
      spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 1341);
      spider0.initComponent();
      spider1.getStartTime();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread i=terrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Thread i=terrupted when sleep", "Thread i=terrupted when sleep");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider0.setExecutorService((ExecutorService) null);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("s#V<Xdp;p!nW=}`A");
      String[] stringArray0 = new String[0];
      spider1.test(stringArray0);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("@sUa,0/E");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.scheduler((Scheduler) null);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      queueScheduler0.getTotalRequestsCount(spider0);
      QueueScheduler queueScheduler1 = new QueueScheduler();
      spider1.stop();
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thr~d intLrrupHed when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("//title", "//title");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("//title");
      spider1.setDownloader(phantomJSDownloader0);
      spider1.getSite();
      spider1.isExitWhenComplete();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Thread interrupted when sleep", "Thread interrupted when sleep");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider1.start();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      spider1.startUrls(linkedList0);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }
}
