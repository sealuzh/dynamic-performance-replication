/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 19:43:03 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ClassDiscovery;
import weka.core.FindWithCapabilities;
import weka.core.Instances;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      try { 
        findWithCapabilities0.setOptions((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities0);
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      assertEquals("[]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.setFilename("");
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      assertFalse(capabilities0.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("rHgdg");
      assertEquals("rHgdg", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      boolean boolean0 = findWithCapabilities0.handles(capabilities_Capability0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      capabilities0.m_InstancesTest = true;
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability0);
      assertEquals("weka/core/Capabilities.props", findWithCapabilities0.getFilename());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setFilename("|#mipbMO=ZjH");
      String[] stringArray0 = findWithCapabilities1.getOptions();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-W";
      stringArray0[1] = "-W";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getNotCapabilities();
      String string0 = findWithCapabilities0.getFilename();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Packages = vector0;
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities1.disableNot(capabilities_Capability0);
      findWithCapabilities0.setFilename("}UDJ'M 4");
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getFilename();
      assertEquals("}UDJ'M 4", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "no-class";
      stringArray0[1] = "-nominal-class";
      stringArray0[2] = "no-class";
      stringArray0[3] = "-nominal-class";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "-num-instances";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.setFilename("");
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setOptions(stringArray0);
      String string0 = findWithCapabilities0.getFilename();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "-num-instances";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setOptions(stringArray0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities1.enable(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_ATTRIBUTES;
      boolean boolean0 = findWithCapabilities1.handles(capabilities_Capability2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.m_Filename = null;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelational(20);
      Instances instances0 = testInstances0.generate("/b0I^vp%!q");
      instances0.toString();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.setClassIndex("");
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability2);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      Locale.getISOLanguages();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-no-class";
      stringArray0[1] = "Expected upper bound in range, found: '";
      stringArray0[2] = "p";
      stringArray0[3] = "weka.core.SparseInstance";
      stringArray0[4] = "\tMust handle numeric attributes.";
      stringArray0[5] = "- not allowed: ";
      stringArray0[6] = "\tThe Capabilities handler to base the handling on.\n\tThe other parameters can be used to override the ones\n\tdetermined from the handler. Additional parameters for\n\thandler can be passed on after the '--'.\n\tEither '-W' or '-t' can be used.";
      stringArray0[7] = "Expected upper bound in range, found: '";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("-1");
      findWithCapabilities0.m_Packages = null;
      findWithCapabilities0.getHandler();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3150);
      binarySparseInstance0.dataset();
      try { 
        Capabilities.forInstances((Instances) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Gp*,R6A&wOMuzF<X+";
      stringArray0[1] = ").";
      stringArray0[2] = "1999";
      stringArray0[3] = "CMLindb";
      stringArray0[4] = "-% pAw|pV2r`x) RK\"";
      stringArray0[5] = "N]ny)9]$TX8M(&";
      stringArray0[6] = "EXeO/";
      stringArray0[7] = "-nominal-atts";
      stringArray0[8] = "lH59Bn]f4c7dul7d";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      assertEquals(1, capabilities0.getMinimumNumberInstances());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "vT-k9GGEbHi";
      stringArray0[1] = "/b0I^vp%!q";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)87;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[2] = "kd4{";
      stringArray0[3] = "j4'SeX6u@dafO";
      stringArray0[4] = "-not-date-atts";
      stringArray0[5] = "-1";
      stringArray0[6] = "-nominal-class";
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-string-class";
      stringArray0[1] = "\tThe Capabilities handler to base the handling on.\n\tThe other parameters can be used to override the ones\n\tdetermined from the handler. Additional parameters for\n\thandler can be passed on after the '--'.\n\tEither '-W' or '-t' can be used.";
      stringArray0[2] = "7luF?}vJoh*";
      Vector<String> vector0 = new Vector<String>(249, 249);
      findWithCapabilities0.m_Packages = vector0;
      stringArray0[3] = "-1";
      stringArray0[4] = "/b0I^vp%!q";
      stringArray0[5] = "vO";
      stringArray0[6] = "Q:epQ,%\"+ZKdM";
      stringArray0[7] = "+cKn";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Misses = null;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "/Em<$g";
      stringArray0[1] = "-01-01";
      stringArray0[2] = "-not-missing-class-values";
      stringArray0[3] = "QT";
      stringArray0[4] = "9,";
      stringArray0[5] = "2F{T3-UJ6UaK>4$H8t6";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-c";
      stringArray0[1] = "'m";
      stringArray0[2] = "- not allowed: ";
      stringArray0[3] = "date-class";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.setClassIndex("dg");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.enableAllAttributeDependencies();
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      Capabilities capabilities2 = findWithCapabilities0.getNotCapabilities();
      capabilities2.enableAll();
      capabilities0.disableAllClassDependencies();
      capabilities1.enableDependency(capabilities_Capability0);
      capabilities1.or(capabilities2);
      findWithCapabilities0.setCapabilities(capabilities1);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.m_Filename = "dg";
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability2);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("Index of attribute \"weight\" (should be -1): ");
      findWithCapabilities0.find();
      findWithCapabilities0.setNotCapabilities(capabilities2);
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      findWithCapabilities0.getNotCapabilities();
      assertEquals("Index of attribute \"weight\" (should be -1): ", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(205);
      Instances instances0 = binarySparseInstance0.m_Dataset;
      try { 
        Capabilities.forInstances((Instances) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.setHandler(findWithCapabilities0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getOptions();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setHandler(findWithCapabilities0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getOptions();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-not-binary-class";
      stringArray0[1] = "Problem reading local properties: ";
      stringArray0[2] = "BNG%} ;q,fEigtvQ.";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-not-binary-atts";
      stringArray0[1] = "~<;9s*5\"a&";
      stringArray0[2] = "9NP";
      stringArray0[3] = "AS%@0r*7";
      stringArray0[4] = "-not-unary-class";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      stringArray0[5] = "mj{<8M}d?lIe R";
      stringArray0[6] = "weka/core/Capabilities.props";
      stringArray0[7] = "All class and attribute options can be prefixed with 'not',\ne.g., '-not-numeric-class'. This makes sure that the returned\nschemes 'cannot' handle numeric classes.";
      stringArray0[8] = "kd4{";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "missing_id";
      stringArray0[1] = "Tj0Scqsbe;Gq\"-*1o";
      stringArray0[2] = "gc";
      stringArray0[3] = "kFL{iOu%2L*]";
      stringArray0[4] = "OVxgU";
      stringArray0[5] = "\u0000-0.)vY[k&&P@`QK2";
      stringArray0[6] = "-binary-atts";
      stringArray0[7] = "qHDPs!,@xV";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getOptions();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getRevision();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      findWithCapabilities0.setClassIndex("-01-01");
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.listOptions();
      // Undeclared exception!
      try { 
        ClassDiscovery.clearClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "mvW0QS[Zn^%";
      stringArray0[2] = "-not-nominal-atts";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\tMust handle nominal classes.";
      stringArray0[1] = "-not-relational-atts";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }
}
