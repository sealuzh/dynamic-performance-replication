/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:38:41 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import java.util.UUID;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*.@z)FMlt}P4bP");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      arrayList0.listIterator();
      jSONReaderScanner0.setToken((-1047));
      jSONReaderScanner0.next();
      jSONReaderScanner0.nextIdent();
      assertEquals(25, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[[be.h!PTs`C$Ff0");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - [, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[7];
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", 262);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(262, jSONReaderScanner0.getFeatures());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("y[Esmca7 ]");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.alibaba.fastjson.util.UTF8Decoder");
      assertFalse(boolean0);
      
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertFalse(boolean1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertNull(bigDecimal0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      Calendar calendar0 = jSONReaderScanner0.getCalendar();
      assertNull(calendar0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      BigDecimal bigDecimal1 = new BigDecimal((-1));
      assertNotNull(bigDecimal1);
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      
      Locale locale0 = jSONReaderScanner0.getLocale();
      assertNotNull(locale0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-967));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner("hex", 127);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(127, jSONScanner0.getFeatures());
      assertEquals('h', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      
      float float0 = jSONScanner0.scanFloat('q');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(127, jSONScanner0.getFeatures());
      assertEquals('h', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      
      long long0 = jSONScanner0.scanLong('q');
      assertEquals(0L, long0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(127, jSONScanner0.getFeatures());
      assertEquals('h', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      
      SymbolTable symbolTable0 = new SymbolTable(1634);
      assertNotNull(symbolTable0);
      
      String[] stringArray0 = jSONScanner0.scanFieldStringArray(charArray0, 1634, symbolTable0);
      assertNull(stringArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(127, jSONScanner0.getFeatures());
      assertEquals('h', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 53, 53);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(53, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNull(bigDecimal0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(53, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      int int0 = jSONReaderScanner0.scanType("hex");
      assertNotSame(charArray0, charArray1);
      assertEquals((-2), int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(53, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int1 = jSONReaderScanner0.scanInt('@');
      assertNotSame(charArray0, charArray1);
      assertEquals(0, int1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(int1 == int0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(53, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6#+!Rd\"vZaY.qF");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('6', jSONScanner0.getCurrent());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[1];
      UUID uUID0 = jSONScanner0.scanFieldUUID(charArray0);
      assertNull(uUID0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('6', jSONScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      float[] floatArray0 = jSONScanner0.scanFieldFloatArray(charArray0);
      assertNull(floatArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('6', jSONScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      jSONScanner0.scanStringArray(set0, '*');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('6', jSONScanner0.getCurrent());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONScanner jSONScanner0 = new JSONScanner("@j)jpQR`s?#4");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('@', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.skipWhitespace();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('@', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertNull(floatArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals('@', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6#+!Rd\"vZaY.qF");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      char[] charArray0 = new char[7];
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertNull(string0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONScanner0.nextToken(58);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('#', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner0 = new JSONScanner("Wri6eNonStriFgValueAsString");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('W', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('W', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('W', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('}', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - }, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", 1198);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1198, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(23, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1198, jSONReaderScanner0.getFeatures());
      
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(23, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1198, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*.@z)FMlt}P4bP");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('*', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      JSONScanner jSONScanner0 = new JSONScanner("\u0000qc", 68);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('\u0000', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(68, jSONScanner0.getFeatures());
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertEquals(1, jSONScanner0.pos());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(68, jSONScanner0.getFeatures());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('*', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-1077));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertNull(bigInteger0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char char0 = jSONReaderScanner0.next();
      assertEquals('\u001A', char0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.nextIdent();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 89);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Yjak]9-V**tQ't;5r");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Yjak]9-V**tQ't;5r");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('Y', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      
      char[] charArray0 = new char[0];
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertNull(floatArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('Y', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('Y', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = jSONReaderScanner0.scanInt('}');
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('Y', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      
      String string0 = jSONReaderScanner0.tokenName();
      assertNotNull(string0);
      assertEquals("Unknown", string0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('Y', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 96);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("java.time.ZoneOffset");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('j', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      
      TimeZone timeZone0 = jSONReaderScanner1.getTimeZone();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotNull(timeZone0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('j', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals("GMT", timeZone0.getID());
      
      jSONReaderScanner1.setTimeZone(timeZone0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('j', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals("GMT", timeZone0.getID());
      
      long long0 = jSONReaderScanner1.scanLong('V');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('j', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      JSONScanner jSONScanner0 = new JSONScanner("java.time.ZoneOffset", 96);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(96, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("^(#~j<So<E`DE");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('^', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('^', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2605);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('!');
      assertFalse(boolean1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = jSONReaderScanner0.scanInt('!');
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("N5$SCmW;tZ'{", (-1278));
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-1278), jSONScanner0.getFeatures());
      assertEquals('N', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = '~';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1634, 3392903);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(3392903, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'l', '~'}, charArray0);
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(3392903, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'l', '~'}, charArray0);
      
      String string0 = jSONReaderScanner0.info();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(3392903, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'l', '~'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Set");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('S', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(bigDecimal0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(3392903, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'l', '~'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+8%");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('%', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      
      long long0 = jSONReaderScanner0.scanLong(')');
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('%', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      
      char[] charArray0 = new char[0];
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(8, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('%', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      
      int int1 = jSONReaderScanner0.matchStat();
      assertEquals((-1), int1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(int1 == int0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('%', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("bZ7");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('b', jSONScanner0.getCurrent());
      
      int int0 = jSONScanner0.scanInt('a');
      assertEquals(0, int0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('b', jSONScanner0.getCurrent());
      
      char[] charArray0 = new char[2];
      charArray0[1] = '|';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '|'}, charArray0);
      
      int int1 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals(0, int1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertTrue(int1 == int0);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '|'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("cF@k/BE?E;&I*.E~r", (-1077));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      
      boolean boolean0 = jSONReaderScanner0.isEnabled(101, (-1365));
      assertTrue(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      
      JSONScanner jSONScanner0 = new JSONScanner("}1!E^$3$|-Z_p%g~", (-3049));
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-3049), jSONScanner0.getFeatures());
      
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-3049), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+8%");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('%', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      long long0 = jSONReaderScanner0.scanLong(')');
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("+8%");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      long long1 = jSONScanner0.longValue();
      assertEquals(0L, long1);
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(long1 == long0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error, expect [, actual ");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(7, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("parse number key error", 93);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(93, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('p', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      
      int int0 = jSONReaderScanner1.matchStat();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(93, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('p', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 6);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(6, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertNull(floatArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(6, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'X', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SymbolTable symbolTable0 = new SymbolTable(25);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      JSONScanner jSONScanner1 = new JSONScanner(";8Lb?CSmt>0cu\"~0q", 96);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(';', jSONScanner1.getCurrent());
      assertEquals(96, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      
      int int0 = jSONScanner1.pos();
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, int0);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(';', jSONScanner1.getCurrent());
      assertEquals(96, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      
      jSONScanner0.nextToken(41);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(9, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      
      String string0 = jSONScanner0.scanSymbol((SymbolTable) null);
      assertNull(string0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(18, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      
      double double0 = jSONReaderScanner0.scanDouble('V');
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 192, (-2597));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-2597), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("N5");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('N', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      
      double double0 = jSONReaderScanner0.scanDouble('b');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-2597), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("toString");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("toString");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      
      double double0 = jSONReaderScanner1.scanDouble('>');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      
      int int0 = jSONReaderScanner1.intValue();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      
      JSONScanner jSONScanner0 = new JSONScanner("1");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('1', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      char[] charArray0 = new char[7];
      long long0 = jSONScanner0.scanFieldLong(charArray0);
      assertEquals(0L, long0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('1', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONScanner0.nextIdent();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertNull(collection0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      
      int int1 = jSONReaderScanner0.matchStat();
      assertEquals((-2), int1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(int1 == int0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6#+!Rd\"vZaY.qF");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      jSONScanner0.skipWhitespace();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[7];
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertNull(string0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONScanner0.nextToken(58);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.token());
      assertEquals('#', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[0];
      char char0 = 'I';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertNull(intArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      
      SymbolTable symbolTable0 = new SymbolTable('k');
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&-W!IVU;;{:oxK}Z7", (-1077));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('&', jSONReaderScanner0.getCurrent());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONScanner jSONScanner0 = new JSONScanner("&-W!IVU;;{:oxK}Z7", 0);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('&', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('-', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = Calendar.APRIL;
      assertEquals(3, int0);
      
      jSONScanner0.nextToken(46);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('W', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertEquals(1, jSONScanner0.pos());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("true", (-317));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertEquals((-317), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("BHgXItJ", 0);
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('B', jSONReaderScanner2.getCurrent());
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('=');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(bigDecimal0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals('&', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 554);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      String string0 = JSONLexerBase.readString(charArray0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 21);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(21, jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = jSONReaderScanner1.isBlankInput();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(21, jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0000';
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(8, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      
      Number number0 = jSONScanner0.integerValue();
      assertNotNull(number0);
      assertEquals(69560, number0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(8, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse null or new", 752);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(752, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(752, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(" false err");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(' ', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      
      boolean boolean0 = jSONReaderScanner1.scanBoolean('\u0000');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(boolean0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(' ', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&w", 128);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('&', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(128, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      Locale locale1 = Locale.ROOT;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.toString());
      
      String string0 = locale0.getDisplayName(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string0);
      assertEquals("Chinese (Taiwan)", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.toString());
      
      jSONReaderScanner0.setLocale(locale0);
      assertNotSame(locale0, locale1);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(locale0.equals((Object)locale1));
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('&', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(128, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1p)", 49);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("1p)", (-4758));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('1', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-4758), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      
      char[] charArray0 = new char[0];
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(bigInteger0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertTrue(boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(2, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = jSONReaderScanner1.intValue();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('1', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-4758), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
          assertTrue(boolean0);
          
          JSONScanner jSONScanner0 = new JSONScanner("^(#~j<So<E`DE");
          assertNotNull(jSONScanner0);
          assertEquals(0, jSONScanner0.matchStat);
          assertEquals(0, jSONScanner0.token());
          assertEquals('^', jSONScanner0.getCurrent());
          assertEquals(0, jSONScanner0.matchStat());
          assertEquals(989, jSONScanner0.getFeatures());
          assertFalse(jSONScanner0.isEOF());
          assertEquals(0, jSONScanner0.pos());
          assertNull(jSONScanner0.stringDefaultValue());
          
          long long0 = jSONScanner0.longValue();
          assertEquals(0L, long0);
          assertEquals(0, jSONScanner0.matchStat);
          assertEquals(0, jSONScanner0.token());
          assertEquals('^', jSONScanner0.getCurrent());
          assertEquals(0, jSONScanner0.matchStat());
          assertEquals(989, jSONScanner0.getFeatures());
          assertFalse(jSONScanner0.isEOF());
          assertEquals(0, jSONScanner0.pos());
          assertNull(jSONScanner0.stringDefaultValue());
          
          char[] charArray0 = new char[0];
          float float0 = jSONScanner0.scanFieldFloat(charArray0);
          assertEquals(0.0F, float0, 0.01F);
          assertEquals((-1), jSONScanner0.matchStat);
          assertEquals(0, jSONScanner0.token());
          assertEquals('^', jSONScanner0.getCurrent());
          assertEquals(989, jSONScanner0.getFeatures());
          assertEquals((-1), jSONScanner0.matchStat());
          assertFalse(jSONScanner0.isEOF());
          assertEquals(0, jSONScanner0.pos());
          assertNull(jSONScanner0.stringDefaultValue());
          assertArrayEquals(new char[] {}, charArray0);
          
          // Undeclared exception!
          try { 
            jSONScanner0.floatValue();
            fail("Expecting exception: StringIndexOutOfBoundsException");
          
          } catch(StringIndexOutOfBoundsException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner(", ifo : ");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      char[] charArray0 = new char[0];
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[20];
      objectArray0[1] = (Object) charArray0;
      jSONScanner0.lexError(", ifo : ", objectArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = Calendar.DAY_OF_WEEK;
      assertEquals(7, int0);
      
      JSONScanner jSONScanner0 = new JSONScanner("", (-933));
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-933), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      
      jSONScanner0.nextToken((-125));
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(20, jSONScanner0.token());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-933), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      
      int int1 = jSONScanner0.pos();
      assertEquals(0, int1);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(int1 == int0);
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(20, jSONScanner0.token());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-933), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+8%");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals('%', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(2, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      long long0 = jSONReaderScanner0.scanLong(')');
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(2, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(2, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      char[] charArray0 = new char[0];
      boolean boolean0 = JSONScanner.charArrayCompare("+8%", 123, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Date date0 = jSONReaderScanner0.scanDate(')');
      assertNull(date0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(2, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertNull(uUID0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(2, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6#+!Rd\"vZaY.qF");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('6', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      char[] charArray0 = new char[7];
      boolean boolean0 = jSONScanner0.scanBoolean('t');
      assertFalse(boolean0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('6', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      charArray0[0] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 176, 9);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(9, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertNull(string0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(9, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertNull(intArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(9, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = jSONReaderScanner0.isEOF();
      assertFalse(boolean1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertTrue(boolean1 == boolean0);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(9, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SymbolTable symbolTable0 = new SymbolTable(176);
      assertNotNull(symbolTable0);
      
      String[] stringArray0 = jSONScanner0.scanFieldStringArray(charArray0, 176, symbolTable0);
      assertNull(stringArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertArrayEquals(new char[] {'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONScanner0.scanNumber();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('#', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      
      jSONScanner0.close();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('#', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{!&cdGT6yiW}G<wE", 1289);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('{', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1289, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertNull(date0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('{', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1289, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'\u0000', ' ', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('!', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1289, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('=');
      assertFalse(boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('!', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1289, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+8%");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONScanner jSONScanner0 = new JSONScanner("+8%");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      char[] charArray0 = new char[1];
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals(0L, long0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.isEnabled(117, 117);
      assertTrue(boolean0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals((-2), int0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      Feature feature0 = Feature.IgnoreAutoType;
      boolean boolean1 = jSONReaderScanner0.isEnabled(feature0);
      assertFalse(boolean1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONScanner jSONScanner1 = new JSONScanner("TreeSet");
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('T', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0000';
      JSONScanner jSONScanner0 = new JSONScanner("nsll");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '\u0000', 0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("nsll");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "nsll");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(boolean2);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertNull(bigInteger0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'X', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char char0 = jSONReaderScanner0.next();
      assertEquals('e', char0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      jSONReaderScanner1.nextIdent();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(9, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1716));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      boolean boolean0 = jSONScanner0.isRef();
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(jSONScanner0.isEOF());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      
      boolean boolean1 = jSONScanner0.scanBoolean('u');
      assertFalse(boolean1);
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(boolean1 == boolean0);
      assertTrue(jSONScanner0.isEOF());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      
      JSONScanner jSONScanner1 = new JSONScanner("error parse null or new", 65536);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(65536, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertEquals('e', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = Calendar.LONG_STANDALONE;
      assertEquals(32770, int0);
      
      JSONScanner jSONScanner0 = new JSONScanner("N5");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('N', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      jSONScanner0.nextToken((-6048));
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.serializer.SerializeConfig", 98);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(98, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 76;
      JSONScanner jSONScanner0 = new JSONScanner(",}~xv]", 76);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(',', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(76, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('}', jSONScanner0.getCurrent());
      assertEquals(76, jSONScanner0.getFeatures());
      assertEquals(16, jSONScanner0.token());
      
      int int1 = jSONScanner0.scanInt('|');
      assertEquals(0, int1);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(int1 == int0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('}', jSONScanner0.getCurrent());
      assertEquals(76, jSONScanner0.getFeatures());
      assertEquals(16, jSONScanner0.token());
      
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("true", 0);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      long long0 = jSONReaderScanner1.scanLong('7');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("T !orZ!_?2", 160);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(160, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      
      int int0 = jSONScanner0.pos();
      assertEquals(0, int0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(160, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      
      jSONScanner0.nextToken(160);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(160, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      
      int int1 = jSONReaderScanner1.getFeatures();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, int1);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertTrue(int1 == int0);
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      jSONReaderScanner1.close();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1p)");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      
      int int0 = jSONReaderScanner0.scanType("unclosed string : ");
      assertEquals((-2), int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('?');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 96);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 59, (-1085));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals((-1085), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "unclosed.str");
      assertFalse(boolean0);
      
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      assertNotNull(uTF8Decoder0);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      
      Charset charset0 = uTF8Decoder0.charset();
      assertNotNull(charset0);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(date0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner1.scanIdent();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(18, jSONReaderScanner1.token());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals((-1085), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('?');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(boolean1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(boolean1 == boolean0);
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3524221, 16);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(16, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', ' ', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{!&cdGT6yiW}G<wE");
      assertFalse(boolean0);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertNull(date0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(16, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000', ' ', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(16, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000', ' ', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("?<D/s..");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('?', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean(' ');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(boolean1);
      assertEquals(3, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(boolean1 == boolean0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(16, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(3, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', ' ', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = jSONReaderScanner0.scanInt('U');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(16, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000', ' ', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      long long0 = jSONReaderScanner1.scanFieldSymbol(charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0L, long0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('?', jSONReaderScanner1.getCurrent());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertArrayEquals(new char[] {'\u0000', ' ', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 96);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[1] = 'V';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new", 0);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("new");
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner2.token());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('n', jSONReaderScanner2.getCurrent());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      
      double double0 = jSONReaderScanner0.scanDouble('V');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("new");
      assertNotNull(jSONReaderScanner3);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals('n', jSONReaderScanner3.getCurrent());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.matchStat());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner3.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("h", (-1134521796));
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-1134521796), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('h', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-1134521796), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      int int0 = 26;
      SymbolTable symbolTable0 = new SymbolTable(26);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u001Apos 1, json : h
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("^(#~j<So<E`DE");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('^', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      JSONScanner jSONScanner1 = new JSONScanner(", info : ");
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(',', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Q@2AP|\"1iK/%aE?Jw)", (-871));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-871), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('Q', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      String string0 = jSONReaderScanner0.stringVal();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-871), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('Q', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      char[] charArray0 = new char[1];
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals(0L, long0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-871), jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('Q', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      int int0 = jSONReaderScanner0.scanInt('\u0000');
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-871), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('Q', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      // Undeclared exception!
      try { 
        jSONScanner1.nextTokenWithChar('O');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match O - ,, info : pos 0, json : , info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed.str.lit", 41);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(41, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('u', jSONScanner0.getCurrent());
      
      UUID uUID0 = jSONScanner0.scanUUID('*');
      assertNull(uUID0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(41, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('u', jSONScanner0.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = '2';
      charArray0[3] = 'u';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'X', 'X');
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(88, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('X', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'X', '2', '\u0000', 'u', '\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "unclosed.str");
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("unclosed.str");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.nextToken(1854);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('.', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertArrayEquals(new char[] {'X', '2', '\u0000', 'u', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner1.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("^(#~j<So<E`DE");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('^', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('^', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner1 = new JSONScanner(", info : ");
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals(',', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      
      char[] charArray0 = new char[1];
      float float0 = jSONScanner1.scanFieldFloat(charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-2), jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals(',', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner1.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = '-';
      JSONScanner jSONScanner0 = new JSONScanner(";");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(';', jSONScanner0.getCurrent());
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(24, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("A]#|*:wS%aAi$f~");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      Class<InputStream> class0 = InputStream.class;
      Collection<String> collection0 = jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertNull(collection0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'-', '-'}, charArray0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      long long0 = jSONReaderScanner0.scanLong('-');
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("N", 56);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(56, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('N', jSONReaderScanner0.getCurrent());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      charArray1[0] = '`';
      charArray1[1] = '`';
      charArray1[2] = '`';
      charArray1[3] = '`';
      charArray1[4] = '`';
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(56, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('N', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'`', '`', '`', '`', '`'}, charArray1);
      
      charArray0[1] = '`';
      charArray0[2] = '`';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy((-270), charArray0, 56, (-270));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("N");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('N', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('h');
      assertNull(bigDecimal0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('N', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse null or new", 57);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(57, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner("+8%", 57);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(57, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('+', jSONScanner0.getCurrent());
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(57, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('+', jSONScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = jSONScanner0.pos();
      assertEquals(0, int0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(57, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('+', jSONScanner0.getCurrent());
      
      String string0 = "rz>G\\m5[p?.QZb(x";
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("rz>Gm5[p?.QZb(x");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('r', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "undefined";
      int int0 = 45;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", 45);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(45, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.resetStringPosition();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(45, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. u
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan new error");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('s', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      
      StringReader stringReader0 = new StringReader("scan new error");
      assertNotNull(stringReader0);
      
      String string0 = "error parse new";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse new");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      Date date0 = jSONReaderScanner0.scanDate('s');
      assertNull(date0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("%CVzGse?M'VbDZF*", "#Ot@v66S^m|W-m2I` ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"#Ot@v66S^m|W-m2I` \" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~dC^,:I[RZ9$7oi-9L$");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('~', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.nextToken(0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(1, jSONScanner0.token());
      assertEquals('d', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      char[] charArray0 = new char[4];
      StringReader stringReader0 = new StringReader("~dC^,:I[RZ9$7oi-9L$");
      assertNotNull(stringReader0);
      
      Feature feature0 = Feature.UseBigDecimal;
      jSONScanner0.config(feature0, false);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(1, jSONScanner0.token());
      assertEquals('d', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(861, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(1, jSONScanner0.token());
      assertEquals('d', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(861, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hex");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("true");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0, (-3027));
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals((-3027), jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.pos());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals("", jSONReaderScanner2.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      long long0 = jSONReaderScanner2.scanLong('V');
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals((-3027), jSONReaderScanner2.getFeatures());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.pos());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals("", jSONReaderScanner2.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = Calendar.ALL_STYLES;
      assertEquals(0, int0);
      
      JSONScanner jSONScanner0 = new JSONScanner("hex", (-1));
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('h', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, (-18));
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-18), jSONScanner1.getFeatures());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertTrue(jSONScanner1.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int1 = jSONScanner0.pos();
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, int1);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(int1 == int0);
      assertEquals('h', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      
      jSONScanner0.nextToken(15);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertEquals('e', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hex", 96);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      
      JSONScanner jSONScanner0 = new JSONScanner("xD]M2`WhPf$M!,$Z2", 96);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(96, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('x', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      int int0 = Calendar.WEEK_OF_MONTH;
      assertEquals(4, int0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. D
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = Calendar.DAY_OF_WEEK;
      assertEquals(7, int0);
      
      JSONScanner jSONScanner0 = new JSONScanner("VZQ", 186);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(186, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('V', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      
      jSONScanner0.nextToken(20);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(186, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('Z', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      
      int int1 = jSONScanner0.pos();
      assertEquals(0, int1);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(int1 == int0);
      assertEquals(186, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('Z', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~dC^,:I[RZ9$7oi-9L$");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('~', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.nextToken(0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(1, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('d', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~dC^,:I[RZ9$7oi-9L$", 1170);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1170, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('~', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1170, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('^', jSONReaderScanner0.getCurrent());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(8339, int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1170, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('^', jSONReaderScanner0.getCurrent());
      
      StringReader stringReader0 = new StringReader("~dC^,:I[RZ9$7oi-9L$");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("~dC^,:I[RZ9$7oi-9L$", 1170);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(1170, jSONReaderScanner1.getFeatures());
      assertEquals('~', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      
      UUID uUID0 = jSONReaderScanner1.scanFieldUUID(charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(uUID0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(1170, jSONReaderScanner1.getFeatures());
      assertEquals('~', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      float[] floatArray0 = jSONScanner0.scanFieldFloatArray(charArray0);
      assertNull(floatArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(1, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('d', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Number number0 = jSONReaderScanner0.integerValue();
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotNull(number0);
      assertEquals(8339, number0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(number0.equals((Object)int0));
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1170, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('^', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6#+!Rd\"vZaY.qF");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "S}C~]p7";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("S}C~]p7");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      
      char char0 = '2';
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 96);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[1] = 'G';
      charArray0[2] = '7';
      charArray0[3] = '?';
      String string0 = jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, '?');
      assertNull(string0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      
      charArray0[4] = '4';
      charArray0[5] = '|';
      charArray0[6] = '+';
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      boolean boolean0 = jSONScanner0.isRef();
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      SymbolTable symbolTable0 = new SymbolTable(127);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'O');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{!&cdGT6yiW}G<wE", ' ');
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(32, jSONReaderScanner0.getFeatures());
      assertEquals('{', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner0 = new JSONScanner("{!&cdGT6yiW}G<wE");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('{', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      SymbolTable symbolTable0 = new SymbolTable(2);
      assertNotNull(symbolTable0);
      
      jSONScanner0.nextToken(2249);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('!', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(12, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      SymbolTable symbolTable1 = new SymbolTable(2249);
      assertNotNull(symbolTable1);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      
      String string0 = jSONScanner0.scanSymbolWithSeperator(symbolTable0, '?');
      assertNotSame(symbolTable0, symbolTable1);
      assertNull(string0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(symbolTable0.equals((Object)symbolTable1));
      assertFalse(jSONScanner0.isEOF());
      assertEquals('!', jSONScanner0.getCurrent());
      assertEquals(12, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 96;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 96);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[1] = 'V';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      
      long long0 = jSONReaderScanner0.scanLong('H');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.close();
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")9IF{vp}CRaME21sHc");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertNull(bigInteger0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+8%");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('%', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      long long0 = jSONReaderScanner0.scanLong(')');
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('%', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      JSONScanner jSONScanner0 = new JSONScanner("+8%", (-1));
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[0];
      long long1 = jSONScanner0.scanFieldLong(charArray0);
      assertEquals(0L, long1);
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(long1 == long0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONScanner0.nextIdent();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('%', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")QVc");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("scan false*rrkr", 14);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(14, jSONScanner0.getFeatures());
      assertEquals('s', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(' ', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(14, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      String string0 = jSONScanner0.scanSymbol((SymbolTable) null);
      assertNotNull(string0);
      assertEquals("false", string0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(14, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      int int0 = Calendar.ERA;
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char[] charArray0 = new char[5];
      int int0 = Calendar.ALL_STYLES;
      assertEquals(0, int0);
      
      JSONScanner jSONScanner0 = new JSONScanner("Z(FE/|P<");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('Z', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      
      String string0 = jSONScanner0.scanString('J');
      assertNull(string0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('Z', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - Z, info : pos 0, json : Z(FE/|P<
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#lm");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('#', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("unclosed string : ", 123);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('u', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(123, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      
      long long0 = jSONReaderScanner1.scanLong('=');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('u', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(123, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("Set", 123);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(123, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('S', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      int int0 = jSONScanner0.pos();
      assertEquals(0, int0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(123, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('S', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.nextToken(0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(123, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(21, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      int int1 = jSONReaderScanner0.getFeatures();
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(989, int1);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(int1 == int0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('#', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner((char[]) null, 160);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*.@z)FMlt}P4bP");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('*', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ListIterator<Locale.LanguageRange> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      jSONReaderScanner0.setToken(0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('*', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      assertEquals('u', char0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'u';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertArrayEquals(new char[] {'u', 'u', 'u'}, charArray0);
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertArrayEquals(new char[] {'u', 'u', 'u'}, charArray0);
      
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertArrayEquals(new char[] {'u', 'u', 'u'}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.isEnabled((-1962), 0);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONReaderScanner");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('c', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'X', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      Collection<String> collection0 = jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertNull(collection0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('c', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertArrayEquals(new char[] {'X', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'X', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals(0L, long0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'X', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.isEnabled(117, (-2));
      assertTrue(boolean0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'X', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals((-2), int0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'X', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner1 = new JSONScanner("com.alibaba.fastjson.parser.JSONReaderScanner", (-2));
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.isEOF());
      assertEquals((-2), jSONScanner1.getFeatures());
      assertEquals('c', jSONScanner1.getCurrent());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      
      jSONScanner1.scanNumber();
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.isEOF());
      assertEquals((-2), jSONScanner1.getFeatures());
      assertEquals('c', jSONScanner1.getCurrent());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(2, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      
      jSONScanner0.close();
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.isEOF());
      assertEquals('c', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "+8%";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('Y');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(">$`?<Qdg{l%`l");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('>', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('>', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      double double0 = jSONScanner0.scanDouble('K');
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('>', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      char[] charArray0 = new char[7];
      JSONScanner jSONScanner1 = new JSONScanner("new");
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      
      jSONScanner1.nextIdent();
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(9, jSONScanner1.token());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNull(string0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals('>', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner2 = new JSONScanner("SvtOY@_iY[GetJ*", 0);
      assertNotNull(jSONScanner2);
      assertEquals(0, jSONScanner2.matchStat);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.getFeatures());
      assertEquals('S', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      
      float float0 = jSONScanner2.scanFieldFloat(charArray0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-2), jSONScanner2.matchStat);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner2.getFeatures());
      assertEquals((-2), jSONScanner2.matchStat());
      assertEquals('S', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = jSONScanner1.pos();
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertEquals(0, int0);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(9, jSONScanner1.token());
      
      JSONScanner jSONScanner3 = new JSONScanner("is", 44);
      assertNotNull(jSONScanner3);
      assertEquals(0, jSONScanner3.matchStat);
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertEquals('i', jSONScanner3.getCurrent());
      assertFalse(jSONScanner3.isEOF());
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals(44, jSONScanner3.getFeatures());
      assertEquals(0, jSONScanner3.token());
      assertNull(jSONScanner3.stringDefaultValue());
      assertEquals(0, jSONScanner3.pos());
      
      jSONScanner1.nextToken(44);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner3);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner3));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(20, jSONScanner1.token());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      jSONReaderScanner0.scanStringArray(arrayList0, '(');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2136);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      int int0 = jSONReaderScanner0.scanInt('|');
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      float float0 = jSONReaderScanner0.scanFloat('B');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = Calendar.LONG_STANDALONE;
      assertEquals(32770, int0);
      
      SymbolTable symbolTable0 = new SymbolTable(324);
      assertNotNull(symbolTable0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.serializer.SerializeConfig", 98);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(98, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      
      int int1 = jSONReaderScanner0.scanInt('&');
      assertEquals(0, int1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(int1 == int0);
      assertEquals(98, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('c', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "unclosed");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not support : ");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      Locale locale0 = new Locale("com.alibaba.fastjson.parser.JSONLexerBase");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("com.alibaba.fastjson.parser.jsonlexerbase", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("com.alibaba.fastjson.parser.jsonlexerbase", locale0.toString());
      
      int int0 = jSONReaderScanner0.scanInt('k');
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      float float0 = jSONReaderScanner0.scanFloat('}');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(3857);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan new error", 20);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('s', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(20, jSONScanner0.getFeatures());
      
      char[] charArray0 = new char[9];
      SymbolTable symbolTable0 = new SymbolTable(20);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertNotNull(string0);
      assertEquals("scan", string0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(20, jSONScanner0.getFeatures());
      
      charArray0[0] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("aquXb7R");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertNull(floatArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = jSONReaderScanner0.scanInt('[');
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("u}S{U]%,&b*-");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("u}S{U]%,&b*-", (-2448));
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals((-2448), jSONScanner0.getFeatures());
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('}', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-2448), jSONScanner0.getFeatures());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("u}S{U]%,&b*-");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('u', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      
      char[] charArray0 = new char[0];
      UUID uUID0 = jSONScanner0.scanFieldUUID(charArray0);
      assertNull(uUID0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('}', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-2448), jSONScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('G');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(bigDecimal0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      
      long long0 = jSONScanner0.longValue();
      assertEquals(69L, long0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('}', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-2448), jSONScanner0.getFeatures());
      
      int int0 = jSONReaderScanner1.intValue();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('u', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      JSONScanner jSONScanner0 = new JSONScanner("1.2.46", 0);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('1', jSONScanner0.getCurrent());
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('.', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(3, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("T");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('T', jSONReaderScanner1.getCurrent());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = 'R';
      UUID uUID0 = jSONScanner0.scanFieldUUID(charArray0);
      assertNull(uUID0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals('.', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(3, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertArrayEquals(new char[] {'2', 'R'}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('n');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(bigDecimal0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      try { 
        jSONScanner0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 1.2
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0000';
      JSONScanner jSONScanner0 = new JSONScanner("null", 43);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(43, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      
      JSONScanner jSONScanner1 = new JSONScanner("null", 48);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals('n', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(48, jSONScanner1.getFeatures());
      
      jSONScanner0.nextIdent();
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(jSONScanner0.isEOF());
      assertEquals(43, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(8, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'J';
      charArray1[1] = 'v';
      charArray1[2] = '%';
      UUID uUID0 = jSONScanner1.scanFieldUUID(charArray1);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(charArray1, charArray0);
      assertNull(uUID0);
      assertEquals((-2), jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals('n', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals((-2), jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(48, jSONScanner1.getFeatures());
      assertArrayEquals(new char[] {'J', 'v', '%'}, charArray1);
      
      long long0 = jSONScanner0.longValue();
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(69560L, long0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(jSONScanner0.isEOF());
      assertEquals(43, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(8, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("cF@k/BE?E;&I*.E~r", (-1077));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      char[] charArray0 = new char[0];
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertNull(bigInteger0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      char char0 = jSONReaderScanner0.next();
      assertEquals('F', char0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('F', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.nextIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertEquals('@', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1077));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("rH#R7+Qw");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      char[] charArray0 = new char[0];
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertNull(uUID0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('#', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(2, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('R', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(",PXD[F", 76);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(',', jSONReaderScanner1.getCurrent());
      assertEquals(76, jSONReaderScanner1.getFeatures());
      
      int int0 = jSONReaderScanner0.intValue();
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(2, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('R', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      int int1 = jSONReaderScanner1.matchStat();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, int1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertTrue(int1 == int0);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(',', jSONReaderScanner1.getCurrent());
      assertEquals(76, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1p)", 49);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("qaquXb7R");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('q', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      
      long long0 = jSONReaderScanner0.scanLong('4');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(1L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("1p)");
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals('1', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      float[][] floatArray0 = jSONReaderScanner1.scanFieldFloatArray2(charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNull(floatArray0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('q', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertArrayEquals(new char[] {'4'}, charArray0);
      
      int int0 = jSONReaderScanner1.scanInt('}');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('q', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      long long0 = jSONReaderScanner0.scanLong('3');
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      char[] charArray0 = new char[8];
      JSONScanner jSONScanner0 = new JSONScanner("~EU>y$7ir]zJ)pJ<", (-1));
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('~', jSONScanner0.getCurrent());
      
      boolean boolean0 = jSONScanner0.scanBoolean('Y');
      assertFalse(boolean0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('~', jSONScanner0.getCurrent());
      
      jSONScanner0.nextToken(45);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('E', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.token());
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertNull(bigInteger0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONScanner0.scanStringArray((Collection<String>) null, 'Y');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('E', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.token());
      
      SymbolTable symbolTable0 = new SymbolTable(45);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hex");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("true");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("hex", 0);
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals('h', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("0 d<KZs");
      assertNotNull(jSONReaderScanner3);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals('0', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(0, jSONReaderScanner3.pos());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      
      long long0 = jSONReaderScanner3.scanLong('7');
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner3.matchStat);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertEquals((-1), jSONReaderScanner3.matchStat());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals('0', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(0, jSONReaderScanner3.pos());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet", (-1083));
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-1083), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      
      int int0 = jSONScanner0.scanType("+8");
      assertEquals((-2), int0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-1083), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(22, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('q');
      assertFalse(boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(22, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Yjak]9-V**tQ't;5r");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Yjak]9-V**tQ't;5r");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('Y', jSONReaderScanner0.getCurrent());
      
      char[] charArray0 = new char[0];
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertNull(floatArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('Y', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      SymbolTable symbolTable0 = new SymbolTable(32);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 32, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner("|Sp1]");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals('|', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      SymbolTable symbolTable0 = new SymbolTable(10);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner1 = new JSONScanner(", info : ");
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(',', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      
      String string0 = jSONScanner1.scanSymbol(symbolTable0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(string0);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(16, jSONScanner1.token());
      assertEquals(' ', jSONScanner1.getCurrent());
      
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&-W!hIVU;;{:oxK}Z7", (-1077));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('&', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      
      char[] charArray0 = new char[9];
      JSONScanner jSONScanner0 = new JSONScanner("&-W!hIVU;;{:oxK}Z7");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('&', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('&', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertNull(string0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('&', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = jSONScanner0.pos();
      assertEquals(0, int0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('&', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      int int1 = jSONScanner0.scanInt('|');
      assertEquals(0, int1);
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(int1 == int0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('&', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cF");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      JSONScanner jSONScanner1 = new JSONScanner("pBg", 860);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.token());
      assertEquals('p', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(860, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      
      int int2 = 32;
      jSONScanner0.nextToken(13);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      SymbolTable symbolTable0 = new SymbolTable(3462);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, '3');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 127;
      JSONScanner jSONScanner0 = new JSONScanner("BMJF=d4'Mz~z3lTufT", 26376);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(26376, jSONScanner0.getFeatures());
      assertEquals('B', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      long long0 = jSONScanner0.scanLong('~');
      assertEquals(0L, long0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(26376, jSONScanner0.getFeatures());
      assertEquals('B', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      
      SymbolTable symbolTable0 = new SymbolTable(26376);
      assertNotNull(symbolTable0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = '~';
      charArray0[2] = '~';
      charArray0[3] = 'V';
      charArray0[1] = '~';
      charArray0[5] = '~';
      String[] stringArray0 = jSONScanner0.scanFieldStringArray(charArray0, 127, symbolTable0);
      assertNull(stringArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(26376, jSONScanner0.getFeatures());
      assertEquals('B', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {'Y', '~', '~', 'V', '\u0000', '~'}, charArray0);
      
      jSONScanner0.scanNumber();
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(26376, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('M', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      
      jSONScanner0.close();
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(26376, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('M', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner("6F", 127);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('6', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(127, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      boolean boolean0 = jSONScanner0.scanBoolean('X');
      assertFalse(boolean0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('6', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(127, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      
      jSONScanner0.skipWhitespace();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('6', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(127, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      
      SymbolTable symbolTable0 = new SymbolTable(65536);
      assertNotNull(symbolTable0);
      
      jSONScanner0.scanNumber();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(127, jSONScanner0.getFeatures());
      assertEquals(3, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      
      JSONScanner jSONScanner1 = new JSONScanner("#\"fd~lZ};|i");
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals('#', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      
      // Undeclared exception!
      try { 
        jSONScanner1.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : #pos 0, json : #\"fd~lZ};|i
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(3, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 37);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(37, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.skipWhitespace();
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(3, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONScanner jSONScanner0 = new JSONScanner("1.2.46");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('1', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('1', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[4] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 24);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('!', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'!', '\\', '\\', '\u0000', '\\'}, charArray0);
      
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 1448);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      charArray0[1] = '\\';
      charArray0[2] = 'Z';
      charArray0[4] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 20);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('!', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'!', '\\', 'Z', '\u0000', '\\'}, charArray0);
      
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 1442);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "scan new error";
      JSONScanner jSONScanner0 = new JSONScanner("scan new error", 20);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(20, jSONScanner0.getFeatures());
      assertEquals('s', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      char[] charArray0 = new char[9];
      SymbolTable symbolTable0 = new SymbolTable(10);
      assertNotNull(symbolTable0);
      
      String string1 = jSONScanner0.scanSymbol(symbolTable0);
      assertNotNull(string1);
      assertEquals("scan", string1);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(string1.equals((Object)string0));
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(20, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      
      charArray0[1] = '\\';
      char char0 = '`';
      charArray0[2] = '`';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 96);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[9];
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 96);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(96, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = jSONScanner0.scanBoolean('#');
      assertFalse(boolean1);
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(96, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 820);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(820, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(string0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean2 = jSONReaderScanner0.matchField(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(boolean2);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner(charArray0, (-2870), (-581));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      charArray0[6] = ',';
      charArray0[5] = '\\';
      charArray0[7] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, ',');
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('|', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'|', '\\', '\\', '\\', '\u0000', '\\', ',', '\\'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 0);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertArrayEquals(new char[] {'|', '\\', '\\', '\\', '\u0000', '\\', ',', '\\'}, charArray0);
      
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('|', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'|', '\\', '\\', '\\', '\u0000', '\\', ',', '\\'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6coAzn\"OI7uA&.}", 69);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(69, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("b6*+LPF|!Yz");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('b', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      
      double double0 = jSONReaderScanner0.scanDouble('\\');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(6.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(69, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      int int0 = jSONReaderScanner0.intValue();
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(69, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONScanner jSONScanner0 = new JSONScanner("HV");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('H', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("HV", (-541));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-541), jSONReaderScanner1.getFeatures());
      assertEquals('H', jSONReaderScanner1.getCurrent());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = ',';
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0, 2110);
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(2110, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.token());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertArrayEquals(new char[] {'e', 'e', 'e', ','}, charArray0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HV");
      assertFalse(boolean0);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(date0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'e', 'e', 'e', ','}, charArray0);
      
      jSONReaderScanner0.scanIdent();
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(6, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner3 = null;
      try {
        jSONReaderScanner3 = new JSONReaderScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = ' ';
      String string0 = "java.util.concurrent.atomic.DoubleAdder";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.util.concurrent.atomic.DoubleAdder");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('j', jSONReaderScanner0.getCurrent());
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal(' ');
      assertNull(bigDecimal0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('j', jSONReaderScanner0.getCurrent());
      
      JSONScanner jSONScanner0 = new JSONScanner("notwriterootclassname", 110);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(110, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      int int0 = Calendar.LONG_STANDALONE;
      assertEquals(32770, int0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken((-1636));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("cF@k/BE?E;&I*.E~r", (-1077));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      char[] charArray0 = new char[0];
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertNull(bigInteger0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.isEnabled(104, (-1365));
      assertTrue(boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 35);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0000';
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 37, 0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONScanner0.matchStat = 49;
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(49, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6#+!Rd\"vZaY.qF");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6#+!Rd\"vZaY.qF");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("com", 0);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('c', jSONReaderScanner1.getCurrent());
      
      double double0 = jSONReaderScanner0.scanDouble('2');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(6.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      String string0 = jSONReaderScanner0.stringVal();
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "&-W!hIVU;;{:oxK}Z7";
      int int0 = (-1077);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&-W!hIVU;;{:oxK}Z7", (-1077));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('&', jSONReaderScanner0.getCurrent());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'N';
      charArray0[1] = ' ';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      charArray0[2] = 'c';
      char char0 = jSONReaderScanner0.next();
      assertEquals('-', char0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      double double0 = jSONReaderScanner0.scanDouble('\"');
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{", 18);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('{', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      
      float float0 = jSONScanner0.scanFloat('q');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('{', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      
      long long0 = jSONScanner0.scanLong('q');
      assertEquals(0L, long0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('{', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      
      jSONScanner0.scanNumber();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('{', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(2, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      
      JSONScanner jSONScanner1 = new JSONScanner("{");
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals('{', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      
      jSONScanner1.close();
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals('{', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      
      jSONScanner1.scanIdent();
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(18, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}3OwJc>,urzV,G", 34);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(34, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('}', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = 'z';
      charArray0[2] = 'Z';
      charArray0[3] = 'n';
      charArray0[4] = 'O';
      charArray0[5] = 'D';
      charArray0[6] = 'P';
      charArray0[7] = 'O';
      UUID uUID0 = jSONScanner0.scanFieldUUID(charArray0);
      assertNull(uUID0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(34, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('}', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertArrayEquals(new char[] {'8', 'z', 'Z', 'n', 'O', 'D', 'P', 'O'}, charArray0);
      
      jSONScanner0.nextIdent();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(34, jSONScanner0.getFeatures());
      assertEquals(13, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('3', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      Class<InputStream> class0 = InputStream.class;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2263));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("NotWriteDefaultValue");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('N', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      SymbolTable symbolTable0 = new SymbolTable(2);
      assertNotNull(symbolTable0);
      
      jSONScanner0.nextToken(1533);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertNull(string0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(20, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+8%");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner0 = new JSONScanner("+8%");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[0];
      long long0 = jSONScanner0.scanFieldLong(charArray0);
      assertEquals(0L, long0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('+', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONScanner0.nextIdent();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('%', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(2, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertNull(collection0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      int int1 = jSONReaderScanner0.matchStat();
      assertEquals((-1), int1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(int1 == int0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      Locale locale0 = jSONReaderScanner0.getLocale();
      assertNotNull(locale0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONScanner jSONScanner0 = new JSONScanner("HV");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('H', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("HV", (-541));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals((-541), jSONReaderScanner1.getFeatures());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('H', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      char[] charArray0 = new char[4];
      charArray0[3] = ',';
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0, 2110);
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(2110, jSONReaderScanner2.getFeatures());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', ','}, charArray0);
      
      String string0 = "M`G!YSa]b5Z_uE\\u`5j";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WriteDateUseDateFrmat");
      assertFalse(boolean0);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[1] = '\"';
      Date date0 = jSONReaderScanner1.scanFieldDate(charArray1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(charArray1, charArray0);
      assertNull(date0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-541), jSONReaderScanner1.getFeatures());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals('H', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\"', '\u0000', '\u0000'}, charArray1);
      
      jSONReaderScanner2.scanIdent();
      assertNotSame(charArray0, charArray1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(2110, jSONReaderScanner2.getFeatures());
      assertEquals(18, jSONReaderScanner2.token());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', ','}, charArray0);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(string0);
      assertNotNull(jSONReaderScanner3);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals('M', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.token());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.pos());
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('L');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertTrue(boolean1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(boolean1 == boolean0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      
      int int0 = jSONReaderScanner1.scanInt('\"');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertEquals((-541), jSONReaderScanner1.getFeatures());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('H', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = Calendar.APRIL;
      assertEquals(3, int0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan false*rrkr", (-317));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-317), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("n@!uw3\"", 3);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(3, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      
      BigDecimal bigDecimal0 = jSONReaderScanner1.scanDecimal('o');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(bigDecimal0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(3, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0000';
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      UUID uUID0 = jSONScanner0.scanUUID('\u0000');
      assertNull(uUID0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.nextIdent();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(8, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      Number number0 = jSONScanner0.integerValue();
      assertNotNull(number0);
      assertEquals(69560, number0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(8, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 51);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.lexError("null", (Object[]) null);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 1442);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 96);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[9];
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertNull(bigDecimal0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('?');
      assertNull(uUID0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals(0L, long0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SymbolTable symbolTable0 = new SymbolTable(622);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("1");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('1', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      char[] charArray0 = new char[7];
      long long0 = jSONScanner0.scanFieldLong(charArray0);
      assertEquals(0L, long0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('1', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertNull(date0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("1");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('1', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      
      boolean boolean0 = jSONReaderScanner1.scanBoolean('=');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertTrue(boolean0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('1', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = "hex";
      String string1 = "float";
      JSONScanner jSONScanner0 = new JSONScanner("float");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      
      char char0 = 'z';
      boolean boolean0 = jSONScanner0.scanBoolean('z');
      assertFalse(boolean0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      
      JSONScanner jSONScanner1 = new JSONScanner("hex", 65536);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(65536, jSONScanner1.getFeatures());
      assertEquals('h', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-320), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0000';
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      
      JSONScanner jSONScanner1 = new JSONScanner("null", 37);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(37, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      
      UUID uUID0 = jSONScanner1.scanFieldUUID(charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(uUID0);
      assertEquals((-2), jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals(37, jSONScanner1.getFeatures());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONScanner1.nextToken(0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals((-2), jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-2), jSONScanner1.matchStat());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(8, jSONScanner1.token());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(37, jSONScanner1.getFeatures());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#c", 32);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('#', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(32, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null", 2534);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(2534, jSONReaderScanner1.getFeatures());
      
      BigDecimal bigDecimal0 = jSONReaderScanner1.scanDecimal(' ');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(bigDecimal0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(2534, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan new error");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('s', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      
      char[] charArray0 = new char[9];
      SymbolTable symbolTable0 = new SymbolTable(20);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertNotNull(string0);
      assertEquals("scan", string0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      
      charArray0[1] = '\\';
      charArray0[2] = '`';
      charArray0[3] = '?';
      charArray0[4] = '?';
      charArray0[5] = '^';
      jSONScanner0.matchStat = (int) '3';
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(51, jSONScanner0.matchStat());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      
      Number number0 = jSONScanner0.integerValue();
      assertNotNull(number0);
      assertEquals(72652, number0);
      assertEquals(51, jSONScanner0.matchStat);
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(51, jSONScanner0.matchStat());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '\\', 20);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'\u0000', '\\', '`', '?', '?', '^', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'\u0000', '\\', '`', '?', '?', '^', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : `
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Yjak]9-V**tQ't;5r");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8>:]aV)|\"NPbOWH8A4v");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      char[] charArray0 = new char[0];
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertNull(floatArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = jSONReaderScanner0.scanInt('}');
      assertEquals(8, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      
      float float0 = jSONReaderScanner0.scanFloat('!');
      assertEquals(8.0F, float0, 0.01F);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('8', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan new error");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('s', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[9];
      SymbolTable symbolTable0 = new SymbolTable(20);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertNotNull(string0);
      assertEquals("scan", string0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      
      charArray0[1] = '\\';
      charArray0[2] = 'O';
      char char0 = '?';
      charArray0[3] = '?';
      charArray0[4] = 'E';
      charArray0[5] = '^';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 20, 43);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(43, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '\\', 'O', '?', 'E', '^', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : O
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_]%DI5 iNUdgh(IAA1S");
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("not match ", 49);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(49, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      
      char[] charArray0 = new char[0];
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(49, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "scan false*rrkr";
      JSONScanner jSONScanner0 = new JSONScanner("scan false*rrkr", 18);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(18, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('s', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(18, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = Calendar.APRIL;
      assertEquals(3, int0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(510);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // scan false error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      charArray0[1] = '!';
      charArray0[2] = 'V';
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.autoTypeAccept", 2372);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(2372, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.putChar('!');
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(2372, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      int int0 = Calendar.LONG_STANDALONE;
      assertEquals(32770, int0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(158);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[6] = ',';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, ',');
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('|', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'|', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ',', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 0);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertArrayEquals(new char[] {'|', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ',', '\u0000'}, charArray0);
      
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals('|', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'|', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ',', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      
      boolean boolean0 = jSONScanner0.isRef();
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      
      char char0 = '`';
      float float0 = jSONScanner0.scanFloat('`');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((char[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(7, jSONReaderScanner0.token());
      
      long long0 = jSONReaderScanner0.scanLong('(');
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(7, jSONReaderScanner0.token());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(7, jSONReaderScanner0.token());
      
      int int1 = 96;
      boolean boolean0 = JSONScanner.charArrayCompare("false", 96, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Date date0 = jSONReaderScanner0.scanDate(' ');
      assertNull(date0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(7, jSONReaderScanner0.token());
      
      Locale locale0 = null;
      try {
        locale0 = new Locale((String) null, (String) null, ", actual ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set", 49);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('z');
      assertNull(bigDecimal0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      JSONScanner jSONScanner0 = new JSONScanner(":poMk?O6@{vWC", (-1479));
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(':', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1479), jSONScanner0.getFeatures());
      
      BigDecimal bigDecimal1 = jSONReaderScanner0.scanDecimal('r');
      assertNull(bigDecimal1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      
      JSONScanner jSONScanner1 = new JSONScanner("Set", (-1));
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals('S', jSONScanner1.getCurrent());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-1), jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      
      int int0 = Calendar.LONG_STANDALONE;
      assertEquals(32770, int0);
      
      jSONScanner0.nextToken(41);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner0.pos());
      assertEquals(17, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1479), jSONScanner0.getFeatures());
      assertEquals('p', jSONScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("com.google.common.collect.ArrayListMultimap", 0);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('c', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 41, 115);
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertTrue(jSONReaderScanner2.isEOF());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(115, jSONReaderScanner2.getFeatures());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      BigDecimal bigDecimal2 = jSONReaderScanner2.scanDecimal('8');
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNull(bigDecimal2);
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertTrue(jSONReaderScanner2.isEOF());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(115, jSONReaderScanner2.getFeatures());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6#+!Rd\"vZaY.qF");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6#+!Rd\"vZaY.qF");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("S}C~]p7");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('S', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      
      char[] charArray0 = new char[0];
      UUID uUID0 = jSONScanner0.scanFieldUUID(charArray0);
      assertNull(uUID0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner1.scanDecimal('2');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(bigDecimal0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('S', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      
      String[] stringArray0 = jSONScanner0.scanFieldStringArray(charArray0, (-458), (SymbolTable) null);
      assertNull(stringArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner1 = new JSONScanner("error parse true", 39);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertEquals('e', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(39, jSONScanner1.getFeatures());
      
      jSONScanner1.scanNumber();
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('r', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(3, jSONScanner1.token());
      assertEquals(39, jSONScanner1.getFeatures());
      
      BigDecimal bigDecimal1 = jSONReaderScanner1.scanDecimal('Q');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(bigDecimal1);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('S', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      
      UUID uUID1 = jSONReaderScanner1.scanUUID('\"');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(uUID1);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('S', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '!';
      charArray0[2] = 'V';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("EOF error", 846);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('E', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(846, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      
      boolean boolean1 = jSONScanner0.isRef();
      assertFalse(boolean1);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean1 == boolean0);
      assertEquals('E', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(846, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(3, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(846, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('O', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      
      int int0 = (-2297);
      Reader reader0 = null;
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      JSONScanner jSONScanner0 = new JSONScanner(" 9:|EvA.", (-1479));
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1479), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      JSONScanner jSONScanner1 = new JSONScanner("v_q'/Ia3:?6AB>UJJrp", 2);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals('v', jSONScanner1.getCurrent());
      assertEquals(2, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      
      int int0 = Calendar.LONG_STANDALONE;
      assertEquals(32770, int0);
      
      jSONScanner0.nextToken(32770);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(1, jSONScanner0.pos());
      assertEquals(2, jSONScanner0.token());
      assertEquals(':', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1479), jSONScanner0.getFeatures());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("`96=7YxmM]D?$}q=N1", (-1479));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-1479), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('`', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("J!*Iv3_<vY<VTq", 96);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('J', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONScanner jSONScanner0 = new JSONScanner("(", 55);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(55, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('(', jSONScanner0.getCurrent());
      
      int int0 = Calendar.LONG_STANDALONE;
      assertEquals(32770, int0);
      
      jSONScanner0.nextToken(44);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(55, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(10, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('J');
      assertNull(bigDecimal0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('J', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = '\\';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 14);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(14, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertArrayEquals(new char[] {'5', '\\'}, charArray0);
      
      Date date0 = jSONReaderScanner0.scanDate('\'');
      assertNull(date0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      charArray0[1] = '\\';
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'Z';
      charArray1[1] = 'Z';
      charArray1[2] = '!';
      charArray1[3] = 'Z';
      charArray1[4] = '!';
      charArray1[5] = 'Z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 20);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('Z', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'Z', 'Z', '!', 'Z', '!', 'Z'}, charArray1);
      
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 1047);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&-W!hIVU;;{:oxK}Z7", (-1077));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('&', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONReaderScanner0.config(feature0, true);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      long long0 = jSONReaderScanner0.scanLong(' ');
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("&-W!hIVU;;{:oxK}Z7");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('&', jSONReaderScanner1.getCurrent());
      
      int int0 = jSONReaderScanner0.intValue();
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals((-10), int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      Date date0 = jSONReaderScanner0.scanDate('O');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(date0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("l", "l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"l\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hex", 96);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONScanner jSONScanner0 = new JSONScanner("45M_", 96);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('4', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(96, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      
      boolean boolean0 = jSONScanner0.isRef();
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('4', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(96, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('M', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(96, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      
      SymbolTable symbolTable0 = new SymbolTable(96);
      assertNotNull(symbolTable0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&Cy$~");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      charArray0[4] = '|';
      charArray0[5] = '#';
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertNull(date0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'\"', '\"', '\"', '\"', '|', '#'}, charArray0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 2260);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertArrayEquals(new char[] {'\"', '\"', '\"', '\"', '|', '#'}, charArray0);
      
      int int0 = jSONReaderScanner1.scanInt('\"');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertArrayEquals(new char[] {'\"', '\"', '\"', '\"', '|', '#'}, charArray0);
      
      jSONReaderScanner1.scanNumber();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(2, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertArrayEquals(new char[] {'\"', '\"', '\"', '\"', '|', '#'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "8G+`2ph|zH\\uqoUOboR";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8%", 8);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(8, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(string0);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('8', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      assertEquals(1.0, double0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'm';
      charArray0[1] = 'e';
      charArray0[2] = 'm';
      jSONReaderScanner1.sp = 31;
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('8', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      charArray0[3] = 'a';
      charArray0[4] = 'l';
      charArray0[5] = 'e';
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 86, 86);
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(86, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('m', jSONReaderScanner2.getCurrent());
      assertArrayEquals(new char[] {'m', 'e', 'm', 'a', 'l', 'e'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanString();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"qoUO\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("^(#~j<So<E`DE", 76);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(76, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('^', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(76, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('^', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(76, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('^', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(76, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('^', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.nextToken((-3049));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('(', jSONScanner0.getCurrent());
      assertEquals(76, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" ", (-2177));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2177), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 44, 1137);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(1137, jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner1.scanDecimal('w');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(bigDecimal0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(1137, jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = jSONScanner0.isBlankInput();
      assertFalse(boolean1);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean1 == boolean0);
      assertEquals('(', jSONScanner0.getCurrent());
      assertEquals(76, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      
      int int0 = jSONScanner0.matchStat();
      assertEquals(0, int0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('(', jSONScanner0.getCurrent());
      assertEquals(76, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      
      long long0 = jSONReaderScanner0.scanLong('B');
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("_BJ");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('_', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      
      jSONReaderScanner1.nextIdent();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(18, jSONReaderScanner1.token());
      
      JSONScanner jSONScanner0 = new JSONScanner("FVI", 'B');
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(66, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('F', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. F
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = (-1459220597);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set", (-1459220597));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-1459220597), jSONReaderScanner0.getFeatures());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new", (-870));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-870), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      BigInteger bigInteger0 = jSONReaderScanner1.scanFieldBigInteger(charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(bigInteger0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-870), jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("dmYkcu");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*.@z)FMlt}P4bP");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('*', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONScanner jSONScanner0 = new JSONScanner("\u0000qc", 68);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(68, jSONScanner0.getFeatures());
      assertEquals('\u0000', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(1, jSONScanner0.pos());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(68, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONScanner jSONScanner1 = new JSONScanner("*.@z)FMlt}P4bP");
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.isEOF());
      assertEquals('*', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      
      char[] charArray0 = new char[0];
      UUID uUID0 = jSONScanner1.scanFieldUUID(charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(uUID0);
      assertEquals((-1), jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.isEOF());
      assertEquals('*', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONScanner jSONScanner2 = new JSONScanner("\u0000qc", 0);
      assertNotNull(jSONScanner2);
      assertEquals(0, jSONScanner2.matchStat);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner2.token());
      assertEquals('\u0000', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.pos());
      assertFalse(jSONScanner2.isEOF());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.getFeatures());
      
      jSONScanner1.nextToken((-1));
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals((-1), jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(1, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals('.', jSONScanner1.getCurrent());
      
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertFalse(boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set", (-1459220597));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1459220597), jSONReaderScanner0.getFeatures());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertNull(bigInteger0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1459220597), jSONReaderScanner0.getFeatures());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1459220597), jSONReaderScanner0.getFeatures());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1459220597), jSONReaderScanner0.getFeatures());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1459220597), jSONReaderScanner0.getFeatures());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.isEnabled(0, (-2026));
      assertTrue(boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1459220597), jSONReaderScanner0.getFeatures());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Set", (-1));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals((-1), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('S', jSONReaderScanner1.getCurrent());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = JSONScanner.charArrayCompare("Set", 104, charArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Date date0 = jSONReaderScanner1.scanDate('=');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(date0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('S', jSONReaderScanner1.getCurrent());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(uUID0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1459220597), jSONReaderScanner0.getFeatures());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("toString");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      charArray0[1] = '!';
      charArray0[2] = 'V';
      int int0 = 2382;
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.autoTypeAccept", 2382);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(2382, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('f', jSONScanner0.getCurrent());
      
      jSONScanner0.putChar('!');
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(2382, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('f', jSONScanner0.getCurrent());
      
      jSONScanner0.bp = 2382;
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(2382, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('f', jSONScanner0.getCurrent());
      
      jSONScanner0.putChar('V');
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(2382, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('f', jSONScanner0.getCurrent());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2");
      assertFalse(boolean0);
      
      JSONScanner jSONScanner1 = new JSONScanner("fastjson.parser.autoTypeAccept");
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('f', jSONScanner1.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(2382);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("J!*Iv3_<vY<VTq", 96);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('J', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("U:g\u0005RmI&", 96);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(96, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('U', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("J!*Iv3_<vY<VTq");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('J', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      
      SymbolTable symbolTable0 = new SymbolTable(1289);
      assertNotNull(symbolTable0);
      
      jSONScanner0.nextToken(790);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertEquals('!', jSONScanner0.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : !pos 0, json : J!*Iv3_<vY<VTq
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1p)", (-4758));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-4758), jSONReaderScanner0.getFeatures());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 120, (-994));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals((-994), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6!");
      assertFalse(boolean0);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(date0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-4758), jSONReaderScanner0.getFeatures());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(41);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = new JSONScanner("%MOMjV'", 2382);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('%', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2382, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      char char0 = 'V';
      jSONScanner0.putChar('V');
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('%', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2382, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.putChar('P');
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('%', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2382, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "c");
      assertFalse(boolean0);
      
      JSONScanner jSONScanner1 = new JSONScanner("%MOMjV'");
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals('%', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      
      jSONScanner0.nextToken(11);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('M', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2382, jSONScanner0.getFeatures());
      
      char[] charArray0 = null;
      JSONScanner jSONScanner2 = null;
      try {
        jSONScanner2 = new JSONScanner((char[]) null, 2382);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner("%6)", 2382);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('%', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2382, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      jSONScanner0.putChar('V');
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('%', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2382, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      char char0 = ';';
      jSONScanner0.putChar(';');
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('%', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2382, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      JSONScanner jSONScanner1 = new JSONScanner("2");
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('2', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      
      JSONScanner jSONScanner2 = new JSONScanner("/~;kPf4',", 2382);
      assertNotNull(jSONScanner2);
      assertEquals(0, jSONScanner2.matchStat);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.pos());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals('/', jSONScanner2.getCurrent());
      assertEquals(2382, jSONScanner2.getFeatures());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat());
      
      int int0 = 85;
      // Undeclared exception!
      try { 
        jSONScanner2.nextToken(85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\u0000qc", (-1134521796));
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1134521796), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('\u0000', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(1, jSONScanner0.token());
      assertEquals(1, jSONScanner0.pos());
      assertEquals((-1134521796), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('c', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0000qc", 0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      SymbolTable symbolTable0 = new SymbolTable(55);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      assertNotNull(string0);
      assertEquals("c", string0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(18, jSONScanner0.token());
      assertEquals(1, jSONScanner0.pos());
      assertEquals((-1134521796), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(1, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner1 = new JSONScanner("\u0000qc", 55);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertEquals('\u0000', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(55, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      
      int int0 = Calendar.NARROW_FORMAT;
      assertEquals(4, int0);
      
      jSONScanner0.nextToken(4);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1134521796), jSONScanner0.getFeatures());
      assertEquals(20, jSONScanner0.token());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      float float0 = jSONScanner0.scanFloat('G');
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1134521796), jSONScanner0.getFeatures());
      assertEquals(20, jSONScanner0.token());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - c, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Yjak]9-V**tQ't;5r");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Yjak]9-V**tQ't;5r");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('Y', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      char[] charArray0 = new char[0];
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertNull(floatArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('Y', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(']', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.nextToken();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertEquals(4, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(15, jSONReaderScanner0.token());
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '}';
      charArray1[1] = '}';
      charArray1[2] = '}';
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(boolean1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertEquals(4, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(15, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'}', '}', '}'}, charArray1);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray1, 90);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('}', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertArrayEquals(new char[] {'}', '}', '}'}, charArray1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6#+!Rd\"vZaY.qF");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("S}C~]p7");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[0];
      UUID uUID0 = jSONScanner0.scanFieldUUID(charArray0);
      assertNull(uUID0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('2');
      assertNull(bigDecimal0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      jSONScanner0.nextToken((-1));
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('#', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("undefined", 528);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(528, jSONReaderScanner1.getFeatures());
      assertEquals('u', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      
      jSONScanner0.skipWhitespace();
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('#', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      
      int int0 = Calendar.DAY_OF_WEEK;
      assertEquals(7, int0);
      
      JSONScanner jSONScanner1 = new JSONScanner("S}C~]p7", (-59));
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals('S', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals((-59), jSONScanner1.getFeatures());
      
      jSONScanner1.scanNumber();
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals('}', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(2, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals((-59), jSONScanner1.getFeatures());
      
      int int1 = jSONScanner0.indexOf('|', 0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals((-1), int1);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(int1 == int0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('#', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      
      int int2 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, int2);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("toString");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("toString", 0);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      int int0 = jSONReaderScanner0.scanType("S}C~]p7");
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals((-2), int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArrayReader0, 0);
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertTrue(jSONReaderScanner2.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean2 = jSONReaderScanner2.isBlankInput();
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertFalse(boolean2);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertTrue(jSONReaderScanner2.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      String string0 = jSONReaderScanner2.tokenName();
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotNull(string0);
      assertEquals("Unknown", string0);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertTrue(jSONReaderScanner2.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner2.scanIdent();
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(18, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertTrue(jSONReaderScanner2.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner2.nextToken();
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(20, jSONReaderScanner2.token());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertTrue(jSONReaderScanner2.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean3 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertFalse(boolean3);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.arrayCopy(0, charArray0, 0, (-1439242468));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6#+!Rd\"vZaY.qF");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("S}C~]p7");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      
      char[] charArray0 = new char[0];
      UUID uUID0 = jSONScanner0.scanFieldUUID(charArray0);
      assertNull(uUID0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('2');
      assertNull(bigDecimal0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      
      JSONScanner jSONScanner1 = new JSONScanner("S}C~]p7");
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.token());
      assertEquals('S', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("18j", 37);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(37, jSONReaderScanner0.getFeatures());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("18j");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('1', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("18j", 0);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('1', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      float float0 = jSONScanner0.scanFloat('\'');
      assertEquals(18.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('1', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      long long0 = jSONScanner0.scanLong('k');
      assertEquals(18L, long0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('1', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("45M");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      char char0 = '9';
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      jSONReaderScanner0.locale = locale0;
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", jSONReaderScanner0.locale.getLanguage());
      assertEquals("", jSONReaderScanner0.locale.getVariant());
      assertEquals("", jSONReaderScanner0.locale.getCountry());
      assertEquals("ko", jSONReaderScanner0.locale.toString());
      assertEquals("kor", jSONReaderScanner0.locale.getISO3Language());
      assertEquals("", jSONReaderScanner0.locale.getISO3Country());
      
      int int0 = jSONReaderScanner0.scanInt('9');
      assertEquals(45, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('9');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 9 - 4, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1p)", 49);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("1p)");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('1', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      
      char[] charArray0 = new char[0];
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("null", (-1));
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      
      float float0 = jSONScanner0.scanFloat('\'');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      String[] stringArray0 = jSONScanner0.scanFieldStringArray(charArray1, 49, (SymbolTable) null);
      assertNotSame(charArray1, charArray0);
      assertNull(stringArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      
      JSONScanner jSONScanner1 = new JSONScanner("bGNq/u", 65279);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(65279, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('b', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      
      jSONScanner1.scanNumber();
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(65279, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(2, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('b', jSONScanner1.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanDecimal('L');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6#+!Rd\"vZaY.qF");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('6', jSONScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6#+!Rd\"vZaY.qF");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner1 = new JSONScanner("P2", 120);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('P', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(120, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("45M_");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('4', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      
      long long0 = jSONReaderScanner1.scanLong('m');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(45L, long0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('4', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      double double0 = jSONReaderScanner1.scanDouble('x');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(45.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('4', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = 'x';
      charArray0[2] = 'e';
      charArray0[3] = 'm';
      charArray0[4] = 'e';
      charArray0[5] = 'x';
      charArray0[6] = 'm';
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 120, 112);
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(112, jSONReaderScanner2.getFeatures());
      assertEquals('m', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertArrayEquals(new char[] {'m', 'x', 'e', 'm', 'e', 'x', 'm'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("6#+!Rd\"vZaY.qF");
      assertNotNull(jSONReaderScanner3);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals(0, jSONReaderScanner3.token());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals('6', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertFalse(jSONReaderScanner3.isEOF());
      
      jSONReaderScanner3.scanString();
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner3.pos());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(4, jSONReaderScanner3.token());
      assertEquals('v', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertFalse(jSONReaderScanner3.isEOF());
      
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(sequenceInputStream0);
      assertNotNull(inputStreamReader0);
      
      JSONReaderScanner jSONReaderScanner4 = new JSONReaderScanner(inputStreamReader0);
      assertNotNull(jSONReaderScanner4);
      assertEquals(0, jSONReaderScanner4.matchStat);
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner3));
      assertTrue(jSONReaderScanner4.isEOF());
      assertEquals(0, jSONReaderScanner4.pos());
      assertNull(jSONReaderScanner4.stringDefaultValue());
      assertEquals(0, jSONReaderScanner4.matchStat());
      assertEquals(989, jSONReaderScanner4.getFeatures());
      assertEquals('\u0000', jSONReaderScanner4.getCurrent());
      assertEquals(0, jSONReaderScanner4.token());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8>:]aV)|\"NPbOWH8A4v");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      char[] charArray0 = new char[0];
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertNull(floatArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("$", (-2));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-2), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals('$', jSONReaderScanner1.getCurrent());
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      double double1 = jSONReaderScanner1.scanDouble('@');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0.0, double1, 0.01);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(double1, double0, 0.01);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-2), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals('$', jSONReaderScanner1.getCurrent());
      
      jSONReaderScanner0.scanString();
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(4, jSONReaderScanner0.token());
      assertEquals('N', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("$", '@');
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('$', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(64, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('$', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(64, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      
      float[] floatArray1 = jSONScanner0.scanFieldFloatArray(charArray0);
      assertNull(floatArray1);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('$', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(64, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('?', '@', 'N');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6#+!Rd\"vZaY.qF");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner1 = new JSONScanner("6#+!Rd\"vZaY.qF", 0);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('6', jSONScanner1.getCurrent());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = Calendar.APRIL;
      assertEquals(3, int0);
      
      jSONScanner1.nextToken(3);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals(2, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('#', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("EOF error", 3756);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(3756, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('E', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      int int1 = Calendar.SHORT;
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      SymbolTable symbolTable0 = new SymbolTable(21);
      assertNotNull(symbolTable0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan new error");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('s', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      char[] charArray0 = new char[9];
      SymbolTable symbolTable0 = new SymbolTable(20);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertNotNull(string0);
      assertEquals("scan", string0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertEquals(' ', jSONScanner0.getCurrent());
      
      charArray0[2] = '`';
      jSONScanner0.nextToken(20);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(9, jSONScanner0.token());
      assertEquals(5, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan new error", (-3886));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-3886), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(5, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      
      char char0 = jSONScanner0.charAt(12);
      assertEquals('o', char0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(5, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.4\n6");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONScanner jSONScanner0 = new JSONScanner("N5", 17);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(17, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('N', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 76);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 17, 76);
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(76, jSONReaderScanner2.getFeatures());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      long long0 = jSONReaderScanner2.scanFieldSymbol(charArray0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(76, jSONReaderScanner2.getFeatures());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = jSONReaderScanner1.scanInt('M');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      float float0 = jSONReaderScanner0.scanFloat('M');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertEquals(1.2F, float0, 0.01F);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertFalse(boolean0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(17, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('N', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6#+!Rd\"vZaY.qF");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('6', jSONScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6#+!Rd\"vZaY.qF");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner1 = new JSONScanner("P2", 120);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.isEOF());
      assertEquals('P', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(120, jSONScanner1.getFeatures());
      
      boolean boolean1 = jSONScanner1.isRef();
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(boolean1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(boolean1 == boolean0);
      assertFalse(jSONScanner1.isEOF());
      assertEquals('P', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(120, jSONScanner1.getFeatures());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("45M_", 120);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('4', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(120, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("45M_");
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('4', jSONReaderScanner2.getCurrent());
      
      jSONReaderScanner2.scanIdent();
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals('_', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(18, jSONReaderScanner2.token());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("TreeSet");
      assertNotNull(jSONReaderScanner3);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner3.pos());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals('T', jSONReaderScanner3.getCurrent());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertFalse(jSONReaderScanner3.isEOF());
      
      int int0 = jSONReaderScanner0.scanInt('1');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner3);
      assertEquals(6, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner3));
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      Feature feature0 = Feature.DisableASM;
      jSONReaderScanner2.config(feature0, false);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals('_', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(18, jSONReaderScanner2.token());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      
      String string0 = jSONReaderScanner1.stringVal();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('4', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(120, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(3, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("NonStringKeyAsString");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('N', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('N', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONScanner jSONScanner1 = new JSONScanner("NonStringKeyAsString", 0);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.token());
      assertEquals('N', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      
      char[] charArray0 = new char[15];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      charArray0[5] = 'K';
      charArray0[6] = 'B';
      charArray0[7] = 'B';
      charArray0[8] = 'n';
      float[] floatArray0 = jSONScanner1.scanFieldFloatArray(charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(floatArray0);
      assertEquals((-2), jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.token());
      assertEquals('N', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals((-2), jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1.2\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hex", 96);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("45M_", 96);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(96, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('4', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      
      boolean boolean0 = jSONScanner0.isRef();
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(96, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('4', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('M', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(96, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("hex", 48);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(48, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('h', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = ',';
      charArray0[2] = '1';
      charArray0[3] = ',';
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0, 83);
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(83, jSONReaderScanner2.getFeatures());
      assertArrayEquals(new char[] {'1', ',', '1', ','}, charArray0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "null");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Date date0 = jSONReaderScanner1.scanFieldDate(charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(date0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(48, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals('h', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertArrayEquals(new char[] {'1', ',', '1', ','}, charArray0);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("null");
      assertNotNull(jSONReaderScanner3);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals('n', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.matchStat());
      
      jSONReaderScanner1.scanIdent();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner3);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner3));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(48, jSONReaderScanner1.getFeatures());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(18, jSONReaderScanner1.token());
      
      JSONReaderScanner jSONReaderScanner4 = new JSONReaderScanner("null");
      assertNotNull(jSONReaderScanner4);
      assertEquals(0, jSONReaderScanner4.matchStat);
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner4.isEOF());
      assertEquals(0, jSONReaderScanner4.matchStat());
      assertEquals(989, jSONReaderScanner4.getFeatures());
      assertEquals(0, jSONReaderScanner4.token());
      assertEquals('n', jSONReaderScanner4.getCurrent());
      assertNull(jSONReaderScanner4.stringDefaultValue());
      assertEquals(0, jSONReaderScanner4.pos());
      
      boolean boolean2 = jSONReaderScanner2.scanBoolean('1');
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner4);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertFalse(boolean2);
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner4));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.pos());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(83, jSONReaderScanner2.getFeatures());
      assertArrayEquals(new char[] {'1', ',', '1', ','}, charArray0);
      
      int int0 = jSONReaderScanner3.scanInt(',');
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner4);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner3.matchStat);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner4));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals('n', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals((-1), jSONReaderScanner3.matchStat());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertFalse(jSONReaderScanner3.isEOF());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("1.2.46");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('1', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("1.2.46", 0);
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertEquals('1', jSONReaderScanner2.getCurrent());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      
      char char0 = 'e';
      int int0 = Calendar.APRIL;
      assertEquals(3, int0);
      
      JSONScanner jSONScanner0 = new JSONScanner("1.2.46");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('1', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      
      jSONScanner0.nextToken(31);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(3, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('.', jSONScanner0.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner2.scanDecimal('e');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = (-4758);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1p)", (-4758));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-4758), jSONReaderScanner0.getFeatures());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.alibaba.fastjson.util.UTF8Decoder");
      assertFalse(boolean0);
      
      String string0 = jSONReaderScanner0.scanString('R');
      assertNull(string0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-4758), jSONReaderScanner0.getFeatures());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      
      Calendar calendar0 = jSONReaderScanner0.getCalendar();
      assertNull(calendar0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-4758), jSONReaderScanner0.getFeatures());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("toString");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("S}C~]p7");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('S', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      
      int int0 = jSONReaderScanner0.scanType("S}C~]p7");
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals((-2), int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Feature feature0 = Feature.UseObjectArray;
      jSONReaderScanner1.config(feature0, false);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('S', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      
      jSONReaderScanner1.nextToken();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('}', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      
      long long0 = jSONReaderScanner0.scanLong('\'');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("h_^");
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals('h', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.token());
      
      double double0 = jSONReaderScanner2.scanFieldDouble(charArray0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals('h', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&-W!hIVU;;{:oxK}Z7", (-1077));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('&', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      char[] charArray0 = new char[9];
      charArray0[1] = ' ';
      Date date0 = jSONReaderScanner0.scanDate('#');
      assertNull(date0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('&', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      charArray0[2] = 'c';
      jSONReaderScanner0.nextIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("set");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('s', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) "&-W!hIVU;;{:oxK}Z7";
      objectArray0[2] = (Object) "&-W!hIVU;;{:oxK}Z7";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "&-W!hIVU;;{:oxK}Z7";
      jSONScanner0.lexError("&-W!hIVU;;{:oxK}Z7", objectArray0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('s', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      String string0 = jSONScanner0.scanSymbol((SymbolTable) null);
      assertNotNull(string0);
      assertEquals("set", string0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      float float0 = jSONScanner0.scanFloat('c');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertFalse(boolean0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1077), jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', ' ', 'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6#+!Rd\"vZaY.qF");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6#+!Rd\"vZaY.qF");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("S}C~]p7");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('S', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("Aa_ZfH");
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals('A', jSONReaderScanner2.getCurrent());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      double double0 = jSONReaderScanner2.scanDouble('Y');
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals('A', jSONReaderScanner2.getCurrent());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      
      String string0 = jSONReaderScanner1.stringVal();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('S', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0000';
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 37, 0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      int int0 = 33;
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONScanner0.matchStat = 49;
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(49, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      
      double double0 = jSONReaderScanner1.scanDouble('Y');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      
      String string0 = jSONReaderScanner1.stringVal();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken(16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[[be.h!PTs`C$Ff0");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      
      JSONScanner jSONScanner0 = new JSONScanner("[[be.h!PTs`C$Ff0", 0);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('[', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      
      int int0 = Calendar.NARROW_FORMAT;
      assertEquals(4, int0);
      
      jSONScanner0.nextToken(0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(14, jSONScanner0.token());
      assertEquals('[', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      
      float float0 = jSONScanner0.scanFloat('G');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(14, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('[', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[3] = '\"';
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertFalse(boolean0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'G', 'G', 'G', '\"'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0000';
      String string0 = "2UQ|Pp%zV";
      JSONScanner jSONScanner0 = new JSONScanner("2UQ|Pp%zV");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('2', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      
      UUID uUID0 = jSONScanner0.scanUUID('\u0000');
      assertNull(uUID0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('2', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      
      jSONScanner0.nextIdent();
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(2, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      
      Number number0 = jSONScanner0.integerValue();
      assertNotNull(number0);
      assertEquals(2, number0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(2, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2UQ|Pp%zV", (-1));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('2', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      Date date0 = jSONReaderScanner0.scanDate('m');
      assertNull(date0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('2', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      SymbolTable symbolTable0 = new SymbolTable(752);
      assertNotNull(symbolTable0);
      
      String string1 = jSONScanner0.scanSymbolWithSeperator(symbolTable0, '\u0000');
      assertNull(string1);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(2, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2UQ|Pp%zV");
      assertFalse(boolean0);
      
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan new error");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('s', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      char[] charArray0 = new char[9];
      jSONScanner0.ch = 'k';
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('k', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      SymbolTable symbolTable0 = new SymbolTable(20);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertNotNull(string0);
      assertEquals("scan", string0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      charArray0[1] = '\\';
      charArray0[2] = '`';
      charArray0[3] = '?';
      charArray0[4] = '?';
      charArray0[2] = '^';
      jSONScanner0.matchStat = (int) '3';
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(51, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      Number number0 = jSONScanner0.integerValue();
      assertNotNull(number0);
      assertEquals(72652, number0);
      assertEquals(51, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(51, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '\\', 20);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'\u0000', '\\', '^', '?', '?', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = Calendar.JANUARY;
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : ^
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("NonStringKeyAsString");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('N', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('N', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONScanner jSONScanner1 = new JSONScanner("NonStringKeyAsString", 0);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals('N', jSONScanner1.getCurrent());
      
      char[] charArray0 = new char[15];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 1.2
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = "DisableASM";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("DisableASM", 96);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(96, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('D', jSONReaderScanner0.getCurrent());
      
      JSONScanner jSONScanner0 = new JSONScanner("45M_", 96);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals('4', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(96, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      boolean boolean0 = jSONScanner0.isRef();
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals('4', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(96, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(96, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('M', jSONScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("45M_", 0);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('4', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      
      double double0 = jSONReaderScanner1.scanDouble('<');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(45.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('4', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 20, (-512));
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals((-512), jSONReaderScanner2.getFeatures());
      assertEquals("", jSONReaderScanner2.stringDefaultValue());
      assertEquals('e', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertArrayEquals(new char[] {'e'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(charArray0, 0, (-512));
      assertNotNull(jSONReaderScanner3);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals((-512), jSONReaderScanner3.getFeatures());
      assertEquals('\u0000', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.token());
      assertTrue(jSONReaderScanner3.isEOF());
      assertEquals("", jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.pos());
      assertArrayEquals(new char[] {'e'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner3.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      charArray0[1] = '\\';
      charArray0[2] = 'O';
      charArray0[3] = '|';
      charArray0[4] = 'a';
      charArray0[5] = ',';
      charArray0[6] = 'g';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 554);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('Z', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'Z', '\\', 'O', '|', 'a', ',', 'g'}, charArray0);
      
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 1442);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner(".");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('.', jSONScanner0.getCurrent());
      
      boolean boolean0 = jSONScanner0.isRef();
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('.', jSONScanner0.getCurrent());
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(3, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, (-2112));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-2112), jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-2112), jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char char0 = jSONReaderScanner0.charAt(127);
      assertEquals('\u001A', char0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-2112), jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Feature feature0 = Feature.CustomMapDeserializer;
      jSONReaderScanner0.config(feature0, false);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-4196416), jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SymbolTable symbolTable0 = new SymbolTable(718);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, '\u001A');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6#+!Rd\"vZaY.qF");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6#+!Rd\"vZaY.qF");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner1 = new JSONScanner("P2", 120);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('P', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(120, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      
      boolean boolean1 = jSONScanner1.isRef();
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(boolean1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(boolean1 == boolean0);
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('P', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(120, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      charArray0[1] = 'p';
      charArray0[2] = 'E';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '1';
      charArray0[6] = '1';
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals(0L, long0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'1', 'p', 'E', '1', '1', '1', '1'}, charArray0);
      
      String string0 = jSONReaderScanner0.info();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("true");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      
      jSONReaderScanner1.scanTrue();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(6, jSONReaderScanner1.token());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(bigDecimal0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'1', 'p', 'E', '1', '1', '1', '1'}, charArray0);
      
      int int0 = jSONReaderScanner0.getFeatures();
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(989, int0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      SymbolTable symbolTable0 = new SymbolTable(120);
      assertNotNull(symbolTable0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 989, 175);
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals('1', jSONReaderScanner2.getCurrent());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(175, jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertArrayEquals(new char[] {'1', 'p', 'E', '1', '1', '1', '1'}, charArray0);
      
      String string1 = jSONReaderScanner2.addSymbol(13, 32, (-6275), symbolTable0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotNull(string1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(string1.equals((Object)string0));
      assertEquals('1', jSONReaderScanner2.getCurrent());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(175, jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertArrayEquals(new char[] {'1', 'p', 'E', '1', '1', '1', '1'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("DDa3!tG:%^4Tp_=", 17);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('D', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(17, jSONScanner0.getFeatures());
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('!', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(17, jSONScanner0.getFeatures());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner1 = new JSONScanner("DDa3!tG:%^4Tp_=");
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.token());
      assertEquals('D', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      
      jSONScanner1.close();
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.token());
      assertEquals('D', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      
      JSONScanner jSONScanner2 = new JSONScanner("DDa3!tG:%^4Tp_=");
      assertNotNull(jSONScanner2);
      assertEquals(0, jSONScanner2.matchStat);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.token());
      assertEquals('D', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(989, jSONScanner2.getFeatures());
      
      float[] floatArray0 = jSONScanner2.scanFieldFloatArray(charArray0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNull(floatArray0);
      assertEquals((-2), jSONScanner2.matchStat);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.isEOF());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals((-2), jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.token());
      assertEquals('D', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(989, jSONScanner2.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = jSONScanner1.scanFieldInt(charArray0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, int0);
      assertEquals((-1), jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.token());
      assertEquals('D', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1p)", 49);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("1p)", (-4758));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('1', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-4758), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      
      char[] charArray0 = new char[0];
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(bigInteger0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertTrue(boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("1p)", 0);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('1', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONScanner jSONScanner1 = new JSONScanner("1p)");
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertEquals('1', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('1', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner2 = new JSONScanner(charArray0, 0, (-4758));
      assertNotNull(jSONScanner2);
      assertEquals(0, jSONScanner2.matchStat);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertTrue(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.pos());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals((-4758), jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.token());
      assertNull(jSONScanner2.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner2.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan new error");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals('s', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      char[] charArray0 = new char[9];
      SymbolTable symbolTable0 = new SymbolTable(20);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertNotNull(string0);
      assertEquals("scan", string0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(18, jSONScanner0.token());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      charArray0[1] = '\\';
      charArray0[2] = '`';
      JSONScanner jSONScanner1 = new JSONScanner("scan", 0);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals('s', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      
      boolean boolean0 = jSONScanner0.isRef();
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(18, jSONScanner0.token());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan", 0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("8G");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('8', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0);
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.token());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertTrue(jSONReaderScanner2.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\\', '`', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner2.scanIdent();
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(18, jSONReaderScanner2.token());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertTrue(jSONReaderScanner2.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\\', '`', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("syntax error, position at ");
      assertNotNull(jSONReaderScanner3);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals('s', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.matchStat());
      
      BigDecimal bigDecimal0 = jSONReaderScanner2.scanDecimal('`');
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner3);
      assertNull(bigDecimal0);
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner3));
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(18, jSONReaderScanner2.token());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertTrue(jSONReaderScanner2.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\\', '`', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner3.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = '\\';
      charArray0[4] = ',';
      charArray0[5] = '\\';
      charArray0[6] = 'H';
      charArray0[7] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 554);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('|', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'|', 'a', 'a', '\\', ',', '\\', 'H', '\\'}, charArray0);
      
      int int0 = 92;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1p)", 49);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner0 = new JSONScanner("|J3izENSyEgy.0h;J", (-4758));
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('|', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-4758), jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      int int0 = Calendar.NARROW_FORMAT;
      assertEquals(4, int0);
      
      jSONScanner0.nextToken(19);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('J', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-4758), jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      
      float float0 = jSONScanner0.scanFloat('z');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('J', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-4758), jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = 'a';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 116);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('|', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertArrayEquals(new char[] {'|', 'a'}, charArray0);
      
      char char0 = jSONReaderScanner1.charAt(49);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('\u0000', char0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('|', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertArrayEquals(new char[] {'|', 'a'}, charArray0);
      
      boolean boolean0 = jSONReaderScanner1.scanFieldBoolean(charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(boolean0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('|', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertArrayEquals(new char[] {'|', 'a'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.^.46");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(3, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('^', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONScanner jSONScanner0 = new JSONScanner(";>");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(';', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      charArray0[4] = ',';
      charArray0[5] = '\\';
      charArray0[7] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 554);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('|', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'|', '\\', '\\', '\\', ',', '\\', '\u0000', '\\'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 0);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertArrayEquals(new char[] {'|', '\\', '\\', '\\', ',', '\\', '\u0000', '\\'}, charArray0);
      
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('|', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'|', '\\', '\\', '\\', ',', '\\', '\u0000', '\\'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : ,
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")QVc");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner(")QVc");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(')', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('Q', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(11, jSONScanner0.token());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("scan false error");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('s', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      
      char[] charArray0 = new char[0];
      UUID uUID0 = jSONScanner0.scanFieldUUID(charArray0);
      assertNull(uUID0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('Q', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(11, jSONScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner1.scanDecimal('2');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(bigDecimal0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('s', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('Q', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(11, jSONScanner0.token());
      
      JSONScanner jSONScanner1 = new JSONScanner("=f", 14);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('=', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(14, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      
      Feature feature0 = Feature.SortFeidFastMatch;
      JSONScanner jSONScanner2 = new JSONScanner("scan false error", 14);
      assertNotNull(jSONScanner2);
      assertEquals(0, jSONScanner2.matchStat);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner2.pos());
      assertEquals(14, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.token());
      assertNull(jSONScanner2.stringDefaultValue());
      assertFalse(jSONScanner2.isEOF());
      assertEquals('s', jSONScanner2.getCurrent());
      
      jSONScanner2.config(feature0, true);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertEquals(0, jSONScanner2.matchStat);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner2.pos());
      assertEquals(526, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.token());
      assertNull(jSONScanner2.stringDefaultValue());
      assertFalse(jSONScanner2.isEOF());
      assertEquals('s', jSONScanner2.getCurrent());
      
      JSONScanner jSONScanner3 = new JSONScanner("=f");
      assertNotNull(jSONScanner3);
      assertEquals(0, jSONScanner3.matchStat);
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      assertNull(jSONScanner3.stringDefaultValue());
      assertEquals('=', jSONScanner3.getCurrent());
      assertEquals(0, jSONScanner3.token());
      assertEquals(989, jSONScanner3.getFeatures());
      assertFalse(jSONScanner3.isEOF());
      assertEquals(0, jSONScanner3.pos());
      assertEquals(0, jSONScanner3.matchStat());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 1654);
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.4\n6");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner0 = new JSONScanner("error parse null or new", 17);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals('e', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(17, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(17, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("error parse null or new");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('e', jSONReaderScanner1.getCurrent());
      
      char char0 = '#';
      BigDecimal bigDecimal0 = jSONReaderScanner1.scanDecimal('#');
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(bigDecimal0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('e', jSONReaderScanner1.getCurrent());
      
      long long0 = jSONScanner0.longValue();
      assertEquals(603296L, long0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(17, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONScanner jSONScanner1 = new JSONScanner("1.2.4\n6", 2601);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals('1', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(2601, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      
      Feature feature0 = Feature.NonStringKeyAsString;
      jSONScanner0.config(feature0, false);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(17, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      float float0 = jSONReaderScanner0.scanFloat('O');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(1.2F, float0, 0.01F);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONScanner1.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = '|';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[4] = ',';
      charArray0[5] = '\\';
      charArray0[7] = ',';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 574);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'\u0000', '\\', '\\', '\u0000', ',', '\\', '\u0000', ','}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 0);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\\', '\\', '\u0000', ',', '\\', '\u0000', ','}, charArray0);
      
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'\u0000', '\\', '\\', '\u0000', ',', '\\', '\u0000', ','}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      
      String string0 = jSONScanner0.scanSymbol((SymbolTable) null);
      assertNull(string0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      
      float float0 = jSONScanner0.scanFloat('`');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      float float1 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(float1, float0, 0.01F);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertArrayEquals(new char[] {'P'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false", 79);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(79, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      float float2 = jSONReaderScanner0.scanFloat('\'');
      assertEquals(0.0F, float2, 0.01F);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(79, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONScanner0.scanString();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, jSONReaderScanner0.matchStat, jSONScanner0.matchStat);
      jSONReaderScanner1.scanFieldDate(charArray0);
      jSONReaderScanner1.bytesValue();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("^(#~j<So<E`DE");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('^', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      jSONScanner0.np = 651;
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('^', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('^', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      Number number0 = jSONScanner0.integerValue();
      assertNotNull(number0);
      assertEquals(0, number0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('^', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      int int0 = 9999;
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-2105), 9999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = '\\';
      charArray0[4] = ',';
      charArray0[5] = '\\';
      charArray0[7] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 554);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('|', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'|', 'a', 'a', '\\', ',', '\\', '\u0000', '\\'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 0);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertArrayEquals(new char[] {'|', 'a', 'a', '\\', ',', '\\', '\u0000', '\\'}, charArray0);
      
      jSONReaderScanner1.skipWhitespace();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertArrayEquals(new char[] {'|', 'a', 'a', '\\', ',', '\\', '\u0000', '\\'}, charArray0);
      
      jSONReaderScanner1.nextToken(2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(20, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertArrayEquals(new char[] {'|', 'a', 'a', '\\', ',', '\\', '\u0000', '\\'}, charArray0);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(9974);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = new JSONScanner("UmQ[yM:xLO", 1);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.getFeatures());
      
      jSONScanner0.scanIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('[', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.getFeatures());
      
      Number number0 = jSONScanner0.integerValue();
      assertNotNull(number0);
      assertEquals(4343, number0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('[', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.getFeatures());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'J';
      charArray0[1] = '\\';
      charArray0[2] = '3';
      charArray0[3] = '\\';
      charArray0[4] = '3';
      charArray0[5] = '\\';
      charArray0[6] = 'J';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9974, 1);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('J', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'J', '\\', '3', '\\', '3', '\\', 'J'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : J
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("|0AKY$Jmq!$KD'J#U", 57);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('|', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(57, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      
      String string0 = jSONScanner0.info();
      assertNotNull(string0);
      assertEquals("pos 0, json : |0AKY$Jmq!$KD'J#U", string0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('|', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(57, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      
      UUID uUID0 = jSONScanner0.scanFieldUUID(charArray0);
      assertNull(uUID0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('|', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(57, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('|', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(57, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("mq.]9rVSYjiQH|t\"x", 57);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(57, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('m', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      String string1 = jSONReaderScanner0.stringVal();
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(57, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('m', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      long long1 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals(0L, long1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(long1 == long0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(57, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('m', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = jSONReaderScanner0.scanInt('v');
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(57, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('m', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("mq.]9rVSYjiQH|t\"x");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('m', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      
      char char0 = jSONReaderScanner1.charAt(95);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('\u0000', char0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('m', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      
      jSONReaderScanner0.nextToken(17);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(57, jSONReaderScanner0.getFeatures());
      assertEquals('q', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan new error");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('s', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      char[] charArray0 = new char[9];
      SymbolTable symbolTable0 = new SymbolTable(20);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertNotNull(string0);
      assertEquals("scan", string0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      charArray0[1] = '\\';
      String string1 = jSONScanner0.scanSymbol((SymbolTable) null);
      assertNotNull(string1);
      assertEquals("new", string1);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(string1.equals((Object)string0));
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      float[] floatArray0 = jSONScanner0.scanFieldFloatArray(charArray0);
      assertNull(floatArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner1 = new JSONScanner("new", 20);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(20, jSONScanner1.getFeatures());
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      
      int int0 = jSONScanner0.scanFieldInt(charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, int0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, pos 8, json : scan new error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.4\n6");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("N5", 17);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('N', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(17, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(17, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("N5");
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('N', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      
      char[] charArray0 = new char[10];
      charArray0[0] = '2';
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0, 17);
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(17, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.token());
      assertArrayEquals(new char[] {'2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      double double0 = jSONReaderScanner2.scanDouble('*');
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(17, jSONReaderScanner2.getFeatures());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.token());
      assertArrayEquals(new char[] {'2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(charArray0, 125);
      assertNotNull(jSONReaderScanner3);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals('2', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.pos());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertArrayEquals(new char[] {'2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jSONReaderScanner3.stringVal();
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals('2', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.pos());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertArrayEquals(new char[] {'2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      long long0 = jSONReaderScanner1.scanFieldSymbol(charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0L, long0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('N', jSONReaderScanner1.getCurrent());
      assertArrayEquals(new char[] {'2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = jSONReaderScanner0.scanInt('W');
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner3);
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner3));
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner4 = new JSONReaderScanner("scan false error");
      assertNotNull(jSONReaderScanner4);
      assertEquals(0, jSONReaderScanner4.matchStat);
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner1));
      assertEquals(989, jSONReaderScanner4.getFeatures());
      assertFalse(jSONReaderScanner4.isEOF());
      assertEquals(0, jSONReaderScanner4.matchStat());
      assertEquals(0, jSONReaderScanner4.pos());
      assertEquals(0, jSONReaderScanner4.token());
      assertEquals('s', jSONReaderScanner4.getCurrent());
      assertNull(jSONReaderScanner4.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner4.charAt((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = "1.2.46";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(3, jSONReaderScanner0.token());
      
      Class<InputStream> class0 = InputStream.class;
      SymbolTable symbolTable0 = new SymbolTable(83);
      assertNotNull(symbolTable0);
      
      Enum<?> enum0 = jSONReaderScanner0.scanEnum(class0, symbolTable0, ']');
      assertNull(enum0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(3, jSONReaderScanner0.token());
      
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-1), 37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0000';
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      int int0 = 37;
      JSONScanner jSONScanner1 = new JSONScanner("null", 37);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals(37, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(4155);
      assertNotNull(symbolTable0);
      
      Enum<?> enum0 = jSONScanner1.scanEnum(class0, symbolTable0, 'A');
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(enum0);
      assertEquals((-1), jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals(37, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      
      BigDecimal bigDecimal0 = jSONScanner1.scanDecimal('\u0000');
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(bigDecimal0);
      assertEquals((-1), jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals(37, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      
      UUID uUID0 = jSONScanner1.scanFieldUUID(charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(uUID0);
      assertEquals((-2), jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals(37, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#Lm>q~)");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('#', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      BigDecimal bigDecimal1 = jSONReaderScanner0.scanDecimal('\u0000');
      assertNull(bigDecimal1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('#', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          char[] charArray0 = new char[5];
          charArray0[0] = '\u0000';
          JSONScanner jSONScanner0 = new JSONScanner("null");
          jSONScanner0.nextToken(0);
          JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#Lm>q~)", (-2962));
          jSONReaderScanner0.scanIdent();
          jSONReaderScanner0.intValue();
          jSONReaderScanner0.scanDate('A');
          StringReader stringReader0 = new StringReader("N5");
          JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("N5", 8);
          jSONReaderScanner1.scanFieldUUID(charArray0);
          jSONScanner0.scanFieldFloatArray(charArray0);
          jSONReaderScanner0.integerValue();
          jSONReaderScanner0.scanBoolean('A');
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner("nuXQ");
      JSONScanner jSONScanner1 = new JSONScanner("error parse false");
      jSONScanner0.scanFloat('}');
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONScanner.checkDate('\u0000', 'V', '}', 'o', '}', 'A', 12, 2124);
      SymbolTable symbolTable0 = new SymbolTable(652);
      jSONScanner1.scanFieldStringArray(charArray0, 2124, symbolTable0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(";>", 560);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : ;
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int int0 = 554;
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = '\\';
      charArray0[4] = 'a';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2592);
      int int1 = 92;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&-W!hIVU;;{:oxK}Z7", (-1077));
      char[] charArray0 = new char[9];
      JSONScanner jSONScanner0 = new JSONScanner("&-W!hIVU;;{:oxK}Z7");
      jSONScanner0.charArrayCompare(charArray0);
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.pos();
      jSONScanner0.scanInt('|');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cF");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JSONScanner jSONScanner1 = new JSONScanner("pBg", 860);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      jSONScanner0.nextToken(9);
      SymbolTable symbolTable0 = new SymbolTable(3462);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, '6');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = "undefined";
      int int0 = 45;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", 45);
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // undefined
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = ']';
      charArray0[2] = ']';
      charArray0[3] = '\\';
      charArray0[4] = ']';
      charArray0[5] = '\\';
      charArray0[6] = 'H';
      charArray0[7] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 554);
      int int0 = 92;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*");
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'a';
      charArray0[4] = ',';
      charArray0[5] = 'o';
      charArray0[6] = 'a';
      charArray0[7] = '\\';
      charArray0[8] = 'g';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 1047);
      jSONReaderScanner0.lexError("TreeSet", (Object[]) null);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 1183);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = '\\';
      charArray0[4] = '7';
      charArray0[5] = '\\';
      charArray0[6] = 'H';
      charArray0[7] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 554);
      int int0 = 92;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0000';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-1491));
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("");
      JSONScanner jSONScanner0 = new JSONScanner("", (-473));
      jSONReaderScanner0.scanType("'*-3!ar>*@XL~$-H45/");
      jSONScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("-$Fu~(bM)t1cE", 19);
      jSONReaderScanner0.scanInt('+');
      int int0 = Calendar.NARROW_FORMAT;
      jSONReaderScanner2.scanDecimal('+');
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(" - ", 0);
      jSONReaderScanner3.intValue();
      jSONReaderScanner3.subString(46, 74);
      jSONScanner0.isEOF();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!05v;)*l8?$\"YP*C66=", 70);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanDate('&');
      StringReader stringReader0 = new StringReader("!05v;)*l8?$\"YP*C66=");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("fastjson.serializerFeatures.MapSortField");
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[1] = '&';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("!05v;)*l8?$\"YP*C66=", 50900);
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.integerValue();
      jSONReaderScanner1.scanBoolean('C');
      jSONReaderScanner1.isRef();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int int0 = 554;
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = '\\';
      charArray0[4] = '7';
      charArray0[5] = '\\';
      charArray0[6] = 'H';
      charArray0[7] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 554);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : H
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner0 = new JSONScanner("not", 2149);
      char char0 = 'c';
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldUUID(charArray0);
      char char1 = 'Z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WA_9twzgj+wLse9b`m", 2149);
      BigDecimal bigDecimal0 = new BigDecimal((int) 'Z');
      jSONScanner0.longValue();
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6#+!Rd\"vZaY.qF");
      JSONScanner jSONScanner1 = new JSONScanner("6#+!Rd\"vZaY.qF", 0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("mS?6@={Txg8[");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("oeA<-pWQ");
      jSONScanner1.scanDecimal('F');
      jSONReaderScanner1.scanDouble('F');
      JSONScanner jSONScanner2 = new JSONScanner("zn)F1'xI9[(`&x");
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("!XgP#0n(|0P?W9P:?BT", 0);
      jSONReaderScanner0.scanInt('F');
      jSONScanner0.token();
      jSONReaderScanner2.scanDecimal('q');
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("6#+!Rd\"vZaY.qF", 0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6#+!Rd\"vZaY.qF");
      JSONScanner jSONScanner1 = new JSONScanner("6#+!Rd\"vZaY.qF", 0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("mS?6@={Txg8[");
      JSONScanner jSONScanner2 = new JSONScanner("6#+!Rd\"vZaY.qF");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mS?6@={Txg8[");
      jSONReaderScanner0.scanString('R');
      Locale locale0 = Locale.ENGLISH;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("mS?6@={Txg8[", 2456);
      jSONReaderScanner0.nextIdent();
      JSONScanner jSONScanner3 = new JSONScanner("oeA<-pWQ", 0);
      int int0 = Calendar.NARROW_FORMAT;
      jSONScanner3.nextToken(8);
      jSONScanner0.scanFloat('5');
      char[] charArray0 = new char[5];
      charArray0[0] = '5';
      charArray0[1] = 'R';
      charArray0[2] = '2';
      charArray0[3] = '2';
      charArray0[4] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(lineNumberReader0, 2132);
      jSONReaderScanner2.scanFieldBoolean(charArray0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("y[Esmca7 ]");
      jSONReaderScanner0.skipWhitespace();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.alibaba.fastjson.util.UTF8Decoder");
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.getCalendar();
      JSONScanner jSONScanner0 = new JSONScanner("y[Esmca7 ]");
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanBoolean('}');
      jSONScanner0.nextToken((-1));
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("]fZbN!-AZ2Ox8.s", (-1));
      SymbolTable symbolTable0 = new SymbolTable(463);
      jSONScanner0.scanFieldStringArray(charArray0, (-1), symbolTable0);
      jSONScanner0.matchField(charArray0);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      jSONScanner0.scanEnum(class0, symbolTable0, '}');
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0000';
      JSONScanner jSONScanner0 = new JSONScanner("null", 43);
      jSONScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanDecimal('\u0000');
      jSONScanner0.longValue();
      JSONScanner jSONScanner1 = new JSONScanner("null", 847);
      Feature feature0 = Feature.SupportArrayToBean;
      jSONScanner0.config(feature0, false);
      jSONReaderScanner0.scanDecimal('&');
      jSONReaderScanner0.indexOf(' ', 8192);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6#+!Rd\"vZaY.qF");
      JSONScanner jSONScanner1 = new JSONScanner("6#+!Rd\"vZaY.qF", 0);
      String string0 = "8G+`2ph|zH\\ugoUOboR";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("mS?6@={Txg8[");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, string0);
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '2';
      charArray0[4] = '2';
      charArray0[5] = '2';
      charArray0[6] = '2';
      charArray0[7] = '2';
      charArray0[8] = '2';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.getCalendar();
      JSONScanner jSONScanner2 = new JSONScanner("SmZ");
      jSONScanner2.scanFieldFloat(charArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONScanner1.nextToken(471);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("SmZ", (-2));
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanDecimal('2');
      jSONScanner1.floatValue();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false", 3562);
      jSONScanner0.nextIdent();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Calendar.APRIL;
      jSONScanner0.nextToken(3562);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false", 106);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("", (-317));
      jSONReaderScanner1.scanDecimal('o');
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      jSONScanner0.scanFieldInt(charArray0);
      jSONReaderScanner1.scanUUID('S');
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("uP-i2%Wh!", 645);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.intValue();
      JSONScanner jSONScanner0 = new JSONScanner("rj");
      SymbolTable symbolTable0 = new SymbolTable(92);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      Locale locale0 = Locale.ENGLISH;
      jSONReaderScanner0.nextIdent();
      JSONScanner jSONScanner1 = new JSONScanner("^Mccb\"#3@e83JJ^I T", 1876);
      int int0 = Calendar.NARROW_FORMAT;
      jSONScanner0.nextToken(21);
      jSONReaderScanner0.setToken((-5043));
      jSONScanner0.scanFloat('a');
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner2 = new JSONScanner("uP-i2%Wh!");
      jSONScanner2.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanDecimal('s');
      jSONScanner1.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("H+)E7ASK4D.K$*W/T0s", 660);
      JSONScanner jSONScanner1 = new JSONScanner("1.2.46", 4096);
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = '~';
      jSONScanner1.matchField(charArray0);
      JSONScanner jSONScanner2 = new JSONScanner("!", 0);
      jSONScanner2.nextIdent();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("UmQ", 0);
      JSONScanner jSONScanner3 = new JSONScanner("InitStringFieldAsEmpty");
      jSONScanner2.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanDecimal('~');
      jSONScanner2.longValue();
      MockFile mockFile0 = new MockFile("InitStringFieldAsEmpty", "");
      MockFile mockFile1 = new MockFile(mockFile0, "H+)E7ASK4D.K$*W/T0s");
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader(mockFile1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.4\n6");
      JSONScanner jSONScanner0 = new JSONScanner("N5", 17);
      jSONScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Z06[");
      jSONScanner0.scanDecimal('F');
      jSONReaderScanner0.scanDouble('F');
      JSONScanner jSONScanner1 = new JSONScanner("oeA<-pWQ");
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("N5", (-1028));
      jSONReaderScanner1.scanInt('~');
      jSONScanner0.token();
      jSONReaderScanner2.indexOf('D', 0);
      jSONReaderScanner1.scanDecimal('A');
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("TIAF{uZ", 1482);
      // Undeclared exception!
      try { 
        jSONReaderScanner2.sub_chars(63, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanSymbol((SymbolTable) null);
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(lineNumberReader0, 2631);
      jSONReaderScanner0.intValue();
      StringReader stringReader0 = new StringReader("TODO");
      jSONScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.getCurrent();
      jSONScanner0.isEOF();
      jSONReaderScanner0.nextTokenWithChar('`');
  }
}
