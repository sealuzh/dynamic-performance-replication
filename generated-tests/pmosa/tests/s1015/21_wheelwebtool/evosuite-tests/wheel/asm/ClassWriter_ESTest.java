/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 05:59:27 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Item;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, (-611));
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.DirectoryFileFilter", "org.apache.commons.io.filefilter.DirectoryFileFilter");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(14, (-611));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 833;
      ClassWriter classWriter0 = new ClassWriter(833);
      String string0 = "";
      classWriter0.newInteger(833);
      classWriter0.newFieldItem("", "", "");
      // Undeclared exception!
      try { 
        classWriter0.newClassItem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(875);
      classWriter0.toByteArray();
      int int0 = classWriter0.newNameType("", "");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Type type0 = Type.getType("4i;'w16}>ax}q);");
      classWriter0.newConstItem(type0);
      String string0 = classWriter0.thisName;
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4078);
      classWriter0.newInteger(46);
      // Undeclared exception!
      try { 
        classWriter0.newFieldItem(",MuuF-jdf", ",MuuF-jdf", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2770));
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(20, "? p$3JS_}", "", "Signature", stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Item item0 = classWriter0.newDouble(0.0);
      Item item1 = classWriter0.newInteger(0);
      classWriter0.addUninitializedType("", 0);
      Item[] itemArray0 = new Item[8];
      itemArray0[0] = item0;
      itemArray0[1] = item0;
      itemArray0[2] = item0;
      itemArray0[3] = item0;
      itemArray0[4] = item1;
      itemArray0[5] = item1;
      itemArray0[6] = item1;
      itemArray0[7] = item1;
      classWriter0.typeTable = itemArray0;
      classWriter0.version = 0;
      // Undeclared exception!
      try { 
        classWriter0.newMethod((String) null, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 267;
      ClassWriter classWriter0 = new ClassWriter(267);
      classWriter0.newDouble((-36.278147));
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("H&*WBqGlXLlXNBg", "H&*WBqGlXLlXNBg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'H&*WBqGlXLlXNBg.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-277));
      classWriter0.newDouble((-277));
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem("char", (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.addUninitializedType("dn7loDL~", 0);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("dn7loDL~", "dn7loDL~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'dn7loDL~.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777227);
      classWriter0.newMethodItem("3g9jT", "3g9jT", "3g9jT", true);
      classWriter0.visitInnerClass("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", 0);
      classWriter0.addType("The prefix must not be null");
      int int0 = classWriter0.addType("The prefix must not be null");
      assertEquals(1, int0);
      
      Item item0 = classWriter0.newMethodItem("", "The prefix must not be null", "", true);
      classWriter0.visitSource("The prefix must not be null", "RuntimeInvisibleAnnotations");
      Item item1 = classWriter0.newClassItem("");
      assertNotSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2394));
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, (-3140));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(101);
      Item item0 = classWriter0.newMethodItem("", "", "", false);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      String[] stringArray0 = new String[0];
      classWriter0.visit(8, 1890, "", (String) null, (String) null, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      classWriter0.visit(0, 0, "", "'KWzh1h'xR/u\"*", "", stringArray0);
      classWriter0.visitSource("", "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        classWriter0.visit(8, 1890, "", (String) null, (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(191);
      String string0 = "-1@yW3w]wX=m#";
      classWriter0.visitSource("-1@yW3w]wX=m#", "-1@yW3w]wX=m#");
      classWriter0.newNameType("ajA}eS3AK[@7Hi", "-1@yW3w]wX=m#");
      Item item0 = classWriter0.newDouble(974.0767901144903);
      item0.set((-1.0F));
      String string1 = "0VVD:@Q2";
      item0.set(251658240, "", "0VVD:@Q2", "%;\"Ae')=<Ku");
      item0.set(1933.0F);
      classWriter0.newInteger(191);
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.Item@a
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(91);
      classWriter0.version = 91;
      classWriter0.newField(")AZr!x0b", ")AZr!x0b", "|'vzTp2LB?");
      classWriter0.newMethodItem("|'vzTp2LB?", "", "EnclosingMethod", false);
      classWriter0.addUninitializedType("", 91);
      Item item0 = classWriter0.newFloat(5);
      classWriter0.newConst("");
      Item[] itemArray0 = new Item[9];
      itemArray0[0] = item0;
      ClassWriter classWriter1 = new ClassWriter((-312));
      FieldWriter fieldWriter0 = classWriter1.lastField;
      classWriter0.firstField = null;
      itemArray0[1] = item0;
      itemArray0[2] = item0;
      itemArray0[3] = item0;
      itemArray0[4] = item0;
      Item item1 = new Item(5);
      itemArray0[5] = item1;
      itemArray0[6] = item0;
      itemArray0[7] = item0;
      itemArray0[8] = item0;
      classWriter0.typeTable = itemArray0;
      Item item2 = classWriter0.newFloat(1);
      Item item3 = classWriter0.newClassItem("");
      assertFalse(item3.equals((Object)item2));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4104);
      classWriter0.newFloat(4104);
      String string0 = classWriter0.thisName;
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-260));
      classWriter0.toByteArray();
      classWriter0.newLong((-260));
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("Lj9Bb%=FE|]F;:1e", "Lj9Bb%=FE|]F;:1e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Lj9Bb%=FE|]F;:1e
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(78);
      classWriter0.visitOuterClass("_$5mv$aGk$p", (String) null, "");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4100);
      classWriter0.visitOuterClass("", "fgDF)$T*pQ0", (String) null);
      Item item0 = classWriter0.newDouble(4100);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-976));
      classWriter0.threshold = 0;
      classWriter0.newUTF8("fe&]k\"`^Zf\u0007");
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("fe&]k\"`^Zf\u0007", "+o|$kn2zJX2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'fe&]k\"`^Zf\u0007.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 4);
      Long long0 = new Long(510);
      int int0 = classWriter0.newConst(long0);
      assertEquals(35, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-260));
      classWriter0.toByteArray();
      Type type0 = Type.CHAR_TYPE;
      classWriter0.newConstItem(type0);
      classWriter0.addType("H&*WBqGlXLlXNBg");
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("H&*WBqGlXLlXNBg", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      classWriter0.visitAnnotation("-JBtuhuxB,'=CvG", true);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("InnerClVsses", "InnerClVsses");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'InnerClVsses.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3383);
      ClassWriter classWriter1 = new ClassWriter(0);
      classWriter1.newMethodItem("", "RuntimeInvisibleAnnotations", "SourceFile", true);
      classWriter1.visitInnerClass("_#!3hM{?", "RuntimeInvisibleAnnotations", "L", 1);
      classWriter1.addType("");
      classWriter0.addType("Z75l.M>d");
      Item item0 = classWriter1.newMethodItem("e$9l:jsKeTD", "SourceFile", "", true);
      classWriter0.visitSource((String) null, "Z75l.M>d");
      ClassWriter classWriter2 = new ClassWriter(2);
      Item item1 = classWriter2.newClassItem("");
      assertFalse(item1.equals((Object)item0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 2234;
      ClassWriter classWriter0 = new ClassWriter(2234);
      String string0 = "SourceFile";
      classWriter0.newFieldItem("SourceFile", "[qNC&BvM1W\"", "[qNC&BvM1W\"");
      // Undeclared exception!
      try { 
        classWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(91);
      classWriter0.version = 91;
      classWriter0.newField(")AZr!x0b", ")AZr!x0b", "|'vzTp2LB?");
      classWriter0.newMethodItem("|'vzTp2LB?", "", "EnclosingMethod", false);
      classWriter0.addUninitializedType("", 91);
      classWriter0.addUninitializedType(")AZr!x0b", 4);
      classWriter0.visitSource("RuntimeInvisibleAnnotations", "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitInnerClass("1NbxV&/Q#_~e}H", "Rc-b", "", 0);
      classWriter0.addUninitializedType("A?ov%AGwW;&/RH", 0);
      classWriter0.visitSource("E\f|fdbU)i_", (String) null);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(592);
      classWriter0.visitField(592, "]);{T3]o\"7)i", "]);{T3]o\"7)i", "\"X#", "]);{T3]o\"7)i");
      classWriter0.visitOuterClass("]);{T3]o\"7)i", "\"X#", "The wildcard array must not be null");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-260));
      classWriter0.toByteArray();
      ClassWriter classWriter1 = new ClassWriter(1);
      classWriter1.visitOuterClass("RuntimeVisibleAnnotations", "H&*WBqGlXLlXNBg", (String) null);
      assertFalse(classWriter1.equals((Object)classWriter0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-260));
      classWriter0.toByteArray();
      classWriter0.visit((-260), (-260), "RuntimeVisibleAnnotations", "", (String) null, (String[]) null);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("a)oi^aI&X@H", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'a)oi^aI&X@H.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.addUninitializedType("dn7loDL~", 0);
      classWriter0.visitOuterClass("dn7loDL~", "dn7loDL~", "dn7loDL~");
      classWriter0.visitOuterClass("", (String) null, "org.apache.commons.io.filefilter.FalseFileFilter");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-244));
      Item item0 = classWriter0.newLong((-244));
      classWriter0.toByteArray();
      Item item1 = classWriter0.newLong((-244));
      assertSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      Boolean boolean0 = Boolean.TRUE;
      classWriter0.newConstItem(boolean0);
      String string0 = classWriter0.thisName;
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4100);
      Boolean boolean0 = Boolean.valueOf(":AW.]$?Sp<+nd}|kE");
      classWriter0.newConst(boolean0);
      Item item0 = classWriter0.newDouble(4100);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-632));
      Item item0 = classWriter0.newFloat((-632));
      Item item1 = classWriter0.newFloat((-632));
      assertSame(item1, item0);
      
      Item item2 = classWriter0.newLong((-632));
      assertNotSame(item2, item1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4100);
      classWriter0.newDouble(4100);
      classWriter0.newField("", "", "{vaX!}w7^B7`");
      classWriter0.newMethodItem("{vaX!}w7^B7`", "", "{vaX!}w7^B7`", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-293));
      classWriter0.visitAnnotation("l=ong", false);
      classWriter0.visitInnerClass("l=ong", "l=ong", "l=ong", (-293));
      classWriter0.newDouble((-293));
      classWriter0.visitInnerClass("W/T", "", "", 714);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(101);
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.DirectoryFileFilter", "org.apache.commons.io.filefilter.DirectoryFileFilter");
      Item item0 = classWriter0.newDouble(101);
      Item item1 = classWriter0.newDouble(101);
      assertSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4107);
      Item item0 = classWriter0.newMethodItem("", "", "", false);
      Item item1 = classWriter0.newMethodItem("", "", "", false);
      assertNotNull(item1);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-260));
      classWriter0.newConstItem("The strings must not be null");
      classWriter0.addUninitializedType("The strings must not be null", (-260));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "RuntimeInvisibleAnnotations";
      classWriter0.visit((-260), (-260), "M*", "", "value ", stringArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7J");
      classWriter0.newField("7J", "7J", "9w");
      byte[] byteArray0 = classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value [B@202723f4
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4132);
      Item item0 = classWriter0.newInteger(4132);
      Item item1 = classWriter0.newConstItem("The strings must not be null");
      assertNotNull(item1);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2369, (-3738));
      Item item2 = classWriter0.newInteger(4132);
      assertNotNull(item2);
      assertSame(item2, item0);
      assertNotSame(item2, item1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-260));
      classWriter0.newConstItem("The strings must not be null");
      classWriter0.newConstItem("The strings must not be null");
      classWriter0.addUninitializedType("The strings must not be null", (-260));
      String string0 = "9w";
      classWriter0.newField("7J", "7J", "9w");
      classWriter0.visitOuterClass("<init>", "n\n+cH", "<init>");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-545), 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -545
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-260));
      classWriter0.newConstItem("The strings must not be null");
      classWriter0.addUninitializedType("The strings must not be null", (-260));
      String string0 = "7J";
      classWriter0.addUninitializedType("The strings must not be null", (-260));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^o_`{'|y-_{RO");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)18;
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0, (-4247), (-260));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4239
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(101);
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.DirectoryFileFilter", "org.apache.commons.io.filefilter.DirectoryFileFilter");
      assertNotNull(string0);
      
      Item item0 = classWriter0.newFieldItem("org.apache.commons.io.filefilter.DirectoryFileFilter", "org.apache.commons.io.filefilter.DirectoryFileFilter", "org.apache.commons.io.filefilter.DirectoryFileFilter");
      assertNotNull(item0);
      
      String string1 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.DirectoryFileFilter", "wheel.asm.ClassWriter");
      assertEquals("java/lang/Object", string1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.DirectoryFileFilter", "wheel.asm.Type");
      assertEquals("java/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(101);
      classWriter0.threshold = 101;
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.DirectoryFileFilter", "org.apache.commons.io.filefilter.DirectoryFileFilter");
      Item item0 = classWriter0.newFieldItem("org.apache.commons.io.filefilter.DirectoryFileFilter", "org.apache.commons.io.filefilter.DirectoryFileFilter", "org.apache.commons.io.filefilter.DirectoryFileFilter");
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.DirectoryFileFilter", "org.apache.commons.io.filefilter.DirectoryFileFilter");
      assertNotNull(string0);
      
      Item item1 = classWriter0.newFieldItem("org.apache.commons.io.filefilter.DirectoryFileFilter", "org.apache.commons.io.filefilter.DirectoryFileFilter", "org.apache.commons.io.filefilter.DirectoryFileFilter");
      assertSame(item1, item0);
  }
}
