/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:43:55 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(54);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 54, 54, 87);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("float");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, (-1272), 71);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.AdjustBuffSize();
      assertEquals(4, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("||");
      StringReader stringReader1 = new StringReader("=[XLT?O0WI(9+");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader1);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 71, Integer.MIN_VALUE);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.AdjustBuffSize();
      assertEquals(1, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("float");
      int int0 = 3127;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3127, 123);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.ReadByte();
      javaParserTokenManager0.getNextToken();
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\";\"");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, (-1272), (-1272));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.ReadByte();
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 59);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 59. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("\";\"");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, (-1272), (-1272));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.ReadByte();
      javaParserTokenManager0.getNextToken();
      Token.newToken(83);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1272, column -1270.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      charArray0[0] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\''}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'\''}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'\''}, charArray0);
      
      CharArrayReader charArrayReader3 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertNotNull(charArrayReader3);
      assertArrayEquals(new char[] {'\''}, charArray0);
      
      CharArrayReader charArrayReader4 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader4.equals((Object)charArrayReader1));
      assertFalse(charArrayReader4.equals((Object)charArrayReader0));
      assertFalse(charArrayReader4.equals((Object)charArrayReader2));
      assertFalse(charArrayReader4.equals((Object)charArrayReader3));
      assertNotNull(charArrayReader4);
      assertArrayEquals(new char[] {'\''}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader3);
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertFalse(charArrayReader3.equals((Object)charArrayReader4));
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'\''}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader4);
      assertFalse(charArrayReader4.equals((Object)charArrayReader1));
      assertFalse(charArrayReader4.equals((Object)charArrayReader0));
      assertFalse(charArrayReader4.equals((Object)charArrayReader2));
      assertFalse(charArrayReader4.equals((Object)charArrayReader3));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'\''}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader4.equals((Object)charArrayReader1));
      assertFalse(charArrayReader4.equals((Object)charArrayReader0));
      assertFalse(charArrayReader4.equals((Object)charArrayReader2));
      assertFalse(charArrayReader4.equals((Object)charArrayReader3));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'\''}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      charArray0[0] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'\'', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'\'', '\u0000'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'\'', '\u0000'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'\'', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'\'', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[5] = 't';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'t', 't', '\u0000', '\u0000', '\u0000', 't', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'t', 't', '\u0000', '\u0000', '\u0000', 't', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, '\u0000', '\u0000');
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'t', 't', '\u0000', '\u0000', '\u0000', 't', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'t', 't', '\u0000', '\u0000', '\u0000', 't', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertArrayEquals(new char[] {'t', 't', '\u0000', '\u0000', '\u0000', 't', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals("tt", token0.toString());
      
      token_GTToken0.endColumn = 1;
      assertNull(token_GTToken0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(1441);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1441. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/bQ<NZ");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 35);
      assertNotNull(bufferedReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 35, 281);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertNull(token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(104, token1.kind);
      assertEquals(35, token1.endLine);
      assertEquals(281, token1.beginColumn);
      assertEquals(281, token1.endColumn);
      assertEquals(35, token1.beginLine);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(35, javaCharStream0.getEndLine());
      assertEquals(281, javaCharStream0.getColumn());
      assertEquals(281, javaCharStream0.getEndColumn());
      assertEquals(35, javaCharStream0.getBeginLine());
      assertEquals(35, javaCharStream0.getLine());
      assertEquals(281, javaCharStream0.getBeginColumn());
      assertEquals("/", token1.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(35, javaCharStream0.getEndLine());
      assertEquals(281, javaCharStream0.getColumn());
      assertEquals(281, javaCharStream0.getEndColumn());
      assertEquals(35, javaCharStream0.getBeginLine());
      assertEquals(35, javaCharStream0.getLine());
      assertEquals(281, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(35);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 35. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/bQ<NZ");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 35);
      assertNotNull(bufferedReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 35, 35);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('/', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(35, token0.beginLine);
      assertEquals(35, token0.beginColumn);
      assertEquals(35, token0.endLine);
      assertEquals(35, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(35, javaCharStream0.getBeginLine());
      assertEquals(35, javaCharStream0.getEndLine());
      assertEquals(35, javaCharStream0.getBeginColumn());
      assertEquals(35, javaCharStream0.getColumn());
      assertEquals(35, javaCharStream0.getLine());
      assertEquals(35, javaCharStream0.getEndColumn());
      assertEquals("b", token0.toString());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 40, 33);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      javaCharStream1.AdjustBuffSize();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = 'G';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'%', 'G'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'%', 'G'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 111, 111);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'%', 'G'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'%', 'G'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(108, token0.kind);
      assertEquals(111, token0.endLine);
      assertEquals(111, token0.beginLine);
      assertEquals(111, token0.beginColumn);
      assertEquals(111, token0.endColumn);
      assertArrayEquals(new char[] {'%', 'G'}, charArray0);
      assertEquals(111, javaCharStream0.getLine());
      assertEquals(111, javaCharStream0.getEndColumn());
      assertEquals(111, javaCharStream0.getBeginColumn());
      assertEquals(111, javaCharStream0.getEndLine());
      assertEquals(111, javaCharStream0.getBeginLine());
      assertEquals(111, javaCharStream0.getColumn());
      assertEquals("%", token0.toString());
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertNull(token_GTToken1.toString());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'%', 'G'}, charArray0);
      assertEquals(111, javaCharStream0.getLine());
      assertEquals(111, javaCharStream0.getEndColumn());
      assertEquals(111, javaCharStream0.getBeginColumn());
      assertEquals(111, javaCharStream0.getEndLine());
      assertEquals(111, javaCharStream0.getBeginLine());
      assertEquals(111, javaCharStream0.getColumn());
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0, 0, 0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'%', 'G'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fBo[a$");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, (-1272), 71);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(73, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(71, token0.beginColumn);
      assertEquals((-1272), token0.beginLine);
      assertEquals((-1272), token0.endLine);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(71, javaCharStream0.getBeginColumn());
      assertEquals((-1272), javaCharStream0.getLine());
      assertEquals(73, javaCharStream0.getEndColumn());
      assertEquals((-1272), javaCharStream0.getEndLine());
      assertEquals((-1272), javaCharStream0.getBeginLine());
      assertEquals(73, javaCharStream0.getColumn());
      assertEquals("fBo", token0.toString());
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(71, javaCharStream0.getBeginColumn());
      assertEquals((-1272), javaCharStream0.getLine());
      assertEquals(73, javaCharStream0.getEndColumn());
      assertEquals((-1272), javaCharStream0.getEndLine());
      assertEquals((-1272), javaCharStream0.getBeginLine());
      assertEquals(73, javaCharStream0.getColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1272), token1.beginLine);
      assertEquals((-1272), token1.endLine);
      assertEquals(74, token1.endColumn);
      assertEquals(81, token1.kind);
      assertEquals(74, token1.beginColumn);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals((-1272), javaCharStream0.getLine());
      assertEquals((-1272), javaCharStream0.getEndLine());
      assertEquals(74, javaCharStream0.getBeginColumn());
      assertEquals((-1272), javaCharStream0.getBeginLine());
      assertEquals(74, javaCharStream0.getColumn());
      assertEquals(74, javaCharStream0.getEndColumn());
      assertEquals("[", token1.toString());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\";\"");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = ')';
      charArray0[5] = ')';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {')', ')', ')', ')', ')', ')'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 29, 29, 40);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {')', ')', ')', ')', ')', ')'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {')', ')', ')', ')', ')', ')'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(29, token0.endColumn);
      assertEquals(29, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(29, token0.beginLine);
      assertEquals(29, token0.endLine);
      assertArrayEquals(new char[] {')', ')', ')', ')', ')', ')'}, charArray0);
      assertEquals(29, javaCharStream0.getEndLine());
      assertEquals(29, javaCharStream0.getLine());
      assertEquals(29, javaCharStream0.getEndColumn());
      assertEquals(29, javaCharStream0.getBeginColumn());
      assertEquals(29, javaCharStream0.getBeginLine());
      assertEquals(29, javaCharStream0.getColumn());
      assertEquals(")", token0.toString());
      
      MockFile mockFile0 = new MockFile("ME!Bs+Lt6W u>B[(", "\";\"");
      assertNotNull(mockFile0);
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca/ME!Bs+Lt6W u>B[(", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca/ME!Bs+Lt6W u>B[(/\";\"", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("\";\"", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'N';
      charArray0[1] = ')';
      charArray0[4] = 'O';
      charArray0[5] = 'P';
      charArray0[6] = 'P';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'N', ')', '\u0000', '\u0000', 'O', 'P', 'P'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 29, 29, 29);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'N', ')', '\u0000', '\u0000', 'O', 'P', 'P'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'N', ')', '\u0000', '\u0000', 'O', 'P', 'P'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(29, token0.endLine);
      assertEquals(29, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(29, token0.beginColumn);
      assertEquals(29, token0.endColumn);
      assertArrayEquals(new char[] {'N', ')', '\u0000', '\u0000', 'O', 'P', 'P'}, charArray0);
      assertEquals(29, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getLine());
      assertEquals(29, javaCharStream0.getEndColumn());
      assertEquals(29, javaCharStream0.getBeginLine());
      assertEquals(29, javaCharStream0.getBeginColumn());
      assertEquals(29, javaCharStream0.getEndLine());
      assertEquals("N", token0.toString());
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'N', ')', '\u0000', '\u0000', 'O', 'P', 'P'}, charArray0);
      assertEquals(29, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getLine());
      assertEquals(29, javaCharStream0.getEndColumn());
      assertEquals(29, javaCharStream0.getBeginLine());
      assertEquals(29, javaCharStream0.getBeginColumn());
      assertEquals(29, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fBo'[a$");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, (-1272), 71);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1272), token0.endLine);
      assertEquals((-1272), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(71, token0.beginColumn);
      assertEquals(73, token0.endColumn);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(71, javaCharStream0.getBeginColumn());
      assertEquals(73, javaCharStream0.getColumn());
      assertEquals((-1272), javaCharStream0.getEndLine());
      assertEquals((-1272), javaCharStream0.getBeginLine());
      assertEquals((-1272), javaCharStream0.getLine());
      assertEquals(73, javaCharStream0.getEndColumn());
      assertEquals("fBo", token0.toString());
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(71, javaCharStream0.getBeginColumn());
      assertEquals(73, javaCharStream0.getColumn());
      assertEquals((-1272), javaCharStream0.getEndLine());
      assertEquals((-1272), javaCharStream0.getBeginLine());
      assertEquals((-1272), javaCharStream0.getLine());
      assertEquals(73, javaCharStream0.getEndColumn());
      
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1272));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aL1'<S{~+m");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 33, 33);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      Token token0 = Token.newToken((-1));
      assertNotNull(token0);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertNull(token0.toString());
      
      Token token1 = new Token();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertNull(token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(33, token2.beginColumn);
      assertEquals(33, token2.beginLine);
      assertEquals(35, token2.endColumn);
      assertEquals(33, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(33, javaCharStream0.getEndLine());
      assertEquals(35, javaCharStream0.getColumn());
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals(33, javaCharStream0.getBeginLine());
      assertEquals(33, javaCharStream0.getLine());
      assertEquals(35, javaCharStream0.getEndColumn());
      assertEquals("aL1", token2.toString());
      
      LineNumberReader lineNumberReader0 = null;
      try {
        lineNumberReader0 = new LineNumberReader(stringReader0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("float");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 25, 25);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('f', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char1 = javaCharStream0.ReadByte();
      assertEquals('l', char1);
      assertFalse(char1 == char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(25, token0.beginColumn);
      assertEquals(27, token0.endColumn);
      assertEquals(25, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(25, token0.beginLine);
      assertEquals(25, javaCharStream0.getBeginColumn());
      assertEquals(25, javaCharStream0.getLine());
      assertEquals(27, javaCharStream0.getEndColumn());
      assertEquals(25, javaCharStream0.getBeginLine());
      assertEquals(25, javaCharStream0.getEndLine());
      assertEquals(27, javaCharStream0.getColumn());
      assertEquals("oat", token0.toString());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      ByteBuffer byteBuffer0 = charset0.encode("float");
      assertNotNull(byteBuffer0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(5, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(5, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=5 cap=5]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(5, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      
      // Undeclared exception!
      try { 
        charset0.decode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      StringReader stringReader0 = new StringReader("flt");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, (-1272), 71);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-1272), token0.endLine);
      assertEquals((-1272), token0.beginLine);
      assertEquals(71, token0.beginColumn);
      assertEquals(73, token0.endColumn);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals((-1272), javaCharStream0.getBeginLine());
      assertEquals((-1272), javaCharStream0.getEndLine());
      assertEquals(73, javaCharStream0.getEndColumn());
      assertEquals(71, javaCharStream0.getBeginColumn());
      assertEquals((-1272), javaCharStream0.getLine());
      assertEquals(73, javaCharStream0.getColumn());
      assertEquals("flt", token0.toString());
      
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)104, (byte) (-31), (byte)5, (byte)5, (byte)5, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)104, (byte) (-31), (byte)5, (byte)5, (byte)5, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0, (-1272), (byte)5);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)104, (byte) (-31), (byte)5, (byte)5, (byte)5, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      long long0 = byteArrayInputStream0.skip((-1));
      assertEquals(0L, long0);
      assertArrayEquals(new byte[] {(byte)104, (byte) (-31), (byte)5, (byte)5, (byte)5, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)104, (byte) (-31), (byte)5, (byte)5, (byte)5, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1272), token0.endLine);
      assertEquals(5, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals((-1272), token0.beginLine);
      assertArrayEquals(new byte[] {(byte)104, (byte) (-31), (byte)5, (byte)5, (byte)5, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals((-1272), javaCharStream0.getLine());
      assertEquals((-1272), javaCharStream0.getBeginLine());
      assertEquals((-1272), javaCharStream0.getEndLine());
      assertEquals("h", token0.toString());
      
      try { 
        pushbackInputStream0.unread(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Push back buffer is full
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '^';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      charArrayReader0.mark(27);
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = charArrayReader2.read(charArray0);
      assertEquals(10, int0);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader3 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertNotNull(charArrayReader3);
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader3);
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader1, (-1), (-1));
      assertFalse(charArrayReader1.equals((Object)charArrayReader3));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.curLexState = 1216;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader3, charArrayReader1);
      assertNotSame(charArrayReader3, charArrayReader0);
      assertNotSame(charArrayReader3, charArrayReader2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(1, token0.endLine);
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader3, charArrayReader1);
      assertNotSame(charArrayReader3, charArrayReader0);
      assertNotSame(charArrayReader3, charArrayReader2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'A';
      charArray0[4] = 'O';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'A', '\u0000', '\u0000', '\u0000', 'O', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 29, 29, 29);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'A', '\u0000', '\u0000', '\u0000', 'O', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'A', '\u0000', '\u0000', '\u0000', 'O', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(29, token0.endColumn);
      assertEquals(29, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(29, token0.endLine);
      assertEquals(29, token0.beginColumn);
      assertArrayEquals(new char[] {'A', '\u0000', '\u0000', '\u0000', 'O', '\u0000', '\u0000'}, charArray0);
      assertEquals(29, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getEndLine());
      assertEquals(29, javaCharStream0.getBeginColumn());
      assertEquals(29, javaCharStream0.getLine());
      assertEquals(29, javaCharStream0.getBeginLine());
      assertEquals(29, javaCharStream0.getEndColumn());
      assertEquals("A", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'A', '\u0000', '\u0000', '\u0000', 'O', '\u0000', '\u0000'}, charArray0);
      assertEquals(29, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getEndLine());
      assertEquals(29, javaCharStream0.getBeginColumn());
      assertEquals(29, javaCharStream0.getLine());
      assertEquals(29, javaCharStream0.getBeginLine());
      assertEquals(29, javaCharStream0.getEndColumn());
      
      Token token1 = Token.newToken(29);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertNull(token1.toString());
      
      Token token2 = new Token();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertNull(token2.toString());
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(29, token3.beginLine);
      assertEquals(29, token3.beginColumn);
      assertEquals(74, token3.kind);
      assertEquals(29, token3.endColumn);
      assertEquals(29, token3.endLine);
      assertArrayEquals(new char[] {'A', '\u0000', '\u0000', '\u0000', 'O', '\u0000', '\u0000'}, charArray0);
      assertEquals(29, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getEndLine());
      assertEquals(29, javaCharStream0.getBeginColumn());
      assertEquals(29, javaCharStream0.getLine());
      assertEquals(29, javaCharStream0.getBeginLine());
      assertEquals(29, javaCharStream0.getEndColumn());
      assertEquals("A", token3.toString());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)59;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)36, (byte) (-54), (byte)59}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)36, (byte) (-54), (byte)59}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)36, (byte) (-54), (byte)59}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertArrayEquals(new byte[] {(byte)36, (byte) (-54), (byte)59}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("$", token0.toString());
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      InputStreamReader inputStreamReader0 = null;
      try {
        inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, (CharsetDecoder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset decoder
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fgaL1'<S{~+m_");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("fgaL1'<S{~+m_");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 3379, 35);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(3379, token0.endLine);
      assertEquals(35, token0.beginColumn);
      assertEquals(39, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(3379, token0.beginLine);
      assertEquals(3379, javaCharStream0.getEndLine());
      assertEquals(3379, javaCharStream0.getLine());
      assertEquals(39, javaCharStream0.getEndColumn());
      assertEquals(39, javaCharStream0.getColumn());
      assertEquals(35, javaCharStream0.getBeginColumn());
      assertEquals(3379, javaCharStream0.getBeginLine());
      assertEquals("fgaL1", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 3379, column 42.  Encountered: \"S\" (83), after : \"\\'<\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      charArray0[3] = '+';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'+', '\u0000', '\u0000', '+', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'+', '\u0000', '\u0000', '+', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = 50;
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 50, 49);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'+', '\u0000', '\u0000', '+', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'+', '\u0000', '\u0000', '+', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(49, token0.beginColumn);
      assertEquals(50, token0.endLine);
      assertEquals(49, token0.endColumn);
      assertEquals(101, token0.kind);
      assertEquals(50, token0.beginLine);
      assertArrayEquals(new char[] {'+', '\u0000', '\u0000', '+', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals("+", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 50);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 50. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[15];
      charArray0[0] = '\'';
      charArray0[1] = 'c';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 447, 447);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 447, column 449.  Encountered: \"\" (0), after : \"\\'c\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "\"<=\"";
      StringReader stringReader0 = new StringReader("\"<=\"");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 29, 29, 29);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(32, token0.endColumn);
      assertEquals(29, token0.endLine);
      assertEquals(29, token0.beginColumn);
      assertEquals(29, token0.beginLine);
      assertEquals(73, token0.kind);
      assertEquals(29, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getEndLine());
      assertEquals(29, javaCharStream0.getBeginColumn());
      assertEquals(32, javaCharStream0.getEndColumn());
      assertEquals(29, javaCharStream0.getLine());
      assertEquals("\"<=\"", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(29, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getEndLine());
      assertEquals(29, javaCharStream0.getBeginColumn());
      assertEquals(32, javaCharStream0.getEndColumn());
      assertEquals(29, javaCharStream0.getLine());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      
      String string1 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("do", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("I52 :Si.-_XT~_1");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 86, 86);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertNull(token0.toString());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(86, token1.beginColumn);
      assertEquals(86, token1.beginLine);
      assertEquals(88, token1.endColumn);
      assertEquals(86, token1.endLine);
      assertEquals(86, javaCharStream0.getBeginLine());
      assertEquals(88, javaCharStream0.getEndColumn());
      assertEquals(86, javaCharStream0.getLine());
      assertEquals(86, javaCharStream0.getBeginColumn());
      assertEquals(86, javaCharStream0.getEndLine());
      assertEquals(88, javaCharStream0.getColumn());
      assertEquals("I52", token1.toString());
      
      token1.next = (Token) token_GTToken0;
      assertEquals(86, javaCharStream0.getBeginLine());
      assertEquals(88, javaCharStream0.getEndColumn());
      assertEquals(86, javaCharStream0.getLine());
      assertEquals(86, javaCharStream0.getBeginColumn());
      assertEquals(86, javaCharStream0.getEndLine());
      assertEquals(88, javaCharStream0.getColumn());
      assertNull(token_GTToken0.toString());
      assertEquals("I52", token1.toString());
      assertNull(token1.next.toString());
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token2 = new Token();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertNull(token2.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(86, javaCharStream0.getBeginLine());
      assertEquals(88, javaCharStream0.getEndColumn());
      assertEquals(86, javaCharStream0.getLine());
      assertEquals(86, javaCharStream0.getBeginColumn());
      assertEquals(86, javaCharStream0.getEndLine());
      assertEquals(88, javaCharStream0.getColumn());
      assertNull(token_GTToken0.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token3);
      assertEquals(86, token3.beginLine);
      assertEquals(90, token3.endColumn);
      assertEquals(90, token3.beginColumn);
      assertEquals(86, token3.endLine);
      assertEquals(92, token3.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(":", token3.toString());
      assertEquals(86, javaCharStream0.getBeginLine());
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals(86, javaCharStream0.getLine());
      assertEquals(90, javaCharStream0.getEndColumn());
      assertEquals(86, javaCharStream0.getEndLine());
      assertEquals(90, javaCharStream0.getColumn());
      
      Token token4 = Token.newToken(0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertNotNull(token4);
      assertEquals(0, token4.kind);
      assertEquals(0, token4.endLine);
      assertEquals(0, token4.beginLine);
      assertEquals(0, token4.beginColumn);
      assertEquals(0, token4.endColumn);
      assertNull(token4.toString());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("I52 :Si.-_XT~_1");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 100, 100);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\''}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'\''}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader1, 811, 12);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'\''}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaCharStream javaCharStream2 = new JavaCharStream(charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertArrayEquals(new char[] {'\''}, charArray0);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertNull(token0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(100, token1.beginColumn);
      assertEquals(100, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(102, token1.endColumn);
      assertEquals(100, token1.endLine);
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(102, javaCharStream0.getColumn());
      assertEquals(100, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(102, javaCharStream0.getEndColumn());
      assertEquals("I52", token1.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream2, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'P';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte) (-31);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-97), (byte)12, (byte) (-97), (byte) (-31)}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-97), (byte)12, (byte) (-97), (byte) (-31)}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0, Integer.MAX_VALUE, 3897);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-97), (byte)12, (byte) (-97), (byte) (-31)}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-97), (byte)12, (byte) (-97), (byte) (-31)}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-97), (byte)12, (byte) (-97), (byte) (-31)}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 2147483647, column 3898.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("`+");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {}, charArray0);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '%';
      charArray1[1] = '%';
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'%', '%'}, charArray1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2322, 12);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'P';
      charArray0[2] = 'O';
      charArray0[3] = 'P';
      charArray0[4] = '%';
      charArray0[5] = '%';
      StringReader stringReader0 = new StringReader("rKX[zSy{m7");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 74, 90);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'P', '\u0000', 'O', 'P', '%', '%', '\u0000'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNull(token0.toString());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token_GTToken0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(92, token1.endColumn);
      assertEquals(74, token1.endLine);
      assertEquals(74, token1.beginLine);
      assertEquals(90, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals(74, javaCharStream0.getBeginLine());
      assertEquals(92, javaCharStream0.getColumn());
      assertEquals(74, javaCharStream0.getEndLine());
      assertEquals(74, javaCharStream0.getLine());
      assertEquals(92, javaCharStream0.getEndColumn());
      assertEquals("rKX", token1.toString());
      
      int int0 = 91;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 74. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'P';
      charArray0[1] = '%';
      charArray0[2] = 'O';
      charArray0[3] = 'P';
      charArray0[4] = '%';
      charArray0[5] = '%';
      StringReader stringReader0 = new StringReader("rKX[zSy{m7");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 74, 90);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'P', '%', 'O', 'P', '%', '%', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 1176, 1777);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'P', '%', 'O', 'P', '%', '%', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(74, token0.beginLine);
      assertEquals(90, token0.beginColumn);
      assertEquals(92, token0.endColumn);
      assertEquals(74, token0.endLine);
      assertEquals(74, javaCharStream0.getLine());
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals(92, javaCharStream0.getColumn());
      assertEquals(74, javaCharStream0.getEndLine());
      assertEquals(92, javaCharStream0.getEndColumn());
      assertEquals(74, javaCharStream0.getBeginLine());
      assertEquals("rKX", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(81, token1.kind);
      assertEquals(93, token1.beginColumn);
      assertEquals(93, token1.endColumn);
      assertEquals(74, token1.endLine);
      assertEquals(74, token1.beginLine);
      assertEquals(74, javaCharStream0.getLine());
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals(74, javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals(74, javaCharStream0.getBeginLine());
      assertEquals("[", token1.toString());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fBo[a$");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 277, 94);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('f', char0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(277, token0.endLine);
      assertEquals(94, token0.beginColumn);
      assertEquals(95, token0.endColumn);
      assertEquals(277, token0.beginLine);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(95, javaCharStream0.getColumn());
      assertEquals(95, javaCharStream0.getEndColumn());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals(277, javaCharStream0.getBeginLine());
      assertEquals(277, javaCharStream0.getEndLine());
      assertEquals(277, javaCharStream0.getLine());
      assertEquals("Bo", token0.toString());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(277, token1.beginLine);
      assertEquals(96, token1.endColumn);
      assertEquals(96, token1.beginColumn);
      assertEquals(81, token1.kind);
      assertEquals(277, token1.endLine);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(96, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getColumn());
      assertEquals(277, javaCharStream0.getBeginLine());
      assertEquals(277, javaCharStream0.getEndLine());
      assertEquals(277, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals("[", token1.toString());
      
      char[] charArray0 = new char[11];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      token1.kind = (int) 'f';
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(96, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getColumn());
      assertEquals(277, javaCharStream0.getBeginLine());
      assertEquals(277, javaCharStream0.getEndLine());
      assertEquals(277, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals("[", token1.toString());
      
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      charArray0[5] = 'f';
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      lineNumberReader0.setLineNumber(1539);
      assertEquals(1539, lineNumberReader0.getLineNumber());
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8`\"fR3r|8G&'DIbA@");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 2440, 94);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      token1.beginColumn = 2440;
      assertEquals(1539, lineNumberReader0.getLineNumber());
      assertEquals(96, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getColumn());
      assertEquals(277, javaCharStream0.getBeginLine());
      assertEquals(277, javaCharStream0.getEndLine());
      assertEquals(277, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals("[", token1.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaParserTokenManager1.jjround = 1539;
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token2.kind);
      assertEquals(94, token2.beginColumn);
      assertEquals(2440, token2.endLine);
      assertEquals(95, token2.endColumn);
      assertEquals(2440, token2.beginLine);
      assertEquals(95, javaCharStream1.getEndColumn());
      assertEquals(2440, javaCharStream1.getBeginLine());
      assertEquals(94, javaCharStream1.getBeginColumn());
      assertEquals(2440, javaCharStream1.getEndLine());
      assertEquals(2440, javaCharStream1.getLine());
      assertEquals(95, javaCharStream1.getColumn());
      assertEquals("ff", token2.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token2);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token2));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(277, token1.beginLine);
      assertEquals(102, token1.kind);
      assertEquals(96, token1.endColumn);
      assertEquals(2440, token1.beginColumn);
      assertEquals(277, token1.endLine);
      assertEquals(1539, lineNumberReader0.getLineNumber());
      assertEquals(96, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getColumn());
      assertEquals(277, javaCharStream0.getBeginLine());
      assertEquals(277, javaCharStream0.getEndLine());
      assertEquals(277, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals("[", token1.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token2.kind);
      assertEquals(94, token2.beginColumn);
      assertEquals(2440, token2.endLine);
      assertEquals(95, token2.endColumn);
      assertEquals(2440, token2.beginLine);
      assertEquals(1539, lineNumberReader0.getLineNumber());
      assertEquals(96, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getColumn());
      assertEquals(277, javaCharStream0.getBeginLine());
      assertEquals(277, javaCharStream0.getEndLine());
      assertEquals(277, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals(95, javaCharStream1.getEndColumn());
      assertEquals(2440, javaCharStream1.getBeginLine());
      assertEquals(94, javaCharStream1.getBeginColumn());
      assertEquals(2440, javaCharStream1.getEndLine());
      assertEquals(2440, javaCharStream1.getLine());
      assertEquals(95, javaCharStream1.getColumn());
      assertEquals("ff", token2.toString());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[5] = '3';
      charArray0[3] = '3';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'3', '\u0000', '\u0000', '3', '\u0000', '3', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-3448), (-3448));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'3', '\u0000', '\u0000', '3', '\u0000', '3', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'3', '\u0000', '\u0000', '3', '\u0000', '3', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3448), token0.endLine);
      assertEquals((-3448), token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals((-3448), token0.beginColumn);
      assertEquals((-3448), token0.endColumn);
      assertArrayEquals(new char[] {'3', '\u0000', '\u0000', '3', '\u0000', '3', '\u0000'}, charArray0);
      assertEquals((-3448), javaCharStream0.getBeginColumn());
      assertEquals((-3448), javaCharStream0.getLine());
      assertEquals((-3448), javaCharStream0.getEndColumn());
      assertEquals((-3448), javaCharStream0.getBeginLine());
      assertEquals((-3448), javaCharStream0.getEndLine());
      assertEquals((-3448), javaCharStream0.getColumn());
      assertEquals("3", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -3448, column -3447.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', '\u0000', '\u0000'}, charArray0);
      
      StringReader stringReader0 = new StringReader("cqZaJf3]Q");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, '>', 2661);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'>', '\u0000', '\u0000'}, charArray0);
      
      int int0 = stringReader0.read();
      assertEquals(99, int0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(2661, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(2665, token0.endColumn);
      assertEquals(62, token0.endLine);
      assertEquals(62, token0.beginLine);
      assertEquals(2665, javaCharStream0.getEndColumn());
      assertEquals(62, javaCharStream0.getEndLine());
      assertEquals(2661, javaCharStream0.getBeginColumn());
      assertEquals(62, javaCharStream0.getLine());
      assertEquals(62, javaCharStream0.getBeginLine());
      assertEquals(2665, javaCharStream0.getColumn());
      assertEquals("qZaJf", token0.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer("%l:,|Wi");
      assertNotNull(stringBuffer0);
      assertEquals("%l:,|Wi", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
      
      javaParserTokenManager0.image = stringBuffer0;
      assertEquals(2665, javaCharStream0.getEndColumn());
      assertEquals(62, javaCharStream0.getEndLine());
      assertEquals(2661, javaCharStream0.getBeginColumn());
      assertEquals(62, javaCharStream0.getLine());
      assertEquals(62, javaCharStream0.getBeginLine());
      assertEquals(2665, javaCharStream0.getColumn());
      assertEquals("%l:,|Wi", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
      assertEquals(7, javaParserTokenManager0.image.length());
      assertEquals("%l:,|Wi", javaParserTokenManager0.image.toString());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(2665, javaCharStream0.getEndColumn());
      assertEquals(62, javaCharStream0.getEndLine());
      assertEquals(2661, javaCharStream0.getBeginColumn());
      assertEquals(62, javaCharStream0.getLine());
      assertEquals(62, javaCharStream0.getBeginLine());
      assertEquals(2665, javaCharStream0.getColumn());
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(2665, javaCharStream0.getEndColumn());
      assertEquals(62, javaCharStream0.getEndLine());
      assertEquals(2661, javaCharStream0.getBeginColumn());
      assertEquals(62, javaCharStream0.getLine());
      assertEquals(62, javaCharStream0.getBeginLine());
      assertEquals(2665, javaCharStream0.getColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(2665, javaCharStream0.getEndColumn());
      assertEquals(62, javaCharStream0.getEndLine());
      assertEquals(2661, javaCharStream0.getBeginColumn());
      assertEquals(62, javaCharStream0.getLine());
      assertEquals(62, javaCharStream0.getBeginLine());
      assertEquals(2665, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '^';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      charArrayReader0.mark(27);
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = charArrayReader2.read(charArray0);
      assertEquals(10, int0);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader3 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertNotNull(charArrayReader3);
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader3);
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader1, (-1), (-1));
      assertFalse(charArrayReader1.equals((Object)charArrayReader3));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader3, charArrayReader0);
      assertNotSame(charArrayReader3, charArrayReader1);
      assertNotSame(charArrayReader3, charArrayReader2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(107, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("^", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TuJLDG");
      assertNotNull(stringReader0);
      
      int int0 = 123;
      int int1 = (-4127);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-4127), (-4127));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('T', char0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals((-4127), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-4127), token0.beginLine);
      assertEquals((-4127), token0.beginColumn);
      assertEquals((-4123), token0.endColumn);
      assertEquals((-4123), javaCharStream0.getColumn());
      assertEquals((-4127), javaCharStream0.getEndLine());
      assertEquals((-4127), javaCharStream0.getBeginLine());
      assertEquals((-4127), javaCharStream0.getLine());
      assertEquals((-4123), javaCharStream0.getEndColumn());
      assertEquals((-4127), javaCharStream0.getBeginColumn());
      assertEquals("uJLDG", token0.toString());
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = ')';
      charArray0[3] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', ')', '\u0000', '>', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'>', ')', '\u0000', '>', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      charArrayReader0.reset();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'>', ')', '\u0000', '>', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = 49;
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 50, 49);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'>', ')', '\u0000', '>', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'>', ')', '\u0000', '>', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(124, token0.kind);
      assertEquals(50, token0.beginLine);
      assertEquals(49, token0.beginColumn);
      assertEquals(49, token0.endColumn);
      assertEquals(50, token0.endLine);
      assertArrayEquals(new char[] {'>', ')', '\u0000', '>', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(">", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 50);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 50. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      charArray0[1] = 'c';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\'', 'c'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'\'', 'c'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'\'', 'c'}, charArray0);
      
      CharArrayReader charArrayReader3 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader3);
      assertArrayEquals(new char[] {'\'', 'c'}, charArray0);
      
      CharArrayReader charArrayReader4 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader4.equals((Object)charArrayReader0));
      assertFalse(charArrayReader4.equals((Object)charArrayReader1));
      assertFalse(charArrayReader4.equals((Object)charArrayReader3));
      assertFalse(charArrayReader4.equals((Object)charArrayReader2));
      assertNotNull(charArrayReader4);
      assertArrayEquals(new char[] {'\'', 'c'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader3);
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertFalse(charArrayReader3.equals((Object)charArrayReader4));
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'\'', 'c'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertNull(token0.toString());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertFalse(charArrayReader3.equals((Object)charArrayReader4));
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'\'', 'c'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(charArrayReader3, charArrayReader2);
      assertNotSame(charArrayReader3, charArrayReader4);
      assertNotSame(charArrayReader3, charArrayReader0);
      assertNotSame(charArrayReader3, charArrayReader1);
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertFalse(charArrayReader3.equals((Object)charArrayReader4));
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertArrayEquals(new char[] {'\'', 'c'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\\'c\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '9';
      charArray0[5] = '9';
      charArray0[1] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'9', '9', '\u0000', '\u0000', '\u0000', '9', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'9', '9', '\u0000', '\u0000', '\u0000', '9', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 50, 50);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'9', '9', '\u0000', '\u0000', '\u0000', '9', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'9', '9', '\u0000', '\u0000', '\u0000', '9', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'9', '9', '\u0000', '\u0000', '\u0000', '9', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'9', '9', '\u0000', '\u0000', '\u0000', '9', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token1.kind);
      assertEquals(50, token1.endLine);
      assertEquals(50, token1.beginLine);
      assertEquals(51, token1.endColumn);
      assertEquals(50, token1.beginColumn);
      assertArrayEquals(new char[] {'9', '9', '\u0000', '\u0000', '\u0000', '9', '\u0000'}, charArray0);
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals("99", token1.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream1, 67);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 67. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("I52 :Si.-_XT~_1");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 1132);
      assertNotNull(bufferedReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, 100, 1132);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(100, token0.beginLine);
      assertEquals(1134, token0.endColumn);
      assertEquals(100, token0.endLine);
      assertEquals(1132, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(1134, javaCharStream0.getColumn());
      assertEquals(1134, javaCharStream0.getEndColumn());
      assertEquals(1132, javaCharStream0.getBeginColumn());
      assertEquals("I52", token0.toString());
      
      boolean boolean0 = bufferedReader0.ready();
      assertTrue(boolean0);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals(':', char0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(1134, javaCharStream0.getColumn());
      assertEquals(1134, javaCharStream0.getEndColumn());
      assertEquals(1132, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1136, token1.beginColumn);
      assertEquals(100, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(100, token1.beginLine);
      assertEquals(1137, token1.endColumn);
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(1137, javaCharStream0.getColumn());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(1137, javaCharStream0.getEndColumn());
      assertEquals(1136, javaCharStream0.getBeginColumn());
      assertEquals("Si", token1.toString());
      
      LineNumberReader lineNumberReader1 = new LineNumberReader(lineNumberReader0, 100);
      assertFalse(lineNumberReader1.equals((Object)lineNumberReader0));
      assertNotNull(lineNumberReader1);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, lineNumberReader1.getLineNumber());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      
      ByteBuffer byteBuffer0 = charset0.encode("Si");
      assertNotNull(byteBuffer0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(2, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2 cap=2]", byteBuffer0.toString());
      assertEquals(2, byteBuffer0.remaining());
      assertEquals(2, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      
      StringReader stringReader1 = new StringReader(",<{b~;uY");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(100, token2.endLine);
      assertEquals(85, token2.kind);
      assertEquals(100, token2.beginLine);
      assertEquals(1138, token2.beginColumn);
      assertEquals(1138, token2.endColumn);
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(1138, javaCharStream0.getColumn());
      assertEquals(1138, javaCharStream0.getEndColumn());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(1138, javaCharStream0.getBeginColumn());
      assertEquals(".", token2.toString());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertNull(token_GTToken1.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token_GTToken0, token_GTToken1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token_GTToken0.equals((Object)token_GTToken1));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(1138, javaCharStream0.getColumn());
      assertEquals(1138, javaCharStream0.getEndColumn());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(1138, javaCharStream0.getBeginColumn());
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(1138, javaCharStream0.getColumn());
      assertEquals(1138, javaCharStream0.getEndColumn());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(1138, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(1138, javaCharStream0.getColumn());
      assertEquals(1138, javaCharStream0.getEndColumn());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(1138, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(1138, javaCharStream0.getColumn());
      assertEquals(1138, javaCharStream0.getEndColumn());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(1138, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 74. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char char0 = '\u0014';
      StringReader stringReader0 = new StringReader("-n_h{0");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 126, 1924);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char1 = javaCharStream0.ReadByte();
      assertEquals('-', char1);
      assertFalse(char1 == char0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(126, token0.beginLine);
      assertEquals(1926, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1924, token0.beginColumn);
      assertEquals(126, token0.endLine);
      assertEquals(126, javaCharStream0.getBeginLine());
      assertEquals(1924, javaCharStream0.getBeginColumn());
      assertEquals(1926, javaCharStream0.getColumn());
      assertEquals(126, javaCharStream0.getLine());
      assertEquals(126, javaCharStream0.getEndLine());
      assertEquals(1926, javaCharStream0.getEndColumn());
      assertEquals("n_h", token0.toString());
      
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("T6.S3Q8A`e/!f).Yl");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)43}, byteArray0);
      
      StringReader stringReader1 = new StringReader("Zm/WHB0L");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, (byte)89, 81);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('T', char0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char1 = javaCharStream0.ReadByte();
      assertEquals('6', char1);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(char1 == char0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "T6.S3Q8A`e/!f).Yl");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(81, token0.beginColumn);
      assertEquals(85, token0.kind);
      assertEquals(81, token0.endColumn);
      assertEquals(89, token0.beginLine);
      assertEquals(89, token0.endLine);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(89, javaCharStream0.getEndLine());
      assertEquals(89, javaCharStream0.getLine());
      assertEquals(81, javaCharStream0.getBeginColumn());
      assertEquals(81, javaCharStream0.getEndColumn());
      assertEquals(89, javaCharStream0.getBeginLine());
      assertEquals(81, javaCharStream0.getColumn());
      assertEquals(".", token0.toString());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '-';
      charArray0[1] = 'c';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'-', 'c', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'-', 'c', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'-', 'c', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "uNAHTdiKCJhk ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 2053, 3035);
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'-', 'c', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'-', 'c', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3035, token0.endColumn);
      assertEquals(3035, token0.beginColumn);
      assertEquals(2053, token0.beginLine);
      assertEquals(2053, token0.endLine);
      assertEquals(102, token0.kind);
      assertArrayEquals(new char[] {'-', 'c', '\u0000', '\u0000'}, charArray0);
      assertEquals(2053, javaCharStream0.getEndLine());
      assertEquals(3035, javaCharStream0.getColumn());
      assertEquals(3035, javaCharStream0.getEndColumn());
      assertEquals(2053, javaCharStream0.getBeginLine());
      assertEquals(2053, javaCharStream0.getLine());
      assertEquals(3035, javaCharStream0.getBeginColumn());
      assertEquals("-", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token1, token0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3036, token1.endColumn);
      assertEquals(3036, token1.beginColumn);
      assertEquals(2053, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(2053, token1.beginLine);
      assertArrayEquals(new char[] {'-', 'c', '\u0000', '\u0000'}, charArray0);
      assertEquals(2053, javaCharStream0.getEndLine());
      assertEquals(3036, javaCharStream0.getColumn());
      assertEquals(3036, javaCharStream0.getEndColumn());
      assertEquals(3036, javaCharStream0.getBeginColumn());
      assertEquals(2053, javaCharStream0.getBeginLine());
      assertEquals(2053, javaCharStream0.getLine());
      assertEquals("c", token1.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 2053, column 3037.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/?Qg<NZ");
      assertNotNull(stringReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 35);
      assertNotNull(bufferedReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = 2648;
      int int1 = (-1138);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-912), (-1138));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("S", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fBo[a$");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertEquals(1, byteArrayInputStream1.available());
      
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertNotNull(pushbackInputStream1);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertEquals(1, byteArrayInputStream1.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream1, (byte)19, (byte)48);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertEquals(1, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.AdjustBuffSize();
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(pushbackInputStream1, pushbackInputStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertEquals(1, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertEquals(1, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(pushbackInputStream1, pushbackInputStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(48, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(48, token0.beginColumn);
      assertEquals(19, token0.endLine);
      assertEquals(19, token0.beginLine);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getLine());
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals("0", token0.toString());
      
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertNotNull(byteArrayInputStream2);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertEquals(1, byteArrayInputStream2.available());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(byteArrayInputStream1, byteArrayInputStream2);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(pushbackInputStream1, pushbackInputStream0);
      assertNotSame(token1, token0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(19, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(48, token1.beginColumn);
      assertEquals(48, token1.endColumn);
      assertEquals(19, token1.beginLine);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getLine());
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      try { 
        pushbackInputStream1.available();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[5] = '>';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      charArray0[2] = 'y';
      charArray0[5] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'y', '\u0000', '\u0000', '>'}, charArray0);
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '>';
      charArray1[1] = 'y';
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'>', 'y', '\u0000'}, charArray1);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5S`,q");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 39, 2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'>', 'y', '\u0000'}, charArray1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'>', 'y', '\u0000'}, charArray1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(token0, token_GTToken0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(token0.equals((Object)token_GTToken0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertEquals(2, token0.endColumn);
      assertEquals(39, token0.beginLine);
      assertEquals(39, token0.endLine);
      assertEquals(124, token0.kind);
      assertEquals(2, token0.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'>', 'y', '\u0000'}, charArray1);
      assertEquals(">", token0.toString());
      assertEquals(39, javaCharStream0.getBeginLine());
      assertEquals(39, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(39, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token_GTToken0, token0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token_GTToken0.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertArrayEquals(new char[] {'>', 'y', '\u0000'}, charArray1);
      assertEquals(39, javaCharStream0.getBeginLine());
      assertEquals(39, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(39, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertNull(token_GTToken0.toString());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("I52 :Si.-_XT~_1");
      assertNotNull(stringReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[2] = 'y';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'y', 'y', 'y'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'y', 'y', 'y'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "I52 :Si.-_XT~_1");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 85, 2053);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'y', 'y', 'y'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'y', 'y', 'y'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2053, token0.beginColumn);
      assertEquals(85, token0.beginLine);
      assertEquals(2055, token0.endColumn);
      assertEquals(85, token0.endLine);
      assertEquals(74, token0.kind);
      assertArrayEquals(new char[] {'y', 'y', 'y'}, charArray0);
      assertEquals(2053, javaCharStream0.getBeginColumn());
      assertEquals(2055, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(2055, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals("yyy", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token1, token0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(85, token1.beginLine);
      assertEquals(85, token1.endLine);
      assertEquals(2055, token1.beginColumn);
      assertEquals(2055, token1.endColumn);
      assertEquals(0, token1.kind);
      assertArrayEquals(new char[] {'y', 'y', 'y'}, charArray0);
      assertEquals(2055, javaCharStream0.getBeginColumn());
      assertEquals(2055, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(2055, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2055, token2.beginColumn);
      assertEquals(2055, token2.endColumn);
      assertEquals(85, token2.beginLine);
      assertEquals(85, token2.endLine);
      assertEquals(0, token2.kind);
      assertArrayEquals(new char[] {'y', 'y', 'y'}, charArray0);
      assertEquals(2055, javaCharStream0.getBeginColumn());
      assertEquals(2055, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(2055, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals("", token2.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(85, token1.beginLine);
      assertEquals(85, token1.endLine);
      assertEquals(2055, token1.beginColumn);
      assertEquals(2055, token1.endColumn);
      assertEquals(0, token1.kind);
      assertArrayEquals(new char[] {'y', 'y', 'y'}, charArray0);
      assertEquals(2055, javaCharStream0.getBeginColumn());
      assertEquals(2055, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(2055, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token3);
      assertEquals(0, token3.kind);
      assertEquals(85, token3.beginLine);
      assertEquals(2055, token3.endColumn);
      assertEquals(85, token3.endLine);
      assertEquals(2055, token3.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'y', 'y', 'y'}, charArray0);
      assertEquals("", token3.toString());
      assertEquals(2055, javaCharStream0.getBeginColumn());
      assertEquals(2055, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(2055, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getLine());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aL1'<S{~+m");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3127, 128);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.nextCharInd = (-1046);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      assertEquals('u', char0);
      
      int int0 = stringReader0.read();
      assertEquals(97, int0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-2207), (-2207));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals((-2207), token0.endLine);
      assertEquals((-2207), token0.beginLine);
      assertEquals((-2206), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-2207), token0.beginColumn);
      assertEquals((-2207), javaCharStream1.getBeginLine());
      assertEquals((-2206), javaCharStream1.getEndColumn());
      assertEquals((-2207), javaCharStream1.getEndLine());
      assertEquals((-2207), javaCharStream1.getLine());
      assertEquals((-2207), javaCharStream1.getBeginColumn());
      assertEquals((-2206), javaCharStream1.getColumn());
      assertEquals("L1", token0.toString());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream2 = new JavaCharStream(pipedInputStream0, (-1665), 1243);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertNotNull(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[5] = 'M';
      charArray0[1] = 'M';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'M', 'M', '\u0000', '\u0000', '\u0000', 'M', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'M', 'M', '\u0000', '\u0000', '\u0000', 'M', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 50, 50);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'M', 'M', '\u0000', '\u0000', '\u0000', 'M', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'M', 'M', '\u0000', '\u0000', '\u0000', 'M', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'M', 'M', '\u0000', '\u0000', '\u0000', 'M', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertArrayEquals(new char[] {'M', 'M', '\u0000', '\u0000', '\u0000', 'M', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(50, token0.beginLine);
      assertEquals(50, token0.beginColumn);
      assertEquals(50, token0.endLine);
      assertEquals(51, token0.endColumn);
      assertArrayEquals(new char[] {'M', 'M', '\u0000', '\u0000', '\u0000', 'M', '\u0000'}, charArray0);
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals("MM", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream1, 67);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 67. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)43;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-31);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-31), (byte)43, (byte) (-31), (byte)43, (byte) (-31)}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-31), (byte) (-31));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-31), (byte)43, (byte) (-31), (byte)43, (byte) (-31)}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-31), (byte)43, (byte) (-31), (byte)43, (byte) (-31)}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 2);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-31), (byte)43, (byte) (-31), (byte)43, (byte) (-31)}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -31, column -26.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '%';
      charArray0[5] = '8';
      charArray0[3] = '8';
      charArray0[3] = '%';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'8', '%', '\u0000', '%', '\u0000', '8', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'8', '%', '\u0000', '%', '\u0000', '8', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 50, 18);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'8', '%', '\u0000', '%', '\u0000', '8', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'8', '%', '\u0000', '%', '\u0000', '8', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(50, token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals(50, token0.endLine);
      assertEquals(18, token0.endColumn);
      assertEquals(18, token0.beginColumn);
      assertArrayEquals(new char[] {'8', '%', '\u0000', '%', '\u0000', '8', '\u0000'}, charArray0);
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals("8", token0.toString());
      
      javaCharStream0.AdjustBuffSize();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'8', '%', '\u0000', '%', '\u0000', '8', '\u0000'}, charArray0);
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getColumn());
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'P';
      charArray0[1] = '%';
      charArray0[2] = 'O';
      charArray0[3] = 'P';
      charArray0[4] = '%';
      charArray0[5] = '%';
      charArray0[6] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'P', '%', 'O', 'P', '%', '%', 'm'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-796), (-796));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'P', '%', 'O', 'P', '%', '%', 'm'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'P', '%', 'O', 'P', '%', '%', 'm'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-796), token0.beginLine);
      assertEquals((-796), token0.beginColumn);
      assertEquals((-796), token0.endColumn);
      assertEquals((-796), token0.endLine);
      assertEquals(74, token0.kind);
      assertArrayEquals(new char[] {'P', '%', 'O', 'P', '%', '%', 'm'}, charArray0);
      assertEquals((-796), javaCharStream0.getColumn());
      assertEquals((-796), javaCharStream0.getLine());
      assertEquals((-796), javaCharStream0.getEndLine());
      assertEquals((-796), javaCharStream0.getBeginLine());
      assertEquals((-796), javaCharStream0.getEndColumn());
      assertEquals((-796), javaCharStream0.getBeginColumn());
      assertEquals("P", token0.toString());
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'P', '%', 'O', 'P', '%', '%', 'm'}, charArray0);
      assertEquals((-796), javaCharStream0.getColumn());
      assertEquals((-796), javaCharStream0.getLine());
      assertEquals((-796), javaCharStream0.getEndLine());
      assertEquals((-796), javaCharStream0.getBeginLine());
      assertEquals((-796), javaCharStream0.getEndColumn());
      assertEquals((-796), javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-796), token1.endLine);
      assertEquals(108, token1.kind);
      assertEquals((-796), token1.beginLine);
      assertEquals((-795), token1.beginColumn);
      assertEquals((-795), token1.endColumn);
      assertArrayEquals(new char[] {'P', '%', 'O', 'P', '%', '%', 'm'}, charArray0);
      assertEquals((-796), javaCharStream0.getLine());
      assertEquals((-795), javaCharStream0.getColumn());
      assertEquals((-796), javaCharStream0.getEndLine());
      assertEquals((-796), javaCharStream0.getBeginLine());
      assertEquals((-795), javaCharStream0.getEndColumn());
      assertEquals((-795), javaCharStream0.getBeginColumn());
      assertEquals("%", token1.toString());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(token0, token1);
      assertFalse(token0.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-796), token0.beginLine);
      assertEquals((-796), token0.beginColumn);
      assertEquals((-796), token0.endColumn);
      assertEquals((-796), token0.endLine);
      assertEquals(74, token0.kind);
      assertArrayEquals(new char[] {'P', '%', 'O', 'P', '%', '%', 'm'}, charArray0);
      assertEquals((-796), javaCharStream0.getLine());
      assertEquals((-795), javaCharStream0.getColumn());
      assertEquals((-796), javaCharStream0.getEndLine());
      assertEquals((-796), javaCharStream0.getBeginLine());
      assertEquals((-795), javaCharStream0.getEndColumn());
      assertEquals((-795), javaCharStream0.getBeginColumn());
      assertEquals("P", token0.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals((-796), token2.beginLine);
      assertEquals((-793), token2.endColumn);
      assertEquals((-796), token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals((-794), token2.beginColumn);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'P', '%', 'O', 'P', '%', '%', 'm'}, charArray0);
      assertEquals("OP", token2.toString());
      assertEquals((-796), javaCharStream0.getLine());
      assertEquals((-793), javaCharStream0.getEndColumn());
      assertEquals((-796), javaCharStream0.getEndLine());
      assertEquals((-793), javaCharStream0.getColumn());
      assertEquals((-796), javaCharStream0.getBeginLine());
      assertEquals((-794), javaCharStream0.getBeginColumn());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      assertEquals((-792), token3.beginColumn);
      assertEquals((-796), token3.beginLine);
      assertEquals((-792), token3.endColumn);
      assertEquals(108, token3.kind);
      assertEquals((-796), token3.endLine);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'P', '%', 'O', 'P', '%', '%', 'm'}, charArray0);
      assertEquals("%", token3.toString());
      assertEquals((-796), javaCharStream0.getLine());
      assertEquals((-792), javaCharStream0.getColumn());
      assertEquals((-792), javaCharStream0.getEndColumn());
      assertEquals((-796), javaCharStream0.getEndLine());
      assertEquals((-792), javaCharStream0.getBeginColumn());
      assertEquals((-796), javaCharStream0.getBeginLine());
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertNotNull(token4);
      assertEquals((-796), token4.beginLine);
      assertEquals(108, token4.kind);
      assertEquals((-791), token4.beginColumn);
      assertEquals((-791), token4.endColumn);
      assertEquals((-796), token4.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'P', '%', 'O', 'P', '%', '%', 'm'}, charArray0);
      assertEquals("%", token4.toString());
      assertEquals((-796), javaCharStream0.getLine());
      assertEquals((-791), javaCharStream0.getEndColumn());
      assertEquals((-791), javaCharStream0.getBeginColumn());
      assertEquals((-791), javaCharStream0.getColumn());
      assertEquals((-796), javaCharStream0.getEndLine());
      assertEquals((-796), javaCharStream0.getBeginLine());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'P', '%', 'O', 'P', '%', '%', 'm'}, charArray0);
      
      boolean boolean0 = charArrayReader1.ready();
      assertTrue(boolean0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'P', '%', 'O', 'P', '%', '%', 'm'}, charArray0);
      
      Token token5 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token5, token1);
      assertNotSame(token5, token4);
      assertNotSame(token5, token2);
      assertNotSame(token5, token0);
      assertNotSame(token5, token3);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token3));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token5);
      assertEquals(108, token5.kind);
      assertEquals((-791), token5.endColumn);
      assertEquals((-791), token5.beginColumn);
      assertEquals((-796), token5.beginLine);
      assertEquals((-796), token5.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'P', '%', 'O', 'P', '%', '%', 'm'}, charArray0);
      assertEquals("%", token5.toString());
      assertEquals((-796), javaCharStream0.getLine());
      assertEquals((-791), javaCharStream0.getEndColumn());
      assertEquals((-791), javaCharStream0.getBeginColumn());
      assertEquals((-791), javaCharStream0.getColumn());
      assertEquals((-796), javaCharStream0.getEndLine());
      assertEquals((-796), javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 59);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 59. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=[XLT?O0WI(9+");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      charArray0[1] = '2';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'+', '2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-1), 7);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'+', '2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(87, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("=", token0.toString());
      
      javaCharStream0.AdjustBuffSize();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(81, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("[", token1.toString());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'+', '2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertNotNull(javaParserTokenManager2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'+', '2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      charArrayReader1.reset();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'+', '2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      javaParserTokenManager2.lengthOfMatch = 1;
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token2 = javaParserTokenManager1.jjFillToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token2);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(2, token2.endColumn);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(81, token2.kind);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("[", token2.toString());
      
      Token token3 = javaParserTokenManager2.getNextToken();
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertNotNull(token3);
      assertEquals(7, token3.beginColumn);
      assertEquals(7, token3.endColumn);
      assertEquals(101, token3.kind);
      assertEquals((-1), token3.endLine);
      assertEquals((-1), token3.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'+', '2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("+", token3.toString());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals(7, javaCharStream1.getBeginColumn());
      assertEquals(7, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(7, javaCharStream1.getEndColumn());
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager3);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager3);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager3));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertNotNull(token4);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token4.endLine);
      assertEquals(5, token4.endColumn);
      assertEquals(74, token4.kind);
      assertEquals(3, token4.beginColumn);
      assertEquals(1, token4.beginLine);
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("XLT", token4.toString());
      
      javaParserTokenManager3.TokenLexicalActions(token2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token4);
      assertNotSame(token2, token3);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager3);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token4));
      assertFalse(token2.equals((Object)token3));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager3));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(2, token2.endColumn);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(81, token2.kind);
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("[", token2.toString());
      
      javaParserTokenManager0.SwitchTo(2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager3);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager3));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/?Qg<NZ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 'N', 'N');
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(78, token0.endLine);
      assertEquals(104, token0.kind);
      assertEquals(78, token0.beginColumn);
      assertEquals(78, token0.endColumn);
      assertEquals(78, token0.beginLine);
      assertEquals(78, javaCharStream0.getBeginLine());
      assertEquals(78, javaCharStream0.getLine());
      assertEquals(78, javaCharStream0.getBeginColumn());
      assertEquals(78, javaCharStream0.getEndColumn());
      assertEquals(78, javaCharStream0.getColumn());
      assertEquals(78, javaCharStream0.getEndLine());
      assertEquals("/", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(91, token1.kind);
      assertEquals(79, token1.beginColumn);
      assertEquals(78, token1.endLine);
      assertEquals(79, token1.endColumn);
      assertEquals(78, token1.beginLine);
      assertEquals(78, javaCharStream0.getBeginLine());
      assertEquals(79, javaCharStream0.getEndColumn());
      assertEquals(78, javaCharStream0.getLine());
      assertEquals(79, javaCharStream0.getColumn());
      assertEquals(79, javaCharStream0.getBeginColumn());
      assertEquals(78, javaCharStream0.getEndLine());
      assertEquals("?", token1.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(78, javaCharStream0.getBeginLine());
      assertEquals(79, javaCharStream0.getEndColumn());
      assertEquals(78, javaCharStream0.getLine());
      assertEquals(79, javaCharStream0.getColumn());
      assertEquals(79, javaCharStream0.getBeginColumn());
      assertEquals(78, javaCharStream0.getEndLine());
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(78, javaCharStream0.getBeginLine());
      assertEquals(79, javaCharStream0.getEndColumn());
      assertEquals(78, javaCharStream0.getLine());
      assertEquals(79, javaCharStream0.getColumn());
      assertEquals(79, javaCharStream0.getBeginColumn());
      assertEquals(78, javaCharStream0.getEndLine());
      assertNull(token_GTToken0.toString());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aL1'<S{~+m");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3127, 128);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = 'y';
      int int0 = stringReader0.read(charArray0);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'a', 'L'}, charArray0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'a', 'L'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 55, 3127);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(3127, token0.beginColumn);
      assertEquals(3127, token0.endColumn);
      assertEquals(55, token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals(55, token0.endLine);
      assertEquals(3127, javaCharStream1.getColumn());
      assertEquals(55, javaCharStream1.getLine());
      assertEquals(3127, javaCharStream1.getEndColumn());
      assertEquals(3127, javaCharStream1.getBeginColumn());
      assertEquals(55, javaCharStream1.getBeginLine());
      assertEquals(55, javaCharStream1.getEndLine());
      assertEquals("1", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 55, column 3130.  Encountered: \"S\" (83), after : \"\\'<\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = 't';
      charArray0[1] = '8';
      charArray0[2] = 't';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'t', '8', 't', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'t', '8', 't', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 50, 50);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'t', '8', 't', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'t', '8', 't', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(50, token0.endLine);
      assertEquals(50, token0.beginColumn);
      assertEquals(50, token0.beginLine);
      assertEquals(52, token0.endColumn);
      assertEquals(74, token0.kind);
      assertArrayEquals(new char[] {'t', '8', 't', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(52, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(52, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals("t8t", token0.toString());
      
      CharArrayReader charArrayReader2 = null;
      try {
        charArrayReader2 = new CharArrayReader(charArray0, 1266, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)89;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)89}, byteArray0);
      
      StringReader stringReader0 = new StringReader("I52 :Si.-_XT~_1");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 284, 15);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('I', char0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char1 = javaCharStream0.ReadByte();
      assertEquals('5', char1);
      assertFalse(char1 == char0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals(284, token0.beginLine);
      assertEquals(284, token0.endLine);
      assertEquals(15, token0.beginColumn);
      assertEquals(15, token0.endColumn);
      assertEquals(284, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(284, javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(284, javaCharStream0.getEndLine());
      assertEquals("2", token0.toString());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "I52 :Si.-_XT~_1");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      
      Token token1 = token_GTToken0.specialToken;
      assertNull(token1);
      
      LineNumberReader lineNumberReader1 = null;
      try {
        lineNumberReader1 = new LineNumberReader(stringReader0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)43;
      byteArray0[3] = (byte)43;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("BN0u");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      int int0 = 105;
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 105, 105);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.jjround = (int) (byte)43;
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('B', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char1 = javaCharStream0.ReadByte();
      assertEquals('N', char1);
      assertFalse(char1 == char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(105, token0.endColumn);
      assertEquals(105, token0.beginLine);
      assertEquals(105, token0.beginColumn);
      assertEquals(105, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(105, javaCharStream0.getLine());
      assertEquals(105, javaCharStream0.getEndColumn());
      assertEquals(105, javaCharStream0.getBeginColumn());
      assertEquals(105, javaCharStream0.getColumn());
      assertEquals(105, javaCharStream0.getEndLine());
      assertEquals(105, javaCharStream0.getBeginLine());
      assertEquals("0", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(105, token0.endColumn);
      assertEquals(105, token0.beginLine);
      assertEquals(105, token0.beginColumn);
      assertEquals(105, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(105, javaCharStream0.getLine());
      assertEquals(105, javaCharStream0.getEndColumn());
      assertEquals(105, javaCharStream0.getBeginColumn());
      assertEquals(105, javaCharStream0.getColumn());
      assertEquals(105, javaCharStream0.getEndLine());
      assertEquals(105, javaCharStream0.getBeginLine());
      assertEquals("0", token0.toString());
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("T6.S3Q8A`e/!f).Yl");
      assertNotNull(stringReader0);
      
      int int0 = 3127;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3127, 123);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('T', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(124, token0.endColumn);
      assertEquals(123, token0.beginColumn);
      assertEquals(3127, token0.endLine);
      assertEquals(3127, token0.beginLine);
      assertEquals(70, token0.kind);
      assertEquals(3127, javaCharStream0.getLine());
      assertEquals(123, javaCharStream0.getBeginColumn());
      assertEquals(124, javaCharStream0.getColumn());
      assertEquals(3127, javaCharStream0.getBeginLine());
      assertEquals(124, javaCharStream0.getEndColumn());
      assertEquals(3127, javaCharStream0.getEndLine());
      assertEquals("6.", token0.toString());
      
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("I52 :Si.-_XT~_1");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 1132);
      assertNotNull(bufferedReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, 100, 1132);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(100, token0.beginLine);
      assertEquals(1134, token0.endColumn);
      assertEquals(1132, token0.beginColumn);
      assertEquals(100, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(1132, javaCharStream0.getBeginColumn());
      assertEquals(1134, javaCharStream0.getColumn());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(1134, javaCharStream0.getEndColumn());
      assertEquals("I52", token0.toString());
      
      boolean boolean0 = bufferedReader0.ready();
      assertTrue(boolean0);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals(':', char0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(1132, javaCharStream0.getBeginColumn());
      assertEquals(1134, javaCharStream0.getColumn());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(1134, javaCharStream0.getEndColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(1137, token1.endColumn);
      assertEquals(1136, token1.beginColumn);
      assertEquals(100, token1.endLine);
      assertEquals(100, token1.beginLine);
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(1137, javaCharStream0.getEndColumn());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(1136, javaCharStream0.getBeginColumn());
      assertEquals(1137, javaCharStream0.getColumn());
      assertEquals("Si", token1.toString());
      
      token0.next = token1;
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(1137, javaCharStream0.getEndColumn());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(1136, javaCharStream0.getBeginColumn());
      assertEquals(1137, javaCharStream0.getColumn());
      assertEquals("I52", token0.toString());
      assertEquals("Si", token1.toString());
      assertEquals("Si", token0.next.toString());
      
      int int0 = lineNumberReader0.read();
      assertEquals((-1), int0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(100, token2.endLine);
      assertEquals(1138, token2.endColumn);
      assertEquals(85, token2.kind);
      assertEquals(1138, token2.beginColumn);
      assertEquals(100, token2.beginLine);
      assertEquals(1138, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(1138, javaCharStream0.getEndColumn());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(1138, javaCharStream0.getColumn());
      assertEquals(".", token2.toString());
      
      LineNumberReader lineNumberReader1 = new LineNumberReader(lineNumberReader0, 100);
      assertFalse(lineNumberReader1.equals((Object)lineNumberReader0));
      assertNotNull(lineNumberReader1);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, lineNumberReader1.getLineNumber());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      
      ByteBuffer byteBuffer0 = charset0.encode(".");
      assertNotNull(byteBuffer0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1, byteBuffer0.limit());
      assertEquals(1, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(1, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      
      StringReader stringReader1 = new StringReader(",<{b~;uY");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      int int1 = stringReader0.read();
      assertEquals((-1), int1);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(int1 == int0);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertNotNull(token3);
      assertEquals(1139, token3.endColumn);
      assertEquals(102, token3.kind);
      assertEquals(1139, token3.beginColumn);
      assertEquals(100, token3.beginLine);
      assertEquals(100, token3.endLine);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("-", token3.toString());
      assertEquals(1139, javaCharStream0.getEndColumn());
      assertEquals(1139, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(1139, javaCharStream0.getColumn());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertNull(token_GTToken1.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token_GTToken0, token_GTToken1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token_GTToken0.equals((Object)token_GTToken1));
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(1139, javaCharStream0.getEndColumn());
      assertEquals(1139, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(1139, javaCharStream0.getColumn());
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1139, javaCharStream0.getEndColumn());
      assertEquals(1139, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(1139, javaCharStream0.getColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1139, javaCharStream0.getEndColumn());
      assertEquals(1139, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(1139, javaCharStream0.getColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1139, javaCharStream0.getEndColumn());
      assertEquals(1139, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(1139, javaCharStream0.getColumn());
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token_GTToken0, token_GTToken1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token_GTToken0.equals((Object)token_GTToken1));
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(1139, javaCharStream0.getEndColumn());
      assertEquals(1139, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(1139, javaCharStream0.getColumn());
      assertNull(token_GTToken0.toString());
      
      String string0 = javaCharStream0.GetImage();
      assertEquals("-", string0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(string0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1139, javaCharStream0.getEndColumn());
      assertEquals(1139, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(1139, javaCharStream0.getColumn());
      
      Token token4 = javaParserTokenManager0.jjFillToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertNotNull(token4);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(100, token4.beginLine);
      assertEquals(100, token4.endLine);
      assertEquals(1139, token4.endColumn);
      assertEquals(102, token4.kind);
      assertEquals(1139, token4.beginColumn);
      assertEquals(1139, javaCharStream0.getEndColumn());
      assertEquals(1139, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(1139, javaCharStream0.getColumn());
      assertEquals("-", token4.toString());
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token5, token0);
      assertNotSame(token5, token1);
      assertNotSame(token5, token3);
      assertNotSame(token5, token4);
      assertNotSame(token5, token2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token2));
      assertNotNull(token5);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(100, token5.endLine);
      assertEquals(100, token5.beginLine);
      assertEquals(1142, token5.endColumn);
      assertEquals(74, token5.kind);
      assertEquals(1140, token5.beginColumn);
      assertEquals(1140, javaCharStream0.getBeginColumn());
      assertEquals(1142, javaCharStream0.getColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(1142, javaCharStream0.getEndColumn());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals("_XT", token5.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 85);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 85. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[15];
      charArray0[0] = '\'';
      charArray0[1] = 'c';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader2);
      
      CharArrayReader charArrayReader3 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertNotNull(charArrayReader3);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader3));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertNull(token0.toString());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader3));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertNotSame(charArrayReader2, charArrayReader3);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader3));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token0.toString());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals('\'', char0);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertNotSame(charArrayReader2, charArrayReader3);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader3));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertNotSame(charArrayReader2, charArrayReader3);
      assertNotSame(token1, token0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader3));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("c", token1.toString());
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertNotSame(charArrayReader2, charArrayReader3);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader3));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(553);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 553. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', '>', '>'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0, 2648);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'>', '>', '>'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, 1340, (-909));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', '>', '>'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'>', '>', '>'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', '>', '>'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', '>', '>'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1340, token0.endLine);
      assertEquals((-909), token0.beginColumn);
      assertEquals((-907), token0.endColumn);
      assertEquals(124, token0.kind);
      assertEquals(1340, token0.beginLine);
      assertArrayEquals(new char[] {'>', '>', '>'}, charArray0);
      assertEquals(1340, javaCharStream0.getBeginLine());
      assertEquals((-909), javaCharStream0.getEndColumn());
      assertEquals((-909), javaCharStream0.getColumn());
      assertEquals((-909), javaCharStream0.getBeginColumn());
      assertEquals(1340, javaCharStream0.getLine());
      assertEquals(1340, javaCharStream0.getEndLine());
      assertEquals(">>>", token0.toString());
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(4094, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1340, token0.endLine);
      assertEquals((-909), token0.beginColumn);
      assertEquals((-907), token0.endColumn);
      assertEquals(124, token0.kind);
      assertEquals(1340, token0.beginLine);
      assertArrayEquals(new char[] {'>', '>', '>'}, charArray0);
      assertEquals(1340, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals((-909), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(">>>", token0.toString());
      
      token0.image = "";
      assertEquals(1340, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals((-909), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals("", token0.toString());
      
      token0.kind = (-584);
      assertEquals(1340, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals((-909), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals("", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[8];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[2] = (byte)1;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)50, (byte)0, (byte)1}, byteArray0);
      
      charArray0[2] = 'y';
      charArray0[5] = 'y';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'y', '\u0000', '\u0000', 'y', '\u0000', '\u0000'}, charArray0);
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'y';
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      charArray1[2] = 'y';
      StringReader stringReader0 = new StringReader("cqZaJf3]Q");
      assertNotNull(stringReader0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`0D_I?r;5w%");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1, (byte)1);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(6, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("cqZaJf", token0.toString());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      
      Token token1 = new Token();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertNull(token1.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 7.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("T6.S3Q8A`e/!f).Yl");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)43}, byteArray0);
      
      StringReader stringReader1 = new StringReader("*^]5,ewM|gPqa1j");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)43, 74);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(lineNumberReader0, (byte)89, (-2147483647));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      char char0 = javaCharStream1.ReadByte();
      assertEquals('*', char0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      char char1 = javaCharStream1.ReadByte();
      assertEquals('^', char1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(char1 == char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DEFAULT");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(75, token0.endColumn);
      assertEquals(43, token0.endLine);
      assertEquals(43, token0.beginLine);
      assertEquals(74, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(43, javaCharStream0.getBeginLine());
      assertEquals(75, javaCharStream0.getColumn());
      assertEquals(43, javaCharStream0.getLine());
      assertEquals(75, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getEndLine());
      assertEquals(74, javaCharStream0.getBeginColumn());
      assertEquals("T6", token0.toString());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'P';
      charArray0[1] = '%';
      charArray0[2] = 'O';
      charArray0[3] = 'P';
      charArray0[4] = '%';
      charArray0[5] = '%';
      StringReader stringReader0 = new StringReader("rKX[zSy{m7");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(114, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 74, 90);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'P', '%', 'O', 'P', '%', '%', '\u0000'}, charArray0);
      
      long long0 = charArrayReader0.skip(9007199254740992L);
      assertEquals(7L, long0);
      assertArrayEquals(new char[] {'P', '%', 'O', 'P', '%', '%', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 1176, 1777);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'P', '%', 'O', 'P', '%', '%', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertEquals(90, token0.beginColumn);
      assertEquals(74, token0.beginLine);
      assertEquals(91, token0.endColumn);
      assertEquals(74, token0.endLine);
      assertEquals(74, token0.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("KX", token0.toString());
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals(74, javaCharStream0.getLine());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals(74, javaCharStream0.getBeginLine());
      assertEquals(74, javaCharStream0.getEndLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token1);
      assertEquals(92, token1.beginColumn);
      assertEquals(81, token1.kind);
      assertEquals(92, token1.endColumn);
      assertEquals(74, token1.endLine);
      assertEquals(74, token1.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals("[", token1.toString());
      assertEquals(92, javaCharStream0.getBeginColumn());
      assertEquals(74, javaCharStream0.getLine());
      assertEquals(92, javaCharStream0.getColumn());
      assertEquals(74, javaCharStream0.getBeginLine());
      assertEquals(92, javaCharStream0.getEndColumn());
      assertEquals(74, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("I52 :Si.-_XT~_1");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 100, 100);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('I', char0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals(100, token0.endLine);
      assertEquals(100, token0.beginLine);
      assertEquals(100, token0.beginColumn);
      assertEquals(101, token0.endColumn);
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(100, javaCharStream0.getBeginColumn());
      assertEquals(101, javaCharStream0.getColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(101, javaCharStream0.getEndColumn());
      assertEquals("52", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(103, token1.endColumn);
      assertEquals(100, token1.beginLine);
      assertEquals(100, token1.endLine);
      assertEquals(92, token1.kind);
      assertEquals(103, token1.beginColumn);
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals(103, javaCharStream0.getColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(103, javaCharStream0.getEndColumn());
      assertEquals(":", token1.toString());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"long\"");
      assertFalse(boolean0);
      
      char char1 = javaCharStream0.ReadByte();
      assertEquals('S', char1);
      assertFalse(char1 == char0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals(103, javaCharStream0.getColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(103, javaCharStream0.getEndColumn());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(100, token2.beginLine);
      assertEquals(104, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(104, token2.beginColumn);
      assertEquals(100, token2.endLine);
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(104, javaCharStream0.getColumn());
      assertEquals(104, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(104, javaCharStream0.getEndColumn());
      assertEquals("i", token2.toString());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = 'S';
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, 100, 66);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[0] = 'i';
      charArray0[2] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'i', '\u0000', '>'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'i', '\u0000', '>'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'i', '\u0000', '>'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager((JavaCharStream) null);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertArrayEquals(new char[] {'i', '\u0000', '>'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("i", token0.toString());
      
      javaParserTokenManager1.MoreLexicalActions();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("I52 :Si.-_XT~_1");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 100, 100);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('I', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals(100, token0.endLine);
      assertEquals(100, token0.beginLine);
      assertEquals(101, token0.endColumn);
      assertEquals(100, token0.beginColumn);
      assertEquals(101, javaCharStream0.getColumn());
      assertEquals(101, javaCharStream0.getEndColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(100, javaCharStream0.getBeginColumn());
      assertEquals("52", token0.toString());
      
      char char1 = javaCharStream0.ReadByte();
      assertEquals(':', char1);
      assertFalse(char1 == char0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(101, javaCharStream0.getColumn());
      assertEquals(101, javaCharStream0.getEndColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(100, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(100, token1.endLine);
      assertEquals(104, token1.endColumn);
      assertEquals(100, token1.beginLine);
      assertEquals(103, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals(104, javaCharStream0.getColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(104, javaCharStream0.getEndColumn());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals("Si", token1.toString());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      Token token2 = Token.newToken(100);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.endColumn);
      assertNull(token2.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals(104, javaCharStream0.getColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(104, javaCharStream0.getEndColumn());
      assertEquals(100, javaCharStream0.getBeginLine());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(105, token3.beginColumn);
      assertEquals(105, token3.endColumn);
      assertEquals(100, token3.endLine);
      assertEquals(85, token3.kind);
      assertEquals(100, token3.beginLine);
      assertEquals(105, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(105, javaCharStream0.getEndColumn());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(105, javaCharStream0.getColumn());
      assertEquals(".", token3.toString());
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertNotNull(javaParserTokenManager2);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(105, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(105, javaCharStream0.getEndColumn());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(105, javaCharStream0.getColumn());
      
      Token token4 = javaParserTokenManager2.getNextToken();
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertNotNull(token4);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(100, token4.beginLine);
      assertEquals(102, token4.kind);
      assertEquals(106, token4.beginColumn);
      assertEquals(106, token4.endColumn);
      assertEquals(100, token4.endLine);
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(106, javaCharStream0.getBeginColumn());
      assertEquals(106, javaCharStream0.getEndColumn());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(106, javaCharStream0.getColumn());
      assertEquals("-", token4.toString());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 27, 0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertNotNull(javaParserTokenManager3);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(106, javaCharStream0.getBeginColumn());
      assertEquals(106, javaCharStream0.getEndColumn());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(106, javaCharStream0.getColumn());
      
      Token token5 = javaParserTokenManager2.getNextToken();
      assertNotSame(token5, token2);
      assertNotSame(token5, token4);
      assertNotSame(token5, token1);
      assertNotSame(token5, token0);
      assertNotSame(token5, token3);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager3);
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token3));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager3));
      assertNotNull(token5);
      assertEquals(100, token5.beginLine);
      assertEquals(100, token5.endLine);
      assertEquals(74, token5.kind);
      assertEquals(109, token5.endColumn);
      assertEquals(107, token5.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals("_XT", token5.toString());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(107, javaCharStream0.getBeginColumn());
      assertEquals(109, javaCharStream0.getColumn());
      assertEquals(109, javaCharStream0.getEndColumn());
      assertEquals(100, javaCharStream0.getBeginLine());
      
      Token token6 = javaParserTokenManager2.jjFillToken();
      assertNotSame(token6, token4);
      assertNotSame(token6, token1);
      assertNotSame(token6, token3);
      assertNotSame(token6, token5);
      assertNotSame(token6, token2);
      assertNotSame(token6, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager3);
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager3));
      assertNotNull(token6);
      assertEquals(100, token6.endLine);
      assertEquals(109, token6.endColumn);
      assertEquals(100, token6.beginLine);
      assertEquals(107, token6.beginColumn);
      assertEquals(74, token6.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals("_XT", token6.toString());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(107, javaCharStream0.getBeginColumn());
      assertEquals(109, javaCharStream0.getColumn());
      assertEquals(109, javaCharStream0.getEndColumn());
      assertEquals(100, javaCharStream0.getBeginLine());
      
      Token token7 = javaParserTokenManager3.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token7, token3);
      assertNotSame(token7, token5);
      assertNotSame(token7, token2);
      assertNotSame(token7, token1);
      assertNotSame(token7, token6);
      assertNotSame(token7, token4);
      assertNotSame(token7, token0);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager2);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token7.equals((Object)token3));
      assertFalse(token7.equals((Object)token5));
      assertFalse(token7.equals((Object)token2));
      assertFalse(token7.equals((Object)token1));
      assertFalse(token7.equals((Object)token6));
      assertFalse(token7.equals((Object)token4));
      assertFalse(token7.equals((Object)token0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertNotNull(token7);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(90, token7.kind);
      assertEquals(100, token7.beginLine);
      assertEquals(110, token7.endColumn);
      assertEquals(100, token7.endLine);
      assertEquals(110, token7.beginColumn);
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(110, javaCharStream0.getColumn());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(110, javaCharStream0.getEndColumn());
      assertEquals("~", token7.toString());
      
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertNotNull(pipedInputStream1);
      assertEquals(0, pipedInputStream1.available());
      
      try { 
        pipedInputStream1.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'O';
      charArray0[3] = 'c';
      charArray0[4] = 'O';
      charArray0[6] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'c', 'c', 'O', 'c', 'O', '\u0000', 'm'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-796), (-796));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'c', 'c', 'O', 'c', 'O', '\u0000', 'm'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'c', 'c', 'O', 'c', 'O', '\u0000', 'm'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean1 = charArrayReader0.ready();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'c', 'c', 'O', 'c', 'O', '\u0000', 'm'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-796), token0.endLine);
      assertEquals((-796), token0.beginLine);
      assertEquals((-792), token0.endColumn);
      assertEquals((-796), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertArrayEquals(new char[] {'c', 'c', 'O', 'c', 'O', '\u0000', 'm'}, charArray0);
      assertEquals((-796), javaCharStream0.getEndLine());
      assertEquals((-792), javaCharStream0.getColumn());
      assertEquals((-792), javaCharStream0.getEndColumn());
      assertEquals((-796), javaCharStream0.getBeginColumn());
      assertEquals((-796), javaCharStream0.getBeginLine());
      assertEquals((-796), javaCharStream0.getLine());
      assertEquals("ccOcO", token0.toString());
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'c', 'c', 'O', 'c', 'O', '\u0000', 'm'}, charArray0);
      assertEquals((-796), javaCharStream0.getEndLine());
      assertEquals((-792), javaCharStream0.getColumn());
      assertEquals((-792), javaCharStream0.getEndColumn());
      assertEquals((-796), javaCharStream0.getBeginColumn());
      assertEquals((-796), javaCharStream0.getBeginLine());
      assertEquals((-796), javaCharStream0.getLine());
      
      token0.beginColumn = 4;
      assertEquals((-796), javaCharStream0.getEndLine());
      assertEquals((-792), javaCharStream0.getColumn());
      assertEquals((-792), javaCharStream0.getEndColumn());
      assertEquals((-796), javaCharStream0.getBeginColumn());
      assertEquals((-796), javaCharStream0.getBeginLine());
      assertEquals((-796), javaCharStream0.getLine());
      assertEquals("ccOcO", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -796, column -791.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[15];
      charArray0[0] = '(';
      charArray0[1] = 'c';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader2);
      
      CharArrayReader charArrayReader3 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertNotNull(charArrayReader3);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader3));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNull(token0.toString());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader3));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(charArrayReader2, charArrayReader3);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertFalse(charArrayReader2.equals((Object)charArrayReader3));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader2, charArrayReader3);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertNotSame(token1, token0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader3));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(77, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("(", token1.toString());
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertNotSame(charArrayReader2, charArrayReader3);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertFalse(charArrayReader2.equals((Object)charArrayReader3));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(553);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 553. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/?Qg<NZ");
      assertNotNull(stringReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      charArray0[1] = '1';
      charArray0[2] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'S', '1', '1', '\u0000'}, charArray0);
      
      StringReader stringReader1 = new StringReader("/?Qg<NZ");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 56, 56);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'S', '1', '1', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      
      int int0 = stringReader1.read(charArray0);
      assertEquals(4, int0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertArrayEquals(new char[] {'/', '?', '', 'Q'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(56, token0.beginColumn);
      assertEquals(56, token0.endColumn);
      assertEquals(56, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(56, token0.endLine);
      assertEquals(56, javaCharStream0.getBeginColumn());
      assertEquals(56, javaCharStream0.getEndLine());
      assertEquals(56, javaCharStream0.getColumn());
      assertEquals(56, javaCharStream0.getLine());
      assertEquals(56, javaCharStream0.getEndColumn());
      assertEquals(56, javaCharStream0.getBeginLine());
      assertEquals("g", token0.toString());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "v?1~AaWt_.U~zL^");
      assertFalse(boolean0);
      
      LineNumberReader lineNumberReader0 = null;
      try {
        lineNumberReader0 = new LineNumberReader(stringReader1, (-2789));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/?QgS<NZ");
      assertNotNull(stringReader0);
      
      int int0 = 35;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 35);
      assertNotNull(bufferedReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = 'N';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'S', '1', '1', 'N'}, charArray0);
      
      StringReader stringReader1 = new StringReader("/?QgS<NZ");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 46, 46);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'S', '1', '1', 'N'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader1, 2648, 35);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'S', '1', '1', 'N'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      
      int int1 = stringReader1.read(charArray0);
      assertEquals(4, int1);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(int1 == int0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertArrayEquals(new char[] {'/', '?', '', 'Q'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      assertEquals(74, token0.kind);
      assertEquals(46, token0.endLine);
      assertEquals(46, token0.beginColumn);
      assertEquals(47, token0.endColumn);
      assertEquals(46, token0.beginLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("gS", token0.toString());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getEndLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(46);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 46. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = '+';
      charArray0[4] = '+';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+'}, charArray0);
      
      StringReader stringReader0 = new StringReader("n,pl");
      assertNotNull(stringReader0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      lineNumberReader0.setLineNumber(63);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+'}, charArray0);
      assertEquals(63, lineNumberReader0.getLineNumber());
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "n,pl");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, (-1654), 63);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+'}, charArray0);
      assertEquals(63, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+'}, charArray0);
      assertEquals(63, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertNotNull(token0);
      assertEquals((-1654), token0.endLine);
      assertEquals(99, token0.kind);
      assertEquals(64, token0.endColumn);
      assertEquals(63, token0.beginColumn);
      assertEquals((-1654), token0.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+'}, charArray0);
      assertEquals("++", token0.toString());
      assertEquals(63, lineNumberReader0.getLineNumber());
      assertEquals(63, javaCharStream0.getBeginColumn());
      assertEquals(64, javaCharStream0.getColumn());
      assertEquals((-1654), javaCharStream0.getEndLine());
      assertEquals((-1654), javaCharStream0.getLine());
      assertEquals((-1654), javaCharStream0.getBeginLine());
      assertEquals(64, javaCharStream0.getEndColumn());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertEquals((-1654), token0.endLine);
      assertEquals(99, token0.kind);
      assertEquals(64, token0.endColumn);
      assertEquals(63, token0.beginColumn);
      assertEquals((-1654), token0.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+'}, charArray0);
      assertEquals("++", token0.toString());
      assertEquals(63, lineNumberReader0.getLineNumber());
      assertEquals(63, javaCharStream0.getBeginColumn());
      assertEquals(64, javaCharStream0.getColumn());
      assertEquals((-1654), javaCharStream0.getEndLine());
      assertEquals((-1654), javaCharStream0.getLine());
      assertEquals((-1654), javaCharStream0.getBeginLine());
      assertEquals(64, javaCharStream0.getEndColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertNotNull(token1);
      assertEquals(99, token1.kind);
      assertEquals(65, token1.beginColumn);
      assertEquals(66, token1.endColumn);
      assertEquals((-1654), token1.endLine);
      assertEquals((-1654), token1.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+'}, charArray0);
      assertEquals("++", token1.toString());
      assertEquals(63, lineNumberReader0.getLineNumber());
      assertEquals(65, javaCharStream0.getBeginColumn());
      assertEquals((-1654), javaCharStream0.getEndLine());
      assertEquals(66, javaCharStream0.getColumn());
      assertEquals((-1654), javaCharStream0.getLine());
      assertEquals((-1654), javaCharStream0.getBeginLine());
      assertEquals(66, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fgaL1'<S{~+m_");
      assertNotNull(stringReader0);
      
      char char0 = '^';
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-134), 24);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char1 = javaCharStream0.ReadByte();
      assertEquals('f', char1);
      assertFalse(char1 == char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals((-134), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(24, token0.beginColumn);
      assertEquals(27, token0.endColumn);
      assertEquals((-134), token0.endLine);
      assertEquals((-134), javaCharStream0.getEndLine());
      assertEquals((-134), javaCharStream0.getBeginLine());
      assertEquals(27, javaCharStream0.getEndColumn());
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals(27, javaCharStream0.getColumn());
      assertEquals((-134), javaCharStream0.getLine());
      assertEquals("gaL1", token0.toString());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals((-134), javaCharStream0.getEndLine());
      assertEquals((-134), javaCharStream0.getBeginLine());
      assertEquals(27, javaCharStream0.getEndColumn());
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals(27, javaCharStream0.getColumn());
      assertEquals((-134), javaCharStream0.getLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -134, column 30.  Encountered: \"S\" (83), after : \"\\'<\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)66;
      byteArray0[0] = (byte)43;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)43, (byte)66, (byte)66, (byte)0, (byte)0}, byteArray0);
      
      StringReader stringReader0 = new StringReader("B+6MN0u");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 85, 85);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.jjround = (int) (byte)43;
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.jjround = (int) (byte)66;
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = File.separatorChar;
      assertEquals('/', char0);
      
      char char1 = javaCharStream0.ReadByte();
      assertEquals('B', char1);
      assertFalse(char1 == char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(85, token0.beginColumn);
      assertEquals(85, token0.beginLine);
      assertEquals(85, token0.endLine);
      assertEquals(85, token0.endColumn);
      assertEquals(101, token0.kind);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals("+", token0.toString());
      
      boolean boolean1 = JavaCharStream.staticFlag;
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(212);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 212. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7^PKiK[sJm");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 18, (-1773));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      assertEquals('u', char0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1773), token0.endColumn);
      assertEquals((-1773), token0.beginColumn);
      assertEquals(18, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(18, token0.beginLine);
      assertEquals((-1773), javaCharStream0.getBeginColumn());
      assertEquals((-1773), javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals((-1773), javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals("7", token0.toString());
      
      String string0 = "";
      StringReader stringReader1 = new StringReader("");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager((JavaCharStream) null);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertNotNull(javaParserTokenManager2);
      
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'G'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'G'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, (-513), 50);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'G'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'G'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(50, token0.beginColumn);
      assertEquals(50, token0.endColumn);
      assertEquals((-513), token0.endLine);
      assertEquals((-513), token0.beginLine);
      assertEquals(74, token0.kind);
      assertArrayEquals(new char[] {'G'}, charArray0);
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals((-513), javaCharStream0.getEndLine());
      assertEquals((-513), javaCharStream0.getBeginLine());
      assertEquals((-513), javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals("G", token0.toString());
      
      int int0 = 2204;
      CharArrayReader charArrayReader2 = null;
      try {
        charArrayReader2 = new CharArrayReader(charArray0, 40, 2204);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("Z-p]V(RfK%5]vya");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 375);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, 375, (-2367));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(375, token0.endLine);
      assertEquals((-2367), token0.endColumn);
      assertEquals(375, token0.beginLine);
      assertEquals((-2367), token0.beginColumn);
      assertEquals((-2367), javaCharStream0.getBeginColumn());
      assertEquals((-2367), javaCharStream0.getEndColumn());
      assertEquals(375, javaCharStream0.getEndLine());
      assertEquals((-2367), javaCharStream0.getColumn());
      assertEquals(375, javaCharStream0.getLine());
      assertEquals(375, javaCharStream0.getBeginLine());
      assertEquals("Z", token0.toString());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Token token1 = Token.newToken((-1809));
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertNull(token1.toString());
      
      StringReader stringReader1 = new StringReader("Z-p]V(RfK%5]vya");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      
      ByteBuffer byteBuffer0 = charset0.encode("/=");
      assertNotNull(byteBuffer0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(2, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2 cap=2]", byteBuffer0.toString());
      assertEquals(2, byteBuffer0.capacity());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("java.nio.HeapByteBuffer[pos=2 lim=2 cap=2]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(2, byteBuffer0.position());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(2, byteBuffer0.capacity());
      assertEquals("/=", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2367), javaCharStream0.getBeginColumn());
      assertEquals((-2367), javaCharStream0.getEndColumn());
      assertEquals(375, javaCharStream0.getEndLine());
      assertEquals((-2367), javaCharStream0.getColumn());
      assertEquals(375, javaCharStream0.getLine());
      assertEquals(375, javaCharStream0.getBeginLine());
      
      Token token2 = javaParserTokenManager1.jjFillToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token2);
      assertEquals(375, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals((-2367), token2.beginColumn);
      assertEquals((-2367), token2.endColumn);
      assertEquals(375, token2.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("", token2.toString());
      assertEquals((-2367), javaCharStream0.getBeginColumn());
      assertEquals((-2367), javaCharStream0.getEndColumn());
      assertEquals(375, javaCharStream0.getEndLine());
      assertEquals((-2367), javaCharStream0.getColumn());
      assertEquals(375, javaCharStream0.getLine());
      assertEquals(375, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=[XLT?O0WI(9+");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = '+';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'+', '+'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-1), 7);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'+', '+'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(87, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("=", token0.toString());
      
      javaCharStream0.AdjustBuffSize();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'+', '+'}, charArray0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(charArrayReader1, (-1), '+');
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream2);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'+', '+'}, charArray0);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      
      Token token1 = javaParserTokenManager1.jjFillToken();
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(87, token1.kind);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("=", token1.toString());
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertNotNull(javaParserTokenManager2);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'+', '+'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaParserTokenManager2.defaultLexState = 1;
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token2 = Token.newToken(0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.endColumn);
      assertNull(token2.toString());
      
      javaParserTokenManager0.setDebugStream(javaParserTokenManager1.debugStream);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0, 1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertNotNull(javaParserTokenManager3);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager3);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager3));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(81, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(2, token3.beginColumn);
      assertEquals(2, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("[", token3.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager3.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 14.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      charArray0[2] = 'i';
      charArray0[3] = '>';
      charArray0[4] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', '\u0000', 'i', '>', 'i', '\u0000'}, charArray0);
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '>';
      charArray1[1] = 'i';
      charArray1[2] = 'i';
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'>', 'i', 'i'}, charArray1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 100, 2648);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', 'i', 'i'}, charArray1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', 'i', 'i'}, charArray1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', 'i', 'i'}, charArray1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(124, token0.kind);
      assertEquals(2648, token0.endColumn);
      assertEquals(2648, token0.beginColumn);
      assertEquals(100, token0.beginLine);
      assertEquals(100, token0.endLine);
      assertArrayEquals(new char[] {'>', 'i', 'i'}, charArray1);
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(2648, javaCharStream0.getColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(2648, javaCharStream0.getBeginColumn());
      assertEquals(2648, javaCharStream0.getEndColumn());
      assertEquals(">", token0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"sjU!dQ+W");
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 100);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 100. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[5] = '>';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      charArray0[2] = 'y';
      charArray0[5] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'y', '\u0000', '\u0000', '>'}, charArray0);
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '>';
      charArray1[1] = 'y';
      charArray1[2] = 'y';
      StringReader stringReader0 = new StringReader("cqZaJf3]Q");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 2648, 29);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'y', '\u0000', '\u0000', '>'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'>', 'y', 'y'}, charArray1);
      
      javaCharStream0.Done();
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'y', '\u0000', '\u0000', '>'}, charArray0);
      
      charArrayReader0.close();
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'y', '\u0000', '\u0000', '>'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 45, 70);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      int int0 = stringReader0.read(charArray1);
      assertEquals(3, int0);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'c', 'q', 'Z'}, charArray1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertEquals(74, token0.kind);
      assertEquals(70, token0.beginColumn);
      assertEquals(45, token0.beginLine);
      assertEquals(72, token0.endColumn);
      assertEquals(45, token0.endLine);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("aJf", token0.toString());
      assertEquals(72, javaCharStream1.getColumn());
      assertEquals(72, javaCharStream1.getEndColumn());
      assertEquals(70, javaCharStream1.getBeginColumn());
      assertEquals(45, javaCharStream1.getEndLine());
      assertEquals(45, javaCharStream1.getLine());
      assertEquals(45, javaCharStream1.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(29);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 29. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("float");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "float");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '\u0084';
      charArray0[1] = '\u0084';
      charArray0[2] = 'O';
      charArray0[3] = 'O';
      charArray0[4] = '\u0084';
      charArray0[5] = 'O';
      charArray0[6] = 'O';
      charArray0[7] = 'O';
      charArray0[8] = '\u0084';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0084', '\u0084', 'O', 'O', '\u0084', 'O', 'O', 'O', '\u0084'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-796), 418);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'\u0084', '\u0084', 'O', 'O', '\u0084', 'O', 'O', 'O', '\u0084'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'\u0084', '\u0084', 'O', 'O', '\u0084', 'O', 'O', 'O', '\u0084'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean1 = charArrayReader0.ready();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0084', '\u0084', 'O', 'O', '\u0084', 'O', 'O', 'O', '\u0084'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -796, column 418.  Encountered: \"\\u0084\" (132), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '\'';
      charArray0[1] = '8';
      charArray0[2] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '8', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'\'', '8', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 50, 50);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'\'', '8', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'\'', '8', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(72, token0.kind);
      assertEquals(52, token0.endColumn);
      assertEquals(50, token0.endLine);
      assertEquals(50, token0.beginLine);
      assertEquals(50, token0.beginColumn);
      assertArrayEquals(new char[] {'\'', '8', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(52, javaCharStream0.getEndColumn());
      assertEquals(52, javaCharStream0.getColumn());
      assertEquals("'8'", token0.toString());
      
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/?Qg<NZ");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[4];
      charArray0[2] = '1';
      charArray0[3] = 'N';
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 'N', 'N');
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '1', 'N'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      StringReader stringReader1 = new StringReader("I*");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 0, 21);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/?Qg<NZ");
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '1', 'N'}, charArray0);
      
      charArrayReader0.close();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '1', 'N'}, charArray0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(charArrayReader1, 0, 18);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertNotNull(javaCharStream2);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '1', 'N'}, charArray0);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '1';
      charArray1[1] = 'N';
      charArray1[2] = '1';
      charArray1[3] = '1';
      charArray1[4] = 'N';
      int int0 = stringReader0.read(charArray1);
      assertEquals(5, int0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(charArray1, charArray0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'/', '?', '', 'Q', 'g'}, charArray1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      assertEquals(88, token0.kind);
      assertEquals(78, token0.endColumn);
      assertEquals(78, token0.endLine);
      assertEquals(78, token0.beginColumn);
      assertEquals(78, token0.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("<", token0.toString());
      assertEquals(78, javaCharStream0.getBeginLine());
      assertEquals(78, javaCharStream0.getColumn());
      assertEquals(78, javaCharStream0.getEndColumn());
      assertEquals(78, javaCharStream0.getEndLine());
      assertEquals(78, javaCharStream0.getLine());
      assertEquals(78, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(88, token0.kind);
      assertEquals(78, token0.endColumn);
      assertEquals(78, token0.endLine);
      assertEquals(78, token0.beginColumn);
      assertEquals(78, token0.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("<", token0.toString());
      assertEquals(78, javaCharStream0.getBeginLine());
      assertEquals(78, javaCharStream0.getColumn());
      assertEquals(78, javaCharStream0.getEndColumn());
      assertEquals(78, javaCharStream0.getEndLine());
      assertEquals(78, javaCharStream0.getLine());
      assertEquals(78, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fgaL1'<S{~+m_");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'j'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'j'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'j'}, charArray0);
      
      int int0 = 2145388542;
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader2, 2145388542, (-1528));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'j'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'j'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader2, charArrayReader1);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-1528), token0.beginColumn);
      assertEquals((-1528), token0.endColumn);
      assertEquals(2145388542, token0.endLine);
      assertEquals(2145388542, token0.beginLine);
      assertArrayEquals(new char[] {'j'}, charArray0);
      assertEquals(2145388542, javaCharStream0.getEndLine());
      assertEquals(2145388542, javaCharStream0.getLine());
      assertEquals((-1528), javaCharStream0.getEndColumn());
      assertEquals((-1528), javaCharStream0.getBeginColumn());
      assertEquals((-1528), javaCharStream0.getColumn());
      assertEquals(2145388542, javaCharStream0.getBeginLine());
      assertEquals("j", token0.toString());
      
      javaCharStream0.AdjustBuffSize();
      assertNotSame(charArrayReader2, charArrayReader1);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'j'}, charArray0);
      assertEquals(2145388542, javaCharStream0.getEndLine());
      assertEquals(2145388542, javaCharStream0.getLine());
      assertEquals((-1528), javaCharStream0.getEndColumn());
      assertEquals((-1528), javaCharStream0.getBeginColumn());
      assertEquals((-1528), javaCharStream0.getColumn());
      assertEquals(2145388542, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'j'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 56);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 56. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[15];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      charArrayReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 44, 44);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 44, column 45.  Encountered: \"\\'\" (39), after : \"\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("T6.S3Q8A`e/!f).Yl");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      StringReader stringReader1 = new StringReader("Zm/WHB0L");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, (byte)89, 81);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('T', char0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      StringReader stringReader2 = new StringReader("Zm/WHB0L");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      javaCharStream0.ReInit((Reader) stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char1 = javaCharStream0.ReadByte();
      assertEquals('Z', char1);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(char1 == char0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("m", token0.toString());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LineNumberReader lineNumberReader1 = new LineNumberReader(stringReader0, 32);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(lineNumberReader1.equals((Object)lineNumberReader0));
      assertNotNull(lineNumberReader1);
      assertEquals(0, lineNumberReader1.getLineNumber());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      ByteBuffer byteBuffer0 = charset0.encode("Zm/WHB0L");
      assertNotNull(byteBuffer0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(8, byteBuffer0.limit());
      assertEquals(8, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(8, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      
      StringReader stringReader3 = new StringReader("dpC1YP^>{6c&QxU4:-\"");
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertNotNull(stringReader3);
      
      int int0 = stringReader2.read();
      assertEquals((-1), int0);
      assertNotSame(stringReader2, stringReader3);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertFalse(stringReader2.equals((Object)stringReader3));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(token1, token0);
      assertNotSame(lineNumberReader0, lineNumberReader1);
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(token1.equals((Object)token0));
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertNotNull(token1);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(104, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("/", token1.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(lineNumberReader0, lineNumberReader1);
      assertNotSame(token0, token1);
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertFalse(token0.equals((Object)token1));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("m", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(lineNumberReader0, lineNumberReader1);
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(lineNumberReader0, lineNumberReader1);
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(lineNumberReader0, lineNumberReader1);
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 78);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 78. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'W';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = '\'';
      charArray0[4] = '4';
      charArray0[5] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'W', 'a', 'a', '\'', '4', 'a'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 2130, 44);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'W', 'a', 'a', '\'', '4', 'a'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'W', 'a', 'a', '\'', '4', 'a'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2130, token0.beginLine);
      assertEquals(2130, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(44, token0.beginColumn);
      assertEquals(46, token0.endColumn);
      assertArrayEquals(new char[] {'W', 'a', 'a', '\'', '4', 'a'}, charArray0);
      assertEquals(2130, javaCharStream0.getEndLine());
      assertEquals(2130, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getColumn());
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals(2130, javaCharStream0.getBeginLine());
      assertEquals("Waa", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'W', 'a', 'a', '\'', '4', 'a'}, charArray0);
      assertEquals(2130, javaCharStream0.getEndLine());
      assertEquals(2130, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getColumn());
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals(2130, javaCharStream0.getBeginLine());
      
      Token token1 = Token.newToken(2130);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endColumn);
      assertNull(token1.toString());
      
      long long0 = charArrayReader0.skip(0);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'W', 'a', 'a', '\'', '4', 'a'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 46, 74);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'W', 'a', 'a', '\'', '4', 'a'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'W', 'a', 'a', '\'', '4', 'a'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'W', 'a', 'a', '\'', '4', 'a'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 2130, column 50.  Encountered: <EOF> after : \"\\'4a\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', '>', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'>', '>', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, '>', 49);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'>', '>', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'>', '>', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(62, token0.endLine);
      assertEquals(50, token0.endColumn);
      assertEquals(124, token0.kind);
      assertEquals(49, token0.beginColumn);
      assertEquals(62, token0.beginLine);
      assertArrayEquals(new char[] {'>', '>', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(62, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(62, javaCharStream0.getEndLine());
      assertEquals(62, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(">>", token0.toString());
      
      Token token1 = Token.newToken((-3592));
      assertNotNull(token1);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertNull(token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertArrayEquals(new char[] {'>', '>', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(62, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(62, javaCharStream0.getEndLine());
      assertEquals(62, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertNull(token1.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4095, javaCharStream0.bufpos);
      assertEquals(62, token0.endLine);
      assertEquals(50, token0.endColumn);
      assertEquals(124, token0.kind);
      assertEquals(49, token0.beginColumn);
      assertEquals(62, token0.beginLine);
      assertArrayEquals(new char[] {'>', '>', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(62, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(">>", token0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4095, javaCharStream0.bufpos);
      assertEquals(62, token0.endLine);
      assertEquals(50, token0.endColumn);
      assertEquals(124, token0.kind);
      assertEquals(49, token0.beginColumn);
      assertEquals(62, token0.beginLine);
      assertArrayEquals(new char[] {'>', '>', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(62, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(">>", token0.toString());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'M';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'M'}, charArray0);
      
      StringReader stringReader0 = new StringReader("\"+=\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 87, 2648);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'M'}, charArray0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(87, token0.endLine);
      assertEquals(87, token0.beginLine);
      assertEquals(2648, token0.beginColumn);
      assertEquals(2649, token0.endColumn);
      assertEquals(110, token0.kind);
      assertEquals(2649, javaCharStream0.getColumn());
      assertEquals(2648, javaCharStream0.getBeginColumn());
      assertEquals(87, javaCharStream0.getEndLine());
      assertEquals(87, javaCharStream0.getBeginLine());
      assertEquals(2649, javaCharStream0.getEndColumn());
      assertEquals(87, javaCharStream0.getLine());
      assertEquals("+=", token0.toString());
      
      token0.beginLine = 25;
      assertEquals(2649, javaCharStream0.getColumn());
      assertEquals(2648, javaCharStream0.getBeginColumn());
      assertEquals(87, javaCharStream0.getEndLine());
      assertEquals(87, javaCharStream0.getBeginLine());
      assertEquals(2649, javaCharStream0.getEndColumn());
      assertEquals(87, javaCharStream0.getLine());
      assertEquals("+=", token0.toString());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(87, token0.endLine);
      assertEquals(25, token0.beginLine);
      assertEquals(2648, token0.beginColumn);
      assertEquals(2649, token0.endColumn);
      assertEquals(110, token0.kind);
      assertEquals(2649, javaCharStream0.getColumn());
      assertEquals(2648, javaCharStream0.getBeginColumn());
      assertEquals(87, javaCharStream0.getEndLine());
      assertEquals(87, javaCharStream0.getBeginLine());
      assertEquals(2649, javaCharStream0.getEndColumn());
      assertEquals(87, javaCharStream0.getLine());
      assertEquals("+=", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2649, javaCharStream0.getColumn());
      assertEquals(2648, javaCharStream0.getBeginColumn());
      assertEquals(87, javaCharStream0.getEndLine());
      assertEquals(87, javaCharStream0.getBeginLine());
      assertEquals(2649, javaCharStream0.getEndColumn());
      assertEquals(87, javaCharStream0.getLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2649, javaCharStream0.getColumn());
      assertEquals(2648, javaCharStream0.getBeginColumn());
      assertEquals(87, javaCharStream0.getEndLine());
      assertEquals(87, javaCharStream0.getBeginLine());
      assertEquals(2649, javaCharStream0.getEndColumn());
      assertEquals(87, javaCharStream0.getLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2649, javaCharStream0.getColumn());
      assertEquals(2648, javaCharStream0.getBeginColumn());
      assertEquals(87, javaCharStream0.getEndLine());
      assertEquals(87, javaCharStream0.getBeginLine());
      assertEquals(2649, javaCharStream0.getEndColumn());
      assertEquals(87, javaCharStream0.getLine());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<FLOATING_POINT_LITERAL>");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'y';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'y', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'y', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 50, 50);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(50, token0.beginLine);
      assertEquals(50, token0.endColumn);
      assertEquals(50, token0.beginColumn);
      assertEquals(50, token0.endLine);
      assertEquals(88, token0.kind);
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals("<", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getBeginLine());
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(22, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(72, token1.endColumn);
      assertEquals(50, token1.beginLine);
      assertEquals(51, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(50, token1.endLine);
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(72, javaCharStream0.getColumn());
      assertEquals(72, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals("FLOATING_POINT_LITERAL", token1.toString());
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {}, charArray1);
      
      CharArrayReader charArrayReader3 = new CharArrayReader(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader3);
      assertArrayEquals(new char[] {'y', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader4 = new CharArrayReader(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader4.equals((Object)charArrayReader3));
      assertFalse(charArrayReader4.equals((Object)charArrayReader1));
      assertFalse(charArrayReader4.equals((Object)charArrayReader2));
      assertFalse(charArrayReader4.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader4);
      assertArrayEquals(new char[] {}, charArray1);
      
      LineNumberReader lineNumberReader0 = null;
      try {
        lineNumberReader0 = new LineNumberReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[2];
      StringReader stringReader0 = new StringReader(">}5u,_P~rBVcOI{");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 103, 59);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      Token token0 = Token.newToken((-1));
      assertNotNull(token0);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertNull(token0.toString());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(59, token1.beginColumn);
      assertEquals(124, token1.kind);
      assertEquals(103, token1.beginLine);
      assertEquals(103, token1.endLine);
      assertEquals(59, token1.endColumn);
      assertEquals(59, javaCharStream0.getColumn());
      assertEquals(59, javaCharStream0.getBeginColumn());
      assertEquals(103, javaCharStream0.getEndLine());
      assertEquals(103, javaCharStream0.getLine());
      assertEquals(59, javaCharStream0.getEndColumn());
      assertEquals(103, javaCharStream0.getBeginLine());
      assertEquals(">", token1.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(59, javaCharStream0.getColumn());
      assertEquals(59, javaCharStream0.getBeginColumn());
      assertEquals(103, javaCharStream0.getEndLine());
      assertEquals(103, javaCharStream0.getLine());
      assertEquals(59, javaCharStream0.getEndColumn());
      assertEquals(103, javaCharStream0.getBeginLine());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertFalse(token_GTToken0.equals((Object)token1));
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertFalse(token_GTToken1.equals((Object)token1));
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertNull(token_GTToken1.toString());
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token_GTToken1);
      assertNotSame(token2, token_GTToken0);
      assertNotSame(token2, token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token_GTToken1));
      assertFalse(token2.equals((Object)token_GTToken0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(124, token2.kind);
      assertEquals(59, token2.beginColumn);
      assertEquals(103, token2.beginLine);
      assertEquals(103, token2.endLine);
      assertEquals(59, token2.endColumn);
      assertEquals(59, javaCharStream0.getColumn());
      assertEquals(59, javaCharStream0.getBeginColumn());
      assertEquals(103, javaCharStream0.getEndLine());
      assertEquals(103, javaCharStream0.getLine());
      assertEquals(59, javaCharStream0.getEndColumn());
      assertEquals(103, javaCharStream0.getBeginLine());
      assertEquals(">", token2.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(80, token3.kind);
      assertEquals(60, token3.beginColumn);
      assertEquals(60, token3.endColumn);
      assertEquals(103, token3.beginLine);
      assertEquals(103, token3.endLine);
      assertEquals(60, javaCharStream0.getBeginColumn());
      assertEquals(103, javaCharStream0.getEndLine());
      assertEquals(103, javaCharStream0.getLine());
      assertEquals(60, javaCharStream0.getEndColumn());
      assertEquals(103, javaCharStream0.getBeginLine());
      assertEquals(60, javaCharStream0.getColumn());
      assertEquals("}", token3.toString());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[1] = '`';
      charArray0[2] = '|';
      charArray0[1] = 'T';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'=', 'T', '|', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringReader stringReader1 = new StringReader("cqZaJf3]Q");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"synchronized\"");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'=', 'T', '|', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 522, 11);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'=', 'T', '|', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'=', 'T', '|', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertEquals(522, token0.endLine);
      assertEquals(87, token0.kind);
      assertEquals(11, token0.endColumn);
      assertEquals(11, token0.beginColumn);
      assertEquals(522, token0.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'=', 'T', '|', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("=", token0.toString());
      assertEquals(522, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(522, javaCharStream0.getEndLine());
      assertEquals(522, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getBeginColumn());
      
      Token token1 = new Token();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertNull(token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token2);
      assertEquals(74, token2.kind);
      assertEquals(522, token2.beginLine);
      assertEquals(522, token2.endLine);
      assertEquals(12, token2.endColumn);
      assertEquals(12, token2.beginColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'=', 'T', '|', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("T", token2.toString());
      assertEquals(522, javaCharStream0.getLine());
      assertEquals(12, javaCharStream0.getColumn());
      assertEquals(12, javaCharStream0.getEndColumn());
      assertEquals(522, javaCharStream0.getEndLine());
      assertEquals(522, javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[21];
      charArray0[0] = '%';
      EvoSuiteFile evoSuiteFile0 = null;
      charArray0[1] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 107, 107);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(107, token0.endLine);
      assertEquals(108, token0.kind);
      assertEquals(107, token0.beginLine);
      assertEquals(107, token0.endColumn);
      assertEquals(107, token0.beginColumn);
      assertEquals(107, javaCharStream0.getColumn());
      assertEquals(107, javaCharStream0.getBeginColumn());
      assertEquals(107, javaCharStream0.getEndLine());
      assertEquals(107, javaCharStream0.getEndColumn());
      assertEquals(107, javaCharStream0.getBeginLine());
      assertEquals(107, javaCharStream0.getLine());
      assertEquals("%", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(108, token1.endColumn);
      assertEquals(66, token1.kind);
      assertEquals(107, token1.endLine);
      assertEquals(108, token1.beginColumn);
      assertEquals(107, token1.beginLine);
      assertEquals(108, javaCharStream0.getColumn());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(107, javaCharStream0.getEndLine());
      assertEquals(107, javaCharStream0.getBeginLine());
      assertEquals(107, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getEndColumn());
      assertEquals("9", token1.toString());
      
      token1.kind = 22;
      assertEquals(108, javaCharStream0.getColumn());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(107, javaCharStream0.getEndLine());
      assertEquals(107, javaCharStream0.getBeginLine());
      assertEquals(107, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getEndColumn());
      assertEquals("9", token1.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 107, column 109.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[15];
      charArray0[0] = '\'';
      charArray0[1] = 'c';
      EvoSuiteFile evoSuiteFile0 = null;
      StringReader stringReader0 = new StringReader("ni#]<CdP3e#M");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      int int0 = 105;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 105, 105);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('n', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(105, token0.endLine);
      assertEquals(105, token0.endColumn);
      assertEquals(105, token0.beginColumn);
      assertEquals(105, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(105, javaCharStream0.getEndLine());
      assertEquals(105, javaCharStream0.getLine());
      assertEquals(105, javaCharStream0.getEndColumn());
      assertEquals(105, javaCharStream0.getBeginColumn());
      assertEquals(105, javaCharStream0.getBeginLine());
      assertEquals(105, javaCharStream0.getColumn());
      assertEquals("i", token0.toString());
      
      char char1 = javaCharStream0.ReadByte();
      assertEquals(']', char1);
      assertFalse(char1 == char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(105, javaCharStream0.getEndLine());
      assertEquals(105, javaCharStream0.getLine());
      assertEquals(105, javaCharStream0.getEndColumn());
      assertEquals(105, javaCharStream0.getBeginColumn());
      assertEquals(105, javaCharStream0.getBeginLine());
      assertEquals(105, javaCharStream0.getColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 105, column 106.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 's';
      charArray0[1] = '`';
      charArray0[2] = 's';
      charArray0[3] = 'f';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'s', '`', 's', 'f'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'s', '`', 's', 'f'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 122, 1266);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'s', '`', 's', 'f'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'s', '`', 's', 'f'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'s', '`', 's', 'f'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertArrayEquals(new char[] {'s', '`', 's', 'f'}, charArray0);
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals("s", token0.toString());
      
      JavaCharStream javaCharStream2 = new JavaCharStream(charArrayReader1, 924, 1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream2);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'s', '`', 's', 'f'}, charArray0);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'s', '`', 's', 'f'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'s', '`', 's', 'f'}, charArray0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      JavaCharStream javaCharStream3 = new JavaCharStream(charArrayReader0, (-5083), 924);
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertNotNull(javaCharStream3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream3.bufpos);
      assertArrayEquals(new char[] {'s', '`', 's', 'f'}, charArray0);
      assertEquals(0, javaCharStream3.getBeginLine());
      assertEquals(0, javaCharStream3.getBeginColumn());
      
      JavaCharStream javaCharStream4 = null;
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream3));
      assertNotNull(javaParserTokenManager2);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'s', '`', 's', 'f'}, charArray0);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream3);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream3);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream3));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream3));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertArrayEquals(new char[] {'s', '`', 's', 'f'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals("s", token0.toString());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      
      Token token1 = token_GTToken0.next;
      assertNull(token1);
      
      javaParserTokenManager2.setDebugStream(javaParserTokenManager0.debugStream);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream3);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream3);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream3));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream3));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'s', '`', 's', 'f'}, charArray0);
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager3 = null;
      try {
        javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@aXLT?O0WI(9+");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[2];
      charArray0[1] = '\u0000';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-1), 7);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5S`,q");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(charArrayReader0, 21, (-627));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertNotNull(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(86, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("@", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(5, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("aXLT", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(91, token2.kind);
      assertEquals(6, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(6, token2.beginColumn);
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("?", token2.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1, column 7.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[19];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 2648, 2648);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'i';
      charArray1[1] = '(';
      charArray1[2] = 'i';
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'i', '(', 'i'}, charArray1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'i', '(', 'i'}, charArray1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'i', '(', 'i'}, charArray1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertArrayEquals(new char[] {'i', '(', 'i'}, charArray1);
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals("i", token0.toString());
      
      javaParserTokenManager0.jjnewStateCnt = 2648;
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertArrayEquals(new char[] {'i', '(', 'i'}, charArray1);
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals("i", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token1);
      assertEquals(77, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'i', '(', 'i'}, charArray1);
      assertEquals("(", token1.toString());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(2, javaCharStream1.getColumn());
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'i', '(', 'i'}, charArray1);
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(2, javaCharStream1.getColumn());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token2);
      assertEquals(3, token2.beginColumn);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'i', '(', 'i'}, charArray1);
      assertEquals("i", token2.toString());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(3, javaCharStream1.getEndColumn());
      assertEquals(3, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(3, javaCharStream1.getColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'i', '(', 'i'}, charArray1);
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(3, javaCharStream1.getEndColumn());
      assertEquals(3, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(3, javaCharStream1.getColumn());
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(77, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'i', '(', 'i'}, charArray1);
      assertEquals("(", token1.toString());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(3, javaCharStream1.getEndColumn());
      assertEquals(3, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(3, javaCharStream1.getColumn());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("fBo[a$");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      charArray0[2] = 'k';
      charArray0[3] = 'x';
      charArray0[4] = 'g';
      charArray0[5] = 'Y';
      charArray0[6] = '_';
      charArray0[7] = '0';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'D', 'D', 'k', 'x', 'g', 'Y', '_', '0'}, charArray0);
      
      StringReader stringReader1 = new StringReader("cqZaJf3]Q");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 9, 33);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'D', 'D', 'k', 'x', 'g', 'Y', '_', '0'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'D', 'D', 'k', 'x', 'g', 'Y', '_', '0'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'D', 'D', 'k', 'x', 'g', 'Y', '_', '0'}, charArray0);
      
      int int0 = stringReader1.read();
      assertEquals(99, int0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertEquals(40, token0.endColumn);
      assertEquals(9, token0.endLine);
      assertEquals(33, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(9, token0.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'D', 'D', 'k', 'x', 'g', 'Y', '_', '0'}, charArray0);
      assertEquals("DDkxgY_0", token0.toString());
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals(9, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getEndColumn());
      assertEquals(9, javaCharStream0.getLine());
      assertEquals(9, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getColumn());
      
      StringBuffer stringBuffer0 = new StringBuffer("Eh");
      assertNotNull(stringBuffer0);
      assertEquals(2, stringBuffer0.length());
      assertEquals("Eh", stringBuffer0.toString());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'D', 'D', 'k', 'x', 'g', 'Y', '_', '0'}, charArray0);
      assertNull(token_GTToken0.toString());
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals(9, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getEndColumn());
      assertEquals(9, javaCharStream0.getLine());
      assertEquals(9, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'D', 'D', 'k', 'x', 'g', 'Y', '_', '0'}, charArray0);
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals(9, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getEndColumn());
      assertEquals(9, javaCharStream0.getLine());
      assertEquals(9, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'D', 'D', 'k', 'x', 'g', 'Y', '_', '0'}, charArray0);
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals(9, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getEndColumn());
      assertEquals(9, javaCharStream0.getLine());
      assertEquals(9, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[4] = '>';
      charArray0[5] = '>';
      charArray0[6] = '>';
      charArray0[7] = '>';
      charArray0[8] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', '>', '>', '\u0000', '>', '>', '>', '>', '>'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'>', '>', '>', '\u0000', '>', '>', '>', '>', '>'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, (-3853), (-3853));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', '>', '>', '\u0000', '>', '>', '>', '>', '>'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', '>', '>', '\u0000', '>', '>', '>', '>', '>'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token0, token_GTToken0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token0.equals((Object)token_GTToken0));
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3853), token0.beginLine);
      assertEquals((-3853), token0.beginColumn);
      assertEquals(124, token0.kind);
      assertEquals((-3851), token0.endColumn);
      assertEquals((-3853), token0.endLine);
      assertArrayEquals(new char[] {'>', '>', '>', '\u0000', '>', '>', '>', '>', '>'}, charArray0);
      assertEquals((-3853), javaCharStream0.getEndLine());
      assertEquals((-3853), javaCharStream0.getBeginColumn());
      assertEquals((-3853), javaCharStream0.getColumn());
      assertEquals((-3853), javaCharStream0.getLine());
      assertEquals((-3853), javaCharStream0.getEndColumn());
      assertEquals((-3853), javaCharStream0.getBeginLine());
      assertEquals(">>>", token0.toString());
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'>', '>', '>', '\u0000', '>', '>', '>', '>', '>'}, charArray0);
      
      javaCharStream0.bufsize = 21;
      assertEquals((-3853), javaCharStream0.getEndLine());
      assertEquals((-3853), javaCharStream0.getBeginColumn());
      assertEquals((-3853), javaCharStream0.getColumn());
      assertEquals((-3853), javaCharStream0.getLine());
      assertEquals((-3853), javaCharStream0.getEndColumn());
      assertEquals((-3853), javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'>', '>', '>', '\u0000', '>', '>', '>', '>', '>'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaCharStream0.bufpos = 2098;
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals((-3853), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals((-3853), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'i';
      charArray0[2] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', 'i', '>'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'\u0000', 'i', '>'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('\u0000', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'\u0000', 'i', '>'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'\u0000', 'i', '>'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertArrayEquals(new char[] {'\u0000', 'i', '>'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("i", token0.toString());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, 1);
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'\u0000', 'i', '>'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      ByteBuffer byteBuffer0 = charset0.encode("i");
      assertNotNull(byteBuffer0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertEquals(1, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      
      StringReader stringReader0 = new StringReader("'v@Lg");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(39, int0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(124, token1.kind);
      assertEquals(2, token1.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'\u0000', 'i', '>'}, charArray0);
      assertEquals(">", token1.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertFalse(token_GTToken0.equals((Object)token1));
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertNotSame(token1, token_GTToken0);
      assertFalse(token1.equals((Object)token_GTToken0));
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(124, token1.kind);
      assertEquals(2, token1.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'\u0000', 'i', '>'}, charArray0);
      assertEquals(">", token1.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'\u0000', 'i', '>'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'\u0000', 'i', '>'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'\u0000', 'i', '>'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 39);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 39. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = 'w';
      charArray0[2] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', 'w', '>'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'>', 'w', '>'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 2, 2);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', 'w', '>'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'>', 'w', '>'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', 'w', '>'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      
      CharArrayReader charArrayReader3 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertNotNull(charArrayReader3);
      assertArrayEquals(new char[] {'>', 'w', '>'}, charArray0);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertNull(token_GTToken1.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader3);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token0, token_GTToken0);
      assertNotSame(token0, token_GTToken1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader3));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token0.equals((Object)token_GTToken0));
      assertFalse(token0.equals((Object)token_GTToken1));
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(124, token0.kind);
      assertEquals(2, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(2, token0.beginColumn);
      assertEquals(2, token0.endLine);
      assertArrayEquals(new char[] {'>', 'w', '>'}, charArray0);
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(">", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-5480));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -5480. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = 'w';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', 'w', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'>', 'w', '\u0000'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long long0 = charArrayReader0.skip(1L);
      assertEquals(1L, long0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'>', 'w', '\u0000'}, charArray0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(pushbackReader0);
      assertArrayEquals(new char[] {'>', 'w', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 33, 118);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', 'w', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', 'w', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(33, token0.endLine);
      assertEquals(33, token0.beginLine);
      assertEquals(118, token0.endColumn);
      assertEquals(124, token0.kind);
      assertEquals(118, token0.beginColumn);
      assertArrayEquals(new char[] {'>', 'w', '\u0000'}, charArray0);
      assertEquals(118, javaCharStream0.getBeginColumn());
      assertEquals(118, javaCharStream0.getColumn());
      assertEquals(118, javaCharStream0.getEndColumn());
      assertEquals(33, javaCharStream0.getEndLine());
      assertEquals(33, javaCharStream0.getLine());
      assertEquals(33, javaCharStream0.getBeginLine());
      assertEquals(">", token0.toString());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertFalse(token_GTToken0.equals((Object)token0));
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      
      Token token1 = token_GTToken0.specialToken;
      assertNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', 'w', '\u0000'}, charArray0);
      assertEquals(118, javaCharStream0.getBeginColumn());
      assertEquals(118, javaCharStream0.getColumn());
      assertEquals(118, javaCharStream0.getEndColumn());
      assertEquals(33, javaCharStream0.getEndLine());
      assertEquals(33, javaCharStream0.getLine());
      assertEquals(33, javaCharStream0.getBeginLine());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token2);
      assertEquals(119, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(33, token2.endLine);
      assertEquals(119, token2.endColumn);
      assertEquals(33, token2.beginLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'>', 'w', '\u0000'}, charArray0);
      assertEquals("w", token2.toString());
      assertEquals(119, javaCharStream0.getColumn());
      assertEquals(33, javaCharStream0.getEndLine());
      assertEquals(119, javaCharStream0.getBeginColumn());
      assertEquals(119, javaCharStream0.getEndColumn());
      assertEquals(33, javaCharStream0.getLine());
      assertEquals(33, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)43;
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = '4';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 44, 44);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(44, token0.endLine);
      assertEquals(45, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(44, token0.beginColumn);
      assertEquals(44, token0.beginLine);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      assertEquals(44, javaCharStream0.getBeginLine());
      assertEquals(45, javaCharStream0.getEndColumn());
      assertEquals(44, javaCharStream0.getLine());
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getColumn());
      assertEquals(44, javaCharStream0.getEndLine());
      assertEquals("44", token0.toString());
      
      Token token1 = Token.newToken(625);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertNull(token1.toString());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-2043), 0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token2.kind);
      assertEquals(45, token2.endColumn);
      assertEquals(45, token2.beginColumn);
      assertEquals(44, token2.beginLine);
      assertEquals(44, token2.endLine);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      assertEquals(44, javaCharStream0.getBeginLine());
      assertEquals(45, javaCharStream0.getEndColumn());
      assertEquals(44, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getColumn());
      assertEquals(44, javaCharStream0.getEndLine());
      assertEquals("", token2.toString());
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertNull(token_GTToken1.toString());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (byte)43);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream2 = new JavaCharStream(pipedInputStream0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertNotNull(javaCharStream2);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertNotNull(javaParserTokenManager2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      assertEquals(44, javaCharStream0.getBeginLine());
      assertEquals(45, javaCharStream0.getEndColumn());
      assertEquals(44, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getColumn());
      assertEquals(44, javaCharStream0.getEndLine());
      
      javaParserTokenManager1.TokenLexicalActions(token_GTToken1);
      assertNotSame(token_GTToken1, token_GTToken0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      assertNull(token_GTToken1.toString());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager3);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager4 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaParserTokenManager4.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager4.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager4.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager4.equals((Object)javaParserTokenManager3));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertNotNull(javaParserTokenManager4);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      assertEquals(44, javaCharStream0.getBeginLine());
      assertEquals(45, javaCharStream0.getEndColumn());
      assertEquals(44, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getColumn());
      assertEquals(44, javaCharStream0.getEndLine());
      
      javaParserTokenManager4.MoreLexicalActions();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaParserTokenManager4, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager4, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager4, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager4, javaParserTokenManager3);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaParserTokenManager4.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager4.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager4.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager4.equals((Object)javaParserTokenManager3));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      assertEquals(44, javaCharStream0.getBeginLine());
      assertEquals(45, javaCharStream0.getEndColumn());
      assertEquals(44, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getColumn());
      assertEquals(44, javaCharStream0.getEndLine());
      
      javaParserTokenManager2.MoreLexicalActions();
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager4);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager3);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager4));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager3));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      assertEquals(44, javaCharStream0.getBeginLine());
      assertEquals(45, javaCharStream0.getEndColumn());
      assertEquals(44, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getColumn());
      assertEquals(44, javaCharStream0.getEndLine());
      
      javaParserTokenManager2.MoreLexicalActions();
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager4);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager3);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager4));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager3));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      assertEquals(44, javaCharStream0.getBeginLine());
      assertEquals(45, javaCharStream0.getEndColumn());
      assertEquals(44, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getColumn());
      assertEquals(44, javaCharStream0.getEndLine());
      
      javaParserTokenManager4.ReInit(javaCharStream0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaParserTokenManager4, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager4, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager4, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager4, javaParserTokenManager3);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaParserTokenManager4.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager4.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager4.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager4.equals((Object)javaParserTokenManager3));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      assertEquals(44, javaCharStream0.getBeginLine());
      assertEquals(45, javaCharStream0.getEndColumn());
      assertEquals(44, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getColumn());
      assertEquals(44, javaCharStream0.getEndLine());
      
      Token token3 = javaParserTokenManager2.jjFillToken();
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager4);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager3);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager4));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager3));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(45, token3.beginColumn);
      assertEquals(44, token3.beginLine);
      assertEquals(44, token3.endLine);
      assertEquals(45, token3.endColumn);
      assertEquals(0, token3.kind);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      assertEquals(44, javaCharStream0.getBeginLine());
      assertEquals(45, javaCharStream0.getEndColumn());
      assertEquals(44, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getColumn());
      assertEquals(44, javaCharStream0.getEndLine());
      assertEquals("", token3.toString());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5S`,q");
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 114, 114);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 2053);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2053. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader("T6.S3Q8A`e/!f).Yl");
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)89, (byte)89);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.MoreLexicalActions();
      Token.newToken(89);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      try { 
        charArrayReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }
}
