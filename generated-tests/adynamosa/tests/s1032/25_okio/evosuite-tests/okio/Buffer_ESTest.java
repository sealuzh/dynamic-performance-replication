/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 04:19:08 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Locale;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Pipe pipe0 = new Pipe(16L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeShort(2922);
      buffer1.writableSegment(2922);
      Charset.defaultCharset();
      Buffer buffer2 = new Buffer();
      HashingSource.sha1(buffer2);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer1.readUtf8();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer_UnsafeCursor0.next();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer3 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer_UnsafeCursor0.resizeBuffer(2414L);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      
      buffer3.buffer();
      boolean boolean0 = realBufferedSink0.buffer.exhausted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "path == null");
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(56319);
      Buffer buffer2 = buffer1.writeLongLe(56319);
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-17);
      ByteString byteString0 = new ByteString(byteArray0);
      buffer2.hmacSha1(byteString0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)1;
      byteArray0[6] = (byte)1;
      ByteString.decodeBase64("path == null");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      buffer2.outputStream();
      realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer1.rangeEquals((long) (byte)0, (ByteString) null, (int) (byte)0, (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(120);
      ByteString byteString0 = ByteString.decodeHex("");
      buffer1.indexOfElement(byteString0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(120);
      buffer1.inputStream();
      buffer0.exhausted();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8CodePoint();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte) (-71);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.write(byteArray0, (-2607), (int) (byte)99);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=7 offset=-2607 byteCount=99
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer0.copyTo((Buffer) null, 0L, (-1796L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "path == null");
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(56319);
      Buffer buffer2 = buffer1.writeLongLe(56319);
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteString byteString0 = ByteString.EMPTY;
      buffer2.indexOfElement(byteString0, (long) (byte)1);
      buffer0.writeUtf8CodePoint(4);
      HashingSource.sha1(buffer0);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x3f
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Pipe pipe0 = new Pipe(2L);
      Buffer buffer0 = pipe0.buffer;
      MockFile mockFile0 = new MockFile("?pU;iFXB$GNch]smE", "?pU;iFXB$GNch]smE");
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer1 = buffer0.write(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteString byteString1 = ByteString.encodeUtf8("ry5/3Lu93B(]");
      byteString1.sha256();
      buffer1.indexOf(byteString0, 2L);
      buffer0.readByte();
      Buffer buffer2 = new Buffer();
      ByteString.decodeBase64("ry5/3Lu93B(]");
      Buffer buffer3 = new Buffer();
      buffer1.readAndWriteUnsafe();
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      Buffer buffer4 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer4.indexOfElement((ByteString) null, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "path == null");
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(56319);
      Buffer buffer2 = buffer1.writeLongLe(56319);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)1;
      ByteString.decodeBase64("path == null");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer3 = realBufferedSource0.buffer();
      buffer3.writeShort(18);
      buffer2.indexOf((byte)23, (long) 18, (long) 18);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer2);
      Buffer buffer4 = realBufferedSource2.buffer;
      buffer4.readUtf8();
      Charset.defaultCharset();
      Buffer buffer5 = realBufferedSource2.buffer();
      Buffer buffer6 = realBufferedSink0.buffer;
      buffer6.write((Source) buffer0, (long) (byte)1);
      realBufferedSink0.emit();
      buffer0.readAll(buffer5);
      buffer1.exhausted();
      buffer0.clear();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-99);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "byteCount > Integer.MAX_VALUE: ");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = buffer0.writeDecimalLong((byte) (-99));
      ByteString byteString0 = ByteString.of(byteArray0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      hashingSink0.hash();
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer1.size = (long) 65533;
      buffer0.writeHexadecimalUnsignedLong(650L);
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte) (-99), 8L, (-2790L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=65536 fromIndex=8 toIndex=-2790
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "path == null");
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(56319);
      Buffer buffer2 = buffer1.writeLongLe(56319);
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer3 = realBufferedSource0.buffer();
      buffer3.writeShort(18);
      buffer3.readUtf8Line();
      buffer1.md5();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      buffer_UnsafeCursor0.seek((byte)0);
      Pipe pipe0 = new Pipe(9);
      Buffer buffer4 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer4.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer((byte)0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.indexOf((byte)0, (-2790L), (long) (byte)2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-2790 toIndex=2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Pipe pipe0 = new Pipe(395L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)5;
      Buffer buffer1 = new Buffer();
      buffer1.outputStream();
      ByteString.encodeUtf8("");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink1.buffer;
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      BufferedSink bufferedSink0 = realBufferedSink2.writeDecimalLong(395L);
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(realBufferedSink1);
      Buffer buffer3 = new Buffer();
      buffer3.clone();
      realBufferedSink0.buffer.timeout();
      Buffer buffer4 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer4.readAndWriteUnsafe();
      realBufferedSink2.buffer.clone();
      realBufferedSink0.emitCompleteSegments();
      realBufferedSink0.buffer.writeDecimalLong(10000000000000L);
      buffer_UnsafeCursor0.close();
      realBufferedSink0.buffer.writeShortLe((byte)5);
      ((RealBufferedSink) bufferedSink0).buffer.read(byteArray0, (int) (byte)5, (int) (byte)5);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(((RealBufferedSink) bufferedSink0).buffer);
      Buffer buffer5 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer5.select((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "path == null";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "path == null");
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(56319);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("path == null", charset0);
      buffer1.hmacSha1(byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      Buffer buffer3 = buffer2.writeLongLe(10000L);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)11;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      realBufferedSink0.buffer.indexOfElement(byteString0, (long) (byte)11);
      realBufferedSink0.buffer.readLong();
      buffer3.writeUtf8CodePoint(23);
      // Undeclared exception!
      try { 
        buffer1.readUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Pipe pipe0 = new Pipe(2L);
      Buffer buffer0 = pipe0.buffer;
      MockFile mockFile0 = new MockFile("?pU;iFXB$GNch]smE", "?pU;iFXB$GNch]smE");
      byte[] byteArray0 = new byte[5];
      Buffer buffer1 = buffer0.writeLong(2L);
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer2 = buffer1.write(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteString byteString1 = ByteString.encodeUtf8("ry5/3Lu93B(]");
      byteString1.sha256();
      buffer2.indexOf(byteString0, 2L);
      buffer0.readByte();
      Buffer buffer3 = new Buffer();
      ByteString.decodeBase64("BHz=3");
      Buffer buffer4 = new Buffer();
      buffer2.readAndWriteUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer1.readUnsafe(buffer_UnsafeCursor0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer3);
      Buffer buffer5 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      buffer5.readUnsafe(buffer_UnsafeCursor1);
      buffer2.readUtf8Line(2L);
      assertEquals(9L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "path == null");
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(56319);
      Buffer buffer2 = buffer1.writeLongLe(56319);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)1;
      ByteString.decodeBase64("path == null");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer3 = realBufferedSource0.buffer();
      buffer3.writeShort(18);
      buffer3.readUtf8Line();
      buffer1.md5();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      buffer_UnsafeCursor0.seek((byte)1);
      Pipe pipe0 = new Pipe(9);
      Buffer buffer4 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer4.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer((byte)1);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.indexOf((byte)1, (-2790L), (long) (byte)2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-2790 toIndex=2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Pipe pipe0 = new Pipe(16L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong(16L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer.buffer();
      buffer1.writeHexadecimalUnsignedLong(318L);
      realBufferedSink0.buffer.sha1();
      buffer1.readAndWriteUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      // Undeclared exception!
      buffer_UnsafeCursor0.resizeBuffer(2147483647L);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      buffer_UnsafeCursor0.buffer.buffer();
      buffer0.writeHexadecimalUnsignedLong(2508L);
      Segment segment0 = new Segment();
      buffer0.head = segment0;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.sha1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("acc(+IWDKKmjF", 2, 2);
      realBufferedSink0.buffer.readAll(bufferedSink0);
      realBufferedSink0.buffer.writeUtf8CodePoint(57343);
      HashingSource.sha1(realBufferedSink0.buffer);
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x3f
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Pipe pipe0 = new Pipe(2L);
      Buffer buffer0 = pipe0.buffer;
      MockFile mockFile0 = new MockFile("?pU;iFXB$GNch]smE", "?pU;iFXB$GNch]smE");
      byte[] byteArray0 = new byte[5];
      Buffer buffer1 = buffer0.writeLong(2L);
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer2 = buffer1.write(byteArray0);
      buffer1.outputStream();
      ByteString byteString1 = ByteString.encodeUtf8("ry5/3Lu93B(]");
      byteString1.sha256();
      buffer2.indexOf(byteString0, 2L);
      buffer0.readByte();
      Buffer buffer3 = new Buffer();
      ByteString.decodeBase64("BHz=3");
      Buffer buffer4 = new Buffer();
      buffer2.readAndWriteUnsafe();
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      Buffer buffer5 = realBufferedSink0.buffer;
      buffer5.indexOfElement((ByteString) null, 2L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer1.readUnsafe(buffer_UnsafeCursor0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer3);
      Buffer buffer6 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      buffer6.readUnsafe(buffer_UnsafeCursor1);
      byte[] byteArray1 = realBufferedSink0.buffer.readByteArray((long) (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = buffer1.writeUtf8CodePoint(3714);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      buffer2.write(byteString0);
      realBufferedSource0.buffer.indexOf((byte)34, (long) 3714);
      Buffer buffer3 = buffer1.writeLongLe(3714);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      ByteString byteString1 = new ByteString(byteArray0);
      buffer3.indexOfElement(byteString1, (long) (byte)11);
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString1;
      buffer1.indexOfElement(byteString1);
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString1;
      byteStringArray0[4] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      buffer3.rangeEquals((long) (byte)11, byteString1, (int) (byte)11, (int) (byte)11);
      buffer3.selectPrefix(options0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "aO");
      realBufferedSource0.buffer.snapshot();
      Buffer buffer4 = buffer3.writeShortLe((-1));
      buffer4.sha512();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffffe0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = (-1633);
      OutputStream outputStream0 = null;
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.writeUtf8CodePoint(3714);
      realBufferedSource0.buffer.indexOf((byte)34, (long) 3714);
      Buffer buffer2 = buffer1.writeLongLe(3714);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer2.indexOfElement(byteString0, (long) (byte)11);
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      buffer2.readLong();
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer2.rangeEquals((long) (byte)11, byteString0, (int) (byte)11, (int) (byte)11);
      buffer2.selectPrefix(options0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "aO");
      try { 
        realBufferedSource0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer2 = buffer1.writeLong(4209L);
      buffer1.readUtf8CodePoint();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Segment segment0 = buffer2.head;
      SegmentPool.next = segment0;
      Buffer buffer3 = realBufferedSource0.buffer();
      buffer3.writeUtf8CodePoint((-618));
      buffer3.clear();
      buffer0.writeUtf8CodePoint(65533);
      Buffer buffer4 = buffer1.writeLong(4209L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer4);
      realBufferedSource0.readByteString();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)44;
      Buffer buffer5 = new Buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      buffer1.outputStream();
      Buffer buffer6 = new Buffer();
      // Undeclared exception!
      try { 
        buffer6.writableSegment((-643));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Pipe pipe0 = new Pipe(16L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[3];
      Buffer buffer1 = buffer0.writeLong(16L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?pU;iFXB$GNch]smE");
      buffer1.indexOf(byteString0);
      Pipe pipe1 = new Pipe((byte)15);
      Buffer buffer2 = pipe1.buffer;
      buffer2.readUtf8Line();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      try { 
        realBufferedSource0.buffer.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Pipe pipe0 = new Pipe(2L);
      Buffer buffer0 = pipe0.buffer;
      MockFile mockFile0 = new MockFile("?pU;iFXB$GNch]smE", "?pU;iFXB$GNch]smE");
      byte[] byteArray0 = new byte[5];
      Buffer buffer1 = buffer0.writeLong(2L);
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer2 = buffer1.write(byteArray0);
      buffer1.outputStream();
      ByteString.encodeUtf8("ry5/3Lu93B(]");
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.sha256();
      buffer2.indexOf(byteString0, 2L);
      buffer0.readByte();
      buffer0.writeIntLe((-1431655764));
      ByteString.decodeBase64("BHz=3");
      Buffer buffer3 = new Buffer();
      // Undeclared exception!
      try { 
        buffer3.read(byteArray0, 3115, (-1016));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=5 offset=3115 byteCount=-1016
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.writeUtf8CodePoint(3714);
      realBufferedSource0.buffer.indexOf((byte)34, (long) 3714);
      Buffer buffer2 = buffer1.writeLongLe(3714);
      byte byte0 = (byte)11;
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer2.indexOfElement(byteString0, (long) (byte)11);
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      buffer2.readLong();
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer2.rangeEquals((long) (byte)11, byteString0, (int) (byte)11, (int) (byte)11);
      buffer2.selectPrefix(options0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "aO");
      Buffer buffer3 = buffer2.buffer();
      realBufferedSource0.buffer.snapshot();
      Buffer buffer4 = buffer2.writeShortLe((-1));
      buffer3.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer4.read(buffer1, 100L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Pipe pipe0 = new Pipe(16L);
      Buffer buffer0 = pipe0.buffer;
      MockFile mockFile0 = new MockFile("?pU;iFXB$GNch]smE", "?pU;iFXB$GNch]smE");
      MockFile mockFile1 = new MockFile(mockFile0, "?pU;iFXB$GNch]smE");
      byte[] byteArray0 = new byte[5];
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.buffer.write(byteArray0);
      buffer0.outputStream();
      ByteString.encodeUtf8("HRGbnA");
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink1.buffer;
      realBufferedSink1.writeDecimalLong((-2107L));
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer0);
      Buffer buffer3 = new Buffer();
      realBufferedSink1.buffer.timeout();
      realBufferedSink2.buffer.readAndWriteUnsafe();
      Buffer buffer4 = realBufferedSink1.buffer.clone();
      buffer4.writeDecimalLong((-1));
      buffer4.writeShortLe((byte) (-54));
      assertEquals(9L, buffer4.size());
      
      buffer0.readUnsafe();
      Buffer buffer5 = buffer3.writeLong(438L);
      assertEquals(0L, buffer5.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer2 = buffer1.writeLong(4209L);
      buffer1.readUtf8CodePoint();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Segment segment0 = buffer2.head;
      SegmentPool.next = segment0;
      Buffer buffer3 = realBufferedSource0.buffer();
      buffer3.writeUtf8CodePoint((-618));
      buffer3.clear();
      Buffer buffer4 = buffer0.writeUtf8CodePoint(65533);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      realBufferedSource0.readByteString();
      ByteString byteString0 = ByteString.decodeBase64("");
      buffer1.writeShort((byte)44);
      buffer0.rangeEquals((-15L), byteString0, (-618), 3292);
      ByteString byteString1 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        buffer4.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x10
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("y[QV'O-!o%pTkCHT");
      Buffer buffer2 = new Buffer();
      Buffer buffer3 = buffer2.writeUtf8CodePoint(101);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer3.readAndWriteUnsafe();
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      buffer4.writeLong((-1L));
      buffer_UnsafeCursor0.end = 101;
      buffer4.indexOf((byte)32, 8L);
      ByteString byteString0 = ByteString.encodeUtf8("y[QV'O-!o%pTkCHT");
      buffer0.request(101);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.delegate();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer4);
      realBufferedSink1.writeLong((-2284L));
      Buffer buffer5 = realBufferedSink1.buffer;
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink0.writeString("w", charset0);
      Buffer buffer6 = new Buffer();
      ByteBuffer byteBuffer0 = charset0.encode("HRu6<mO0\"$xA?o\";r=");
      ByteString byteString1 = ByteString.of(byteBuffer0);
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      ByteString byteString2 = buffer6.sha512();
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Pipe pipe0 = new Pipe(16L);
      Buffer buffer0 = pipe0.buffer;
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString(" (o rad code point prefixed 0x", 24, 24, charset0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)106;
      int int0 = 990;
      // Undeclared exception!
      try { 
        buffer0.write(byteArray0, 990, (int) (byte) (-16));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=990 byteCount=-16
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      HashingSink.md5(buffer0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      ByteString byteString0 = ByteString.EMPTY;
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString1 = ByteString.of(byteBuffer0);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      buffer0.require(0);
      int int0 = 1717986918;
      buffer1.rangeEquals(2147483647L, byteString1, 3, 1717986918);
      realBufferedSource0.buffer.readUnsafe();
      // Undeclared exception!
      try { 
        HashingSource.hmacSha256(realBufferedSource0, byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = buffer0.hmacSha256(byteString0);
      ByteBuffer byteBuffer0 = byteString1.asByteBuffer();
      ByteString byteString2 = ByteString.of(byteBuffer0);
      ByteString byteString3 = hashingSink0.hash();
      Buffer buffer1 = buffer0.write(byteString3);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)15;
      Buffer buffer2 = buffer0.write(byteArray0);
      buffer2.outputStream();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer3 = realBufferedSink0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(hashingSink0);
      Buffer buffer4 = new Buffer();
      buffer2.timeout();
      buffer1.readAndWriteUnsafe();
      Buffer buffer5 = buffer0.clone();
      hashingSource0.hash();
      long long0 = buffer5.indexOfElement(byteString2, (long) (byte)15);
      assertEquals(34L, buffer0.size());
      assertEquals(19L, long0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(1000000000000000000L);
      buffer0.md5();
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Number too large: 10000000000000000
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.writeUtf8CodePoint(3714);
      realBufferedSource0.buffer.indexOf((byte)34, (long) 3714);
      Buffer buffer2 = buffer1.writeLongLe(3714);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer2.indexOfElement(byteString0, (long) (byte)11);
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer2.selectPrefix(options0);
      buffer2.buffer();
      realBufferedSource0.buffer.snapshot();
      buffer1.skip((byte)11);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readUnsafe();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer2 = buffer1.writeLong(4209L);
      buffer1.readUtf8CodePoint();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Segment segment0 = buffer2.head;
      SegmentPool.next = segment0;
      Buffer buffer3 = realBufferedSource0.buffer();
      buffer3.writeUtf8CodePoint((-618));
      buffer3.clear();
      buffer0.writeUtf8CodePoint(65533);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      realBufferedSource0.readByteString();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)44;
      Buffer buffer4 = new Buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      buffer1.outputStream();
      Buffer buffer5 = new Buffer();
      Buffer buffer6 = new Buffer();
      Buffer buffer7 = realBufferedSink0.buffer();
      buffer7.timeout();
      try { 
        buffer7.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      buffer0.writeAll(hashingSource0);
      MockFile mockFile0 = new MockFile("", "");
      Buffer buffer1 = buffer0.writeLong(1000000000000000000L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer2 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer3 = realBufferedSource0.buffer();
      buffer3.writeLong(1000000000000000000L);
      Charset.defaultCharset();
      Buffer buffer4 = buffer2.writeHexadecimalUnsignedLong(0L);
      buffer0.writeString("(f[}V5,S[", charset0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      Charset charset1 = Charset.defaultCharset();
      realBufferedSink0.writeString("(f[}V5,S[", charset1);
      Buffer buffer5 = new Buffer();
      realBufferedSink1.buffer.readUtf8Line();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer4);
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=9 content=0de0b6b3a764000030\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writableSegment(2917);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-127);
      ByteString byteString0 = ByteString.encodeUtf8("source == null");
      buffer0.indexOfElement(byteString0, (long) 2917);
      byteArray0[1] = (byte) (-1);
      byteString0.indexOf(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "limit < 0: ");
      pipe0.sourceClosed = true;
      byte byte0 = (byte)15;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-105);
      buffer0.indexOf(byteString0);
      buffer0.clear();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)4, 1424L, (-282L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=1424 toIndex=-282
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha1(buffer0);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = buffer0.hmacSha256(byteString0);
      ByteBuffer byteBuffer0 = byteString1.asByteBuffer();
      ByteBuffer.allocate(614);
      ByteString.of(byteBuffer0);
      ByteString byteString2 = hashingSink0.hash();
      Buffer buffer1 = buffer0.write(byteString2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)15;
      Buffer buffer2 = buffer0.write(byteArray0);
      buffer2.outputStream();
      ByteString.encodeUtf8("aj9':fW {y%IN-");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer3 = realBufferedSink0.buffer;
      realBufferedSink0.writeDecimalLong(614);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(hashingSink0);
      Buffer buffer4 = new Buffer();
      buffer2.timeout();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer5 = buffer0.clone();
      buffer_UnsafeCursor0.buffer.writeDecimalLong(10000000000000L);
      buffer5.writeShortLe((byte)15);
      assertEquals(48L, buffer0.size());
      assertEquals(34L, buffer5.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Pipe pipe0 = new Pipe(16L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[0];
      buffer0.write(byteArray0);
      MockFile mockFile0 = new MockFile("?pU;iFXB$GNch]smE", "?pU;iFXB$GNch]smE");
      MockFile mockFile1 = new MockFile(mockFile0, "?pU;iFXB$GNch]smE");
      byte[] byteArray1 = new byte[3];
      Buffer buffer1 = buffer0.writeLong(16L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      ByteString byteString0 = new ByteString(byteArray1);
      Buffer buffer2 = buffer1.write(byteArray1);
      OutputStream outputStream0 = buffer1.outputStream();
      ByteString byteString1 = ByteString.encodeUtf8("ry5/3Lu93B(]");
      ByteString byteString2 = new ByteString(byteArray1);
      ByteString byteString3 = new ByteString(byteArray1);
      byteString1.sha256();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer2.indexOf(byteString2, 280375465082L);
      Buffer buffer3 = new Buffer();
      Buffer buffer4 = pipe0.buffer;
      buffer1.copyTo(outputStream0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer4.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(68);
      Buffer buffer2 = buffer0.writeLongLe(56319);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString.decodeBase64("%2RY$QD");
      buffer1.writeShort((byte)1);
      Buffer buffer3 = buffer2.writeShort((-53));
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.readHexadecimalUnsignedLong();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer3);
      HashingSource hashingSource0 = HashingSource.md5(buffer3);
      try { 
        realBufferedSink0.write((Source) hashingSource0, (long) 56319);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "path == null");
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(56319);
      Buffer buffer2 = buffer1.writeLongLe(56319);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)1;
      ByteString.decodeBase64("path == null");
      buffer2.writeShort(18);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      realBufferedSource0.skip((byte)1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      try { 
        buffer2.readFrom((InputStream) dataInputStream1, (long) (byte)1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Pipe pipe0 = new Pipe(16L);
      Buffer buffer0 = pipe0.buffer;
      MockFile mockFile0 = new MockFile("?pU;iFXB$GNch]smE", "?pU;iFXB$GNch]smE");
      MockFile mockFile1 = new MockFile(mockFile0, "?pU;iFXB$GNch]smE");
      Buffer buffer1 = buffer0.writeLong(16L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer0.equals(buffer2);
      buffer0.readUtf8Line();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString.decodeHex("");
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte(24);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      realBufferedSink0.buffer();
      realBufferedSink0.buffer.writeShort(2147475988);
      ByteString byteString0 = ByteString.EMPTY;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      Buffer buffer3 = realBufferedSink0.buffer;
      realBufferedSink1.buffer.readAll(realBufferedSource1.buffer);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte) (-67);
      buffer0.write(byteArray0);
      assertEquals(5L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("#RLvTqF_LTO-<)", charset0);
      buffer0.readLong();
      Buffer buffer2 = buffer0.writeDecimalLong(8192L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte)0;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      realBufferedSink0.buffer();
      realBufferedSource0.buffer.sha256();
      Buffer buffer3 = new Buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer4 = realBufferedSink0.buffer;
      Buffer buffer5 = new Buffer();
      long long0 = (-2028L);
      // Undeclared exception!
      try { 
        realBufferedSink1.buffer.write((Source) null, 2545180810524313183L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      buffer0.indexOf((byte)88);
      long long0 = 10L;
      Buffer buffer1 = buffer0.writeLong(10L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink0.writeString("Us9{?0`wJ\"!spPN|", charset0);
      Buffer buffer2 = new Buffer();
      realBufferedSink0.buffer.readUtf8Line();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8LineStrict();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Us9{?0`wJ\"!spPN|");
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8LineStrict((-203L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -203
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(56319);
      Buffer buffer2 = buffer1.writeLongLe(56319);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)82;
      byteArray0[5] = (byte)44;
      byteArray0[7] = (byte)6;
      ByteString byteString0 = ByteString.of(byteArray0);
      buffer2.readUtf8CodePoint();
      byteString0.sha256();
      buffer1.indexOf(byteString0, (long) 63);
      buffer2.readByte();
      buffer0.toString();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeShortLe(1908874353);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      realBufferedSink1.flush();
      realBufferedSink1.buffer();
      Integer integer0 = new Integer(55296);
      Buffer buffer3 = new Buffer();
      // Undeclared exception!
      try { 
        buffer3.readByteString((long) (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = (-203);
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-203));
      buffer0.toString();
      buffer1.readByte();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Charset charset0 = Charset.defaultCharset();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.buffer.readString(charset0);
      realBufferedSink0.buffer.writeDecimalLong(1000000000L);
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer2.indexOf((byte)53, 92L, 1626L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-203));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.inputStream();
      buffer0.readUtf8(0L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer0.skip(0L);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.copyTo((OutputStream) dataOutputStream0, 1346L, 100L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=1346 byteCount=100
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      buffer0.read(byteArray0, (int) (byte)0, (int) (byte)0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer_UnsafeCursor0.readWrite = true;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(303L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOf((byte)88);
      Buffer buffer1 = buffer0.writeLong(523L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink0.writeString("Us9{?0`wJ\"!spPN|", charset0);
      Buffer buffer2 = new Buffer();
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      hashingSource1.delegate();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      ByteString byteString1 = ByteString.encodeUtf8("Us9{?0`wJ\"!spPN|");
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer1.selectPrefix(options0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer3 = realBufferedSource0.buffer;
      buffer3.sha1();
      assertEquals(8L, buffer0.size());
      
      buffer_UnsafeCursor0.buffer.emit();
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("y[QV'O-!o%pTkCHT");
      Buffer buffer2 = new Buffer();
      Buffer buffer3 = buffer2.writeUtf8CodePoint(81);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer3.readAndWriteUnsafe();
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      buffer4.writeLong((-1L));
      long long0 = 8L;
      ByteString byteString0 = ByteString.decodeBase64("c_IX2h");
      buffer1.indexOf(byteString0);
      long long1 = 81L;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer4);
      Buffer buffer5 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer5.readFully(realBufferedSource0.buffer, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Segment segment0 = buffer0.writableSegment(4);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.equals(segment0);
      buffer0.indexOf((byte)0, (long) (byte)0, (long) (byte)0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      buffer0.writeShortLe((byte)0);
      buffer_UnsafeCursor0.buffer.indexOf((byte)0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(3247L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=3247 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = buffer0.writeDecimalLong(280375465082880L);
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte)12;
      ByteString.of(byteArray0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      hashingSink0.hash();
      buffer0.indexOf((byte)12, (long) (byte)12, (long) (byte)12);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(65533);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=65533 > size=15
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer1.writeLong(4209L);
      buffer1.readUtf8CodePoint();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Segment segment0 = buffer2.head;
      SegmentPool.next = segment0;
      Buffer buffer3 = realBufferedSource0.buffer();
      buffer3.clear();
      buffer0.writeUtf8CodePoint(65533);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(100000000000000L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer0.readShort();
      assertEquals(13L, buffer0.size());
      
      buffer_UnsafeCursor0.buffer.readHexadecimalUnsignedLong();
      Buffer buffer2 = new Buffer();
      buffer1.readByteArray();
      buffer2.writeHexadecimalUnsignedLong((-1));
      buffer_UnsafeCursor0.buffer.readByteString();
      ByteString byteString0 = buffer2.sha256();
      buffer_UnsafeCursor0.buffer.rangeEquals((-3528L), byteString0);
      assertEquals(0L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-291L));
      ByteString byteString0 = buffer1.md5();
      Buffer buffer2 = (Buffer)buffer0.write((Source) buffer1, (-1142L));
      assertEquals(4L, buffer0.size());
      
      long long0 = buffer2.readDecimalLong();
      assertEquals((-291L), long0);
      
      ByteString[] byteStringArray0 = new ByteString[9];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      byteStringArray0[7] = byteString0;
      byteStringArray0[8] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer1.selectPrefix(options0);
      Buffer buffer3 = buffer1.buffer();
      buffer3.snapshot();
      assertTrue(buffer1.exhausted());
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("y[QV'O-!o%pTkCHT");
      Buffer buffer2 = new Buffer();
      Buffer buffer3 = buffer2.writeUtf8CodePoint(81);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer3.readAndWriteUnsafe();
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      buffer4.writeLong((-1L));
      try { 
        realBufferedSink0.buffer.write((Source) buffer1, 1363L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-290L));
      ByteString byteString0 = ByteString.EMPTY;
      long long0 = 4L;
      buffer1.rangeEquals(4L, byteString0);
      Buffer buffer2 = new Buffer();
      // Undeclared exception!
      try { 
        buffer2.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 4;
      Segment segment0 = buffer0.writableSegment(4);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.equals(segment0);
      buffer0.indexOf((byte)0, (long) (byte)0, (long) (byte)0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(3247L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha1(buffer0);
      buffer0.readUtf8Line();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.readByteArray();
      Buffer buffer1 = buffer0.writeLong(1694L);
      buffer1.readShort();
      // Undeclared exception!
      try { 
        buffer1.readByteString((-1067L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=6 offset=0 byteCount=-1067
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer0.writeInt((-2144459022));
      buffer0.readUtf8Line(0L);
      buffer0.rangeEquals(0L, byteString0);
      Buffer buffer1 = new Buffer();
      buffer1.outputStream();
      buffer1.writeAll(hashingSource0);
      buffer0.writeLongLe(2L);
      buffer1.writeAll(hashingSource0);
      Buffer buffer2 = new Buffer();
      // Undeclared exception!
      try { 
        buffer2.writeUtf8("l^Fcp", (-1790), (-2144459022));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -1790
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(102);
      buffer_UnsafeCursor0.buffer.writeUtf8CodePoint(55296);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.buffer.writeUtf8CodePoint((-2144459022));
      buffer_UnsafeCursor1.buffer.readUtf8Line();
      Buffer buffer2 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      try { 
        realBufferedSource0.readByteString(1000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-291L));
      buffer0.readInt();
      buffer0.writeIntLe(758266161);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.rangeEquals((-3605L), byteString0, 65536, (int) (byte)0);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)88);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.writeDecimalLong(100000L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha1(buffer0);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = buffer0.hmacSha256(byteString0);
      ByteBuffer byteBuffer0 = byteString1.asByteBuffer();
      ByteString byteString2 = ByteString.of(byteBuffer0);
      Buffer buffer1 = buffer0.write(byteString0);
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString2;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      try { 
        buffer1.require(3132L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(11L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      buffer0.hashCode();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer_UnsafeCursor0.next();
      String string0 = buffer_UnsafeCursor0.buffer.readUtf8(1L);
      assertFalse(buffer0.exhausted());
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(133L);
      ByteString byteString0 = ByteString.EMPTY;
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString.of(byteBuffer0);
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
      buffer1.require(0);
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(102);
      ByteString byteString0 = ByteString.encodeUtf8(";sQ(d^/PTo %");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+jMZE/XU+;|qK");
      buffer1.size = 1835L;
      buffer1.indexOfElement(byteString0, 922337203L);
      try { 
        buffer1.readUtf8Line();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n not fon: limit=");
      buffer0.writeUtf8CodePoint((-432));
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeUtf8CodePoint(1);
      // Undeclared exception!
      try { 
        buffer1.writeUtf8("\n not fon: limit=", 1583, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 0 < 1583
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      buffer0.readUtf8Line();
      buffer0.writeUtf8CodePoint((-2021161079));
      buffer0.readUtf8CodePoint();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(1114111);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertEquals(4L, buffer0.size());
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = buffer_UnsafeCursor0.start;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.indexOf((byte)0);
      Buffer buffer1 = buffer0.clone();
      assertNotSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong(100L);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      // Undeclared exception!
      try { 
        buffer0.copyTo(outputStream0, 3251L, 3L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=3251 byteCount=3
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Pipe pipe0 = new Pipe(1517L);
      Buffer buffer0 = new Buffer();
      Pipe pipe1 = new Pipe(1517L);
      pipe1.sourceClosed = true;
      Buffer buffer1 = pipe1.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.buffer.writeShort((-1490));
      buffer_UnsafeCursor0.resizeBuffer(1517L);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer0.sha256();
      Buffer buffer3 = buffer0.writeLong(21L);
      buffer1.readAll(buffer3);
      long long0 = buffer3.readLongLe();
      assertEquals(12026L, long0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer0.writeUtf8CodePoint((-1));
      ByteString byteString0 = null;
      buffer_UnsafeCursor0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer1.writeUtf8CodePoint(70);
      buffer2.readHexadecimalUnsignedLong();
      Buffer buffer3 = new Buffer();
      try { 
        buffer3.readFully(buffer0, 10737418L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer0.readFully(buffer1, 0L);
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong(0L);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.buffer();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("v__(7UDy_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: v
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n not found: limit=");
      buffer0.writeUtf8CodePoint((-432));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.buffer.skip(0);
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.readUtf8();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.clear();
      ByteString byteString0 = buffer_UnsafeCursor0.buffer.sha512();
      realBufferedSource0.buffer.writeInt(86);
      buffer0.outputStream();
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      Options.of(byteStringArray0);
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.buffer.selectPrefix(options0);
      buffer0.readUtf8Line();
      buffer_UnsafeCursor0.buffer.readUtf8Line();
      buffer0.readByteArray();
      buffer1.rangeEquals(8L, byteString0, 57343, (-1));
      long long0 = realBufferedSource0.buffer.read(buffer0, 1316L);
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(88);
      Charset charset0 = Charset.defaultCharset();
      buffer1.readString(charset0);
      Buffer buffer2 = buffer1.writeDecimalLong(1073741824);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(88);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha1(buffer0);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.hmacSha256(byteString0);
      long long0 = 0L;
      try { 
        buffer0.readUtf8Line(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      int int0 = (-3926);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        buffer0.writeString((String) null, 2, (-3926), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("acc(+IWDKKmjF", 2, 2);
      realBufferedSink0.buffer.readAll(bufferedSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      buffer0.writeAll(realBufferedSink0.buffer);
      realBufferedSink0.writeByte(2147385184);
      Buffer buffer1 = realBufferedSink0.buffer.writeIntLe(2999);
      buffer0.inputStream();
      HashingSink hashingSink0 = HashingSink.sha512(realBufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      pipe0.sinkClosed = false;
      buffer0.indexOf(byteString0, 2442L);
      buffer0.sha256();
      byte[] byteArray0 = new byte[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer1.read(byteArray0, (int) (byte)0, (int) (byte)0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer1.sha1();
      buffer0.emit();
      buffer1.sha256();
      buffer1.readShortLe();
      buffer1.clone();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.indexOf((byte)30, (long) (short) (-18592), 15L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=3 fromIndex=-18592 toIndex=15
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long long0 = 1517L;
      Pipe pipe0 = new Pipe(1517L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong(3911L);
      buffer0.readUtf8CodePoint();
      buffer1.clear();
      Buffer buffer2 = buffer1.writeUtf8CodePoint(0);
      buffer1.readAndWriteUnsafe();
      buffer2.readByte();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Charset.forName("out == null");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // out == null
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeUtf8CodePoint(2058);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeLong((-1L));
      realBufferedSink0.buffer.readAll(buffer0);
      long long0 = buffer_UnsafeCursor0.buffer.readLongLe();
      assertEquals(3L, buffer0.size());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(11L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      buffer0.hashCode();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
      String string0 = buffer_UnsafeCursor0.buffer.readUtf8(1L);
      assertEquals(0L, buffer1.size());
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      buffer0.indexOf((byte)88);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.writeHexadecimalUnsignedLong((-1631L));
      realBufferedSource0.buffer.readHexadecimalUnsignedLong();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      assertEquals(65533, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = (-291L);
      buffer0.writeDecimalLong((-291L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset charset0 = null;
      String string0 = "";
      String string1 = " (to read code point prefixed 0x";
      // Undeclared exception!
      try { 
        buffer0.writeString(" (to read code point prefixed 0x", 24, 24, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(133L);
      ByteString byteString0 = ByteString.EMPTY;
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString.of(byteBuffer0);
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UTF-8");
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
      buffer0.segmentSizes();
      buffer1.writeDecimalLong(0);
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000000000L);
      ByteString byteString0 = ByteString.EMPTY;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "W64");
      Charset.defaultCharset();
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null, 100000000000000000L, 100000000000000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      long long0 = 10L;
      Buffer buffer1 = buffer0.writeDecimalLong(10L);
      buffer0.writeUtf8CodePoint(65533);
      // Undeclared exception!
      try { 
        buffer1.readUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(120);
      ByteString byteString0 = ByteString.decodeHex("");
      buffer1.indexOfElement(byteString0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(120);
      buffer1.inputStream();
      buffer0.exhausted();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=78\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(7);
      Buffer buffer2 = buffer0.clone();
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      HashingSource.md5(hashingSource0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("WI>n");
      Buffer buffer3 = buffer1.copyTo((OutputStream) mockFileOutputStream0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      buffer1.readFrom(inputStream0, 1L);
      buffer0.readFrom(inputStream0);
      // Undeclared exception!
      try { 
        buffer3.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(56319);
      Buffer buffer2 = buffer1.writeLongLe(56319);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)1;
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer1.indexOf(byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource1.buffer();
      buffer2.readUtf8CodePoint();
      int int0 = buffer0.readInt();
      assertEquals(4L, buffer0.size());
      assertEquals((-2424832), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.readUtf8();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.clear();
      ByteString byteString0 = buffer_UnsafeCursor0.buffer.sha512();
      Buffer buffer2 = realBufferedSource0.buffer.writeInt(86);
      buffer0.outputStream();
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      Options.of(byteStringArray0);
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.buffer.selectPrefix(options0);
      buffer1.readUtf8Line();
      realBufferedSource0.buffer.readUtf8Line();
      buffer2.readByteArray();
      boolean boolean0 = buffer1.rangeEquals(386L, byteString0, (-1982292597), 1669);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Pipe pipe0 = new Pipe(1517L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong(3911L);
      buffer0.readUtf8CodePoint();
      buffer1.clear();
      Buffer buffer2 = buffer1.writeUtf8CodePoint(0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer2.indexOf(byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer3 = realBufferedSource0.buffer();
      try { 
        buffer3.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(11L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      Buffer buffer3 = buffer2.writeByte(3606);
      realBufferedSource0.buffer.segmentSizes();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer3);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      Buffer buffer4 = realBufferedSource2.buffer();
      assertEquals(2L, buffer0.size());
      
      buffer0.clear();
      buffer4.readUtf8Line();
      buffer3.size();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)89;
      Buffer buffer5 = realBufferedSource2.buffer.write(byteArray0);
      assertEquals(0L, buffer5.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-1510));
      buffer0.toString();
      buffer1.readAndWriteUnsafe();
      buffer1.readByte();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString[] byteStringArray0 = new ByteString[2];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteStringArray0[0] = byteString0;
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-291L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        buffer0.writeString("", 24, 24, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 24 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      byte byte0 = (byte)52;
      buffer0.indexOf((byte)52, (long) (byte)52, (long) (byte)52);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-4246));
      Buffer buffer2 = buffer0.clone();
      HashingSource.md5(buffer1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("T<1Nxu<<t%7:h#R%&G");
      buffer2.copyTo((OutputStream) mockFileOutputStream0);
      // Undeclared exception!
      try { 
        mockFileOutputStream0.write(byteArray0, (-4246), (int) (byte)52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = buffer0.writeDecimalLong(280375465082880L);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.hex();
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      hashingSink0.hash();
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      buffer1.hashCode();
      buffer1.readByteString((long) (byte)12);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer2.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(56319);
      Buffer buffer2 = buffer1.writeLongLe(56319);
      buffer2.indexOf((byte)0, (long) (byte)0);
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        buffer0.selectPrefix((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-291L));
      buffer1.md5();
      buffer0.readInt();
      // Undeclared exception!
      try { 
        buffer0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("");
      Buffer buffer1 = buffer0.writeInt(0);
      // Undeclared exception!
      try { 
        buffer1.read(buffer0, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = buffer0.writeDecimalLong(280375465082880L);
      buffer0.writeUtf8CodePoint(65533);
      buffer0.write((Source) buffer1, (-1142L));
      long long0 = buffer0.readDecimalLong();
      assertEquals(3L, buffer0.size());
      assertEquals(280375465082880L, long0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.select(options0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 122;
      buffer0.readUtf8Line();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer0.equals(buffer1);
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)0, (long) 122, (-3066L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=122 toIndex=-3066
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      buffer0.writeDecimalLong(280375465082880L);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(65533);
      ByteString byteString0 = ByteString.encodeUtf8("");
      buffer1.toString();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      buffer0.indexOfElement(byteString0, 280375465082880L);
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeUtf8("vOp^FfQ");
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer1.rangeEquals((-2297L), byteString0);
      HashingSource.sha256(hashingSource0);
      Buffer buffer2 = new Buffer();
      buffer0.writeShort(121);
      buffer2.toString();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x76
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString1 = ByteString.encodeUtf8("d'@(FG[m@2@{*");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.readByteString();
      ByteString byteString2 = new ByteString((byte[]) null);
      ByteString.decodeBase64("d'@(FG[m@2@{*");
      ByteString.encodeUtf8("d'@(FG[m@2@{*");
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString2;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = null;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.buffer.selectPrefix(options0);
      realBufferedSource0.buffer.select(options0);
      buffer0.equals(realBufferedSource0);
      ByteString byteString3 = buffer0.readByteString((long) 0);
      assertNotSame(byteString3, byteString2);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Pipe pipe0 = new Pipe(1517L);
      Buffer buffer0 = new Buffer();
      Pipe pipe1 = new Pipe(1517L);
      pipe1.sourceClosed = true;
      Buffer buffer1 = pipe1.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1517L);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer0.sha256();
      Buffer buffer3 = buffer0.writeLong(21L);
      buffer1.readAll(buffer3);
      long long0 = buffer3.readLongLe();
      assertEquals(0L, long0);
      assertEquals(0L, buffer3.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      buffer0.writeAll(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.buffer.request(0L);
      realBufferedSource0.buffer();
      buffer0.writeIntLe(54);
      long long0 = 8192L;
      try { 
        realBufferedSource0.buffer.require(8192L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeIntLe((-1));
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",Qr `xub@+i%wGo");
      Buffer buffer2 = buffer0.copyTo((OutputStream) mockFileOutputStream0);
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer_UnsafeCursor0.buffer, inflater0);
      HashingSource hashingSource0 = HashingSource.sha256(inflaterSource0);
      // Undeclared exception!
      try { 
        hashingSource0.read(buffer2, (-232L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -232
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((-1573L));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      ByteString byteString0 = buffer2.readByteString(0L);
      buffer0.indexOfElement(byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer3 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer3.readUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) pipedOutputStream0, (-1154L), 0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1154 byteCount=0
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeUtf8("vOp^FfQ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      hashingSource0.hash();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer1.writeString((String) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = buffer0.writeDecimalLong(280375465082880L);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      ByteString byteString0 = ByteString.of(byteArray0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      ByteString byteString1 = hashingSink0.hash();
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int1 = buffer0.select(options0);
      assertEquals(15L, buffer0.size());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(498L);
      buffer0.md5();
      buffer1.write((Source) buffer0, (-1142L));
      long long0 = buffer0.readDecimalLong();
      assertEquals(0L, buffer0.size());
      assertEquals(498L, long0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(100000000L);
      // Undeclared exception!
      try { 
        buffer0.write((Source) buffer1, 122L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writableSegment(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer1 = buffer0.writeDecimalLong(92233L);
      buffer1.readHexadecimalUnsignedLong();
      buffer1.writeDecimalLong((-741L));
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(102);
      ByteString byteString0 = ByteString.encodeUtf8(";sQ(d^/PTo %");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+jMZE/XU+;|qK");
      buffer1.indexOfElement(byteString0, 922337203L);
      long long0 = buffer_UnsafeCursor0.buffer.readHexadecimalUnsignedLong();
      assertTrue(buffer0.exhausted());
      assertEquals(15L, long0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      String string0 = "Ep)N- =T+WCk.Gb3-";
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSink0.writeString((String) null, (-1), (-1), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(31L);
      assertEquals(2L, buffer0.size());
      
      short short0 = buffer0.readShort();
      assertEquals((short)13105, short0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = buffer1.writeDecimalLong(1000000L);
      assertEquals(7L, buffer1.size());
      
      buffer2.readHexadecimalUnsignedLong();
      Buffer buffer3 = realBufferedSource0.buffer.writeDecimalLong(1123L);
      assertEquals(4L, buffer3.size());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((-72057594037927936L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -72057594037927936
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.base64();
      // Undeclared exception!
      try { 
        buffer0.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint((-432));
      buffer0.readUtf8CodePoint();
      MockFile mockFile0 = new MockFile((String) null, "j'Jg|c0Yd");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) mockFileOutputStream0, (long) 80);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=80
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Pipe pipe0 = new Pipe(1806L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.inputStream();
      buffer0.exhausted();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) pipedOutputStream0, 1806L, 1806L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=1806 byteCount=1806
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(931L);
      buffer0.readUtf8CodePoint();
      buffer0.clear();
      ByteString.decodeBase64("g");
      buffer0.rangeEquals(931L, (ByteString) null, 0, 1080);
      byte[] byteArray0 = buffer0.readByteArray();
      buffer0.write(byteArray0);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(1000000000000000L);
      Buffer buffer2 = buffer1.writeUtf8CodePoint(226);
      HashingSource hashingSource0 = HashingSource.sha256(buffer2);
      // Undeclared exception!
      try { 
        buffer1.write((Source) hashingSource0, (long) 226);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-15));
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(1000000000000L);
      buffer2.readShort();
      long long0 = buffer0.readHexadecimalUnsignedLong();
      assertTrue(buffer0.exhausted());
      assertEquals(37927325696L, long0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(133L);
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-432));
      buffer1.readHexadecimalUnsignedLong();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      assertEquals(65533, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.hash();
      buffer0.writeDecimalLong(10000000000000000L);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)57;
      // Undeclared exception!
      try { 
        buffer0.write(byteArray0, (int) (byte)47, 1629);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=5 offset=47 byteCount=1629
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(110);
      ByteString byteString0 = ByteString.encodeUtf8("");
      buffer1.indexOfElement(byteString0, (long) 110);
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x6e
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 120;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(120);
      PipedInputStream pipedInputStream0 = new PipedInputStream(120);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      try { 
        buffer1.readFrom((InputStream) sequenceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      Buffer buffer1 = buffer0.writeDecimalLong(1000L);
      buffer1.writeLong(1000L);
      byte byte0 = buffer0.readByte();
      assertEquals(11L, buffer0.size());
      assertEquals((byte)49, byte0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(110);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      assertEquals(3L, buffer0.size());
      
      long long0 = buffer2.writeAll(buffer1);
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(122);
      buffer1.readUtf8Line();
      Integer integer0 = new Integer((-4546));
      Object object0 = new Object();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer.writeIntLe(122);
      Buffer buffer2 = realBufferedSource0.buffer;
      boolean boolean0 = buffer1.equals(buffer2);
      assertTrue(buffer1.exhausted());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      Buffer buffer1 = buffer0.writeDecimalLong(1000L);
      buffer1.writeLong(1000L);
      int int0 = buffer1.readUtf8CodePoint();
      assertFalse(buffer0.exhausted());
      assertEquals(49, int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(2350);
      buffer0.toString();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x9
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(110);
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x6e
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.writeLong(4278190046L);
      buffer0.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("not acquired", 0, 1530);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 1530 > 12
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeUtf8CodePoint(93);
      long long0 = new Integer((-1));
      buffer_UnsafeCursor0.buffer.writeDecimalLong(100000000000000000L);
      assertEquals(19L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      
      Integer integer0 = new Integer(14);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      assertTrue(buffer2.equals((Object)buffer0));
      
      boolean boolean0 = buffer2.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      Buffer buffer1 = buffer0.writeDecimalLong(214748L);
      buffer0.readHexadecimalUnsignedLong();
      buffer1.writeDecimalLong(2180936L);
      assertEquals(7L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer0.equals(buffer1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(169L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.md5();
      Buffer buffer1 = buffer0.writeLong(4278190046L);
      buffer0.indexOfElement(byteString0);
      buffer1.readInt();
      // Undeclared exception!
      try { 
        buffer0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.delegate();
      HashingSource.sha1(hashingSource0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeIntLe(1);
      Buffer buffer1 = realBufferedSink0.buffer;
      hashingSource0.delegate();
      realBufferedSink0.emit();
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = buffer0.writeDecimalLong(280375465082880L);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte) (-120);
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)2;
      // Undeclared exception!
      try { 
        buffer1.read(byteArray0, (int) (byte)40, (int) (byte) (-59));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=9 offset=40 byteCount=-59
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-432));
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x50
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(2L);
      buffer0.readUtf8CodePoint();
      buffer1.equals(buffer0);
      // Undeclared exception!
      try { 
        buffer1.getByte((-2769L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=7 offset=-2769 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(226);
      buffer1.writeHexadecimalUnsignedLong(1L);
      Charset.defaultCharset();
      buffer1.readByteArray(1L);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.md5();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(12);
      Buffer buffer2 = buffer0.writeUtf8CodePoint(12);
      buffer2.rangeEquals((long) 12, byteString0);
      short short0 = buffer1.readShortLe();
      assertTrue(buffer1.exhausted());
      assertEquals((short)3084, short0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(11L);
      Buffer buffer2 = buffer0.writeUtf8CodePoint(226);
      // Undeclared exception!
      try { 
        buffer1.write((Source) buffer2, (long) 226);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte) (-78);
      byteArray0[3] = (byte) (-69);
      byteArray0[7] = (byte) (-62);
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.writeLong((-922337203685477580L));
      buffer0.readUtf8CodePoint();
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer2.readByteArray(1694L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1694
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null, 56319, 56319);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(56319);
      buffer1.writeUtf8CodePoint(2357);
      short short0 = buffer1.readShortLe();
      assertFalse(buffer0.exhausted());
      assertEquals((short) (-8129), short0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      buffer0.writeDecimalLong(214748L);
      Buffer buffer1 = buffer0.writeLong(902L);
      int int0 = buffer1.readUtf8CodePoint();
      assertEquals(13L, buffer0.size());
      assertEquals(50, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(1694L);
      // Undeclared exception!
      try { 
        buffer1.writeString("*d%Z=\"#b", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(226);
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      buffer1.indexOfElement(byteString0);
      buffer1.writeUtf8CodePoint(226);
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xffffffc3
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeByte((-1));
      buffer1.snapshot();
      buffer0.writeDecimalLong(9223372036854775807L);
      long long0 = 2483L;
      // Undeclared exception!
      try { 
        buffer0.readUtf8((-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=20 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte(224);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor0.data);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer_UnsafeCursor0.buffer, byteString0);
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.writeUtf8CodePoint(0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.md5();
      Buffer buffer1 = buffer0.writeLong(4278190046L);
      buffer0.indexOfElement(byteString0);
      buffer0.readUtf8CodePoint();
      short short0 = buffer1.readShortLe();
      assertEquals(5L, buffer1.size());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha1(buffer0);
      buffer0.readUtf8Line();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = buffer0.readByteArray();
      Buffer buffer1 = buffer0.writeLong(1694L);
      // Undeclared exception!
      try { 
        buffer1.write(byteArray0, 27, 2138023367);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=27 byteCount=2138023367
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(226);
      buffer1.clone();
      buffer1.indexOf((byte)56, (long) 226);
      short short0 = buffer1.readShortLe();
      assertEquals(0L, buffer1.size());
      assertEquals((short) (-23869), short0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Pipe pipe0 = new Pipe(894L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.buffer.segmentSizes();
      realBufferedSink0.buffer.writeIntLe(2675);
      Buffer buffer0 = realBufferedSink0.buffer();
      buffer0.snapshot();
      realBufferedSink0.buffer.sha512();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readFrom(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeDecimalLong((-1));
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor1.buffer.readUtf8();
      Buffer buffer2 = buffer1.writeLong((-1L));
      buffer_UnsafeCursor1.buffer.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer2.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAll((Sink) null);
      Buffer buffer1 = new Buffer();
      // Undeclared exception!
      try { 
        buffer1.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1636L);
      Buffer buffer1 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer0.writeLong((-1));
      buffer0.indexOf((byte)32, 6L);
      buffer2.hashCode();
      Buffer buffer3 = buffer1.emitCompleteSegments();
      ByteString byteString0 = buffer3.md5();
      assertEquals(16, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.readUtf8();
      buffer0.clear();
      ByteString byteString0 = buffer_UnsafeCursor0.buffer.sha512();
      Buffer buffer1 = buffer0.writeInt((-1));
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      buffer0.outputStream();
      Options options0 = Options.of(byteStringArray0);
      buffer1.selectPrefix(options0);
      buffer1.readUtf8Line();
      buffer0.readUtf8Line();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = buffer0.readByteArray();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      long long0 = buffer0.indexOfElement(byteString1);
      assertEquals((-1L), long0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      int int0 = buffer_UnsafeCursor0.seek((-1L));
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), int0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      realBufferedSource0.buffer.md5();
      long long1 = realBufferedSource0.buffer.indexOf((byte) (-128));
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-1));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer2 = buffer1.writeByte((-1));
      Integer integer0 = new Integer((-1));
      short short0 = buffer2.readShortLe();
      assertEquals(0L, buffer1.size());
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      String string0 = "okio.HashingSink";
      realBufferedSource0.readByteArray();
      Buffer buffer1 = realBufferedSource0.buffer.writeUtf8("okio.HashingSink");
      buffer1.inputStream();
      realBufferedSource0.buffer.toString();
      realBufferedSource0.buffer();
      long long0 = (-44L);
      ByteString byteString0 = null;
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.indexOfElement((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong(2L);
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      buffer1.readString(charset0);
      buffer0.read(buffer1, 1000000000000000L);
      // Undeclared exception!
      try { 
        buffer0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeByte((-1));
      buffer0.readByte();
      buffer1.timeout();
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha1(buffer0);
      buffer0.readUtf8Line();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.readByteArray();
      Buffer buffer1 = buffer0.writeLong(1694L);
      buffer1.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(1100L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      try { 
        realBufferedSource0.readByteString(1100L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha1(buffer0);
      buffer0.readUtf8Line();
      byte[] byteArray0 = buffer0.readByteArray();
      Buffer buffer1 = buffer0.writeLong((-1320L));
      buffer1.write(byteArray0);
      buffer0.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha1(buffer0);
      buffer0.readUtf8Line();
      byte[] byteArray0 = buffer0.readByteArray();
      buffer0.writeShort(0);
      buffer0.writeLong((-1320L));
      buffer0.readUtf8CodePoint();
      buffer0.readFully(byteArray0);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Segment segment0 = new Segment();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.head = segment0;
      buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      HashingSource.sha1(buffer_UnsafeCursor0.buffer);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")Jrh/;3]h");
      Buffer buffer1 = new Buffer();
      buffer0.writeShort((-1));
      // Undeclared exception!
      try { 
        buffer1.read((byte[]) null, 226, 50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeByte(8038);
      assertFalse(buffer0.exhausted());
      
      buffer1.readByte();
      buffer1.timeout();
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Pipe pipe0 = new Pipe(4641L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      Buffer buffer0 = realBufferedSource0.buffer;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)76;
      pipe0.sourceClosed = false;
      byteArray0[5] = (byte) (-39);
      // Undeclared exception!
      try { 
        buffer0.write(byteArray0, 143, (int) (byte)76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=6 offset=143 byteCount=76
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer0 = new Buffer();
      long long0 = (-289L);
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null, (-289L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -289
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte((-889));
      assertEquals(1L, buffer0.size());
      
      buffer0.clear();
      buffer0.sha512();
      buffer0.flush();
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOf((byte)88);
      buffer0.hashCode();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      buffer0.writableSegment(2007);
      buffer0.write(byteString0);
      // Undeclared exception!
      try { 
        buffer0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(1182);
      buffer1.writeLong(1182);
      int int0 = buffer0.readUtf8CodePoint();
      assertEquals(8L, buffer0.size());
      assertEquals(65533, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      buffer0.snapshot();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer0.writeShort((-897));
      buffer2.emitCompleteSegments();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha1(buffer0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte) (-60);
      // Undeclared exception!
      try { 
        buffer0.write(byteArray0, (-1728), (int) (byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=7 offset=-1728 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readFully((Buffer) null, (-289L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe(1999);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.writeLong(1999L);
      int int0 = buffer0.readUtf8CodePoint();
      assertFalse(buffer0.exhausted());
      assertEquals(65533, int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 224;
      buffer0.writeByte(224);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // size < 3: 1 (to read code point prefixed 0xffffffe0)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      buffer0.writeUtf8CodePoint(2357);
      Buffer buffer1 = buffer0.writeLong(1988L);
      int int0 = buffer1.readUtf8CodePoint();
      assertFalse(buffer0.exhausted());
      assertEquals(2357, int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe((-1206));
      ByteString byteString0 = buffer1.snapshot();
      buffer1.write(byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      ByteString byteString0 = buffer0.snapshot();
      Buffer buffer1 = buffer0.write(byteString0);
      assertTrue(buffer1.exhausted());
      
      buffer0.writeShort((-906));
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      buffer0.indexOf((byte)52, (long) (byte)52, (long) (byte)52);
      ByteString[] byteStringArray0 = new ByteString[2];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteStringArray0[0] = byteString0;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)120;
      ByteString byteString1 = new ByteString(byteArray1);
      byteStringArray0[1] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.select(options0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe(1999);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iDI0N,7mR)0a`7K=");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      int int0 = 2;
      Buffer buffer2 = buffer1.writeUtf8("qbP3tIfs,#{i:76", 2, 2);
      buffer2.read(buffer_UnsafeCursor0.data);
      try { 
        buffer_UnsafeCursor0.buffer.readFully(buffer_UnsafeCursor0.data);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      OutputStream outputStream0 = null;
      // Undeclared exception!
      try { 
        buffer2.writeTo((OutputStream) null, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      buffer0.segmentSizes();
      buffer0.clear();
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe((-1573L));
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(0L, charset0);
      try { 
        buffer0.skip(3117L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe(248);
      Buffer buffer2 = buffer1.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readUnsafe();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer2.readFully(buffer3, (-922337203685477580L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writableSegment((-856));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      buffer0.writeShortLe((-2900));
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-37);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      buffer0.readFrom((InputStream) byteArrayInputStream0);
      buffer0.readShortLe();
      HashingSource.sha1(buffer0);
      buffer0.readUtf8Line();
      byte[] byteArray1 = buffer0.readByteArray();
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeDecimalLong((-1));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readByteString((-1166L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=0 byteCount=-1166
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha1(buffer0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      long long0 = buffer0.writeAll(hashingSource0);
      assertEquals(0L, long0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      buffer_UnsafeCursor0.resizeBuffer(0L);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha1(buffer0);
      buffer0.readUtf8Line();
      buffer0.readByteArray();
      ByteString.decodeBase64("okio.Buffer$UnsafeCursor");
      // Undeclared exception!
      try { 
        buffer0.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeDecimalLong((-1976L));
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer2 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer2.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Options options0 = null;
      // Undeclared exception!
      try { 
        buffer0.selectPrefix((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeIntLe((-1));
      buffer0.segmentSizes();
      buffer_UnsafeCursor0.buffer.clear();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.request(302L);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.writeLong(302L);
      int int0 = buffer2.readUtf8CodePoint();
      assertEquals(7L, buffer2.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      buffer1.writeByte(99);
      assertFalse(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.exhausted();
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = buffer2.writeIntLe((-1));
      buffer3.require((-1));
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.write(realBufferedSource0.buffer, (-486L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=0 byteCount=-486
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeIntLe((-1));
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      // Undeclared exception!
      buffer1.writeAll(realBufferedSource0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("#RLvT$qF_LTO-]<!", charset0);
      buffer0.readLong();
      buffer0.md5();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)31;
      buffer1.readFully(byteArray0);
      assertEquals(6L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe(1999);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(2L, buffer0.size());
      assertEquals(2, int0);
      
      // Undeclared exception!
      try { 
        buffer1.writeAll(buffer_UnsafeCursor0.buffer);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      charset0.encode(".");
      buffer0.readString(charset0);
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte) (-11), (long) (byte) (-11), (-4632L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-11 toIndex=-4632
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) mockFileInputStream0, (-4L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -4
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Buffer buffer0 = new Buffer();
      buffer0.writeByte((-2147483646));
      buffer0.readUtf8Line();
      buffer0.clear();
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      realBufferedSink0.buffer.readByteString();
      Buffer buffer1 = realBufferedSink0.buffer();
      long long0 = buffer1.completeSegmentByteCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      buffer0.writeAll(hashingSource0);
      MockFile mockFile0 = new MockFile("", "");
      try { 
        buffer0.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("acc(+IWDKKmjF", 2, 2);
      realBufferedSink0.buffer.readAll(bufferedSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      buffer0.writeAll(realBufferedSink0.buffer);
      realBufferedSink0.buffer.writeIntLe(2999);
      buffer0.inputStream();
      HashingSink hashingSink0 = HashingSink.sha512(realBufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      pipe0.sinkClosed = false;
      buffer0.indexOf(byteString0, 2442L);
      buffer0.sha256();
      byte byte0 = (byte)53;
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.indexOf((byte)53, 2442L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=4 fromIndex=2442 toIndex=0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Buffer buffer1 = buffer0.writeShortLe((-1));
      buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.buffer.clear();
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.hashCode();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.write(buffer1, 2L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":e`(N+Pe");
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.buffer.require((-1376L));
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = buffer1.buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream(":e`(N+Pe");
      PrintStream printStream0 = mockPrintStream0.append(',');
      // Undeclared exception!
      try { 
        buffer2.copyTo((OutputStream) printStream0, (-72057594037927936L), (-1376L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-72057594037927936 byteCount=-1376
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = new Buffer();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.buffer.sha1();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeUtf8("", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      HashingSource.sha256(buffer0);
      hashingSource0.read(buffer0, (byte)38);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null, (-1879048191), (-2139470648));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      HashingSource.sha1(realBufferedSource0);
      // Undeclared exception!
      try { 
        buffer1.writeUtf8("sink == null", 1890, 1890);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 1890 > 12
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      ByteString byteString0 = ByteString.encodeUtf8("");
      buffer_UnsafeCursor0.buffer.indexOfElement(byteString0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(241L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=241 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      ByteString byteString0 = new ByteString((byte[]) null);
      buffer_UnsafeCursor0.buffer.indexOfElement(byteString0);
      buffer_UnsafeCursor0.start = 128;
      buffer0.write((Source) buffer_UnsafeCursor0.buffer, (-1L));
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.resizeBuffer(128);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.start = 128;
      buffer_UnsafeCursor0.seek((-1));
      // Undeclared exception!
      try { 
        buffer0.getByte((-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha1(buffer0);
      ByteString byteString0 = ByteString.encodeUtf8("");
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1753L);
      Buffer buffer1 = null;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write((Buffer) null, (-752L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.start = (-2146968044);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-2146968044));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-2146968044 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("", charset0);
      buffer0.readUtf8();
      long long0 = 4125L;
      // Undeclared exception!
      try { 
        buffer0.getByte(4125L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=4125 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.request((-1L));
      buffer_UnsafeCursor0.offset = (-1477L);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.seek((-1));
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readByteString(29L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=29
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      buffer0.skip((-1L));
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byte byte0 = (byte) (-97);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)109;
      buffer1.write(byteArray0);
      Buffer buffer2 = buffer1.writeUtf8("");
      buffer2.exhausted();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer2.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        Options.of((ByteString[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("H");
      // Undeclared exception!
      try { 
        buffer1.copyTo(buffer0, 425L, (-2493L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=425 byteCount=-2493
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.copyTo(buffer_UnsafeCursor0.buffer, 0L, (-1796L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1796
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.readUtf8Line();
      buffer0.close();
      buffer0.request((-1945L));
      Timeout timeout0 = buffer0.timeout();
      assertNotNull(timeout0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.request((-1L));
      buffer_UnsafeCursor0.buffer.emit();
      HashingSource.sha256(buffer_UnsafeCursor0.buffer);
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("y[QV'O-!o%pTkCHT");
      Buffer buffer2 = new Buffer();
      buffer0.writeLongLe(119L);
      buffer1.writeIntLe((-266));
      buffer2.readUtf8();
      // Undeclared exception!
      try { 
        buffer1.select((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer0.copyTo(buffer_UnsafeCursor0.buffer, (-508L), 1000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-508 byteCount=1000000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1753L);
      // Undeclared exception!
      try { 
        buffer0.write(buffer_UnsafeCursor0.buffer, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      int int0 = 9;
      buffer0.writableSegment(9);
      pipe0.sourceClosed = false;
      buffer0.equals(pipe0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.sha512();
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.readWrite = true;
      int int0 = 128;
      // Undeclared exception!
      try { 
        buffer0.readUtf8((long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      byteString1.hashCode = 11;
      ByteString.decodeBase64("");
      ByteString byteString2 = ByteString.decodeHex("");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer2.indexOf(byteString2, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("");
      // Undeclared exception!
      try { 
        buffer1.copyTo(buffer0, 425L, (-2493L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=425 byteCount=-2493
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.hash();
      ByteString.decodeHex("");
      long long0 = new Integer(11);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("", 106, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 10 < 106
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Pipe pipe0 = new Pipe(2468L);
      Buffer buffer0 = pipe0.buffer;
      Sink sink0 = pipe0.sink();
      HashingSink hashingSink0 = HashingSink.sha256(sink0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = buffer0.hmacSha256(byteString0);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      byteString1.write(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = new Buffer();
      buffer0.indexOf((byte)91, (long) (byte)91);
      realBufferedSink0.buffer.rangeEquals(10000000L, byteString1, 380, 65535);
      assertFalse(buffer0.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      buffer0.readByteArray();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.request((-1L));
      // Undeclared exception!
      try { 
        buffer0.read(buffer_UnsafeCursor0.buffer, (-1214L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1214
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      boolean boolean0 = buffer_UnsafeCursor0.buffer.request((-1L));
      long long0 = buffer_UnsafeCursor0.buffer.indexOf((byte)115, 379L);
      assertEquals((-1L), long0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = realBufferedSource0.readByteString();
      boolean boolean1 = buffer0.rangeEquals((long) (-1), byteString0, (int) (byte)18, 2);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.request((-1L));
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.copyTo(buffer0, (-980L), (long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-980 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "IA'IdJ4Z");
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Charset charset0 = Charset.defaultCharset();
      buffer_UnsafeCursor0.buffer.writeString("IA'IdJ4Z", charset0);
      buffer_UnsafeCursor0.buffer.indexOf(byteString0, 8193L);
      buffer_UnsafeCursor0.buffer.sha512();
      assertEquals(8L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((-2787L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-2787
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = buffer0.sha256();
      byteString0.base64();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.end = 2147483646;
      buffer_UnsafeCursor0.next();
      buffer0.request((-1));
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.md5();
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(2147473648);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 7fffd8f0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha256();
      byteString0.base64();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      try { 
        buffer0.write((Source) hashingSource0, 5195L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.request((-1L));
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer1.rangeEquals((long) (-1), (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSource hashingSource1 = HashingSource.hmacSha256(buffer0, byteString0);
      hashingSource1.read(buffer0, 5195L);
      buffer0.skip((-1L));
      // Undeclared exception!
      try { 
        buffer0.read((Buffer) null, 3301L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.skip((-1));
      realBufferedSink0.buffer.read(buffer_UnsafeCursor0.buffer, 100000L);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      long long0 = 0L;
      // Undeclared exception!
      try { 
        buffer0.getByte(0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = buffer0.sha256();
      byteString0.base64();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.buffer.rangeEquals((long) (-1), byteString0);
      buffer_UnsafeCursor0.buffer.readAndWriteUnsafe();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Charset charset0 = Charset.defaultCharset();
      buffer_UnsafeCursor0.buffer.readString(charset0);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.readUtf8Line();
      buffer_UnsafeCursor0.buffer.indexOf(byteString0, 8193L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(8193L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=8193 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.request((-1L));
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Integer integer0 = new Integer((-1));
      buffer1.sha512();
      long long0 = buffer0.size();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Pipe pipe0 = new Pipe(498L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.writeLong(8192L);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      buffer_UnsafeCursor0.buffer.indexOf((byte)44, 331L);
      buffer0.sha512();
      buffer0.readUtf8Line();
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      HashingSource hashingSource0 = HashingSource.sha256(buffer_UnsafeCursor0.buffer);
      // Undeclared exception!
      try { 
        hashingSource0.read(buffer_UnsafeCursor0.buffer, (-1251L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1251
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.toString();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      Buffer buffer1 = buffer0.copyTo(outputStream0);
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      boolean boolean0 = buffer_UnsafeCursor0.buffer.request((-1L));
      assertTrue(boolean0);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Integer integer0 = new Integer((-1));
      int int0 = buffer_UnsafeCursor0.seek((-1));
      assertEquals((-1), int0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Pipe pipe0 = new Pipe(1517L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.indexOfElement((ByteString) null, 1517L);
      HashingSource.sha256(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer0.readAll(buffer_UnsafeCursor0.buffer);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readString((-1L), (Charset) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.snapshot();
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      buffer0.outputStream();
      buffer0.readByteString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor2.next();
      buffer_UnsafeCursor2.end = (-1);
      Segment segment0 = buffer_UnsafeCursor0.buffer.head;
      buffer1.head = null;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor1.buffer);
      Buffer buffer2 = realBufferedSink0.buffer();
      realBufferedSink0.emitCompleteSegments();
      // Undeclared exception!
      try { 
        buffer2.indexOf((byte)7, 5072L, (-267L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=5072 toIndex=-267
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line(60L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=59 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.readByteString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      long long0 = buffer2.writeAll(hashingSource0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, long0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      buffer0.writeDecimalLong(2147483647L);
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-101);
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte)127;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(deflaterSink0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.write(byteString0);
      long long0 = buffer1.readAll(hashingSink0);
      assertEquals(9, deflater0.getTotalIn());
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      Pipe pipe0 = new Pipe(773L);
      Buffer buffer1 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.indexOfElement((ByteString) null, (-2342L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Pipe pipe0 = new Pipe(498L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.hashCode();
      buffer1.readUnsafe();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeString("+D~ ?|Kmmbus", (-719), 596, charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -719
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Pipe pipe0 = new Pipe(1517L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = buffer0.sha256();
      byteString0.base64();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      
      buffer0.request(1517L);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer2.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSource.sha256(buffer0);
      buffer0.hashCode();
      buffer0.skip((-2216L));
      // Undeclared exception!
      try { 
        buffer0.snapshot(2844);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=2844
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("S]`Tqb", charset0);
      // Undeclared exception!
      try { 
        Charset.forName("S]`Tqb");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // S]`Tqb
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte byte0 = (byte)93;
      long long0 = 3L;
      // Undeclared exception!
      try { 
        buffer0.readUtf8(4L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=4
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "duration <= 0: ");
      Pipe pipe0 = new Pipe(4L);
      pipe0.sourceClosed = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      pipe0.sourceClosed = false;
      pipe0.sourceClosed = false;
      pipe0.sinkClosed = true;
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        buffer0.read(byteArray0, (-295), (-634));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-295 byteCount=-634
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.request((-1L));
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      long long0 = new Integer((-1));
      assertEquals((-1), long0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Pipe pipe0 = new Pipe(1517L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = buffer0.sha256();
      byteString0.base64();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashingSource.sha256(buffer0);
      buffer0.indexOfElement(byteString0, 280375465082880L);
      buffer0.inputStream();
      buffer0.timeout();
      Buffer buffer1 = buffer0.emitCompleteSegments();
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = buffer0.writeUtf8("");
      buffer0.inputStream();
      // Undeclared exception!
      try { 
        buffer1.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D+H9y$FG`NQ%dO ");
      Pipe pipe0 = new Pipe(100000000000000000L);
      pipe0.sourceClosed = true;
      Buffer buffer0 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Pipe pipe0 = new Pipe(1517L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.rangeEquals(571L, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      HashingSource.sha256(buffer1);
      byte[] byteArray0 = realBufferedSink0.buffer.readByteArray();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Pipe pipe0 = new Pipe(1517L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.indexOfElement((ByteString) null, 1517L);
      HashingSource.sha256(buffer0);
      buffer0.readByteArray();
      buffer0.writeShort(4);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = "";
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      try { 
        buffer0.readFully(buffer1, 7L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Pipe pipe0 = new Pipe(1517L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = buffer0.sha256();
      boolean boolean0 = buffer0.rangeEquals(541L, byteString0);
      assertFalse(boolean0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.toString();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)23;
      int int0 = buffer0.read(byteArray0);
      assertEquals((-1), int0);
      
      ByteString.of(byteArray0);
      long long0 = buffer0.indexOf(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("");
      buffer0.inputStream();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      long long0 = buffer1.indexOf(byteString0, 2147483637L);
      buffer0.hmacSha1(byteString0);
      long long1 = buffer1.indexOf((byte)0, 2147483637L);
      assertTrue(long1 == long0);
      assertEquals((-1L), long1);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Pipe pipe0 = new Pipe(278L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.hashCode();
      buffer0.skip((-486L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer0.snapshot((-16777216));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-16777216
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Pipe pipe0 = new Pipe(278L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLongLe(278L);
      buffer0.hashCode();
      buffer0.readByteArray();
      buffer1.inputStream();
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Pipe pipe0 = new Pipe(1517L);
      Buffer buffer0 = pipe0.buffer;
      Pipe pipe1 = new Pipe(1517L);
      Buffer buffer1 = pipe1.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer0.sha256();
      Buffer buffer3 = buffer0.writeLong(21L);
      buffer1.readAll(buffer3);
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      long long0 = buffer3.readLongLe();
      assertEquals(1513209474796486656L, long0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      buffer0.readAndWriteUnsafe();
      buffer0.writeLongLe((-1L));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte)122;
      byteArray0[8] = (byte) (-12);
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Pipe pipe0 = new Pipe(278L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HmacSHA512");
      buffer0.rangeEquals((-2312L), byteString0);
      HashingSource.sha256(buffer0);
      byte[] byteArray0 = buffer0.readByteArray();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(498L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer2 = buffer_UnsafeCursor1.buffer;
      buffer_UnsafeCursor0.buffer.writeUtf8CodePoint(861);
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(65536L);
      Buffer buffer1 = pipe0.buffer;
      ByteString byteString0 = buffer0.sha256();
      buffer0.rangeEquals(65536L, byteString0);
      HashingSource.sha256(buffer1);
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      hashingSource0.hash();
      Pipe pipe1 = new Pipe(3L);
      Buffer buffer2 = pipe1.buffer;
      buffer2.indexOf(byteString0, 541L);
      buffer2.writeDecimalLong((-1L));
      assertEquals(2L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Pipe pipe0 = new Pipe(278L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.indexOf((byte)19);
      buffer0.hashCode();
      // Undeclared exception!
      try { 
        buffer0.writableSegment(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.md5();
      buffer0.outputStream();
      buffer0.hashCode();
      buffer0.writableSegment(1776);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-20);
      // Undeclared exception!
      try { 
        buffer0.write(byteArray0, 2045, (int) (byte) (-20));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=2045 byteCount=-20
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("");
      buffer0.inputStream();
      HashingSource.sha256(buffer0);
      buffer1.writeLongLe(2L);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte) (-3);
      buffer0.readFully(byteArray0);
      assertEquals(3L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Pipe pipe0 = new Pipe(2354L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeIntLe((-527));
      String string0 = "";
      // Undeclared exception!
      try { 
        buffer0.writeString("", 1340, (-527), (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -527 < 1340
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      GzipSource gzipSource0 = new GzipSource(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.clone();
      // Undeclared exception!
      try { 
        buffer1.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer1.indexOf(byteString0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Pipe pipe0 = new Pipe(278L);
      Buffer buffer0 = pipe0.buffer;
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("!~~W", charset0);
      buffer0.indexOf(byteString0, 278L);
      buffer0.readByteArray();
      pipe0.sourceClosed = false;
      buffer0.hmacSha512(byteString0);
      ByteString.decodeHex("");
      Buffer buffer1 = buffer0.writeIntLe(2146381243);
      buffer1.rangeEquals((-2971L), byteString0);
      // Undeclared exception!
      try { 
        buffer1.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 4
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(498L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.sha256();
      Buffer buffer2 = buffer1.writeLong(8192L);
      buffer2.write((Source) buffer0, 0L);
      // Undeclared exception!
      try { 
        buffer1.readAll(buffer2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Pipe pipe0 = new Pipe(278L);
      Buffer buffer0 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.readByteArray();
      ByteString byteString1 = buffer0.hmacSha512(byteString0);
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.readFully(byteArray0);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Pipe pipe0 = new Pipe(278L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte)19;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      pipe0.sourceClosed = false;
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.writeHexadecimalUnsignedLong(1621L);
      // Undeclared exception!
      try { 
        buffer1.indexOf((ByteString) null, 65523L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Pipe pipe0 = new Pipe(498L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeLong(8192L);
      buffer0.indexOf((byte)84, 8192L);
      buffer0.completeSegmentByteCount();
      try { 
        buffer0.readUtf8LineStrict(8192L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=8 content=0000000000002000\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.readByteArray();
      // Undeclared exception!
      try { 
        buffer0.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Pipe pipe0 = new Pipe(278L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = false;
      buffer0.hashCode();
      // Undeclared exception!
      try { 
        buffer0.readByteArray(278L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=278
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = "}Y:;Z0.j(Kjqz";
      buffer0.readByteString();
      int int0 = (-1431655764);
      int int1 = 248;
      String string1 = "4 :FNvlk-J";
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte) (-77);
      ByteString byteString0 = ByteString.of(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer1.select(options0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Pipe pipe0 = new Pipe(2468L);
      Buffer buffer0 = pipe0.buffer;
      Sink sink0 = pipe0.sink();
      HashingSink hashingSink0 = HashingSink.sha256(sink0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.hmacSha256(byteString0);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      // Undeclared exception!
      try { 
        pipe_PipeSink0.write(buffer0, 100000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Pipe pipe0 = new Pipe(657L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.sha256();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      buffer_UnsafeCursor0.end = 3723;
      buffer_UnsafeCursor0.buffer.writeLong((-1250L));
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer0 = buffer_UnsafeCursor0.buffer;
      String string0 = "";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(10L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Pipe pipe0 = new Pipe(498L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.buffer.writeShortLe(97);
      // Undeclared exception!
      try { 
        buffer1.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Pipe pipe0 = new Pipe(278L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)85;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.rangeEquals((-1L), byteString0);
      HashingSource hashingSource0 = HashingSource.sha256(buffer_UnsafeCursor0.buffer);
      HashingSource hashingSource1 = HashingSource.hmacSha1(hashingSource0, byteString0);
      hashingSource1.hash();
      buffer0.indexOf(byteString0, (long) (byte)26);
      buffer0.writeShortLe((byte)26);
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Pipe pipe0 = new Pipe(498L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.writeLong(8192L);
      // Undeclared exception!
      try { 
        buffer2.indexOf((byte)84, (-1902L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=8 fromIndex=-1902 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = buffer0.writeString("", charset0);
      Buffer buffer2 = buffer1.writeUtf8("");
      Buffer buffer3 = new Buffer();
      buffer3.inputStream();
      buffer0.indexOf((byte) (-32), 1687L);
      Buffer buffer4 = buffer2.writeUtf8("");
      assertSame(buffer0, buffer4);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("");
      ByteString[] byteStringArray0 = new ByteString[2];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)55;
      ByteString byteString0 = new ByteString(byteArray0);
      byteStringArray0[0] = byteString0;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-17);
      byteArray1[1] = (byte)13;
      byteArray1[2] = (byte) (-17);
      byteArray1[3] = (byte)55;
      byteArray1[4] = (byte)55;
      ByteString byteString1 = new ByteString(byteArray1);
      byteStringArray0[1] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.selectPrefix(options0);
      assertEquals(0, int0);
      
      buffer0.inputStream();
      long long0 = buffer1.indexOf((byte)12, (long) (byte)12);
      long long1 = buffer0.indexOfElement(byteString1);
      assertTrue(long1 == long0);
      assertEquals((-1L), long1);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, 376L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Pipe pipe0 = new Pipe(278L);
      Buffer buffer0 = pipe0.buffer;
      Sink sink0 = pipe0.sink();
      // Undeclared exception!
      try { 
        sink0.write(buffer0, 278L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Pipe pipe0 = new Pipe(498L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      // Undeclared exception!
      try { 
        realBufferedSink0.writeUtf8("okio.RealBufferedSource", 6, 102);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 102 > 23
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Pipe pipe0 = new Pipe(1517L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = buffer0.sha256();
      boolean boolean0 = buffer0.rangeEquals(541L, byteString0);
      assertFalse(boolean0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      long long0 = buffer0.indexOf(byteString1, 2147483647L);
      assertEquals((-1L), long0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      // Undeclared exception!
      try { 
        buffer0.write(buffer1, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Pipe pipe0 = new Pipe(278L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = true;
      Sink sink0 = pipe0.sink();
      buffer0.readAll(sink0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(12L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1074L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1074
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      boolean boolean0 = buffer0.rangeEquals((-490L), byteString1);
      assertFalse(boolean0);
      
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      ByteString byteString2 = hashingSource1.hash();
      long long0 = buffer0.indexOf(byteString2, 2L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eL>5%:u}-;ke8");
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.snapshot();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)102;
      Buffer buffer1 = buffer0.writeIntLe((byte) (-101));
      byteArray0[2] = (byte)1;
      byte byte0 = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)86;
      byte byte1 = (byte) (-73);
      // Undeclared exception!
      try { 
        buffer1.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Pipe pipe0 = new Pipe(498L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeLong(8192L);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      buffer0.indexOf((byte)84, 498L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      Segment segment0 = new Segment();
      buffer0.writeLongLe(0L);
      Buffer buffer1 = buffer0.writeUtf8("HnzgffsIf,vX");
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Pipe pipe0 = new Pipe(278L);
      byte[] byteArray0 = null;
      pipe0.sourceClosed = true;
      Buffer buffer0 = pipe0.buffer;
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      try { 
        buffer0.write((Source) inflaterSource0, 1687L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      buffer0.writeUtf8CodePoint((-40));
      // Undeclared exception!
      try { 
        buffer0.writableSegment(57343);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Pipe pipe0 = new Pipe(278L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = pipe0.buffer;
      buffer1.write((Source) buffer0, (-1421L));
      buffer1.indexOf((byte)12, 278L);
      OutputStream outputStream0 = buffer1.outputStream();
      assertNotNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Pipe pipe0 = new Pipe(278L);
      Buffer buffer0 = pipe0.buffer;
      Sink sink0 = pipe0.sink();
      long long0 = buffer0.readAll(sink0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Pipe pipe0 = new Pipe(1517L);
      Buffer buffer0 = pipe0.buffer;
      Pipe pipe1 = new Pipe(268L);
      Pipe pipe2 = new Pipe(268L);
      Buffer buffer1 = pipe2.buffer;
      buffer1.indexOf((byte)101, 2L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0);
      try { 
        buffer0.readFrom((InputStream) bufferedInputStream0, 1176L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readString(2678L, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=2678
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Pipe pipe0 = new Pipe(278L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeUtf8CodePoint((byte)12);
      Deflater deflater0 = null;
      try {
        deflater0 = new Deflater((byte)12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("");
      buffer1.writeHexadecimalUnsignedLong(16711680L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Charset.forName("2gg.'7W");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 2gg.'7W
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("");
      String string0 = "2gg.'7W";
      buffer0.inputStream();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "2gg.'7W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.skip(65536L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Pipe pipe0 = new Pipe(16L);
      Buffer buffer0 = pipe0.buffer;
      MockFile mockFile0 = new MockFile("?pU;iFXB$GNch]smE", "?pU;iFXB$GNch]smE");
      MockFile mockFile1 = new MockFile(mockFile0, "?pU;iFXB$GNch]smE");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)0;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-27);
      byteArray1[1] = (byte) (-27);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-27);
      byteArray1[4] = (byte) (-97);
      byteArray1[5] = (byte) (-97);
      byteArray1[6] = (byte)34;
      byteArray1[7] = (byte) (-97);
      ByteString byteString0 = new ByteString(byteArray1);
      buffer0.indexOfElement(byteString0, 341L);
      realBufferedSink0.buffer.writeInt((byte) (-97));
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)115, 5L, (long) (byte) (-27));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=5 toIndex=-27
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      realBufferedSource0.readUtf8Line();
      ByteString byteString0 = buffer0.snapshot(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte) (-53);
      byteArray0[7] = (byte) (-53);
      byteString0.lastIndexOf(byteArray0, (-2715));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.close();
      buffer1.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.buffer.write(byteArray0);
      assertEquals(8L, buffer1.size());
      
      Buffer buffer2 = realBufferedSource0.buffer.write(byteString0);
      assertEquals(8L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer0.readUtf8Line();
      buffer1.exhausted();
      // Undeclared exception!
      try { 
        buffer1.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Pipe pipe0 = new Pipe(278L);
      Buffer buffer0 = pipe0.buffer;
      long long0 = buffer0.indexOf((byte)12, (long) (byte)12);
      assertEquals((-1L), long0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      // Undeclared exception!
      try { 
        buffer0.read(byteArray0, 115, (-2300));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=115 byteCount=-2300
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)107;
      byteString0.lastIndexOf(byteArray0);
      buffer0.indexOfElement(byteString0);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      InflaterSource inflaterSource1 = new InflaterSource(inflaterSource0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource1);
      Buffer buffer1 = realBufferedSource0.buffer();
      inflaterSource0.timeout();
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = buffer1.buffer();
      buffer0.writeHexadecimalUnsignedLong((-3840L));
      buffer0.sha1();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-3840L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -3840
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOfElement(byteString0);
      Inflater inflater1 = new Inflater(true);
      InflaterSource inflaterSource1 = new InflaterSource((BufferedSource) buffer0, inflater1);
      InflaterSource inflaterSource2 = new InflaterSource(inflaterSource1, inflater1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.buffer();
      int int0 = 0;
      try { 
        buffer0.require(255L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = buffer1.buffer();
      Buffer buffer3 = buffer2.writeHexadecimalUnsignedLong((-3840L));
      ByteString byteString0 = buffer0.sha1();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      buffer3.hmacSha256(byteString0);
      ByteString.of(byteArray0);
      HashingSink.hmacSha256(buffer3, byteString0);
      long long0 = buffer2.readAll(buffer0);
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals(16L, long0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      long long0 = 811L;
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeDecimalLong((-657L));
      // Undeclared exception!
      try { 
        buffer1.readByteArray((long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      String string0 = "tI|c\"r?=";
      ByteString.decodeBase64("tI|c\"r?=");
      // Undeclared exception!
      try { 
        buffer0.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer1.readString(1028L, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1028
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOfElement(byteString0);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      InflaterSource inflaterSource1 = new InflaterSource(inflaterSource0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource1);
      Buffer buffer1 = realBufferedSource0.buffer();
      inflaterSource0.timeout();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer1.writeString("pjbmrb=0yVI%%VrX", (-2256), 0, charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -2256
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer1.writeShortLe((-1));
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer1.readAndWriteUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      ByteString byteString0 = ByteString.encodeUtf8("T");
      HashingSink hashingSink0 = HashingSink.hmacSha256(deflaterSink0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.indexOfElement(byteString0, 0L);
      Buffer buffer2 = buffer1.writeInt(665);
      // Undeclared exception!
      try { 
        buffer2.indexOf((byte)7, (long) (byte)7, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=4 fromIndex=7 toIndex=0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      realBufferedSource0.readUtf8Line();
      ByteString byteString0 = realBufferedSource0.buffer.snapshot(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)112;
      byteString0.lastIndexOf(byteArray0, 0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.close();
      buffer1.readUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      long long0 = 0L;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        buffer0.read(byteArray0, (-4269), (int) (byte)102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=6 offset=-4269 byteCount=102
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = 0L;
      Charset.defaultCharset();
      buffer0.writeLong(0L);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      Deflater deflater0 = new Deflater(0);
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      DeflaterSink deflaterSink1 = new DeflaterSink(deflaterSink0, deflater0);
      HashingSink hashingSink0 = HashingSink.sha1(deflaterSink1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      ByteString byteString0 = null;
      realBufferedSink0.buffer.rangeEquals(0L, (ByteString) null, 0, (-3083));
      deflaterSink1.write(realBufferedSink0.buffer, 0L);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.snapshot(0);
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      long long0 = 523L;
      Pipe pipe0 = new Pipe(523L);
      Buffer buffer0 = pipe0.buffer;
      OutputStream outputStream0 = null;
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readAndWriteUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Pipe pipe0 = new Pipe(894L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.buffer.segmentSizes();
      Buffer buffer0 = realBufferedSink0.buffer();
      buffer0.snapshot();
      realBufferedSink0.buffer.sha512();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      realBufferedSink0.buffer.readFrom(inputStream0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = buffer1.buffer();
      long long0 = (-3840L);
      buffer2.writeHexadecimalUnsignedLong((-3840L));
      buffer0.sha1();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(4L);
      long long1 = 0L;
      // Undeclared exception!
      try { 
        inflater0.setInput((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Inflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(0);
      buffer1.readIntLe();
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate(51);
      charset0.encode(charBuffer0);
      ByteString byteString0 = ByteString.encodeString("bbtX@j+=3h76kG~Q>=", charset0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      byteString0.indexOf(byteArray0, (-131));
      byteString0.sha512();
      buffer0.indexOf(byteString0);
      Segment segment0 = buffer0.writableSegment(1407);
      assertNotNull(segment0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      String string0 = buffer1.readUtf8Line();
      assertNull(string0);
      
      boolean boolean0 = buffer1.exhausted();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)113;
      int int0 = buffer0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("");
      // Undeclared exception!
      try { 
        Charset.forName("2gg.'7W");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 2gg.'7W
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.snapshot();
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      buffer0.outputStream();
      buffer0.readByteString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Pipe pipe0 = new Pipe(16L);
      Buffer buffer0 = pipe0.buffer;
      MockFile mockFile0 = new MockFile("?pU;iFXB$GNch]smE", "?pU;iFXB$GNch]smE");
      MockFile mockFile1 = new MockFile(mockFile0, "?pU;iFXB$GNch]smE");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)72;
      buffer0.write(byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "okio.Buffer";
      objectArray0[1] = (Object) "?pU;iFXB$GNch]smE";
      mockPrintStream0.printf(locale0, "?pU;iFXB$GNch]smE", objectArray0);
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "okio.Buffer", objectArray0);
      Buffer buffer1 = buffer0.writeTo((OutputStream) printStream0);
      buffer0.clear();
      buffer0.indexOf((byte) (-9), 0L, (long) (byte)34);
      try { 
        buffer1.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      // Undeclared exception!
      try { 
        buffer0.writableSegment(57343);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.timeout();
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }
}
