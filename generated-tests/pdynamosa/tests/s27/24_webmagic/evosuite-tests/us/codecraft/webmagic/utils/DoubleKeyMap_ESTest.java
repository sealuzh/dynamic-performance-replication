/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 13:45:04 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Object, Map<Integer, String>> hashMap0 = new HashMap<Object, Map<Integer, String>>();
      Integer integer0 = new Integer(2734);
      Integer integer1 = new Integer(2734);
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>(hashMap0);
      doubleKeyMap0.put((Object) integer0, integer0, "");
      doubleKeyMap0.remove((Object) integer1, integer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>(class0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Object, Map<Map<String, Object>, String>> hashMap0 = new HashMap<Object, Map<Map<String, Object>, String>>();
      Class<Map> class0 = Map.class;
      HashMap<Map<String, Object>, String> hashMap1 = new HashMap<Map<String, Object>, String>();
      DoubleKeyMap<HashMap<String, Object>, Integer, HashMap<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Integer, HashMap<String, Integer>>();
      Map<String, Object> map0 = doubleKeyMap0.newMap();
      hashMap1.put(map0, "us.codecraft.webmagic.utils.DoubleKeyMap");
      hashMap0.put(class0, hashMap1);
      DoubleKeyMap<Object, Map<String, Object>, String> doubleKeyMap1 = new DoubleKeyMap<Object, Map<String, Object>, String>(hashMap0, class0);
      Map<Map<String, Object>, String> map1 = doubleKeyMap1.remove((Object) class0);
      assertFalse(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Integer, Map<String, String>> hashMap0 = new HashMap<Integer, Map<String, String>>();
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>(hashMap0);
      Map<String, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>(map0, class0);
      Object object0 = doubleKeyMap1.remove("", (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Map<Object, Map<Integer, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>(map0);
      String string0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Integer) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<HashMap<String, String>, Object, HashMap<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, Object, HashMap<Integer, Integer>>();
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Integer>();
      Map<Integer, Integer> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, HashMap<Object, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, HashMap<Object, Integer>, Integer>((Map<Map<Integer, String>, Map<HashMap<Object, Integer>, Integer>>) null);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      DoubleKeyMap<Map<Integer, String>, Map<String, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, String>, Map<String, Object>, Object>((Map<Map<Integer, String>, Map<Map<String, Object>, Object>>) null);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      Object object0 = doubleKeyMap1.put((Map<Integer, String>) hashMap0, (Map<String, Object>) hashMap1, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Map<HashMap<String, Integer>, Object>> hashMap0 = new HashMap<String, Map<HashMap<String, Integer>, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, HashMap<String, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Integer>, Object>(hashMap0, class0);
      Object object0 = doubleKeyMap0.get("!^kbp{^JYr -$&", (HashMap<String, Integer>) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>();
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>(hashMap0);
      Integer integer0 = new Integer(4766);
      Object object0 = doubleKeyMap1.get((Object) doubleKeyMap0, integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Map<Object, Integer>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, Integer, Integer>();
      Map<Integer, Integer> map0 = doubleKeyMap0.get((Map<Object, Integer>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>();
      Map<Object, Map<String, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(map0);
      DoubleKeyMap<Object, String, Map<Integer, String>> doubleKeyMap2 = new DoubleKeyMap<Object, String, Map<Integer, String>>();
      Map<String, Map<Integer, String>> map1 = doubleKeyMap2.get((Object) doubleKeyMap1);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<HashMap<String, String>, Object, HashMap<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, Object, HashMap<Integer, Integer>>();
      HashMap<Object, Map<Object, Map<Object, String>>> hashMap0 = new HashMap<Object, Map<Object, Map<Object, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Map<Object, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Map<Object, String>>(hashMap0, class0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) class0, (Object) doubleKeyMap0, (Map<Object, String>) hashMap1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      Map<String, Map<Map<Integer, String>, HashMap<String, Integer>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Map<Integer, String>, HashMap<String, Integer>> doubleKeyMap1 = new DoubleKeyMap<String, Map<Integer, String>, HashMap<String, Integer>>(map0);
      Map<Map<Integer, String>, HashMap<String, Integer>> map1 = doubleKeyMap1.remove((String) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>();
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put(object0, integer0, "wrong proto type map ");
      String string0 = doubleKeyMap0.put(object0, integer0, "wrong proto type map ");
      assertEquals("wrong proto type map ", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>();
      Map<HashMap<Integer, Object>, Map<Object, HashMap<Object, Object>>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<HashMap<Integer, Object>, Object, HashMap<Object, Object>> doubleKeyMap2 = new DoubleKeyMap<HashMap<Integer, Object>, Object, HashMap<Object, Object>>(map0);
      HashMap<Object, Object> hashMap0 = doubleKeyMap2.get((HashMap<Integer, Object>) null, (Object) doubleKeyMap0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Map<HashMap<String, Object>, Object>> hashMap0 = new HashMap<String, Map<HashMap<String, Object>, Object>>();
      DoubleKeyMap<String, HashMap<String, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Object>, Object>(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HashMap<HashMap<String, Object>, Object> hashMap2 = new HashMap<HashMap<String, Object>, Object>();
      hashMap0.put("us.codecraft.webmagic.utils.DoubleKeyMap", hashMap2);
      Object object0 = doubleKeyMap0.get("us.codecraft.webmagic.utils.DoubleKeyMap", hashMap1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Object, Map<Integer, String>> hashMap0 = new HashMap<Object, Map<Integer, String>>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>(hashMap0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      doubleKeyMap0.put((Object) null, integer1, "");
      doubleKeyMap0.remove((Object) null, integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Map<Object, Map<Integer, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>(map0);
      Map<Object, Map<String, Object>> map1 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap2 = new DoubleKeyMap<Object, String, Object>(map1, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap2.put((Object) null, (String) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
