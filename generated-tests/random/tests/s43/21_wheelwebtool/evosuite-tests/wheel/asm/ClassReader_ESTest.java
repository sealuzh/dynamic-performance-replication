/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 04:58:42 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Label;
import wheel.asm.MethodWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$ftB?Bje)YX|O");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-46);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      char[] charArray0 = new char[8];
      charArray0[0] = 'U';
      charArray0[1] = '!';
      charArray0[2] = '#';
      charArray0[3] = '_';
      charArray0[4] = 'S';
      charArray0[5] = '@';
      charArray0[6] = ')';
      charArray0[7] = 'M';
      // Undeclared exception!
      try { 
        classReader0.readUTF8(405, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.visitField(89, "org.apache.commons.io.filefilter.TrueFileFilter", "java/lang/Object", "<init>", (Object) null);
      classReader0.copyPool(classWriter0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Signature");
      char[] charArray0 = new char[1];
      ClassWriter classWriter1 = new ClassWriter(1);
      classWriter1.newDouble(2);
      classWriter1.invalidFrames = true;
      classReader0.copyPool(classWriter1);
      charArray0[0] = 'x';
      classReader0.readConst(24, charArray0);
      classReader0.getInterfaces();
      classReader0.readByte(676);
      classReader0.getSuperName();
      ClassWriter classWriter2 = new ClassWriter(classReader0, 87);
      classReader0.copyPool(classWriter2);
      char[] charArray1 = new char[4];
      charArray1[0] = 'x';
      charArray1[1] = ';';
      charArray1[2] = 'x';
      charArray1[3] = 'x';
      // Undeclared exception!
      try { 
        classReader0.readUTF8(24, charArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
      int int0 = 2102;
      ClassWriter classWriter0 = new ClassWriter(2102);
      classReader0.copyPool(classWriter0);
      classReader0.getSuperName();
      classReader0.getAccess();
      // Undeclared exception!
      try { 
        classReader0.readLong(2102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Opcodes");
      ClassWriter classWriter0 = new ClassWriter(995);
      Attribute[] attributeArray0 = new Attribute[6];
      Attribute attribute0 = new Attribute("U");
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = 'U';
      charArray0[2] = 'V';
      charArray0[3] = 'V';
      charArray0[4] = 'p';
      Label label0 = new Label();
      Label label1 = new Label();
      Label label2 = label0.successor;
      Attribute attribute1 = new Attribute("3C.ag");
      attributeArray0[1] = attribute1;
      Attribute attribute2 = new Attribute("U");
      attributeArray0[2] = attribute2;
      Attribute attribute3 = attribute2.next;
      attributeArray0[3] = null;
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Opcodes");
      classReader0.getSuperName();
      int int0 = 825;
      classReader0.readUnsignedShort(825);
      classReader0.getSuperName();
      ClassWriter classWriter0 = new ClassWriter(95);
      classReader0.copyPool(classWriter0);
      classReader0.readShort(185);
      classReader0.getClassName();
      classReader0.copyPool(classWriter0);
      int int1 = (-44);
      // Undeclared exception!
      try { 
        classReader0.readByte((-44));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -44
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Opcodes");
      assertEquals(3040, classReader0.header);
      
      ClassWriter classWriter0 = new ClassWriter(995);
      Attribute[] attributeArray0 = new Attribute[6];
      Attribute attribute0 = new Attribute("U");
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = 'U';
      charArray0[2] = 'V';
      charArray0[3] = 'V';
      charArray0[4] = 'p';
      Label label0 = new Label();
      Label label1 = new Label();
      Label label2 = label0.successor;
      Attribute attribute1 = new Attribute("3C.ag");
      attributeArray0[1] = attribute1;
      Attribute attribute2 = new Attribute("U");
      attributeArray0[2] = attribute2;
      Attribute attribute3 = attribute2.next;
      attributeArray0[3] = null;
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 9);
      char[] charArray1 = new char[8];
      charArray1[0] = '1';
      charArray1[1] = '1';
      charArray1[2] = 'p';
      charArray1[3] = 'V';
      charArray1[4] = 'U';
      charArray1[5] = 'U';
      charArray1[6] = '1';
      charArray1[7] = 'p';
      Object object0 = classReader0.readConst(95, charArray1);
      assertEquals("\u0001\uE240\n\u0001\uF1C1\u01C1", object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Opcodes");
      ClassWriter classWriter0 = new ClassWriter(995);
      Attribute[] attributeArray0 = new Attribute[6];
      Attribute attribute0 = new Attribute("U");
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = 'U';
      charArray0[2] = 'V';
      charArray0[3] = 'V';
      charArray0[4] = 'p';
      Label label0 = new Label();
      Label label1 = new Label();
      Label label2 = label0.successor;
      Attribute attribute1 = new Attribute("wheel.asm.Opcodes");
      attributeArray0[1] = attribute1;
      Attribute attribute2 = new Attribute("U");
      attributeArray0[2] = attribute2;
      Attribute attribute3 = attribute2.next;
      attributeArray0[3] = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 8);
      Label[] labelArray0 = new Label[1];
      labelArray0[0] = null;
      // Undeclared exception!
      try { 
        classReader0.readLabel(132, labelArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 132
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.DelegateFileFilter");
      classReader0.getInterfaces();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 64;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        classReader0.getItem(64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.OrFileFilter");
      classReader0.getClassName();
      classReader0.getInterfaces();
      int int0 = (-1879);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        classReader0.readClass(2908, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte)55;
      byteArray0[8] = (byte)28;
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0, (byte) (-5), 159);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.OrFileFilter");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, classReader0.b);
      ClassWriter classWriter0 = new ClassWriter(4);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      classAdapter0.visitSource("The list of suffixes must not be null", "");
      int int0 = 1239;
      classReader0.accept((ClassVisitor) classAdapter0, 1239);
      classReader0.getSuperName();
      ClassWriter classWriter1 = new ClassWriter(classReader0, 8);
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      classWriter1.firstMethod = methodWriter0;
      classReader0.copyPool(classWriter1);
      int int1 = (-1732);
      classWriter1.newMethod("byte", "org/apache/commons/io/filefilter/AbstractFileFilter", "Synthetic", true);
      // Undeclared exception!
      try { 
        classReader0.readInt((-1732));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getInterfaces();
      classReader0.getClassName();
      int int0 = (-193);
      int int1 = 202;
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      charArray0[1] = 'u';
      ClassWriter classWriter0 = new ClassWriter(classReader0, (-3079));
      classWriter0.addType("");
      classWriter0.newUTF8("C`y/3*w)e");
      classReader0.copyPool(classWriter0);
      classReader0.getSuperName();
      charArray0[2] = 'y';
      // Undeclared exception!
      try { 
        classReader0.readUTF8(202, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = (-1266);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0, (-1266), (-1266));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)26;
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0, (byte) (-1), (byte)95);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      ClassWriter classWriter0 = new ClassWriter(8070);
      // Undeclared exception!
      classReader0.accept((ClassVisitor) classWriter0, (-548));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)19;
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-2997));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 7802);
      Attribute[] attributeArray0 = new Attribute[1];
      Attribute attribute0 = new Attribute("wheel.asm.MethodWriter");
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      charArray0[1] = ' ';
      charArray0[2] = '=';
      Label[] labelArray0 = new Label[0];
      Attribute attribute1 = attribute0.read(classReader0, 396, 8, charArray0, 1, labelArray0);
      ByteVector byteVector0 = new ByteVector(18);
      ByteVector byteVector1 = byteVector0.putUTF8("wheel.asm.MethodWriter");
      byteVector1.putShort((-1462));
      attribute1.put(classWriter0, classReader0.b, 4, 5, 2, byteVector1);
      Attribute attribute2 = attribute1.next;
      attributeArray0[0] = null;
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 2);
      classReader0.getClassName();
      classReader0.getClassName();
      // Undeclared exception!
      try { 
        classReader0.readClass(22, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
