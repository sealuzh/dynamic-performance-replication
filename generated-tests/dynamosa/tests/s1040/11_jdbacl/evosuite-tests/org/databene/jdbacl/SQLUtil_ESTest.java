/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 05 16:54:21 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBSchema dBSchema0 = new DBSchema(" wLeVPlcd}x}%)g");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("iVoe<", dBSchema0);
      String[] stringArray0 = new String[5];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " wLeVPlcd}x}%)g", false, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT \" wLeVPlcd}x}%)g\" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d`LkN\"5=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (double) (-4);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 4", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("SELECT INTO(2,0)");
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "org.databene.jdbacl.SQLUtil", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null", (DBTable) null, (-232004974), "");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null.null, null.null, null.null, null.null");
      DBDataType dBDataType0 = DBDataType.getInstance((-1), "DX@sdR*lCQA4F");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("4Jz-/|KM#C5P+-.'");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 931, "4Jz-/|KM#C5P+-.'");
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "CONSTRAINT ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter materialized vieorg.apachederby.iapi.types.booleandatavalue", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.substituteMarkers(" pyUs", "4", nameSpec0);
      assertEquals(" pyUs", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "", "");
      assertEquals("''", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object object0 = new Object();
      String string0 = SQLUtil.renderValue(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("5[&FeKGF&z= ");
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM 5[&FeKGF&z=  WHERE ", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cfLufD(L8c");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1381), "updatef#l<ixr$xtp]^.hoy");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("jNi]$^KlH9Ax#<Q_~#S", defaultDBTable0, dBDataType0, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.setVersionColumn(true);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CLOB", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("blter materialized view", defaultDBTable0, (DBDataType) null, (Integer) null, (Integer) null);
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "O", true, "blter materialized view");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals(".null, .null, .null, .null, .null", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insertalte");
      DBDataType dBDataType0 = DBDataType.getInstance(19, "insertalte");
      Integer integer0 = Integer.valueOf((-2378));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("insertalte", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setVersionColumn(true);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("insertalte INSERTALTE(-2378) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("}Rwa", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("create table");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getUpdateRule());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create table", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "CONSTRAINT  ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , )", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(stringArray0[0], (DBSchema) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "into", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , )", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.leftJoin("^>1)vL11k", stringArray0, "yJ74X#?", (String) null, stringArray0);
      assertEquals("left join yJ74X#? as null on ^>1)vL11k.null = null.null and ^>1)vL11k.null = null.null and ^>1)vL11k.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.leftJoin("^>1)vL11k", stringArray0, "", "", stringArray0);
      assertEquals("left join  as  on ^>1)vL11k.null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("WY=RbdA}0", stringArray0, "WY=RbdA}0", " or", stringArray0);
      assertEquals("left join WY=RbdA}0 as  or on ", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.leftJoin((String) null, stringArray0, stringArray0[1], "rename", stringArray0);
      assertEquals("left join null as rename on null.null = rename.null and null.null = rename.null and null.null = rename.null and null.null = rename.null and null.null = rename.null and null.null = rename.null and null.null = rename.null", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.leftJoin("", stringArray0, "''", "_?Q3", stringArray0);
      assertEquals("left join '' as _?Q3 on .null = _?Q3.null and .null = _?Q3.null and .null = _?Q3.null and .null = _?Q3.null and .null = _?Q3.null", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String string0 = SQLUtil.join("BETMg", "BETMg", stringArray0, stringArray0[0], stringArray0[2], stringArray0);
      assertEquals("BETMg join null as null on BETMg.null = null.null and BETMg.null = null.null and BETMg.null = null.null and BETMg.null = null.null and BETMg.null = null.null and BETMg.null = null.null and BETMg.null = null.null and BETMg.null = null.null and BETMg.null = null.null and BETMg.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, "eEaxl4-4K", "", stringArray0);
      assertEquals("eEaxl4-4K as  on ", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.join((String) null, "[E7U+9Ey(P", stringArray0, "", "drop indexalter materialized vieorg.apachederby.iapi.types.booleandatavalue", stringArray0);
      assertEquals(" as drop indexalter materialized vieorg.apachederby.iapi.types.booleandatavalue on [E7U+9Ey(P.null = drop indexalter materialized vieorg.apachederby.iapi.types.booleandatavalue.null and [E7U+9Ey(P.null = drop indexalter materialized vieorg.apachederby.iapi.types.booleandatavalue.null and [E7U+9Ey(P.null = drop indexalter materialized vieorg.apachederby.iapi.types.booleandatavalue.null and [E7U+9Ey(P.null = drop indexalter materialized vieorg.apachederby.iapi.types.booleandatavalue.null and [E7U+9Ey(P.null = drop indexalter materialized vieorg.apachederby.iapi.types.booleandatavalue.null", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("", "", stringArray0, "truncate", "alter ", stringArray0);
      assertEquals("truncate as alter  on ", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.innerJoin((String) null, stringArray0, "RE8kN", (String) null, stringArray0);
      assertEquals("RE8kN as null on null.null = null.null and null.null = null.null and null.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.innerJoin("", stringArray0, "alter table", "", stringArray0);
      assertEquals("alter table as  on .null = .null and .null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.innerJoin("drop index", stringArray0, (String) null, "drop table", stringArray0);
      assertEquals("null as drop table on drop index.null = drop table.null and drop index.null = drop table.null", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.innerJoin("execute", stringArray0, "", "`Z(JwY?TB2", stringArray0);
      assertEquals(" as `Z(JwY?TB2 on execute.null = `Z(JwY?TB2.null and execute.null = `Z(JwY?TB2.null and execute.null = `Z(JwY?TB2.null and execute.null = `Z(JwY?TB2.null and execute.null = `Z(JwY?TB2.null", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("", stringArray0, "truncategetstring", "getHashLeftOuterJoinResultSet", stringArray0);
      assertEquals("truncategetstring as getHashLeftOuterJoinResultSet on ", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*/");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("*/", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES */()", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create table", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , ) REFERENCES null(, , )", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("SELECT * FROM ", false, "SELECT * FROM ", "SELECT * FROM ");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, (NameSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "c!'e7TDZ.y$?wp");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("v%jV] a2<~eq-5");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "v%jV] a2<~eq-5", true, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT \"v%jV] a2<~eq-5\" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[14];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) "null.null, null.null, null.null, null.null, null.null");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("truncatefree zst", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("cfLufD(L8c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: cfLufD(L8c
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("alter tableclob", (String[]) null, "alter tableclob", "alter tableclob", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String[] stringArray1 = new String[3];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("qpl6dC&CWmHn,1,<kk", stringArray0, "!{WGAqrJUc|Q", "P{", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.join("seject into/?w.2i|czn(", "*BJ6?w", stringArray0, "*BJ6?w", "*BJ6?w", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String[] stringArray1 = new String[2];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("BETMg", stringArray0, "BETMg", "BETMg join null as null on BETMg.null = null.null and BETMg.null = null.null and BETMg.null = null.null and BETMg.null = null.null", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("jWl0}Q0=M[:9&]*rDD", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("HM", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBSchema dBSchema0 = new DBSchema("H");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("H;cU(oS(BUT", dBSchema0);
      String[] stringArray0 = new String[2];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "H;cU(oS(BUT", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT H;cU(oS(BUT ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("v%jV] a2<~eq-5");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, stringArray0[0], true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("WY]?7aRT_>5{/]");
      String[] stringArray0 = new String[5];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("GoplmkM", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("WY]?7aRT_>5{/]");
      String[] stringArray0 = new String[5];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("GoplmkM", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT GoplmkM ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materiaTized view");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "8)5i#{", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("create table", "create table", (String[]) null, "create table", "create table", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = SQLUtil.join("inner", "delete", stringArray0, "GMT", "inner", stringArray0);
      assertEquals("GMT as inner on delete.null = inner.null and delete.null = inner.null and delete.null = inner.null and delete.null = inner.null and delete.null = inner.null and delete.null = inner.null and delete.null = inner.null and delete.null = inner.null and delete.null = inner.null", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into/s?w;.2i|czn(");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("execute");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("select into/s?w;.2i|czn(");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("alter tablejni]$^klh9ax#<q_~#s");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("execute");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("alter tablejni]$^klh9ax#<q_~#s");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = SQLUtil.renderValue("org.databene.jdbacl.SQLUtil");
      assertEquals("'org.databene.jdbacl.SQLUtil'", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-2353), "+i\",_v7E");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Q'<Y>{Z\"9s\u0001", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("+I\",_V7E(1,1)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-228587652), "CLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CLOB");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder(1411);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("CLOB", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBDataType dBDataType0 = DBDataType.getInstance(1, "f;8]<ybh;sN+GP%&pj");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("write to page ", (DBTable) null, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("F;8]<YBH;SN+GP%&PJ(2)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-2521), "yW.|*]-");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("yW.|*]-", (DBTable) null, dBDataType0, (Integer) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("YW.|*]-", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d`LkN\"5=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 205.09951050177;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("205.09951050177", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8nG9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("8", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[15];
      String string0 = SQLUtil.renderColumnListWithTableName(stringArray0[3], stringArray0);
      assertEquals("null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("select intoblter materialized view", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringReader stringReader0 = new StringReader("alTer taryejni]v^klhVaB<q_~?s");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (-919.82242277813);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 919.82242277813", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = SQLUtil.normalize("uF'aTb|58", true);
      assertEquals("uF 'aTb|58'", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = SQLUtil.normalize("aN:mWr r8;\"jP|V", true);
      assertEquals("aN : mWr r8 ; \"jP|V\"", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = SQLUtil.normalize("um-=XuN *wvf=[t2um", false);
      assertEquals("um - = XuN  * wvf = [ t2um", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = SQLUtil.normalize("seject into/s?w;.2i|czn(", true);
      assertEquals("seject into / s ? w ;.2i | czn (", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = SQLUtil.normalize("exec0!zhsc%a{;,/#n0z!", false);
      assertEquals("exec0 ! zhsc % a { ;, / # n0z !", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = SQLUtil.normalize("delay (change pending)", true);
      assertEquals("delay (change pending)", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", true);
      assertEquals("*/", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = SQLUtil.removeComments("update");
      assertEquals("update", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("'6Cnv");
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertEquals("container '6Cnv", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("delete", dBSchema0);
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertNotNull(string0);
      assertEquals("unique constraint constraint", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("RBETAg", true, "RBETAg", "RBETAg");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT RBETAg ", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, (String) null, "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("SELECT * FROM ", false, "SELECT * FROM ", "SELECT * FROM ");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, (String) null, "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("RBETAg", true, "RBETAg", "RBETAg");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT RBETAg ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("=vuy", dBCatalog0);
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("null.=vuy", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("", "u=|O'N", "truncated`lkn5=");
      String string0 = SQLUtil.ownerDotComponent(dBSequence0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("BETMg");
      SQLUtil.addOptionalCondition("BETMg", stringBuilder0);
      assertEquals("BETMg or BETMg", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "YQn1+qz{soDz!_PXM");
      SQLUtil.addRequiredCondition("YQn1+qz{soDz!_PXM", stringBuilder0);
      assertEquals("YQn1+qz{soDz!_PXM and YQn1+qz{soDz!_PXM", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("SELECT * FROM ", false, "SELECT * FROM ", "SELECT * FROM ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"SELECT * FROM \" CHECK SELECT * FROM ", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("inner");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("pP*`*4pH ,", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES inner()", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "um-=XuN *wvf=[t2um", false, (String[]) null);
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("$2r'3`");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter taryejni]$^klh9-x#<q_~#s", true, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("SELECT * xFwOM ");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop index");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessionalter tablejni]$^klh9ax#<q_~#s");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Character character0 = new Character('?');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'?'", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, dBDataType0, integer0, integer0);
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "CLOB", false, "CLOB");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("CLOB CLOB NOT NULL", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("&>^oAP");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter table", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-2353), "into");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("&>^oAP", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setDefaultValue("alter table");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("&>^oAP INTO(1) DEFAULT alter table NULL", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/*", defaultDBTable0, (DBDataType) null);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("/*, /*", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("4Jz-/|KM#C5P+A'", (DBTable) null, 366, "4Jz-/|KM#C5P+A'");
      DBColumn[] dBColumnArray0 = new DBColumn[17];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("4Jz-/|KM#C5P+A'", (DBTable) null, 366, "4Jz-/|KM#C5P+A'");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("4Jz-/|KM#C5P+A'", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[2];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "inner", false, stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("inner");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(122, "G");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("G", defaultDBTable0, dBDataType0, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("f>", defaultDBTable0, dBDataType0, integer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2009);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals(49, charArrayWriter0.size());
      assertEquals("create table null (\n\tG G(3) NULL,\n\tf> G(3) NULL\n)", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("delay (change pending)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"change pending\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn(" REFERENCES ", (DBTable) null, (-221944701), "(h /}\"O<3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (h /}\"O<3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, defaultDBTable0, "SWu+o");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("select intoblter materialized view");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "CLOB", false, stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("CLOB");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("()", (String[]) null, "()", "()", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, dBDataType0, integer0, integer0);
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "CLOB", false, "CLOB");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("CLOB NOT NULL", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }
}
