/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:16:45 GMT 2018
 */

package com.google.gson.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.internal.LinkedHashTreeMap;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinkedHashTreeMap_ESTest extends LinkedHashTreeMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      boolean boolean0 = linkedHashTreeMap_KeySet0.contains(linkedHashTreeMap0);
      assertFalse(boolean0);
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)linkedHashTreeMap0.entrySet();
      assertNotNull(set0);
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      String string0 = linkedHashTreeMap_Node0.toString();
      assertEquals("null=null", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Object>();
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      linkedHashTreeMap_Node1.getValue();
      LinkedHashTreeMap.AvlBuilder<Object, Integer> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Integer>();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>();
      linkedHashTreeMap0.remove((Object) linkedHashTreeMap1);
      assertEquals(0, linkedHashTreeMap1.size());
      assertEquals(0, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<Object, Object> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, Object>();
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      linkedHashTreeMap0.remove((Object) linkedHashTreeMap0, (Object) linkedHashTreeMap_AvlIterator0);
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)linkedHashTreeMap0.entrySet();
      assertEquals(0, set0.size());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Object, Object>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 16);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node0;
      LinkedHashTreeMap.Node<Object, Object>[] linkedHashTreeMap_NodeArray1 = LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<Object, Object>[]) linkedHashTreeMap_NodeArray0);
      assertNotNull(linkedHashTreeMap_NodeArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      boolean boolean0 = linkedHashTreeMap_EntrySet0.contains(linkedHashTreeMap_Node0);
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, String>();
      boolean boolean0 = linkedHashTreeMap_Node1.equals(linkedHashTreeMap_Node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>(comparator0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      int int0 = linkedHashTreeMap_EntrySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>();
      linkedHashTreeMap0.entrySet();
      Set<Map.Entry<Object, Integer>> set0 = (Set<Map.Entry<Object, Integer>>)linkedHashTreeMap0.entrySet();
      assertNotNull(set0);
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      boolean boolean0 = linkedHashTreeMap_KeySet0.remove(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.clear();
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      linkedHashTreeMap0.put("I3AQN5wLH", "I3AQN5wLH");
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap0.new KeySet();
      boolean boolean0 = linkedHashTreeMap_KeySet1.remove("I3AQN5wLH");
      assertEquals(1, linkedHashTreeMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      linkedHashTreeMap0.find("", true);
      linkedHashTreeMap0.isEmpty();
      linkedHashTreeMap0.put("", "");
      assertEquals(2, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node0, "y+aIxzLk~mr'l", (-8), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node1, true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>();
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, String>();
      LinkedHashTreeMap.AvlBuilder<Integer, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Integer, String>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      // Undeclared exception!
      linkedHashTreeMap_Node0.last();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap.AvlIterator<Object, Integer> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, Integer>();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Integer>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      boolean boolean0 = linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap_Node0);
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
      
      boolean boolean1 = linkedHashTreeMap_Node0.equals(linkedHashTreeMap_AvlIterator0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, Object>(linkedHashTreeMap_Node0, "\"`=L?:D-", 478, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      linkedHashTreeMap0.put("\"`=L?:D-", "\"`=L?:D-");
      linkedHashTreeMap0.findByEntry(linkedHashTreeMap_Node1);
      assertEquals(1, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.put((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      linkedHashTreeMap0.put("N-)B~`|yw", "N-)B~`|yw");
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.clear();
      boolean boolean0 = linkedHashTreeMap_EntrySet0.contains("N-)B~`|yw");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      linkedHashTreeMap0.find("", true);
      linkedHashTreeMap0.isEmpty();
      linkedHashTreeMap0.toString();
      assertEquals(1, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Object>(linkedHashTreeMap_Node0, linkedHashTreeMap_Node1, (-1337), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.next;
      linkedHashTreeMap_Node0.left = linkedHashTreeMap_Node3;
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node0.left;
      // Undeclared exception!
      linkedHashTreeMap_Node4.first();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet0);
      assertEquals(0, linkedHashTreeMap0.size());
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
      
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>((Comparator<? super Object>) null);
      assertNotNull(linkedHashTreeMap1);
      assertEquals(0, linkedHashTreeMap1.size());
      
      // Undeclared exception!
      try { 
        linkedHashTreeMap1.put(linkedHashTreeMap_KeySet0, "key == null");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.LinkedHashTreeMap$KeySet is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Object>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      assertNotNull(linkedHashTreeMap_Node1);
      
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      assertSame(linkedHashTreeMap_Node1, linkedHashTreeMap_Node2);
      assertSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node1);
      assertNotNull(linkedHashTreeMap_Node2);
      
      Integer integer0 = new Integer((-527));
      assertNotNull(integer0);
      assertEquals((-527), (int)integer0);
      
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Integer, Object>(linkedHashTreeMap_Node2, integer0, (-527), linkedHashTreeMap_Node1, linkedHashTreeMap_Node2);
      assertNotNull(linkedHashTreeMap_Node3);
      
      boolean boolean0 = linkedHashTreeMap_Node3.equals(linkedHashTreeMap_Node2);
      assertSame(linkedHashTreeMap_Node1, linkedHashTreeMap_Node2);
      assertSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      Set<String> set0 = linkedHashTreeMap0.keySet();
      assertNotNull(set0);
      assertEquals(0, linkedHashTreeMap0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Comparator<Map.Entry<String, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Integer>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Integer>();
      assertNotNull(linkedHashTreeMap_Node1);
      
      Integer integer0 = new Integer((-56));
      assertNotNull(integer0);
      assertEquals((-56), (int)integer0);
      
      Integer integer1 = linkedHashTreeMap_Node1.setValue(integer0);
      assertNull(integer1);
      
      LinkedHashTreeMap.AvlIterator<Object, Integer> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, Integer>();
      assertNotNull(linkedHashTreeMap_AvlIterator0);
      
      boolean boolean0 = linkedHashTreeMap_Node1.equals(linkedHashTreeMap_Node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap1 = new LinkedHashTreeMap<String, String>(comparator0);
      assertNotNull(linkedHashTreeMap1);
      assertEquals(0, linkedHashTreeMap1.size());
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = linkedHashTreeMap1.header;
      assertNotNull(linkedHashTreeMap_Node1);
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node1, "", 24, linkedHashTreeMap_Node1, linkedHashTreeMap_Node1);
      assertNotNull(linkedHashTreeMap_Node2);
      assertEquals(0, linkedHashTreeMap1.size());
      
      linkedHashTreeMap1.size = 24;
      assertEquals(24, linkedHashTreeMap1.size());
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node2, "key == null", 24, linkedHashTreeMap_Node1, linkedHashTreeMap_Node1);
      assertFalse(linkedHashTreeMap_Node3.equals((Object)linkedHashTreeMap_Node2));
      assertNotNull(linkedHashTreeMap_Node3);
      assertEquals(24, linkedHashTreeMap1.size());
      
      String string0 = linkedHashTreeMap1.put("", "key == null");
      assertNull(string0);
      assertEquals(25, linkedHashTreeMap1.size());
      
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      assertNotNull(linkedHashTreeMap_EntrySet0);
      assertEquals(0, linkedHashTreeMap0.size());
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
      
      boolean boolean0 = linkedHashTreeMap_EntrySet0.contains((Object) null);
      assertFalse(boolean0);
      assertEquals(0, linkedHashTreeMap0.size());
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Object>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, Object>();
      assertNotNull(linkedHashTreeMap_Node1);
      
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, Object>(linkedHashTreeMap_Node1, "", 9, linkedHashTreeMap_Node1, linkedHashTreeMap_Node1);
      assertNotNull(linkedHashTreeMap_Node2);
      
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.first();
      assertNotNull(linkedHashTreeMap_Node3);
      
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.last();
      assertSame(linkedHashTreeMap_Node3, linkedHashTreeMap_Node4);
      assertSame(linkedHashTreeMap_Node4, linkedHashTreeMap_Node3);
      assertNotNull(linkedHashTreeMap_Node4);
      
      boolean boolean0 = linkedHashTreeMap_Node0.equals(linkedHashTreeMap_Node4);
      assertSame(linkedHashTreeMap_Node3, linkedHashTreeMap_Node4);
      assertSame(linkedHashTreeMap_Node4, linkedHashTreeMap_Node3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      assertNotNull(linkedHashTreeMap_Node1);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      Comparator<Map.Entry<Integer, String>> comparator1 = Map.Entry.comparingByValue();
      assertNotNull(comparator1);
      
      linkedHashTreeMap_Node1.left = linkedHashTreeMap_Node0;
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node1, true);
      assertEquals((-1), linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>((String) null, linkedHashTreeMap_Node0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      boolean boolean0 = linkedHashTreeMap_Node0.equals(abstractMap_SimpleEntry0);
      assertFalse(boolean0);
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      assertNotNull(linkedHashTreeMap_Node1);
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      assertSame(linkedHashTreeMap_Node1, linkedHashTreeMap_Node2);
      assertSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node1);
      assertNotNull(linkedHashTreeMap_Node2);
      
      LinkedHashTreeMap.AvlIterator<String, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, String>();
      assertNotNull(linkedHashTreeMap_AvlIterator0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>(comparator0);
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>((String) null, linkedHashTreeMap_Node1);
      assertNotNull(abstractMap_SimpleEntry1);
      
      boolean boolean1 = linkedHashTreeMap0.containsKey(abstractMap_SimpleEntry1);
      assertTrue(boolean1 == boolean0);
      assertSame(linkedHashTreeMap_Node1, linkedHashTreeMap_Node2);
      assertFalse(boolean1);
      assertEquals(0, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Object>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, Object>(linkedHashTreeMap_Node0, "", 977, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      assertNotNull(linkedHashTreeMap_Node1);
      
      linkedHashTreeMap_Node0.parent = linkedHashTreeMap_Node1;
      boolean boolean0 = linkedHashTreeMap_Node1.equals(linkedHashTreeMap_Node0.parent);
      assertTrue(boolean0);
      
      linkedHashTreeMap_Node0.prev = linkedHashTreeMap_Node0.parent;
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, Object>(linkedHashTreeMap_Node0, "", 977, linkedHashTreeMap_Node0.parent, linkedHashTreeMap_Node0.parent);
      assertFalse(linkedHashTreeMap_Node2.equals((Object)linkedHashTreeMap_Node0));
      assertNotNull(linkedHashTreeMap_Node2);
      
      linkedHashTreeMap_Node1.prev = linkedHashTreeMap_Node2;
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, Object>();
      assertNotNull(linkedHashTreeMap_Node3);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      String string0 = linkedHashTreeMap0.put("", "");
      assertNull(string0);
      assertEquals(1, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_KeySet0.size());
      
      int int0 = linkedHashTreeMap_KeySet0.size();
      assertEquals(1, int0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      Object object0 = linkedHashTreeMap0.put("", "");
      assertNull(object0);
      assertEquals(1, linkedHashTreeMap0.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Object>(comparator0);
      assertFalse(linkedHashTreeMap1.equals((Object)linkedHashTreeMap0));
      assertNotNull(linkedHashTreeMap1);
      assertEquals(0, linkedHashTreeMap1.size());
      
      BiFunction<String, Object, Object> biFunction0 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      Object object1 = linkedHashTreeMap0.compute("", biFunction0);
      assertFalse(linkedHashTreeMap0.equals((Object)linkedHashTreeMap1));
      assertNotSame(linkedHashTreeMap0, linkedHashTreeMap1);
      assertNull(object1);
      assertEquals(1, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      assertFalse(linkedHashTreeMap1.equals((Object)linkedHashTreeMap0));
      assertNotNull(linkedHashTreeMap_EntrySet0);
      assertEquals(0, linkedHashTreeMap1.size());
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
      
      boolean boolean0 = linkedHashTreeMap1.replace("E3th:_?PL6}+W[{7BW", (Object) linkedHashTreeMap0, (Object) linkedHashTreeMap_EntrySet0);
      assertFalse(linkedHashTreeMap0.equals((Object)linkedHashTreeMap1));
      assertFalse(linkedHashTreeMap1.equals((Object)linkedHashTreeMap0));
      assertNotSame(linkedHashTreeMap0, linkedHashTreeMap1);
      assertNotSame(linkedHashTreeMap1, linkedHashTreeMap0);
      assertFalse(boolean0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(0, linkedHashTreeMap1.size());
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
      
      boolean boolean1 = linkedHashTreeMap_EntrySet0.remove("");
      assertFalse(linkedHashTreeMap1.equals((Object)linkedHashTreeMap0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(linkedHashTreeMap1, linkedHashTreeMap0);
      assertFalse(boolean1);
      assertEquals(0, linkedHashTreeMap1.size());
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
      
      int int0 = linkedHashTreeMap1.size();
      assertFalse(linkedHashTreeMap1.equals((Object)linkedHashTreeMap0));
      assertNotSame(linkedHashTreeMap1, linkedHashTreeMap0);
      assertEquals(0, int0);
      assertEquals(0, linkedHashTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      Set<String> set0 = linkedHashTreeMap0.keySet();
      assertNotNull(set0);
      assertEquals(0, linkedHashTreeMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Comparator<Map.Entry<String, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Integer>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Integer>();
      assertNotNull(linkedHashTreeMap_Node1);
      
      Integer integer0 = new Integer((-75));
      assertNotNull(integer0);
      assertEquals((-75), (int)integer0);
      
      Set<String> set1 = linkedHashTreeMap0.keySet();
      assertSame(set1, set0);
      assertNotNull(set1);
      assertEquals(0, linkedHashTreeMap0.size());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      Set<String> set0 = linkedHashTreeMap0.keySet();
      assertNotNull(set0);
      assertEquals(0, linkedHashTreeMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Comparator<Map.Entry<String, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Integer>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Integer>();
      assertNotNull(linkedHashTreeMap_Node1);
      
      Integer integer0 = new Integer((-75));
      assertNotNull(integer0);
      assertEquals((-75), (int)integer0);
      
      linkedHashTreeMap_Node0.value = integer0;
      Integer integer1 = linkedHashTreeMap_Node1.setValue(integer0);
      assertNull(integer1);
      
      LinkedHashTreeMap.AvlIterator<Object, Integer> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, Integer>();
      assertNotNull(linkedHashTreeMap_AvlIterator0);
      
      boolean boolean0 = linkedHashTreeMap_Node1.equals(linkedHashTreeMap_Node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      Object object0 = linkedHashTreeMap0.put("N-)B~`|yw", "N-)B~`|yw");
      assertNull(object0);
      assertEquals(1, linkedHashTreeMap0.size());
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = linkedHashTreeMap0.getOrDefault("N-)B~`|yw", object1);
      assertSame(object1, object2);
      assertSame(object2, object1);
      assertNotNull(object2);
      assertEquals(1, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_KeySet0.size());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedHashTreeMap_KeySet0.retainAll(linkedList0);
      assertTrue(boolean0);
      assertEquals(0, linkedHashTreeMap0.size());
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      Object object0 = linkedHashTreeMap0.put("", "");
      assertNull(object0);
      assertEquals(1, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_KeySet0.size());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap0.new KeySet();
      assertTrue(linkedHashTreeMap_KeySet1.equals((Object)linkedHashTreeMap_KeySet0));
      assertNotNull(linkedHashTreeMap_KeySet1);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_KeySet1.size());
      
      boolean boolean0 = linkedHashTreeMap_KeySet1.retainAll(linkedHashTreeMap_KeySet0);
      assertTrue(linkedHashTreeMap_KeySet0.equals((Object)linkedHashTreeMap_KeySet1));
      assertTrue(linkedHashTreeMap_KeySet1.equals((Object)linkedHashTreeMap_KeySet0));
      assertNotSame(linkedHashTreeMap_KeySet0, linkedHashTreeMap_KeySet1);
      assertNotSame(linkedHashTreeMap_KeySet1, linkedHashTreeMap_KeySet0);
      assertFalse(boolean0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_KeySet0.size());
      assertEquals(1, linkedHashTreeMap_KeySet1.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>((Comparator<? super String>) null);
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node0, (String) null, (-1), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      assertNotNull(linkedHashTreeMap_Node1);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, String>();
      assertTrue(linkedHashTreeMap_Node2.equals((Object)linkedHashTreeMap_Node1));
      assertNotNull(linkedHashTreeMap_Node2);
      
      String string0 = linkedHashTreeMap0.toString();
      assertNotNull(string0);
      assertEquals("{null=null}", string0);
      assertEquals(0, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      assertNotNull(linkedHashTreeMap_Node1);
      
      linkedHashTreeMap_Node1.right = linkedHashTreeMap_Node0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      Comparator<Map.Entry<Integer, String>> comparator1 = Map.Entry.comparingByValue();
      assertNotNull(comparator1);
      
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node1, true);
      assertEquals((-1), linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(7).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 2);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node0, "", 7, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      assertNotNull(linkedHashTreeMap_Node1);
      assertEquals(0, linkedHashTreeMap0.size());
      
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node1, "", 7, linkedHashTreeMap_Node1, linkedHashTreeMap_Node1);
      assertTrue(linkedHashTreeMap_Node2.equals((Object)linkedHashTreeMap_Node1));
      assertNotNull(linkedHashTreeMap_Node2);
      assertEquals(0, linkedHashTreeMap0.size());
      
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node2;
      linkedHashTreeMap0.table = linkedHashTreeMap_NodeArray0;
      assertEquals(0, linkedHashTreeMap0.size());
      
      String string0 = linkedHashTreeMap0.put("", "");
      assertNull(string0);
      assertEquals(1, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, String>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.AvlBuilder<Integer, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Integer, String>();
      assertNotNull(linkedHashTreeMap_AvlBuilder0);
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      assertNotNull(linkedHashTreeMap_Node1);
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.AvlBuilder<Integer, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Integer, String>();
      assertNotNull(linkedHashTreeMap_AvlBuilder0);
      
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, String>();
      assertNotNull(linkedHashTreeMap_Node1);
      
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Integer, String>();
      assertNotNull(linkedHashTreeMap_Node2);
      
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.last();
      assertNotNull(linkedHashTreeMap_Node3);
      
      linkedHashTreeMap_Node1.prev = linkedHashTreeMap_Node3;
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<Integer, String>(linkedHashTreeMap_Node1, integer0, (-2), linkedHashTreeMap_Node1, linkedHashTreeMap_Node1);
      assertNotNull(linkedHashTreeMap_Node4);
      
      linkedHashTreeMap_AvlBuilder0.reset((-2));
      linkedHashTreeMap_Node4.parent = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node5 = linkedHashTreeMap_Node4.last();
      assertFalse(linkedHashTreeMap_Node5.equals((Object)linkedHashTreeMap_Node3));
      assertNotSame(linkedHashTreeMap_Node5, linkedHashTreeMap_Node3);
      assertNotNull(linkedHashTreeMap_Node5);
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node5);
      assertFalse(linkedHashTreeMap_Node5.equals((Object)linkedHashTreeMap_Node3));
      assertNotSame(linkedHashTreeMap_Node5, linkedHashTreeMap_Node3);
      
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node6 = linkedHashTreeMap_Node5.last();
      assertFalse(linkedHashTreeMap_Node5.equals((Object)linkedHashTreeMap_Node3));
      assertFalse(linkedHashTreeMap_Node6.equals((Object)linkedHashTreeMap_Node3));
      assertSame(linkedHashTreeMap_Node5, linkedHashTreeMap_Node6);
      assertNotSame(linkedHashTreeMap_Node5, linkedHashTreeMap_Node3);
      assertNotSame(linkedHashTreeMap_Node6, linkedHashTreeMap_Node3);
      assertSame(linkedHashTreeMap_Node6, linkedHashTreeMap_Node5);
      assertNotNull(linkedHashTreeMap_Node6);
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node4);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      assertNotNull(linkedHashTreeMap_Node1);
      
      linkedHashTreeMap_Node1.right = linkedHashTreeMap_Node0;
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      Comparator<Map.Entry<Integer, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      linkedHashTreeMap_Node1.left = linkedHashTreeMap_Node0;
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node1, false);
      assertEquals((-1), linkedHashTreeMap0.size());
      
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>();
      assertNotNull(linkedHashTreeMap1);
      assertEquals(0, linkedHashTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      assertNotNull(linkedHashTreeMap_Node1);
      
      linkedHashTreeMap_Node1.right = linkedHashTreeMap_Node0;
      String string0 = linkedHashTreeMap_Node1.setValue("");
      assertNull(string0);
      
      linkedHashTreeMap_Node0.parent = linkedHashTreeMap_Node1;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      Comparator<Map.Entry<Integer, String>> comparator1 = Map.Entry.comparingByValue();
      assertNotNull(comparator1);
      
      linkedHashTreeMap_Node1.left = linkedHashTreeMap_Node0;
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node1, true);
      assertEquals((-1), linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.AvlBuilder<Integer, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Integer, String>();
      assertNotNull(linkedHashTreeMap_AvlBuilder0);
      
      linkedHashTreeMap_AvlBuilder0.reset(12);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, String>();
      assertNotNull(linkedHashTreeMap_Node1);
      
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      assertNotNull(linkedHashTreeMap_Node2);
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.last();
      assertSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node3);
      assertSame(linkedHashTreeMap_Node3, linkedHashTreeMap_Node2);
      assertNotNull(linkedHashTreeMap_Node3);
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node3);
      assertSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node3);
      assertSame(linkedHashTreeMap_Node3, linkedHashTreeMap_Node2);
      
      LinkedHashTreeMap<String, String> linkedHashTreeMap1 = new LinkedHashTreeMap<String, String>();
      assertNotNull(linkedHashTreeMap1);
      assertEquals(0, linkedHashTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-938)).when(comparator0).compare(anyString() , anyString());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      linkedHashTreeMap0.modCount = (-938);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = linkedHashTreeMap0.find("", true);
      assertNotNull(linkedHashTreeMap_Node1);
      assertEquals(1, linkedHashTreeMap0.size());
      
      String string0 = linkedHashTreeMap0.put("", "]<Kf'_H");
      assertNull(string0);
      assertEquals(2, linkedHashTreeMap0.size());
      
      boolean boolean0 = linkedHashTreeMap0.isEmpty();
      assertFalse(boolean0);
      assertEquals(2, linkedHashTreeMap0.size());
      
      String string1 = linkedHashTreeMap0.put("", "I=Y*{p'");
      assertNull(string1);
      assertEquals(3, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = linkedHashTreeMap0.findByEntry(linkedHashTreeMap_Node1);
      assertNull(linkedHashTreeMap_Node2);
      assertEquals(3, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      linkedHashTreeMap0.modCount = (-938);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = linkedHashTreeMap0.find("", true);
      assertNotNull(linkedHashTreeMap_Node1);
      assertEquals(1, linkedHashTreeMap0.size());
      
      String string0 = linkedHashTreeMap0.put("", "]<Kf'_H");
      assertNull(string0);
      assertEquals(2, linkedHashTreeMap0.size());
      
      boolean boolean0 = linkedHashTreeMap0.isEmpty();
      assertFalse(boolean0);
      assertEquals(2, linkedHashTreeMap0.size());
      
      String string1 = linkedHashTreeMap0.put("", "I=Y*{p'");
      assertNull(string1);
      assertEquals(3, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 5);
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      assertSame(linkedHashTreeMap_Node1, linkedHashTreeMap_Node2);
      assertSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node1);
      assertNotNull(linkedHashTreeMap_Node2);
      assertEquals(3, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray1 = LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, String>[]) linkedHashTreeMap_NodeArray0);
      assertNotNull(linkedHashTreeMap_NodeArray1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<String, String> linkedHashTreeMap1 = new LinkedHashTreeMap<String, String>(comparator0);
      assertNotNull(linkedHashTreeMap1);
      assertEquals(0, linkedHashTreeMap1.size());
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = linkedHashTreeMap1.find("", true);
      assertNotNull(linkedHashTreeMap_Node0);
      assertEquals(1, linkedHashTreeMap1.size());
      
      String string0 = linkedHashTreeMap1.put("", "ty");
      assertNull(string0);
      assertEquals(2, linkedHashTreeMap1.size());
      
      boolean boolean0 = linkedHashTreeMap1.isEmpty();
      assertFalse(boolean0);
      assertEquals(2, linkedHashTreeMap1.size());
      
      String string1 = linkedHashTreeMap1.put("ty", "]<Kf'_H");
      assertNull(string1);
      assertEquals(3, linkedHashTreeMap1.size());
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = linkedHashTreeMap1.findByEntry(linkedHashTreeMap_Node0);
      assertSame(linkedHashTreeMap_Node0, linkedHashTreeMap_Node1);
      assertSame(linkedHashTreeMap_Node1, linkedHashTreeMap_Node0);
      assertNotNull(linkedHashTreeMap_Node1);
      assertEquals(3, linkedHashTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      linkedHashTreeMap0.modCount = (-938);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = linkedHashTreeMap0.find("", true);
      assertNotNull(linkedHashTreeMap_Node1);
      assertEquals(1, linkedHashTreeMap0.size());
      
      String string0 = linkedHashTreeMap0.put("", "]<Kf'_H");
      assertNull(string0);
      assertEquals(2, linkedHashTreeMap0.size());
      
      boolean boolean0 = linkedHashTreeMap0.isEmpty();
      assertFalse(boolean0);
      assertEquals(2, linkedHashTreeMap0.size());
      
      String string1 = linkedHashTreeMap0.put("", "I=Y*{p'");
      assertNull(string1);
      assertEquals(3, linkedHashTreeMap0.size());
      
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node1, true);
      assertEquals(2, linkedHashTreeMap0.size());
  }
}
