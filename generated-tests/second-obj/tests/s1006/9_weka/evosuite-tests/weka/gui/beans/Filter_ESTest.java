/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:08:17 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Canvas;
import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Frame;
import java.awt.GraphicsConfiguration;
import java.awt.HeadlessException;
import java.awt.event.HierarchyListener;
import java.awt.event.KeyListener;
import java.awt.image.ByteLookupTable;
import java.beans.EventSetDescriptor;
import java.io.IOException;
import java.util.List;
import java.util.Locale;
import javax.swing.ActionMap;
import javax.swing.DebugGraphics;
import javax.swing.ScrollPaneConstants;
import javax.swing.plaf.metal.MetalToolBarUI;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.Document;
import javax.swing.text.StyledEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.associations.FilteredAssociator;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.misc.SerializedClassifier;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.EuclideanDistance;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instances;
import weka.core.ListOptions;
import weka.core.ManhattanDistance;
import weka.core.converters.CSVLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.filters.supervised.attribute.ClassOrder;
import weka.filters.supervised.attribute.Discretize;
import weka.filters.supervised.instance.Resample;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Classifier;
import weka.gui.beans.Clusterer;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceStreamToBatchMaker;
import weka.gui.beans.ModelPerformanceChart;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.SerializedModelSaver;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetMaker;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.WekaOffscreenChartRenderer;
import weka.gui.explorer.ClassifierErrorsPlotInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.getAlignmentY();
      filter0.addTestSetListener(classAssigner0);
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      filter0.setCustomName("{Y");
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertEquals("{Y", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      filter0.addConfigurationListener((ConfigurationListener) null);
      Sorter sorter0 = new Sorter();
      filter0.removeInstanceListener(sorter0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      filter0.connectionNotification("c", modelPerformanceChart0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.addInstanceListener(classAssigner0);
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      Instances instances0 = attributeSummarizer0.m_visualizeDataSet;
      DataSetEvent dataSetEvent0 = new DataSetEvent(classAssigner0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      flowByExpression0.getConnectedFormat();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, (Instances) null, 200, 200, 200, (-674));
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      substringLabeler0.update(debugGraphics0);
      BeanVisual beanVisual0 = substringLabeler0.m_visual;
      filter0.setVisual(beanVisual0);
      assertEquals("SubstringLabeler", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getComponentListeners();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.useDefaultVisual();
      TextViewer textViewer0 = new TextViewer();
      textViewer0.transferFocusUpCycle();
      filter0.removeDataSourceListener(textViewer0);
      boolean boolean0 = filter0.eventGeneratable("'SH7K&V}L`L<SI");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.removeInstanceListener(flowByExpression0);
      filter0.globalInfo();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(flowByExpression0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.FlowByExpression : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getComponentListeners();
      filter0.useDefaultVisual();
      Saver saver0 = new Saver();
      filter0.removeTrainingSetListener(saver0);
      filter0.addInstanceListener(saver0);
      filter0.getWrappedAlgorithm();
      filter0.setSize(46, 46);
      TestSetMaker testSetMaker0 = new TestSetMaker();
      filter0.addDataSourceListener(testSetMaker0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      // Undeclared exception!
      try { 
        filter0.notifyInstanceListeners(instanceEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Saver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      filter0.addInstanceListener(substringLabeler0);
      filter0.useDefaultVisual();
      filter0.getVisual();
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getMouseMotionListeners();
      // Undeclared exception!
      try { 
        filter0.performRequest("PptnK>ah5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PptnK>ah5 not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.isPaintingTile();
      Add add0 = new Add();
      filter0.setFilter(add0);
      TextViewer textViewer0 = new TextViewer();
      filter0.connectionNotification("Ja:MiF3", textViewer0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Filter filter0 = new Filter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      filter0.removeTestSetListener(flowByExpression0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.disconnectionNotification(" last classirIer unblocking...", " last classirIer unblocking...");
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      filter0.useDefaultVisual();
      Saver saver0 = new Saver();
      saver0.firePropertyChange("<!-- globalinfo-end -->", false, false);
      filter0.setDoubleBuffered(false);
      filter0.removeTrainingSetListener(filter0);
      filter0.addInstanceListener(filter0);
      TestSetMaker testSetMaker0 = new TestSetMaker();
      filter0.addDataSourceListener(testSetMaker0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.removeInstanceListener(saver0);
      globalInfoJavadoc0.setOptions((String[]) null);
      filter0.notifyInstanceListeners(instanceEvent0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(0, byteArray0);
      WekaOffscreenChartRenderer wekaOffscreenChartRenderer0 = new WekaOffscreenChartRenderer();
      try { 
        wekaOffscreenChartRenderer0.renderXYScatterPlot(1573, (byte) (-6), (List<Instances>) null, "<!-- globalinfo-start -->", "<!-- globalinfo-start -->", (List<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (1573) and height (-6) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      MultiFilter multiFilter0 = new MultiFilter();
      TextViewer textViewer0 = new TextViewer();
      Filter filter0 = new Filter();
      filter0.removeDataSourceListener(substringLabeler0);
      filter0.eventGeneratable("oP");
      MultiFilter multiFilter1 = new MultiFilter();
      filter0.setFilter(multiFilter1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      // Undeclared exception!
      try { 
        filter0.acceptInstance((InstanceEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      filter0.getVisibleRect();
      logPanel0.getLocale();
      logPanel0.getActionMap();
      filter0.connectionAllowed("q@gQ8W%>");
      filter0.setLog(logPanel0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      filter0.acceptInstance((InstanceEvent) null);
      filter0.eventGeneratable("q@gQ8W%>");
      filter0.disconnectionNotification("q@gQ8W%>", predictionAppender0);
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.paintImmediately(274, 274, 274, 3430);
      AttributeSelection attributeSelection0 = new AttributeSelection();
      Locale locale0 = Locale.ROOT;
      ComponentOrientation componentOrientation0 = ComponentOrientation.getOrientation(locale0);
      ComponentOrientation.getOrientation(locale0);
      filter0.setComponentOrientation(componentOrientation0);
      filter0.enumerateRequests();
      filter0.firePropertyChange("%30{q:#L", (short) (-5313), (short) (-5313));
      filter0.setFilter(attributeSelection0);
      filter0.setWrappedAlgorithm(attributeSelection0);
      filter0.connectionAllowed("%30{q:#L");
      filter0.addConfigurationListener((ConfigurationListener) null);
      filter0.getFilter();
      assertEquals("AttributeSelection", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.addConfigurationListener((ConfigurationListener) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      boolean boolean0 = substringLabeler0.m_busy;
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      weka.filters.Filter filter1 = filteredAssociator0.getFilter();
      filter0.setFilter(filter1);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      boolean boolean1 = substringLabeler0.m_hasLabels;
      Sorter sorter0 = new Sorter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      filter0.getGraphicsConfiguration();
      filter0.eventGeneratable("gb`W5[gV2).S]HKMC");
      // Undeclared exception!
      try { 
        filter0.performRequest("gb`W5[gV2).S]HKMC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // gb`W5[gV2).S]HKMC not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Filter filter0 = new Filter();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      filter0.getInputMethodListeners();
      predictionAppender0.isPaintingForPrint();
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      LogitBoost logitBoost0 = new LogitBoost();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      LogitBoost logitBoost1 = new LogitBoost();
      wrapperSubsetEval0.getCapabilities();
      Logger logger0 = predictionAppender0.m_logger;
      MultiFilter multiFilter0 = new MultiFilter();
      WrapperSubsetEval wrapperSubsetEval1 = new WrapperSubsetEval();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setCharSet("weka/core/Capabilities.props");
      Resample resample0 = new Resample();
      ListOptions listOptions0 = new ListOptions();
      filter0.getUIClassID();
      filter0.getVisual();
      filter0.eventGeneratable("weka/gui/beans/icons/");
      BeanVisual beanVisual0 = filter0.m_visual;
      filter0.getGraphicsConfiguration();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(logitBoost1, instances0, 5, 1, (-2015071421), 2);
      filter0.acceptTrainingSet(trainingSetEvent0);
      Frame frame0 = null;
      try {
        frame0 = new Frame((GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      filter0.removeHierarchyListener((HierarchyListener) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MultiFilter multiFilter0 = new MultiFilter();
      Resample resample0 = new Resample();
      String string0 = ScrollPaneConstants.ROW_HEADER;
      ListOptions listOptions0 = new ListOptions();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      DataSetEvent dataSetEvent0 = new DataSetEvent(substringReplacer0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      filter0.getLayout();
      Clusterer clusterer0 = new Clusterer();
      assertTrue(clusterer0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Filter filter0 = new Filter();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      filter0.getInputMethodListeners();
      predictionAppender0.isPaintingForPrint();
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LogitBoost logitBoost0 = new LogitBoost();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getCapabilities();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      boolean boolean0 = filter0.eventGeneratable("configuration");
      assertTrue(boolean0);
      
      Logger logger0 = predictionAppender0.m_logger;
      filter0.setLog((Logger) null);
      PredictionAppender predictionAppender1 = new PredictionAppender();
      Discretize discretize0 = new Discretize();
      discretize0.toString();
      InstanceEvent instanceEvent1 = predictionAppender0.m_instanceEvent;
      DataSetEvent dataSetEvent0 = new DataSetEvent(predictionAppender1, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.useDefaultVisual();
      filter0.notifyInstanceListeners((InstanceEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassAssigner classAssigner0 = new ClassAssigner();
      Class<PredictionAppender> class0 = PredictionAppender.class;
      filter0.getListeners(class0);
      filter0.removeDataSourceListener(classAssigner0);
      filter0.isBusy();
      filter0.removeConfigurationListener((ConfigurationListener) null);
      AttributeSelection attributeSelection0 = new AttributeSelection();
      filter0.setFilter(attributeSelection0);
      filter0.connectionAllowed("xi{+|J':)8*{&LAp7q");
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestSetEvent testSetEvent0 = new TestSetEvent(crossValidationFoldMaker0, instances0);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AttributeSelection", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      Saver saver0 = new Saver();
      filter0.connectionNotification("|V,;KIPLzywuNps8m*L", "|V,;KIPLzywuNps8m*L");
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      
      filter0.enumerateRequests();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      filter0.repaint(9223372036854775807L);
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      filteredAssociator0.getFilter();
      MultiFilter multiFilter0 = new MultiFilter();
      weka.filters.Filter filter1 = multiFilter0.getFilter(0);
      filter0.setFilter(filter1);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Saver saver0 = new Saver();
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      filter0.connectionNotification("NaN", saver0);
      BeanVisual beanVisual0 = filter0.getVisual();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      filter0.enumerateRequests();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.isBusy();
      Sorter sorter0 = new Sorter();
      beanVisual0.setDoubleBuffered(false);
      ActionMap actionMap0 = new ActionMap();
      DefaultEditorKit.InsertBreakAction defaultEditorKit_InsertBreakAction0 = new DefaultEditorKit.InsertBreakAction();
      FlowByExpression.ExpressionClause.ExpressionType flowByExpression_ExpressionClause_ExpressionType0 = FlowByExpression.ExpressionClause.ExpressionType.ISMISSING;
      // Undeclared exception!
      try { 
        FlowByExpression.ExpressionClause.ExpressionType.valueOf("weka/gui/beans/icons/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant weka.gui.beans.FlowByExpression.ExpressionClause.ExpressionType.weka/gui/beans/icons/
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      Saver saver0 = new Saver();
      filter0.connectionNotification("|V,;KIPLzywuNps8m*L", "|V,;KIPLzywuNps8m*L");
      filter0.getVisual();
      filter0.enumerateRequests();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.isBusy();
      Sorter sorter0 = new Sorter();
      Resample resample0 = new Resample();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      filteredAssociator0.getFilter();
      FlowByExpression flowByExpression1 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      InstanceEvent instanceEvent1 = new InstanceEvent(saver0);
      filter0.acceptInstance(instanceEvent1);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      filter0.getGraphicsConfiguration();
      filter0.eventGeneratable("|V,;KIPLzywuNps8m*L");
      // Undeclared exception!
      try { 
        filter0.performRequest("q@gQ8W%>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // q@gQ8W%> not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      filter0.addConfigurationListener((ConfigurationListener) null);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      boolean boolean0 = substringLabeler0.m_busy;
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      weka.filters.Filter filter1 = filteredAssociator0.getFilter();
      filter0.setFilter(filter1);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      boolean boolean1 = substringLabeler0.m_hasLabels;
      Sorter sorter0 = new Sorter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.globalInfo();
      ListOptions listOptions0 = new ListOptions();
      SubstringLabeler substringLabeler1 = new SubstringLabeler();
      DataSetEvent dataSetEvent0 = new DataSetEvent(substringLabeler1, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.getUIClassID();
      filter0.getVisual();
      // Undeclared exception!
      try { 
        filter0.eventGeneratable((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      logPanel0.isValidateRoot();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.addDataSourceListener(crossValidationFoldMaker0);
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      wrapperSubsetEval0.getOptions();
      filter0.eventGeneratable("model");
      filter0.setLog(logPanel0);
      wrapperSubsetEval0.getOptions();
      filter0.setLog(logPanel0);
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MultiFilter multiFilter0 = new MultiFilter();
      textDirectoryLoader0.setCharSet("Finished.");
      Resample resample0 = new Resample();
      String string0 = ScrollPaneConstants.ROW_HEADER;
      filter0.add((Component) instanceStreamToBatchMaker0);
      ListOptions listOptions0 = new ListOptions();
      DataSetEvent dataSetEvent0 = new DataSetEvent(textDirectoryLoader0, instances0);
      filter0.setCustomName("Finished.");
      CrossValidationFoldMaker crossValidationFoldMaker1 = new CrossValidationFoldMaker();
      filter0.removeDataSourceListener(crossValidationFoldMaker0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      filter0.performRequest("Stop");
      Classifier classifier0 = new Classifier();
      TestSetEvent testSetEvent0 = new TestSetEvent(serializedModelSaver0, instances0, 397, 6);
      // Undeclared exception!
      try { 
        filter0.acceptTestSet((TestSetEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      filter0.getVisibleRect();
      filter0.getInputMethodListeners();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      predictionAppender0.isPaintingForPrint();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.addDataSourceListener(crossValidationFoldMaker0);
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "configuration");
      wrapperSubsetEval0.getOptions();
      filter0.eventGeneratable("configuration");
      filter0.setLog(logPanel0);
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MultiFilter multiFilter0 = new MultiFilter();
      Resample resample0 = new Resample();
      String string0 = ScrollPaneConstants.ROW_HEADER;
      ListOptions listOptions0 = new ListOptions();
      DataSetEvent dataSetEvent0 = new DataSetEvent(".arff", instances0);
      filter0.acceptDataSet(dataSetEvent0);
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      filter0.getLayout();
      Canvas canvas0 = new Canvas();
      filter0.connectionNotification("ROW_HEADER", canvas0);
      filter0.addTrainingSetListener(crossValidationFoldMaker0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      filter0.eventGeneratable(".arff");
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(logPanel0, instances0);
      filter0.acceptTrainingSet(trainingSetEvent0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      filter0.getVisibleRect();
      filter0.getInputMethodListeners();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getCapabilities();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      filter0.setLog(logPanel0);
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker1 = new InstanceStreamToBatchMaker();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ClassOrder classOrder0 = new ClassOrder();
      filter0.setFilter(classOrder0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances();
      classifierErrorsPlotInstances0.getInstances();
      instanceEvent0.setStructure((Instances) null);
      DenseInstance denseInstance0 = new DenseInstance(3);
      filter0.acceptInstance(instanceEvent0);
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      metalToolBarUI0.getFloatingColor();
      StyledEditorKit.ForegroundAction styledEditorKit_ForegroundAction0 = new StyledEditorKit.ForegroundAction("weka/core/Capabilities.props", (Color) null);
      filter0.eventGeneratable(".arff");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      Saver saver0 = new Saver();
      filter0.connectionNotification("|V,;KIPLzywuNps8m*L", "|V,;KIPLzywuNps8m*L");
      filter0.getVisual();
      filter0.enumerateRequests();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.isBusy();
      Sorter sorter0 = new Sorter();
      filter0.getInputContext();
      Resample resample0 = new Resample();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      weka.filters.Filter filter1 = filteredAssociator0.getFilter();
      filter0.setFilter(filter1);
      TestSetMaker testSetMaker0 = new TestSetMaker();
      filter0.addDataSourceListener(sorter0);
      Sorter sorter1 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.removeInstanceListener(sorter1);
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.connectionNotification("|V,;KIPLzywuNps8m*L", (Object) null);
      filter0.getWrappedAlgorithm();
      filter0.acceptInstance(instanceEvent0);
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      crossValidationFoldMaker0.getVisual();
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.getStructure("weka/gui/beans/icons/");
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      TestSetEvent testSetEvent0 = new TestSetEvent(flowByExpression0, (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
      filter0.connectionNotification("weka/gui/beans/icons/", instanceStreamToBatchMaker0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getInputMethodListeners();
      LogitBoost logitBoost0 = new LogitBoost();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getCapabilities();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      filter0.eventGeneratable("configuration");
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.getRevision();
      filter0.setFilter(multiFilter0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      InstanceEvent instanceEvent1 = new InstanceEvent(euclideanDistance0);
      instanceEvent1.setStatus(2);
      filter0.acceptInstance(instanceEvent1);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      CSVLoader cSVLoader0 = new CSVLoader();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      try { 
        serializedInstancesLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SerializedInstancesLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Filter filter0 = new Filter();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      predictionAppender0.isPaintingForPrint();
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      LogitBoost logitBoost0 = new LogitBoost();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getCapabilities();
      filter0.eventGeneratable("configuration");
      Logger logger0 = predictionAppender0.m_logger;
      MultiFilter multiFilter0 = new MultiFilter();
      String string0 = Document.StreamDescriptionProperty;
      filter0.setFilter(multiFilter0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent1 = predictionAppender0.m_instanceEvent;
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      InstanceEvent instanceEvent2 = new InstanceEvent(euclideanDistance0);
      instanceEvent2.setStatus(1);
      filter0.acceptInstance(instanceEvent2);
      SubstringLabeler substringLabeler1 = new SubstringLabeler();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.disconnectionNotification("instance", "instance");
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getCapabilities();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      filter0.eventGeneratable("instance");
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Logger logger0 = predictionAppender0.m_logger;
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.getRevision();
      filter0.setFilter(multiFilter0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      FileSystemHandling.shouldAllThrowIOExceptions();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      InstanceEvent instanceEvent1 = new InstanceEvent(flowByExpression0);
      multiFilter0.toString();
      instanceEvent1.setStatus(1);
      filter0.acceptInstance(instanceEvent1);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      CSVLoader cSVLoader0 = new CSVLoader();
      filter0.removeConfigurationListener((ConfigurationListener) null);
      filter0.stop();
      filter0.setFilter(multiFilter0);
      Filter filter1 = new Filter();
      filter1.stop();
      filter0.connectionAllowed("GbNU6dH_");
      filter0.connectionAllowed("instance");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Random.setNextRandom((-3918));
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = wrapperSubsetEval0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      Filter filter0 = new Filter();
      filter0.eventGeneratable("weka/core/Capabilities.props");
      MultiFilter multiFilter0 = new MultiFilter();
      wrapperSubsetEval0.getTechnicalInformation();
      multiFilter0.getRevision();
      filter0.setFilter(multiFilter0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      FlowByExpression flowByExpression1 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression1.m_ie;
      wrapperSubsetEval0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent1 = flowByExpression0.m_ie;
      instanceEvent1.setStatus(4);
      MultiFilter multiFilter1 = new MultiFilter();
      multiFilter0.toString();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      instanceEvent1.setInstance(binarySparseInstance0);
      filter0.acceptInstance(instanceEvent1);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      filter0.getGraphicsConfiguration();
      filter0.eventGeneratable("weka/core/Capabilities.props");
      // Undeclared exception!
      try { 
        filter0.performRequest((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      Random.setNextRandom((-3918));
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getCapabilities();
      filter0.eventGeneratable("instance");
      PredictionAppender predictionAppender0 = new PredictionAppender();
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.getRevision();
      filter0.setFilter(multiFilter0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstanceEvent instanceEvent1 = new InstanceEvent(flowByExpression0);
      multiFilter0.toString();
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2105);
      instanceEvent0.setInstance(binarySparseInstance0);
      filter0.acceptInstance(instanceEvent1);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      CSVLoader cSVLoader0 = new CSVLoader();
      filter0.removeConfigurationListener((ConfigurationListener) null);
      filter0.stop();
      Filter filter1 = new Filter();
      Filter filter2 = new Filter();
      filter2.connectionAllowed("instance");
      filter2.connectionAllowed("<!-- globalinfo-start -->");
      PredictionAppender predictionAppender1 = new PredictionAppender();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(predictionAppender1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.PredictionAppender : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }
}
