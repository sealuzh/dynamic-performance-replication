/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:10:01 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      String string0 = rE2_0.replaceAll("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      int[] intArray0 = rE2_0.findSubmatchIndex("");
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      List<String> list0 = rE2_0.findAll("", 1844);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("Bl8OL?Ou8`UkMmau;j", (-1388), false);
      assertNotNull(rE2_0);
      assertEquals("Bl8OL?Ou8`UkMmau;j", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 976);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(list0);
      assertEquals("Bl8OL?Ou8`UkMmau;j", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("o+\"4Y#CmHsU-z");
      assertNotNull(rE2_0);
      assertEquals("o+\"4Y#CmHsU-z", rE2_0.toString());
      
      String string0 = rE2_0.replaceFirst("o+\"4Y#CmHsU-z", "o+\"4Y#CmHsU-z");
      assertEquals("o+\"4Y#CmHsU-z", string0);
      assertNotNull(string0);
      assertEquals("o+\"4Y#CmHsU-z", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 32, true);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(intArray0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 13);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("", 1684);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("", (-521));
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("D_ 0By7@+78jZx%RYM");
      assertNotNull(rE2_0);
      assertEquals("D_ 0By7@+78jZx%RYM", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("D_ 0By7@+78jZx%RYM", 1684);
      assertNull(list0);
      assertEquals("D_ 0By7@+78jZx%RYM", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RE2.quoteMeta("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllIndex("5", 1);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 1818);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = new RE2("fail");
      assertNotNull(rE2_0);
      assertEquals("fail", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 13);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(list0);
      assertEquals("fail", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("I`}]m$/1P-z4B+&");
      assertNotNull(rE2_0);
      assertEquals("I`}]m$/1P-z4B+&", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findSubmatchIndex("I`}]m$/1P-z4B+&");
      assertNull(intArray0);
      assertEquals("I`}]m$/1P-z4B+&", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = new RE2("UTF-8");
      assertNotNull(rE2_0);
      assertEquals("UTF-8", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(byteArray1);
      assertEquals("UTF-8", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = RE2.match("-", "-");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("jMm'17?ZsP#IH", 6623, false);
      assertNotNull(rE2_0);
      assertEquals("jMm'17?ZsP#IH", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(intArray0);
      assertEquals("jMm'17?ZsP#IH", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = new RE2("com.google.re2j.RE2");
      assertNotNull(rE2_0);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      
      String string0 = rE2_0.find("com.google.re2j.RE2");
      assertEquals("com.google.re2j.RE2", string0);
      assertNotNull(string0);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.replaceFirst("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = new RE2("Ljbi`'*z=S%");
      assertNotNull(rE2_0);
      assertEquals("Ljbi`'*z=S%", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 5009);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(list0);
      assertEquals("Ljbi`'*z=S%", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 4986);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("I`}]m$/1P-z4B+&");
      assertNotNull(rE2_0);
      assertEquals("I`}]m$/1P-z4B+&", rE2_0.toString());
      
      String string0 = rE2_0.toString();
      assertEquals("I`}]m$/1P-z4B+&", string0);
      assertNotNull(string0);
      assertEquals("I`}]m$/1P-z4B+&", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("M");
      assertNotNull(rE2_0);
      assertEquals("M", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 3);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(list0);
      assertEquals("M", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 3);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("L");
      assertNotNull(rE2_0);
      assertEquals("L", rE2_0.toString());
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-3209);
      intArray0[1] = (-3209);
      // Undeclared exception!
      try { 
        rE2_0.match("L", (-3209), (-3209), (-3209), intArray0, (-3209));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Machine", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = new int[21];
      intArray0[1] = (-1);
      intArray0[0] = (int) (byte)34;
      boolean boolean0 = rE2_0.longest;
      assertFalse(boolean0);
      
      boolean boolean1 = rE2_0.match("", 0, 0, 0, intArray0, 0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.replaceFirst("XXN$Gs", "XXN$Gs");
      assertEquals("XXN$GsXXN$Gs", string0);
      assertNotNull(string0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("L+|{~G'");
      assertNotNull(rE2_0);
      assertEquals("L+|{~G'", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findIndex("");
      assertNull(intArray0);
      assertEquals("L+|{~G'", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = new RE2("H");
      assertNotNull(rE2_0);
      assertEquals("H", rE2_0.toString());
      
      String string0 = RE2.quoteMeta("H");
      assertEquals("H", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = new RE2("h% 5r{");
      assertNotNull(rE2_0);
      assertEquals("h% 5r{", rE2_0.toString());
      
      rE2_0.reset();
      assertEquals("h% 5r{", rE2_0.toString());
      
      String string0 = RE2.quoteMeta("h% 5r{");
      assertEquals("h% 5r\\{", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = RE2.quoteMeta("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      RE2 rE2_0 = new RE2("can't happen");
      assertNotNull(rE2_0);
      assertEquals("can't happen", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllIndex("", 1);
      assertNull(list0);
      assertEquals("can't happen", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("can't happen");
      assertNotNull(rE2_0);
      assertEquals("can't happen", rE2_0.toString());
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      assertEquals("can't happen", rE2_0.toString());
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      boolean boolean0 = rE2_0.match("can't happen", 0, 0, 0, intArray0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean0);
      assertEquals("can't happen", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = RE2.match("gNSkA?_7HG!lp{aI", "bad ins8t");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = RE2.quoteMeta("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllIndex("", 3);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = RE2.quoteMeta("UTF-8");
      assertEquals("UTF-8", string0);
      assertNotNull(string0);
      
      RE2 rE2_0 = RE2.compilePOSIX("UTF-8");
      assertNotNull(rE2_0);
      assertEquals("UTF-8", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findIndex("UTF-8");
      assertArrayEquals(new int[] {0, 5}, intArray0);
      assertNotNull(intArray0);
      assertEquals("UTF-8", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("BQ/fkahZ0P/Bf,>");
      assertNotNull(rE2_0);
      assertEquals("BQ/fkahZ0P/Bf,>", rE2_0.toString());
      
      String[] stringArray0 = rE2_0.findSubmatch("BQ/fkahZ0P/Bf,>");
      assertNotNull(stringArray0);
      assertEquals("BQ/fkahZ0P/Bf,>", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("BQ/fkahZ0P/Bf,>");
      assertNotNull(rE2_0);
      assertEquals("BQ/fkahZ0P/Bf,>", rE2_0.toString());
      
      String[] stringArray0 = rE2_0.findSubmatch(",pknS77mq\rOvQ*>");
      assertNull(stringArray0);
      assertEquals("BQ/fkahZ0P/Bf,>", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("/");
      assertNotNull(rE2_0);
      assertEquals("/", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("/", 1684);
      assertNotNull(list0);
      assertEquals("/", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("RUNE_ANY_NOT_NL");
      assertNotNull(rE2_0);
      assertEquals("RUNE_ANY_NOT_NL", rE2_0.toString());
      
      String string0 = rE2_0.find("");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("RUNE_ANY_NOT_NL", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("-N4po\"G% QU2", 393, false);
      assertNotNull(rE2_0);
      assertEquals("-N4po\"G% QU2", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("No", 393);
      assertNull(list0);
      assertEquals("-N4po\"G% QU2", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", 8);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("x{/Bm/w3n:\"?");
      assertNotNull(rE2_0);
      assertEquals("x{/Bm/w3n:\"?", rE2_0.toString());
      
      List<String> list0 = rE2_0.findAll("x{/Bm/w3n:\"?", 0);
      assertNull(list0);
      assertEquals("x{/Bm/w3n:\"?", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("NOP");
      assertNotNull(rE2_0);
      assertEquals("NOP", rE2_0.toString());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)55;
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)55}, byteArray0);
      assertNull(intArray0);
      assertEquals("NOP", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("M3Q");
      assertNotNull(rE2_0);
      assertEquals("M3Q", rE2_0.toString());
      
      String string0 = RE2.quoteMeta("M3Q");
      assertEquals("M3Q", string0);
      assertNotNull(string0);
      
      String string1 = rE2_0.replaceFirst("M3Q", "M3Q");
      assertEquals("M3Q", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("M3Q", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[4];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String[] stringArray0 = rE2_0.findSubmatch("Cyrillic");
      assertNotNull(stringArray0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 529;
      intArray0[1] = 529;
      intArray0[1] = 2819;
      boolean boolean0 = rE2_0.match("Cyrillic", 2819, 529, 2819, intArray0, 2819);
      assertArrayEquals(new int[] {529, 2819, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("Samaritan");
      assertNotNull(rE2_0);
      assertEquals("Samaritan", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll("Samaritan", "Samaritan");
      assertEquals("Samaritan", string0);
      assertNotNull(string0);
      assertEquals("Samaritan", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("M~*&]'s%R");
      assertNotNull(rE2_0);
      assertEquals("M~*&]'s%R", rE2_0.toString());
      
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals("M~*&]'s%R", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RE2 rE2_0 = RE2.compile(",");
      assertNotNull(rE2_0);
      assertEquals(",", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(byteArray1);
      assertEquals(",", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[18];
      intArray0[16] = (-1);
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)12;
      intArray0[15] = (int) (byte)12;
      byteArray0[4] = (byte)12;
      intArray0[3] = 0;
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll("4", "M8!");
      assertEquals("M8!4M8!", string0);
      assertNotNull(string0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RE2 rE2_0 = new RE2("com.google.re2j.RE2");
      assertNotNull(rE2_0);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RE2 rE2_0 = new RE2("z");
      assertNotNull(rE2_0);
      assertEquals("z", rE2_0.toString());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-23);
      byteArray0[4] = (byte) (-44);
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (byte) (-44));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-23), (byte) (-23), (byte)0, (byte) (-44)}, byteArray0);
      assertNull(list0);
      assertEquals("z", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RE2 rE2_0 = new RE2("z");
      assertNotNull(rE2_0);
      assertEquals("z", rE2_0.toString());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-119);
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      assertEquals("z", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll("4", "nZ`Iz'ADB*-u`){bYF");
      assertEquals("4", string0);
      assertNotNull(string0);
      assertEquals("z", rE2_0.toString());
      
      boolean boolean0 = RE2.match("", "z");
      assertTrue(boolean0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        RE2.compilePOSIX((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser$StringIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = new int[17];
      byte[] byteArray0 = new byte[17];
      List<int[]> list0 = rE2_0.findAllIndex("", (-3));
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      String string0 = rE2_0.replaceFirst("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", rE2_0.toString());
      
      intArray0[15] = (int) (byte)0;
      byteArray0[4] = (byte)0;
      boolean boolean0 = rE2_0.match("", 0, 0, (-3), (int[]) null, 0);
      assertTrue(boolean0);
      assertEquals("", rE2_0.toString());
      
      // Undeclared exception!
      try { 
        rE2_0.replaceFirst((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }
}
