/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:33:12 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentedByteString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.sha256();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte byte0 = (byte)0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        segmentedByteString0.indexOf(byteArray0, (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = (ByteString) segmentedByteString0;
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha1(byteStringArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.internalArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      ByteString[] byteStringArray0 = new ByteString[2];
      segmentedByteString0.write(buffer0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.mark(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      segmentedByteString0.write(pipedOutputStream0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.write(buffer0);
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = segmentedByteString0.rangeEquals((int) (byte) (-9), byteArray0, 0, (int) (byte) (-9));
      assertFalse(boolean0);
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256(segmentedByteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hex();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.require(0L);
      Buffer buffer1 = buffer0.writeLong(0L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      segmentedByteString0.md5();
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = (ByteString) segmentedByteString0;
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        segmentedByteString0.base64Url();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        segmentedByteString0.string((Charset) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      ByteString[] byteStringArray0 = new ByteString[2];
      buffer0.toString();
      // Undeclared exception!
      try { 
        segmentedByteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.write(buffer0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object object0 = new Object();
      segmentedByteString0.equals(object0);
      segmentedByteString0.rangeEquals((-1), (ByteString) null, 907, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.utf8();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.hashCode();
      segmentedByteString0.hashCode();
      segmentedByteString0.write(buffer0);
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte((-312));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.base64();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.toString();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.writeUtf8CodePoint(15);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      realBufferedSink0.writeUtf8("");
      Buffer buffer1 = realBufferedSink0.buffer;
      boolean boolean0 = segmentedByteString0.equals(realBufferedSource0);
      boolean boolean1 = segmentedByteString0.rangeEquals(852, (ByteString) null, 1, 873);
      assertEquals(1, segmentedByteString0.size());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.writeUtf8CodePoint(15);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = segmentedByteString0.startsWith(byteArray0);
      assertFalse(boolean0);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.buffer.toString();
      HashingSink.sha256(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeUtf8CodePoint(0);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      Buffer buffer2 = realBufferedSink0.buffer;
      realBufferedSink0.emitCompleteSegments();
      boolean boolean0 = segmentedByteString1.equals(realBufferedSource0);
      boolean boolean1 = segmentedByteString1.rangeEquals(0, (ByteString) segmentedByteString0, 0, 0);
      assertEquals(1, segmentedByteString1.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.hashCode();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      realBufferedSource0.buffer.toString();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeUtf8CodePoint(743);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      realBufferedSource0.buffer();
      boolean boolean0 = realBufferedSink0.closed;
      // Undeclared exception!
      try { 
        segmentedByteString1.rangeEquals(0, (ByteString) segmentedByteString0, 0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSink0.buffer);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.md5();
      realBufferedSink0.write(byteString0);
      hashingSource0.read(buffer0, 1L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 18);
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = new byte[6];
      byte byte0 = (byte)61;
      byteArray1[2] = (byte)61;
      segmentedByteString0.startsWith(byteArray0);
      segmentedByteString0.toAsciiUppercase();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        segmentedByteString0.write(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSink0.buffer);
      hashingSource0.toString();
      ByteString byteString0 = hashingSource0.hash();
      realBufferedSink0.write(byteString0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HashingSource(okio.Buffer@0000000002)");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 18);
      byte[] byteArray0 = new byte[6];
      segmentedByteString0.md5();
      byte byte0 = segmentedByteString0.getByte((byte)0);
      assertEquals(18, segmentedByteString0.size());
      assertEquals((byte) (-38), byte0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.toString();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.writeUtf8CodePoint(37);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-7);
      segmentedByteString0.startsWith(byteArray0);
      segmentedByteString0.hashCode();
      segmentedByteString0.write(realBufferedSource0.buffer);
      assertFalse(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSink0.buffer);
      ByteString byteString0 = hashingSource0.hash();
      realBufferedSink0.write(byteString0);
      hashingSource0.read(buffer0, 1L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|7^w5`Kl");
      HashingSource.hmacSha1(realBufferedSink0.buffer, byteString0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      segmentedByteString0.hashCode();
      segmentedByteString0.write(buffer0);
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte((-312));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=-312 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSink0.buffer);
      ByteString byteString0 = hashingSource0.hash();
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteString0);
      Charset.defaultCharset();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 18);
      segmentedByteString0.sha1();
      Object object0 = new Object();
      segmentedByteString0.equals(byteString0);
      segmentedByteString0.rangeEquals((-331), byteString0, (-331), (-331));
      SegmentedByteString segmentedByteString1 = null;
      try {
        segmentedByteString1 = new SegmentedByteString(((RealBufferedSink) bufferedSink0).buffer, (-2147));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=20 offset=0 byteCount=-2147
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.toString();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      HashingSink.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeUtf8CodePoint(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      boolean boolean0 = realBufferedSink1.closed;
      realBufferedSource0.readUtf8(0L);
      byte[] byteArray0 = new byte[1];
      segmentedByteString0.startsWith(byteArray0);
      segmentedByteString0.hashCode();
      segmentedByteString0.md5();
      Buffer buffer1 = realBufferedSource0.buffer();
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.buffer.toString();
      HashingSink.sha256(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      realBufferedSink0.writeUtf8CodePoint(15);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      String string0 = segmentedByteString0.utf8();
      assertEquals("\u000F", string0);
      
      Buffer buffer2 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[2];
      realBufferedSink0.writeByte(1);
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-26);
      boolean boolean0 = segmentedByteString0.rangeEquals(15, byteArray0, (-3233), (int) (byte) (-26));
      assertFalse(boolean0);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.toString();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      HashingSink.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8CodePoint(15);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      byte[] byteArray0 = new byte[1];
      segmentedByteString0.toString();
      byteArray0[0] = (byte)0;
      BufferedSink bufferedSink1 = realBufferedSink0.writeUtf8("");
      Buffer buffer1 = realBufferedSink0.buffer;
      ByteString byteString0 = hashingSink0.hash();
      ByteBuffer byteBuffer0 = segmentedByteString0.asByteBuffer();
      ByteString.of(byteBuffer0);
      ((RealBufferedSink) bufferedSink0).close();
      realBufferedSource0.indexOf(byteString0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      segmentedByteString0.equals(byteString1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SegmentedByteString segmentedByteString1 = null;
      try {
        segmentedByteString1 = new SegmentedByteString(((RealBufferedSink) bufferedSink1).buffer, (-1416));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1416
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.toString();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSink0.buffer);
      ByteString byteString0 = hashingSource0.hash();
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteString0);
      Charset charset0 = Charset.defaultCharset();
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeString("[size=0]", charset0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(((RealBufferedSink) bufferedSink0).buffer);
      realBufferedSource0.rangeEquals((long) 765, byteString0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 21);
      bufferedSink0.buffer();
      realBufferedSource0.buffer.writableSegment(329);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[size=0]");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      segmentedByteString0.md5();
      ByteString byteString1 = segmentedByteString0.toAsciiLowercase();
      boolean boolean0 = segmentedByteString0.equals(byteString1);
      assertFalse(boolean0);
      
      segmentedByteString0.sha1();
      boolean boolean1 = realBufferedSink1.closed;
      segmentedByteString0.toByteArray();
      assertEquals(21, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSink0.buffer);
      ByteString byteString0 = hashingSource0.hash();
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteString0);
      Charset.defaultCharset();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 18);
      segmentedByteString0.md5();
      Object object0 = new Object();
      segmentedByteString0.equals(byteString0);
      segmentedByteString0.rangeEquals(4, byteString0, (-331), 4);
      SegmentedByteString segmentedByteString1 = null;
      try {
        segmentedByteString1 = new SegmentedByteString(((RealBufferedSink) bufferedSink0).buffer, (-2147));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=20 offset=0 byteCount=-2147
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSink0.buffer);
      ByteString byteString0 = hashingSource0.hash();
      hashingSource0.toString();
      buffer0.md5();
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteString0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 18);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-71);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-71);
      byteArray0[2] = (byte) (-71);
      byteArray0[2] = (byte)61;
      boolean boolean0 = segmentedByteString0.startsWith(byteArray0);
      ByteString byteString1 = ByteString.EMPTY;
      byte byte0 = segmentedByteString0.getByte((byte)0);
      assertEquals((byte) (-38), byte0);
      
      Object object0 = new Object();
      bufferedSink0.writeByte(25);
      boolean boolean1 = segmentedByteString0.rangeEquals(4, byteString0, 4, 4);
      assertFalse(boolean1 == boolean0);
      
      bufferedSink0.buffer();
      segmentedByteString0.asByteBuffer();
      segmentedByteString0.lastIndexOf(byteArray0, (int) (byte) (-71));
      int int0 = segmentedByteString0.size();
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSink0.buffer);
      ByteString byteString0 = hashingSource0.hash();
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteString0);
      Charset.defaultCharset();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      hashingSource0.read(buffer0, 1L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 18);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-71);
      byte[] byteArray1 = new byte[3];
      segmentedByteString0.rangeEquals(18, byteArray0, 1208, (-640));
      int int0 = 3344;
      segmentedByteString0.rangeEquals((-3233), byteString0, (-640), 3344);
      realBufferedSink0.writeByte((byte) (-71));
      int int1 = (-3233);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(((RealBufferedSink) bufferedSink0).buffer, (byte)0);
      // Undeclared exception!
      try { 
        hashingSource0.read(((RealBufferedSink) bufferedSink0).buffer, (byte) (-71));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -71
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Pipe pipe0 = new Pipe(2508L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer_UnsafeCursor0.close();
      buffer0.writeLong((-1L));
      pipe0.sinkClosed = false;
      Segment segment0 = new Segment((byte[]) null, (-1), (-1), false, false);
      buffer1.head = segment0;
      // Undeclared exception!
      try { 
        buffer0.snapshot();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // s.limit == s.pos
         //
      }
  }
}
