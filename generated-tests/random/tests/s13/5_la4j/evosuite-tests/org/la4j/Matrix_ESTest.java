/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 22:12:24 GMT 2019
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.decomposition.MatrixDecompositor;
import org.la4j.linear.LinearSystemSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceInnerProduct;
import org.la4j.operation.ooplace.OoPlaceKroneckerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(6);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      matrix0.hadamardProduct(denseMatrix0);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 699;
      matrix0.copyOfColumns(699);
      hashMap0.replaceAll(biFunction0);
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 195);
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(denseVector0, denseVector0);
      // Undeclared exception!
      try { 
        matrix0.insertColumn((-3577), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..5
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(377);
      Matrix matrix0 = Matrix.unit(37, 377);
      rowMajorSparseMatrix0.swapColumns(8, 2);
      Matrix matrix1 = matrix0.blankOfShape(377, 37);
      rowMajorSparseMatrix0.equals(matrix0, (double) 377);
      // Undeclared exception!
      matrix1.multiply(matrix0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 10;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(10, 10);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      int int1 = 55;
      int int2 = 1581;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0, 10, 55, 1221, 1581);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 10, 55
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(32);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      DenseVector denseVector0 = DenseVector.unit(32);
      matrix0.multiply((Vector) denseVector0);
      matrix0.hashCode();
      // Undeclared exception!
      try { 
        Matrix.identity((-1879048191));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 5;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(649, 282, 5);
      Matrix matrix0 = rowMajorSparseMatrix0.add(999.0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      matrix0.updateColumn(5, vectorFunction0);
      rowMajorSparseMatrix0.toRowMajorSparseMatrix();
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      // Undeclared exception!
      rowMajorSparseMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 6;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(6, 2.0);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      matrix0.toString();
      Matrix.fromCSV("0.000 0.000 0.000 0.000 0.000 2.000\n0.000 0.000 0.000 0.000 2.000 0.000\n0.000 0.000 0.000 2.000 0.000 0.000\n0.000 0.000 2.000 0.000 0.000 0.000\n0.000 2.000 0.000 0.000 0.000 0.000\n2.000 0.000 0.000 0.000 0.000 0.000\n");
      rowMajorSparseMatrix0.toSparseMatrix();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert(matrix0, 6, 1162);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 6 rows and 1162 cols at 0, 0 in a 6x6 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket vector coordinate real\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected object: vector.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 48;
      doubleArray0[1] = (double) 48;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) 6;
      doubleArray0[5] = (double) 48;
      Matrix matrix0 = Matrix.from1DArray(6, 48, doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1000;
      doubleArray0[1] = 1000.0;
      doubleArray0[2] = (double) 1000;
      doubleArray0[3] = (-3022.7095894593817);
      doubleArray0[4] = (double) 1000;
      Matrix matrix0 = Matrix.from1DArray(1000, 1000, doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1000);
      // Undeclared exception!
      try { 
        matrix0.equals((Matrix) columnMajorSparseMatrix0, 1000.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1628, 30.0);
      denseMatrix0.equals((Object) null);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1000;
      doubleArray0[1] = 30.0;
      doubleArray0[2] = (double) 1000;
      doubleArray0[3] = (double) 1628;
      doubleArray0[4] = (double) 1628;
      doubleArray0[5] = 30.0;
      doubleArray0[6] = 30.0;
      doubleArray0[7] = (double) 1000;
      DenseMatrix denseMatrix1 = DenseMatrix.from1DArray(1000, 17, doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.add((Matrix) denseMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 1628x1628 does not equal to 1000x17.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      columnMajorSparseMatrix0.add((double) 0);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      sparseVector0.toBinary();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 10);
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(sparseVector0, denseVector0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.setColumn(0, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 10. Should be: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      sparseVector0.infinityNorm();
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      int int0 = 1510;
      sparseVector0.toBinary();
      Double double0 = new Double((-1323.0470443));
      linkedList0.add(double0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.transformColumn(1510, vectorFunction0);
      int int1 = 5;
      VectorFunction vectorFunction1 = null;
      // Undeclared exception!
      try { 
        matrix0.transformRow(5, (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      DenseVector denseVector0 = DenseVector.constant(3039, 1064.9);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 3834);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      Integer integer0 = new Integer(3834);
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      hashMap0.putIfAbsent(integer0, (Double) null);
      Matrix matrix1 = Matrix.identity(2722);
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1, 2722, 3039);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 2722 rows and 3039 cols at 0, 0 from a 2722x2722 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(0, 0);
      denseMatrix0.rank();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      denseMatrix0.foldRow(0, vectorAccumulator0);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator1).accumulate();
      denseMatrix0.foldColumn(0, vectorAccumulator1);
      Matrix matrix0 = denseMatrix0.copyOfColumns(2837);
      matrix0.multiply(0.999);
      denseMatrix0.determinant();
      Matrix matrix1 = matrix0.subtract(413.00963);
      Locale locale0 = Locale.JAPANESE;
      locale0.stripExtensions();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      decimalFormatSymbols0.setDecimalSeparator('2');
      DecimalFormat decimalFormat0 = new DecimalFormat("^ 3idE^R", decimalFormatSymbols0);
      matrix1.mkString((NumberFormat) decimalFormat0, "^ 3idE^R", "en9V/zhPrxlF1e");
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.updateRow(32, vectorFunction0);
      int int1 = (-2469);
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.ints();
      mockRandom0.ints(2472L);
      // Undeclared exception!
      try { 
        mockRandom0.doubles(2472L, 1.0, (-642.621016910015));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed(0L);
      SparseVector sparseVector0 = SparseVector.random(0, (double) 0, (Random) mockRandom0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte) (-124);
      byteArray0[8] = (byte)6;
      mockRandom0.nextBytes(byteArray0);
      CCSMatrix cCSMatrix0 = (CCSMatrix)sparseVector0.toColumnMatrix();
      cCSMatrix0.rank();
      // Undeclared exception!
      try { 
        ((Matrix)cCSMatrix0).fail("VE#d}wpApj;1=|j}B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // VE#d}wpApj;1=|j}B
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(1276, 2083);
      // Undeclared exception!
      try { 
        matrix0.removeColumn(2083);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..2082
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 250.47758;
      doubleArray1[1] = 999.0;
      doubleArray1[2] = 100.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 2818.5796;
      doubleArray1[5] = (-1658.126758);
      doubleArray1[6] = 1000.0;
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 2818.5796;
      doubleArray2[1] = 999.0;
      doubleArray2[2] = 100.0;
      doubleArray2[3] = 1000.0;
      doubleArray2[4] = 999.0;
      doubleArray0[1] = doubleArray2;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = (-3108);
      intArray0[2] = (-1124);
      intArray0[3] = 16;
      intArray0[4] = 7;
      intArray0[5] = (-1162);
      intArray0[6] = (-1103);
      intArray0[7] = 3044;
      intArray0[8] = (-1);
      // Undeclared exception!
      try { 
        denseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-3635.964342481);
      doubleArray3[2] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = (-3635.964342481);
      doubleArray4[3] = (-3635.964342481);
      doubleArray4[4] = (-1.0);
      doubleArray4[5] = (-1.0);
      doubleArray4[6] = (-1.0);
      doubleArray4[7] = (-1.0);
      doubleArray4[8] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = (-3635.964342481);
      doubleArray5[2] = (-1.0);
      doubleArray5[3] = (-3635.964342481);
      doubleArray5[4] = (-1.0);
      doubleArray5[5] = (-1.0);
      doubleArray5[6] = (-3635.964342481);
      doubleArray5[7] = 2896.91;
      doubleArray5[8] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (-1.0);
      doubleArray6[1] = (-1.0);
      doubleArray6[2] = (-1.0);
      doubleArray6[3] = (-3635.964342481);
      doubleArray6[4] = (-3635.964342481);
      doubleArray6[5] = (-3635.964342481);
      doubleArray6[6] = (-1.0);
      doubleArray0[5] = doubleArray6;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      columnMajorSparseMatrix0.swapColumns(3, 3);
      assertEquals(0, columnMajorSparseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(16, 16, 16);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 16;
      doubleArray1[1] = (double) 16;
      doubleArray1[2] = (double) 16;
      doubleArray1[3] = (double) (-1);
      doubleArray1[4] = (double) 16;
      doubleArray1[5] = (double) (-1);
      doubleArray1[6] = (double) (-1);
      doubleArray1[7] = (double) 16;
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      SparseVector sparseVector0 = SparseVector.zero(1337, 16);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, sparseVector0);
      // Undeclared exception!
      try { 
        matrix0.insertRow((-1), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..15
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 1;
      Matrix matrix0 = Matrix.diagonal(1, 1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      matrix0.toRowVector();
      matrix0.each(matrixProcedure0);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      ooPlaceMatrixByItsTransposeMultiplication0.ensureApplicableTo(matrix0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1);
      Matrix matrix1 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      Matrix matrix2 = rowMajorSparseMatrix0.multiply(matrix0);
      Matrix matrix3 = matrix2.blankOfRows(4408);
      // Undeclared exception!
      try { 
        Matrix.block(matrix1, matrix3, matrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(6, mockRandom0);
      Locale locale0 = new Locale(" matrix.");
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      String string0 = denseMatrix0.mkString(numberFormat0);
      assertEquals(" 0% 10% 20% 30% 40% 50%\n10% 60% 70% 80% 90%  0%\n20% 70% 10% 20% 30% 40%\n30% 80% 20% 50% 60% 70%\n40% 90% 30% 60% 80% 90%\n50%  0% 40% 70% 90%  0%\n", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      SparseMatrix sparseMatrix0 = null;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(37, 37);
      // Undeclared exception!
      try { 
        denseMatrix0.subtract((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-52.0);
      doubleArray1[1] = (-0.4375);
      doubleArray1[2] = 1.0;
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = denseMatrix0.copy();
      // Undeclared exception!
      try { 
        denseMatrix0.insert(matrix0, (-1379), (-1379), (-1379), (-1064), 3808, 3808);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -1379, -1064
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 845.7208903488;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 999.0;
      doubleArray0[3] = (-1578.36);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 1000);
      ooPlaceOuterProduct0.partiallyApply(denseVector0);
      doubleArray0[4] = (-404.74779);
      doubleArray0[5] = 3789.2520125;
      doubleArray0[6] = 0.999;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      sparseVector0.toMatrixMarket(numberFormat0);
      matrix0.swapRows((-1), (-1));
      Matrix matrix1 = matrix0.shuffle();
      assertTrue(matrix1.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray0[1] = doubleArray2;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      MatrixFactory<DenseMatrix> matrixFactory0 = (MatrixFactory<DenseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = Matrix.constant(367, 0, 2242.47);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0, 2867, 367, 1, 295);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 2867, 367
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(37);
      ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(37, 37);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.non(matrixPredicate0);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      matrix0.equals((Matrix) columnMajorSparseMatrix0, (double) 37);
      Matrix matrix1 = matrix0.hadamardProduct(columnMajorSparseMatrix0);
      int[] intArray0 = new int[8];
      intArray0[0] = 37;
      intArray0[1] = 37;
      intArray0[2] = 37;
      intArray0[3] = 37;
      intArray0[4] = 37;
      intArray0[5] = 37;
      intArray0[6] = 37;
      intArray0[7] = 37;
      int[] intArray1 = new int[6];
      intArray1[0] = (-443);
      intArray1[1] = 37;
      intArray1[2] = 37;
      intArray1[3] = 37;
      intArray1[4] = 37;
      intArray1[5] = 37;
      // Undeclared exception!
      try { 
        matrix1.select(intArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '37' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 10;
      DenseVector denseVector0 = DenseVector.unit(10);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      matrix0.foldRows(vectorAccumulator0);
      matrix0.blank();
      int int1 = 1142;
      matrix0.blankOfColumns(1142);
      // Undeclared exception!
      try { 
        matrix0.setColumn(3039, (Vector) denseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(5, 5);
      sparseMatrix0.rank();
      Matrix matrix0 = sparseMatrix0.power(5);
      int int0 = 10;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.transformRow(5, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(4, 4);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(4, 4, (-52.0));
      matrix0.equals((Object) denseMatrix0);
      matrix0.copyOfShape(16, 16);
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("&CAtev");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) null);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      Matrix matrix1 = matrix0.copyOfColumns(0);
      assertTrue(matrix1.equals((Object)matrix0));
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, matrix1.rows());
      
      double double0 = matrix1.determinant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(10, 10, 10);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.transformColumn(10, (VectorFunction) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 1057;
      Matrix matrix0 = Matrix.identity(1057);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1057, 1057);
      matrix0.add((Matrix) denseMatrix0);
      // Undeclared exception!
      matrix0.sum();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 313;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(313);
      sparseMatrix0.toRowMajorSparseMatrix();
      int int1 = 2461;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.updateColumn(2461, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2461' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 3110;
      Matrix matrix0 = Matrix.identity(3110);
      // Undeclared exception!
      matrix0.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 2118;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(2118);
      // Undeclared exception!
      denseMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-702.5);
      doubleArray1[2] = (-2189.5);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = 1211.8390894886;
      doubleArray1[7] = (-1158.1976799);
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 1211.8390894886;
      doubleArray2[1] = 1211.8390894886;
      doubleArray2[2] = (-1158.1976799);
      doubleArray2[3] = 1211.8390894886;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-2189.5);
      doubleArray2[6] = 1211.8390894886;
      doubleArray2[7] = (-702.5);
      doubleArray2[8] = 1.0;
      doubleArray0[1] = doubleArray2;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple(sparseMatrix0, sparseMatrix0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      assertEquals(2, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(3);
      Matrix matrix0 = denseMatrix0.removeFirstColumn();
      assertEquals(2, matrix0.columns());
      
      Matrix matrix1 = denseMatrix0.subtract((-1.0));
      assertEquals(3, matrix1.columns());
      assertNotSame(matrix1, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(13, 7);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 13;
      doubleArray0[3] = (double) 13;
      doubleArray0[4] = (double) 30;
      doubleArray0[5] = (double) 13;
      doubleArray0[6] = (double) 7;
      Matrix matrix1 = Matrix.from1DArray(30, 13, doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.kroneckerProduct(matrix1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      DenseVector denseVector0 = DenseVector.constant(3039, 1064.9186);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 3834);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      Matrix matrix1 = Matrix.identity(2722);
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1, 2722, (-1285));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 2722x-1285
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(2345, 8, 0.0);
      // Undeclared exception!
      denseMatrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Matrix matrix0 = Matrix.from1DArray(2042, 2042, doubleArray0);
      matrix0.spliterator();
      // Undeclared exception!
      try { 
        matrix0.multiplyByItsTranspose();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 10;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 999.0;
      Matrix matrix0 = Matrix.from1DArray(10, 10, doubleArray0);
      int int1 = (-580);
      // Undeclared exception!
      try { 
        matrix0.updateRow((-580), (VectorFunction) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-580' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 1;
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(1, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3022.7095894593817;
      doubleArray0[1] = (-3097.87709872);
      doubleArray0[2] = 1000.0;
      doubleArray0[3] = 0.964;
      doubleArray0[4] = 0.964;
      doubleArray0[5] = (-1951.9982371507133);
      doubleArray0[6] = 1000.0;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      Matrix matrix1 = matrix0.transpose();
      assertEquals(7, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(37);
      ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(37, 37);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.non(matrixPredicate0);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      matrix0.equals((Matrix) columnMajorSparseMatrix0, (double) 37);
      Matrix matrix1 = matrix0.hadamardProduct(columnMajorSparseMatrix0);
      int[] intArray0 = new int[8];
      intArray0[0] = 37;
      intArray0[1] = 37;
      intArray0[2] = 37;
      intArray0[3] = 37;
      intArray0[4] = 37;
      intArray0[5] = 37;
      intArray0[6] = 37;
      intArray0[7] = 37;
      int[] intArray1 = new int[6];
      intArray1[0] = (-443);
      intArray1[1] = 37;
      intArray1[2] = 37;
      intArray1[3] = 37;
      intArray1[4] = 37;
      intArray1[5] = 37;
      // Undeclared exception!
      try { 
        matrix1.select(intArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '37' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(37);
      ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(37, 37);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      columnMajorSparseMatrix0.non(matrixPredicate0);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      matrix0.equals((Matrix) columnMajorSparseMatrix0, (double) 37);
      Matrix matrix1 = matrix0.hadamardProduct(columnMajorSparseMatrix0);
      int[] intArray0 = new int[8];
      intArray0[0] = 37;
      intArray0[1] = 37;
      intArray0[2] = 37;
      intArray0[3] = 37;
      intArray0[4] = 37;
      intArray0[5] = 37;
      intArray0[6] = 37;
      intArray0[7] = 37;
      int[] intArray1 = new int[6];
      intArray1[0] = (-443);
      intArray1[1] = 37;
      intArray1[2] = 37;
      intArray1[3] = 37;
      intArray1[4] = 37;
      intArray1[5] = 37;
      // Undeclared exception!
      try { 
        matrix1.select(intArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '37' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[][] doubleArray0 = new double[6][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 868.6477;
      doubleArray3[1] = 1043.382684810031;
      doubleArray3[2] = (-1217.3916784828);
      doubleArray3[3] = 999.0;
      doubleArray3[4] = 1.0;
      doubleArray3[5] = (-496.677444);
      doubleArray3[6] = (-3543.97);
      doubleArray3[7] = (-966.0);
      doubleArray3[8] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (-1217.3916784828);
      doubleArray4[1] = 999.0;
      doubleArray4[2] = 868.6477;
      doubleArray4[3] = 1.0;
      doubleArray4[4] = (-966.0);
      doubleArray4[5] = (-496.677444);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (-966.0);
      doubleArray5[1] = 1.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 1043.382684810031;
      doubleArray5[4] = (-496.677444);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = 868.6477;
      doubleArray6[1] = 1.0;
      doubleArray6[2] = 1.0;
      doubleArray0[5] = doubleArray6;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      assertEquals(0, sparseMatrix0.columns());
      
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, sparseMatrix0);
      boolean boolean0 = sparseMatrix0.equals(matrix0, (-2459.991901921));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 912;
      int int1 = 5;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(912, 5);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(5, 912);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.hadamardProduct(sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 912x5 does not equal to 5x5.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 2336;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(2336, 2336, 2336);
      int int1 = 2336;
      // Undeclared exception!
      try { 
        denseMatrix0.removeRow(2336);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..2335
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(9, 9);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(9, 2940.2265408547314);
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, sparseMatrix0);
      matrix0.manhattanNorm();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_LU;
      MatrixDecompositor matrixDecompositor0 = matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      assertNotNull(matrixDecompositor0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(3, mockRandom0);
      Matrix matrix1 = matrix0.removeLastColumn();
      assertEquals(2, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(12);
      rowMajorSparseMatrix0.setColumn(9, (double) 9);
      assertEquals(23, rowMajorSparseMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 10;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(10, 10);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      int int1 = (-814);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        matrix0.eachInRow((-814), vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -814
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1000, 2438);
      double[][] doubleArray0 = new double[7][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 1000;
      doubleArray2[1] = (double) 1000;
      doubleArray2[2] = (double) 1000;
      doubleArray2[3] = (double) 1000;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 2438;
      doubleArray3[1] = (double) 1000;
      doubleArray3[2] = 3913.41083772133;
      doubleArray3[3] = (double) 2438;
      doubleArray3[4] = (double) 2438;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 3913.41083772133;
      doubleArray4[1] = (double) 1000;
      doubleArray4[2] = (double) 1000;
      doubleArray4[3] = (double) 2438;
      doubleArray4[4] = (double) 2438;
      doubleArray4[5] = 3913.41083772133;
      doubleArray4[6] = (double) 2438;
      doubleArray4[7] = 3913.41083772133;
      doubleArray4[8] = (double) 1000;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (double) 1000;
      doubleArray6[1] = 3913.41083772133;
      doubleArray6[2] = (double) 1000;
      doubleArray6[3] = (double) 1000;
      doubleArray6[4] = (double) 2438;
      doubleArray6[5] = 3913.41083772133;
      doubleArray6[6] = 3913.41083772133;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = 3913.41083772133;
      doubleArray0[6] = doubleArray7;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.infinityNorm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(6, 0.0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.transform(matrixFunction0);
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(6, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 10;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(10, 100.0);
      columnMajorSparseMatrix0.removeLastRow();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      matrix0.insert((Matrix) columnMajorSparseMatrix0);
      int int1 = 30;
      int int2 = 5;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.foldRows((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(2105, 2105, (-796.3931333499595));
      denseMatrix0.trace();
      int int0 = 1120;
      denseMatrix0.setRow(1120, (-1676407.5457016458));
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      denseMatrix0.maxInRow(1120);
      // Undeclared exception!
      denseMatrix0.mkString(numberFormat0, "Row '", "Row '");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 2101;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(2101);
      int int1 = 1000;
      MockRandom mockRandom0 = new MockRandom(1000);
      Vector vector0 = Vector.random(2101, mockRandom0);
      // Undeclared exception!
      sparseMatrix0.insertRow(1000, vector0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(7);
      DenseVector denseVector0 = DenseVector.random(7, mockRandom0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = matrix0.foldColumns(vectorAccumulator0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = new double[1];
      int int0 = 4;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(4, 2247.751812542962);
      sparseMatrix0.determinant();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.la4j.matrix.sparse.CRSMatrix";
      stringArray0[1] = "O3l";
      stringArray0[2] = "{fv~Do&B4E";
      stringArray0[3] = "q!ACt7#Ww";
      stringArray0[4] = "l$!'%HOpyBJ";
      stringArray0[5] = "t3S9Y>2#P#kBgs";
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 1303;
      SparseVector sparseVector0 = SparseVector.zero(1303);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        matrix0.sliceTopLeft(1303, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(26);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      columnMajorSparseMatrix0.sliceBottomRight(26, 2);
      // Undeclared exception!
      try { 
        matrix0.power((-1198));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -1198.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 1;
      Matrix matrix0 = Matrix.constant(1, 950, 593.82068539);
      int int1 = (-2);
      // Undeclared exception!
      try { 
        matrix0.sliceBottomRight((-2), (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 2250;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(2250, 2250);
      int int1 = (-1659);
      // Undeclared exception!
      try { 
        denseMatrix0.sliceTopLeft((-1659), (-1659));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-1659][0..-1659].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 628.8407;
      doubleArray0[1] = (-110.0810414);
      doubleArray0[2] = 2812.1663;
      doubleArray0[3] = (-917.65993597);
      doubleArray0[4] = 3022.7095894593817;
      doubleArray0[5] = (-287.3171574995);
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.FORWARD_BACK_SUBSTITUTION;
      LinearSystemSolver linearSystemSolver0 = matrix0.withSolver(linearAlgebra_SolverFactory0);
      assertEquals(6, linearSystemSolver0.unknowns());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[][] doubleArray0 = new double[0][5];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      matrix0.blankOfColumns(2501);
      matrix0.rotate();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(2501, 2501);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 1583);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix0, sparseVector0);
      // Undeclared exception!
      try { 
        matrix0.multiply(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 2501 does not equal to 0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(2501, 2501);
      // Undeclared exception!
      matrix0.min();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      int int0 = 981;
      DenseVector denseVector0 = DenseVector.unit(981);
      SparseVector sparseVector0 = SparseVector.zero(981, 981);
      sparseVector0.nonZeroAt(981);
      Object object0 = new Object();
      denseVector0.equals(object0);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      denseVector0.toCSV(numberFormat0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      matrix0.trace();
      matrix0.toRowVector();
      ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      // Undeclared exception!
      matrix0.norm();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 522;
      Matrix matrix0 = Matrix.constant(522, 522, 0.999);
      int int1 = 690;
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      SparseVector sparseVector0 = SparseVector.zero(690);
      double double0 = 690.771;
      sparseVector0.getOrElse(522, 690.771);
      ooPlaceVectorsSubtraction0.apply(sparseVector0, sparseVector0);
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(sparseVector0, sparseVector0);
      // Undeclared exception!
      try { 
        matrix0.insertRow(690, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..521
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[] doubleArray0 = new double[0];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(814, 814, doubleArray0);
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 814;
      doubleArray2[1] = (double) 814;
      doubleArray2[2] = (double) 814;
      doubleArray2[3] = (double) 814;
      doubleArray1[3] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (double) 814;
      doubleArray3[1] = (double) 814;
      doubleArray3[2] = (double) 814;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray1);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, columnMajorSparseMatrix0);
      matrix0.rows();
      columnMajorSparseMatrix0.toDenseMatrix();
      // Undeclared exception!
      try { 
        matrix0.sliceBottomRight(814, 814);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [814..814][814..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(563);
      double double0 = rowMajorSparseMatrix0.maxInColumn(3);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 75;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(75, 75, 75);
      MockRandom mockRandom0 = new MockRandom();
      Matrix.zero(75, 75);
      mockRandom0.nextInt(75);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(75, 0.0, (Random) mockRandom0);
      Matrix.random(10, 10, mockRandom0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert((Matrix) rowMajorSparseMatrix0, (-2024), 9, 9, 4, 4, 98);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative source position: 9, 4
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 7;
      int int1 = 48;
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.zero(7, 48);
      basic2DMatrix0.rotate();
      int int2 = (-2147401700);
      // Undeclared exception!
      try { 
        ((Matrix)basic2DMatrix0).ensureIndexesAreInBounds((-2147401700), (-2147401700));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2147401700' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 13;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(13, 13);
      int int1 = (-1998);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.removeRow((-1998));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..12
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero(Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 182;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(182, 182);
      int int1 = 14;
      SparseMatrix.zero(14, 182, 182);
      SparseMatrix.identity(182);
      columnMajorSparseMatrix0.iteratorOrNonZeroColumns();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.FORWARD_BACK_SUBSTITUTION;
      // Undeclared exception!
      columnMajorSparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 136;
      int int1 = 4580;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(136, 4580);
      double double0 = 3438.300197;
      // Undeclared exception!
      columnMajorSparseMatrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        Matrix.zero((-2829), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2829x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = SparseVector.zero(1385, 1385);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      matrix0.swapRows(1385, 1385);
      assertEquals(0.0, matrix0.max(), 0.01);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      matrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 1435;
      Matrix matrix0 = Matrix.constant(1435, 1435, 1435);
      // Undeclared exception!
      matrix0.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[][] doubleArray0 = new double[5][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-52.0);
      doubleArray1[2] = 543.489963073;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = 543.489963073;
      doubleArray5[1] = 0.0;
      doubleArray0[4] = doubleArray5;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.rank();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      matrix0.foldColumns(vectorAccumulator0);
      int int0 = 1221;
      // Undeclared exception!
      try { 
        matrix0.minInRow(1221);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1221' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 2;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      mockRandom0.doubles(2459L);
      Matrix matrix0 = Matrix.random(2, 2, mockRandom0);
      int int1 = 4001;
      // Undeclared exception!
      try { 
        matrix0.transformRow(4001, (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 3625.1014503020233;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 3625.1014503020233;
      doubleArray3[1] = 3625.1014503020233;
      doubleArray3[2] = 3625.1014503020233;
      doubleArray3[3] = 3625.1014503020233;
      doubleArray3[4] = 3625.1014503020233;
      doubleArray3[5] = 3625.1014503020233;
      doubleArray3[6] = 3625.1014503020233;
      doubleArray0[2] = doubleArray3;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      int int0 = 3;
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      matrix0.norm();
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket(")nz(k3Ab");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[][] doubleArray0 = new double[0][8];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      DenseVector denseVector0 = DenseVector.unit(10);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, denseVector0);
      // Undeclared exception!
      try { 
        matrix0.insertColumn(7594, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1987.722342781;
      doubleArray1[1] = (-620.0);
      doubleArray1[2] = (-363.3348);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-620.0);
      doubleArray2[1] = (-363.3348);
      doubleArray2[2] = (-620.0);
      doubleArray2[3] = 1987.722342781;
      doubleArray2[4] = (-620.0);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (-363.3348);
      doubleArray2[7] = (-363.3348);
      doubleArray2[8] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-620.0);
      doubleArray3[1] = 4260.643167322987;
      doubleArray3[2] = 1987.722342781;
      doubleArray3[3] = 1208.4;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = (-620.0);
      doubleArray3[6] = (-363.3348);
      doubleArray3[7] = (-363.3348);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-363.3348);
      doubleArray4[2] = 1208.4;
      doubleArray4[3] = (-620.0);
      doubleArray4[4] = 1208.4;
      doubleArray4[5] = 2.20905717;
      doubleArray4[6] = 0.0;
      doubleArray0[3] = doubleArray4;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Vector vector0 = rowMajorSparseMatrix0.toColumnVector();
      assertEquals(4, vector0.length());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 1109;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1109);
      Locale locale0 = Locale.CANADA_FRENCH;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      // Undeclared exception!
      denseMatrix0.mkString(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.unit((-2073432486), (-2073432486));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      mockRandom0.nextInt((-3489));
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric((-1879048191), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(0, mockRandom0);
      denseVector0.shuffle();
      Matrix matrix0 = denseVector0.toRowMatrix();
      matrix0.setRow((-1), 1.0);
      matrix0.copyOfRows(0);
      // Undeclared exception!
      try { 
        Matrix.zero((-1328), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1704.768120451739);
      doubleArray0[1] = 600.4271753;
      doubleArray0[2] = (-2869.07293);
      doubleArray0[3] = 727.6544809932225;
      doubleArray0[4] = 255.6;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1540.8;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = matrix0.toColumnMajorSparseMatrix();
      assertEquals(8, columnMajorSparseMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(17);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      Integer integer0 = new Integer((-2018));
      boolean boolean0 = matrix0.equals((Object) integer0);
      assertEquals(17, denseMatrix0.rows());
      assertFalse(boolean0);
      assertTrue(matrix0.equals((Object)denseMatrix0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      double[][] doubleArray0 = new double[0][1];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      Matrix matrix1 = ooPlaceKroneckerProduct0.applyCommon(matrix0, matrix0);
      matrix1.diagonalProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      int int0 = 309;
      int int1 = 2021;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(309, 2021, 309);
      ooPlaceKroneckerProduct0.apply(rowMajorSparseMatrix0, denseMatrix0);
      matrix1.minInRow(393);
      matrix1.power(393);
      // Undeclared exception!
      try { 
        NumberFormat.getInstance((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (-2189.5);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = 1211.8390894886;
      doubleArray1[7] = (-1158.1976799);
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[1] = 1211.8390894886;
      doubleArray2[2] = (-1158.1976799);
      doubleArray2[3] = 1211.8390894886;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-2189.5);
      doubleArray2[6] = 1211.8390894886;
      doubleArray2[7] = 1.0;
      doubleArray2[8] = 1.0;
      doubleArray0[1] = doubleArray2;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        sparseMatrix0.swapColumns((-2146858287), 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-2146858287' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(7, 9, mockRandom0);
      matrix0.columnMajorIterator();
      matrix0.trace();
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("org.la4j.operation.VectorVectorOperation$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1022.33549074054;
      doubleArray1[2] = (-2159.72818);
      doubleArray1[3] = (-4480.895027680555);
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (-3094.9097932128443);
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-4480.895027680555);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-4480.895027680555);
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-3094.9097932128443);
      doubleArray3[1] = (-2159.72818);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 1022.33549074054;
      doubleArray0[2] = doubleArray3;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.minInColumn(2087);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      SparseVector sparseVector0 = SparseVector.zero(4064, 4064);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      double double0 = matrix0.product();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 585;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 585;
      doubleArray0[1] = (double) 585;
      doubleArray0[2] = (double) 585;
      doubleArray0[3] = (double) 585;
      doubleArray0[4] = (double) 585;
      doubleArray0[5] = (double) 585;
      Matrix matrix0 = Matrix.from1DArray(585, 585, doubleArray0);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        matrix0.removeColumn((-1632));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..584
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 1395;
      ColumnMajorSparseMatrix.identity(1395);
      int int1 = (-2872);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2872);
      doubleArray0[1] = (double) (-2872);
      doubleArray0[2] = (double) 1395;
      doubleArray0[3] = (double) 1395;
      doubleArray0[4] = (double) (-2872);
      doubleArray0[5] = (double) 1395;
      doubleArray0[6] = (double) 1395;
      doubleArray0[7] = (double) (-2872);
      doubleArray0[8] = (double) (-2872);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray(1395, (-2872), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1395x-2872
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 6;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(6, 2.0);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      matrix0.toString();
      Matrix.fromCSV("0.000 0.000 0.000 0.000 0.000 2.000\n0.000 0.000 0.000 0.000 2.000 0.000\n0.000 0.000 0.000 2.000 0.000 0.000\n0.000 0.000 2.000 0.000 0.000 0.000\n0.000 2.000 0.000 0.000 0.000 0.000\n2.000 0.000 0.000 0.000 0.000 0.000\n");
      rowMajorSparseMatrix0.toSparseMatrix();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert(matrix0, 2147477461, 1162);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 2147477461 rows and 1162 cols at 0, 0 in a 6x6 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = 3271.77241;
      doubleArray1[2] = 320.2913044;
      doubleArray1[3] = 2.0;
      doubleArray1[4] = 784.700608547;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      Matrix matrix1 = matrix0.removeFirstRow();
      assertEquals(1, denseMatrix0.rows());
      assertEquals(6, denseMatrix0.columns());
      assertEquals(0, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1752, 1752);
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 1752;
      doubleArray1[1] = (double) 1752;
      doubleArray1[2] = (double) 1752;
      doubleArray1[3] = (double) 1752;
      doubleArray1[4] = (double) 1752;
      doubleArray1[5] = (double) 1752;
      doubleArray1[6] = (-1.0);
      doubleArray0[0] = doubleArray1;
      ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      columnMajorSparseMatrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 0.999;
      doubleArray2[4] = (-908.6943);
      doubleArray2[5] = (-820.77599938);
      doubleArray2[6] = 896.8099430391699;
      doubleArray2[7] = (-2249.826);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (-2249.826);
      doubleArray3[1] = (-1886.08177485);
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 0.999;
      doubleArray3[4] = (-820.77599938);
      doubleArray3[5] = (-1.0);
      doubleArray3[6] = 896.8099430391699;
      doubleArray3[7] = 0.999;
      doubleArray3[8] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 0.999;
      doubleArray4[1] = (-908.6943);
      doubleArray4[2] = (-2249.826);
      doubleArray4[3] = 1.0;
      doubleArray4[4] = 1.0;
      doubleArray4[5] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = (-2249.826);
      doubleArray5[2] = 0.999;
      doubleArray5[3] = (-820.77599938);
      doubleArray5[4] = (-2249.826);
      doubleArray5[5] = 1.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = 0.999;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = (-1371.39);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      doubleArray8[0] = 0.999;
      doubleArray8[1] = 1.0;
      doubleArray8[2] = (-908.6943);
      doubleArray8[3] = (-820.77599938);
      doubleArray8[4] = 1000.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[5];
      doubleArray9[0] = 1.0;
      doubleArray9[1] = 1.0;
      doubleArray9[2] = (-1.0);
      doubleArray9[3] = (-2249.826);
      doubleArray9[4] = 1.0;
      doubleArray0[8] = doubleArray9;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(0, denseMatrix0.columns());
      
      Matrix matrix0 = denseMatrix0.multiply(0.999);
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertNotSame(matrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 32);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = null;
      NumberFormat.getPercentInstance();
      String string0 = "lK{FYK;";
      String string1 = "TAKEN_FROM_THOSE";
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 32;
      doubleArray0[1] = (-2216.8623);
      doubleArray0[2] = (double) 32;
      doubleArray0[3] = (double) 32;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2436.796;
      doubleArray0[6] = (double) 258;
      doubleArray0[7] = (double) 32;
      doubleArray0[8] = (double) 258;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(32, 258, doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceMatricesSubtraction0.apply(columnMajorSparseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      Matrix.random(1154, 13, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 2;
      int int1 = 37;
      Matrix matrix0 = Matrix.constant(2, 37, 277.48390752);
      matrix0.toMatrixMarket();
      // Undeclared exception!
      try { 
        matrix0.power(3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 2 does not equal to 37.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("IOmH5(tuN*uu!>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix.fromCSV("   ");
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero((-1392), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1392x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(16);
      matrix0.trace();
      // Undeclared exception!
      try { 
        matrix0.getRow(3465);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 3;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3, 3, 3);
      sparseMatrix0.min();
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      DenseVector.unit(3);
      sparseMatrix0.rowMajorIterator();
      // Undeclared exception!
      try { 
        SparseVector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 8;
      int int1 = 0;
      // Undeclared exception!
      try { 
        SparseMatrix.zero(8, 0, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "<Wj]+q\\'";
      // Undeclared exception!
      try { 
        SparseMatrix.fromCSV("<Wj]+q'");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(1020);
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(1020, 0, doubleArray0);
      int int1 = 7;
      ColumnMajorSparseMatrix.from1DArray(0, 7, doubleArray0);
      // Undeclared exception!
      try { 
        inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      double double0 = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 2047.02484053;
      doubleArray1[3] = (-173.516623944);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = 1910.5944258529378;
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1910.5944258529378;
      doubleArray2[4] = (-710.0);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 1910.5944258529378;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (-173.516623944);
      doubleArray3[5] = 1.0;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 1910.5944258529378;
      doubleArray4[1] = 1910.5944258529378;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 2047.02484053;
      doubleArray0[3] = doubleArray4;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.swapColumns(0, 1629);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 819;
      SparseMatrix.zero(819, 819, 819);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromCSV("tPZ%RFJM9m");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      Matrix matrix0 = Matrix.identity(912);
      matrix0.iteratorOfRow(653);
      // Undeclared exception!
      try { 
        matrix0.maxInColumn(Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2147483647' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 2025;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(2025);
      // Undeclared exception!
      try { 
        inPlaceCopyMatrixToMatrix0.applySimple((DenseMatrix) null, sparseMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(32, 458.0);
      rowMajorSparseMatrix0.iterator();
      assertEquals(0.03125, rowMajorSparseMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 374;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 374, 0.0);
      int int1 = 367;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.transformRow(367, vectorFunction0);
      Matrix matrix1 = Matrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      Matrix matrix2 = matrix1.add(0.0);
      matrix1.toRowMajorSparseMatrix();
      matrix2.mkString((String) null, (String) null);
      DenseMatrix denseMatrix1 = matrix1.toDenseMatrix();
      Matrix matrix3 = matrix0.insert(matrix1);
      VectorFunction vectorFunction1 = null;
      matrix1.transformRow(0, (VectorFunction) null);
      Matrix.block(matrix2, matrix3, matrix2, denseMatrix1);
      denseMatrix0.sum();
      double double0 = 1194.91;
      // Undeclared exception!
      try { 
        DenseVector.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(12, 12);
      Matrix matrix1 = matrix0.blankOfRows(29);
      Matrix matrix2 = matrix1.removeFirstColumn();
      matrix2.min();
      matrix2.min();
      matrix2.euclideanNorm();
      matrix1.rows();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.QR;
      matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      // Undeclared exception!
      try { 
        Matrix.identity((-43));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[0];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      Matrix matrix1 = matrix0.divide((-103.5));
      int int0 = (-3306);
      double double0 = 2474.17275945;
      matrix1.setColumn((-3306), 2474.17275945);
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1, (-3306), Integer.MAX_VALUE, (-3306), Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -3306x2147483647
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(3, 3);
      matrix0.toBinary();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      matrix0.toCSV(numberFormat0);
      Matrix matrix1 = matrix0.blank();
      matrix0.mkString(".>l;5c{>", ".>l;5c{>");
      matrix0.determinant();
      // Undeclared exception!
      try { 
        matrix1.is((AdvancedMatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 7;
      ColumnMajorSparseMatrix.diagonal(7, 7);
      // Undeclared exception!
      try { 
        DenseVector.fromMatrixMarket("RN[e.*CG_Oqo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
  }
}
