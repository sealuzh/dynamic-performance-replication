/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:16:10 GMT 2018
 */

package com.google.gson.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.internal.LinkedTreeMap;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinkedTreeMap_ESTest extends LinkedTreeMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      linkedTreeMap0.remove((Object) "x4eMS[_6", (Object) "x4eMS[_6");
      Set<Object> set0 = linkedTreeMap0.keySet();
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      boolean boolean0 = linkedTreeMap0.isEmpty();
      assertTrue(boolean0);
      
      linkedTreeMap0.containsValue("=");
      Set<Object> set0 = linkedTreeMap0.keySet();
      assertNotNull(set0);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      linkedTreeMap0.entrySet();
      linkedTreeMap0.put("", "");
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        linkedTreeMap0.find(object0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>();
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Object>();
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node2 = linkedTreeMap_Node1.first();
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Integer, Object>(linkedTreeMap_Node2, (Integer) null, linkedTreeMap_Node2, linkedTreeMap_Node2);
      // Undeclared exception!
      try { 
        linkedTreeMap0.removeInternal(linkedTreeMap_Node3, true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Object>();
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node2 = linkedTreeMap_Node1.first();
      Integer integer0 = new Integer(1512);
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Integer, Object>(linkedTreeMap_Node0, integer0, linkedTreeMap_Node0, linkedTreeMap_Node2);
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>();
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, true);
      assertEquals((-1), linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>(comparator0);
      Object object0 = new Object();
      linkedTreeMap0.put(object0, "");
      Integer integer0 = new Integer((-284));
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Integer> linkedTreeMap1 = new LinkedTreeMap<Object, Integer>(comparator1);
      linkedTreeMap0.remove((Object) linkedTreeMap1);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = linkedTreeMap0.find(integer0, true);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node1 = linkedTreeMap_Node0.first();
      linkedTreeMap_Node1.getValue();
      assertEquals(1, linkedTreeMap0.size());
      assertSame(linkedTreeMap_Node0, linkedTreeMap_Node1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.clear();
      linkedTreeMap_EntrySet0.iterator();
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedTreeMap<Integer, Integer> linkedTreeMap0 = new LinkedTreeMap<Integer, Integer>();
      Integer integer0 = new Integer((-434));
      Integer integer1 = new Integer((-1015));
      Integer.getInteger("");
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Integer> linkedTreeMap1 = new LinkedTreeMap<Object, Integer>(comparator0);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, String>();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, String>(linkedTreeMap_Node0, integer0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node2 = linkedTreeMap_Node1.last();
      assertNotNull(linkedTreeMap_Node2);
      
      boolean boolean0 = linkedTreeMap_EntrySet0.contains(linkedTreeMap_Node2);
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      linkedTreeMap0.find("<4l^2A5DD.~1", true);
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.computeIfPresent("<4l^2A5DD.~1", biFunction0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.size();
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>();
      try { 
        Integer.valueOf("A4dK1t_&JIy|l2pz]?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"A4dK1t_&JIy|l2pz]?\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.values();
      linkedTreeMap0.putIfAbsent(")nulMdNS +:N", ")nulMdNS +:N");
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.iterator();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet1 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet1.remove(linkedTreeMap0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.remove((Object) null);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, Integer> linkedTreeMap0 = new LinkedTreeMap<Integer, Integer>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      boolean boolean0 = linkedTreeMap_KeySet0.contains((Object) null);
      assertFalse(boolean0);
      assertEquals(0, linkedTreeMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2, (-1297), 0, 0).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.header;
      linkedTreeMap0.root = linkedTreeMap_Node0;
      Integer integer0 = new Integer(498);
      linkedTreeMap0.removeInternalByKey(integer0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.iterator();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet1 = linkedTreeMap0.new KeySet();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.merge("7", linkedTreeMap_Node0, biFunction0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet2 = linkedTreeMap0.new KeySet();
      boolean boolean0 = linkedTreeMap_KeySet2.remove(linkedTreeMap_KeySet1);
      assertEquals(1, linkedTreeMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      assertNotNull(linkedTreeMap_Node1);
      
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, String>();
      boolean boolean0 = linkedTreeMap_Node1.equals(linkedTreeMap_Node2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.putIfAbsent(")nulMdNS +:N", ")nulMdNS +:N");
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedTreeMap_KeySet0);
      Predicate<Integer> predicate1 = Predicate.isEqual((Object) ")nulMdNS +:N");
      predicate0.test(predicate1);
      predicate0.negate();
      linkedTreeMap_KeySet0.removeIf(predicate0);
      linkedTreeMap_KeySet0.iterator();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, String> linkedTreeMap0 = new LinkedTreeMap<Integer, String>(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>(comparator1);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = linkedTreeMap1.find(linkedTreeMap0, true);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      linkedTreeMap1.replaceAll(biFunction0);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, String>(linkedTreeMap_Node0, linkedTreeMap0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node2 = linkedTreeMap_Node1.first();
      linkedTreeMap0.remove((Object) linkedTreeMap_Node2);
      assertEquals(1, linkedTreeMap1.size());
      assertNotSame(linkedTreeMap_Node0, linkedTreeMap_Node2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Integer> linkedTreeMap0 = new LinkedTreeMap<Object, Integer>(comparator0);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node0 = linkedTreeMap0.header;
      Integer integer0 = new Integer((-1592));
      Object object0 = new Object();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Integer>(linkedTreeMap_Node0, object0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, Integer>();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Object, String>();
      linkedTreeMap_Node1.equals(linkedTreeMap_Node3);
      Object object1 = new Object();
      Object object2 = new Object();
      linkedTreeMap0.containsKey(linkedTreeMap_Node3);
      linkedTreeMap_Node3.toString();
      linkedTreeMap_Node0.equals((Object) null);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer.getInteger("");
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, Integer> linkedTreeMap1 = new LinkedTreeMap<Integer, Integer>(comparator2);
      Integer integer1 = new Integer(757);
      try { 
        Integer.decode("null=null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"null=null\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = linkedTreeMap0.header;
      LinkedTreeMap<Object, Integer> linkedTreeMap1 = new LinkedTreeMap<Object, Integer>();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node1 = linkedTreeMap1.header;
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node2 = linkedTreeMap_Node1.first();
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node3 = new LinkedTreeMap.Node<String, Integer>();
      Integer integer0 = linkedTreeMap_Node3.value;
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node4 = linkedTreeMap_Node1.first();
      assertNotNull(linkedTreeMap_Node4);
      
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node5 = new LinkedTreeMap.Node<Object, Integer>(linkedTreeMap_Node1, (Object) null, linkedTreeMap_Node2, linkedTreeMap_Node2);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node6 = new LinkedTreeMap.Node<Object, Integer>();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node7 = linkedTreeMap1.header;
      String string0 = linkedTreeMap1.toString();
      assertEquals("{null=null}", string0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, String> linkedTreeMap2 = new LinkedTreeMap<String, String>(comparator1);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap2.new KeySet();
      Object object3 = new Object();
      Integer integer1 = new Integer(890);
      Integer integer2 = new Integer((-1015));
      Integer.getInteger("");
      LinkedTreeMap.KeySet linkedTreeMap_KeySet1 = linkedTreeMap0.new KeySet();
      int int0 = linkedTreeMap_KeySet1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(1100);
      Object object0 = new Object();
      Integer.toUnsignedString(1100);
      LinkedTreeMap<Integer, Integer> linkedTreeMap0 = new LinkedTreeMap<Integer, Integer>();
      Integer.getInteger("");
      BiFunction<Integer, Integer, Integer> biFunction1 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.clear();
      LinkedTreeMap.Node<Integer, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Integer>();
      LinkedTreeMap.Node<Integer, Integer> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Integer, Integer>();
      Integer integer1 = new Integer(3028);
      LinkedTreeMap.Node<Integer, Integer> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Integer, Integer>(linkedTreeMap_Node1, integer1, linkedTreeMap_Node0, linkedTreeMap_Node1);
      linkedTreeMap_Node2.equals(linkedTreeMap_Node1);
      linkedTreeMap_Node2.right = linkedTreeMap_Node1;
      LinkedTreeMap.Node<Integer, Integer> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Integer, Integer>(linkedTreeMap_Node2, (Integer) null, linkedTreeMap_Node0, linkedTreeMap_Node1);
      // Undeclared exception!
      try { 
        linkedTreeMap0.removeInternal(linkedTreeMap_Node2, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1100, 1100, (-1334)).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.header;
      linkedTreeMap0.root = linkedTreeMap_Node0;
      Integer integer0 = new Integer(1510);
      linkedTreeMap0.removeInternalByKey(integer0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.merge("u", linkedTreeMap_Node0, biFunction0);
      Integer integer1 = new Integer(1510);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer1);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "u");
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      predicate0.or(predicate2);
      Object object0 = new Object();
      Predicate<Object> predicate3 = Predicate.isEqual(object0);
      Predicate.isEqual((Object) integer0);
      predicate0.test(linkedTreeMap_Node0);
      predicate3.negate();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet1 = linkedTreeMap0.new KeySet();
      Predicate<Object> predicate4 = predicate2.or(predicate1);
      linkedTreeMap_KeySet1.removeIf(predicate4);
      linkedTreeMap_KeySet1.iterator();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet2 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet2.clear();
      assertEquals(0, linkedTreeMap_KeySet2.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Object>();
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, Integer>();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Object, Integer>(linkedTreeMap_Node2, (Object) null, linkedTreeMap_Node2, linkedTreeMap_Node2);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node4 = new LinkedTreeMap.Node<Object, Integer>();
      linkedTreeMap_Node3.parent = linkedTreeMap_Node2;
      linkedTreeMap_Node3.next = linkedTreeMap_Node4;
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node5 = linkedTreeMap_Node2.last();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node6 = new LinkedTreeMap.Node<Object, Integer>();
      Integer integer0 = new Integer(3572);
      linkedTreeMap_Node2.setValue(integer0);
      LinkedTreeMap<Integer, Integer> linkedTreeMap0 = new LinkedTreeMap<Integer, Integer>((Comparator<? super Integer>) null);
      linkedTreeMap_Node1.equals(linkedTreeMap_Node5);
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>();
      // Undeclared exception!
      try { 
        linkedTreeMap1.removeInternal((LinkedTreeMap.Node<String, Object>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.find("ky ==unull", true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Integer, Object>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet1 = linkedTreeMap0.new KeySet();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedTreeMap_Node0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.and(predicate1);
      predicate0.or(predicate1);
      predicate1.negate();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.removeIf(predicate0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet2 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet2.clear();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet1.contains(linkedTreeMap_KeySet0);
      linkedTreeMap0.find("c", false);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet2 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet2.remove("c");
      LinkedTreeMap.Node<Integer, Integer> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Integer, Integer>();
      LinkedTreeMap.Node<Integer, Integer> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Integer, Integer>();
      Integer integer0 = new Integer(23);
      linkedTreeMap_Node2.setValue(integer0);
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>();
      // Undeclared exception!
      try { 
        linkedTreeMap1.findByEntry((Map.Entry<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Object>();
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, Integer>();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node3 = linkedTreeMap_Node2.first();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node4 = new LinkedTreeMap.Node<Object, Integer>();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node5 = new LinkedTreeMap.Node<Object, Integer>();
      Integer integer0 = new Integer(1237);
      linkedTreeMap_Node4.value = integer0;
      linkedTreeMap_Node4.next = linkedTreeMap_Node5;
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node6 = linkedTreeMap_Node3.last();
      linkedTreeMap_Node4.toString();
      linkedTreeMap_Node2.parent = linkedTreeMap_Node4.next;
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node7 = new LinkedTreeMap.Node<Object, Integer>(linkedTreeMap_Node4, linkedTreeMap_Node0, linkedTreeMap_Node2, linkedTreeMap_Node6);
      Integer integer1 = new Integer(0);
      linkedTreeMap_Node3.setValue(integer1);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node8 = new LinkedTreeMap.Node<String, String>();
      Map.Entry.comparingByValue();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(linkedTreeMap_Node8);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      linkedTreeMap_Node0.setValue(abstractMap_SimpleEntry0);
      LinkedTreeMap<Integer, Integer> linkedTreeMap0 = new LinkedTreeMap<Integer, Integer>((Comparator<? super Integer>) null);
      linkedTreeMap_Node1.equals(linkedTreeMap_Node6);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node9 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node10 = new LinkedTreeMap.Node<Object, Object>();
      linkedTreeMap_Node10.next = linkedTreeMap_Node9;
      Object object0 = linkedTreeMap_Node10.key;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer((-1560));
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, String> linkedTreeMap1 = new LinkedTreeMap<Integer, String>(comparator0);
      linkedTreeMap0.putIfAbsent(integer0, linkedTreeMap1);
      Object object0 = new Object();
      linkedTreeMap0.containsKey(integer0);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, String>();
      linkedTreeMap_Node0.setValue("HN#%1(y,");
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.iterator();
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.header;
      linkedTreeMap0.root = linkedTreeMap_Node0;
      Integer integer0 = new Integer(538);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.merge("", linkedTreeMap_Node0, biFunction0);
      Object object0 = new Object();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Object, Object>();
      Object object1 = linkedTreeMap_Node3.key;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedTreeMap_Node2);
      Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.removeIf(predicate1);
      linkedTreeMap0.size();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedTreeMap_Node1.first();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node4 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet1.remove("");
      try { 
        Integer.valueOf("8B,SSnkQ?|r^");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8B,SSnkQ?|r^\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(17, 17, 17, 1944, 17).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.header;
      linkedTreeMap0.root = linkedTreeMap_Node0;
      linkedTreeMap0.find("ky ==unull", true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.iterator();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet1 = linkedTreeMap0.new KeySet();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.KeySet linkedTreeMap_KeySet2 = linkedTreeMap0.new KeySet();
      BiFunction<Object, Object, Object> biFunction1 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.merge("ky ==unull", "ky ==unull", biFunction1);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet3 = linkedTreeMap0.new KeySet();
      Object object0 = new Object();
      linkedTreeMap_KeySet3.remove(object0);
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        linkedTreeMap_KeySet3.add(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1100, 1100, (-1334), (-1334), (-1334)).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.header;
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, false);
      linkedTreeMap0.root = linkedTreeMap_Node0;
      Integer integer0 = new Integer((-1334));
      linkedTreeMap0.removeInternalByKey(integer0);
      String string0 = "";
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.merge("", linkedTreeMap_Node0, biFunction0);
      Integer integer1 = new Integer((-1334));
      linkedTreeMap0.find("", true);
      linkedTreeMap0.isEmpty();
      linkedTreeMap_Node0.first();
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(17, 17, 17, 1944, 17).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.header;
      linkedTreeMap0.root = linkedTreeMap_Node0;
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = linkedTreeMap0.find("ky ==unull", true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet1 = linkedTreeMap0.new KeySet();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Integer, Object>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet2 = linkedTreeMap0.new KeySet();
      BiFunction<Object, Object, Object> biFunction1 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.merge("ky ==unull", "ky ==unull", biFunction1);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet3 = linkedTreeMap0.new KeySet();
      Object object0 = new Object();
      linkedTreeMap_KeySet3.remove(object0);
      Object object1 = new Object();
      linkedTreeMap0.removeInternal(linkedTreeMap_Node1, true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet4 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet4.clear();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.contains((Object) null);
      linkedTreeMap0.find("", false);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, Object> linkedTreeMap1 = new LinkedTreeMap<Integer, Object>(comparator1);
      Integer integer0 = new Integer(1944);
      // Undeclared exception!
      try { 
        linkedTreeMap1.put((Integer) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1100, 1100, 1100, 1100, 1510).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.header;
      linkedTreeMap0.root = linkedTreeMap_Node0;
      Integer integer0 = new Integer(1510);
      linkedTreeMap0.removeInternalByKey(integer0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.merge("u", linkedTreeMap_Node0, biFunction0);
      Integer integer1 = new Integer(1510);
      Object object0 = new Object();
      Integer.toUnsignedString(1510);
      Integer.getInteger("");
      BiFunction<Integer, Integer, Integer> biFunction1 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.find("u", true);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap0.isEmpty();
      linkedTreeMap_EntrySet0.remove((Object) null);
      linkedTreeMap_EntrySet0.retainAll(linkedTreeMap_KeySet0);
      Integer integer2 = new Integer(1100);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap_EntrySet0.contains(linkedTreeMap_Node1);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node3 = linkedTreeMap_Node2.first();
      assertNotNull(linkedTreeMap_Node3);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1061, 1061, (-1334)).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.header;
      linkedTreeMap0.root = linkedTreeMap_Node0;
      Integer integer0 = new Integer(1510);
      linkedTreeMap0.removeInternalByKey(integer0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      Integer.min(1061, (-1334));
      Integer.compareUnsigned((-2921), (-1334));
      linkedTreeMap0.find("", true);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap0.isEmpty();
      linkedTreeMap0.find("", true);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>(comparator1);
      // Undeclared exception!
      try { 
        linkedTreeMap1.removeInternal((LinkedTreeMap.Node<String, Object>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1100, 1100, (-1334), (-1334), 1510).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.header;
      linkedTreeMap0.root = linkedTreeMap_Node0;
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.merge("", linkedTreeMap_Node0, biFunction0);
      Object object0 = new Object();
      Integer integer0 = new Integer(481);
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Integer, Object>();
      LinkedTreeMap<Integer, Integer> linkedTreeMap1 = new LinkedTreeMap<Integer, Integer>();
      BiFunction<Object, Object, Integer> biFunction1 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap1.clear();
      LinkedTreeMap<Integer, Object> linkedTreeMap2 = new LinkedTreeMap<Integer, Object>();
      linkedTreeMap0.putAll(linkedTreeMap0);
      linkedTreeMap0.find("", true);
      linkedTreeMap_Node0.first();
      Object object1 = new Object();
      linkedTreeMap0.removeInternal(linkedTreeMap0.root, false);
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, Integer>();
      Integer integer1 = linkedTreeMap_Node2.setValue(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Object>();
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, Integer>();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node3 = linkedTreeMap_Node2.first();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node4 = new LinkedTreeMap.Node<Object, Integer>(linkedTreeMap_Node3, (Object) null, linkedTreeMap_Node3, linkedTreeMap_Node2);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node5 = new LinkedTreeMap.Node<Object, Integer>();
      Integer integer0 = new Integer(1237);
      Integer integer1 = linkedTreeMap_Node2.setValue(integer0);
      assertNull(integer1);
      
      Integer integer2 = new Integer(1237);
      Map.Entry.comparingByKey();
      linkedTreeMap_Node4.value = integer2;
      linkedTreeMap_Node4.next = linkedTreeMap_Node3;
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node6 = linkedTreeMap_Node3.first();
      boolean boolean0 = linkedTreeMap_Node4.equals(linkedTreeMap_Node2);
      assertTrue(boolean0);
      
      linkedTreeMap_Node2.parent = linkedTreeMap_Node4.next;
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node7 = new LinkedTreeMap.Node<Object, Integer>(linkedTreeMap_Node4, linkedTreeMap_Node0, linkedTreeMap_Node2, linkedTreeMap_Node6);
      Integer integer3 = linkedTreeMap_Node3.setValue(linkedTreeMap_Node4.value);
      assertNotNull(integer3);
      
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node8 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap<Integer, Integer> linkedTreeMap0 = new LinkedTreeMap<Integer, Integer>((Comparator<? super Integer>) null);
      boolean boolean1 = linkedTreeMap_Node1.equals(linkedTreeMap_Node6);
      assertFalse(boolean1);
      assertSame(linkedTreeMap_Node6, linkedTreeMap_Node3);
      
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node9 = new LinkedTreeMap.Node<Object, Object>();
      Object object0 = linkedTreeMap_Node9.key;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedTreeMap0);
      predicate0.negate();
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>((Comparator<? super Object>) null);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap1.new KeySet();
      int int0 = linkedTreeMap_KeySet0.size();
      assertEquals(0, int0);
      
      LinkedTreeMap<Object, Object> linkedTreeMap2 = new LinkedTreeMap<Object, Object>((Comparator<? super Object>) null);
      Set<Object> set0 = linkedTreeMap2.keySet();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer(1102);
      Integer.remainderUnsigned(1102, 1102);
      Integer integer1 = new Integer(1102);
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Object>();
      LinkedTreeMap<Integer, Integer> linkedTreeMap0 = new LinkedTreeMap<Integer, Integer>();
      linkedTreeMap0.isEmpty();
      linkedTreeMap0.modCount = 4646;
      linkedTreeMap0.clear();
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap<Integer, Object> linkedTreeMap2 = new LinkedTreeMap<Integer, Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap1.new EntrySet();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = linkedTreeMap1.find("", true);
      LinkedTreeMap<String, String> linkedTreeMap3 = new LinkedTreeMap<String, String>();
      linkedTreeMap3.put("", "@.>zoRXx=M)");
      linkedTreeMap3.findByEntry(linkedTreeMap_Node1);
      assertEquals(1, linkedTreeMap3.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, Integer> linkedTreeMap0 = new LinkedTreeMap<Integer, Integer>(comparator0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, String>();
      Object object0 = new Object();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, String>(linkedTreeMap_Node0, object0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap_Node1.equals(linkedTreeMap_Node0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>(comparator1);
      Integer integer0 = new Integer(1);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, Object>();
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer.remainderUnsigned((-1898), 3097);
      Map.Entry.comparingByValue((Comparator<? super String>) comparator2);
      Object object1 = linkedTreeMap_Node2.value;
      linkedTreeMap1.put(integer0, (Object) null);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap1.new EntrySet();
      assertEquals(1, linkedTreeMap1.size());
      
      boolean boolean0 = linkedTreeMap_EntrySet0.remove(linkedTreeMap_Node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1100, 1100, (-1334)).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.header;
      linkedTreeMap0.root = linkedTreeMap_Node0;
      Integer integer0 = new Integer(1510);
      linkedTreeMap0.removeInternalByKey(integer0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.merge("0", linkedTreeMap_Node0, biFunction0);
      Integer integer1 = new Integer(1510);
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Integer, Object>();
      LinkedTreeMap<Integer, Integer> linkedTreeMap1 = new LinkedTreeMap<Integer, Integer>();
      linkedTreeMap1.clear();
      LinkedTreeMap<String, Object> linkedTreeMap2 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap<Integer, Object> linkedTreeMap3 = new LinkedTreeMap<Integer, Object>();
      linkedTreeMap0.putAll(linkedTreeMap2);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap2.new EntrySet();
      linkedTreeMap2.isEmpty();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node3 = linkedTreeMap_Node0.first();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet1.contains(linkedTreeMap_Node1);
      linkedTreeMap2.find("0", true);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet2 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.remove(linkedTreeMap_Node3);
      LinkedTreeMap.Node<Integer, Integer> linkedTreeMap_Node4 = new LinkedTreeMap.Node<Integer, Integer>();
      int int0 = linkedTreeMap_EntrySet1.size();
      assertEquals(1, linkedTreeMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Integer integer0 = new Integer(1094);
      Integer integer1 = new Integer(1094);
      LinkedTreeMap<Integer, Integer> linkedTreeMap0 = new LinkedTreeMap<Integer, Integer>();
      linkedTreeMap0.isEmpty();
      linkedTreeMap0.clear();
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap<Integer, Object> linkedTreeMap2 = new LinkedTreeMap<Integer, Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap1.new EntrySet();
      linkedTreeMap1.isEmpty();
      linkedTreeMap1.find("", true);
      LinkedTreeMap<String, String> linkedTreeMap3 = new LinkedTreeMap<String, String>();
      linkedTreeMap3.find("=", true);
      linkedTreeMap3.containsValue(integer0);
      linkedTreeMap3.put("", "");
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap<Object, Integer> linkedTreeMap4 = new LinkedTreeMap<Object, Integer>();
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, Integer>();
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node2 = linkedTreeMap_Node1.first();
      linkedTreeMap_Node2.last();
      linkedTreeMap1.find("", true);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap4.new EntrySet();
      linkedTreeMap1.isEmpty();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, Object> linkedTreeMap5 = new LinkedTreeMap<Integer, Object>(comparator0);
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Integer, Object>();
      LinkedTreeMap<Object, Object> linkedTreeMap6 = new LinkedTreeMap<Object, Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet2 = linkedTreeMap1.new EntrySet();
      linkedTreeMap_EntrySet2.stream();
      linkedTreeMap_EntrySet2.retainAll(linkedTreeMap_EntrySet0);
      linkedTreeMap_EntrySet2.size();
      assertEquals(1, linkedTreeMap1.size());
      
      linkedTreeMap0.remove((Object) integer0);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1100, 1100, (-1371), (-1371), 1510).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.header;
      linkedTreeMap0.root = linkedTreeMap_Node0;
      Integer integer0 = Integer.valueOf(1510);
      linkedTreeMap0.removeInternalByKey(integer0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      Integer integer1 = new Integer(1510);
      LinkedTreeMap<Integer, Integer> linkedTreeMap1 = new LinkedTreeMap<Integer, Integer>();
      LinkedTreeMap<Integer, Object> linkedTreeMap2 = new LinkedTreeMap<Integer, Object>();
      linkedTreeMap0.putAll(linkedTreeMap0);
      linkedTreeMap0.find("", true);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap0.isEmpty();
      linkedTreeMap_Node0.first();
      linkedTreeMap0.find("", true);
      linkedTreeMap0.removeInternal(linkedTreeMap0.root, true);
      // Undeclared exception!
      try { 
        linkedTreeMap0.putAll(linkedTreeMap0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 1100;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1100, 1100, (-1334)).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      Integer integer0 = new Integer(1510);
      linkedTreeMap0.removeInternalByKey(integer0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer1 = new Integer(1510);
      Integer.toUnsignedString(1510);
      LinkedTreeMap<Integer, Integer> linkedTreeMap1 = new LinkedTreeMap<Integer, Integer>();
      linkedTreeMap0.find("1510", true);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.find("", true);
      BiFunction<Integer, Integer, Integer> biFunction1 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer1).when(biFunction1).apply(anyInt() , anyInt());
      linkedTreeMap1.compute(integer0, biFunction1);
      linkedTreeMap1.clear();
      linkedTreeMap0.find("u", true);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      // Undeclared exception!
      try { 
        linkedTreeMap_EntrySet0.add(linkedTreeMap_Node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>((Comparator<? super String>) null);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.header;
      Integer integer0 = new Integer(1510);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      String string0 = "";
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.merge("", "", biFunction0);
      Integer integer1 = new Integer((-1334));
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Integer, Object>();
      Comparator<Object> comparator0 = null;
      LinkedTreeMap<Integer, Object> linkedTreeMap1 = new LinkedTreeMap<Integer, Object>();
      LinkedTreeMap<Integer, Integer> linkedTreeMap2 = new LinkedTreeMap<Integer, Integer>();
      linkedTreeMap2.clear();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        linkedTreeMap0.find((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap$1", e);
      }
  }
}
