/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 03:10:02 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, Map<String, Object>> hashMap0 = new HashMap<Integer, Map<String, Object>>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>(hashMap0);
      Integer integer0 = new Integer(0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(0, 2363.6604F);
      hashMap0.put(integer0, hashMap1);
      Map<String, Object> map0 = doubleKeyMap0.remove(integer0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Integer, Map<String, Object>> hashMap1 = new HashMap<Integer, Map<String, Object>>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>(hashMap1);
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put(integer0, "us.codecraft.webmagic.utils.MultiKeyMapBase", (Object) hashMap0);
      Map<String, Object> map0 = doubleKeyMap0.remove(integer0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      doubleKeyMap0.put("$0x<*", "Aw6M,", "m$>R%oFlNoHk");
      Map<String, String> map0 = doubleKeyMap0.get("$0x<*");
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<String, String, Map<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<Object, Object>>((Map<String, Map<String, Map<Object, Object>>>) null);
      Map<Object, Object> map0 = doubleKeyMap0.remove((String) null, (String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      DoubleKeyMap<String, String, HashMap<Object, Map<Object, String>>> doubleKeyMap1 = new DoubleKeyMap<String, String, HashMap<Object, Map<Object, String>>>();
      Map<Object, Map<Object, String>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, Object, String> doubleKeyMap2 = new DoubleKeyMap<Object, Object, String>(map0);
      String string0 = doubleKeyMap2.remove((Object) doubleKeyMap1, (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Integer, Map<Object, String>, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, String>, Map<Object, String>>();
      Map<Map<Object, String>, Map<Object, String>> map0 = doubleKeyMap0.remove((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, HashMap<Object, Map<Object, String>>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Object, Map<Object, String>>>();
      Map<Object, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(map0, class0);
      Map<Object, String> map1 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-2529));
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.put((Object) integer0, (Object) "u+wria8oW", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Map<Object, String>>, Object, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Map<Object, String>>, Object, HashMap<Integer, Object>>();
      HashMap<Map<String, String>, Map<Object, HashMap<Map<Object, String>, Object>>> hashMap0 = new HashMap<Map<String, String>, Map<Object, HashMap<Map<Object, String>, Object>>>(2761);
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>();
      Integer integer0 = new Integer(2761);
      Integer integer1 = doubleKeyMap1.put((Object) hashMap0, (Object) doubleKeyMap0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Integer, Map<Object, String>, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, String>, Map<Object, String>>();
      Integer integer0 = new Integer((-1));
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Integer>();
      Integer integer1 = doubleKeyMap1.put((Object) doubleKeyMap0, integer0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Object, Map<String, Map<String, String>>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, Map<String, String>>, Object>((Map<Object, Map<Map<String, Map<String, String>>, Object>>) null);
      Map<String, Map<String, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, String, String> doubleKeyMap1 = new DoubleKeyMap<String, String, String>(map0);
      String string0 = doubleKeyMap1.get("oq!", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, HashMap<Object, Map<Object, String>>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Object, Map<Object, String>>>();
      Map<Object, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(map0, class0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      String string0 = doubleKeyMap1.get((Object) hashMap0, (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, HashMap<Object, Map<Object, String>>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Object, Map<Object, String>>>();
      Map<Object, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(map0, class0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      String string0 = doubleKeyMap1.get((Object) doubleKeyMap1, (Object) hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      Map<String, String> map0 = doubleKeyMap0.get((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Object, Map<Object, Integer>> hashMap0 = new HashMap<Object, Map<Object, Integer>>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>(hashMap0);
      Object object0 = new Object();
      Map<Object, Integer> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Map<String, String>> hashMap0 = new HashMap<String, Map<String, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((String) null, "?TG.;DT<S[QD7", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, Map<Object, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Integer, Map<Object, String>>((Map<String, Map<Integer, Map<Object, String>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Map> class0 = Map.class;
      Integer integer0 = new Integer(0);
      HashMap<String, Map<Integer, String>> hashMap0 = new HashMap<String, Map<Integer, String>>();
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>(hashMap0, class0);
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Integer>();
      Map<Integer, String> map0 = doubleKeyMap1.newMap();
      hashMap0.put("", map0);
      doubleKeyMap0.remove("", integer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Object>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, String, Integer>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put(hashMap0, (String) null, integer0);
      Integer integer1 = doubleKeyMap0.put(hashMap0, "%>Z[q8PMe0", (Integer) null);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<Object, String>, Map<Object, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Map<Object, String>, Map<Object, String>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, HashMap<Object, Map<Object, String>>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Object, Map<Object, String>>>();
      Map<Object, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(map0, class0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      String string0 = doubleKeyMap1.get((Object) null, (Object) hashMap0);
      assertNull(string0);
  }
}
