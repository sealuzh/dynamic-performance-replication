/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:19:31 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      rowMajorSparseMatrix0.toMatrixMarket();
      cRSMatrix0.iteratorOfNonZeroRows();
      Matrix matrix0 = cRSMatrix0.multiplyByItsTranspose();
      cRSMatrix0.iteratorOfNonZeroRows();
      assertTrue(cRSMatrix0.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 576;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(576, 576, (double[]) null);
      cRSMatrix0.minInRow(int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2482, 2755, 2482);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 54;
      doubleArray0[1] = (double) 2755;
      CRSMatrix.from1DArray(54, 2482, doubleArray0);
      cRSMatrix0.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3619, 3619);
      SparseMatrix.random(3619, 3619, -0.0, (Random) mockRandom0);
      cRSMatrix0.getColumn((-822));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[5];
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (-487.7714105572462), (Random) mockRandom0);
      cRSMatrix0.iteratorOfNonZeroRows();
      assertEquals(0, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (-900.758818228);
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(0, 0, doubleArray0);
      double[][] doubleArray1 = new double[4][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[0] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      Matrix.diagonal(0, 0.0);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 2428;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2428);
      cRSMatrix0.add((double) 2428);
      cRSMatrix0.determinant();
      int int1 = 2504;
      CRSMatrix cRSMatrix1 = new CRSMatrix(int0, int1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(68);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)68, (double)68, Double.NEGATIVE_INFINITY, (double)68, (double)68).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateColumn(0, vectorFunction0);
      Matrix.constant(68, 0, 68);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(0);
      cRSMatrix0.determinant();
      cRSMatrix1.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(68);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)68, 0.0, (double)68, 0.0, (double)68).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateColumn(4, vectorFunction0);
      CRSMatrix cRSMatrix1 = new CRSMatrix(68, (-2728), 4);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)30;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("F0,>O[qQ|W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(3619, 314, 851);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        SparseMatrix.random(3619, 851, (double) 851, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      MockRandom mockRandom0 = new MockRandom(88);
      // Undeclared exception!
      try { 
        SparseMatrix.random(1, 88, (-3176.9), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(0, 0, doubleArray0);
      cRSMatrix0.setAll(0.0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.update(matrixFunction0);
      CRSMatrix.zero(594, 0);
      RowMajorSparseMatrix.zero(0, 0);
      MockRandom mockRandom0 = new MockRandom(594);
      mockRandom0.nextBoolean();
      // Undeclared exception!
      try { 
        CRSMatrix.random(1102, 1656, (-1.0), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2428);
      cRSMatrix0.add((double) 2428);
      double double0 = new Integer(2428);
      CRSMatrix cRSMatrix1 = new CRSMatrix(2428, 2504, 2428);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = new CRSMatrix(3619, 3619, 3619);
      SparseMatrix sparseMatrix0 = SparseMatrix.random(3619, 3619, -0.0, (Random) mockRandom0);
      sparseMatrix0.copyOfRows(484);
      cRSMatrix0.nonZeroRowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.setAll((-2611.99));
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      CRSMatrix.zero(4, 4);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(32, 32);
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix0.copyOfShape(2, 2);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.setAll(32);
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZero((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(68);
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix0.minInRow((byte)0);
      cRSMatrix0.nonZeroAt((byte)0, (byte)0);
      CRSMatrix.diagonal(68, 68);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(68);
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix0.minInRow((byte)0);
      cRSMatrix0.nonZeroAt((byte)0, (-1316));
      CRSMatrix.diagonal((byte)0, 0.0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2178, 2178);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2178;
      doubleArray0[1] = (double) 2178;
      CRSMatrix cRSMatrix1 = new CRSMatrix(2178, 2178, 2642);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(900, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 10;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(10, 111, 111);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '112' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(5, 5, 12);
      cRSMatrix0.add((double) 12);
      cRSMatrix0.iteratorOfNonZeroRows();
      cRSMatrix0.infinityNorm();
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(8, 8);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cRSMatrix0.fold(matrixAccumulator0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = 54.0;
      doubleArray0[2] = (double) 8;
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) 8;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray((-1265), (-1265), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1265x-1265
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2178, 2178);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2178;
      cRSMatrix0.toRowMajorSparseMatrix();
      doubleArray0[1] = (double) 2178;
      double[][] doubleArray1 = new double[2][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      SparseMatrix.from2DArray(doubleArray1);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.getColumn(2642);
      CRSMatrix.from1DArray(2178, 2642, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("0.000");
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInColumn(852, vectorProcedure0);
      CRSMatrix cRSMatrix1 = null;
      try {
        cRSMatrix1 = new CRSMatrix(2477, Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(6, 0);
      CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 3;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 2020;
      doubleArray0[2] = (double) 2020;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 2020;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 2020;
      doubleArray0[7] = (double) 2020;
      doubleArray0[8] = (double) 2020;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(2020, 3, doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(int0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply((RowMajorSparseMatrix) cRSMatrix0, columnMajorSparseMatrix0);
      double double0 = Double.POSITIVE_INFINITY;
      cRSMatrix0.equals(matrix0, double0);
      cRSMatrix0.eachNonZeroInColumn(int0, vectorProcedure0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.to(matrixFactory0);
      cRSMatrix0.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(68, 68);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cRSMatrix0.toRowMajorSparseMatrix();
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      int int0 = 730;
      Matrix matrix0 = cRSMatrix1.blankOfColumns(730);
      RowMajorSparseMatrix.block(cRSMatrix0, rowMajorSparseMatrix0, cRSMatrix1, matrix0);
      double double0 = (-6316.88);
      CRSMatrix.diagonal(int0, double0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = new CRSMatrix(3619, 3619, 3619);
      int[] intArray0 = new int[1];
      intArray0[0] = 3619;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3619' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = new CRSMatrix(3619, 3619, 3619);
      SparseMatrix.random(3619, 3619, -0.0, (Random) mockRandom0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(32, 32);
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 32;
      intArray0[2] = 32;
      intArray0[3] = 32;
      cRSMatrix0.iteratorOfNonZeroRows();
      cRSMatrix0.copyOfShape(4, 32);
      CRSMatrix.diagonal(128, 4);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 68;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(68);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      cRSMatrix0.iteratorOfNonZeroRows();
      cRSMatrix0.copyOfShape(576, (byte)0);
      int int1 = 0;
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(int1, int0);
      int int2 = 0;
      CRSMatrix.random(int2, int0, (double) int1, (Random) mockRandom0);
      int int3 = 0;
      cRSMatrix1.iteratorOfRow(int3);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(68);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[20][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 8;
      doubleArray1[1] = (-6355.279);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 68;
      doubleArray2[1] = (double) 8;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 8;
      doubleArray3[1] = (double) 68;
      doubleArray0[2] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      CRSMatrix.block(denseMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      String string0 = "";
      CRSMatrix cRSMatrix1 = CRSMatrix.fromMatrixMarket(string0);
      cRSMatrix1.nonZeroRowMajorIterator();
      cRSMatrix1.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(8, (-311.1437));
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(68);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(5, 1000, (int) (byte)0);
      cRSMatrix1.multiplyByItsTranspose();
      cRSMatrix1.min();
      cRSMatrix0.minInRow(68);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 68;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(68);
      cRSMatrix0.setRow(0, 3.7508164103556996);
      int int1 = (-3505);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix0.determinant();
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(int0, int1);
      cRSMatrix2.getRow(int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 111;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(10, 111, 111);
      int int1 = 8;
      cRSMatrix0.nonZeroIteratorOfColumn(8);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(8);
      Matrix matrix0 = cRSMatrix1.copyOfShape(5, 5);
      // Undeclared exception!
      try { 
        SparseMatrix.block(matrix0, matrix0, matrix0, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.unit(2432, 2432);
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2433
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity((byte)38);
      Object object0 = new Object();
      cRSMatrix0.equals(object0);
      Matrix matrix0 = cRSMatrix0.multiplyByItsTranspose();
      matrix0.getColumn(2);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.iteratorOfNonZeroRows();
      int int0 = 2141034748;
      int int1 = (-2928);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(68, 68);
      cRSMatrix0.setRow(0, 3.7508164103556996);
      int[] intArray0 = new int[0];
      cRSMatrix0.select(intArray0, intArray0);
      cRSMatrix0.toBinary();
      cRSMatrix0.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(68);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double double0 = new Integer(68);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(103, 103, 103);
      cRSMatrix1.rotate();
      CRSMatrix cRSMatrix2 = new CRSMatrix();
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix2.minInRow(103);
      cRSMatrix2.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(68);
      cRSMatrix0.setAll((-3015.81));
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix0.iteratorOfRow(5);
      cRSMatrix0.minInRow((byte)0);
      cRSMatrix0.nonZeroAt((byte)0, (-2191));
      cRSMatrix0.toMatrixMarket();
      cRSMatrix0.updateAt(37, 352, (MatrixFunction) null);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 88;
      CRSMatrix cRSMatrix0 = new CRSMatrix(88, 88);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRow(0, vectorAccumulator0);
      double double0 = (-438.986);
      cRSMatrix0.determinant();
      CRSMatrix.diagonal(int0, double0);
      cRSMatrix0.nonZeroRowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 851;
      doubleArray0[2] = (double) 314;
      doubleArray0[3] = (double) 851;
      doubleArray0[4] = (double) 851;
      CRSMatrix cRSMatrix0 = new CRSMatrix(851, 851, 0);
      int[] intArray0 = new int[5];
      cRSMatrix0.select(intArray0, intArray0);
      cRSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1804, (-1531.1412361156258));
      int int0 = 46;
      cRSMatrix0.setRow(46, (-1531.1412361156258));
      cRSMatrix0.minInRow(int0);
      int int1 = 111;
      cRSMatrix0.nonZeroAt(int1, int1);
      double double0 = 5403.2142665832;
      CRSMatrix.diagonal(int0, double0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(68);
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix0.iteratorOfRow((byte)0);
      cRSMatrix0.minInRow((byte)0);
      cRSMatrix0.nonZeroAt((byte)0, (-2191));
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = 2;
      intArray0[2] = (-2191);
      intArray0[3] = 68;
      intArray0[4] = 5;
      intArray0[5] = 68;
      intArray0[6] = 68;
      intArray0[7] = 68;
      intArray0[8] = 68;
      cRSMatrix0.select(intArray0, intArray0);
      int int0 = 3;
      int int1 = 2834;
      CRSMatrix cRSMatrix1 = new CRSMatrix(int0, intArray0[3], int1);
      cRSMatrix1.iteratorOfNonZeroRows();
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(8, (-438.986));
      cRSMatrix1.toBinary();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(68);
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (-222.91852359), (Random) mockRandom0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      ((CRSMatrix) rowMajorSparseMatrix0).max();
      cRSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(68);
      Matrix.unit(0, 15);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 2428;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2428);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2428, (double)2428, (-2776.5511), (-2776.5511), (double)2428).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      int int1 = (-1309);
      CRSMatrix cRSMatrix1 = new CRSMatrix(int1, int0, int0);
      int int2 = 2;
      int int3 = 1593;
      CRSMatrix cRSMatrix2 = new CRSMatrix(int3, int2, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(68);
      cRSMatrix0.setRow(0, 3.7508164103556996);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(68);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.forEach(consumer0);
      cRSMatrix0.multiplyByItsTranspose();
      cRSMatrix0.nonZeroRowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(68);
      int int0 = 0;
      cRSMatrix0.setRow(0, 3.7508164103556996);
      CRSMatrix.zero(0, 0);
      cRSMatrix0.maxInRow(0);
      CRSMatrix cRSMatrix1 = new CRSMatrix(Integer.MAX_VALUE, 37, 68);
      double double0 = (-1429.6);
      CRSMatrix.diagonal(int0, double0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 2428;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2428);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      cRSMatrix0.add((double) int0);
      Integer integer0 = new Integer(int0);
      int int1 = 2504;
      CRSMatrix cRSMatrix1 = new CRSMatrix(int0, int1, int0);
      int int2 = (-1782);
      RowMajorSparseMatrix.diagonal(int2, int1);
      int int3 = (-3041);
      org.evosuite.runtime.Random.setNextRandom(int3);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2428);
      cRSMatrix0.add((double) 2428);
      Integer integer0 = new Integer(2428);
      MockRandom mockRandom0 = new MockRandom(965L);
      SparseMatrix.random(393, 4, 1.0, (Random) mockRandom0);
  }
}
