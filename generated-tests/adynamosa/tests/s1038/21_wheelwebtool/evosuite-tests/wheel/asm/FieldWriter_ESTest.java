/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 14:50:19 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-682));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-682), "Dprecated", ";qH+~gsH3hW4~)K", ";qH+~gsH3hW4~)K", (Object) null);
      ByteVector byteVector0 = classWriter0.pool;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "4uPjrZ`>n`?z67";
      classWriter0.visit((-682), 1143, ";qH+~gsH3hW4~)K", "", "", stringArray0);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-682));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-682), "Dprecated", ";qH+~gsH3hW4~)K", ";qH+~gsH3hW4~)K", (Object) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "4uPjrZ`>n`?z67";
      classWriter0.visit((-682), 1143, ";qH+~gsH3hW4~)K", "", "", stringArray0);
      int int0 = fieldWriter0.getSize();
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-688));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", "The strings must not be null", "");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2593));
      FieldVisitor fieldVisitor0 = classWriter0.visitField(960, "", "6bS%3s|l", "", "6bS%3s|l");
      // Undeclared exception!
      try { 
        fieldVisitor0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3956);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 3956, "_YdZj\"1JsZ]NO^++:A", "", "", ")dc");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter((ClassWriter) null, 1501, "b&?%>K;wW?R%@2)n6", "LocalVariableTypeTable", "double", "double");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 1119, "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "@4wWFSx(&CN`:*", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1684);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1684, "}5'!E.>mM8b1:w7", "}5'!E.>mM8b1:w7", (String) null, (Object) null);
      ByteVector byteVector0 = new ByteVector(2);
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-677));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-677), "Dprecated", ";qH+~gsH3hW4~)K", ";qH+~gsH3hW4~)K", (Object) null);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.visitAnnotation("", false);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-688));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-688), ";qH+~gsH3hW4~)K", "o", "Deprecated", "o");
      ByteVector byteVector0 = new ByteVector(2508);
      fieldWriter0.visitAnnotation("Deprecated", true);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-666));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-666), ";qH+~gsH3hW4~)K", ";qH+~gsH3hW4~)K", ";qH+~gsH3hW4~)K", ";qH+~gsH3hW4~)K");
      classWriter0.visit(49, 49, "", ";qH+~gsH3hW4~)K", "The filter must not be null", (String[]) null);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2593));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "u\"", "u\"", "", (Object) null);
      fieldWriter0.visitAnnotation("u\"", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1684);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1684, "}5'!E.>mM8b1:w7", "}5'!E.>mM8b1:w7", (String) null, (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-666));
      classWriter0.version = 49;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-666), ";qH+~gsH3hW4~)K", ";qH+~gsH3hW4~)K", ";qH+~gsH3hW4~)K", ";qH+~gsH3hW4~)K");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-666));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-666), ";qH+~gsH3hW4~)K", ";qH+~gsH3hW4~)K", ";qH+~gsH3hW4~)K", ";qH+~gsH3hW4~)K");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-677));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-677), "Dprecated", ";qH+~gsH3hW4~)K", ";qH+~gsH3hW4~)K", (Object) null);
      fieldWriter0.visitAnnotation("", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(40, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-666));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-666), ";qH+~gsH3hW4~)K", ";qH+~gsH3hW4~)K", ";qH+~gsH3hW4~)K", ";qH+~gsH3hW4~)K");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 20, ";qH+~gsH3hW4~)K", ";qH+~gsH3hW4~)K", "5r@ZIoZ8QR*$-/H", "The filter must not be null");
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1684);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1684, "}5'!E.>mM8b1:w7", "}5'!E.>mM8b1:w7", (String) null, (Object) null);
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-682));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-682), "Dprecated", ";qH+~gsH3hW4~)K", ";qH+~gsH3hW4~)K", (Object) null);
      Attribute attribute0 = new Attribute("Deprecated");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }
}
