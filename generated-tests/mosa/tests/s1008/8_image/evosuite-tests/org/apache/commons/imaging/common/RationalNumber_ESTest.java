/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:45:06 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2120.0938584);
      assertEquals(10390580, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(142.17506997709842);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("142.175", string0);
      assertEquals(23225, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      float float0 = rationalNumber0.floatValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-780.0));
      String string0 = rationalNumber0.toString();
      assertEquals((-780.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals("-780", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-142.17507));
      String string0 = rationalNumber0.toString();
      assertEquals("-5332276/37505 (-142.175)", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1.0));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-1", string0);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-142.17507));
      int int0 = rationalNumber0.intValue();
      assertEquals((-142.17506F), rationalNumber0.floatValue(), 0.01F);
      assertEquals((-142), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-0.1996723716036575));
      assertEquals((-0.19960474308300397), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(3810.82299653344);
      long long0 = rationalNumber0.longValue();
      assertEquals(95914604, rationalNumber0.numerator);
      assertEquals(3810L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, 0);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      String string0 = rationalNumber1.toString();
      assertEquals(0, rationalNumber0.numerator);
      assertEquals("Invalid rational (0/0)", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      assertEquals(2.147483647E9, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0E-8);
      assertEquals(1.0E-8, rationalNumber0.doubleValue(), 0.01);
      assertEquals(100000000, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483616552235E9);
      assertEquals(2.147483617E9, rationalNumber0.doubleValue(), 0.01);
      assertEquals(2147483617, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber.factoryMethod(2147483676L, 190L);
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(95, 2147483676L);
      assertEquals(4.377216043620347E-8, rationalNumber0.doubleValue(), 0.01);
      
      RationalNumber rationalNumber1 = RationalNumber.valueOf(2002.086);
      assertEquals(1001043, rationalNumber1.numerator);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483648L), (-2147483648L));
      rationalNumber0.doubleValue();
      String string0 = rationalNumber0.toDisplayString();
      long long0 = rationalNumber0.longValue();
      assertEquals(1L, long0);
      
      String string1 = rationalNumber0.toString();
      assertEquals(1, rationalNumber0.divisor);
      assertTrue(string1.equals((Object)string0));
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(2147483676L, 1);
      assertEquals((-2.14748362E9), rationalNumber1.doubleValue(), 0.01);
      assertEquals((-2147483620L), rationalNumber1.longValue());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483658L), (-2147483658L));
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1, (-2147483658L));
      assertEquals(4.656612894761436E-10, rationalNumber1.doubleValue(), 0.01);
      assertEquals(2147483638, rationalNumber1.divisor);
      
      int int0 = rationalNumber0.intValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483648L), (-2147483648L));
      rationalNumber0.toString();
      rationalNumber0.toDisplayString();
      rationalNumber0.doubleValue();
      rationalNumber0.toDisplayString();
      rationalNumber0.longValue();
      rationalNumber0.toString();
      RationalNumber.valueOf(0.0);
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(2147483676L, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: 2147483676, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483658L), (-2147483658L));
      RationalNumber rationalNumber1 = RationalNumber.valueOf((-2147483658L));
      assertEquals((-2.147483647E9), rationalNumber1.doubleValue(), 0.01);
      
      int int0 = rationalNumber0.intValue();
      assertEquals(1, int0);
  }
}
