/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:48:45 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.ObjectStreamConstants;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Member;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.EnclosingMethod;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-126);
      String string0 = Utility.format(36, (byte) (-126), false, '|');
      assertEquals("36", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = Utility.format(122, 122, true, 'g');
      assertEquals("122ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = Utility.replace("\"", "fJ26?.I", "\"");
      assertEquals("\"", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("omp[)V^U ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: omp[)V^U 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "impdep2";
      boolean boolean0 = Utility.isSet((byte)125, 69);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "\"";
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      assertEquals("{\"}", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("SUNT", true);
      assertEquals("short", string0);
      
      byte[] byteArray0 = new byte[5];
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "SUNT";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"SUNT\", null}", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("?gfG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `?gfG'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("]O9`X'!m`pI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]O9`X'!m`pI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("impdep2", "impdep2", "impdep2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: impdep2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = Utility.compactClassName("/Y'ib_,$", false);
      assertEquals(".Y'ib_,$", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = Utility.compactClassName("%)?|\"xS|a<80=YI");
      assertEquals("%)?|\"xS|a<80=YI", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "[^H2F\"u< XJ8) H{O'";
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals("[^H2F\"u< XJ8) H{O'", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      short short0 = Utility.searchOpcode("3returr");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("bmsk /");
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.methodSignatureReturnType("S1NT");
      try { 
        Utility.typeOfMethodSignature("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = Utility.fillup("", 27, false, 'X');
      assertEquals("XXXXXXXXXXXXXXXXXXXXXXXXXXX", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      String string0 = Utility.accessToString(47);
      assertEquals("public private protected static synchronized", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = Constants.ITEM_NAMES;
      Utility.isSet(41, 41);
      // Undeclared exception!
      try { 
        Utility.compactClassName(".RQ2DGW-QW", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = Utility.clearBit(370, 370);
      assertEquals(370, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = Member.DECLARED;
      Utility.accessToString(62, true);
      try { 
        Utility.typeOfMethodSignature("private protected static final");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: private protected static final
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-85), (-1043), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-86);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-86), (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-85);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-79), (int) (byte) (-79));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    return
         // 2:    <illegal opcode>
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      Utility.codeToString(byteArray0, constantPool0, (-2026), (int) (byte) (-79), true);
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), (int) (byte) (-71));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("CP..-K D:t0kvw");
      assertEquals("char", string0);
      
      String string1 = Utility.compactClassName("CP..-K D:t0kvw", "CP..-K D:t0kvw", false);
      assertEquals("CP..-K D:t0kvw", string1);
      
      byte byte0 = Utility.typeOfSignature("CP..-K D:t0kvw");
      assertEquals((byte)5, byte0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('4');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = Utility.compactClassName("float", "float", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = Utility.classOrInterface(909);
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utility.methodSignatureReturnType("L'O,goqkT~'/Y/@JnV&;V");
      try { 
        Utility.typeOfMethodSignature("'O,goqkT~'.Y.@JnV&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'O,goqkT~'.Y.@JnV&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = Utility.clearBit((-1041), 233);
      assertEquals((-1553), int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = Pattern.CANON_EQ;
      Utility.convertString("\n     ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("fconst_2");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = new byte[4];
      byteArray1[1] = (byte) (-104);
      byteArray1[2] = (byte) (-104);
      byteArray1[3] = (byte)48;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1625), (-1625));
      assertEquals("0:    nop\n", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('Z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-112);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("90", string0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$90", string1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Utility.searchOpcode("anewarray");
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (-962), false, 't');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Utility.getSignature("YTIA=I )Ai");
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Utility.getSignature("\t\t");
      int int0 = Pattern.CANON_EQ;
      try { 
        Utility.typeOfSignature("\t\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "Oebj}MZ^|wiU{P:7*";
      try { 
        Utility.methodSignatureReturnType("Oebj}MZ^|wiU{P:7*", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Oebj}MZ^|wiU{P:7*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Invalid signature: `");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utility.signatureToString("V");
      try { 
        Utility.typeOfSignature("void");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = "org.apache.commons.io.filefilter.NameFileFilter";
      Pattern.quote("org.apache.commons.io.filefilter.NameFileFilter");
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.codeToString(byteArray0, (ConstantPool) null, (-288), 228);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-112);
      Utility.setBit(233, 233);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 228, 228);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utility.convertString("\"");
      String string0 = Utility.convertString("\"");
      assertEquals("\\\"", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      byteArray0[3] = (byte) (-86);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-86), (int) (byte) (-86), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fstore_0
         // 1:    fstore_0
         // 2:    nop
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)69, (int) (byte)100);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)70;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1527, 69);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "YTIA=I )nAi";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-96), (int) (byte) (-96));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmpne\t\t#-24416
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.convertString("Xy.|!~Bh0_");
      try { 
        Utility.typeOfSignature("Xy.|!~Bh0_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xy.|!~Bh0_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), (int) (byte) (-80));
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
      
      String string1 = Utility.getSignature("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n");
      assertEquals("L0:;", string1);
      
      boolean boolean0 = Utility.isSet((byte) (-80), (byte) (-80));
      assertTrue(boolean0);
      
      String string2 = Utility.accessToString((int) (byte) (-80), true);
      assertEquals("final transient native abstract strictfp synthetic annotation enum", string2);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      try { 
        Utility.typeOfSignature("*lu(0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lu(0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Utility.getSignature("lstore_3");
      String string0 = "R&vJ7|4";
      try { 
        Utility.typeOfSignature("R&vJ7|4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R&vJ7|4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[12];
      stringArray0[0] = "short";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("Warning: Padding byte != 0 in ", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), (int) (byte) (-73), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")fyL<G73");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )fyL<G73
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("XLK(`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XLK(`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-112);
      Utility.setBit(241, 241);
      Utility.convertString("z,M%/cmx(T");
      try { 
        Utility.typeOfSignature("=KFPHX2>.|9e\rBS@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =KFPHX2>.|9e\rBS@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Utility.signatureToString("F*Ln~E#h");
      try { 
        Utility.typeOfSignature("(o*sKg //A'%*F+<@(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (o*sKg //A'%*F+<@(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-117), 47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    f2i
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<|'9dJ^d[hHC9)aUi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <|'9dJ^d[hHC9)aUi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("static", (String[]) null);
      assertEquals("()Lstatic;", string0);
      
      String string1 = Utility.getSignature("()Lstatic;");
      assertEquals("L()Lstatic;;", string1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = Utility.getSignature("6tL]vy");
      assertEquals("L6tL]vy;", string0);
      
      byte byte0 = Utility.typeOfSignature("L6tL]vy;");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.signatureToString("CP..-K D:t0kvw");
      String string0 = Utility.compactClassName("CP..-K D:t0kvw", "4}\")`_mUnDO>ZVZq>-", true);
      assertEquals("CP..-K D:t0kvw", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)68;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("O$e8$DHFND", string1);
      
      int int0 = Utility.setBit((-3260), 160);
      assertEquals((-3259), int0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Uno0i\"o0q'Bw`");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string2 = Utility.codeToString(byteArray0, constantPool1, (-3259), 160);
      assertEquals("0:    iastore\n1:    <illegal opcode>\n2:    iconst_0\n3:    dstore_1\n4:    fstore_3\n5:    astore_3\n6:    fstore_1\n", string2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utility.convertString(".}^cPGm;");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)72;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)72, (int) (byte)72);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[3] = (byte) (-104);
      String string0 = Constants.CONSTRUCTOR_NAME;
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2756, 183);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Utility.convertString(".}^cPGm;");
      Utility.compactClassName(".}^cPGm;", "", true);
      try { 
        Utility.typeOfSignature("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'O,=oqkT~'.Y/@JnV&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'O,=oqkT~'.Y/@JnV&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)98;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 69, (int) (byte)85);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      Utility.setBit(39, (byte)44);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("2c 00 00 00 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2c 00 00 00 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)125;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)125, (int) (byte)125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@)?p\"|^]kRER)>%");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        Utility.typeOfSignature("@)?p\"|^]kRER)>%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @)?p\"|^]kRER)>%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4_w,MN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4_w,MN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)117;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1183), 871, true);
      assertEquals("0:    lneg\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)17;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)17, (int) (byte)17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = Utility.convertString("-ignature");
      assertEquals("-ignature", string0);
      
      byte byte0 = Utility.typeOfSignature("[I[[xFUnR;Q(BUV");
      assertEquals((byte)13, byte0);
      
      String string1 = Utility.classOrInterface(1377);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      try { 
        Utility.typeOfSignature("AXb[.d_HWp=>*Q|,[b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AXb[.d_HWp=>*Q|,[b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "Y}:";
      try { 
        Utility.typeOfSignature("Y}:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y}:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+W9!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W9!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.methodSignatureReturnType("SL'T", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 77, (int) (byte)91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 169, (int) (byte)8, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      try { 
        Utility.typeOfSignature("Ec");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ec
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-55);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("00 c9 00 00 00 00 00 00 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 00 c9 00 00 00 00 00 00 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-126);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-126), 1647);
      assertEquals("0:    ixor\n", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = Utility.getSignature("java.lang.");
      assertEquals("Ljava/lang/;", string0);
      
      byte byte0 = Utility.typeOfSignature("JYH5d.@T>");
      assertEquals((byte)11, byte0);
      
      String string1 = Utility.classOrInterface((-824));
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Utility.methodSignatureReturnType("SUNT", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[0] = (byte)4;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)10;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-4562), (int) (byte)10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iconst_1
         // 1:    nop
         // 2:    nop
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(kU(3TSBdO{Y!ouO`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (kU(3TSBdO{Y!ouO`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("S1NT");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("S1NT", true);
      assertEquals("short", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)0;
      byteArray0[1] = (byte)44;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3158), 197);
      assertEquals("0:    nop\n1:    aload_2\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string1);
      
      String string2 = Utility.convertString("S1NT");
      assertEquals("S1NT", string2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.searchOpcode("\\");
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("14>x6?k4&&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 14>x6?k4&&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "6tL]vy";
      Utility.getSignature("6tL]vy");
      Utility.signatureToString("L6tL]vy;", true);
      try { 
        Utility.methodSignatureReturnType("GZdwJS7[", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GZdwJS7['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Utility.signatureToString("CP..-K D:t0kvw");
      try { 
        Utility.typeOfSignature(";xu<HcK4AI`j?EB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;xu<HcK4AI`j?EB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)98;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("62 00 62 62 62");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 62 00 62 62 62
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)64;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)64, 224);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)114;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 222, 222);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)47, (int) (byte)47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "short");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)84;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-4562), (int) (byte)49);
      assertEquals("0:    daload\n1:    bastore\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)48;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-737), (-1933145889), false);
      assertEquals("0:    astore_0\n1:    faload\n", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)94;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 11, 169);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utility.convertString("invokestatic");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-125);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)79, (int) (byte) (-125), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.signatureToString("V(WucbUwP+$ltI^n '");
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[1] = (byte)11;
      String string0 = Constants.CONSTRUCTOR_NAME;
      try { 
        Utility.typeOfSignature("71@[]&[qv*8.H?Dh<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 71@[]&[qv*8.H?Dh<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("N',G:,'krK#Y!-,9y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N',G:,'krK#Y!-,9y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)117;
      byte byte0 = Utility.typeOfSignature("Fx^");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Utility.setBit(195, 454);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 809, (int) (byte)36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)92;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)92, (int) (byte)92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-72);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 21, (int) (byte) (-72));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Utility.getSignature("6tL]vy");
      Utility.signatureToString("L6tL]vy;", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16384, 99);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.getSignature("6tL]vy");
      Utility.signatureToString("L6tL]vy;", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 163, (int) (byte) (-97));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Utility.getSignature("fmbGLQk?o");
      Utility.signatureToString("LfmbGLQk?o;", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)104;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)74, (int) (byte)105, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Utility.getSignature("6tL]vy");
      Utility.signatureToString("L6tL]vy;", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)74;
      byteArray0[4] = (byte)90;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)74, (int) (byte)79, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Utility.convertString("Invalid signature: `");
      String string0 = Constants.ILLEGAL_TYPE;
      try { 
        Utility.typeOfSignature(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        Utility.typeOfSignature("QMR2(,I/Lqo2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QMR2(,I/Lqo2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-U->z@{[j, P@=s_";
      String string0 = "NO?";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("NO?", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[j, P@=s_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "boolean";
      stringArray0[1] = "]O9X'!m`pI";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[]", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = Utility.classOrInterface((-700));
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)3;
      byteArray0[6] = (byte) (-116);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("x$97$97_$D$A$8c", string1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte byte0 = Utility.typeOfSignature("B#(y&|IS7?");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)97, 62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-55);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-79), (-2026), true);
      assertEquals("0:    nop\n1:    return\n2:    return\n3:    jsr_w\t\t#3\n", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Op:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Op:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-104), (int) (byte)48);
      assertEquals("0:    faload\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)108;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)95, (int) (byte)108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Utility.signatureToString("CP..-K D:t0kvw");
      Utility.compactClassName("CP..-K D:t0kvw", "4}\")`_mUnDO>ZVZq>-", true);
      Utility.searchOpcode("4}\")`_mUnDO>ZVZq>-");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte) (-40);
      byteArray0[8] = (byte) (-30);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1522, (int) (byte) (-30));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 247, (int) (byte) (-116));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)23;
      byteArray0[3] = (byte) (-128);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 3626);
      assertEquals("0:    nop\n1:    fload\t\t%0\n3:    ior\n4:    nop\n5:    nop\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "Invalid signature: `";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Invalid signature: `";
      String string1 = Utility.convertString("Invalid signature: `");
      assertEquals("Invalid signature: `", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)96;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)76, (int) (byte)96);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-74);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-74), (int) (byte) (-74));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      try { 
        Utility.typeOfSignature("K>)MwkhH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K>)MwkhH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("[^H2F\"u< XJ8) H{O'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `^H2F\"u< XJ8) H{O''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = Pattern.LITERAL;
      assertEquals(16, int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-101);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 16);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    iflt\t\t#0\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.getSignature("0:    iflt\t\t#0\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n");
      assertEquals("L0:;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-73);
      try { 
        Utility.typeOfSignature("8&%PV%NwmU|JkY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8&%PV%NwmU|JkY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = Utility.decode("$A$A$A$A$A$A$A$A", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      try { 
        Utility.typeOfSignature("$A$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $A$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = Pattern.CANON_EQ;
      assertEquals(128, int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-93);
      try { 
        Utility.typeOfSignature(":HD@;gl#CY%;0k@e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :HD@;gl#CY%;0k@e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = Utility.signatureToString("ITIA=I )nAi");
      assertEquals("int", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      try { 
        Utility.typeOfSignature("ND(5Ge\"H[tY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ND(5Ge\"H[tY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("SL'T", true);
      assertEquals("short", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-63);
      try { 
        Utility.typeOfSignature("Mz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Mz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[3] = (byte) (-104);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1673, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)98;
      byte byte0 = Utility.typeOfSignature("Z}`Cr3G");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)62;
      byte byte0 = (byte)92;
      byteArray0[2] = (byte)92;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)62, (-1103));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "sND(,5bGe\"H[tY";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)48, 378);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      short short0 = Constants.FREM;
      assertEquals((short)114, short0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)55;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (short)114, (int) (byte)28, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = Pattern.CANON_EQ;
      assertEquals(128, int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-93), (int) (byte) (-93));
      assertEquals(0, constantPool1.getLength());
      assertEquals("0:    if_icmpgt\t\t#-23808\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertNotSame(constantPool1, constantPool0);
      assertArrayEquals(new byte[] {(byte) (-93), (byte) (-93), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "short";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)84;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 74, (-326));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-165), (-165), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertEquals("<illegal opcode>", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("UnreachablX default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UnreachablX default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = Utility.signatureToString("CP..-K D:t0kvw");
      assertEquals("char", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)36;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)72;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 191, (int) (byte)51);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)18;
      byteArray0[1] = (byte)66;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)66, (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)62;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-136), 2461);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    ireturn\n1:    istore_3\n2:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-84), (byte)62, (byte)0}, byteArray0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-84), (byte)62, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = Utility.setBit(233, 233);
      assertEquals(745, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)26;
      byteArray0[0] = (byte)26;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 127, 109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 912, (int) (byte)122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-77);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 69, (int) (byte) (-77));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = Utility.compactClassName("d'HU,", "N|)>U}l", true);
      assertEquals("d'HU,", string0);
      assertNotNull(string0);
      
      short short0 = Utility.searchOpcode("d'HU,");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)9;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)9, (int) (byte) (-30));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("YTIA=I )nAi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YTIA=I )nAi'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-32), (int) (byte) (-32));
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    aaload\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)50, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-126);
      byteArray0[7] = (byte) (-6);
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte) (-126);
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte) (-4);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1633), (-463));
      assertEquals("0:    ladd\n1:    ixor\n2:    nop\n3:    <illegal opcode>\n4:    ixor\n5:    nop\n6:    istore_1\n7:    iaload\n8:    <illegal opcode>\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)97, (byte) (-126), (byte)0, (byte) (-50), (byte) (-126), (byte)0, (byte)60, (byte)46, (byte) (-4)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      Constant[] constantArray0 = new Constant[12];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(12, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)23;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 36, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)76, (int) (byte) (-105));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-80), (int) (byte) (-80));
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    areturn\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-80)}, byteArray0);
      
      String string1 = Utility.getSignature("0:    areturn\n");
      assertEquals("L0:;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte byte0 = Constants.T_REFERENCE;
      assertEquals((byte)14, byte0);
      
      String string2 = Utility.printArray((Object[]) null, false);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), (int) (byte) (-105));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("CP..-K D:t0kvw");
      assertEquals("char", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[2];
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)111;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)111, (int) (byte)111);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-30);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-109), 2189, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[2] = (byte)98;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)98, 193);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-123);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 18, (int) (byte) (-123), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      try { 
        Utility.typeOfSignature("!dYMtA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dYMtA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)43;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3846, (int) (byte)32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-111);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("91", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-111)}, byteArray0);
      
      try { 
        Utility.typeOfSignature("91");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 91
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-784), (-494));
      assertEquals("0:    lload_3\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)33, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-102);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1756), (-1756));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)82;
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte)31;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-82), (int) (byte)82);
      assertEquals(0, constantPool1.getLength());
      assertEquals("0:    dastore\n1:    dastore\n2:    dastore\n3:    nop\n4:    nop\n5:    freturn\n6:    lload_1\n7:    nop\n8:    nop\n9:    nop\n", string0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertNotSame(constantPool1, constantPool0);
      assertArrayEquals(new byte[] {(byte)82, (byte)82, (byte)82, (byte)0, (byte)0, (byte) (-82), (byte)31, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)1;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1394), (int) (byte)32);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    lload_2\n1:    aconst_null\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)32, (byte)1, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte byte0 = ElementValue.CLASS;
      assertEquals((byte)99, byte0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte) (-82);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 113, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      short short0 = Constants.FREM;
      assertEquals((short)114, short0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1), (int) (byte)28);
      assertEquals("0:    iload_2\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("V(WucbUwP+$ltI^n '", true);
      assertEquals("void", string0);
      assertNotNull(string0);
      
      String string1 = Utility.classOrInterface((-700));
      assertEquals("class", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)45;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)45, (int) (byte)94);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)31;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-106));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = Utility.getSignature("+");
      assertEquals("L+;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.signatureToString("Invalid signature: ", true);
      assertEquals("int", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-99);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-99), 2407);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iload_2
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 182, 182);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 32, (int) (byte) (-89));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = ")=\\]y5fAR";
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)16;
      byteArray0[7] = (byte) (-16);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 110, (int) (byte)16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-78);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-78), (int) (byte) (-78));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = Utility.compactClassName(".}cGm;", "", true);
      assertEquals(".}cGm;", string0);
      assertNotNull(string0);
      
      try { 
        Utility.methodSignatureReturnType("The fileEs must not Je null", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The fileEs must not Je null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-57);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-57), (int) (byte) (-80));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    areturn
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int int0 = Utility.setBit(233, 233);
      assertEquals(745, int0);
      
      String string0 = "H?r[`p`5:HiavK{";
      try { 
        Utility.typeOfSignature("H?r[`p`5:HiavK{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H?r[`p`5:HiavK{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-102);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-102), (int) (byte) (-102));
      assertEquals("0:    nop\n1:    ifne\t\t#1\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-102), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.methodSignatureReturnType("Utd9?K]FLGM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Utd9?K]FLGM'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-124);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2144), (-2144));
      assertEquals("0:    iinc\t\t%0\t0\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-124), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = Utility.convertString("boolean");
      assertEquals("boolean", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-21);
      try { 
        Utility.methodSignatureReturnType("Exception while looking for class ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Exception while looking for class '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)38;
      byteArray1[1] = (byte)70;
      byteArray1[2] = (byte)70;
      byteArray1[3] = (byte)70;
      byteArray1[4] = (byte)70;
      byteArray1[5] = (byte)70;
      byteArray1[6] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteSequence0, (byte)70);
      assertEquals(0, byteSequence0.getIndex());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertEquals(0, byteSequence0.getIndex());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      assertEquals(8, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(constantPool0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(8, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 101, 485);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-67);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-67), (int) (byte) (-67));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)82, (int) (byte)82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-105);
      String string0 = "G6,3qV?wL,Vn";
      try { 
        Utility.typeOfSignature("G6,3qV?wL,Vn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G6,3qV?wL,Vn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)57;
      byteArray0[4] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)13, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-32);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("2$e0$A$A$A$A", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)50, (byte) (-32), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.decode("2$e0$A$A$A$A", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "short");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte)45;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-869), 178);
      assertEquals("0:    aload_3\n1:    aload_3\n2:    aload_3\n3:    aload_3\n4:    aload_3\n5:    aload_3\n6:    fneg\n7:    aload_3\n8:    aload_3\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)45, (byte)45, (byte)45, (byte)45, (byte)118, (byte)45, (byte)45}, byteArray0);
      
      byte byte0 = Constants.ATTR_UNKNOWN;
      assertEquals((byte) (-1), byte0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)118;
      byteArray1[2] = (byte)118;
      String string1 = Utility.encode(byteArray1, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)118, (byte)118}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte) (-35);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 90, 90);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5|8|n3&@@v$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5|8|n3&@@v$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-96);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-42), (int) (byte)70);
      assertEquals("0:    fstore_3\n1:    <illegal opcode>\n2:    fstore_2\n3:    fstore_0\n4:    fstore_3\n5:    if_icmpne\t\t#5\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)70, (byte) (-42), (byte)69, (byte)67, (byte)70, (byte) (-96), (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.convertString("char");
      assertEquals("char", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.convertString("0:    fstore_3\n1:    <illegal opcode>\n2:    fstore_2\n3:    fstore_0\n4:    fstore_3\n5:    if_icmpne\t\t#5\n");
      assertEquals("0:    fstore_3\\n1:    <illegal opcode>\\n2:    fstore_2\\n3:    fstore_0\\n4:    fstore_3\\n5:    if_icmpne\t\t#5\\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)70, (byte) (-42), (byte)69, (byte)67, (byte)70, (byte) (-96), (byte)0, (byte)0}, byteArray0);
      
      String string3 = Utility.methodSignatureReturnType("D:@(_>3m%}-ZH23{", true);
      assertEquals("double", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)94;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, (-1753));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("YTIA=I )nAi");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("YTIA=I )nAi", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      constantArray0[0] = (Constant) constantUtf8_0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)98, (byte) (-65), (byte) (-65), (byte) (-111), (byte) (-65), (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 3690, 192);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte byte0 = (byte)74;
      boolean boolean0 = true;
      String string0 = Utility.compactClassName(".}^cPGm;", "G", true);
      assertEquals(".}^cPGm;", string0);
      assertNotNull(string0);
      
      try { 
        Utility.methodSignatureReturnType("H^'", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H^''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = Utility.getSignature("\t\t");
      assertEquals("L;", string0);
      assertNotNull(string0);
      
      int int0 = Pattern.CANON_EQ;
      assertEquals(128, int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)58;
      byteArray1[1] = (byte)64;
      byteArray1[2] = (byte) (-79);
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (-2053), (int) (byte)64, true);
      assertEquals("0:    astore\t\t%64\n2:    return\n", string1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)58, (byte)64, (byte) (-79)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-13);
      String string0 = "-";
      String string1 = Utility.getSignature("-");
      assertEquals("L-;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature("-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("3CS3Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3CS3Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)116;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 256, (int) (byte)79);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)61;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-109), 32);
      assertEquals("0:    lastore\n1:    aastore\n2:    i2s\n3:    caload\n4:    istore_2\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)80, (byte)83, (byte) (-109), (byte)52, (byte)61}, byteArray0);
      
      try { 
        Utility.typeOfSignature(", ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-81);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-104), (int) (byte) (-32));
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    aaload\n1:    <illegal opcode>\n2:    dcmpg\n3:    dreturn\n4:    nop\n5:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)50, (byte) (-32), (byte) (-104), (byte) (-81), (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)59, 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-106);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-52), (int) (byte) (-52));
      assertEquals("0:    <illegal opcode>\n1:    fcmpg\n2:    nop\n3:    nop\n4:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-52), (byte) (-106), (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)86;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)86, (int) (byte) (-126));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-94), (-2573));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)37;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)37, 65536);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = Utility.classOrInterface((-700));
      assertEquals("class", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-57);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 432, (-903), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[4] = (byte)32;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte) (-82);
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte) (-82);
      byteArray1[4] = (byte)32;
      byteArray1[5] = (byte)35;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 13, (-2010));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1625), (int) (byte)80);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    lastore\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)80}, byteArray0);
      
      byte byte0 = Utility.typeOfSignature("The fileEs must not Je null");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)22;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)22, (int) (byte)28);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-110);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 912, (int) (byte) (-110));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertEquals("<illegal opcode>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-98);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-91), (int) (byte) (-98));
      assertEquals("0:    ifle\t\t#0\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string2 = "-V;p]TL+?uHmm`";
      try { 
        Utility.decode("-V;p]TL+?uHmm`", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("]O9X'!m`pI");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("]O9X'!m`pI", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantUtf8_0;
      // Undeclared exception!
      try { 
        Utility.signatureToString("LZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("YTIA=I )nAi");
      assertEquals("YTIA=I )nAi", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)103, (int) (byte)103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        Utility.signatureToString("W~=Pdom,", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W~=Pdom,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = Utility.getSignature("fmbGLQk?o");
      assertEquals("LfmbGLQk?o;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)104;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)104, (-2817));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      int int0 = Utility.setBit((-1933), 176);
      assertEquals((-1933), int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-90);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3324), (-1933), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      int int0 = Utility.setBit(195, 454);
      assertEquals(195, int0);
      
      try { 
        Utility.typeOfSignature("&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)88;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)79, (int) (byte)88, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)18, (int) (byte)18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = Utility.convertString(".}^cPGm;");
      assertEquals(".}^cPGm;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName(".}^cPGm;", "", true);
      assertEquals(".}^cPGm;", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)41;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)71, 207);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)28;
      byteArray0[3] = (byte) (-128);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 3626);
      assertEquals("0:    nop\n1:    iload_2\n2:    nop\n3:    ior\n4:    nop\n5:    nop\n6:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)28, (byte)0, (byte) (-128), (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = "PI|]>nUT0(+";
      // Undeclared exception!
      try { 
        Utility.signatureToString("PI|]>nUT0(+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PI|]>nUT0(+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = Utility.convertString(".}^cPGm;");
      assertEquals(".}^cPGm;", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte) (-9);
      byteArray0[7] = (byte)96;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 800, (-27));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("CP..-K D:t0kvw");
      assertEquals("char", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)111, (int) (byte)111);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)61;
      byteArray0[7] = (byte)52;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)21, (int) (byte)52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("CP..-K D:t0kvw");
      assertEquals("char", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)42, (byte)11, (byte) (-55), (byte)42, (byte)58}, byteArray0);
      
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(705415466, constantInteger0.getBytes());
      assertNotNull(constantInteger0);
      assertArrayEquals(new byte[] {(byte)42, (byte)11, (byte) (-55), (byte)42, (byte)58}, byteArray0);
      
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantInteger0;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)42, (byte)11, (byte) (-55), (byte)42, (byte)58}, byteArray0);
      
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger0;
      constantArray0[3] = (Constant) constantInteger0;
      ConstantClass constantClass0 = new ConstantClass((byte)11);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(11, constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      constantArray0[4] = (Constant) constantClass0;
      constantArray0[5] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(6, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      BCELComparator bCELComparator0 = Field.getComparator();
      assertNotNull(bCELComparator0);
      
      BCELComparator bCELComparator1 = JavaClass.getComparator();
      assertFalse(bCELComparator1.equals((Object)bCELComparator0));
      assertNotNull(bCELComparator1);
      
      Constant.setComparator(bCELComparator1);
      assertFalse(bCELComparator1.equals((Object)bCELComparator0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)11, (-589));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-71);
      try { 
        Utility.typeOfSignature("%7k^e;3-9TSW3MCn^B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %7k^e;3-9TSW3MCn^B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Utility", false);
      assertNotNull(byteArray0);
      
      String string0 = "bcel.maxcached.size";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "LFjEnmb_$Bz?>w<>K;V", "static", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 213, (int) (byte) (-95));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-81);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-81), 3215, false);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    iload_1\n1:    <illegal opcode>\n2:    dcmpg\n3:    dreturn\n4:    nop\n5:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)27, (byte) (-32), (byte) (-104), (byte) (-81), (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-114);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-117), 47);
      assertEquals("0:    f2i\n1:    d2i\n2:    nop\n3:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-117), (byte) (-114), (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "Invalid signature: `";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Invalid signature: `";
      String string1 = Utility.convertString("Invalid signature: `");
      assertEquals("Invalid signature: `", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)89;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)76, (int) (byte)89);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte byte0 = (byte)1;
      try { 
        Utility.typeOfSignature("#AFlUOlK{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #AFlUOlK{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[10];
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-543), 935);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.compactClassName("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n", "athrow", false);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.methodSignatureReturnType("JGvD.;leSUrk");
      assertEquals("long", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      int int0 = (-539);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-106);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5253, (int) (byte) (-106));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      String string1 = Utility.methodSignatureReturnType("[Be/@fRFHtj");
      assertEquals("byte[]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("D}");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)114;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)114, (int) (byte)41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)40;
      byteArray0[0] = (byte)40;
      int int0 = 67;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 67, 67);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-122);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-122), 7);
      assertEquals("0:    dup2_x2\n1:    i2f\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)94, (byte) (-122)}, byteArray0);
      
      String string1 = Utility.getSignature(".)vpPQ+=jd");
      assertEquals("L/)vpPQ+=jd;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-80);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-80);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 4, (int) (byte) (-80));
      assertEquals("5:    nop\n6:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-80), (byte)0, (byte)56, (byte) (-80), (byte) (-80), (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.getSignature("5:    nop\n6:    nop\n");
      assertEquals("L5:;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)28;
      byteArray0[3] = (byte)112;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 3626);
      assertEquals("0:    nop\n1:    iload_2\n2:    nop\n3:    irem\n4:    nop\n5:    nop\n6:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)28, (byte)0, (byte)112, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-58);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-58), (int) (byte) (-58));
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    ifnull\t\t#0\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("YTIA=I )nAi");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("YTIA=I )nAi", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      constantArray0[0] = (Constant) constantUtf8_0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-65);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-65), (int) (byte) (-65));
      assertEquals(2, constantPool0.getLength());
      assertEquals("0:    fadd\n1:    athrow\n2:    athrow\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)98, (byte) (-65), (byte) (-65), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      int int0 = Pattern.CANON_EQ;
      assertEquals(128, int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-114);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-3691), (int) (byte) (-101));
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    lor\n1:    d2i\n2:    d2i\n3:    d2i\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-127), (byte) (-114), (byte) (-114), (byte) (-114)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "sND(,5bGe\"H[tY";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-61), (int) (byte) (-63));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    monitorexit
         // 1:    goto_w\t\t#-1046242377
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-41);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 45, 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = Utility.convertString("'O,=oqkT~'.Y/@JnV&");
      assertEquals("\\'O,=oqkT~\\'.Y/@JnV&", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 993, 255);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = Utility.convertString("\n     ");
      assertEquals("\\n     ", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-85), (byte)95}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("f2d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-85), (byte)95}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.typeOfSignature("PWZGu?%2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PWZGu?%2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte) (-58);
      byteArray0[8] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)72, (byte)56, (byte)44, (byte)99, (byte) (-110), (byte)105, (byte) (-64), (byte) (-58), (byte)113}, byteArray0);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      assertEquals(8, byteSequence0.getIndex());
      assertEquals(8.225779844916474E39, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertNotNull(constantDouble0);
      assertArrayEquals(new byte[] {(byte)72, (byte)56, (byte)44, (byte)99, (byte) (-110), (byte)105, (byte) (-64), (byte) (-58), (byte)113}, byteArray0);
      
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      assertEquals(8, byteSequence0.getIndex());
      assertEquals(8.225779844916474E39, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(8.225779844916474E39, constantDouble1.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      assertNotNull(constantDouble1);
      assertArrayEquals(new byte[] {(byte)72, (byte)56, (byte)44, (byte)99, (byte) (-110), (byte)105, (byte) (-64), (byte) (-58), (byte)113}, byteArray0);
      
      constantArray0[0] = (Constant) constantDouble1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)99, 255);
      assertEquals(99, constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(255, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertNotNull(constantInterfaceMethodref0);
      
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)44, (byte) (-64));
      assertEquals((-64), constantMethodref0.getNameAndTypeIndex());
      assertEquals(44, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertNotNull(constantMethodref0);
      
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-58));
      assertEquals((-58.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertNotNull(constantFloat0);
      
      constantArray0[3] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertEquals(9, byteSequence0.getIndex());
      assertEquals("lrem", string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertArrayEquals(new byte[] {(byte)72, (byte)56, (byte)44, (byte)99, (byte) (-110), (byte)105, (byte) (-64), (byte) (-58), (byte)113}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-63), (int) (byte) (-63));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = ElementValue.ANNOTATION;
      assertEquals((byte)64, byte0);
      
      try { 
        Utility.methodSignatureReturnType("Mw!PTQ|nSLY!B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Mw!PTQ|nSLY!B'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)69, 189);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-73);
      ConstantPool constantPool0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)85;
      byteArray1[1] = (byte) (-73);
      byteArray1[2] = (byte) (-73);
      byteArray1[3] = (byte) (-73);
      byteArray1[4] = (byte) (-73);
      byteArray1[5] = (byte) (-73);
      byteArray1[6] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-73), 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)124;
      int int0 = 237;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 237, 237);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte) (-9);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("'O,=oqkT~'.Y/@JnV&");
      assertEquals("'O,=oqkT~'.Y/@JnV&", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      assertEquals("'O,=oqkT~'.Y/@JnV&", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("'O,=oqkT~'.Y/@JnV&", constantUtf8_1.getBytes());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-607), (int) (byte)63);
      assertEquals(1, constantPool0.getLength());
      assertEquals("0:    <illegal opcode>\n1:    lreturn\n2:    if_acmpne\t\t#-29368\n5:    nop\n6:    lstore_0\n7:    <illegal opcode>\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-4), (byte) (-83), (byte) (-90), (byte) (-115), (byte)70, (byte)0, (byte)63, (byte) (-9)}, byteArray0);
      
      String string1 = Utility.getSignature(":");
      assertEquals("L:;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "sND(,5bGe\"H[tY";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)126;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-63), 177, false);
      assertEquals(0, constantPool1.getLength());
      assertEquals("0:    fmul\n1:    lstore_3\n2:    iand\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n", string0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertNotSame(constantPool1, constantPool0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = Utility.convertString("_ K(II=g/=b !D[_j");
      assertEquals("_ K(II=g/=b !D[_j", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)126;
      byteArray0[7] = (byte)119;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)60, (int) (byte)126);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)110;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-381), (-539));
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    fdiv\n4:    nop\n5:    nop\n6:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)110, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1434), (int) (byte)110);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    fdiv\n4:    nop\n5:    nop\n6:    nop\n", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)110, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-102);
      String string0 = Utility.getSignature("K8^LR3m.';>Q");
      assertEquals("LK8^LR3m/';>Q;", string0);
      assertNotNull(string0);
      
      try { 
        Utility.methodSignatureReturnType("K8^LR3m.';>Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K8^LR3m.';>Q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      int int0 = Pattern.CASE_INSENSITIVE;
      assertEquals(2, int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-122);
      byteArray0[8] = (byte) (-122);
      String string0 = Utility.codeToString(byteArray0, constantPool0, 0, 2950);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    i2f\n1:    lstore_0\n2:    i2f\n3:    i2f\n4:    l2i\n5:    i2f\n6:    i2f\n7:    i2f\n8:    i2f\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-122), (byte)63, (byte) (-122), (byte) (-122), (byte) (-120), (byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122)}, byteArray0);
      
      String string1 = Utility.getSignature("");
      assertEquals("L;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("CP..-K D:t0kvw");
      assertEquals("char", string0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("CP..-K D:t0kvw", ",CyCN.W7)#W", false);
      assertEquals("CP..-K D:t0kvw", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      short short0 = Constants.FREM;
      assertEquals((short)114, short0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)55;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-92);
      byteArray1[1] = (byte)55;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 49, 105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      int int0 = Utility.setBit(3384, 3384);
      assertEquals(16780600, int0);
      
      boolean boolean0 = true;
      String string0 = Utility.compactClassName(">R5?S>`zz+l:$!f68", true);
      assertEquals(">R5?S>`zz+l:$!f68", string0);
      assertNotNull(string0);
      
      String string1 = Utility.replace(">R5?S>`zz+l:$!f68", ">R5?S>`zz+l:$!f68", ">R5?S>`zz+l:$!f68");
      assertEquals(">R5?S>`zz+l:$!f68", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.decode(">R5?S>`zz+l:$!f68", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      int int0 = Pattern.CANON_EQ;
      assertEquals(128, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte) (-103);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 185, 1411);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "sND(,5bGe\"H[tY";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)66;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)106, (int) (byte)66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)82;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-89);
      byte byte0 = (byte)6;
      byteArray0[3] = (byte)6;
      byte byte1 = (byte) (-94);
      byteArray0[4] = (byte) (-94);
      byte byte2 = (byte) (-6);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte)105;
      byte byte3 = (byte)114;
      byteArray0[7] = (byte)114;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 34, 200);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "sND(,5bGe\"H[tY";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-2852), 54);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    imul
         // 1:    ishl
         // 2:    iastore
         // 3:    ladd
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
