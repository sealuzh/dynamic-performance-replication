/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:11:00 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.MnCross;
import org.freehep.math.minuit.MnFunctionCross;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserCovariance;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnFunctionCross_ESTest extends MnFunctionCross_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2260.4196986039465, 2260.4196986039465, 858.1668612843049, 858.1668612843049, 2260.4196986039465).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserCovariance0.toString();
      MnUserParameterState mnUserParameterState1 = mnUserParameterState0.clone();
      MnStrategy mnStrategy1 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState1, 858.1668612843049, mnStrategy0, (-432.47242581));
      mnStrategy1.setHessianG2Tolerance(858.1668612843049);
      int[] intArray0 = new int[2];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1296.51466, 90);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2260.4196986039465, 2260.4196986039465, 876.0, 876.0, 2260.4196986039465).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHessianG2Tolerance(98.205612754);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2033.3, mnStrategy0, 0.05);
      mnStrategy0.setMediumStrategy();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1, 1);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-0.1), 2145892505);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.clone();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnStrategy mnStrategy1 = new MnStrategy();
      mnStrategy0.setHessianG2Tolerance(790.1);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-268.809496045), (-268.809496045), 790.1, 790.1).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState1, 790.1, mnStrategy1, (-1199.81777));
      mnStrategy0.setHessianG2Tolerance(790.1);
      mnStrategy1.setGradientNCycles(2126429886);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      mnUserParameterState1.toString();
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 6.91232600600109, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.clone();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnStrategy mnStrategy1 = new MnStrategy();
      mnStrategy0.setHessianG2Tolerance((-897.367));
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-268.809496045), (-268.809496045), (-1248.39082), (-897.367)).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState1, (-897.367), mnStrategy1, (-1199.81777));
      mnStrategy0.setHessianG2Tolerance((-897.367));
      mnStrategy1.setGradientNCycles(3);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      mnUserParameterState1.toString();
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 8.200000000000001, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (-898.9477811068);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHessianG2Tolerance((-898.9477811068));
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(100.0, (-898.9477811068), 4.0, 13.0, (-898.9477811068)).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1.0), mnStrategy0, (-1.0));
      mnUserCovariance0.toString();
      int[] intArray0 = new int[0];
      double double0 = 0.3;
      mnUserParameterState0.add("fX}*r=QbBZo:JR", (-898.9477811068), 4.0);
      int int0 = (-258);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.3, (-258));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 901, 901);
      // Undeclared exception!
      try { 
        mnUserParameterState0.setValue("MnFunctionCross problem 1", 100.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[12];
      doubleArray1[0] = (-897.367);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray1);
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1, mnUserCovariance0);
      mnUserParameterState0.clone();
      MnStrategy mnStrategy0 = new MnStrategy();
      MnStrategy mnStrategy1 = new MnStrategy(0);
      mnStrategy1.setHessianG2Tolerance((-897.367));
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(100.0, (-343.0), 4.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1.0), mnStrategy1, 0.05);
      mnStrategy0.setHessianG2Tolerance(98.205612754);
      mnStrategy1.setMediumStrategy();
      int[] intArray0 = new int[0];
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 486.37672465449, (-1));
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 0;
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserCovariance0.toString();
      MnUserParameterState mnUserParameterState1 = mnUserParameterState0.clone();
      mnStrategy0.setMediumStrategy();
      MnStrategy mnStrategy1 = new MnStrategy();
      double[] doubleArray1 = mnUserParameters0.params();
      mnStrategy1.setMediumStrategy();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState1, 842.7190999617511, mnStrategy1, (-3611));
      double[] doubleArray2 = new double[6];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-939.854111623619), 1200.224844, 1648.875324, (-1.0773195844497732), (double)(-2121734443)).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-2011), mnStrategy1, 0.0);
      mnFunctionCross1.cross(intArray0, doubleArray1, doubleArray0, 1898.9239422447556, (-2147353524));
      // Undeclared exception!
      try { 
        mnFunctionCross1.cross(intArray0, doubleArray2, doubleArray2, (-2147353524), 1993358033);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[19];
      doubleArray1[0] = (-1.0);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1, mnUserCovariance0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnStrategy mnStrategy1 = new MnStrategy();
      mnStrategy1.setHessianG2Tolerance((-898.9477811068047));
      mnUserCovariance0.toString();
      mnStrategy1.setHessianG2Tolerance(98.205612754);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(100.0, (-1.0), 473.380268356726, 13.0, 32.685579587865185).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1.0), mnStrategy1, 32.685579587865185);
      mnStrategy0.setHessianG2Tolerance(98.205612754);
      int[] intArray0 = new int[0];
      mnFunctionCross0.cross(intArray0, (double[]) null, doubleArray1, 923, 923);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 98.205612754;
      doubleArray2[1] = 32.685579587865185;
      doubleArray2[2] = (-1.0);
      mnFunctionCross0.cross(intArray0, (double[]) null, doubleArray2, 0.3, 923);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, (double[]) null, (-898.9477811068047), 923);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray2, (-1.0), 923);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.clone();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnStrategy mnStrategy1 = new MnStrategy();
      mnStrategy0.setHessianG2Tolerance(790.1);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-268.809496045), (-268.809496045), (-1248.39082), 790.1, (-268.809496045)).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 790.1, mnStrategy1, (-1199.81777));
      mnStrategy0.setHessianG2Tolerance(790.1);
      mnStrategy1.setGradientNCycles(2126429886);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      mnUserParameterState0.toString();
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 6.91232600600109, 2126429886);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.clone();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHessianG2Tolerance(790.1);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1199.81777), (-1199.81777), (-1248.39082), 790.1, (-1199.81777)).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState1, 790.1, mnStrategy0, (-1199.81777));
      mnStrategy0.setHessianG2Tolerance(790.1);
      mnStrategy0.setGradientNCycles(2126429886);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      mnUserParameterState1.toString();
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 6.91232600600109, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.clone();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnStrategy mnStrategy1 = new MnStrategy();
      mnStrategy0.setHessianG2Tolerance((-897.367));
      mnStrategy0.setHessianG2Tolerance(100.0);
      mnStrategy1.setGradientNCycles(3);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-3169.0), (-1199.81777), (-1274.42329789), (-1274.42329789), (-1274.42329789)).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-3169.0), mnStrategy0, 10.0);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1572.37, 3);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2761.280900038249), 3);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[1];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray1);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      mnUserCovariance0.toString();
      mnUserParameterState0.clone();
      MnStrategy mnStrategy0 = new MnStrategy();
      MnStrategy mnStrategy1 = new MnStrategy((-28));
      mnStrategy1.setHessianG2Tolerance(486.37672465449);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(100.0, (-1720.2), 2497.5033497, 88.39834047176255, (-740.1187)).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1.0), mnStrategy1, 0.05);
      mnStrategy1.setMediumStrategy();
      int[] intArray0 = new int[0];
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 486.37672465449, (-1));
      int[] intArray1 = new int[2];
      intArray1[0] = (-28);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, (-28), (-1073740436));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.clone();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnStrategy mnStrategy1 = new MnStrategy();
      mnStrategy0.setHessianG2Tolerance((-897.367));
      mnStrategy0.setHessianG2Tolerance(100.0);
      mnStrategy0.setMediumStrategy();
      mnStrategy1.setGradientNCycles(3);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-3169.0), 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1014.3), mnStrategy0, 10.0);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1572.37, 3);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2761.280900038249), (-2122039528));
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnStrategy mnStrategy1 = new MnStrategy();
      mnStrategy1.setHessianG2Tolerance((-897.367));
      mnStrategy1.setGradientStepTolerance((-1.0));
      mnStrategy1.setMediumStrategy();
      int[] intArray0 = new int[0];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1.0E-6, 120.7193003250722, (-1.0), 38.63228302577942, 6.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-897.367), mnStrategy0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 38.63228302577942;
      doubleArray0[2] = 6.0;
      doubleArray0[3] = 1.0E-6;
      mnStrategy0.setHessianGradientNCycles((-2718));
      mnStrategy0.setHessianStepTolerance(2.1622776601683777);
      doubleArray0[4] = (-897.367);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (-897.367);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2.1622776601683777, 701);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-897.367);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      mnUserCovariance0.toString();
      MnStrategy mnStrategy0 = new MnStrategy();
      MnStrategy mnStrategy1 = new MnStrategy((-28));
      mnStrategy1.setHessianG2Tolerance((-897.367));
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(100.0, (-1720.2), 2497.5033497, 88.39834047176255, (-740.1187)).when(fCNBase0).valueOf(any(double[].class));
      mnStrategy0.setHessianG2Tolerance(98.205612754);
      mnStrategy1.setMediumStrategy();
      int[] intArray0 = new int[0];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-2190.428164), mnStrategy1, 2497.5033497);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1758.01104752064);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 486.37672465449;
      doubleArray1[3] = 2497.5033497;
      doubleArray1[4] = 0.05;
      doubleArray1[5] = (-740.1187);
      doubleArray1[6] = 2497.5033497;
      doubleArray1[7] = (double) 4813;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, (-1758.01104752064), 1761);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[19];
      doubleArray1[0] = (-1.0);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      mnUserParameters0.add("", (-1.0), 473.380268356726, 473.380268356726, (-898.9477811068047));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1, mnUserCovariance0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnStrategy mnStrategy1 = new MnStrategy();
      mnStrategy1.setHessianG2Tolerance((-898.9477811068047));
      mnUserCovariance0.toString();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(100.0, (-1.0), (-1199.81777), 13.0, 9.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1.0), mnStrategy1, 0.05);
      mnStrategy0.setHessianG2Tolerance(98.205612754);
      mnStrategy1.setMediumStrategy();
      int[] intArray0 = new int[0];
      mnFunctionCross0.cross(intArray0, (double[]) null, doubleArray1, 923, 923);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-1199.81777);
      doubleArray2[1] = 0.05;
      doubleArray2[2] = (-1.0);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, doubleArray2, 0.3, 923);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, (double[]) null, (-898.9477811068047), 923);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[19];
      doubleArray1[0] = (-1.0);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      mnUserParameters0.add("", (-1.0), 473.380268356726, 473.380268356726, (-898.9477811068047));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1, mnUserCovariance0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnStrategy mnStrategy1 = new MnStrategy();
      mnStrategy1.setHessianG2Tolerance((-898.9477811068047));
      mnUserCovariance0.toString();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(100.0, (-1.0), (-1199.81777), 13.0, 32.685579587865185).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1.0), mnStrategy1, 32.685579587865185);
      mnStrategy0.setHessianG2Tolerance(98.205612754);
      mnStrategy1.setMediumStrategy();
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, doubleArray1, 923, 923);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-1199.81777);
      doubleArray2[1] = 32.685579587865185;
      doubleArray2[2] = (-1.0);
      mnFunctionCross0.cross(intArray0, (double[]) null, doubleArray2, 0.3, 923);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, (double[]) null, (-898.9477811068047), 923);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2260.4196986039465, 2260.4196986039465, 876.0, (-1130.912), 2260.4196986039465).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHessianG2Tolerance(98.205612754);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1130.912), mnStrategy0, 0.05);
      mnStrategy0.setMediumStrategy();
      int[] intArray0 = new int[1];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 1);
      mnStrategy0.setHighStrategy();
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-0.1), 2145892505);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[19];
      doubleArray1[0] = (-1.0);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1, mnUserCovariance0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnStrategy mnStrategy1 = new MnStrategy();
      mnStrategy1.setHessianG2Tolerance((-898.9477811068047));
      mnUserCovariance0.toString();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(32.685579587865185, (-1.0), (-1199.81777), 13.0, 9.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1.0), mnStrategy1, 32.685579587865185);
      mnStrategy0.setHessianG2Tolerance(98.205612754);
      mnStrategy1.setMediumStrategy();
      int[] intArray0 = new int[0];
      mnStrategy1.setHessianStepTolerance(32.685579587865185);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, doubleArray1, 923, 923);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-1199.81777);
      doubleArray2[1] = 32.685579587865185;
      doubleArray2[2] = (-1.0);
      mnFunctionCross0.cross(intArray0, (double[]) null, doubleArray2, 0.3, 923);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, (double[]) null, (-898.9477811068047), 923);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[27];
      doubleArray0[0] = (-1.0);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      mnUserParameters0.add("MnFunctionCross problem 1", (-1.0), 473.380268356726, 473.380268356726, (-898.9477811068047));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1, mnUserCovariance0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnStrategy mnStrategy1 = new MnStrategy();
      mnStrategy1.setHessianG2Tolerance((-898.9477811068047));
      mnUserCovariance0.toString();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(100.0, (-1.0), (-1199.81777), 31.85130603966075, (-898.9477811068047)).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1.0), mnStrategy1, 0.05);
      mnStrategy0.setHessianG2Tolerance((-1.0));
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, doubleArray0, 923, 923);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1199.81777);
      doubleArray1[1] = 0.05;
      mnFunctionCross0.cross(intArray0, (double[]) null, doubleArray1, 4.0, 1206);
      mnStrategy1.setMediumStrategy();
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 473.380268356726, 10);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHessianNCycles(292);
      mnUserCovariance0.toString();
      mnStrategy0.setHessianG2Tolerance((-122.9758));
      MnUserParameterState mnUserParameterState1 = mnUserParameterState0.clone();
      MnStrategy mnStrategy1 = new MnStrategy();
      mnStrategy0.setHessianG2Tolerance(1088.9);
      mnStrategy1.setMediumStrategy();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      double double0 = 2167.601104394412;
      mnUserParameterState1.setLimits(1, (-3252.117348033188), 2167.601104394412);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState1, 1939.8321979426921, mnStrategy1, 3729.8961268796);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1088.9, 3234);
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.5, 3234);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2260.4196986039465, 2260.4196986039465, 2260.4196986039465, 2260.4196986039465, 2260.4196986039465).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.toString();
      mnStrategy0.setHighStrategy();
      MnUserParameterState mnUserParameterState1 = mnUserParameterState0.clone();
      mnStrategy0.setHessianG2Tolerance(2260.4196986039465);
      double[] doubleArray1 = mnUserParameters0.params();
      mnStrategy0.setMediumStrategy();
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      mnUserParameterState1.setLimits(1, (double) (-2121734443), 2167.601104394412);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState1, 2260.4196986039465, mnStrategy0, (-2121734443));
      double[] doubleArray2 = new double[20];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 1;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray2, (-2121734443), 40);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray2, doubleArray0, 1.0, 1);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 333.6122585, 2);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2260.4196986039465, 2260.4196986039465, 842.7190999617511, 2260.4196986039465, 2260.4196986039465).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.toString();
      mnStrategy0.setHessianG2Tolerance(1088.9);
      double[] doubleArray1 = mnUserParameters0.params();
      mnStrategy0.setMediumStrategy();
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      mnUserParameterState0.setLimits(1, (double) (-2121734443), 2167.601104394412);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 842.7190999617511, mnStrategy0, (-3604));
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-3708.92361543);
      doubleArray2[1] = (-15.3381);
      doubleArray2[2] = 2951.24941014801;
      mnUserParameterState0.setUpperLimit(1, 15.0);
      mnFunctionCross0.cross(intArray0, doubleArray2, doubleArray2, 0.0, 1);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray2, doubleArray0, 696.0, 604);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray2, 8.200000000000001, 1);
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (-1671.0);
      doubleArray3[1] = (double) 604;
      doubleArray3[2] = 374.35493;
      doubleArray3[3] = (double) 604;
      doubleArray3[4] = (double) (-3604);
      doubleArray3[5] = (-2508384.0);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray3, doubleArray1, (-273.0), (-2121734443));
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserCovariance0.toString();
      MnUserParameterState mnUserParameterState1 = mnUserParameterState0.clone();
      mnStrategy0.setMediumStrategy();
      MnStrategy mnStrategy1 = new MnStrategy();
      mnStrategy0.setHessianG2Tolerance(1088.9);
      double[] doubleArray1 = mnUserParameters0.params();
      mnStrategy1.setMediumStrategy();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState1, 842.7190999617511, mnStrategy1, (-3611));
      double[] doubleArray2 = new double[6];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-2011), mnStrategy1, 0.0);
      MnCross mnCross0 = mnFunctionCross1.cross(intArray0, doubleArray1, doubleArray0, 1898.9239422447556, (-2147353524));
      MnCross mnCross1 = mnFunctionCross1.cross(intArray0, doubleArray2, doubleArray2, (-2147353524), 1993358033);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2260.4196986039465, 2260.4196986039465, 842.7190999617511, 2260.4196986039465, 2260.4196986039465).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnUserParameterState mnUserParameterState1 = mnUserParameterState0.clone();
      MnStrategy mnStrategy0 = new MnStrategy();
      double[] doubleArray1 = mnUserParameters0.params();
      mnStrategy0.setMediumStrategy();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      mnUserParameterState1.setLimits(1, (double) 1, 2167.601104394412);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState1, 842.7190999617511, mnStrategy0, 1);
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-12.93333386510373);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray2, doubleArray2, 0.0, 1);
      double[] doubleArray3 = new double[5];
      doubleArray2[0] = (-1.0);
      doubleArray3[1] = 1088.9;
      doubleArray3[2] = (double) 1;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray3, 1, 1);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray2, 0.0, 2146244195);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2260.4196986039465, 2260.4196986039465, 842.7190999617511, 2260.4196986039465, 2260.4196986039465).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnUserParameterState mnUserParameterState1 = mnUserParameterState0.clone();
      mnStrategy0.setMediumStrategy();
      MnStrategy mnStrategy1 = new MnStrategy();
      mnStrategy0.setHessianG2Tolerance(1088.9);
      double[] doubleArray1 = mnUserParameters0.params();
      mnStrategy1.setMediumStrategy();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      mnUserParameterState1.setLimits(1, (double) (-2121734443), 2167.601104394412);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState1, 842.7190999617511, mnStrategy1, 1);
      mnUserParameterState1.setPrecision((-11.719817916163164));
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-11.719817916163164);
      mnStrategy1.setLowStrategy();
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray2, doubleArray2, 0.0, 1);
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 1000.4461436619932;
      doubleArray3[1] = 1088.9;
      doubleArray3[2] = (double) 1;
      mnFunctionCross0.cross(intArray0, doubleArray2, doubleArray3, 1.0, 2806);
      mnFunctionCross0.cross(intArray0, doubleArray3, doubleArray1, (-1551.3057164299), 1);
      mnFunctionCross0.cross(intArray0, doubleArray3, doubleArray2, 2260.4196986039465, (-2121734443));
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray2, doubleArray3, (-1157.24946728), 2806);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }
}
