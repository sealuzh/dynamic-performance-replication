/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 06:29:08 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<Integer, Object>, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Map<Integer, Object>, String>((Map<Object, Map<Map<Integer, Object>, String>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<Map<String, Integer>, HashMap<Object, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<String, Integer>, HashMap<Object, Integer>, Integer>((Map<Map<String, Integer>, Map<HashMap<Object, Integer>, Integer>>) null);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = doubleKeyMap0.put((Map<String, Integer>) null, hashMap0, integer0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      hashMap1.put((Object) null, integer1);
      Integer integer2 = doubleKeyMap0.remove((Map<String, Integer>) null, hashMap1);
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<Map<String, Integer>, HashMap<Object, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<String, Integer>, HashMap<Object, Integer>, Integer>((Map<Map<String, Integer>, Map<HashMap<Object, Integer>, Integer>>) null);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put((Map<String, Integer>) null, hashMap0, integer0);
      Integer integer1 = doubleKeyMap0.remove((Map<String, Integer>) null, hashMap0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<Map<String, Integer>, HashMap<Object, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<String, Integer>, HashMap<Object, Integer>, Integer>((Map<Map<String, Integer>, Map<HashMap<Object, Integer>, Integer>>) null);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put((Map<String, Integer>) null, hashMap0, integer0);
      Integer integer1 = doubleKeyMap0.put((Map<String, Integer>) null, hashMap0, integer0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<HashMap<Integer, Map<Integer, Integer>>, Map<Integer, Map<Integer, Integer>>> hashMap0 = new HashMap<HashMap<Integer, Map<Integer, Integer>>, Map<Integer, Map<Integer, Integer>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Integer, Map<Integer, Integer>>, Integer, Map<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Map<Integer, Integer>>, Integer, Map<Integer, Integer>>(hashMap0, class0);
      HashMap<Integer, Map<Integer, Integer>> hashMap1 = new HashMap<Integer, Map<Integer, Integer>>();
      hashMap0.put(hashMap1, hashMap1);
      Integer integer0 = new Integer((-439));
      Map<Integer, Integer> map0 = doubleKeyMap0.get(hashMap1, integer0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<HashMap<String, String>, Map<Map<Integer, Integer>, Integer>> hashMap0 = new HashMap<HashMap<String, String>, Map<Map<Integer, Integer>, Integer>>();
      DoubleKeyMap<HashMap<String, String>, Map<Integer, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, Map<Integer, Integer>, Integer>(hashMap0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Integer integer0 = doubleKeyMap0.remove(hashMap1, (Map<Integer, Integer>) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, HashMap<String, Object>, HashMap<Map<Integer, Integer>, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Object>, HashMap<Map<Integer, Integer>, String>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DoubleKeyMap<Map<String, Integer>, HashMap<Object, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<String, Integer>, HashMap<Object, Integer>, Integer>((Map<Map<String, Integer>, Map<HashMap<Object, Integer>, Integer>>) null);
      Map<HashMap<Object, Integer>, Integer> map0 = doubleKeyMap0.remove((Map<String, Integer>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DoubleKeyMap<HashMap<Map<Integer, Integer>, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<Integer, Integer>, Object>, Object, Integer>();
      HashMap<Map<Integer, Integer>, Object> hashMap0 = new HashMap<Map<Integer, Integer>, Object>();
      Integer integer0 = doubleKeyMap0.get(hashMap0, (Object) hashMap0);
      assertNull(integer0);
  }
}
