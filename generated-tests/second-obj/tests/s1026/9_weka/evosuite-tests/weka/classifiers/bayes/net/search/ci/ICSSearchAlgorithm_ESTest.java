/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:01:16 GMT 2018
 */

package weka.classifiers.bayes.net.search.ci;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Locale;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm;
import weka.classifiers.functions.SGD;
import weka.classifiers.lazy.kstar.KStarConstants;
import weka.classifiers.meta.Vote;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ICSSearchAlgorithm_ESTest extends ICSSearchAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      String string0 = iCSSearchAlgorithm_SeparationSet0.getRevision();
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("8034", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      String[] stringArray0 = new String[0];
      iCSSearchAlgorithm0.setOptions(stringArray0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(2E+~x:m}h>";
      stringArray0[1] = "E6_H]dP";
      stringArray0[2] = "";
      ICSSearchAlgorithm.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      String string0 = iCSSearchAlgorithm0.maxCardinalityTipText();
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", string0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      boolean boolean0 = iCSSearchAlgorithm_SeparationSet0.contains(1601);
      assertFalse(boolean0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      String string0 = iCSSearchAlgorithm0.globalInfo();
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      double double0 = KStarConstants.EPSILON;
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      boolean boolean0 = iCSSearchAlgorithm_SeparationSet0.contains(0);
      assertTrue(boolean0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ICSSearchAlgorithm iCSSearchAlgorithm1 = new ICSSearchAlgorithm();
      assertEquals(2, iCSSearchAlgorithm1.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      String[] stringArray0 = iCSSearchAlgorithm0.getOptions();
      iCSSearchAlgorithm0.setOptions(stringArray0);
      try { 
        iCSSearchAlgorithm0.search(bayesNet0, bayesNet0.m_Instances);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      Attribute attribute0 = new Attribute("kMg6m<8)~TV;;mNC");
      Attribute attribute1 = new Attribute("");
      Attribute attribute2 = attribute1.copy("real");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      attribute0.getRevision();
      Instances instances0 = new Instances("real", arrayList0, 0);
      arrayList0.clear();
      Instances instances1 = new Instances(instances0, 0);
      Locale locale0 = Locale.ITALIAN;
      attribute2.setWeight(1);
      locale0.getUnicodeLocaleAttributes();
      locale0.getDisplayCountry();
      FileSystemHandling.shouldAllThrowIOExceptions();
      iCSSearchAlgorithm0.listOptions();
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      iCSSearchAlgorithm0.setMaxCardinality((-1));
      BayesNet bayesNet1 = iCSSearchAlgorithm0.m_BayesNet;
      iCSSearchAlgorithm0.search((BayesNet) null, instances1);
      assertEquals((-1), iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.spliterator();
      Attribute attribute0 = new Attribute((String) null, (String) null);
      Instances instances0 = new Instances("real", arrayList0, 0);
      instances0.compactify();
      iCSSearchAlgorithm0.m_instances = instances0;
      attribute0.copy();
      arrayList0.add(attribute0);
      boolean[][] booleanArray0 = new boolean[3][7];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V.YOol,W");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      iCSSearchAlgorithm0.listOptions();
      instances0.getRevision();
      Vote vote0 = new Vote();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      iCSSearchAlgorithm0.existsSepSet(0, 2, 2, booleanArray0);
      ICSSearchAlgorithm.SeparationSet[][] iCSSearchAlgorithm_SeparationSetArray0 = new ICSSearchAlgorithm.SeparationSet[0][2];
      iCSSearchAlgorithm0.calcVeeNodes(booleanArray0, booleanArray0, iCSSearchAlgorithm_SeparationSetArray0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("zZK^_!u~xc-_:a#k");
      iCSSearchAlgorithm0.getRevision();
      Instances instances0 = new Instances("real", arrayList0, 0);
      ICSSearchAlgorithm iCSSearchAlgorithm1 = new ICSSearchAlgorithm();
      Instances instances1 = new Instances("I(", arrayList0, 1);
      int int0 = SGD.HINGE;
      arrayList0.clear();
      arrayList0.add(attribute0);
      Object object0 = new Object();
      attribute0.equalsMsg("8034");
      iCSSearchAlgorithm0.markovBlanketClassifierTipText();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@end");
      iCSSearchAlgorithm0.setMaxCardinality(0);
      iCSSearchAlgorithm0.getOptions();
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      BayesNet bayesNet0 = new BayesNet();
      iCSSearchAlgorithm0.m_BayesNet = bayesNet0;
      iCSSearchAlgorithm0.getScoreType();
      AbstractClassifier.makeCopy(iCSSearchAlgorithm0.m_BayesNet);
      boolean boolean0 = true;
      iCSSearchAlgorithm0.listOptions();
      bayesNet0.setUseADTree(boolean0);
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      int[] intArray0 = new int[8];
      int int0 = 2239;
      intArray0[0] = int0;
      int int1 = (-1);
      intArray0[1] = int1;
      int int2 = 949;
      intArray0[2] = int2;
      int int3 = 108;
      intArray0[3] = int3;
      int int4 = (-997);
      intArray0[4] = int4;
      int int5 = 951;
      intArray0[5] = int5;
      int int6 = 75;
      intArray0[6] = int6;
      int int7 = 2;
      intArray0[7] = int7;
      iCSSearchAlgorithm_SeparationSet0.m_set = intArray0;
      int int8 = (-1);
      iCSSearchAlgorithm_SeparationSet0.contains(int8);
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.name(int8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("zZK^_!u~xc-_:a#k");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("numeric", arrayList1, 2);
      iCSSearchAlgorithm0.getRevision();
      int int0 = KDTreeNodeSplitter.MIN;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      Instances instances1 = new Instances(instances0, 4);
      arrayList1.add(attribute0);
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.CISearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.spliterator();
      Attribute attribute0 = new Attribute("");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Instances instances0 = new Instances("real", arrayList0, 0);
      instances0.compactify();
      iCSSearchAlgorithm0.getRevision();
      iCSSearchAlgorithm0.m_instances = instances0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8034");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ju0#$");
      arrayList0.add(attribute0);
      Instances instances1 = new Instances(instances0, 0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "} ,");
      arrayList0.add(attribute0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      boolean[][] booleanArray0 = new boolean[0][0];
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.existsSepSet(2125, 1, 1, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2125
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.spliterator();
      Attribute attribute0 = new Attribute("zZK^_!u~xc-_:a#k");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Instances instances0 = new Instances("real", arrayList0, 0);
      instances0.compactify();
      String string0 = CostMatrix.FILE_EXTENSION;
      iCSSearchAlgorithm0.m_instances = instances0;
      BayesNet bayesNet0 = new BayesNet();
      attribute0.copy();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances1 = new Instances(instances0, 0);
      arrayList0.add(attribute0);
      boolean[][] booleanArray0 = new boolean[3][7];
      MockRandom mockRandom0 = new MockRandom();
      iCSSearchAlgorithm0.m_BayesNet = bayesNet0;
      int[] intArray0 = new int[3];
      arrayList0.add(attribute0);
      Locale.getISOLanguages();
      iCSSearchAlgorithm0.getRevision();
      intArray0[0] = 361;
      intArray0[1] = 2;
      intArray0[2] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2441.261826073), intArray0, 361);
      iCSSearchAlgorithm0.calcArcDirections(booleanArray0, booleanArray0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.spliterator();
      Attribute attribute0 = new Attribute((String) null);
      Instances instances0 = new Instances("real", arrayList0, 0);
      iCSSearchAlgorithm0.m_instances = instances0;
      BayesNet bayesNet0 = new BayesNet();
      Object object0 = attribute0.copy();
      iCSSearchAlgorithm0.search(bayesNet0, iCSSearchAlgorithm0.m_instances);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      arrayList0.add((Attribute) object0);
      boolean[][] booleanArray0 = new boolean[3][7];
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V.Ool,W");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      arrayList0.add((Attribute) object0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "numeric");
      iCSSearchAlgorithm0.getOptions();
      iCSSearchAlgorithm0.getRevision();
      instances0.getRevision();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vote vote0 = new Vote();
      SelectedTag selectedTag0 = vote0.getCombinationRule();
      selectedTag0.getRevision();
      iCSSearchAlgorithm0.setScoreType(selectedTag0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      boolean[][] booleanArray1 = new boolean[1][4];
      boolean[] booleanArray2 = new boolean[2];
      booleanArray2[0] = false;
      booleanArray2[1] = true;
      booleanArray1[0] = booleanArray2;
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcArcDirections(booleanArray0, booleanArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("@j7^`iJ.k7Gv");
      Attribute attribute1 = new Attribute("@attribute");
      Attribute attribute2 = attribute1.copy("real");
      Instances instances0 = new Instances("real", arrayList0, 0);
      int int0 = SGD.HINGE;
      arrayList0.clear();
      arrayList0.add(attribute2);
      Object object0 = new Object();
      iCSSearchAlgorithm0.markovBlanketClassifierTipText();
      arrayList0.add(attribute0);
      iCSSearchAlgorithm0.setMaxCardinality((-1));
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.spliterator();
      Attribute attribute0 = new Attribute((String) null);
      Instances instances0 = new Instances("real", arrayList0, 0);
      instances0.compactify();
      iCSSearchAlgorithm0.m_instances = instances0;
      Object object0 = attribute0.copy();
      arrayList0.add(attribute0);
      boolean[][] booleanArray0 = new boolean[3][7];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V.YOol,W");
      arrayList0.add((Attribute) object0);
      iCSSearchAlgorithm0.listOptions();
      instances0.getRevision();
      Vote vote0 = new Vote();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@attribute";
      ICSSearchAlgorithm.SeparationSet[][] iCSSearchAlgorithm_SeparationSetArray0 = new ICSSearchAlgorithm.SeparationSet[0][2];
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcVeeNodes(booleanArray0, booleanArray0, iCSSearchAlgorithm_SeparationSetArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute1 = attribute0.copy("real");
      Instances instances0 = new Instances("real", arrayList0, 0);
      int int0 = SGD.HINGE;
      arrayList0.clear();
      arrayList0.add(attribute1);
      arrayList0.add(attribute0);
      Object object0 = new Object();
      attribute0.equalsMsg(object0);
      iCSSearchAlgorithm0.markovBlanketClassifierTipText();
      arrayList0.add(attribute0);
      iCSSearchAlgorithm0.setMaxCardinality((-1));
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("@C7^`iJ.k7G[:");
      Attribute attribute1 = attribute0.copy("real");
      Instances instances0 = new Instances("real", arrayList0, 0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[0] = (byte) (-121);
      byteArray0[4] = (byte)124;
      byteArray0[6] = (byte)74;
      attribute0.setStringValue("real");
      attribute1.name();
      Integer integer0 = new Integer(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add(attribute1);
      attribute1.equals(instances0);
      arrayList0.add(attribute1);
      arrayList0.add((Attribute) null);
      arrayList0.add(attribute0);
      iCSSearchAlgorithm0.setMaxCardinality((-1));
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      Locale.getISOLanguages();
      BayesNet bayesNet1 = iCSSearchAlgorithm0.m_BayesNet;
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }
}
