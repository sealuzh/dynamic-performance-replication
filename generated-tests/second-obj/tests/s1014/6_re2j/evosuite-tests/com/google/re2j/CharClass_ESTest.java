/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:21:58 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[10];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendRange(8217, 8217);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.negateClass();
      CharClass charClass1 = charClass0.appendRange((-2007), (-2007));
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      CharClass charClass0 = new CharClass();
      int[][] intArray1 = new int[1][0];
      intArray1[0] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      String string0 = charClass1.toString();
      assertEquals("[0x0-0x10ffff]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 308);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendFoldedRange(1802, 1802);
      charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendClass(intArray0);
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][8];
      charClass0.appendTableWithSign(intArray0, 2);
      charClass0.toString();
      int[][] intArray1 = new int[1][2];
      int[] intArray2 = new int[6];
      intArray2[0] = 2;
      intArray2[1] = 2;
      intArray2[2] = 2;
      intArray2[4] = 2;
      intArray2[2] = 2;
      intArray1[0] = intArray2;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      int[][] intArray0 = new int[0][1];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign((int[]) null, (-1211));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[0][9];
      CharClass charClass2 = charClass0.appendTable(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-2743), (-2743));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      int[][] intArray0 = new int[15][1];
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 248;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[3][1];
      intArray1[0] = intArray0;
      intArray1[2] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2206;
      int[][] intArray1 = new int[4][5];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {2206, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      int[] intArray1 = new int[18];
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass1 = charClass0.negateClass();
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {1, 1114111, 0, 0}, intArray0);
      assertNotNull(charClass1);
      
      int[][] intArray2 = new int[5][4];
      intArray2[0] = intArray0;
      intArray2[1] = intArray1;
      intArray2[2] = intArray1;
      intArray2[3] = intArray1;
      intArray2[4] = intArray0;
      charClass1.appendNegatedTable(intArray2);
      CharClass charClass2 = charClass0.cleanClass();
      charClass2.cleanClass();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[1][1];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray1, (-1114));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(1155, 1155);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral((-2146), (-2146));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass1);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(64, 64);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendLiteral(1100807, (-643));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[] intArray1 = charClass0.toArray();
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {64, 64, 1100807, 1100807}, intArray1);
      assertNotNull(intArray1);
      
      CharClass charClass3 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(1114111, 1349);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1114111;
      intArray0[1] = 1349;
      intArray0[2] = 1349;
      intArray0[3] = 1349;
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {1114111, 1349, 1349, 1349}, intArray0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {1114111, 1349, 1349, 1349}, intArray0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {1114111, 1349, 1349, 1349}, intArray0);
      assertNotNull(charClass4);
      
      int[][] intArray1 = new int[0][8];
      CharClass charClass5 = charClass4.appendTable(intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertArrayEquals(new int[] {1114111, 1349, 1349, 1349}, intArray0);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.appendClass(intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertArrayEquals(new int[] {1114111, 1349, 1349, 1349}, intArray0);
      assertNotNull(charClass6);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[][] intArray0 = new int[7][5];
      CharClass charClass0 = new CharClass(intArray0[5]);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.cleanClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendLiteral((-2445), 10712);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass5);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 32;
      intArray0[1] = 2673;
      intArray0[2] = 2025;
      intArray0[3] = 4;
      intArray0[4] = (-1615);
      intArray0[5] = 1331;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {32, 2673, 2025, 4, (-1615), 1331}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-1615), 2673, 32, 2673, 2025, 4}, intArray0);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign((int[]) null, 141);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 235;
      int[][] intArray1 = new int[0][8];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, (-565));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      int[] intArray2 = charClass2.toArray();
      assertFalse(intArray2.equals((Object)intArray0));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(intArray2);
      
      String string0 = charClass2.toString();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      CharClass charClass4 = new CharClass(intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass1));
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(charClass4);
      
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 6106;
      intArray0[1] = 4364;
      intArray0[2] = (-549);
      intArray0[3] = 65;
      int int0 = (-2624);
      intArray0[4] = (-2624);
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(559, 559);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 559;
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedRange((-643), 1100807);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[] intArray0 = charClass0.toArray();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertArrayEquals(new int[] {(-643), 1100807}, intArray0);
      assertNotNull(intArray0);
      
      CharClass charClass3 = charClass0.cleanClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      String string0 = charClass1.toString();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertEquals("[]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 32;
      intArray0[1] = 2673;
      intArray0[3] = 32;
      intArray0[4] = (-1625);
      intArray0[5] = 1331;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {32, 2673, 0, 32, (-1625), 1331}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-1625), 2673, 0, 32, 32, 2673}, intArray0);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      charClass0.appendFoldedRange(4662, 1114111);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 1114111;
      intArray0[2] = 1114111;
      intArray0[3] = 1114111;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 1114111, 1114111, 1114111, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[1][0];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 1114111, 1114111, 1114111, 0, 1114110}, intArray0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 1114111, 1114111, 1114111, 0, 1114111}, intArray0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.appendRange(0, 2623);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {0, 1114111, 1114111, 1114111, 0, 1114111}, intArray0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass2.appendTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {0, 1114111, 1114111, 1114111, 0, 1114111}, intArray0);
      assertNotNull(charClass4);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharGroup charGroup0 = null;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[4][5];
      int[] intArray1 = new int[7];
      intArray1[0] = 2206;
      intArray1[1] = (-5376);
      intArray1[2] = 1;
      intArray1[6] = (-5376);
      intArray0[0] = intArray1;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      CharClass charClass2 = charClass1.cleanClass();
      CharClass charClass3 = charClass2.appendLiteral(intArray1[6], intArray1[1]);
      charClass0.toString();
      boolean boolean0 = true;
      CharClass charClass4 = charClass0.appendGroup(charGroup0, boolean0);
      CharClass charClass5 = charClass4.cleanClass();
      charClass3.appendNegatedClass(intArray0[3]);
      CharClass.charClassToString(intArray1, intArray1[6]);
      charClass5.cleanClass();
      charClass2.appendTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2206;
      CharClass charClass0 = new CharClass();
      int[][] intArray1 = new int[4][5];
      int[] intArray2 = new int[7];
      intArray2[0] = 2206;
      intArray2[1] = (-5373);
      intArray2[2] = 1;
      intArray2[3] = 2206;
      intArray2[4] = 1;
      intArray2[5] = 0;
      intArray2[6] = (-5373);
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2206;
      CharClass charClass0 = new CharClass();
      int[][] intArray1 = new int[3][5];
      int[] intArray2 = new int[7];
      intArray2[1] = (-5376);
      intArray2[2] = 1;
      intArray2[3] = 2206;
      intArray2[4] = 1;
      intArray2[5] = 1;
      intArray2[6] = (-5376);
      intArray1[0] = intArray2;
      intArray1[2] = intArray0;
      charClass0.appendNegatedTable(intArray1);
      charClass0.toString();
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass0.appendNegatedClass(intArray1[0]);
      int int0 = 6;
      CharClass.charClassToString(intArray2, int0);
      charClass2.cleanClass();
      charClass1.appendNegatedTable(intArray1);
      charClass0.appendClass(intArray2);
      charClass0.appendTable(intArray1);
  }
}
