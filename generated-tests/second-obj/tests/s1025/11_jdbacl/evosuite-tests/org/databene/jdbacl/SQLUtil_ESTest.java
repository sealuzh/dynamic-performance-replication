/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:20:03 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.util.List;
import java.util.Locale;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.raw.Page;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.RecordHandle;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.store.raw.RawStore;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.jca.FBLocalTransaction;
import org.h2.constraint.Constraint;
import org.h2.engine.Mode;
import org.h2.value.ValueDecimal;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      Charset.defaultCharset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ZERO;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TableContainer tableContainer0 = new TableContainer("k6[.|6Q,");
      tableContainer0.getTable("k6[.|6Q,");
      DBDataType dBDataType0 = DBDataType.getInstance(25, ")GI<2@SlFAHJgh_JE");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("k6[.|6Q,", (DBTable) null, dBDataType0, (Integer) null);
      String string0 = SQLUtil.typeAndName(defaultDBColumn0);
      assertNotNull(string0);
      assertEquals("column k6[.|6Q,", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("execute");
      assertNull(boolean0);
      
      SQLUtil.parseColumnTypeAndSize("alter indexca");
      DBSchema dBSchema0 = new DBSchema("alter session");
      DBPackage dBPackage0 = new DBPackage("alter sessionalter indexcase_se", dBSchema0);
      String string0 = SQLUtil.ownerDotComponent(dBPackage0);
      assertEquals("alter session.alter sessionalter indexcase_se", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.removeComments(", ");
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("yes");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "yes";
      stringArray0[1] = "42Z15";
      String string0 = SQLUtil.join("yes", "42Z15", stringArray0, "A(Jk ixrG>HlIZiI", "yes", stringArray0);
      assertEquals("yes join A(Jk ixrG>HlIZiI as yes on 42Z15.yes = yes.yes and 42Z15.42Z15 = yes.42Z15", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("DEFERRABLE");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DEFERRABLE");
      DBDataType dBDataType0 = DBDataType.getInstance((-340), "XhgdT");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("XhgdT", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter indexe$9h&-y-h+", (DBTable) null, (DBDataType) null, integer0, integer1);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("Error converting to character stream.");
      assertFalse(boolean0);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      String string0 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("null.null", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "drop index";
      stringArray0[1] = "drop index";
      stringArray0[2] = "drop index";
      stringArray0[3] = "drop index";
      String string0 = SQLUtil.join("drop index", "drop index", stringArray0, "drop index", "drop index", stringArray0);
      assertEquals("drop index join drop index as drop index on drop index.drop index = drop index.drop index and drop index.drop index = drop index.drop index and drop index.drop index = drop index.drop index and drop index.drop index = drop index.drop index", string0);
      
      String string1 = SQLUtil.renderColumnListWithTableName("drop index", stringArray0);
      assertEquals("drop index.drop index, drop index.drop index, drop index.drop index, drop index.drop index", string1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Vg");
      StringBuilder stringBuilder0 = new StringBuilder(",");
      String string0 = SQLUtil.substituteMarkers("Vg", "V5", ",");
      assertEquals("Vg", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" NOT", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" NOT");
      Locale locale0 = Locale.CHINA;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "x] [zpBMD?6H2H,QK", (Object[]) null);
      mockPrintWriter0.println(Float.NEGATIVE_INFINITY);
      printWriter0.print(5);
      FKChangeRule fKChangeRule0 = FKChangeRule.NO_ACTION;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      defaultDBTable0.getUniqueConstraint((String[]) null);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter1);
      defaultDBTable0.getUniqueConstraint((String[]) null);
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ZERO;
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[2] = stringArray0[0];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE null = null AND null = null AND null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "v'xf";
      stringArray0[2] = "v'xf";
      stringArray0[3] = "v'xf";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "v'xf", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder("v'xf");
      SQLUtil.addRequiredCondition(stringArray0[1], stringBuilder0);
      assertEquals("v'xf and null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.normalize("kIr]0NA*z'", true);
      assertEquals("kIr ] 0NA * z ''", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "6#_Fq@4N>3|)";
      stringArray0[1] = "6#_Fq@4N>3|)";
      stringArray0[2] = "6#_Fq@4N>3|)";
      stringArray0[3] = "B";
      stringArray0[4] = "6#_Fq@4N>3|)";
      String string0 = SQLUtil.leftJoin("6#_Fq@4N>3|)", stringArray0, "create materialized view2j,vp:dq'", "6#_Fq@4N>3|)", stringArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis((-2367L));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "rw<mkB[?(";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("rw<mkB[?( = 'rw<mkB[?('", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(272, "XSDA7.S");
      Integer integer0 = Integer.getInteger("XSDA7.S", 272);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("7~HXN9Hs4V;it`@{7", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String string0 = TypeId.BLOB_NAME;
      assertEquals("BLOB", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String[] stringArray1 = new String[3];
      stringArray1[0] = "+la|IN7'z)A}fd]H";
      stringArray1[1] = "8[[)x|Y0:vC";
      stringArray1[2] = " WHERE ";
      SQLUtil.join((String) null, "select intoon", stringArray1, "select into", "", stringArray1);
      String string0 = "Result set type changed. ResultSet.TYPE_SCROLL_SENSITIVE is not supported.";
      StringBuilder stringBuilder0 = new StringBuilder(" WHERE ");
      // Undeclared exception!
      try { 
        stringBuilder0.append((CharSequence) "8[[)x|Y0:vC", (-1930), (-1930));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start -1930, end -1930, s.length() 11
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("deleteymn&ld.null, ymn&ld.null, ymn&ld.null, ymn&ld.null, ymn&ld.null", (CompositeDBObject<? extends DBObject>) null);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("P5", (DBSchema) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "deleteymn&ld.null, ymn&ld.null, ymn&ld.null, ymn&ld.null, ymn&ld.null";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "deleteymn&ld.null, ymn&ld.null, ymn&ld.null, ymn&ld.null, ymn&ld.null");
      SQLUtil.addOptionalCondition(" NOT", stringBuilder0);
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ZERO;
      ValueDecimal valueDecimal1 = (ValueDecimal)ValueDecimal.ZERO;
      StringBuilder stringBuilder1 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.normalize("z1Vv|YF", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Vg");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Vg");
      SQLUtil.normalize("9-5O,(jM1vxJ.1", false);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("alter materialized viewselect into,", false, "[J+OzWQ?SQ", "Vg");
      StringBuilder stringBuilder0 = new StringBuilder("?7{S =Y");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("?7{S =YCONSTRAINT \"alter materialized viewselect into,\" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("deletenpi9|s.{k<x9q.");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("o$*:2 d?,lo", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-4108), "UM`=n^#H<IFAiQ^Xf0L");
      Integer.getInteger("s+,I");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("deletenpi9|s.{k<x9q.", defaultDBTable0, dBDataType0, (Integer) null);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("UM`=N^#H<IFAIQ^XF0L", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":\"4t3nf1R-&>VGo^#Cf");
      SQLUtil.parseColumnTypeAndSize("~LWU`");
      SQLUtil.removeComments(":\"4t3nf1R-&>VGo^#Cf");
      defaultDBTable0.getUniqueConstraint((String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = SQLUtil.isDDL("drop materialized view");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema(".B{/J\n(");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "hKEnajX]uj&}KDE\u0004";
      stringArray0[1] = ".B{/J\n(";
      stringArray0[3] = "";
      stringArray0[4] = ".B{/J\n(";
      stringArray0[5] = ".EJ?bZC'^Bu.$";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ".EJ?bZC'^Bu.$", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (hKEnajX]uj&}KDE\u0004, .B{/J\n(, , , .B{/J\n(, .EJ?bZC'^Bu.$)", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jdbcClob jdbcClob0 = new jdbcClob("fv");
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      String string0 = SQLUtil.normalize("pk@a+^.cqVpW", true);
      String string1 = SQLUtil.renderValue(fileSystemHandling0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("Unknown constraint type: ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Unknown constraint type: ", dBSchema0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Unknown constraint type: ";
      stringArray0[1] = "Unknown constraint type: ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Unknown constraint type: ", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT \"Unknown constraint type: \" ", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("&", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = Mode.REGULAR;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "$T=", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES null()", string1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&");
      defaultDBTable0.getUniqueConstraint((String[]) null);
      defaultDBTable0.getCheckConstraints();
      SQLUtil.isDDL("~ 7DWh9a8");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.normalize("altrindex~=ki,;rwb=6-%zwx'", false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ",";
      stringArray0[1] = ",";
      stringArray0[2] = "Vg";
      stringArray0[3] = ",";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("'&O", false, "Vg", "SEPARATOR");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT '&O ", string0);
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT '&O CHECK SEPARATOR", string1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Ia>d0y'9s");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getUniqueConstraint((String[]) null);
      SQLUtil.parseColumnTypeAndSize(".db");
      SQLUtil.removeComments("K^bygpr&y;*:#^x ");
      defaultDBTable0.getUniqueConstraint((String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("K^bygpr&y;*:#^x ");
      Locale locale0 = Locale.ITALY;
      mockPrintWriter1.format(locale0, "Ia>d0y'9s", (Object[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.addOptionalCondition("K^bygpr&y;*:#^x ", stringBuilder0);
      assertEquals("K^bygpr&y;*:#^x ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("'oH-~bTih1NJ");
      assertNull(boolean0);
      
      SQLUtil.parseColumnTypeAndSize("'oH-~bTih1NJ");
      DBSchema dBSchema0 = new DBSchema("'oH-~bTih1NJ");
      DBPackage dBPackage0 = new DBPackage("'oH-~bTih1NJ", dBSchema0);
      String string0 = SQLUtil.ownerDotComponent(dBPackage0);
      assertEquals("'oH-~bTih1NJ.'oH-~bTih1NJ", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "(:yA jpE5:l}:q";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(:yA jpE5:l}:q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (:yA jpE5:l}:q
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("callvg", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_DEFAULT;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("HOCu5d");
      defaultDBTable0.getUniqueConstraint((String[]) null);
      String string0 = SchemaDescriptor.IBM_SYSTEM_SCHEMA_NAME;
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "~8W,`", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("CONSTRAINT ~8W,` PRIMARY KEY ()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("&");
      assertNull(boolean0);
      
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = Mode.REGULAR;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "&", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "update";
      SQLUtil.mutatesDataOrStructure("update");
      Charset charset0 = Charset.defaultCharset();
      charset0.newDecoder();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      String string0 = SQLUtil.normalize("8g`oL/0IAe1AB\"", true);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("update", true, "update", "update");
      String string1 = SQLUtil.renderValue(fileDescriptor0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil.isDDL("Q8ZDuH");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("execorcl", stringBuilder0);
      assertEquals("execorcl", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      jdbcClob jdbcClob0 = new jdbcClob("alter table");
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      String string0 = SQLUtil.normalize(")", false);
      assertEquals(")", string0);
      
      String string1 = SQLUtil.renderValue(")");
      assertEquals("')'", string1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      charset0.newDecoder();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("kIr]0NA*z'", false);
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ZERO;
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DBDataType dBDataType0 = DBDataType.getInstance(6, "select into");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("kIr]0NA*z'", (DBTable) null, dBDataType0, (Integer) 3, (Integer) 14);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("^(FJLm~AX* S|KMDE", false, "select into", "alter sessionalter materialized viewsyscs_ia");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Syntax error at the beginning 
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("deletenpi9|s.{k<x9q.");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("o$*:2 d?,lo", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-4108), "UM`=n^#H<IFAiQ^Xf0L");
      Integer integer0 = new Integer((-4108));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("deletenpi9|s.{k<x9q.", defaultDBTable0, dBDataType0, integer0);
      String string0 = Page.DIAG_NUMOVERFLOWED;
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("alter indexnot null", defaultDBTable0, (-4108), "s+,I");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("deletenpi9|s.{k<x9q., alter indexnot null, deletenpi9|s.{k<x9q., deletenpi9|s.{k<x9q., deletenpi9|s.{k<x9q., deletenpi9|s.{k<x9q., deletenpi9|s.{k<x9q.", string1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Vg");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Vg");
      SQLUtil.normalize("e$9h&-Y-H+", false);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("e$9h&-Y-H+", false, (String) null, "V5");
      StringBuilder stringBuilder0 = new StringBuilder("e$9h&-Y-H+");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("e$9h&-Y-H+CONSTRAINT e$9h&-Y-H+ ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Vg");
      StringReader stringReader0 = new StringReader(",");
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4535));
      stringReader0.read();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "- 0";
      String string0 = "J8\\uY";
      stringArray0[2] = string0;
      stringArray0[3] = "9MyyIF/Aq.8$+6K=";
      stringArray0[4] = null;
      streamTokenizer1.lowerCaseMode(true);
      stringArray0[5] = "Vg";
      stringArray0[6] = "9MyyIF/Aq.8$+6K=";
      stringArray0[7] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      stringBuilder0.append(true);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-4), (CharSequence) "- 0");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -4
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q8ZDuH");
      stringArray0[0] = ":\"4t3nf1R-&>VGo^#Cf";
      stringArray0[1] = "?%, )w-|aV`L";
      stringArray0[2] = "?%, )w-|aV`L";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "renamex", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      defaultDBTable0.getCheckConstraints();
      SQLUtil.isDDL("BLOB");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition(":\"4t3nf1R-&>VGo^#Cf", stringBuilder0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "<RuM:rNE-QO");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("(@dAk1Y)7%zWOq!2Yo", defaultDBTable0, (-1879178688), "deletex");
      defaultDBColumn0.setDefaultValue(":\"4t3nf1R-&>VGo^#Cf");
      SQLUtil.renderColumn(defaultDBColumn0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize(":\"4t3nf1R-&>VGo^#Cf");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringReader stringReader0 = new StringReader("e$9h&-Y-H+");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 786.056;
      streamTokenizer0.ttype = (-1840);
      int int0 = RecordHandle.DEALLOCATE_PROTECTION_HANDLE;
      streamTokenizer0.wordChars(2, 2);
      streamTokenizer0.commentChar((-343));
      SQLUtil.renderNumber(streamTokenizer0);
      String string0 = SchemaDescriptor.STD_SYSTEM_DIAG_SCHEMA_NAME;
      SQLUtil.isDDL(",");
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-343));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("alter materialized view,");
      tableContainer0.getTables(false);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      tableContainer0.getTables(true, (List<DBTable>) constraintDescriptorList0);
      String string0 = SQLUtil.ownerDotComponent(tableContainer0);
      assertEquals("alter materialized view,", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      StringReader stringReader0 = new StringReader("^");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String[] stringArray0 = new String[1];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("case_se");
      assertNull(boolean0);
      
      DBDataType.getInstance((-4), "-xc=gkJJ7~+jk+sII.");
      GDSType.getType("select intofktable_schem");
      DBDataType dBDataType0 = DBDataType.getInstance(344, "[!`_.3 ");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.ABORT;
      Integer.compare(344, 23000);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer2, integer1);
      String string0 = RawStore.TEST_REENCRYPT_CRASH_AFTER_RECOVERY_UNDO_REVERTING_KEY;
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("select intofktable_schem");
      assertFalse(boolean1);
      
      SQLUtil.parseColumnTypeAndSize("create table");
      SQLUtil.isDDL(")ISyq`\u0000x;|t");
      boolean boolean2 = SQLUtil.isProcedureCall("case_se");
      assertFalse(boolean2);
      
      String string1 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",");
      StringReader stringReader0 = new StringReader("e$9h&-Y-H+");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 786.0;
      streamTokenizer0.ttype = (-1840);
      int int0 = RecordHandle.DEALLOCATE_PROTECTION_HANDLE;
      streamTokenizer0.wordChars(2856, 2);
      streamTokenizer0.commentChar((-343));
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("786", string0);
      
      String string1 = SchemaDescriptor.STD_SYSTEM_DIAG_SCHEMA_NAME;
      DBDataType.getInstance((-343), ":\"4t3nf1r-&");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.COMMIT;
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      Integer integer2 = RawTransaction.ABORT;
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer4 = RawTransaction.ABORT;
      String[] stringArray0 = new String[3];
      stringArray0[0] = ",";
      stringArray0[1] = "e$9h&-Y-H+";
      streamTokenizer0.parseNumbers();
      stringArray0[2] = ":\"4t3nf1r-&";
      String string2 = SQLUtil.innerJoin("txHOtO^55#\"bR&J0", stringArray0, "786", "Z}D,t/vTkHzfl", stringArray0);
      assertEquals("786 as Z}D,t/vTkHzfl on txHOtO^55#\"bR&J0., = Z}D,t/vTkHzfl., and txHOtO^55#\"bR&J0.e$9h&-Y-H+ = Z}D,t/vTkHzfl.e$9h&-Y-H+ and txHOtO^55#\"bR&J0.:\"4t3nf1r-& = Z}D,t/vTkHzfl.:\"4t3nf1r-&", string2);
      
      boolean boolean0 = SQLUtil.isQuery(":\"4t3nf1r-&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&");
      defaultDBTable0.getUniqueConstraint((String[]) null);
      defaultDBTable0.getCheckConstraints();
      Locale locale0 = Locale.ITALY;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "&", (Object[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&");
      defaultDBTable0.getUniqueConstraint((String[]) null);
      defaultDBTable0.getCheckConstraints();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/11_jdbacl");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "&");
      Locale locale0 = Locale.ITALY;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "&", (Object[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(":\"4t3nf1R-&>VGo^#Cf", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":\"4t3nf1R-&>VGo^#Cf");
      defaultDBTable0.getUniqueConstraint((String[]) null);
      SQLUtil.parseColumnTypeAndSize("~LWU`");
      SQLUtil.removeComments(":\"4t3nf1R-&>VGo^#Cf");
      defaultDBTable0.getUniqueConstraint((String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      dBForeignKeyConstraint0.toString();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "CONSTRAINT :\"4t3nf1R-&>VGo^#Cf FOREIGN KEY () REFERENCES null()", true, (String[]) null);
      String string0 = TypeId.REAL_NAME;
      SQLUtil.isDDL("CONSTRAINT :\"4t3nf1R-&>VGo^#Cf FOREIGN KEY () REFERENCES null()");
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT :\"4t3nf1R-&>VGo^#Cf ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(":\"4t3nf1R-&>VGo^#Cf", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":\"4t3nf1R-&>VGo^#Cf");
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_DEFAULT;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "~LWU", false, (String[]) null);
      dBPrimaryKeyConstraint0.setName("~LWU");
      String string0 = Constraint.PRIMARY_KEY;
      defaultDBTable0.getCheckConstraints();
      SQLUtil.isDDL(":\"4t3nf1R-&>VGo^#Cf");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      PrintWriter printWriter0 = mockPrintWriter0.printf("PRIMARY KEY", (Object[]) null);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.commons.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized viewsyscs_ia");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      charset0.newDecoder();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "alter materialized viewsyscs_ia");
      defaultDBTable0.getIndex("alter materialized viewsyscs_ia");
      String string0 = SQLUtil.typeAndName((DBObject) null);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "~LWU`";
      stringArray0[2] = null;
      stringArray0[3] = "alter materialized viewsyscs_ia";
      stringArray0[4] = null;
      stringArray0[5] = "~LWU`";
      stringArray0[6] = null;
      stringArray0[7] = "~LWU`";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      dBPrimaryKeyConstraint0.setName(string0);
      defaultDBTable0.getCheckConstraints();
      FBLocalTransaction.FBLocalXid fBLocalTransaction_FBLocalXid0 = new FBLocalTransaction.FBLocalXid();
      fBLocalTransaction_FBLocalXid0.toString();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "~LWU`");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("~LWU`", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Charset.defaultCharset();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      String string0 = "{J-$H4?sC";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{J-$H4?sC");
      String string1 = "NDL6l+*Jm!/k/*]!z";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NDL6l+*Jm!/k/*]!z");
      defaultDBTable0.getUniqueConstraint((String[]) null);
      defaultDBTable0.getCheckConstraints();
      // Undeclared exception!
      SQLUtil.isDDL("NDL6l+*Jm!/k/*]!z");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-2446), "Y-1hmYCqT");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      Integer integer3 = RawTransaction.LOCK_ESCALATE;
      dBDataType0.isNumber();
      Integer integer4 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter materialized viewsyscs_ia", defaultDBTable0, dBDataType0, integer3, (Integer) null);
      Integer integer5 = RawTransaction.COMMIT;
      defaultDBColumn0.setSize(integer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("alter materialized viewsyscs_ia");
      PrintWriter printWriter0 = mockPrintWriter0.append('[');
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      defaultDBColumn0.getNotNullConstraint();
      String string0 = RawStoreFactory.PAGE_SIZE_STRING;
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-2446), "Y-1hmYCqT");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      dBDataType0.isNumber();
      Integer integer3 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter materialized viewsyscs_ia", defaultDBTable0, dBDataType0, integer2, (Integer) null);
      Integer integer4 = RawTransaction.COMMIT;
      defaultDBColumn0.setNullable(false);
      defaultDBColumn0.setSize(integer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("alter materialized viewsyscs_ia");
      PrintWriter printWriter0 = mockPrintWriter0.append('[');
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      DBNotNullConstraint dBNotNullConstraint0 = defaultDBColumn0.getNotNullConstraint();
      String[] stringArray0 = new String[9];
      SQLUtil.parseColumnTypeAndSize("alter materialized viewsyscs_ia");
      SQLUtil.parseColumnTypeAndSize("*1<GK{:vEWll/xOpvb");
      String string0 = SQLUtil.innerJoin("z-!", stringArray0, "*1<GK{:vEWll/xOpvb", "create table", stringArray0);
      assertEquals("*1<GK{:vEWll/xOpvb as create table on z-!.null = create table.null and z-!.null = create table.null and z-!.null = create table.null and z-!.null = create table.null and z-!.null = create table.null and z-!.null = create table.null and z-!.null = create table.null and z-!.null = create table.null and z-!.null = create table.null", string0);
      
      String string1 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("alter materialized viewsyscs_ia NOT NULL", string1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-2446), "Y-1hmYCqT");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      dBDataType0.isNumber();
      Integer integer3 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter materialized viewsyscs_ia", defaultDBTable0, dBDataType0, integer2, (Integer) null);
      Integer integer4 = RawTransaction.COMMIT;
      defaultDBColumn0.setNullable(false);
      defaultDBColumn0.setSize(integer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("alter materialized viewsyscs_ia");
      PrintWriter printWriter0 = mockPrintWriter0.append('[');
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      defaultDBColumn0.getNotNullConstraint();
      SQLUtil.parseColumnTypeAndSize("alter materialized viewsyscs_ia");
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "select into,");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesDataOrStructure("select into,");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "select into,");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select intotwfcg^fm,0l", defaultDBTable0, (-548), "select into,");
      defaultDBTable0.addColumn(defaultDBColumn0);
      StringBuilder stringBuilder1 = new StringBuilder();
      SQLUtil.normalize("altrindex~=+i,;rwb=6-%zwx'", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.removeComments("select intotwfcg^fm,0l");
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      SQLUtil.renderColumnNames(list0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("select intotwfcg^fm,0l");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",");
      StringReader stringReader0 = new StringReader("e$9h&-Y-H+");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 786.056;
      int int0 = RecordHandle.DEALLOCATE_PROTECTION_HANDLE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e$9h&-Y-H+");
      streamTokenizer0.wordChars(2883, 2);
      streamTokenizer0.commentChar((-343));
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(" (", 57);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String string0 = "selecti";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("selecti", defaultDBTable0, (-2375), ",");
      String string1 = "q!ZlC";
      defaultDBColumn0.setName("q!ZlC");
      defaultDBColumn0.setTable(defaultDBTable0);
      defaultDBColumn0.isEquivalent(defaultDBTable0);
      defaultDBTable0.addColumn(defaultDBColumn0);
      defaultDBTable0.getCheckConstraints();
      SQLUtil.isDDL("create unique index:\"4t3nf1r-&>vgo^#cf");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("aJ7D]|yN>QUot", stringBuilder0);
      Character character0 = Character.valueOf('C');
      SQLUtil.renderValue(character0);
      DefaultDBColumn defaultDBColumn1 = null;
      try {
        defaultDBColumn1 = new DefaultDBColumn("gW`BV][T-f_=ACL*", defaultDBTable0, 39, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesDataOrStructure("alter materialized viewsyscs_ia");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = new Integer((-2446));
      Integer integer4 = RawTransaction.COMMIT;
      Integer integer5 = RawTransaction.LOCK_ESCALATE;
      Integer integer6 = RawTransaction.LOCK_ESCALATE;
      Integer integer7 = RawTransaction.LOCK_ESCALATE;
      Integer integer8 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("5Qh:_bKd.]@$O?2", defaultDBTable0, 2887, "Y-1hmYCqT");
      SQLUtil.parseColumnTypeAndSize("alter materialized viewsyscs_ia");
      SQLUtil.mutatesDataOrStructure(" WHERE ");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Y-1hmYCqT";
      stringArray0[1] = "create materialized view";
      stringArray0[2] = "NpI9|s.{k<X9Q.";
      SQLUtil.renderColumnListWithTableName("Y-1hmYCqT", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      String[] stringArray1 = new String[5];
      stringArray1[0] = "5Qh:_bKd.]@$O?2";
      stringArray1[1] = "create materialized view";
      stringArray1[2] = " WHERE ";
      stringArray1[3] = "alter materialized viewsyscs_ia";
      stringArray1[4] = "Y-1hmYCqT.Y-1hmYCqT, Y-1hmYCqT.create materialized view, Y-1hmYCqT.NpI9|s.{k<X9Q.";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Y-1hmYCqT.Y-1hmYCqT, Y-1hmYCqT.create materialized view, Y-1hmYCqT.NpI9|s.{k<X9Q.", false, stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(Y-1hmYCqT, create materialized view, NpI9|s.{k<X9Q.)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Y-1hmYCqT\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
