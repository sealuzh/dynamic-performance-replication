/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 23:30:51 GMT 2018
 */

package com.google.gson.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.internal.LinkedTreeMap;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinkedTreeMap_ESTest extends LinkedTreeMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, String>();
      String string0 = linkedTreeMap_Node0.value;
      linkedTreeMap_EntrySet0.contains((Object) null);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Integer>();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node2 = linkedTreeMap_Node1.first();
      linkedTreeMap_Node2.first();
      linkedTreeMap0.findByObject(linkedTreeMap_Node1);
      LinkedTreeMap.Node<Integer, Integer> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Integer, Integer>();
      Integer integer0 = new Integer((-74));
      LinkedTreeMap.Node<Integer, Integer> linkedTreeMap_Node4 = new LinkedTreeMap.Node<Integer, Integer>(linkedTreeMap_Node3, integer0, linkedTreeMap_Node3, linkedTreeMap_Node3);
      Integer integer1 = linkedTreeMap_Node4.getKey();
      assertEquals((-74), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedTreeMap<String, Integer> linkedTreeMap1 = new LinkedTreeMap<String, Integer>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedTreeMap1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      linkedTreeMap_KeySet0.removeIf(predicate3);
      int int0 = (-2553);
      Integer integer0 = new Integer((-2553));
      Integer.compareUnsigned((-2553), 2);
      Integer.toUnsignedString((-2553));
      // Undeclared exception!
      try { 
        linkedTreeMap_KeySet0.add(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      linkedTreeMap0.find((Object) null, false);
      linkedTreeMap0.entrySet();
      LinkedTreeMap<Object, Integer> linkedTreeMap1 = new LinkedTreeMap<Object, Integer>();
      // Undeclared exception!
      try { 
        linkedTreeMap1.findByEntry((Map.Entry<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Integer> linkedTreeMap0 = new LinkedTreeMap<Object, Integer>(comparator0);
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>();
      linkedTreeMap1.get(linkedTreeMap0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap2 = new LinkedTreeMap<Object, Object>(comparator1);
      String string0 = "";
      linkedTreeMap1.putIfAbsent("", "");
      linkedTreeMap2.size = 0;
      String string1 = "";
      // Undeclared exception!
      try { 
        linkedTreeMap2.put((Object) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      Integer integer0 = new Integer((-1));
      Integer integer1 = Integer.valueOf((-1));
      Integer integer2 = new Integer(0);
      Integer.getInteger("com.google.gson.internal.LinkedTreeMap", integer2);
      Integer.getInteger("+~{TDE&57GJc60qvs\r", integer1);
      linkedTreeMap0.removeInternalByKey(integer0);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, String> linkedTreeMap1 = new LinkedTreeMap<String, String>(comparator1);
      Integer integer3 = new Integer((-886));
      linkedTreeMap1.remove((Object) integer3);
      LinkedTreeMap<Object, Object> linkedTreeMap2 = new LinkedTreeMap<Object, Object>();
      Integer integer4 = new Integer(0);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = linkedTreeMap2.find(integer4, true);
      linkedTreeMap_Node0.setValue(integer2);
      assertEquals(1, linkedTreeMap2.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.header;
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, false);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      assertEquals((-1), linkedTreeMap0.size());
      
      linkedTreeMap_EntrySet0.clear();
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      boolean boolean0 = linkedTreeMap_KeySet0.contains("");
      assertEquals(0, linkedTreeMap_KeySet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>(comparator0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedTreeMap_EntrySet0.forEach(consumer0);
      linkedTreeMap_EntrySet0.remove("\"$@ZZnv~P|ty");
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.remove(linkedTreeMap_EntrySet0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet1.remove(linkedTreeMap_KeySet0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, Integer> linkedTreeMap1 = new LinkedTreeMap<Integer, Integer>(comparator1);
      Integer integer0 = new Integer(1343);
      Integer integer1 = Integer.getInteger("lr#A/2[kao*Z!<90", integer0);
      Integer integer2 = new Integer(4486);
      Integer integer3 = new Integer(615);
      Integer.getInteger("lr#A/2[kao*Z!<90", integer3);
      linkedTreeMap1.put(integer1, integer2);
      assertEquals(1, linkedTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      boolean boolean0 = linkedTreeMap_KeySet0.remove(comparator0);
      assertFalse(boolean0);
      assertEquals(0, linkedTreeMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, String>();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, String>(linkedTreeMap_Node0, linkedTreeMap_Node0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node2 = linkedTreeMap_Node1.parent;
      assertNotNull(linkedTreeMap_Node2);
      
      linkedTreeMap_Node1.height = (-1410);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node3 = linkedTreeMap_Node2.first();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node4 = linkedTreeMap_Node3.last();
      assertNotNull(linkedTreeMap_Node4);
      
      linkedTreeMap_Node4.first();
      LinkedTreeMap<Integer, String> linkedTreeMap0 = new LinkedTreeMap<Integer, String>();
      linkedTreeMap_Node1.value = "";
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      Set<Integer> set0 = linkedTreeMap0.keySet();
      assertNotNull(set0);
      
      linkedTreeMap_KeySet0.size();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.remove(linkedTreeMap_Node2);
      assertSame(linkedTreeMap_Node2, linkedTreeMap_Node4);
      assertFalse(boolean0);
      
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>();
      linkedTreeMap1.clear();
      assertEquals(0, linkedTreeMap1.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Integer> linkedTreeMap2 = new LinkedTreeMap<String, Integer>(comparator0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap2.new EntrySet();
      int int0 = linkedTreeMap_EntrySet1.size();
      LinkedTreeMap<String, Object> linkedTreeMap3 = new LinkedTreeMap<String, Object>((Comparator<? super String>) null);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node5 = linkedTreeMap3.header;
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node6 = new LinkedTreeMap.Node<String, Object>(linkedTreeMap_Node5, "", linkedTreeMap_Node5, linkedTreeMap_Node5);
      String string0 = linkedTreeMap_Node6.toString();
      assertEquals("=null", string0);
      
      LinkedTreeMap.KeySet linkedTreeMap_KeySet1 = linkedTreeMap2.new KeySet();
      int int1 = linkedTreeMap_KeySet1.size();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      Set<String> set0 = linkedTreeMap0.keySet();
      assertNotNull(set0);
      
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.header;
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.clear();
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      linkedTreeMap0.size = (-40);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("", linkedTreeMap0);
      Map.Entry.comparingByValue();
      boolean boolean0 = linkedTreeMap_EntrySet0.remove(abstractMap_SimpleEntry0);
      assertEquals((-40), linkedTreeMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, Integer> linkedTreeMap0 = new LinkedTreeMap<Integer, Integer>(comparator0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>(comparator1);
      linkedTreeMap1.size();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Integer>();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node2 = linkedTreeMap_Node1.first();
      Integer integer0 = new Integer(0);
      Integer.toUnsignedString(1869);
      linkedTreeMap_Node2.setValue(integer0);
      linkedTreeMap1.keySet();
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Integer> linkedTreeMap2 = new LinkedTreeMap<String, Integer>(comparator2);
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Integer> linkedTreeMap3 = new LinkedTreeMap<Object, Integer>(comparator3);
      linkedTreeMap2.findByObject(linkedTreeMap3);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.clear();
      LinkedTreeMap.Node<Integer, Integer> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Integer, Integer>();
      LinkedTreeMap.Node<Integer, Integer> linkedTreeMap_Node4 = linkedTreeMap_Node3.first();
      LinkedTreeMap.Node<Integer, Integer> linkedTreeMap_Node5 = linkedTreeMap_Node4.last();
      LinkedTreeMap.Node<Integer, Integer> linkedTreeMap_Node6 = linkedTreeMap_Node5.last();
      assertSame(linkedTreeMap_Node6, linkedTreeMap_Node5);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, Integer> linkedTreeMap0 = new LinkedTreeMap<Integer, Integer>(comparator0);
      Integer integer0 = new Integer(2391);
      linkedTreeMap0.removeInternalByKey(integer0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.iterator();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.clear();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet1 = linkedTreeMap0.new KeySet();
      boolean boolean0 = linkedTreeMap_KeySet1.contains(linkedTreeMap_EntrySet0);
      assertFalse(boolean0);
      
      LinkedTreeMap.KeySet linkedTreeMap_KeySet2 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet2.addAll(linkedTreeMap_KeySet0);
      linkedTreeMap_KeySet2.contains(linkedTreeMap0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      linkedTreeMap_Node0.first();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>(comparator1);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = linkedTreeMap1.removeInternalByKey(linkedTreeMap_KeySet1);
      assertEquals(0, linkedTreeMap0.size());
      assertNull(linkedTreeMap_Node1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Integer> linkedTreeMap1 = new LinkedTreeMap<Object, Integer>(comparator0);
      LinkedTreeMap<String, String> linkedTreeMap2 = new LinkedTreeMap<String, String>((Comparator<? super String>) null);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = linkedTreeMap2.find("", true);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node0, "", linkedTreeMap_Node0, linkedTreeMap_Node0);
      String string0 = linkedTreeMap_Node1.key;
      linkedTreeMap1.removeInternalByKey("");
      linkedTreeMap1.isEmpty();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap2.new KeySet();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, String>();
      linkedTreeMap_Node2.last();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap2.new EntrySet();
      linkedTreeMap_EntrySet0.contains(linkedTreeMap_Node0);
      int int0 = linkedTreeMap_KeySet0.size();
      assertEquals(1, linkedTreeMap2.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("G`}Z?]',~wl9x ", "G`}Z?]',~wl9x ");
      boolean boolean0 = linkedTreeMap_EntrySet0.contains(abstractMap_SimpleImmutableEntry0);
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.prev;
      linkedTreeMap0.root = linkedTreeMap_Node1;
      boolean boolean0 = linkedTreeMap_EntrySet0.remove("com.google.gson.internal.LinkedTreeMap");
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.clear();
      assertEquals(0, linkedTreeMap_KeySet0.size());
      
      LinkedTreeMap.KeySet linkedTreeMap_KeySet1 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet1.iterator();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.KeySet linkedTreeMap_KeySet2 = linkedTreeMap0.new KeySet();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, String>();
      linkedTreeMap_Node2.last();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      boolean boolean1 = linkedTreeMap_EntrySet1.contains(linkedTreeMap_Node0);
      assertTrue(boolean1 == boolean0);
      
      LinkedTreeMap.KeySet linkedTreeMap_KeySet3 = linkedTreeMap0.new KeySet();
      int int0 = linkedTreeMap_KeySet3.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(anyString() , anyString());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator1);
      linkedTreeMap0.put("", "");
      linkedTreeMap0.get(comparator0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.iterator();
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, Object>(linkedTreeMap_Node0, "key == null", linkedTreeMap_Node0, linkedTreeMap_Node0);
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>((Comparator<? super String>) null);
      // Undeclared exception!
      try { 
        linkedTreeMap0.removeInternal(linkedTreeMap_Node1, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, String>();
      Object object0 = new Object();
      linkedTreeMap_Node0.equals(object0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap<Integer, Object> linkedTreeMap2 = new LinkedTreeMap<Integer, Object>();
      Integer integer0 = new Integer(1733);
      linkedTreeMap2.find(integer0, false);
      LinkedTreeMap<Object, Integer> linkedTreeMap3 = new LinkedTreeMap<Object, Integer>(comparator0);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Integer>();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node2 = linkedTreeMap_Node1.first();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, String> linkedTreeMap4 = new LinkedTreeMap<Object, String>(comparator1);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node3 = linkedTreeMap3.header;
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node4 = new LinkedTreeMap.Node<Object, Integer>(linkedTreeMap_Node2, linkedTreeMap4, linkedTreeMap_Node3, linkedTreeMap_Node1);
      // Undeclared exception!
      try { 
        linkedTreeMap3.removeInternal(linkedTreeMap_Node4, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Integer> linkedTreeMap0 = new LinkedTreeMap<Object, Integer>(comparator0);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node0 = linkedTreeMap0.header;
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      linkedTreeMap0.remove((Object) linkedTreeMap_Node0);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, Integer>(linkedTreeMap_Node1, linkedTreeMap_Node0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap_Node2.parent = linkedTreeMap_Node0;
      boolean boolean0 = linkedTreeMap_Node2.equals(linkedTreeMap_Node1);
      assertFalse(boolean0);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, String>();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node1 = linkedTreeMap_Node0.first();
      Object object0 = new Object();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, String>(linkedTreeMap_Node1, object0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node3 = linkedTreeMap_Node2.last();
      boolean boolean0 = linkedTreeMap_Node3.equals(linkedTreeMap_Node2);
      assertTrue(boolean0);
      assertFalse(linkedTreeMap_Node1.equals((Object)linkedTreeMap_Node3));
      
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>();
      assertEquals(0, linkedTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, String>();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node2 = linkedTreeMap_Node1.first();
      linkedTreeMap_Node2.equals(linkedTreeMap_Node1);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node3 = null;
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node4 = null;
      try {
        linkedTreeMap_Node4 = new LinkedTreeMap.Node<String, Object>((LinkedTreeMap.Node<String, Object>) null, (String) null, (LinkedTreeMap.Node<String, Object>) null, (LinkedTreeMap.Node<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap$Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      Object object0 = new Object();
      linkedTreeMap0.put("com.google.gson.internal.LinkedTreeMap", object0);
      linkedTreeMap0.remove((Object) "[^6lF`");
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      linkedTreeMap0.put("com.google.gson.internal.LinkedTreeMap", "com.google.gson.internal.LinkedTreeMap");
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.find(",`YYL", true);
      Object object0 = linkedTreeMap0.put("", linkedTreeMap_Node0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, Object>(linkedTreeMap_Node0, "key = null", linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap_Node0.left = linkedTreeMap_Node1;
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>((Comparator<? super String>) null);
      linkedTreeMap0.removeInternal(linkedTreeMap_Node1, false);
      assertEquals((-1), linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, String>();
      Object object0 = new Object();
      linkedTreeMap_Node0.equals(object0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2352).when(comparator0).compare(anyString() , anyString());
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>(comparator0);
      linkedTreeMap1.find("TU--YYQA-", true);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap2 = new LinkedTreeMap<Object, Object>(comparator1);
      linkedTreeMap1.put("bc+[(e", linkedTreeMap_Node0);
      assertEquals(2, linkedTreeMap1.size());
      
      linkedTreeMap2.keySet();
      assertEquals(0, linkedTreeMap2.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.header;
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, String>();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node2 = linkedTreeMap_Node1.last();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Object, String>(linkedTreeMap_Node2, linkedTreeMap_Node0, linkedTreeMap_Node1, linkedTreeMap_Node2);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node4 = linkedTreeMap_Node3.first();
      Integer.getInteger("");
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node5 = new LinkedTreeMap.Node<Object, String>(linkedTreeMap_Node4, (Object) null, linkedTreeMap_Node2, linkedTreeMap_Node4);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node6 = linkedTreeMap_Node5.last();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node7 = linkedTreeMap_Node4.first();
      boolean boolean0 = linkedTreeMap_Node7.equals(linkedTreeMap_Node6);
      assertNotSame(linkedTreeMap_Node6, linkedTreeMap_Node2);
      assertTrue(linkedTreeMap_Node6.equals((Object)linkedTreeMap_Node2));
      assertFalse(boolean0);
      assertFalse(linkedTreeMap_Node6.equals((Object)linkedTreeMap_Node7));
      
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>();
      assertEquals(0, linkedTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>((Comparator<? super String>) null);
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>((Comparator<? super String>) null);
      linkedTreeMap1.put("", "");
      // Undeclared exception!
      try { 
        linkedTreeMap1.find((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-815), (-815), (-612), 130, 2).when(comparator1).compare(anyString() , anyString());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator1);
      linkedTreeMap0.put("", "");
      linkedTreeMap0.find("", true);
      linkedTreeMap0.put("", (Object) null);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.put("", (Object) null);
      linkedTreeMap0.find("", false);
      linkedTreeMap0.put("+NLX>;-ei", (Object) null);
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>();
      // Undeclared exception!
      try { 
        linkedTreeMap1.findByEntry((Map.Entry<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      linkedTreeMap0.put("", "");
      linkedTreeMap0.find("1", true);
      Object object0 = linkedTreeMap0.put("a+boY[pqi^RS k`8z&", "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.find("", true);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, String>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap0.putIfAbsent("c&&UE9nai/", "c&&UE9nai/");
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      linkedTreeMap_EntrySet0.removeIf(predicate1);
      linkedTreeMap_EntrySet0.contains("");
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, String>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap0.putIfAbsent("c&&UE9nai/", "c&&UE9nai/");
      assertEquals(1, linkedTreeMap0.size());
      
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      linkedTreeMap_EntrySet0.removeIf(predicate1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedTreeMap_Node0.equals((Object) null);
      LinkedTreeMap<Integer, String> linkedTreeMap1 = new LinkedTreeMap<Integer, String>(comparator0);
      linkedTreeMap1.values();
      linkedTreeMap1.findByEntry(linkedTreeMap_Node0);
      Object object1 = new Object();
      int int0 = linkedTreeMap1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>();
      linkedTreeMap1.put("", linkedTreeMap_Node0);
      linkedTreeMap1.find("u*oXt~U'TFymX", true);
      Object object0 = linkedTreeMap1.put("/ZYD\"9e@[", "u*oXt~U'TFymX");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>(comparator1);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, Object>(linkedTreeMap_Node1, "key == null", linkedTreeMap_Node1, linkedTreeMap_Node1);
      linkedTreeMap_Node1.left = linkedTreeMap_Node2;
      linkedTreeMap1.removeInternal(linkedTreeMap_Node1, false);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap1.new EntrySet();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap1.new KeySet();
      linkedTreeMap_KeySet0.iterator();
      assertEquals((-1), linkedTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, Object>(linkedTreeMap_Node0, "key == null", linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap_Node0.left = linkedTreeMap_Node1;
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, false);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.contains(linkedTreeMap_Node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      assertEquals(0, linkedTreeMap0.size());
      
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      String string0 = linkedTreeMap_Node0.setValue("key == null");
      assertNull(string0);
      
      boolean boolean0 = linkedTreeMap_Node0.equals(linkedTreeMap_Node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      String string0 = linkedTreeMap_Node0.setValue("key == null");
      assertNull(string0);
      
      boolean boolean0 = linkedTreeMap_Node0.equals(linkedTreeMap_Node0);
      LinkedTreeMap<Integer, String> linkedTreeMap1 = new LinkedTreeMap<Integer, String>((Comparator<? super Integer>) null);
      boolean boolean1 = linkedTreeMap1.containsKey("key == null");
      assertFalse(boolean1 == boolean0);
      assertEquals(0, linkedTreeMap1.size());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>((Comparator<? super String>) null);
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>((Comparator<? super String>) null);
      linkedTreeMap1.put("", "");
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap1.find("A*+{y35$", true);
      linkedTreeMap1.put("A*+{y35$", (Object) null);
      linkedTreeMap1.removeInternal(linkedTreeMap_Node0, true);
      assertEquals(1, linkedTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      Object object0 = new Object();
      linkedTreeMap0.put("com.google.gson.internal5LinkedTfeeMap", object0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.find("[^6lF`", true);
      linkedTreeMap0.put("Tp!#!_bNIl;bk,}yy", linkedTreeMap_Node0);
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, true);
      assertEquals(2, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, String>();
      linkedTreeMap_Node0.first();
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.forEach(biConsumer0);
      linkedTreeMap0.put("e!>lT+Or_ ]_u_", "com.google.gson.internal.LinkedTreeMap");
      linkedTreeMap0.find("[^6lF`", true);
      linkedTreeMap0.put("com.google.gson.internal.LinkedTreeMap", linkedTreeMap_Node0);
      linkedTreeMap0.remove((Object) "com.google.gson.internal.LinkedTreeMap");
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      int int0 = linkedTreeMap_KeySet0.size();
      assertEquals(2, linkedTreeMap0.size());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, String>();
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      Object object0 = linkedTreeMap_Node0.key;
      linkedTreeMap0.put("", (Object) null);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = linkedTreeMap0.find("com.google.gson.internal.LinkedTreeMap", true);
      linkedTreeMap0.put("[^6lF`", linkedTreeMap_Node0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.remove(linkedTreeMap_Node1);
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>((Comparator<? super String>) null);
      linkedTreeMap0.find("M", true);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      Integer integer0 = new Integer((-155));
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("M", integer0);
      boolean boolean0 = linkedTreeMap_EntrySet0.contains(abstractMap_SimpleImmutableEntry0);
      assertEquals(1, linkedTreeMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, String>();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node1 = linkedTreeMap_Node0.first();
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.forEach(biConsumer0);
      linkedTreeMap0.put("e!>lT+Or_ ]_u_", "com.google.gson.internal.LinkedTreeMap");
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node3 = linkedTreeMap_Node2.last();
      linkedTreeMap_Node3.setValue("");
      linkedTreeMap_Node2.equals(linkedTreeMap_Node1);
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>(comparator0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap1.new KeySet();
      linkedTreeMap1.find((Object) null, true);
      Integer integer0 = new Integer(823);
      linkedTreeMap_KeySet0.contains(integer0);
      assertEquals(1, linkedTreeMap_KeySet0.size());
      
      linkedTreeMap_KeySet0.clear();
      assertEquals(0, linkedTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, String>();
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      linkedTreeMap0.put("com.google.gson.internal.LinkedTreeMap", "com.google.gson.internal.LinkedTreeMap");
      linkedTreeMap0.find("", true);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>((String) null, "");
      linkedTreeMap0.put("", abstractMap_SimpleEntry0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>("", "com.google.gson.internal.LinkedTreeMap");
      boolean boolean0 = linkedTreeMap_EntrySet0.contains(abstractMap_SimpleEntry1);
      assertEquals(2, linkedTreeMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, String>();
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      linkedTreeMap0.put("com.google.gson.internal.LinkedTreeMap", "com.google.gson.internal.LinkedTreeMap");
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("", "");
      linkedTreeMap0.put("", abstractMap_SimpleEntry0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>("", "com.google.gson.internal.LinkedTreeMap");
      boolean boolean0 = linkedTreeMap_EntrySet0.contains(abstractMap_SimpleEntry1);
      assertEquals(2, linkedTreeMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, Object>(linkedTreeMap_Node0, "key = null", linkedTreeMap_Node0, linkedTreeMap_Node0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>(comparator0);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = linkedTreeMap0.find("%mD{SLWi%O)+[A?dJDb", true);
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Integer, String>();
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node4 = linkedTreeMap_Node3.last();
      Integer integer0 = new Integer((-2));
      Integer.min((-2), 0);
      Integer integer1 = new Integer(13);
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node5 = new LinkedTreeMap.Node<Integer, String>(linkedTreeMap_Node3, integer1, linkedTreeMap_Node3, linkedTreeMap_Node3);
      linkedTreeMap_Node3.equals("%mD{SLWi%O)+[A?dJDb");
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node6 = new LinkedTreeMap.Node<String, Object>(linkedTreeMap_Node0, "%mD{SLWi%O)+[A?dJDb", linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap_KeySet0.remove(linkedTreeMap_Node6);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      Object object0 = new Object();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet2 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet2.contains(linkedTreeMap_Node4);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(linkedTreeMap_Node1);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>("%mD{SLWi%O)+[A?dJDb", linkedTreeMap_Node2);
      linkedTreeMap_Node2.equals(abstractMap_SimpleEntry1);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node7 = new LinkedTreeMap.Node<Object, String>();
      Object object1 = linkedTreeMap_Node7.getKey();
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, String>();
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      linkedTreeMap0.put("", "");
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.forEach(biConsumer0);
      Object object0 = new Object();
      linkedTreeMap0.put(" |{p$,Mxy$", "");
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = linkedTreeMap0.find("^k9&HIu:r4BVxC", true);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, Object>();
      linkedTreeMap0.put("key == null", linkedTreeMap_Node1);
      linkedTreeMap0.remove((Object) "");
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(linkedTreeMap_Node1);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("[^6lF`", (Object) null);
      linkedTreeMap_Node2.setValue(abstractMap_SimpleEntry0);
      linkedTreeMap0.find(";0>Jjdm'J^S", false);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Object, Integer>();
      linkedTreeMap_Node1.getValue();
      Object object1 = new Object();
      LinkedTreeMap<Object, Integer> linkedTreeMap1 = new LinkedTreeMap<Object, Integer>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap1.new EntrySet();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedTreeMap_EntrySet0.containsAll(linkedList0);
      linkedTreeMap_EntrySet0.remove(";0>Jjdm'J^S");
      Integer integer0 = new Integer((-1732));
      linkedTreeMap_EntrySet0.contains(integer0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_Node1.toString();
      assertEquals(3, linkedTreeMap0.size());
      
      LinkedTreeMap<Integer, Object> linkedTreeMap2 = new LinkedTreeMap<Integer, Object>();
      boolean boolean0 = linkedTreeMap_EntrySet0.remove(linkedTreeMap2);
      assertFalse(boolean0);
  }
}
