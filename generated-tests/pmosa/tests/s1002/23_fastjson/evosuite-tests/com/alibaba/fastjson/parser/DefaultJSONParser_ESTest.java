/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 19:40:54 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Timestamp;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.StringCharacterIterator;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("z");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : z
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Class<Short> class0 = Short.TYPE;
      HashSet<JavaBeanDeserializer> hashSet0 = new HashSet<JavaBeanDeserializer>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) hashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(">Hro{$[x|[");
      defaultJSONParser0.getObject("cNQ~&d@wdv/0L");
      Class<PageAttributes> class0 = PageAttributes.class;
      LinkedList<MockJapaneseDate> linkedList0 = new LinkedList<MockJapaneseDate>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : >Hro{$[x|[
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";Weho/39wB((Rda&'e", parserConfig0);
      defaultJSONParser0.setConfig(parserConfig0);
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      assertNotNull(dateFormat0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error, position at ");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.getDateFormat();
      defaultJSONParser0.getContext();
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.AllowISO8601DateFormat;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowComment;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.InitStringFieldAsEmpty;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.CustomMapDeserializer;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.IgnoreAutoType;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.AllowSingleQuotes;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.UseBigDecimal;
      featureArray0[6] = feature6;
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.autoTypeAccept", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error :", 126);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      Dimension dimension0 = new Dimension((-3569), 1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) dimension0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = '\\';
      charArray0[2] = '*';
      charArray0[3] = ']';
      boolean boolean0 = false;
      ParserConfig parserConfig0 = new ParserConfig(false);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      parserConfig0.setAutoTypeSupport(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, (-2130));
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.toLanguageTag();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      int int0 = (-685);
      classLoader0.setDefaultAssertionStatus(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[yz~5GD\"5q", parserConfig0, (-685));
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 15, 15);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getFieldTypeResolver();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) jSONReaderScanner0, (Object) charArray0);
      ParseContext parseContext1 = defaultJSONParser0.setContext(parseContext0, (Object) charArray0, (Object) null);
      defaultJSONParser0.setContext(parseContext1);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", propierty ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = 's';
      charArray0[2] = '>';
      charArray0[3] = 'R';
      charArray0[4] = ',';
      int int0 = 0;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      defaultJSONParser0.setConfig(parserConfig0);
      defaultJSONParser0.getExtraProcessors();
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      TreeSet<JavaBeanDeserializer> treeSet0 = new TreeSet<JavaBeanDeserializer>();
      parserConfig0.setAutoTypeSupport(true);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) treeSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("()Ljava/lang/Class;");
      int int0 = 0;
      defaultJSONParser0.setContext((Object) "()Ljava/lang/Class;", (Object) "()Ljava/lang/Class;");
      defaultJSONParser0.resolveStatus = 0;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ()Ljava/lang/Class;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "8U3bN *vA(J";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("8U3bN *vA(J");
      defaultJSONParser0.parse();
      defaultJSONParser0.getDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("vvq;9O%#Op}1^x");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")ubht96}]0'");
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ), pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = '\\';
      charArray0[3] = ']';
      ParserConfig parserConfig0 = new ParserConfig(true);
      int int0 = (-2542);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, (-2542));
      defaultJSONParser0.getExtraTypeProviders();
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      defaultJSONParser0.getResolveStatus();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra(parserConfig0, "fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("cNQ~&d@wdv/0L");
      Class<Short> class0 = Short.TYPE;
      Object object0 = new Object();
      defaultJSONParser0.getExtraTypeProviders();
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")ubht96}]0'");
      Class<Integer> class0 = Integer.TYPE;
      JSONScanner jSONScanner0 = new JSONScanner("", 1330);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(")ubht96}]0'", jSONScanner0, parserConfig0);
      defaultJSONParser1.parseObject((Type) class0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertNotNull(list0);
      
      defaultJSONParser0.parseKey();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("()Ljava/lang/Class;");
      ParserConfig parserConfig0 = new ParserConfig(true);
      parserConfig0.clearDeserializers();
      ParserConfig parserConfig1 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("", parserConfig1, (-1063));
      defaultJSONParser1.setResolveStatus(0);
      IdentityHashMap<Integer, Dimension> identityHashMap0 = new IdentityHashMap<Integer, Dimension>();
      Dimension dimension0 = new Dimension(0, 1702);
      identityHashMap0.put((Integer) 0, dimension0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual (, pos 1, json : ()Ljava/lang/Class;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error");
      defaultJSONParser0.getObject("a#={wT\"SkRLy7-#w'2z");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("I#Ho!O");
      defaultJSONParser0.setDateFormat("");
      Stack<GridBagConstraints> stack0 = new Stack<GridBagConstraints>();
      Feature feature0 = Feature.AutoCloseSource;
      // Undeclared exception!
      try { 
        Feature.valueOf("I#Ho!O");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.alibaba.fastjson.parser.Feature.I#Ho!O
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("I#Ho!O");
      defaultJSONParser0.resolveReference("");
      Stack<GridBagConstraints> stack0 = new Stack<GridBagConstraints>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) stack0, (Object) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName []
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("cNQ~&d@wdv/0L");
      JSONLexer jSONLexer0 = defaultJSONParser0.getLexer();
      assertEquals(1, jSONLexer0.token());
      
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertNotNull(list0);
      
      Feature feature0 = Feature.AllowArbitraryCommas;
      defaultJSONParser0.config(feature0, true);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("I#Ho!O");
      defaultJSONParser0.resolveReference("");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<Double> class0 = Double.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.parserAllFieldToCache(class0, linkedHashMap0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("$ref", parserConfig0);
      defaultJSONParser1.getSymbolTable();
      assertEquals(0, defaultJSONParser1.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("pciaLT", parserConfig0, 268);
      defaultJSONParser0.getInput();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("I#Ho!O");
      defaultJSONParser0.resolveReference("");
      Feature feature0 = Feature.IgnoreAutoType;
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("", parserConfig0, (-4318));
      defaultJSONParser1.isEnabled(feature0);
      Double double0 = new Double(758.075);
      Double.max(0.0, 0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((-4318), (-2033), mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")ubht96}]0'");
      Class<Integer> class0 = Integer.TYPE;
      JSONScanner jSONScanner0 = new JSONScanner(")ubht96}]0'", 1330);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(")ubht96}]0'", jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseInt error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.IntegerCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 48);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?`>");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      defaultJSONParser0.parse((Object) "NaN");
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN", parserConfig0, 0);
      defaultJSONParser0.parse((Object) "NaN");
      parserConfig0.compatibleWithJavaBean = false;
      defaultJSONParser0.getObject((String) null);
      defaultJSONParser0.setContext((Object) parserConfig0, (Object) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : NaN
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("clazz");
      defaultJSONParser0.setContext((Object) "clazz", (Object) "clazz");
      defaultJSONParser0.resolveReference("$_.6$'-D]");
      defaultJSONParser0.getExtraProcessors();
      Boolean boolean0 = new Boolean("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Boolean
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("clazz");
      defaultJSONParser0.setContext((Object) "clazz", (Object) "clazz");
      defaultJSONParser0.resolveReference("clazz");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : clazz
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("org.springframework.security.web.savedrequest.SavedCookie");
      String string0 = "";
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(35);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$_.6$'-D]", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(996);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("CK$d$5!pR");
      // Undeclared exception!
      try { 
        JSON.parseArray("CK$d$5!pR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("H2D33j`");
      defaultJSONParser0.getObject("H2D33j`");
      defaultJSONParser0.getDateFomartPattern();
      Class<TimeZone> class0 = TimeZone.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : H2D33j`
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Object object0 = new Object();
      JSONScanner jSONScanner0 = new JSONScanner("@Lrl^6^2{7Tp1o'|");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(object0, jSONScanner0, parserConfig0);
      Class<Dimension> class0 = Dimension.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : @Lrl^6^2{7Tp1o'|
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO: ");
      defaultJSONParser0.parseKey();
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = 'B';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 123);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Properties properties0 = new Properties();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) properties0, (Object) charArray0);
      properties0.put(jSONReaderScanner0, charArray0);
      parseContext0.toString();
      defaultJSONParser0.getExtraTypeProviders();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "ident");
      parseContext0.toString();
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.getDateFomartPattern();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. B
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      defaultJSONParser0.checkListResolve(linkedList0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("H D33j`");
      HashSet<MockDateFormat> hashSet0 = new HashSet<MockDateFormat>();
      hashSet0.spliterator();
      defaultJSONParser0.checkListResolve(hashSet0);
      defaultJSONParser0.getObject("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : H D33j`
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("clazz");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "clazz", (Object) "clazz");
      assertNotNull(parseContext0);
      
      Object object0 = defaultJSONParser0.resolveReference("$_.6$'-D]");
      assertNull(object0);
      
      defaultJSONParser0.getExtraProcessors();
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO : ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("setter not found, class ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$_.6$'-D]", (-2507));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      DateFormat.getInstance();
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept((-2507), 812);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("7Zh2n7/c5gCdu&t");
      ParserConfig parserConfig0 = new ParserConfig(true);
      defaultJSONParser0.config = parserConfig0;
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(2706, 2706);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual int
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO: ");
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODM:i");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      defaultJSONParser0.handleResovleTask(mockSimpleDateFormat0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(SnAo6GeT");
      defaultJSONParser0.getObject("(SnAo6GeT");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject0 = new JSONObject(2, true);
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      JSONObject jSONObject2 = jSONObject1.fluentClear();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) jSONObject2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual (, pos 0, fieldName {}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO: ");
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra("TODO: ", "TODO: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : TODO: 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      defaultJSONParser0.getResolveTaskList();
      Hashtable<PageAttributes, JSONScanner> hashtable0 = new Hashtable<PageAttributes, JSONScanner>();
      defaultJSONParser0.checkMapResolve(hashtable0, hashtable0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("atIP|3][");
      defaultJSONParser0.getConfig();
      Hashtable<StringCharacterIterator, MockDate> hashtable0 = new Hashtable<StringCharacterIterator, MockDate>();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      defaultJSONParser0.checkMapResolve(hashtable0, numberFormat0);
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      boolean boolean0 = defaultJSONParser0.isEnabled(feature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("7Zh2n7/c5gCdu&t");
      defaultJSONParser0.setResolveStatus(91);
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.parseKey();
      assertEquals(91, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("7Zh2n7/c5gCdu&pt");
      defaultJSONParser0.getDateFormat();
      Object object0 = new Object();
      defaultJSONParser0.getDateFormat();
      defaultJSONParser0.setDateFormat("7Zh2n7/c5gCdu&pt");
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", propierty ");
      // Undeclared exception!
      try { 
        JSON.parseObject(", propierty ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : , propierty 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = 't';
      charArray0[2] = 'W';
      charArray0[3] = '@';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 733);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(mockDateFormat0, jSONReaderScanner0, parserConfig0);
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseBoolean error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.BooleanCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      defaultJSONParser0.getDateFormat();
      defaultJSONParser0.parseKey();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "TODO: ";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO: ");
      Class<Short> class0 = Short.TYPE;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("clazz");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("}");
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : }
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO: ");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      defaultJSONParser0.checkListResolve(linkedList0);
      // Undeclared exception!
      try { 
        JSON.parseObject("TODO: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 4, json : TODO: 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      charArray0[1] = 'L';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 98);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Class<Short> class0 = Short.TYPE;
      HashSet<JavaBeanDeserializer> hashSet0 = new HashSet<JavaBeanDeserializer>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) hashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "3TC\\es[=W>c$r";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("3TCes[=W>c$r");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but int, pos 1, json : 3TCes[=W>c$r
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", propZir+$y");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) ", propZir+$y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - +, info : pos 9, json : , propZir+$y
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", propierty ");
      JSON.setDefaultTypeKey("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) ", propierty ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 12, json : , propierty 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("", parserConfig0, 110);
      defaultJSONParser1.close();
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Z");
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        JSON.parseObject(";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ;Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Z
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("wi7@-uK<76%tL*,0,");
      defaultJSONParser0.getExtraTypeProviders();
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ");
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.defaultClassLoader = null;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(", ", parserConfig0, 541);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Object) ", ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // setter not found, class java.lang.String, property null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      charArray0[1] = 'L';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 98);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Class<Short> class0 = Short.TYPE;
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      charArray0[1] = 'L';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 98);
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig.global = parserConfig0;
      parserConfig0.addDeny((String) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 98);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      PropertyProcessable propertyProcessable0 = null;
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      LinkedHashSet<ThrowableDeserializer> linkedHashSet0 = new LinkedHashSet<ThrowableDeserializer>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ", parserConfig0, 541);
      defaultJSONParser0.handleResovleTask(linkedHashSet0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.46");
      defaultJSONParser0.parseKey();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 4, json : 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODM:i");
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.getContext();
      ParseContext parseContext0 = new ParseContext((ParseContext) null, (Object) null, defaultJSONParser0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "TODM:i");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(SnAo6GeT");
      ChoiceFormat choiceFormat0 = new ChoiceFormat("}8nll");
      defaultJSONParser0.setContext((Object) "}8nll", (Object) choiceFormat0);
      defaultJSONParser0.getObject("}8nll");
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[3] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1557);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]_'m^w4u/ScD");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("$.clazxz");
      // Undeclared exception!
      try { 
        JSON.parseObject("]_'m^w4u/ScD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ]_'m^w4u/ScD
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODM:i");
      Class<Short> class0 = Short.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{{Ch:!O-(6o#BHpi0o", parserConfig0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      Insets insets0 = new Insets((-1068), 2, 1, 0);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints(0, 2, 1, 0, 2, 1, (-1651), 0, insets0, 46, 42);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse(propertyProcessable0, (Object) gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : {pos 1, json : {{Ch:!O-(6o#BHpi0o
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODM:i");
      Class<Short> class0 = Short.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{{Ch:!O-(6o#BHpi0o", parserConfig0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      defaultJSONParser0.parseKey();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 6, json : {{Ch:!O-(6o#BHpi0o
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/refect/Type;I)V");
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, ";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/refect/Type;I)V");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      String string0 = ", propZir+$y";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", propZir+$y");
      LinkedList<com.alibaba.fastjson.util.ParameterizedTypeImpl> linkedList0 = new LinkedList<com.alibaba.fastjson.util.ParameterizedTypeImpl>();
      defaultJSONParser0.checkListResolve(linkedList0);
      TreeMap<MockMinguoDate, ImageCapabilities> treeMap0 = new TreeMap<MockMinguoDate, ImageCapabilities>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual +
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ");
      Point point0 = new Point();
      Dimension dimension0 = new Dimension((-715), 13);
      Dimension dimension1 = new Dimension(dimension0);
      Rectangle rectangle0 = new Rectangle(point0, dimension1);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) ", ", (Object) rectangle0);
      defaultJSONParser0.setContext(parseContext0);
      defaultJSONParser0.lastBeanContext = null;
      defaultJSONParser0.popContext();
      SymbolTable symbolTable0 = defaultJSONParser0.getSymbolTable();
      assertNotNull(symbolTable0);
  }
}
