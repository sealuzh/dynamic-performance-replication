/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:31:56 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Edge;
import wheel.asm.Frame;
import wheel.asm.Label;
import wheel.asm.MethodWriter;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("-L!K-%>2hB=Pf");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ClassReader classReader0 = new ClassReader(byteArray0, (byte) (-8), (byte)0);
      classReader0.readShort(2);
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter(classReader0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-8);
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      int int0 = 51;
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        classReader0.readUTF8(51, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassReader classReader1 = new ClassReader(classReader0.b, 271, 4);
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter(classReader1, 1414);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ClassReader classReader0 = new ClassReader(byteArray0, (byte) (-8), (byte)0);
      classReader0.readShort(1);
      classReader0.getAccess();
      int int0 = Type.CHAR;
      ClassWriter classWriter0 = new ClassWriter((-3406));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      // Undeclared exception!
      try { 
        classReader0.accept((ClassVisitor) classAdapter0, (int) (byte) (-8));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      boolean boolean0 = ClassReader.WRITER;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wheel.asm.Edge");
      classReader0.getSuperName();
      ClassWriter classWriter0 = new ClassWriter(3323);
      Attribute[] attributeArray0 = new Attribute[1];
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, (-1311));
      String string0 = classWriter0.getCommonSuperClass("wheel.asm.Edge", "wheel.asm.Edge");
      assertEquals("wheel.asm.Edge", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = ClassReader.ANNOTATIONS;
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      classReader0.readLong(1);
      ClassWriter classWriter0 = new ClassWriter((-419));
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        classReader0.readConst(1, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = ClassReader.ANNOTATIONS;
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      classReader0.readLong(1);
      ClassWriter classWriter0 = new ClassWriter((-419));
      classReader0.accept((ClassVisitor) classWriter0, (-977));
      classReader0.readConst(2, (char[]) null);
      String string0 = classWriter0.thisName;
      // Undeclared exception!
      try { 
        classReader0.readByte(1137);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1137
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      boolean boolean0 = ClassReader.RESIZE;
      classReader0.getClassName();
      ClassWriter classWriter0 = new ClassWriter(271);
      classWriter0.cr = classReader0;
      classReader0.accept((ClassVisitor) classWriter0, (-419));
      // Undeclared exception!
      try { 
        classReader0.readConst(1, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      int int0 = 51;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      classReader0.readByte(51);
      int int1 = 904;
      // Undeclared exception!
      try { 
        classReader0.readShort(904);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 904
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      ClassReader classReader1 = new ClassReader(classReader0.b);
      ClassWriter classWriter0 = new ClassWriter(classReader1, 883);
      // Undeclared exception!
      try { 
        classWriter0.newNameType("org.apache.commons.io.filefilter.CanReadFileFilter", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = ClassReader.ANNOTATIONS;
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      classReader0.getSuperName();
      ClassReader classReader1 = new ClassReader(classReader0.b, 271, 30);
      ClassWriter classWriter0 = new ClassWriter(131);
      Attribute[] attributeArray0 = new Attribute[8];
      Attribute attribute0 = new Attribute("%6~%Kr<{'vKsH");
      char[] charArray0 = new char[8];
      charArray0[0] = 'H';
      charArray0[1] = 'U';
      charArray0[2] = '8';
      charArray0[3] = '>';
      charArray0[4] = 'S';
      charArray0[5] = 'l';
      charArray0[6] = '8';
      charArray0[7] = 'B';
      Label[] labelArray0 = new Label[2];
      Label label0 = classReader0.readLabel(1, labelArray0);
      labelArray0[0] = label0;
      Label label1 = label0.successor;
      labelArray0[1] = null;
      // Undeclared exception!
      try { 
        attribute0.read(classReader1, (-2075), 8, charArray0, 4, labelArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader0);
      assertEquals(32, classReader0.getAccess());
      
      boolean boolean1 = ClassReader.RESIZE;
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ClassReader.SIGNATURES;
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = ClassReader.FRAMES;
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(8);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classReader0.accept((ClassVisitor) classWriter0, 94);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(32, classReader0.getAccess());
      
      boolean boolean4 = ClassReader.FRAMES;
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(stringArray0);
      assertEquals(32, classReader0.getAccess());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader0.header);
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      
      int int0 = classReader0.readInt(601);
      assertEquals(1718185061, int0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader0.header);
      assertEquals(33, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      assertEquals(883, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      long long0 = classReader1.readLong(8);
      assertEquals(14929169100054538L, long0);
      assertEquals(883, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotSame(classReader1, classReader0);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      String string0 = classReader1.getClassName();
      assertEquals("org/apache/commons/io/filefilter/CanReadFileFilter", string0);
      assertEquals(883, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotSame(classReader1, classReader0);
      assertNotNull(string0);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(883);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      classReader0.accept((ClassVisitor) classWriter0, 2);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader0.header);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classReader0, classReader1);
      assertFalse(classReader0.equals((Object)classReader1));
      assertEquals(33, classReader0.getAccess());
      
      short short0 = classReader1.readShort(2);
      assertEquals((short) (-17730), short0);
      assertEquals(883, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotSame(classReader1, classReader0);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      String[] stringArray0 = classReader1.getInterfaces();
      assertEquals(883, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotSame(classReader1, classReader0);
      assertNotNull(stringArray0);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader0);
      assertEquals(32, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Attribute[] attributeArray0 = new Attribute[3];
      classReader0.accept((ClassVisitor) classWriter0, 8);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(32, classReader0.getAccess());
      
      int int0 = Type.ARRAY;
      assertEquals(9, int0);
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(stringArray0);
      assertEquals(32, classReader0.getAccess());
      
      String string0 = classWriter0.thisName;
      assertEquals("wheel/asm/Edge", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Label[] labelArray0 = new Label[0];
      // Undeclared exception!
      try { 
        classReader0.readLabel(3142, labelArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3142
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(883, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader1.header);
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(883, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(byteArrayInputStream0);
      assertFalse(classReader0.equals((Object)classReader1));
      assertEquals(33, classReader0.getAccess());
      assertEquals(1151, byteArrayInputStream0.available());
      
      ClassReader classReader2 = new ClassReader(byteArrayInputStream0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(883, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader2.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader2);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertEquals(33, classReader0.getAccess());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(33, classReader2.getAccess());
      
      boolean boolean1 = byteArrayInputStream0.markSupported();
      assertTrue(boolean1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(883, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader0, classReader2);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader0.equals((Object)classReader2));
      assertFalse(boolean1 == boolean0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(0, byteArrayInputStream0.available());
      
      int int0 = byteArrayInputStream0.read(classReader2.b);
      assertEquals((-1), int0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(883, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader2.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader0, classReader2);
      assertNotSame(classReader2, classReader0);
      assertNotSame(classReader2, classReader1);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader0.equals((Object)classReader2));
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertEquals(33, classReader0.getAccess());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(33, classReader2.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      classReader1.accept((ClassVisitor) classWriter0, 883);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader1.header);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classReader1, classReader2);
      assertNotSame(classReader1, classReader0);
      assertFalse(classReader1.equals((Object)classReader2));
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      String string0 = classReader1.getSuperName();
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader1.header);
      assertNotSame(classReader1, classReader2);
      assertNotSame(classReader1, classReader0);
      assertNotNull(string0);
      assertFalse(classReader1.equals((Object)classReader2));
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      String[] stringArray0 = classReader2.getInterfaces();
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(883, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader2.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader0, classReader2);
      assertNotSame(classReader2, classReader0);
      assertNotSame(classReader2, classReader1);
      assertNotNull(stringArray0);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader0.equals((Object)classReader2));
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertEquals(33, classReader0.getAccess());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(33, classReader2.getAccess());
      
      classReader1.accept((ClassVisitor) classWriter0, 12);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader1.header);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classReader1, classReader2);
      assertNotSame(classReader1, classReader0);
      assertFalse(classReader1.equals((Object)classReader2));
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      String string1 = classReader1.getSuperName();
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string1);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader1.header);
      assertNotSame(classReader1, classReader2);
      assertNotSame(classReader1, classReader0);
      assertNotNull(string1);
      assertFalse(classReader1.equals((Object)classReader2));
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      ClassReader classReader3 = null;
      try {
        classReader3 = new ClassReader(classReader2.b, 2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1175
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = ClassReader.ANNOTATIONS;
      assertTrue(boolean0);
      
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader0);
      assertEquals(32, classReader0.getAccess());
      
      boolean boolean1 = ClassReader.FRAMES;
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(string0);
      assertEquals(32, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader(classReader0.b, 271, 1);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(295, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(32, classReader0.getAccess());
      assertEquals(7, classReader1.getAccess());
      
      long long0 = classReader1.readLong(25);
      assertEquals(5715715819929927681L, long0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(295, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(32, classReader0.getAccess());
      assertEquals(7, classReader1.getAccess());
      
      int int0 = classReader1.getItem(1);
      assertEquals(282, int0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(295, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(32, classReader0.getAccess());
      assertEquals(7, classReader1.getAccess());
      
      // Undeclared exception!
      try { 
        classReader0.readByte(688);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 688
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = ClassReader.ANNOTATIONS;
      assertTrue(boolean0);
      
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(classReader0);
      assertEquals(32, classReader0.getAccess());
      
      boolean boolean1 = ClassReader.WRITER;
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string0 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(string0);
      assertEquals(32, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader(classReader0.b, 271, 30);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(295, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(32, classReader0.getAccess());
      assertEquals(7, classReader1.getAccess());
      
      String string1 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string1);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotSame(classReader0, classReader1);
      assertNotNull(string1);
      assertFalse(classReader0.equals((Object)classReader1));
      assertEquals(32, classReader0.getAccess());
      
      Label[] labelArray0 = new Label[4];
      Label label0 = new Label();
      assertNotNull(label0);
      
      labelArray0[0] = label0;
      Label label1 = classReader1.readLabel(0, labelArray0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(295, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      assertSame(label1, label0);
      assertNotNull(label1);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(32, classReader0.getAccess());
      assertEquals(7, classReader1.getAccess());
      
      labelArray0[1] = label1;
      Label label2 = label1.getFirst();
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(295, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      assertSame(label1, label0);
      assertSame(label1, label2);
      assertSame(label2, label0);
      assertSame(label2, label1);
      assertNotNull(label2);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(32, classReader0.getAccess());
      assertEquals(7, classReader1.getAccess());
      
      labelArray0[2] = label2;
      labelArray0[3] = label1;
      // Undeclared exception!
      try { 
        classReader1.readLabel(271, labelArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 271
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader0);
      assertEquals(32, classReader0.getAccess());
      
      boolean boolean0 = ClassReader.ANNOTATIONS;
      assertTrue(boolean0);
      
      String string0 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(string0);
      assertEquals(32, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertEquals(927, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      String[] stringArray0 = classReader1.getInterfaces();
      assertEquals(927, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotSame(classReader1, classReader0);
      assertNotNull(stringArray0);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      int int0 = Type.VOID;
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = ClassReader.ANNOTATIONS;
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader0);
      assertEquals(32, classReader0.getAccess());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean3 = ClassReader.WRITER;
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      boolean boolean4 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D&m16$X&eI");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      
      boolean boolean5 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      
      boolean boolean6 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wheel.asm.Edge");
      assertFalse(boolean6);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b, 180, 271);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(byteArrayInputStream0);
      assertEquals(32, classReader0.getAccess());
      assertEquals(230, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(bufferedInputStream0);
      assertEquals(32, classReader0.getAccess());
      assertEquals(230, byteArrayInputStream0.available());
      
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(bufferedInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 245
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader0);
      assertEquals(32, classReader0.getAccess());
      
      boolean boolean0 = ClassReader.ANNOTATIONS;
      assertTrue(boolean0);
      
      String string0 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(string0);
      assertEquals(32, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader(classReader0.b, 263, 1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(380, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(32, classReader0.getAccess());
      assertEquals(37, classReader1.getAccess());
      
      char[] charArray0 = new char[3];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = 'r';
      // Undeclared exception!
      try { 
        classReader0.readUTF8((-1582), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertNotNull(classReader0);
      assertEquals(32, classReader0.getAccess());
      
      long long0 = classReader0.readLong(8);
      assertEquals(7329344561092359L, long0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(32, classReader0.getAccess());
      
      String string0 = classReader0.getClassName();
      assertEquals("wheel/asm/Edge", string0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertNotNull(string0);
      assertEquals(32, classReader0.getAccess());
      
      String string1 = classReader0.getClassName();
      assertEquals("wheel/asm/Edge", string1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertNotNull(string1);
      assertEquals(32, classReader0.getAccess());
      
      int int0 = Type.INT;
      assertEquals(5, int0);
      
      String string2 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string2);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(32, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(73);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Attribute attribute0 = new Attribute("wheel/asm/Edge");
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(927, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      Attribute[] attributeArray0 = new Attribute[3];
      attributeArray0[0] = attribute0;
      String string3 = classReader1.getSuperName();
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(927, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotSame(classReader1, classReader0);
      assertNull(string3);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader(classReader0.b, 4, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18724
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertNotNull(classReader0);
      assertEquals(32, classReader0.getAccess());
      
      String string0 = classReader0.getClassName();
      assertEquals("wheel/asm/Edge", string0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertNotNull(string0);
      assertEquals(32, classReader0.getAccess());
      
      String string1 = classReader0.getClassName();
      assertEquals("wheel/asm/Edge", string1);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertNotNull(string1);
      assertEquals(32, classReader0.getAccess());
      
      String string2 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string2);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(32, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      Attribute[] attributeArray0 = new Attribute[2];
      String string3 = classReader1.getClassName();
      assertEquals("java/lang/Object", string3);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotSame(classReader1, classReader0);
      assertNotNull(string3);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals(33, classReader1.getAccess());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = classReader1.readInt(8);
      assertEquals(5113600, int0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotSame(classReader1, classReader0);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(classReader1, 8);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(33, classReader1.getAccess());
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("java/lang/Object");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertNotNull(classReader0);
      assertEquals(32, classReader0.getAccess());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '5';
      charArray0[1] = '&';
      ClassReader classReader1 = new ClassReader("wheel.asm.Edge");
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(271, classReader1.header);
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(32, classReader1.getAccess());
      
      String string0 = classReader1.getSuperName();
      assertEquals("java/lang/Object", string0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(271, classReader1.header);
      assertNotSame(classReader1, classReader0);
      assertNotNull(string0);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(32, classReader1.getAccess());
      
      ClassReader classReader2 = new ClassReader("java/lang/Object");
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader2.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader2);
      assertFalse(classReader2.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader0));
      assertEquals(33, classReader2.getAccess());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        classReader2.accept((ClassVisitor) null, 271);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader0);
      assertEquals(32, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("wheel.asm.Edge");
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(32, classReader1.getAccess());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      // Undeclared exception!
      try { 
        classReader1.readConst(8, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader0.header);
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader(classReader0.b);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(883, classReader1.header);
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(4);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classReader0.accept((ClassVisitor) classWriter0, 8);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader0.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classReader0, classReader1);
      assertFalse(classReader0.equals((Object)classReader1));
      assertEquals(33, classReader0.getAccess());
      
      classReader0.copyPool(classWriter0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader0.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classReader0, classReader1);
      assertFalse(classReader0.equals((Object)classReader1));
      assertEquals(33, classReader0.getAccess());
      
      String string0 = classReader1.getSuperName();
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(883, classReader1.header);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      assertNotNull(string0);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      
      int int0 = Frame.SHORT;
      assertEquals(16777228, int0);
      
      classReader1.accept((ClassVisitor) classWriter0, (-756));
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(883, classReader1.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      
      String string1 = classReader1.getSuperName();
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(883, classReader1.header);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      assertNotNull(string1);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      
      Attribute[] attributeArray0 = new Attribute[8];
      Attribute attribute0 = new Attribute("org/apache/commons/io/filefilter/AbstractFileFilter");
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      attributeArray0[0] = attribute0;
      classReader1.accept((ClassVisitor) classWriter1, attributeArray0, 24);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(883, classReader1.header);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      assertNotSame(classWriter1, classWriter0);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      
      int int1 = classReader0.getAccess();
      assertEquals(33, int1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader0.header);
      assertNotSame(classReader0, classReader1);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(int1 == int0);
      assertEquals(33, classReader0.getAccess());
      
      ClassReader classReader2 = new ClassReader("org/apache/commons/io/filefilter/AbstractFileFilter");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(612, classReader2.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader2);
      assertFalse(classReader2.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader0));
      assertEquals(1057, classReader2.getAccess());
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classAdapter0);
      assertFalse(classWriter0.equals((Object)classWriter1));
      
      classReader2.accept((ClassVisitor) classAdapter0, attributeArray0, 38);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(612, classReader2.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classReader2, classReader1);
      assertNotSame(classReader2, classReader0);
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classReader2.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(1057, classReader2.getAccess());
      
      int int2 = Frame.SHORT;
      assertEquals(16777228, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      // Undeclared exception!
      try { 
        classReader2.readConst(2324, (char[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2324
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(classReader0);
      assertEquals(32, classReader0.getAccess());
      
      String string0 = classReader0.getClassName();
      assertEquals("wheel/asm/Edge", string0);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(string0);
      assertEquals(32, classReader0.getAccess());
      
      String string1 = classReader0.getClassName();
      assertEquals("wheel/asm/Edge", string1);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(string1);
      assertEquals(32, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String string2 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string2);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(32, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      Attribute[] attributeArray0 = new Attribute[3];
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      assertNull(methodWriter0);
      
      classReader1.accept((ClassVisitor) classWriter0, attributeArray0, 581);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotSame(classReader1, classReader0);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      // Undeclared exception!
      try { 
        classReader0.readUTF8(927, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader0);
      assertEquals(32, classReader0.getAccess());
      
      String string0 = classReader0.getClassName();
      assertEquals("wheel/asm/Edge", string0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(string0);
      assertEquals(32, classReader0.getAccess());
      
      String string1 = classReader0.getClassName();
      assertEquals("wheel/asm/Edge", string1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(string1);
      assertEquals(32, classReader0.getAccess());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String string2 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string2);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(32, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      Attribute[] attributeArray0 = new Attribute[3];
      classReader1.accept((ClassVisitor) classWriter0, attributeArray0, 4);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotSame(classReader1, classReader0);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      // Undeclared exception!
      try { 
        classReader0.readInt(927);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 927
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(271, classReader0.header);
      assertNotNull(classReader0);
      assertEquals(32, classReader0.getAccess());
      
      long long0 = classReader0.readLong(8);
      assertEquals(7329344561092359L, long0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(32, classReader0.getAccess());
      
      String string0 = classReader0.getClassName();
      assertEquals("wheel/asm/Edge", string0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(271, classReader0.header);
      assertNotNull(string0);
      assertEquals(32, classReader0.getAccess());
      
      String string1 = classReader0.getClassName();
      assertEquals("wheel/asm/Edge", string1);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(271, classReader0.header);
      assertNotNull(string1);
      assertEquals(32, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String string2 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string2);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(271, classReader0.header);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(32, classReader0.getAccess());
      
      Attribute attribute0 = new Attribute("org.apache.commons.io.filefilter.CanReadFileFilter");
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      Attribute[] attributeArray0 = new Attribute[3];
      int int0 = 218;
      classReader1.accept((ClassVisitor) classWriter0, attributeArray0, 218);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotSame(classReader1, classReader0);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      charArray0[5] = '9';
      charArray0[2] = '9';
      charArray0[3] = '[';
      // Undeclared exception!
      try { 
        classReader0.readConst(218, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 218
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(classReader0);
      assertEquals(32, classReader0.getAccess());
      
      String string0 = classReader0.getClassName();
      assertEquals("wheel/asm/Edge", string0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(string0);
      assertEquals(32, classReader0.getAccess());
      
      String string1 = classReader0.getClassName();
      assertEquals("wheel/asm/Edge", string1);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(string1);
      assertEquals(32, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String string2 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string2);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(32, classReader0.getAccess());
      
      Attribute attribute0 = new Attribute("wheel/asm/Edge");
      assertNotNull(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      
      Attribute attribute1 = attribute0.next;
      assertNull(attribute1);
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      Attribute[] attributeArray0 = new Attribute[2];
      attributeArray0[0] = attribute0;
      Attribute attribute2 = attribute0.next;
      assertNull(attribute2);
      
      attributeArray0[0] = null;
      classReader1.accept((ClassVisitor) classWriter0, attributeArray0, 158);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotSame(classReader1, classReader0);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      String string3 = classReader1.getSuperName();
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotSame(classReader1, classReader0);
      assertNull(string3);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'J';
      charArray0[1] = 'p';
      // Undeclared exception!
      try { 
        classReader1.readUTF8(5, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      assertEquals(7802, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader0);
      assertEquals(32, classReader0.getAccess());
      
      long long0 = classReader0.readLong(7802);
      assertEquals(9008015311044609L, long0);
      assertEquals(7802, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(32, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(2526);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String string0 = classWriter0.thisName;
      assertNull(string0);
      
      int int0 = classReader0.readUnsignedShort(176);
      assertEquals(62728, int0);
      assertEquals(7802, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(32, classReader0.getAccess());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertNotNull(classReader0);
      assertEquals(32, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader(classReader0.b, 271, 4);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(295, classReader1.header);
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(32, classReader0.getAccess());
      assertEquals(7, classReader1.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(295);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String string0 = classReader0.getClassName();
      assertEquals("wheel/asm/Edge", string0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertNotSame(classReader0, classReader1);
      assertNotNull(string0);
      assertFalse(classReader0.equals((Object)classReader1));
      assertEquals(32, classReader0.getAccess());
      
      char[] charArray0 = new char[4];
      char char0 = 'w';
      charArray0[0] = 'w';
      char char1 = 'V';
      charArray0[1] = 'V';
      charArray0[2] = 'A';
      charArray0[3] = 'y';
      Object object0 = classReader1.readConst(2, charArray0);
      assertEquals(4.59179E-40F, object0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(295, classReader1.header);
      assertArrayEquals(new char[] {'w', 'V', 'A', 'y'}, charArray0);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      assertNotNull(object0);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(32, classReader0.getAccess());
      assertEquals(7, classReader1.getAccess());
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, classReader0.b);
      assertFalse(boolean0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertNotSame(classReader0, classReader1);
      assertFalse(classReader0.equals((Object)classReader1));
      assertEquals(32, classReader0.getAccess());
      
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      assertNull(methodWriter0);
      
      Attribute[] attributeArray0 = new Attribute[1];
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 2);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classReader0, classReader1);
      assertFalse(classReader0.equals((Object)classReader1));
      assertEquals(32, classReader0.getAccess());
      
      // Undeclared exception!
      try { 
        classReader1.getInterfaces();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
