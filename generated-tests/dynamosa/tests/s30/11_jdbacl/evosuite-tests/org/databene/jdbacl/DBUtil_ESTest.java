/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 19:49:14 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Proxy;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.regex.PatternSyntaxException;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.error.StandardException;
import org.apache.derby.iapi.services.io.FormatableProperties;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.apache.derby.impl.sql.compile.InsertNode;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.apache.derby.impl.sql.execute.rts.RealDeleteCascadeResultSetStatistics;
import org.apache.derby.impl.sql.execute.rts.RealDistinctScanStatistics;
import org.apache.derby.impl.sql.execute.rts.RealGroupedAggregateStatistics;
import org.apache.derby.impl.sql.execute.rts.RealHashJoinStatistics;
import org.apache.derby.impl.sql.execute.rts.RealHashScanStatistics;
import org.apache.derby.impl.sql.execute.rts.RealHashTableStatistics;
import org.apache.derby.impl.sql.execute.rts.RealInsertResultSetStatistics;
import org.apache.derby.impl.sql.execute.rts.RealInsertVTIResultSetStatistics;
import org.apache.derby.impl.sql.execute.rts.RealLastIndexKeyScanStatistics;
import org.apache.derby.impl.sql.execute.rts.RealRowResultSetStatistics;
import org.apache.derby.impl.sql.execute.rts.RealSortStatistics;
import org.apache.derby.impl.sql.execute.rts.RealTableScanStatistics;
import org.apache.derby.impl.sql.execute.rts.ResultSetStatistics;
import org.databene.commons.ErrorHandler;
import org.databene.commons.Level;
import org.databene.jdbacl.DBExecutionResult;
import org.databene.jdbacl.DBUtil;
import org.databene.jdbacl.JDBCConnectData;
import org.databene.jdbacl.ResultsWithMetadata;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.databene.jdbacl.model.TableContainerSupport;
import org.databene.jdbacl.model.TableHolder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.jni.EmbeddedGDSImpl;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jdbc.FBArray;
import org.firebirdsql.jdbc.FBCallableStatement;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.h2.Driver;
import org.h2.engine.SessionRemote;
import org.h2.jdbc.JdbcCallableStatement;
import org.h2.jdbc.JdbcSQLException;
import org.h2.jdbc.JdbcStatement;
import org.h2.jdbcx.JdbcDataSource;
import org.h2.jdbcx.JdbcXAConnection;
import org.h2.tools.Csv;
import org.h2.tools.Recover;
import org.h2.tools.SimpleResultSet;
import org.h2.tools.SimpleRowSource;
import org.h2.value.ValueLobDb;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.jdbc.jdbcResultSet;
import org.hsqldb.jdbcDriver;
import org.junit.runner.RunWith;
import org.postgresql.core.BaseConnection;
import org.postgresql.ds.PGConnectionPoolDataSource;
import org.postgresql.ds.PGPooledConnection;
import org.postgresql.jdbc4.Jdbc4Connection;
import org.postgresql.util.PSQLException;
import org.postgresql.xa.PGXAConnection;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("--<r=b");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      result0.setParameterData((Object[]) null);
      Result.newReleaseSavepointRequest("--<r=b");
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.queryAndSimplify("--<r=b", jdbcConnection0);
      DBUtil.assertAllDbResourcesClosed(false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "I'VrK1oV5UG)%`5T\"";
      Connection connection0 = null;
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      // Undeclared exception!
      try { 
        DBUtil.runScript("I'VrK1oV5UG)%`5T\"", '%', (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DBUtil.escape("TIMESTAMPADD");
      DBUtil.resetMonitors();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      String string0 = DBUtil.format(simpleResultSet0);
      assertEquals("", string0);
      
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, false);
      try { 
        DBUtil.prepareStatement((Connection) proxy0, "9-f2g", false, 2335, 335544726, (-743));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // java.lang.String@0000000004
         //
         verifyException("org.hsqldb.jdbc.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      DBUtil.format(simpleResultSet0);
      // Undeclared exception!
      try { 
        DBUtil.parseResultRow(simpleResultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.h2.tools.SimpleResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DBUtil.existsEnvironment("PZ8[;");
      DBUtil.assertAllDbResourcesClosed(false);
      DBUtil.resetMonitors();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.query("", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DBUtil.getOpenPreparedStatementCount();
      String string0 = "!";
      SessionRemote sessionRemote0 = new SessionRemote();
      String string1 = "";
      int int0 = 4499;
      MockIOException mockIOException0 = new MockIOException("");
      // Undeclared exception!
      try { 
        sessionRemote0.removeServer(mockIOException0, 0, 4499);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, false);
      // Undeclared exception!
      try { 
        DBUtil.close((Connection) proxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.proxy.PooledConnectionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        DBUtil.parseResultRow(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      DBUtil.close((Connection) jdbcConnection0);
      Class<Delayed> class0 = Delayed.class;
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray("TebIP1hZ=", class0, (Connection) jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DBUtil.assertAllDbResourcesClosed(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(session0).getIsolation();
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      jdbcConnection0.getTransactionIsolation();
      Statement statement0 = jdbcConnection0.createStatement();
      Proxy proxy0 = (Proxy)DBUtil.createLoggingStatementHandler(statement0, false);
      assertNotNull(proxy0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("--<r=x");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      result0.setParameterData((Object[]) null);
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Object object0 = DBUtil.queryAndSimplify("--<r=x", jdbcConnection0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DBUtil.getOpenPreparedStatementCount();
      int int0 = DBUtil.getOpenPreparedStatementCount();
      assertEquals(0, int0);
      
      System.setCurrentTimeMillis(0);
      Proxy proxy0 = (Proxy)DBUtil.createLoggingStatementHandler((Statement) null, true);
      assertNotNull(proxy0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.logMetaData((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      DBUtil.available("smZl[A\"',", "Using driver ", "Using driver ", "--org.hsqldb.jdbc.jdbcClob");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.wrapWithPooledConnection(jdbcConnection0, false);
      // Undeclared exception!
      try { 
        DBUtil.queryWithMetadata("]z,<%|Rqd,DRU,frS:", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Result.newReleaseSavepointRequest("--<r=b");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      // Undeclared exception!
      try { 
        DBUtil.countRows((String) null, (Connection) proxy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal exception in method: public java.sql.ResultSet org.databene.jdbacl.proxy.LoggingStatementHandler.executeQuery(java.lang.String) throws java.sql.SQLException
         //
         verifyException("org.databene.commons.ExceptionMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.queryLong(" nBT5.SF?h", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DBUtil.checkReadOnly(",J>&1LsCYPm>w", false);
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, true);
      Level level0 = Level.trace;
      ErrorHandler errorHandler0 = new ErrorHandler("--/,]NRPU'", level0);
      // Undeclared exception!
      try { 
        DBUtil.runScript(",J>&1LsCYPm>w", "(}V4qS)>Ss#a8}j&)Y", '2', (Connection) proxy0, false, errorHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: ,J>&1LsCYPm>w
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      // Undeclared exception!
      try { 
        DBUtil.getStatement(errorMessages0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error getting statement from result set
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Recover recover0 = new Recover();
      Csv.getInstance();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "tcNfwe5";
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      String string0 = DBUtil.format(simpleResultSet0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      Object[] objectArray0 = DBUtil.currentLine(simpleResultSet0);
      Object[] objectArray1 = DBUtil.parseResultRow(simpleResultSet0);
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      // Undeclared exception!
      try { 
        DBUtil.getConnectData("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition '.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Result result0 = Result.newSetSavepointRequest("Class not found: '");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      List<Object[]> list0 = DBUtil.query("Class not found: '", jdbcConnection0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.connect((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'null.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DBUtil.existsEnvironment("C+y JcF&Umt]`%Jx6e");
      DBUtil.assertAllDbResourcesClosed(false);
      DBUtil.resetMonitors();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      Driver.load();
      org.postgresql.Driver driver0 = new org.postgresql.Driver();
      driver0.connect("--<r=b", formatableProperties0);
      org.postgresql.Driver.setLogLevel((-1));
      try { 
        DBUtil.getMetaData((Connection) null, "", "", false, true, true, false, "--<r=b", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Class<jdbcDriver> class0 = jdbcDriver.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      Driver.load();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      Class<PGXAConnection> class1 = PGXAConnection.class;
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray("SELECT ID FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = ?", class1, (Connection) proxy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal exception in method: public java.sql.ResultSet org.databene.jdbacl.proxy.LoggingStatementHandler.executeQuery(java.lang.String) throws java.sql.SQLException
         //
         verifyException("org.databene.commons.ExceptionMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Result.newFreeStmtRequest(1475);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) jdbcConnection0, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DBUtil.close((Statement) null);
      // Undeclared exception!
      try { 
        DBUtil.connect((JDBCConnectData) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      int[] intArray0 = new int[3];
      intArray0[0] = 73;
      intArray0[1] = 73;
      intArray0[2] = (-1181);
      Result result0 = new Result((-1), intArray0, 73);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, false);
      DBUtil.close((Connection) proxy0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DBUtil.close((ResultSet) null);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "I'VrK1oV5UG)%`5T\"";
      Connection connection0 = null;
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      // Undeclared exception!
      try { 
        DBUtil.runScript("I'VrK1oV5UG)%`5T\"", '6', (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.query("ASSu", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      List<Object[]> list0 = new ColumnDescriptorList();
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      DBUtil.nextLine(simpleResultSet0);
      // Undeclared exception!
      try { 
        DBUtil.queryWithMetadata("There are unclosed database resources: ", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Class<jdbcDriver> class0 = jdbcDriver.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      Driver driver0 = new Driver();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      // Undeclared exception!
      try { 
        DBUtil.closeResultSetAndStatement(errorMessages0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error getting statement from result set
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      DBUtil.close((Connection) null);
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "NO", true, 0, 1600, (-2603));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: NO
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("--<r=b");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0, (Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.query("--<r=b", jdbcConnection0);
      // Undeclared exception!
      try { 
        DBUtil.querySingleRow("--<r=b", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "smZl[A\"',";
      DBUtil.available(";tH", "smZl[A\"',", "smZl[A\"',", "smZl[A\"',");
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator(internalTransactionCoordinator_MetaDataTransactionCoordinator0);
      internalTransactionCoordinator0.getConnection();
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate("8h*Bz'>~3'kk2v", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Result result0 = Result.newRollbackToSavepointRequest("x~u+");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      ResultsWithMetadata resultsWithMetadata0 = DBUtil.queryWithMetadata("'", jdbcConnection0);
      assertNotNull(resultsWithMetadata0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, true);
      assertNotNull(proxy0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultDBTable0.getPrimaryKeyConstraint();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "No JDBC driver class name specified";
      stringArray0[1] = "No JDBC driver class name specified";
      stringArray0[2] = "No JDBC driver class name specified";
      stringArray0[3] = "No JDBC driver class name specified";
      stringArray0[4] = "No JDBC driver class name specified";
      stringArray0[5] = "No JDBC driver class name specified";
      stringArray0[6] = "No JDBC driver class name specified";
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)108;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[7] = "No JDBC driver class name specified";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "No JDBC driver class name specified", true, stringArray0);
      // Undeclared exception!
      try { 
        DBUtil.equivalent((DBUniqueConstraint) null, dBPrimaryKeyConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Class<PGXAConnection> class0 = PGXAConnection.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      Driver driver0 = Driver.load();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      driver0.connect("SELECT ID FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = ?", formatableProperties0);
      // Undeclared exception!
      try { 
        DBUtil.query("--<Q", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("--'");
      DBSchema dBSchema0 = new DBSchema("8Nu;Y! _s\"Wg]XAnZt", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("--DU<;", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "|V";
      stringArray0[1] = "8Nu;Y! _s\"Wg]XAnZt";
      stringArray0[2] = "8Nu;Y! _s\"Wg]XAnZt";
      stringArray0[3] = "--DU<;";
      stringArray0[4] = "--DU<;";
      stringArray0[5] = "|V";
      stringArray0[6] = "8Nu;Y! _s\"Wg]XAnZt";
      stringArray0[7] = "--'";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "|V", true, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "|V", true, stringArray0);
      boolean boolean0 = DBUtil.equivalent(dBUniqueConstraint0, dBPrimaryKeyConstraint0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Result result0 = Result.newRollbackToSavepointRequest("-_<=x");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      result0.setParameterData((Object[]) null);
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      ErrorHandler errorHandler0 = new ErrorHandler("-_<=x");
      // Undeclared exception!
      try { 
        DBUtil.runScript("-_<=x", '[', (Connection) proxy0, true, errorHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal exception in method: public int org.databene.jdbacl.proxy.LoggingStatementHandler.executeUpdate(java.lang.String) throws java.sql.SQLException
         //
         verifyException("org.databene.commons.ExceptionMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char char0 = '/';
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("] child[", "C+y JcF&Umt]`%Jx6e", "C+y JcF&Umt]`%Jx6e", "C+y JcF&Umt]`%Jx6e");
      try { 
        DBUtil.connect(jDBCConnectData0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting C+y JcF&Umt]`%Jx6e failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Driver.load();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Result result0 = new Result((-10408512));
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Class<Delayed> class0 = Delayed.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      DBUtil.runScript("SELECT ID FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = ?", 'N', (Connection) jdbcConnection0, false, errorHandler0);
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) jdbcConnection0, "SYSTEMALIAS", true, 2157, (-10408512), (-10408512));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: SYSTEMALIAS
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/databene/null.env.properties");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "DU");
      // Undeclared exception!
      try { 
        DBUtil.connect((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC URL specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.parseAndSimplifyResultSet((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("--I'.env.properties");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "--I'");
      String string0 = "";
      // Undeclared exception!
      try { 
        DBUtil.querySingleRow("", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      String string0 = "0F,#<V$q_D6<a\\I";
      TableContainer tableContainer0 = new TableContainer("0F,#<V$q_D6<aI");
      Driver driver0 = new Driver();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      driver0.connect("0F,#<V$q_D6<aI", formatableProperties0);
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "0F,#<V$q_D6<aI", false, 90037, (-154581380), 2592);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Driver driver0 = new Driver();
      // Undeclared exception!
      try { 
        DBUtil.connect((JDBCConnectData) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("--I'.env.properties");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "--I'");
      try { 
        DBUtil.getMetaData("--I'", false, false, false, false, "|q", false, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Result result0 = Result.newSetSavepointRequest("--<r=b");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Object object0 = DBUtil.queryAndSimplify("--<r=b", jdbcConnection0);
      assertNotNull(object0);
      
      Result.newRollbackToSavepointRequest("");
      ErrorHandler errorHandler0 = new ErrorHandler("");
      try { 
        DBUtil.runScript("", "--<r=b", ':', (Connection) jdbcConnection0, true, errorHandler0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      try { 
        DBUtil.prepareStatement((Connection) jdbcConnection0, "ay", false, (-308), (-308), (-308));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // java.lang.String@0000000002
         //
         verifyException("org.hsqldb.jdbc.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Class<jdbcDriver> class0 = jdbcDriver.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      Driver driver0 = Driver.load();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      driver0.connect("^D", formatableProperties0);
      // Undeclared exception!
      try { 
        DBUtil.runScript("SELECT ID FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = ?", (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      Csv.getInstance();
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Class<JdbcXAConnection> class0 = JdbcXAConnection.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      errorHandler0.setLoggingStackTrace(false);
      DBExecutionResult dBExecutionResult0 = DBUtil.runScript("----Expected exactly one row, found more.", '', (Connection) jdbcConnection0, true, errorHandler0);
      assertNotNull(dBExecutionResult0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = DBUtil.executeUpdate("", (Connection) null);
      assertEquals(0, int0);
      
      LinkedList<Object[]> linkedList0 = new LinkedList<Object[]>();
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "1h", false, 0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("--<r=b");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      Recover recover0 = new Recover();
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      errorHandler0.setLoggingStackTrace(true);
      DBUtil.runScript("--<r=b", (Connection) jdbcConnection0, false, errorHandler0);
      int int0 = DBUtil.executeUpdate("org.apache.derby.impl.sql.execute.AggregateSortObserver", jdbcConnection0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "I'VrK1oV5UG)%`5T\"";
      Connection connection0 = null;
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      // Undeclared exception!
      try { 
        DBUtil.runScript("I'VrK1oV5UG)%`5T\"", '%', (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Class<jdbcDriver> class0 = jdbcDriver.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      Driver.load();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      Result result0 = new Result(3);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate("SELECT ID FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = ?", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DBUtil.executeUpdate("", (Connection) null);
      boolean boolean0 = true;
      try { 
        DBUtil.runScript("", "", '-', (Connection) null, true, (ErrorHandler) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DBUtil.existsEnvironment("");
      // Undeclared exception!
      try { 
        DBUtil.equivalent((DBUniqueConstraint) null, (DBPrimaryKeyConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Driver driver0 = new Driver();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      driver0.connect("o", formatableProperties0);
      DBUtil.close((Connection) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("--<r=b");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "--<r=b";
      objectArray0[1] = (Object) "--<r=b";
      objectArray0[2] = (Object) session0;
      objectArray0[3] = (Object) session0;
      objectArray0[4] = (Object) session0;
      objectArray0[5] = (Object) session0;
      objectArray0[6] = (Object) session0;
      result0.setParameterData(objectArray0);
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.query("--<r=b", jdbcConnection0);
      // Undeclared exception!
      try { 
        DBUtil.checkReadOnly("i6IN", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: i6IN
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Result.newReleaseSavepointRequest((String) null);
      DBSchema dBSchema0 = new DBSchema("--<r=b");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "M]", false, stringArray0);
      // Undeclared exception!
      try { 
        DBUtil.containsMandatoryColumn(dBUniqueConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Class<jdbcDriver> class0 = jdbcDriver.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      Driver.load();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      int[] intArray0 = new int[6];
      intArray0[0] = (-1181);
      intArray0[1] = 73;
      intArray0[2] = (-1181);
      intArray0[3] = 2249;
      intArray0[4] = 8;
      intArray0[5] = 335544577;
      Result result0 = new Result((-1181), intArray0, 73);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      DBUtil.close((Connection) jdbcConnection0);
      assertFalse(jdbcConnection0.isClosed());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("--<r=b");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-76);
      byteArray0[7] = (byte)41;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ErrorHandler errorHandler0 = new ErrorHandler("--<r=b");
      Level level0 = Level.info;
      ErrorHandler.setDefaultLevel(level0);
      result0.clear();
      DBUtil.runScript("--<r=b", 'A', (Connection) jdbcConnection0, false, errorHandler0);
      DBUtil.queryWithMetadata("--<r=b", jdbcConnection0);
      // Undeclared exception!
      try { 
        DBUtil.runScript("<Hn^Wzc`Y", "--<r=b", 'A', (Connection) jdbcConnection0, false, errorHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: <Hn^Wzc`Y
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Result result0 = Result.newRollbackToSavepointRequest(">*(4-dBvGm");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0, (Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.query(">*(4-dBvGm", jdbcConnection0);
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      // Undeclared exception!
      try { 
        DBUtil.runScript(">*(4-dBvGm", (Connection) jdbcConnection0, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      FBArray fBArray0 = new FBArray();
      fBArray0.getResultSet(2535L, 127);
      // Undeclared exception!
      try { 
        DBUtil.parseResultRow((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.firebirdsql.jdbc.AbstractConnection.env.properties");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "D<QwK9-t");
      DBUtil.getConnectData("org.firebirdsql.jdbc.AbstractConnection");
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      try { 
        pGConnectionPoolDataSource0.getConnection((String) null, "LHm.~{U'N&]+vZ");
        fail("Expecting exception: PSQLException");
      
      } catch(PSQLException e) {
         //
         // The connection attempt failed.
         //
         verifyException("org.postgresql.core.v3.ConnectionFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Result result0 = Result.newSetSavepointRequest("--<r=x");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0, (Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      result0.setParameterData((Object[]) null);
      Result.newReleaseSavepointRequest("--<r=x");
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.queryAndSimplify("<WINDOW FUNCTION>", jdbcConnection0);
      DBUtil.assertAllDbResourcesClosed(false);
      // Undeclared exception!
      try { 
        DBUtil.countRows("--g]`oW", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<String> class0 = String.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      Driver driver0 = Driver.load();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      driver0.connect("No JDBC driver class name provided", formatableProperties0);
      String string0 = null;
      // Undeclared exception!
      try { 
        DBUtil.runScript((String) null, (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      // Undeclared exception!
      try { 
        DBUtil.assertAllDbResourcesClosed(true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // There are unclosed database resources: 1 connection(s)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.close((Connection) jdbcConnection0);
      jdbcConnection0.commit();
      // Undeclared exception!
      try { 
        DBUtil.runScript("wR@|EtBu@q32fbTpE", "wR@|EtBu@q32fbTpE", (Connection) jdbcConnection0, false, (ErrorHandler) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: wR@|EtBu@q32fbTpE
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FBArray fBArray0 = new FBArray();
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      dBSchema0.addTable(defaultDBTable0);
      DBUtil.dependencyOrderedTables(dBSchema0);
      int int0 = DBUtil.getOpenResultSetCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DBUtil.existsEnvironment("t!SW^s(te{]*");
      // Undeclared exception!
      try { 
        DBUtil.nextLine((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Class<FBCallableStatement> class0 = FBCallableStatement.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      errorHandler0.setLoggingStackTrace(false);
      // Undeclared exception!
      try { 
        DBUtil.runScript("_9>AZg", "_9>AZg", (Connection) jdbcConnection0, false, errorHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: _9>AZg
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Class<jdbcDriver> class0 = jdbcDriver.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      Proxy proxy1 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) proxy0, true);
      Class<PGXAConnection> class1 = PGXAConnection.class;
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray((String) null, class1, (Connection) proxy1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal exception in method: public java.sql.ResultSet org.databene.jdbacl.proxy.LoggingStatementHandler.executeQuery(java.lang.String) throws java.sql.SQLException
         //
         verifyException("org.databene.commons.ExceptionMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, false);
      // Undeclared exception!
      try { 
        DBUtil.query("O[JA?Lry V1x4", (Connection) proxy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal exception in method: public java.sql.ResultSet org.databene.jdbacl.proxy.LoggingStatementHandler.executeQuery(java.lang.String) throws java.sql.SQLException
         //
         verifyException("org.databene.commons.ExceptionMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("--I'.env.properties");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "--I'");
      try { 
        DBUtil.getMetaData("--I'", true, true, true, true, "|q", true, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      // Undeclared exception!
      try { 
        DBUtil.runScript(".env.properties", (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("--<r=b");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Class<PGXAConnection> class0 = PGXAConnection.class;
      PGXAConnection[] pGXAConnectionArray0 = DBUtil.queryScalarArray("--<r=b", class0, (Connection) jdbcConnection0);
      assertEquals(0, pGXAConnectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DBUtil.available("?-zEJY!Bo`", "smZl[A\"',", "smZl[A\"',", "smZl[A\"',");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      // Undeclared exception!
      try { 
        DBUtil.queryWithMetadata("smZl[A\"',", (Connection) proxy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal exception in method: public java.sql.ResultSet org.databene.jdbacl.proxy.LoggingStatementHandler.executeQuery(java.lang.String) throws java.sql.SQLException
         //
         verifyException("org.databene.commons.ExceptionMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.querySingleRow("yZ,-qc/muYL?-@+H(", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, false);
      // Undeclared exception!
      try { 
        DBUtil.queryAndSimplify((String) null, (Connection) proxy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal exception in method: public java.sql.ResultSet org.databene.jdbacl.proxy.LoggingStatementHandler.executeQuery(java.lang.String) throws java.sql.SQLException
         //
         verifyException("org.databene.commons.ExceptionMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        DBUtil.currentLine(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("--<r=b");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0, (Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      Class<PGXAConnection> class0 = PGXAConnection.class;
      Result.newReleaseSavepointRequest("--<r=b");
      DBUtil.queryScalarArray("--<r=b", class0, (Connection) jdbcConnection0);
      // Undeclared exception!
      try { 
        DBUtil.queryWithMetadata("--<r=b", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "VIEW";
      DBUtil.available("VIEW", "-58,NvnK", "3d-wx;VDz~(T", "VIEW");
      jdbcDriver jdbcDriver0 = new jdbcDriver();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      formatableProperties0.put("3d-wx;VDz~(T", "-58,NvnK");
      EmbeddedGDSImpl embeddedGDSImpl0 = null;
      try {
        embeddedGDSImpl0 = new EmbeddedGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DBUtil.existsEnvironment("--<r=b");
      Connection connection0 = null;
      String string0 = ")";
      boolean boolean0 = false;
      try { 
        DBUtil.getMetaData((Connection) null, ")", "FV@633sji", false, true, false, false, "o$Jag|", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      Class<String> class0 = String.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      String string0 = "";
      try { 
        DBUtil.runScript("", "", (Connection) null, true, errorHandler0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      try { 
        DBUtil.getMetaData((Connection) null, (String) null, " nBT5.SF?h", false, false, false, false, (String) null, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("--<r=b");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0, (Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      DBUtil.queryWithMetadata("--SELECT ID FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = ?", jdbcConnection0);
      ErrorHandler errorHandler0 = new ErrorHandler("--SELECT ID FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = ?");
      DBUtil.runScript("--SELECT ID FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = ?", 'm', (Connection) jdbcConnection0, false, (ErrorHandler) null);
      // Undeclared exception!
      try { 
        DBUtil.queryWithMetadata("|KJ~UU9u3}tgW-:U", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("-z<r=b");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.countRows("-z<r=b", jdbcConnection0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a row.
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Result result0 = Result.newSetSavepointRequest("--<r=x");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      result0.setParameterData((Object[]) null);
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Object[] objectArray0 = DBUtil.querySingleRow("--<r=x", jdbcConnection0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      try { 
        DBUtil.connect((String) null, (String) null, (String) null, (String) null, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Result result0 = Result.newSetSavepointRequest("--<r=x");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      result0.setParameterData((Object[]) null);
      Result.newReleaseSavepointRequest("--<r=x");
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Session session1 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection1 = new jdbcConnection(session1);
      Class<PGXAConnection> class0 = PGXAConnection.class;
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray("--<r=x", class0, (Connection) jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DBUtil.executeUpdate("", (Connection) null);
      ErrorHandler errorHandler0 = new ErrorHandler("");
      try { 
        DBUtil.runScript("", "", '1', (Connection) null, true, errorHandler0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "--I'";
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      String string1 = "Fq";
      // Undeclared exception!
      try { 
        DBUtil.getMetaData("--I'", false, false, false, false, "Fq", false, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition '--I'.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.queryAndSimplify((String) null, jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ErrorHandler.getDefault();
      DBUtil.wrapWithPooledConnection((Connection) null, false);
      int int0 = DBUtil.getOpenConnectionCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      DBUtil.executeUpdate((String) null, jdbcConnection0);
      LinkedList<Object[]> linkedList0 = new LinkedList<Object[]>();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Result result0 = Result.newRollbackToSavepointRequest("x~u+");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      ResultsWithMetadata resultsWithMetadata0 = DBUtil.queryWithMetadata("x~u+", jdbcConnection0);
      assertNotNull(resultsWithMetadata0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DBUtil.close((Statement) null);
      Proxy proxy0 = (Proxy)DBUtil.createLoggingStatementHandler((Statement) null, false);
      assertNotNull(proxy0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = null;
      char char0 = '/';
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData((String) null, "/g-iHn+=SLAP0OX", (String) null, "/g-iHn+=SLAP0OX");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DBUtil.connect(jDBCConnectData0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC driver class name specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "WtK\"4", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: WtK\"4
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      String string0 = "U@bvieqtqCp_VeQafyK";
      boolean boolean0 = true;
      boolean boolean1 = false;
      try { 
        DBUtil.getMetaData((Connection) null, "U@bvieqtqCp_VeQafyK", "", false, true, false, true, "O", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      DBExecutionResult dBExecutionResult0 = DBUtil.runScript("", (Connection) null, true, errorHandler0);
      assertNotNull(dBExecutionResult0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      // Undeclared exception!
      try { 
        DBUtil.countRows("iyb6fIy:BGWvN++SB~rS", (Connection) proxy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal exception in method: public java.sql.ResultSet org.databene.jdbacl.proxy.LoggingStatementHandler.executeQuery(java.lang.String) throws java.sql.SQLException
         //
         verifyException("org.databene.commons.ExceptionMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Result result0 = Result.newReleaseSavepointRequest("--<=b");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0, result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.query("--<=b", jdbcConnection0);
      // Undeclared exception!
      try { 
        DBUtil.countRows("6d&mDaE}viH", jdbcConnection0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a row.
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("--<r=b");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Recover recover0 = new Recover();
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      DBExecutionResult dBExecutionResult0 = DBUtil.runScript("<r", (Connection) jdbcConnection0, false, errorHandler0);
      assertNotNull(dBExecutionResult0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockException mockException0 = new MockException("{*G5-}~~");
      Result result0 = new Result(mockException0, "{*G5-}~~");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      SQLException sQLException0 = new SQLException("O[JA?Lry V1x4", "{*G5-}~~", 2);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, false);
      try { 
        DBUtil.query("O[JA?Lry V1x4", (Connection) proxy0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // null org.evosuite.runtime.mock.java.lang.MockThrowable: {*G5-}~~ in statement [{*G5-}~~]
         //
         verifyException("org.hsqldb.jdbc.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("e%C,");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "e%C,");
      // Undeclared exception!
      try { 
        DBUtil.runScript("e%C,", (String) null, (Connection) null, false, (ErrorHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DBUtil.existsEnvironment("C+y JcF&Umt]`%Jx6e");
      DBUtil.assertAllDbResourcesClosed(false);
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      Object[] objectArray0 = DBUtil.currentLine(simpleResultSet0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        DBUtil.parseAndSimplifyResultSet(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("p}>i`)WqXI");
      tableContainer0.setName("M|");
      DBUtil.dependencyOrderedTables(tableContainer0);
      Level level0 = Level.fatal;
      ErrorHandler errorHandler0 = new ErrorHandler("select count(*) from ", level0);
      // Undeclared exception!
      try { 
        DBUtil.runScript("org.firebirdsql.gds.impl.GDSFactory", "org.firebirdsql.gds.impl.GDSFactory", '1', (Connection) null, false, errorHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: org.firebirdsql.gds.impl.GDSFactory
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DBUtil.executeUpdate("", (Connection) null);
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "^tD,j{B7pOi]Y#Ua", false, 90055, 244, 244);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Class<jdbcDriver> class0 = jdbcDriver.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      String string0 = "SELECT ID FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = ?";
      Driver.load();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)7;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      FormatableProperties formatableProperties0 = new FormatableProperties();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      Class<PGXAConnection> class1 = PGXAConnection.class;
      // Undeclared exception!
      try { 
        DBUtil.containsMandatoryColumn((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = true;
      Driver driver0 = Driver.load();
      int[] intArray0 = new int[4];
      intArray0[0] = (-224);
      intArray0[1] = 42;
      intArray0[2] = 48;
      intArray0[3] = 42;
      RealDistinctScanStatistics realDistinctScanStatistics0 = new RealDistinctScanStatistics((-358), 42, 42, (-358), (-1747L), (-510L), 0L, (-358), "_3363?/'(^d}L5,0m", "[Sa}%d:9SS{g=<", true, (-144531726), intArray0, "", "[Sa}%d:9SS{g=<", (Properties) null, "[Sa}%d:9SS{g=<", "", ":g8;'`Ik", "_3363?/'(^d}L5,0m", 0L, (-1.0));
      FormatableProperties formatableProperties0 = realDistinctScanStatistics0.scanProperties;
      driver0.connect("", formatableProperties0);
      // Undeclared exception!
      try { 
        DBUtil.queryLong("", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DBUtil.existsEnvironment("C+y JcF&Umt]`%Jx6e");
      DBUtil.assertAllDbResourcesClosed(false);
      DBUtil.resetMonitors();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      Driver.load();
      String string0 = "--<r=b";
      org.postgresql.Driver driver0 = new org.postgresql.Driver();
      driver0.connect("--<r=b", formatableProperties0);
      String string1 = "";
      org.postgresql.Driver.setLogLevel((-1));
      driver0.getPropertyInfo("Expected exactly one row, found more.", formatableProperties0);
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        DBUtil.countRows("Expected exactly one row, found more.", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      DBUtil.getStatement(simpleResultSet0);
      DBUtil.getOpenConnectionCount();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      // Undeclared exception!
      try { 
        constantActionActivation0.getCurrentConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      Object[] objectArray0 = DBUtil.currentLine(simpleResultSet0);
      List<Object[]> list0 = DBUtil.parseResultSet(simpleResultSet0);
      assertFalse(list0.contains(objectArray0));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        DBUtil.querySingleRow((String) null, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ResultSet resultSet0 = null;
      // Undeclared exception!
      try { 
        DBUtil.closeResultSetAndStatement((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.format((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.checkReadOnly((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.parseResultSet((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = new Boolean("O");
      // Undeclared exception!
      try { 
        DBUtil.runScript("O", "O", 'Z', (Connection) null, true, (ErrorHandler) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: O
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      DBUtil.executeUpdate("", (Connection) null);
      // Undeclared exception!
      try { 
        DBUtil.runScript("`9-X'oRR6P+&r,eN", "----", '2', (Connection) null, true, errorHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: `9-X'oRR6P+&r,eN
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("--<r=x");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      result0.setParameterData((Object[]) null);
      result0.add((Object[]) null);
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.querySingleRow("--<r=x", jdbcConnection0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // One-row database query returned multiple rows: --<r=x
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.checkReadOnly("INSERT INTO INFORMATION_SCHEMA.LOB_MAP(LOB, SEQ, BLOCK) VALUES(?, ?, ?)", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: INSERT INTO INFORMATION_SCHEMA.LOB_MAP(LOB, SEQ, BLOCK) VALUES(?, ?, ?)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Result result0 = Result.newRollbackToSavepointRequest("-y");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.close((Connection) jdbcConnection0);
      ResultSet resultSet0 = DBUtil.executeQuery((String) null, jdbcConnection0);
      Statement statement0 = DBUtil.getStatement(resultSet0);
      assertEquals(1, statement0.getResultSetHoldability());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DBUtil.executeUpdate("", (Connection) null);
      Level level0 = Level.info;
      ErrorHandler errorHandler0 = new ErrorHandler("!BvX,", level0);
      DBExecutionResult dBExecutionResult0 = DBUtil.runScript("", (Connection) null, true, errorHandler0);
      assertNotNull(dBExecutionResult0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        DBUtil.equivalent((DBUniqueConstraint) null, (DBPrimaryKeyConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DBUtil.executeUpdate("", (Connection) null);
      // Undeclared exception!
      try { 
        DBUtil.getMetaData((Connection) null, "", "", true, true, true, true, "Y23~<(l9s+?m4,", true);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 14
         // Y23~<(l9s+?m4,
         //               ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "----<r=b", false, (-308), (-308), (-308));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Result.newReleaseSavepointRequest("-z<r=b");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) jdbcConnection0, ")", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "No environment definition '";
      DBUtil.existsEnvironment("No environment definition '");
      DBUtil.available("No environment definition '", "No environment definition '", "No environment definition '", "No environment definition '");
      Recover recover0 = new Recover();
      Recover recover1 = new Recover();
      recover0.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "No environment definition '", false, (-789), (-789), (-93));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, false);
      // Undeclared exception!
      try { 
        DBUtil.countRows("----<r=b", (Connection) proxy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal exception in method: public java.sql.ResultSet org.databene.jdbacl.proxy.LoggingStatementHandler.executeQuery(java.lang.String) throws java.sql.SQLException
         //
         verifyException("org.databene.commons.ExceptionMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.executeQuery("rK'pf,K<!gE", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        DBUtil.nextLine(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet((SimpleRowSource) null);
      Object object0 = DBUtil.parseAndSimplifyResultSet(simpleResultSet0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MockException mockException0 = new MockException("----I'VrK1oV5UG)%`5T\"");
      Result result0 = new Result(mockException0, "----I'VrK1oV5UG)%`5T\"");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      try { 
        DBUtil.queryAndSimplify("?(j$uO +pX3fN", jdbcConnection0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // null org.evosuite.runtime.mock.java.lang.MockThrowable: ----I'VrK1oV5UG)%`5T\" in statement [----I'VrK1oV5UG)%`5T\"]
         //
         verifyException("org.hsqldb.jdbc.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Result result0 = Result.newRollbackToSavepointRequest("O>");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0, (Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.queryAndSimplify("\u0001\u016A", jdbcConnection0);
      // Undeclared exception!
      try { 
        DBUtil.queryScalar("DROP ALIAS IF EXISTS SYSTEM_COMBINE_BLOB", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.runScript("There are unclosed database resources: ", (Connection) null, true, (ErrorHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Result.newSetSavepointRequest((String) null);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.runScript((String) null, (String) null, (Connection) jdbcConnection0, false, (ErrorHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      Class<jdbcDriver> class0 = jdbcDriver.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DBUtil.checkReadOnly("", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DBUtil.assertAllDbResourcesClosed(false);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, false);
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) proxy0, "#6", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: #6
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DBUtil.getOpenConnectionCount();
      Csv csv0 = Csv.getInstance();
      jdbcClob jdbcClob0 = new jdbcClob("--");
      Reader reader0 = jdbcClob0.getCharacterStream();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "--";
      stringArray0[1] = "--";
      stringArray0[2] = "--";
      stringArray0[3] = "--";
      stringArray0[4] = "--";
      stringArray0[5] = "--";
      stringArray0[6] = "--";
      ResultSet resultSet0 = csv0.read(reader0, stringArray0);
      DBUtil.nextLine(resultSet0);
      assertTrue(resultSet0.wasNull());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      jdbcClob jdbcClob0 = new jdbcClob("No JDBC driver class name provided");
      Reader reader0 = jdbcClob0.getCharacterStream();
      String[] stringArray0 = new String[0];
      ResultSet resultSet0 = csv0.read(reader0, stringArray0);
      String string0 = DBUtil.format(resultSet0);
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        DBUtil.format(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "length:";
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, true);
      // Undeclared exception!
      try { 
        DBUtil.executeQuery("length:", (Connection) proxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "org.firebirdsql.jca.FBIncorrectXidException";
      boolean boolean0 = true;
      try { 
        DBUtil.connect("org.firebirdsql.jca.FBIncorrectXidException", "org.firebirdsql.jca.FBIncorrectXidException", "COMMENT", "--7vl)<", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting org.firebirdsql.jca.FBIncorrectXidException failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.query("6Xdrd,l@a@VAT", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      TableContainerSupport tableContainerSupport0 = new TableContainerSupport();
      DBUtil.dependencyOrderedTables(tableContainerSupport0);
      DBSchema dBSchema0 = new DBSchema("Er");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Er", dBSchema0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "Er";
      stringArray0[2] = null;
      stringArray0[3] = "Er";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "54", false, stringArray0);
      boolean boolean0 = DBUtil.equivalent(dBUniqueConstraint0, dBPrimaryKeyConstraint0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.queryString((PreparedStatement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FBArray fBArray0 = new FBArray();
      fBArray0.getResultSet();
      DBUtil.close((ResultSet) null);
      CompositeDBObject<DefaultDBTable> compositeDBObject0 = (CompositeDBObject<DefaultDBTable>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("CreateDataDictionaryVersion", compositeDBObject0);
      List<DBTable> list0 = DBUtil.dependencyOrderedTables(tableContainer0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "No environment definition '";
      DBUtil.existsEnvironment("No environment definition '");
      String string1 = "(mp\\";
      DBUtil.available("No environment definition '", "(mp", "(mp", "No environment definition '");
      String string2 = "<r=b";
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      String string3 = "M@4S#`wxa+sgL5(v}=1";
      Level level0 = Level.error;
      ErrorHandler errorHandler0 = new ErrorHandler("M@4S#`wxa+sgL5(v}=1", level0);
      // Undeclared exception!
      try { 
        DBUtil.runScript("<r=b", (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.queryWithMetadata("", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Recover recover0 = new Recover();
      Driver driver0 = new Driver();
      InsertNode insertNode0 = new InsertNode();
      Properties properties0 = insertNode0.targetProperties;
      driver0.connect("4<", (Properties) null);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, false);
      // Undeclared exception!
      try { 
        DBUtil.queryLong("4<", (Connection) proxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("--<r=b");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.querySingleRow("--<r=b", jdbcConnection0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Database query did not return a result: --<r=b
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      DBExecutionResult dBExecutionResult0 = DBUtil.runScript("--tableFilters=[", (Connection) null, true, errorHandler0);
      assertNotNull(dBExecutionResult0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      // Undeclared exception!
      try { 
        DBUtil.runScript("f^WK*?.", 'h', (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Proxy proxy0 = (Proxy)DBUtil.createLoggingResultSet((ResultSet) null, (Statement) null);
      assertNotNull(proxy0);
      
      // Undeclared exception!
      try { 
        DBUtil.parseAndSimplifyResultSet((ResultSet) proxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getConnectData("h2.browser");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'h2.browser.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = "I'VrK1oV5UG)%`5T\"";
      boolean boolean0 = true;
      ErrorHandler.getDefault();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      BaseConnection baseConnection0 = null;
      // Undeclared exception!
      try { 
        DBUtil.querySingleRow("I'VrK1oV5UG)%`5T\"", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DBUtil.checkReadOnly("<r", false);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "--<r=x";
      Result result0 = Result.newReleaseSavepointRequest("--<r=x");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      result0.setParameterData((Object[]) null);
      result0.add((Object[]) null);
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.querySingleRow("--<r=x", jdbcConnection0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // One-row database query returned multiple rows: --<r=x
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = DBUtil.available("?-zEJY!Bo`", "?-zEJY!Bo`", "?-zEJY!Bo`", "?-zEJY!Bo`");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Class<jdbcDriver> class0 = jdbcDriver.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      Driver.load();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      Result result0 = new Result((-597));
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.query((String) null, jdbcConnection0);
      result0.clear();
      // Undeclared exception!
      try { 
        DBUtil.connect("&N8s}2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition '&N8s}2.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, true);
      ErrorHandler errorHandler0 = new ErrorHandler("or");
      // Undeclared exception!
      try { 
        DBUtil.runScript("P ]XSxiE6~", (Connection) proxy0, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.queryWithMetadata("lz", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FBArray fBArray0 = new FBArray();
      ErrorMessages errorMessages0 = new ErrorMessages();
      DBUtil.close((ResultSet) errorMessages0);
      CompositeDBObject<DefaultDBTable> compositeDBObject0 = (CompositeDBObject<DefaultDBTable>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("CreateDataDictionaryVersion", compositeDBObject0);
      List<DBTable> list0 = DBUtil.dependencyOrderedTables(tableContainer0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate(",$7!Tc!PH+;", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "aTf75Q!j7";
      SessionRemote sessionRemote0 = new SessionRemote();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      sessionRemote0.getNextId();
      sessionRemote0.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.queryAndSimplify("aTf75Q!j7", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "<r";
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = "";
      DBUtil.available("<r", "", "", "<r");
      String string2 = "<r=b";
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      String string3 = "M@4S#`wxa+sgL5(v}=1";
      Level level0 = Level.error;
      ErrorHandler errorHandler0 = new ErrorHandler("M@4S#`wxa+sgL5(v}=1", level0);
      errorHandler0.setLoggingStackTrace(false);
      // Undeclared exception!
      try { 
        DBUtil.runScript("<r=b", (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ErrorHandler errorHandler0 = new ErrorHandler("Os'p;");
      // Undeclared exception!
      try { 
        DBUtil.runScript("Os'p;", (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Class<jdbcDriver> class0 = jdbcDriver.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      Driver.load();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      try { 
        DBUtil.nextLine(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.queryWithMetadata("P8", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("--<r=b");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      Class<PGXAConnection> class0 = PGXAConnection.class;
      PGXAConnection[] pGXAConnectionArray0 = DBUtil.queryScalarArray((String) null, class0, (Connection) jdbcConnection0);
      assertEquals(0, pGXAConnectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("--<r=x");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      result0.setParameterData((Object[]) null);
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.querySingleRow("--<r=x", jdbcConnection0);
      String string0 = DBUtil.escape("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Result result0 = Result.newSetSavepointRequest("--<r=x");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      result0.setParameterData((Object[]) null);
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      ResultSet resultSet0 = DBUtil.executeQuery("--<r=x", jdbcConnection0);
      Object object0 = DBUtil.parseAndSimplifyResultSet(resultSet0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DBUtil.getOpenConnectionCount();
      DBUtil.getOpenConnectionCount();
      // Undeclared exception!
      try { 
        DBUtil.runScript("&W(2=C]\"", (Connection) null, false, (ErrorHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("6", true, "6", "6");
      boolean boolean0 = DBUtil.containsMandatoryColumn(dBCheckConstraint0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DBUtil.available("'", "'", "'", "}UU");
      // Undeclared exception!
      try { 
        DBUtil.getConnectData("preparing statement: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'preparing statement: .env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = DBUtil.available((String) null, (String) null, (String) null, (String) null);
      assertFalse(boolean0);
      
      Recover recover0 = new Recover();
      Recover recover1 = new Recover();
      recover0.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.queryLong("I'", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, true);
      ErrorHandler errorHandler0 = new ErrorHandler(" /* WHERE ");
      String string0 = "j(PC|RWF>+~Z8PYY= ";
      // Undeclared exception!
      try { 
        DBUtil.runScript("j(PC|RWF>+~Z8PYY= ", 'A', (Connection) proxy0, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.escape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ResultSet resultSet0 = null;
      // Undeclared exception!
      try { 
        DBUtil.format((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("-z<r=b");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0, (Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.query("-z<r=b", jdbcConnection0);
      // Undeclared exception!
      try { 
        DBUtil.queryLong("b,6ix>xG", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      int[] intArray0 = new int[8];
      intArray0[0] = 146;
      intArray0[1] = 146;
      intArray0[2] = 146;
      intArray0[3] = 146;
      intArray0[4] = 146;
      intArray0[5] = 69;
      intArray0[6] = 146;
      intArray0[7] = 146;
      Result result0 = new Result(146, intArray0, 146);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      List<Object[]> list0 = DBUtil.query("6Xdrd,l@a@VAT", jdbcConnection0);
      assertEquals(0, list0.size());
      
      jdbcConnection0.clearWarnings();
      try { 
        DBUtil.prepareStatement((Connection) jdbcConnection0, "", false, 146, (-2178), 578);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // java.lang.String@0000000007
         //
         verifyException("org.hsqldb.jdbc.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Class<jdbcDriver> class0 = jdbcDriver.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      String string0 = "SELECT ID FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = ?";
      Driver.load();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[5];
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      xSQLVAR0.deepCopy();
      // Undeclared exception!
      try { 
        DBUtil.closeResultSetAndStatement(errorMessages0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error getting statement from result set
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      DBUtil.assertAllDbResourcesClosed(false);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      DBUtil.getStatement(simpleResultSet0);
      Proxy proxy0 = (Proxy)DBUtil.createLoggingStatementHandler((Statement) null, false);
      Proxy proxy1 = (Proxy)DBUtil.createLoggingStatementHandler((Statement) proxy0, false);
      assertNotSame(proxy0, proxy1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("-z<r=b", true, "-z<r=b", "-z<r=b");
      // Undeclared exception!
      try { 
        DBUtil.containsMandatoryColumn(dBCheckConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int int0 = DBUtil.getOpenStatementCount();
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("b2/6IppG>LN:_=Rx>");
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex((String) null, true, defaultDBTable0, (String[]) null);
      defaultDBTable0.addIndex(dBNonUniqueIndex0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "b2/6IppG>LN:_=Rx>", true, (String[]) null);
      String[] stringArray0 = new String[2];
      defaultDBTable0.getReferrers();
      stringArray0[0] = "b2/6IppG>LN:_=Rx>";
      stringArray0[1] = "b2/6IppG>LN:_=Rx>";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "b2/6IppG>LN:_=Rx>", false, stringArray0);
      dBPrimaryKeyConstraint0.toString();
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      dBPrimaryKeyConstraint0.toString();
      DBUtil.equivalent(dBUniqueConstraint0, dBPrimaryKeyConstraint0);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      try { 
        pGConnectionPoolDataSource0.getConnection();
        fail("Expecting exception: PSQLException");
      
      } catch(PSQLException e) {
         //
         // The connection attempt failed.
         //
         verifyException("org.postgresql.core.v3.ConnectionFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      TableContainerSupport tableContainerSupport0 = new TableContainerSupport();
      List<DBTable> list0 = DBUtil.dependencyOrderedTables(tableContainerSupport0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      DBUtil.close((ResultSet) errorMessages0);
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      Class<jdbcDriver> class0 = jdbcDriver.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      // Undeclared exception!
      try { 
        DBUtil.runScript((String) null, "--<r=b", (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = ")";
      // Undeclared exception!
      try { 
        DBUtil.getMetaData("", true, true, true, true, ")", true, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition '.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Result result0 = Result.newRollbackToSavepointRequest("-z<r=b");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) session0;
      objectArray0[1] = (Object) jdbcConnection0;
      result0.setParameterData(objectArray0);
      jdbcConnection0.setReadOnly(true);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      // Undeclared exception!
      try { 
        DBUtil.queryScalar("--n", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getStatement((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      DBUtil.format(simpleResultSet0);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.getMetaData((Connection) jdbcConnection0, "", "", false, false, false, false, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcDatabaseMetaData", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getMetaData("--I'", true, true, true, true, "--I'", true, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition '--I'.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.connect("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition '.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      Class<jdbcDriver> class0 = jdbcDriver.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      // Undeclared exception!
      try { 
        DBUtil.parseResultSet((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Result result0 = new Result((Throwable) null, "^)*S.");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.close((Connection) jdbcConnection0);
      try { 
        DBUtil.executeQuery((String) null, jdbcConnection0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // null null in statement [^)*S.]
         //
         verifyException("org.hsqldb.jdbc.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate("oIq", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      DBUtil.escape("rule index_name");
      try { 
        DBUtil.getMetaData((Connection) null, "", "", false, false, false, false, "", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TableContainerSupport tableContainerSupport0 = new TableContainerSupport();
      List<DBTable> list0 = DBUtil.dependencyOrderedTables(tableContainerSupport0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      DBUtil.existsEnvironment("C+y JcF&Umt]`%Jx6e");
      DBUtil.assertAllDbResourcesClosed(false);
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      boolean boolean0 = false;
      try { 
        DBUtil.getMetaData((Connection) null, "--I'", (String) null, true, false, false, false, (String) null, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("--I'.env.properties");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "--I'");
      try { 
        DBUtil.getMetaData("--I'", false, true, true, false, "\u0001\u016D", true, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DBUtil.connect((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'null.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Result result0 = new Result(740);
      Result.ResultMetaData result_ResultMetaData0 = result0.metaData;
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Class<FBResultSet> class0 = FBResultSet.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      DBExecutionResult dBExecutionResult0 = DBUtil.runScript("", 'A', (Connection) jdbcConnection0, true, errorHandler0);
      assertNotNull(dBExecutionResult0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        DBUtil.checkReadOnly((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        DBUtil.parseResultSet(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      DBUtil.close((Connection) null);
      // Undeclared exception!
      try { 
        DBUtil.queryWithMetadata("0_=\"by?11.B", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      try { 
        DBUtil.getMetaData((Connection) null, "I", "I", false, true, true, true, "I", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Class<jdbcDriver> class0 = jdbcDriver.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      Driver.load();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      Result result0 = new Result((Throwable) null, "SELECT ID FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = ?");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      Class<PGXAConnection> class1 = PGXAConnection.class;
      try { 
        DBUtil.queryScalarArray("SELECT ID FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = ?", class1, (Connection) proxy0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // null null in statement [SELECT ID FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = ?]
         //
         verifyException("org.hsqldb.jdbc.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.dependencyOrderedTables((TableHolder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, false);
      try { 
        DBUtil.prepareStatement((Connection) proxy0, "9-f2g", false, 2335, 335544726, (-743));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // java.lang.String@0000000003
         //
         verifyException("org.hsqldb.jdbc.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      // Undeclared exception!
      try { 
        DBUtil.runScript((String) null, (Connection) jdbcConnection0, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Closing statement failed";
      stringArray0[1] = "------j}H&yD?LD{0_{'.[";
      stringArray0[2] = "org.firebirdsql.jdbc.field.FBIntegerField";
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = '{';
      charArray0[2] = '\"';
      charArray0[3] = 'y';
      charArray0[4] = 'e';
      charArray0[5] = '}';
      charArray0[6] = '!';
      charArray0[7] = 'n';
      pipedWriter0.write(charArray0);
      stringArray0[3] = "Wid<)S&NWw&Jn=(1c)";
      ResultSet resultSet0 = csv0.read((Reader) pipedReader0, stringArray0);
      try { 
        DBUtil.currentLine(resultSet0);
        fail("Expecting exception: JdbcSQLException");
      
      } catch(JdbcSQLException e) {
         //
         // No data is available [2000-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      DBUtil.close((Connection) null);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Class<PGXAConnection> class0 = PGXAConnection.class;
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray("", class0, (Connection) jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData((String) null, "wiYs<X<:Y", (String) null, "wiYs<X<:Y", (String) null, "wiYs<X<:Y");
      // Undeclared exception!
      try { 
        DBUtil.connect(jDBCConnectData0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC driver class name specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = "Lrg.databenefSdL";
      boolean boolean0 = true;
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, true);
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate("Lrg.databenefSdL", (Connection) proxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData((String) null, "/giH+=SLAPOX", (String) null, "/giH+=SLAPOX");
      Random.setNextRandom(2);
      // Undeclared exception!
      try { 
        DBUtil.getMetaData((String) null, false, false, false, false, "&-{DI\"\"Pnt$[<GY", false, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'null.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("6Xdrd,l@a@VAT");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("^$v-Rd10g~Z", dBSchema0);
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "6Xdrd,l@a@VAT", true, stringArray0);
      DBUtil.containsMandatoryColumn(dBUniqueConstraint0);
      DBUtil.checkReadOnly("SCOPE", false);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      // Undeclared exception!
      DBUtil.checkReadOnly("--/*", true);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = "";
      try { 
        DBUtil.connect("(Dc$N*?V", "(Dc$N*?V", "(Dc$N*?V", "", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting (Dc$N*?V failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("--I'.env.properties");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "--I'");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DBUtil.getMetaData("--I'", true, true, false, false, "H:_duQV{f;>L!eef4y", false, false);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 6
         // H:_duQV{f;>L!eef4y
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      DBUtil.close((ResultSet) errorMessages0);
      CompositeDBObject<DefaultDBTable> compositeDBObject0 = (CompositeDBObject<DefaultDBTable>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("CreateDataDictionaryVersion", compositeDBObject0);
      int int0 = DBUtil.getOpenStatementCount();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Result result0 = Result.newRollbackToSavepointRequest("x~u+");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      DBUtil.runScript("x~u+", '^', (Connection) jdbcConnection0, true, errorHandler0);
      DBUtil.checkReadOnly("PLkRy /[!&88", false);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Level level0 = Level.fatal;
      ErrorHandler errorHandler0 = new ErrorHandler("org.firebirdsql.gds.GDSException", level0);
      // Undeclared exception!
      try { 
        DBUtil.runScript((String) null, "-9223372036854775808", 'B', (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      boolean boolean0 = DBUtil.existsEnvironment((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      Class<PGXAConnection> class0 = PGXAConnection.class;
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray("9j:|6K.Meu>O'42r", class0, (Connection) proxy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal exception in method: public java.sql.ResultSet org.databene.jdbacl.proxy.LoggingStatementHandler.executeQuery(java.lang.String) throws java.sql.SQLException
         //
         verifyException("org.databene.commons.ExceptionMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = "+y;$";
      // Undeclared exception!
      try { 
        DBUtil.executeQuery("+y;$", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("--I'.env.properties");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "--I'");
      String string0 = "|q";
      try { 
        DBUtil.getMetaData("--I'", false, true, true, false, "#~-", false, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Class<jdbcDriver> class0 = jdbcDriver.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      Class<jdbcDriver> class1 = jdbcDriver.class;
      ErrorHandler errorHandler1 = new ErrorHandler(class1);
      DBExecutionResult dBExecutionResult0 = DBUtil.runScript("--I'VrK1oV5UG)%`5T\"", (Connection) null, false, errorHandler1);
      assertNotNull(dBExecutionResult0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.runScript("..' 9*l", "..' 9*l", '0', (Connection) null, true, (ErrorHandler) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: ..' 9*l
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      DBUtil.escape("d0");
      ResultSet resultSet0 = null;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("--^$v-Rd10g~Z", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      // Undeclared exception!
      try { 
        DBUtil.getStatement((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      DBUtil.existsEnvironment("^ Cq");
      Connection connection0 = null;
      boolean boolean0 = false;
      try { 
        DBUtil.getMetaData((Connection) null, ")", ")", false, false, false, true, "^ Cq", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      DBUtil.close((Connection) null);
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "1uAO][QJa-dbfj#~-^{", false, 54, (-308), (-140));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Result result0 = Result.newRollbackToSavepointRequest("O>");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Object object0 = DBUtil.queryAndSimplify("\u0001\u016A", jdbcConnection0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "";
      String string1 = "W5*~\"ZsvU";
      DBUtil.available("", "W5*~\"ZsvU", "", "B${fjDYU");
      String string2 = "";
      try { 
        DBUtil.connect("", "", "", "Gr", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting  failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      Object[] objectArray0 = DBUtil.currentLine(simpleResultSet0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Class<jdbcResultSet> class0 = jdbcResultSet.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      // Undeclared exception!
      try { 
        DBUtil.runScript("DU<;", (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.close((Connection) jdbcConnection0);
      assertFalse(jdbcConnection0.isClosed());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      DBUtil.createLoggingStatementHandler((Statement) null, false);
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("", "", "ury@Y)", (String) null, (String) null, "");
      // Undeclared exception!
      try { 
        DBUtil.connect(jDBCConnectData0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC URL specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Statement statement0 = jdbcConnection0.createStatement();
      DBUtil.close(statement0);
      assertEquals(1003, statement0.getResultSetType());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Class<jdbcDriver> class0 = jdbcDriver.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      Driver.load();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      Result result0 = Result.newReleaseSavepointRequest("SELECT ID FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = ?");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0, (Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      result0.clear();
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      DBUtil.executeQuery("org.apache.derby.impl.sql.compile.OrderByColumn", jdbcConnection0);
      Class<PGXAConnection> class1 = PGXAConnection.class;
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray("SELECT ID FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = ?", class1, (Connection) proxy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal exception in method: public java.sql.ResultSet org.databene.jdbacl.proxy.LoggingStatementHandler.executeQuery(java.lang.String) throws java.sql.SQLException
         //
         verifyException("org.databene.commons.ExceptionMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Result result0 = Result.newSetSavepointRequest("--<r=x");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      result0.setParameterData((Object[]) null);
      Result.newReleaseSavepointRequest("--<r=x");
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Session session1 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection1 = new jdbcConnection(session1);
      Object[] objectArray0 = DBUtil.querySingleRow("--<r=x", jdbcConnection0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      // Undeclared exception!
      try { 
        DBUtil.runScript((String) null, "43ef%I{D", '\'', (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("I-Fri", false, "I-Fri", "I-Fri");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      dBCheckConstraint0.setTable(defaultDBTable0);
      // Undeclared exception!
      try { 
        DBUtil.containsMandatoryColumn(dBCheckConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'I' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      DBUtil.close((Connection) null);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/databene/6F'i`xuNpk$E.env.properties");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "--&AvX:WX[d");
      JDBCConnectData jDBCConnectData0 = DBUtil.getConnectData("6F'i`xuNpk$E");
      // Undeclared exception!
      try { 
        DBUtil.connect(jDBCConnectData0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC URL specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("-_<=x");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      result0.setParameterData((Object[]) null);
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      ResultsWithMetadata resultsWithMetadata0 = DBUtil.queryWithMetadata("-_<=x", jdbcConnection0);
      assertNotNull(resultsWithMetadata0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = DBUtil.escape("org.firebirdsql.jdbc.AbstractSavepoint");
      assertEquals("org.firebirdsql.jdbc.AbstractSavepoint", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "q", true, 32664, 32664, 32664);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: q
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Class<JdbcStatement> class0 = JdbcStatement.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      // Undeclared exception!
      DBUtil.runScript("/*", 'J', (Connection) jdbcConnection0, false, errorHandler0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Connection connection0 = null;
      String string0 = "i/bfIyaBGWvN++SB~rS";
      // Undeclared exception!
      try { 
        DBUtil.countRows("", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ResultSet resultSet0 = null;
      // Undeclared exception!
      try { 
        DBUtil.parseAndSimplifyResultSet((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = "k'T_)W\\LHRGP'G>GOH";
      boolean boolean0 = false;
      DBUtil.checkReadOnly("k'T_)WLHRGP'G>GOH", false);
      DBUtil.getOpenConnectionCount();
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        DBUtil.checkReadOnly("k'T_)WLHRGP'G>GOH", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: k'T_)WLHRGP'G>GOH
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.runScript("/,]NRPU'", "/,]NRPU'", (Connection) null, true, (ErrorHandler) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: /,]NRPU'
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("p}>i`)WqXI");
      tableContainer0.setName("M|");
      DBUtil.dependencyOrderedTables(tableContainer0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.firebirdsql.gds.impl.GDSFactory");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "org.firebirdsql.gds.impl.GDSFactory");
      Level level0 = Level.fatal;
      ErrorHandler errorHandler0 = new ErrorHandler("select count(*) from ", level0);
      try { 
        DBUtil.runScript("org.firebirdsql.gds.impl.GDSFactory", "org.firebirdsql.gds.impl.GDSFactory", '1', (Connection) null, false, errorHandler0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      Object[] objectArray0 = DBUtil.nextLine(simpleResultSet0);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      DBUtil.assertAllDbResourcesClosed(false);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "--&W(2=C]\"", true, 54, 90140, 1007);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: --&W(2=C]\"
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      DBUtil.getOpenResultSetCount();
      String string0 = "";
      jdbcDriver jdbcDriver0 = new jdbcDriver();
      InsertNode insertNode0 = new InsertNode();
      Properties properties0 = insertNode0.targetProperties;
      RealTableScanStatistics realTableScanStatistics0 = null;
      try {
        realTableScanStatistics0 = new RealTableScanStatistics(0, 0, 0, 0, 0, 0, 0, 0, "$", "", ">>TyZxv", true, "<{Nd~DH--KwB(la", (Properties) null, "", "!C%><-#t#gevti", "!C%><-#t#gevti", "RU9P+8FyfU!R<;", 0, false, (-3442.5), 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.rts.RealTableScanStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      try { 
        DBUtil.runScript("", "", (Connection) null, true, errorHandler0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        DBUtil.assertAllDbResourcesClosed(true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // There are unclosed database resources: 1 result set(s), 4 statement(s)
         //
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      Class<jdbcDriver> class0 = jdbcDriver.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      DBUtil.runScript("--I'VrK1oVBUG)%`5T\"", (Connection) null, true, errorHandler0);
      Class<PGXAConnection> class1 = PGXAConnection.class;
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray("--I'VrK1oVBUG)%`5T\"", class1, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.countRows("e%C,", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      DBUtil.resetMonitors();
      DBUtil.getOpenConnectionCount();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      // Undeclared exception!
      try { 
        jdbcDriver.getConnection((String) null, formatableProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.DatabaseURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      DBUtil.assertAllDbResourcesClosed(false);
      String string0 = DBUtil.escape(" (n7~;su$nw");
      assertEquals(" (n7~;su$nw", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("-z<r=b");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      int int0 = DBUtil.executeUpdate("-z<r=b", jdbcConnection0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("--<r=b");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-76);
      byteArray0[7] = (byte)41;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ErrorHandler errorHandler0 = new ErrorHandler("--<r=b");
      result0.clear();
      DBUtil.runScript("--<r=b", 'A', (Connection) jdbcConnection0, false, errorHandler0);
      DBUtil.queryWithMetadata("--<r=b", jdbcConnection0);
      // Undeclared exception!
      try { 
        DBUtil.queryString((PreparedStatement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.containsMandatoryColumn((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.close((Connection) jdbcConnection0);
      // Undeclared exception!
      try { 
        DBUtil.executeQuery((String) null, jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      DBUtil.checkReadOnly("--{s", false);
      Proxy proxy0 = (Proxy)DBUtil.createLoggingStatementHandler((Statement) null, false);
      // Undeclared exception!
      try { 
        DBUtil.close((Statement) proxy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal exception in method: public void org.databene.jdbacl.proxy.LoggingStatementHandler.close() throws java.sql.SQLException
         //
         verifyException("org.databene.commons.ExceptionMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, false);
      // Undeclared exception!
      try { 
        DBUtil.querySingleRow((String) null, (Connection) proxy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal exception in method: public java.sql.ResultSet org.databene.jdbacl.proxy.LoggingStatementHandler.executeQuery(java.lang.String) throws java.sql.SQLException
         //
         verifyException("org.databene.commons.ExceptionMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = "A~[O^@KEhi`";
      jdbcDriver.getConnection("A~[O^@KEhi`", (Properties) null);
      // Undeclared exception!
      try { 
        DBUtil.logMetaData((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      // Undeclared exception!
      try { 
        DBUtil.checkReadOnly("INSERT INTO INFORMATION_SCHEMA.LOB_MAP(LOB, SEQ, BLOCK) VALUES(?, ?, ?)", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: INSERT INTO INFORMATION_SCHEMA.LOB_MAP(LOB, SEQ, BLOCK) VALUES(?, ?, ?)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Result result0 = new Result((-104));
      result0.setParameterData((Object[]) null);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.executeQuery("", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("--<r=b");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.queryAndSimplify("", jdbcConnection0);
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DBUtil.getMetaData((String) null, true, true, true, true, (String) null, true, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'null.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = "";
      DBUtil.available("", "-KN ", "", "^%_-:pik3`{_W");
      String string1 = "Error getting statement from result set";
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      // Undeclared exception!
      try { 
        jdbcDataSource0.getConnection();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid value  for parameter \"url\" [90008-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.assertAllDbResourcesClosed(true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // There are unclosed database resources: 1 statement(s)
         //
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      DBUtil.available("smZl[A\"',", "Using driver ", "Using driver ", " entries:");
      int int0 = (-1473);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1473);
      intArray0[1] = (-1473);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("/*", 3);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      try { 
        DBUtil.parseResultRow(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      DBUtil.existsEnvironment("C+y JcF&Umt]`%Jx6e");
      DBUtil.assertAllDbResourcesClosed(false);
      DBUtil.resetMonitors();
      // Undeclared exception!
      try { 
        JDBCConnectData.parseSingleDbProperties("C+y JcF&Umt]`%Jx6e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: C+y JcF&Umt]`%Jx6e
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      FBArray fBArray0 = new FBArray();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        DBUtil.currentLine(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("--I'.env.properties");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "--I'");
      try { 
        DBUtil.getMetaData("--I'", true, true, true, true, "--I'", true, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Class<jdbcDriver> class0 = jdbcDriver.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      DBUtil.runScript("--I'VrK1oVBUG)%`5T\"", (Connection) jdbcConnection0, false, errorHandler0);
      Class<PGXAConnection> class1 = PGXAConnection.class;
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray("--I'VrK1oVBUG)%`5T\"", class1, (Connection) jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        DBUtil.connect((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'null.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("--<r=x");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      result0.setParameterData((Object[]) null);
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.countRows("--<r=x", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      Class<org.postgresql.Driver> class0 = org.postgresql.Driver.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.runScript("I'", (Connection) jdbcConnection0, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Class<jdbcDriver> class0 = jdbcDriver.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      Driver driver0 = Driver.load();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      driver0.connect("SELECT ID FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = ?", formatableProperties0);
      // Undeclared exception!
      try { 
        DBUtil.runScript("SELECT ID FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = ?", (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Class<jdbcDriver> class0 = jdbcDriver.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      // Undeclared exception!
      try { 
        DBUtil.getStatement(errorMessages0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error getting statement from result set
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = "--I'";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("--I'.env.properties");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "--I'");
      String string1 = "Fq";
      Random.setNextRandom(1317);
      try { 
        DBUtil.getMetaData("--I'", true, true, true, true, "Fq", true, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Driver.load();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      Result result0 = new Result((-2621));
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      // Undeclared exception!
      try { 
        DBUtil.countRows("Database query failed: ", (Connection) proxy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a row.
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      ErrorHandler errorHandler0 = new ErrorHandler("or");
      Class<jdbcResultSet> class0 = jdbcResultSet.class;
      ErrorHandler errorHandler1 = new ErrorHandler(class0);
      // Undeclared exception!
      try { 
        DBUtil.queryWithMetadata((String) null, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      // Undeclared exception!
      try { 
        DBUtil.runScript((String) null, '&', (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.currentLine((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.queryScalar(" oneca<gtion(^)", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Class<PGXAConnection> class0 = PGXAConnection.class;
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray("g:d", class0, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.closeResultSetAndStatement((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Class<jdbcDriver> class0 = jdbcDriver.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      Driver.load();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      Result result0 = new Result(103);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      Class<PGXAConnection> class1 = PGXAConnection.class;
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray("SELECT ID FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = ?", class1, (Connection) proxy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal exception in method: public java.sql.ResultSet org.databene.jdbacl.proxy.LoggingStatementHandler.executeQuery(java.lang.String) throws java.sql.SQLException
         //
         verifyException("org.databene.commons.ExceptionMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Driver driver0 = new Driver();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      Integer integer0 = new Integer(1530);
      Driver driver1 = new Driver();
      formatableProperties0.put(integer0, driver1);
      driver0.connect("o", formatableProperties0);
      DBUtil.close((Connection) null);
      Connection connection0 = null;
      DBUtil.wrapWithPooledConnection((Connection) null, true);
      String string0 = " /* WHERE ";
      ErrorHandler errorHandler0 = new ErrorHandler(" /* WHERE ");
      // Undeclared exception!
      DBUtil.runScript(" /* WHERE ", 'A', (Connection) null, false, errorHandler0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.checkReadOnly(":", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: :
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.queryLong("---<r", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getConnectData((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'null.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      ErrorHandler errorHandler0 = new ErrorHandler("B}I]C,|");
      Class<String> class0 = String.class;
      ErrorHandler errorHandler1 = new ErrorHandler(class0);
      // Undeclared exception!
      try { 
        DBUtil.runScript("B}I]C,|", (String) null, (Connection) jdbcConnection0, true, errorHandler1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: B}I]C,|
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("sMxeFA");
      Result result0 = new Result(sQLWarning0, "NaOV");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Result.newRollbackToSavepointRequest("deby.optimizer.otimzeJoinOrder");
      Session session1 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection1 = new jdbcConnection(session1);
      String string0 = "AswbP,%;~~o),A5Upr9";
      try { 
        DBUtil.querySingleRow("AswbP,%;~~o),A5Upr9", jdbcConnection0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // null java.sql.SQLWarning: sMxeFA in statement [NaOV]
         //
         verifyException("org.hsqldb.jdbc.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-21);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      Callable<JdbcCallableStatement> callable0 = (Callable<JdbcCallableStatement>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ForkJoinTask<JdbcCallableStatement> forkJoinTask0 = forkJoinPool0.submit(callable0);
      forkJoinTask0.getException();
      Result result0 = new Result((Throwable) null, " 3c=.%8rPiVw");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      // Undeclared exception!
      try { 
        DBUtil.countRows("--databene", (Connection) proxy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal exception in method: public java.sql.ResultSet org.databene.jdbacl.proxy.LoggingStatementHandler.executeQuery(java.lang.String) throws java.sql.SQLException
         //
         verifyException("org.databene.commons.ExceptionMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      DBUtil.getOpenConnectionCount();
      DBUtil.available("Database query did not return a result: ", "Database query did not return a result: ", "Database query did not return a result: ", "n\"tC8}Kt9|Lt8D");
      // Undeclared exception!
      try { 
        DBUtil.dependencyOrderedTables((TableHolder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      FBArray fBArray0 = new FBArray();
      fBArray0.getResultSet();
      DBUtil.available("_7goN:z)%-sC", "databene", "vj6'", "");
      DBSchema dBSchema0 = new DBSchema((String) null);
      try { 
        DBUtil.connect("/_8_", "V=.)m:Zhj>J\"Df<", "select count(*) from ", "I'", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting /_8_ failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      Proxy proxy0 = (Proxy)DBUtil.createLoggingResultSet(simpleResultSet0, (Statement) null);
      DBUtil.createLoggingResultSet((ResultSet) proxy0, (Statement) null);
      int int0 = DBUtil.getOpenStatementCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.queryLong((String) null, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Result.newReleaseSavepointRequest("--<r=b");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      FBArray fBArray0 = new FBArray();
      fBArray0.getResultSet();
      // Undeclared exception!
      try { 
        DBUtil.currentLine((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("-_<=x");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0, (Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      result0.setParameterData((Object[]) null);
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.queryAndSimplify("-_<=x", jdbcConnection0);
      // Undeclared exception!
      try { 
        DBUtil.executeQuery("j_XgT]", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "d7t\\}\"bD+i";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d7t}\"bD+i");
      // Undeclared exception!
      try { 
        DBUtil.queryScalar("d7t}\"bD+i", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = null;
      DBUtil.existsEnvironment((String) null);
      String string1 = "jwi>J5fW|KX";
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "jwi>J5fW|KX", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      DBUtil.checkReadOnly("SELECTIVITY INT", true);
      Properties properties0 = new Properties();
      Jdbc4Connection jdbc4Connection0 = null;
      try {
        jdbc4Connection0 = new Jdbc4Connection("SELECTIVITY INT", (-151059743), "&_nV!fwqDj", "SELECTIVITY INT", properties0, "&_nV!fwqDj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-151059743
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = "QN?E_'";
      // Undeclared exception!
      try { 
        DBUtil.connect("QN?E_'", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'QN?E_'.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Class<jdbcDriver> class0 = jdbcDriver.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, false);
      // Undeclared exception!
      try { 
        Recover.readClobDb((Connection) proxy0, 0L, 0L);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sun.proxy.$Proxy28 cannot be cast to org.h2.jdbc.JdbcConnection
         //
         verifyException("org.h2.tools.Recover", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Driver driver0 = Driver.load();
      FromVTI fromVTI0 = new FromVTI();
      fromVTI0.getProperties();
      driver0.connect("NM", (Properties) null);
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "NM", true, 1, 0, 2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: NM
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        DBUtil.connect("--O>", (String) null, (String) null, (String) null, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting --O> failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        DBUtil.queryScalar("", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Driver driver0 = new Driver();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      driver0.connect(" P F}<~J1/Ku}N]", formatableProperties0);
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "Connecting the database failed silently - probably due to wrong driver (", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: Connecting the database failed silently - probably due to wrong driver (
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("-W<=x");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0, (Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      result0.setParameterData((Object[]) null);
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.queryAndSimplify("-W<=x", jdbcConnection0);
      Class<PGPooledConnection> class0 = PGPooledConnection.class;
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray("7.2", class0, (Connection) jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      // Undeclared exception!
      try { 
        DBUtil.queryWithMetadata(">KGi_", (Connection) proxy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal exception in method: public java.sql.ResultSet org.databene.jdbacl.proxy.LoggingStatementHandler.executeQuery(java.lang.String) throws java.sql.SQLException
         //
         verifyException("org.databene.commons.ExceptionMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Result.newReleaseSavepointRequest("--<r=b");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      Class<PGXAConnection> class0 = PGXAConnection.class;
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray("9mB4{6{'lPb(rq%7*2", class0, (Connection) proxy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal exception in method: public java.sql.ResultSet org.databene.jdbacl.proxy.LoggingStatementHandler.executeQuery(java.lang.String) throws java.sql.SQLException
         //
         verifyException("org.databene.commons.ExceptionMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("--<r=b");
      result0.iterator();
      DBUtil.checkReadOnly("[rt", false);
      DBUtil.getOpenResultSetCount();
      TableContainer tableContainer0 = new TableContainer("--<r=b");
      DBUtil.dependencyOrderedTables(tableContainer0);
      DBUtil.existsEnvironment("z$4BInzrIA/yq ");
      Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      jdbcDriver jdbcDriver0 = new jdbcDriver();
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 90010;
      intArray0[3] = (-4150);
      intArray0[4] = (-4150);
      Properties properties0 = new Properties();
      ResultSetStatistics[] resultSetStatisticsArray0 = new ResultSetStatistics[7];
      RealGroupedAggregateStatistics realGroupedAggregateStatistics0 = new RealGroupedAggregateStatistics(735, 40, (-1), 2692L, (-4150), (-1), (-4150), 40, 356, false, false, properties0, 0.0, 0.0, (ResultSetStatistics) null);
      RealInsertVTIResultSetStatistics realInsertVTIResultSetStatistics0 = new RealInsertVTIResultSetStatistics((-430), false, (-4150), realGroupedAggregateStatistics0);
      resultSetStatisticsArray0[0] = (ResultSetStatistics) realInsertVTIResultSetStatistics0;
      RealHashScanStatistics realHashScanStatistics0 = new RealHashScanStatistics(0, (-1), (-430), (-2436), 3212L, 40, (-4150), (-958), (String) null, (String) null, true, 508, intArray0, (String) null, "q>go^UXY%*9B", properties0, "q>go^UXY%*9B", "setString(long,str)", "Ly", ";Sib`v", 0.0, 1921.69936);
      RealSortStatistics realSortStatistics0 = new RealSortStatistics((-1), (-430), (-2436), 3212L, 0L, 1221L, (-4150L), 40, 90010, 90010, false, false, realGroupedAggregateStatistics0.sortProperties, (-4150L), 608.33823549, realHashScanStatistics0);
      resultSetStatisticsArray0[1] = (ResultSetStatistics) realSortStatistics0;
      RealHashJoinStatistics realHashJoinStatistics0 = new RealHashJoinStatistics(18, (-4150), 40, (-1), 965L, 40, (-1L), 272, (-2436), (-3607), 0, 1017778348664943626L, false, 1017778348664943626L, (-2436), "Ly", realSortStatistics0, realSortStatistics0);
      resultSetStatisticsArray0[2] = (ResultSetStatistics) realHashJoinStatistics0;
      RealRowResultSetStatistics realRowResultSetStatistics0 = new RealRowResultSetStatistics(90010, 21, 272, 0L, 0L, 653L, 0L, 0, 0, 0.0, 0L);
      RealDeleteCascadeResultSetStatistics realDeleteCascadeResultSetStatistics0 = new RealDeleteCascadeResultSetStatistics(1009, false, 90126, false, 0L, realRowResultSetStatistics0, resultSetStatisticsArray0);
      resultSetStatisticsArray0[3] = (ResultSetStatistics) realDeleteCascadeResultSetStatistics0;
      RealHashJoinStatistics realHashJoinStatistics1 = new RealHashJoinStatistics((-557), 34, 19, 0L, (-9223372036854775296L), 256L, 0L, 2147483645, (-3607), 90010, 90010, (-1262L), false, 0L, 0.0, (String) null, realSortStatistics0, realDeleteCascadeResultSetStatistics0);
      resultSetStatisticsArray0[4] = (ResultSetStatistics) realHashJoinStatistics1;
      RealInsertResultSetStatistics realInsertResultSetStatistics0 = new RealInsertResultSetStatistics((-1076344202), true, 90010, true, true, true, 0L, resultSetStatisticsArray0[3]);
      resultSetStatisticsArray0[5] = (ResultSetStatistics) realInsertResultSetStatistics0;
      RealLastIndexKeyScanStatistics realLastIndexKeyScanStatistics0 = new RealLastIndexKeyScanStatistics(0, 630L, 0L, 0L, 4398046511104L, (-1), (String) null, "--LymXC=BJOG'B0OD~", (String) null, "Er", 2063.4, (-2390.0));
      resultSetStatisticsArray0[6] = (ResultSetStatistics) realLastIndexKeyScanStatistics0;
      RealHashTableStatistics realHashTableStatistics0 = new RealHashTableStatistics(90010, 1007, (-4150), (-4150), (-4150), 0L, 4398046511104L, (-1), (-4150), intArray0, (String) null, properties0, (-2862.8958307), (-176.611), resultSetStatisticsArray0, resultSetStatisticsArray0[6]);
      FormatableProperties formatableProperties0 = realHashTableStatistics0.scanProperties;
      jdbcDriver0.connect("nc!+=j`+a8k7", formatableProperties0);
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      String string0 = "q";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DBUtil.getMetaData(">XBoBSe>#^rk-{r", false, false, true, true, "", false, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition '>XBoBSe>#^rk-{r.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Session session1 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection1 = new jdbcConnection(session1);
      Class<Delayed> class0 = Delayed.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      DBUtil.runScript("----<r=b", '&', (Connection) jdbcConnection1, true, errorHandler0);
      try { 
        DBUtil.prepareStatement((Connection) jdbcConnection1, (String) null, false, 2157, (-308), (-308));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // java.lang.String@0000000006
         //
         verifyException("org.hsqldb.jdbc.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("--I'.env.properties");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Random.setNextRandom(1317);
      // Undeclared exception!
      try { 
        DBUtil.getMetaData("--I'", true, true, true, true, "x83;i.Y5VXwJP!", true, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error reading environment data for '--I''
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      DBUtil.wrapWithPooledConnection((Connection) null, true);
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("--NT \"; &*i0D}a?u{R?<", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "INSERT INTO INFORMATION_SCHEMA.LOB_DATA(BLOCK, COMPRESSED, DATA) VALUES(?, ?, ?)";
      stringArray0[2] = null;
      stringArray0[3] = "--NT \"; &*i0D}a?u{R?<";
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = "--NT \"; &*i0D}a?u{R?<";
      stringArray0[7] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      // Undeclared exception!
      try { 
        DBUtil.containsMandatoryColumn(dBUniqueConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'null' not found in table '--NT \"; &*i0D}a?u{R?<'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      Class<jdbcDriver> class0 = jdbcDriver.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      // Undeclared exception!
      try { 
        DBUtil.runScript("I'", "I'", (Connection) null, false, errorHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: I'
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("--I'.env.properties");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "--I'");
      boolean boolean0 = DBUtil.existsEnvironment("--I'");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("getScrollable", "getScrollable", "getScrollable", "getScrollable", "getScrollable", "getScrollable");
      try { 
        DBUtil.connect(jDBCConnectData0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting getScrollable failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      boolean boolean0 = true;
      ErrorHandler errorHandler0 = new ErrorHandler("xJj<6L/`%D");
      // Undeclared exception!
      try { 
        DBUtil.runScript((String) null, 'A', (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("--<r=x");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      result0.setParameterData((Object[]) null);
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Csv csv0 = Csv.getInstance();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-44);
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)46;
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob(66541, byteArray0, (byte) (-127));
      ValueLobDb valueLobDb1 = valueLobDb0.copyToTemp();
      Reader reader0 = valueLobDb1.getReader();
      String[] stringArray0 = new String[0];
      ResultSet resultSet0 = csv0.read(reader0, stringArray0);
      String string0 = DBUtil.format(resultSet0);
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.queryAndSimplify("e%C,", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      StandardException standardException0 = StandardException.newException("9999-12-20", (Throwable) null, (Object) "9999-12-20", (Object) null);
      Result result0 = new Result(standardException0, "9999-12-20");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      DBUtil.nextLine(simpleResultSet0);
      try { 
        DBUtil.queryWithMetadata("There are unclosed database resources: ", jdbcConnection0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // null ERROR 9999-: 9999-12-20 : [0] java.lang.String@0000000002, [1] null in statement [9999-12-20]
         //
         verifyException("org.hsqldb.jdbc.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("--I'VrK1oV5UG)%`5T\"", 4);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DBUtil.getOpenResultSetCount();
      FBArray fBArray0 = new FBArray();
      fBArray0.getResultSet();
      // Undeclared exception!
      try { 
        DBUtil.nextLine((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      int int0 = DBUtil.executeUpdate((String) null, (Connection) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      DBUtil.checkReadOnly("FU&Vku6iTCsE", false);
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      Class<Long> class0 = Long.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      // Undeclared exception!
      try { 
        DBUtil.runScript("/&(m", (String) null, ',', (Connection) null, false, errorHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: /&(m
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      // Undeclared exception!
      try { 
        DBUtil.queryScalar((String) null, jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("--<r=x");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0, (Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      result0.setParameterData((Object[]) null);
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.querySingleRow("--<r=x", jdbcConnection0);
      // Undeclared exception!
      try { 
        DBUtil.queryWithMetadata("--<r=x", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Result result0 = Result.newReleaseSavepointRequest("--<r=x");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      result0.setParameterData((Object[]) null);
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Csv csv0 = Csv.getInstance();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)77;
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob((byte)46, byteArray0, (byte)77);
      ValueLobDb valueLobDb1 = valueLobDb0.copyToTemp();
      Reader reader0 = valueLobDb1.getReader();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "--<r=x";
      stringArray0[1] = "--<r=x";
      stringArray0[2] = "--<r=x";
      ResultSet resultSet0 = csv0.read(reader0, stringArray0);
      String string0 = DBUtil.format(resultSet0);
      assertTrue(resultSet0.wasNull());
      assertEquals("--<r=x, --<r=x1, --<r=x11\n\uFFFDM, , \n", string0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)6;
      byte byte0 = (byte)59;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte) (-108);
      byteArray0[7] = (byte)102;
      byteArray0[8] = (byte)117;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        DBUtil.escape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }
}
