/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 16:20:01 GMT 2018
 */

package okhttp3.internal.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import okhttp3.Challenge;
import okhttp3.CookieJar;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.internal.http.HttpHeaders;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpHeaders_ESTest extends HttpHeaders_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      headers0.toMultimap();
      headers1.getDate("i34");
      headers1.names();
      headers1.getDate("('<!=.$(K|jWEY");
      HttpHeaders.varyFields(headers1);
      HttpHeaders.parseChallenges(headers0, "kl5<`,]h>(43b-a");
      int int0 = HttpHeaders.skipUntil("", 244, "Invalid host: ");
      assertEquals(244, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Headers headers0 = Headers.of(stringArray0);
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
      
      int int0 = HttpHeaders.skipUntil("]M>[G8vuHbb3-J-f", 401, "]M>[G8vuHbb3-J-f");
      assertEquals(401, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "BL$Ru4?f9=sY?a75N|";
      stringArray0[1] = "BL$Ru4?f9=sY?a75N|";
      Headers headers0 = Headers.of(stringArray0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertNotSame(headers0, headers1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      HttpHeaders.skipWhitespace("", 679);
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.contentLength((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "pf-v";
      HttpHeaders.parseSeconds("pf-v", 0);
      HttpHeaders.skipWhitespace("pf-v", 0);
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.hasVaryAll((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = ",";
      HttpHeaders.parseSeconds(",", (-1736));
      String string1 = "oDoYFI:k:";
      HttpHeaders.skipUntil("oDoYFI:k:", 0, ",");
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.hasVaryAll((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = HttpHeaders.skipWhitespace("aX+BKku2uIKA*r^", 0);
      int int1 = HttpHeaders.skipUntil("aX+BKku2uIKA*r^", 0, "v)@5sadrefz]((ji");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.hasVaryAll(headers0);
      HttpHeaders.receiveHeaders((CookieJar) null, (HttpUrl) null, headers0);
      assertEquals(0, headers0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      headers0.toString();
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      headers1.getDate("!s?~U5e_!k%SY?b,s^");
      headers1.getDate(" #%/:?@[]");
      hashMap0.put("", "z*f}");
      headers0.getDate(" #%/:?@[]");
      headers1.values("");
      headers0.getDate("([^ \"=]*)");
      headers1.newBuilder();
      headers0.getDate("([^ \"=]*)");
      headers1.names();
      HttpHeaders.hasVaryAll(headers1);
      headers1.toString();
      HttpHeaders.varyFields(headers0);
      HttpHeaders.hasVaryAll(headers1);
      Headers headers2 = HttpHeaders.varyHeaders(headers0, headers0);
      HttpHeaders.varyHeaders(headers2, headers0);
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      HttpUrl.parse("");
      HttpHeaders.receiveHeaders(cookieJar0, (HttpUrl) null, headers2);
      assertNotSame(headers2, headers0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("mqVdpB", "mqVdpB");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "mqVdpB");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "vary";
      stringArray0[1] = "qn\"u5+";
      stringArray0[2] = "tF";
      stringArray0[3] = "content-length";
      stringArray0[4] = "n]";
      stringArray0[5] = "eraCfo5Ri-";
      stringArray0[6] = "min-fresh";
      stringArray0[7] = "private";
      Headers headers0 = Headers.of(stringArray0);
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders((Headers) null, headers0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Vary", "bugc\">cyhukw|uze");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      boolean boolean0 = HttpHeaders.hasVaryAll(headers0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HttpHeaders.parseSeconds("Content-Length", 204);
      System.setCurrentTimeMillis(2147483647L);
      HttpHeaders.skipWhitespace("([^ \"=]*)", 204);
      HttpHeaders.parseSeconds("([^ \"=]*)", 204);
      HttpHeaders.skipWhitespace("8M4,", 204);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Content-Length", "8M4,");
      hashMap0.put("mru7$", "([^ \"=]*)");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = Headers.of((Map<String, String>) hashMap0);
      headers0.getDate("Content-Length");
      headers0.newBuilder();
      HttpHeaders.varyFields(headers0);
      HttpHeaders.contentLength(headers0);
      headers1.getDate("8M4,");
      HttpHeaders.skipUntil(",P ~!mU", 204, "8M4,");
      // Undeclared exception!
      try { 
        HttpHeaders.varyMatches((Response) null, headers1, (Request) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = HttpHeaders.parseSeconds("8", 5056);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("ru8", "Cannot buffer entire body for content length: ");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      headers0.newBuilder();
      headers0.names();
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "ru8");
      assertEquals(0, list0.size());
      
      int int0 = HttpHeaders.parseSeconds("Cannot buffer entire body for content length: ", (-1723));
      assertEquals((-1723), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpHeaders.skipWhitespace("size < 8: ", 9);
      String[] stringArray0 = new String[0];
      Headers headers0 = Headers.of(stringArray0);
      Headers headers1 = Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.varyHeaders(headers0, headers1);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers1, "size < 8: ");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "vary";
      stringArray0[1] = "K";
      Headers headers0 = Headers.of(stringArray0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      long long0 = HttpHeaders.contentLength(headers1);
      assertEquals(0, headers1.size());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "vary";
      stringArray0[1] = "qn\"u5+";
      stringArray0[2] = "tF";
      stringArray0[3] = "content-length";
      stringArray0[4] = "vary";
      stringArray0[5] = "vary";
      stringArray0[6] = "min-fresh";
      stringArray0[7] = "private";
      Headers headers0 = Headers.of(stringArray0);
      headers0.newBuilder();
      headers0.toMultimap();
      HttpHeaders.skipUntil("tF", 2520, "Content-Length");
      Headers headers1 = Headers.of(stringArray0);
      HttpHeaders.varyHeaders(headers1, headers0);
      System.setCurrentTimeMillis(2520);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Vary", "size < 8: ");
      HttpHeaders.skipWhitespace("size < 8: ", 9);
      String[] stringArray0 = new String[0];
      Headers headers0 = Headers.of(stringArray0);
      Headers headers1 = Headers.of((Map<String, String>) hashMap0);
      Headers headers2 = HttpHeaders.varyHeaders(headers0, headers1);
      assertFalse(headers2.equals((Object)headers1));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Q[ {BiSF=]E%", "Q[ {BiSF=]E%");
      hashMap0.put("qa realmf=]e%", "qa realmf=]e%");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.parseChallenges(headers0, "Q[ {BiSF=]E%");
      HttpHeaders.varyFields(headers0);
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      hashMap0.put("Q[ {BiSF=]E%", "qa realmf=]e%");
      Headers headers1 = Headers.of((Map<String, String>) hashMap0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers1, "q[ {bisf=]e%");
      assertEquals(0, list0.size());
  }
}
