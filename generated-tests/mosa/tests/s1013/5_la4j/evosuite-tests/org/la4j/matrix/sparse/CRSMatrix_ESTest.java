/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:17:55 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(18, 18);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRows(vectorAccumulator0);
      cRSMatrix0.power(18);
      cRSMatrix0.blankOfShape(213, 18);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2434);
      // Undeclared exception!
      try { 
        CRSMatrix.random(1000, 2434, (double) 1000, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0, 0);
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.product();
      Matrix matrix0 = cRSMatrix0.multiplyByItsTranspose();
      assertTrue(matrix0.equals((Object)cRSMatrix0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(36);
      cRSMatrix0.sum();
      cRSMatrix0.power(36);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CRSMatrix.zero(637, 637);
      CRSMatrix.diagonal(637, 239);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 239;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) 5;
      CRSMatrix.from1DArray(2, 2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2955);
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-6090L));
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (-3509.7908069082623), (Random) mockRandom0);
      cRSMatrix0.max();
      cRSMatrix0.min();
      // Undeclared exception!
      try { 
        cRSMatrix0.set((-390), 478, (-390));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-390' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(637);
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double[][] doubleArray0 = new double[2][1];
      CRSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1.0;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      CRSMatrix.from2DArray(doubleArray0);
      int int0 = (-3187);
      // Undeclared exception!
      try { 
        Matrix.unit((-3187), 1665);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.random(1052, 1052, (-1909.5111375786028), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.min();
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = (double) 619;
      doubleArray0[2] = (double) 5;
      doubleArray0[5] = (double) 4;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(4, 5, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRSMatrix.diagonal(664, 664);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      CRSMatrix.from1DArray(664, 664, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(36, 36);
      assertEquals(36, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.027777777777777776, cRSMatrix0.density(), 0.01);
      assertEquals(36, cRSMatrix0.rows());
      assertEquals(36, cRSMatrix0.cardinality());
      assertEquals(36.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(863, 863, 863);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(863, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(863, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double0 = cRSMatrix0.foldNonZeroInColumn(863, vectorAccumulator0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(863, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(863, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[1];
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.select(intArray0, intArray0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(863, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(863, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(1, cRSMatrix1.columns());
      assertEquals(1, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertNotNull(cRSMatrix1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      double double1 = cRSMatrix1.min();
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(double1, double0, 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(863, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(863, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(1, cRSMatrix1.columns());
      assertEquals(1, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(664, 664);
      cRSMatrix0.copyOfShape(613, 1658);
      cRSMatrix0.minInRow(664);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(18, 18);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix1, cRSMatrix1, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      CRSMatrix.fromCSV("");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(36);
      cRSMatrix0.min();
      cRSMatrix0.getColumn(36);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(36, 36);
      cRSMatrix0.toColumnVector();
      cRSMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(863, 863, 863);
      int[] intArray0 = new int[1];
      cRSMatrix0.toRowMajorSparseMatrix();
      cRSMatrix0.select(intArray0, intArray0);
      cRSMatrix0.copyOfShape(863, 863);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(863, 863, 863);
      int[] intArray0 = new int[1];
      CRSMatrix.identity(863);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(493, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(664, 664);
      int int0 = 613;
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(613, 1658);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix1.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.toColumnVector();
      cRSMatrix0.minInRow(int0);
      int int1 = 21;
      double double0 = 0.0;
      cRSMatrix0.set(int1, int1, double0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(49, 49);
      cRSMatrix0.iteratorOfColumn(49);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = (double) 35;
      doubleArray0[2] = (double) 35;
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      cRSMatrix0.minInRow(5);
      cRSMatrix0.maxInRow(35);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.random(5, 49, 0.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.divide(1.0);
      org.evosuite.runtime.Random.setNextRandom(2);
      // Undeclared exception!
      try { 
        CRSMatrix.random(1255, 0, 1.0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 664;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(664, 664);
      int int1 = 1658;
      Matrix matrix0 = cRSMatrix0.copyOfShape(613, 1658);
      int int2 = 1727;
      SparseMatrix.block(matrix0, matrix0, matrix0, cRSMatrix0);
      cRSMatrix0.copyOfShape(int0, int2);
      cRSMatrix0.minInRow(int1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(36, 36);
      int[] intArray0 = new int[2];
      intArray0[0] = 18;
      intArray0[1] = 18;
      cRSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(36, 36);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(36, 36);
      cRSMatrix0.maxInRow(35);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(637, 637);
      cRSMatrix0.toColumnVector();
      cRSMatrix0.maxInRow(5);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 2;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      CRSMatrix.identity(2);
      MockRandom mockRandom0 = new MockRandom(2);
      // Undeclared exception!
      CRSMatrix.randomSymmetric(658, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CRSMatrix.zero(637, 637);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(637, 239);
      cRSMatrix0.toColumnVector();
      cRSMatrix0.minInRow(239);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1, 0);
      CRSMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(36);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.transform(matrixFunction0);
      cRSMatrix0.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = new CRSMatrix(10, 10);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix1, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(36, 4);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      mockRandom0.ints(2527L);
      CRSMatrix.zero(7, 4);
      // Undeclared exception!
      try { 
        cRSMatrix1.eachNonZeroInRow(2, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(637, 637);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow(8, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformRow(0, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(4);
      cRSMatrix1.copyOfShape(4, 3);
      // Undeclared exception!
      try { 
        cRSMatrix1.minInRow(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.is(matrixPredicate0);
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix0.setAll(Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(36);
      cRSMatrix0.setAll(36);
      cRSMatrix0.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 637;
      CRSMatrix.identity(637);
      int int1 = 36;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(637);
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 36;
      doubleArray1[1] = (double) 637;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MatrixOperation<Matrix> matrixOperation0 = inPlaceCopyMatrixToMatrix0.partiallyApply(denseMatrix0);
      cRSMatrix0.apply(matrixOperation0);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(int1, int1, int0);
      cRSMatrix1.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(36, 36);
      Matrix matrix0 = cRSMatrix1.copyOfShape(4, 4);
      matrix0.euclideanNorm();
      cRSMatrix1.toColumnVector();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(18, 18);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRows(vectorAccumulator0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(637);
      CRSMatrix cRSMatrix1 = new CRSMatrix(834, 36, 863);
      CRSMatrix cRSMatrix2 = new CRSMatrix();
      byte[] byteArray0 = cRSMatrix0.toBinary();
      CRSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.eachNonZero((MatrixProcedure) null);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(36, 36);
      cRSMatrix0.multiplyByItsTranspose();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(49, 49);
      CRSMatrix.diagonal(49, 36);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(49, 36);
      cRSMatrix1.shuffle();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = cRSMatrix0.toBinary();
      CRSMatrix.fromBinary(byteArray0);
      CRSMatrix.fromMatrixMarket("d^$QN_t");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(863, 863, 863);
      cRSMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(18, 18);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)18, (double)18, (double)8, (double)8, (double)18).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.transformRow(8, vectorFunction0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      cRSMatrix0.getColumn(8);
      cRSMatrix1.getOrElse(8, 8, 8);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.setAll(0.0);
      cRSMatrix0.setAll(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(36, 4);
      CRSMatrix cRSMatrix2 = new CRSMatrix(4, 36);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 36;
      doubleArray1[2] = (double) 36;
      doubleArray1[3] = (double) 4;
      doubleArray1[4] = (double) 4;
      doubleArray1[5] = (double) 4;
      doubleArray1[6] = (double) 36;
      doubleArray1[7] = (double) 36;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 36;
      doubleArray2[1] = (double) 4;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) 36;
      doubleArray3[1] = (double) 4;
      doubleArray3[2] = (double) 36;
      doubleArray3[3] = (double) 4;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (double) 36;
      doubleArray5[1] = (double) 4;
      doubleArray5[2] = (double) 4;
      doubleArray5[3] = (double) 36;
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      CRSMatrix cRSMatrix3 = new CRSMatrix(4, 4);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix2, cRSMatrix3, cRSMatrix1, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(18, 18);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)8, 17.0, (double)18, (double)18, (-52.0)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transformRow(8, vectorFunction0);
      // Undeclared exception!
      try { 
        matrix0.swapColumns(8, 63);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '63' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(18, 18);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1123.590643), (-2899.67355), (-373.25461369024), (double)18, (-1123.590643)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transformRow(8, vectorFunction0);
      cRSMatrix0.toColumnVector();
      matrix0.min();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(18, 18);
      int int0 = 8;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 1220.79864, (double)8, (double)8, 1220.79864).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transformRow(8, vectorFunction0);
      matrix0.rowMajorIterator();
      int int1 = 8;
      matrix0.minInRow(8);
      int int2 = (-747);
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow((-747));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -747
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(18, 18);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-597.039999685573), (-2776.89), (-597.039999685573), (double)18, (-2776.89)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transformRow(8, vectorFunction0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.updateAt(8, 8, matrixFunction0);
      matrix0.trace();
      matrix0.norm();
      cRSMatrix0.toColumnVector();
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(18, 18, matrixFunction1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }
}
