/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 13:50:18 GMT 2019
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.OrSelector;
import us.codecraft.webmagic.selector.Selector;
import us.codecraft.webmagic.selector.SmartContentSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.scheduler(queueScheduler0);
      Page page0 = new Page();
      spider2.getUUID();
      List<Request> list0 = page0.getTargetRequests();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-57);
      byteArray0[7] = (byte) (-43);
      page0.setBytes(byteArray0);
      Spider spider3 = spider2.startRequest(list0);
      spider3.stop();
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",rWp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(",rWp", ",rWp");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Locale locale0 = Locale.JAPANESE;
      locale0.getUnicodeLocaleAttributes();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider2.setScheduler(priorityScheduler0);
      Spider spider3 = spider1.thread(1390);
      spider3.run();
      spider3.getUUID();
      spider3.clearPipeline();
      FilePipeline filePipeline0 = new FilePipeline();
      spider0.pipeline(filePipeline0);
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      
      Spider spider4 = spider1.setScheduler(priorityScheduler0);
      spider1.initComponent();
      spider4.getStartTime();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("?:i)<d+7ZF6GeF7xmb");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("?:i)<d+7ZF6GeF7xmb", "=y|XsM^7/hgim");
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("=y|XsM^7/hgim", "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader1);
      Locale locale0 = Locale.JAPANESE;
      locale0.getUnicodeLocaleAttributes();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.setScheduler(priorityScheduler0);
      spider0.thread(5);
      spider0.run();
      spider1.getUUID();
      spider2.clearPipeline();
      FilePipeline filePipeline0 = new FilePipeline();
      spider2.pipeline((Pipeline) null);
      spider2.close();
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("g-");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.clearPipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("g-");
      spider1.scheduler = (Scheduler) fileCacheQueueScheduler0;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("g-", "g-");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      spider2.run();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "queue_";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("queue_");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_KmRzM>#Mzjv7");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      Spider spider3 = spider2.setPipelines(linkedList1);
      Spider spider4 = spider3.clearPipeline();
      LinkedList<Selector> linkedList2 = new LinkedList<Selector>();
      OrSelector orSelector0 = new OrSelector(linkedList2);
      List<String> list0 = orSelector0.selectList("us.codecraft.webmagic.utils.DoubleKeyMap");
      Spider spider5 = spider4.startUrls(list0);
      spider5.checkIfRunning();
      assertTrue(spider5.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H*[v)DYRb'. SF");
      Pipeline pipeline0 = null;
      Spider spider0 = Spider.create(simplePageProcessor0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider1.clearPipeline();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      SynchronousQueue<Runnable> synchronousQueue0 = new SynchronousQueue<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(0, 0, 0L, timeUnit0, synchronousQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(515);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider2 = spider1.setExecutorService(forkJoinPool0);
      Spider spider3 = spider2.scheduler((Scheduler) null);
      spider3.setScheduler((Scheduler) null);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H*[v)DYRb'. SF");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      boolean boolean0 = spider0.isSpawnUrl();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.clearPipeline();
      Spider spider3 = spider2.thread(5);
      Spider spider4 = spider3.setScheduler(priorityScheduler0);
      FilePipeline filePipeline0 = new FilePipeline("");
      Spider spider5 = spider4.addPipeline(filePipeline0);
      spider5.getSpiderListeners();
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Spider.Status.fromValue(200);
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",rWp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.clearPipeline();
      Spider spider1 = Spider.create(simplePageProcessor0);
      Spider spider2 = spider0.thread(2073);
      Spider spider3 = spider1.setSpawnUrl(false);
      spider2.getSpiderListeners();
      Spider spider4 = spider2.setSpiderListeners((List<SpiderListener>) null);
      assertTrue(spider4.isSpawnUrl());
      
      spider3.thread(31);
      int int0 = spider3.getThreadAlive();
      assertFalse(spider1.isSpawnUrl());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.sleep(0);
      Request request0 = new Request();
      ResultItems resultItems0 = new ResultItems();
      Map<String, Object> map0 = resultItems0.getAll();
      Request request1 = request0.setExtras(map0);
      Request request2 = request1.setCharset("threadNum should be more than one!");
      Request request3 = request2.setPriority(0L);
      Request request4 = request3.setBinaryContent(true);
      // Undeclared exception!
      try { 
        spider0.onError(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",rWp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.clearPipeline();
      Spider spider1 = Spider.create(simplePageProcessor0);
      Spider spider2 = spider1.setUUID(",rWp");
      Spider spider3 = spider1.setSpawnUrl(true);
      List<SpiderListener> list0 = spider2.getSpiderListeners();
      assertNull(list0);
      
      spider2.setSpiderListeners((List<SpiderListener>) null);
      spider3.thread(31);
      int int0 = spider3.getThreadAlive();
      assertEquals(0L, spider3.getPageCount());
      assertEquals(0, int0);
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("L5BJWzyM:B8hD2+");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("//title");
      Spider spider2 = spider1.startRequest((List<Request>) null);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider3 = spider2.addPipeline(multiPagePipeline0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("?");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider4 = spider3.setScheduler(duplicateRemovedScheduler0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider5 = spider4.thread((ExecutorService) forkJoinPool0, 1836);
      Spider spider6 = spider5.thread(200);
      assertTrue(spider6.isSpawnUrl());
      
      spider5.setSpawnUrl(false);
      spider4.getSpiderListeners();
      spider4.setSpiderListeners((List<SpiderListener>) null);
      spider0.setUUID("y1~?I@iZY,#5");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", (String) null);
      spider5.downloader(phantomJSDownloader0);
      spider0.getStartTime();
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider2 = spider1.setUUID("");
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = spider0.getAll((Collection<String>) set0);
      List<Pipeline> list1 = spider3.getAll((Collection<String>) list0);
      spider3.setPipelines(list1);
      PhantomJSDownloader phantomJSDownloader1 = null;
      try {
        phantomJSDownloader1 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("]");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.addPipeline((Pipeline) null);
      Spider spider2 = spider1.setUUID((String) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("'n", (String) null);
      Spider spider3 = spider0.setDownloader(phantomJSDownloader0);
      Locale locale0 = Locale.JAPANESE;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      spider2.getAll((Collection<String>) linkedHashSet0);
      spider3.setUUID((String) null);
      spider1.pipeline((Pipeline) null);
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "threadNum should be more than one!";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("threadNum should be more than one!");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("threadNum should be more than one!");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      String string1 = "Spider {} started!";
      Request request0 = new Request("Spider {} started!");
      Page page0 = new Page();
      ResultItems resultItems0 = page0.getResultItems();
      Map<String, Object> map0 = resultItems0.getAll();
      Request request1 = request0.setExtras(map0);
      priorityScheduler0.pushWhenNoDuplicate(request1, spider1);
      Spider spider2 = spider1.setScheduler(priorityScheduler0);
      spider2.start();
      spider2.sleep(5);
      spider0.getPageCount();
      String string2 = "ZZ|(LE)<J\"$=?";
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("ZZ|(LE)<J\"$=?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.ZZ|(LE)<J\"$=?
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H*[v)DYRb'. SF");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Spider.Status.fromValue(525);
      Page page0 = Page.fail();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, spider1, "*@[uTapc&", 1686L);
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1016, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, false);
      Spider spider2 = spider1.setExecutorService(forkJoinPool0);
      // Undeclared exception!
      try { 
        spider2.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("g-");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      Spider spider2 = spider1.setUUID("g-");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("g-");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      spider2.scheduler = (Scheduler) duplicateRemovedScheduler0;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread("g-");
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(5, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, false);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",rWp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(",rWp", ",rWp");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Locale locale0 = Locale.JAPANESE;
      locale0.getUnicodeLocaleAttributes();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider3 = spider2.setScheduler(priorityScheduler0);
      Spider spider4 = spider1.thread(1390);
      spider4.run();
      spider4.run();
      spider4.getUUID();
      spider4.clearPipeline();
      FilePipeline filePipeline0 = new FilePipeline();
      spider0.pipeline(filePipeline0);
      priorityScheduler0.poll(spider4);
      // Undeclared exception!
      try { 
        spider3.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("[", "*G3g@|5(VzQD[Ln'}");
      Spider spider2 = spider0.setDownloader(phantomJSDownloader0);
      Locale locale0 = Locale.JAPANESE;
      locale0.getUnicodeLocaleAttributes();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      List<Pipeline> list0 = spider2.getAll((Collection<String>) linkedTransferQueue0);
      spider1.setPipelines(list0);
      SmartContentSelector smartContentSelector0 = new SmartContentSelector();
      // Undeclared exception!
      try { 
        smartContentSelector0.selectList("*G3g@|5(VzQD[Ln'}");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.SmartContentSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Request request0 = new Request("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setDownloader((Downloader) null);
      Spider spider2 = spider1.setExitWhenComplete(false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      request0.addHeader("Running", (String) null);
      Spider spider3 = spider2.startUrls(linkedList0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider3.pipeline(multiPagePipeline0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-3163), threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H*[v)DYRb'. SF");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.clearPipeline();
      Spider spider3 = spider2.setExitWhenComplete(true);
      Page page0 = new Page();
      Json json0 = page0.getJson();
      Class<Request> class0 = Request.class;
      json0.toList(class0);
      Spider spider4 = spider3.startRequest((List<Request>) null);
      // Undeclared exception!
      try { 
        spider4.sleep((-1113));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",rWp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.clearPipeline();
      Spider spider1 = Spider.create(simplePageProcessor0);
      Spider spider2 = spider0.thread(2073);
      spider1.setSpawnUrl(false);
      spider2.getSpiderListeners();
      spider2.setSpiderListeners((List<SpiderListener>) null);
      spider2.setUUID("");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "[yGp9}0xZ%!");
      Spider spider3 = spider2.downloader(phantomJSDownloader0);
      assertTrue(spider3.isSpawnUrl());
      
      spider1.getStartTime();
      assertFalse(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",L");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getSpiderListeners();
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      Spider spider2 = spider1.setExitWhenComplete(false);
      spider2.setUUID("");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      PhantomJSDownloader phantomJSDownloader1 = null;
      try {
        phantomJSDownloader1 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\u00019 )ByHi[_ ");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("\u00019 )ByHi[_ ");
      Spider spider0 = Spider.create(simplePageProcessor1);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.pipeline(multiPagePipeline0);
      spider1.setExitWhenComplete(false);
      spider1.getUUID();
      spider0.getThreadAlive();
      spider1.setEmptySleepTime(0);
      assertFalse(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",rWp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(",rWp", ",rWp");
      Page page0 = new Page();
      Request request0 = new Request(",rWp");
      Request request1 = request0.addCookie((String) null, ")Q)43(&L~C");
      page0.addTargetRequest(request1);
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      spider1.setDownloader(phantomJSDownloader0);
      Locale locale0 = Locale.JAPANESE;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      int int0 = 253;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(253, (-2663), 0L, timeUnit0, linkedTransferQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",L");
      Spider spider0 = new Spider(simplePageProcessor0);
      int int0 = Spider.STAT_RUNNING;
      spider0.getStatus();
      Spider spider1 = new Spider(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) list0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "[\\w]+://";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[w]+://");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setUUID("[w]+://");
      Page page0 = new Page();
      boolean boolean0 = true;
      Page page1 = page0.setSkip(true);
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "us.codecraft.webmagic.processor.SimplePageProcessor";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.processor.SimplePageProcessor");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider1.setSpawnUrl(false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.processor.SimplePageProcessor", "us.codecraft.webmagic.processor.SimplePageProcessor");
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      FilePipeline filePipeline0 = new FilePipeline();
      spider3.addPipeline(filePipeline0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(2051, 2051, 1L, timeUnit0, priorityBlockingQueue0, threadFactory0, (RejectedExecutionHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",rWp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.clearPipeline();
      Spider spider1 = Spider.create(simplePageProcessor0);
      spider1.setUUID(",rWp");
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2073, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 37);
      String string0 = spider1.getUUID();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_KmRzM>#Mzjv7");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      Spider spider3 = spider2.setPipelines(linkedList1);
      Spider spider4 = spider3.clearPipeline();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(31, threadPoolExecutor_DiscardOldestPolicy0);
      spider2.thread((ExecutorService) scheduledThreadPoolExecutor0, 5000);
      String[] stringArray0 = new String[0];
      spider4.addUrl(stringArray0);
      spider1.setEmptySleepTime(5000);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("threadNum should be more than one!");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("threadNum should be more than one!");
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      String string0 = "Spider {} started!";
      Request request0 = new Request("Spider {} started!");
      Page page0 = new Page();
      ResultItems resultItems0 = page0.getResultItems();
      Map<String, Object> map0 = resultItems0.getAll();
      Request request1 = request0.setExtras(map0);
      priorityScheduler0.pushWhenNoDuplicate(request1, spider1);
      Spider spider2 = spider1.setScheduler(priorityScheduler0);
      spider2.start();
      spider2.sleep(5);
      spider0.getPageCount();
      String string1 = "ZZ|(LE)<J\"$=?";
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("ZZ|(LE)<J\"$=?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.ZZ|(LE)<J\"$=?
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",rWp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(",rWp", ",rWp");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<Pipeline> list0 = spider1.getAll((Collection<String>) set0);
      spider2.setPipelines(list0);
      SmartContentSelector smartContentSelector0 = new SmartContentSelector();
      // Undeclared exception!
      try { 
        spider2.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",rWp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(",rWp", ",rWp");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider1.thread(3859);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1391);
      Spider spider3 = spider0.setExecutorService(forkJoinPool0);
      spider2.run();
      spider3.getUUID();
      FilePipeline filePipeline0 = new FilePipeline();
      spider1.extractAndAddRequests((Page) null, false);
      spider0.run();
      spider3.sleep(947);
      boolean boolean0 = spider3.isSpawnUrl();
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Spider.Status.fromValue(2);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.processor.SimplePageProcessor");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request request0 = new Request();
      Request[] requestArray0 = new Request[8];
      requestArray0[0] = request0;
      requestArray0[1] = request0;
      requestArray0[2] = request0;
      requestArray0[3] = request0;
      requestArray0[4] = request0;
      requestArray0[5] = request0;
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      queueScheduler0.poll(spider1);
      requestArray0[6] = null;
      Request request1 = new Request("");
      requestArray0[7] = request1;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("2J");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      spider0.getUUID();
      Spider spider1 = spider0.addPipeline((Pipeline) null);
      spider1.stop();
      spider1.getCollectorPipeline();
      // Undeclared exception!
      try { 
        spider1.get("Naf#r,oPb;%X!e#yq}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("No:){ln(");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.setSpawnUrl(false);
      Spider spider3 = spider2.setExitWhenComplete(false);
      Page page0 = Page.fail();
      Json json0 = page0.getJson();
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      Spider spider4 = spider3.setSpiderListeners((List<SpiderListener>) null);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      SynchronousQueue<Runnable> synchronousQueue0 = new SynchronousQueue<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(1039, 1039, 1039, timeUnit0, synchronousQueue0, threadFactory0);
      Spider spider5 = spider4.setExecutorService(threadPoolExecutor0);
      spider5.setExecutorService(threadPoolExecutor0);
      assertFalse(spider2.isExitWhenComplete());
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1221);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = ",rWp";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",rWp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(",rWp", ",rWp");
      spider1.setDownloader(phantomJSDownloader0);
      Locale locale0 = Locale.JAPANESE;
      locale0.getUnicodeLocaleAttributes();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      int int0 = 182;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(182, threadPoolExecutor_DiscardOldestPolicy0);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, (-3962));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",rWp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(",rWp", ",rWp");
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      spider1.setDownloader(phantomJSDownloader0);
      Locale locale0 = Locale.JAPANESE;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      spider1.getAll((Collection<String>) linkedHashSet0);
      spider0.extractAndAddRequests(page0, false);
      String[] stringArray0 = new String[0];
      spider0.test(stringArray0);
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",rWp");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(",rWp", ",rWp");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider3 = spider2.setScheduler(priorityScheduler0);
      spider3.getAll((Collection<String>) set0);
      Spider spider4 = spider1.thread(1390);
      spider1.spawnUrl = false;
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      spider4.executorService = (ExecutorService) forkJoinPool0;
      Spider spider5 = spider2.thread((ExecutorService) forkJoinPool0, 1840);
      // Undeclared exception!
      try { 
        spider5.addRequest((Request[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("}'8+");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Request[] requestArray0 = new Request[7];
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("us.codecraft.webmagic.selector.OrSelector");
      fileCacheQueueScheduler0.poll(spider1);
      requestArray0[0] = null;
      Request request0 = new Request(" error");
      requestArray0[1] = request0;
      Request request1 = request0.setCharset("}'8+");
      Request request2 = request1.setPriority(0L);
      requestArray0[2] = request2;
      Request request3 = request0.setMethod("");
      requestArray0[3] = request3;
      Request request4 = new Request();
      requestArray0[4] = request4;
      Request request5 = request4.setMethod("Spider {} closed! {} pages downloaded.");
      requestArray0[5] = request5;
      Request request6 = request4.setCharset("");
      requestArray0[6] = request6;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",rWp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(",rWp", ",rWp");
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Locale locale0 = Locale.JAPANESE;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      spider1.getAll((Collection<String>) linkedHashSet0);
      spider2.setUUID("0-\u0000(N-8");
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("8,rWp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("8,rWp", "8,rWp");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      spider1.getAll((Collection<String>) set0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider1.setScheduler(queueScheduler0);
      Spider spider3 = spider2.pipeline((Pipeline) null);
      spider3.thread(31);
      spider1.getStatus();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      
      Spider spider4 = Spider.create(simplePageProcessor0);
      assertEquals(0L, spider4.getPageCount());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("g-");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      spider1.setUUID("g-");
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread("g-");
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(5, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, false);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_KmRzM>#Mzjv7");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      Spider spider3 = spider2.setPipelines(linkedList1);
      Spider spider4 = spider3.clearPipeline();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(31, threadPoolExecutor_DiscardOldestPolicy0);
      spider4.getCollectorPipeline();
      spider2.thread((ExecutorService) scheduledThreadPoolExecutor0, 5000);
      String[] stringArray0 = new String[0];
      spider4.addUrl(stringArray0);
      spider1.setEmptySleepTime(5000);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",rWp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      spider0.clearPipeline();
      Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.thread(5);
      Spider spider2 = spider1.setDownloader((Downloader) null);
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      spider0.setExitWhenComplete(false);
      boolean boolean0 = true;
      spider0.getSite();
      int int0 = 3150;
      Page page0 = new Page();
      Page page1 = page0.setSkip(true);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      page1.setHeaders(hashMap0);
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("KnQZoH");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      spider1.setExitWhenComplete(true);
      Spider spider2 = new Spider(simplePageProcessor0);
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardOldestPolicy0);
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Xc~S>d");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Xc~S>d", "Xc~S>d");
      spider0.downloader(phantomJSDownloader0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, (ThreadFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",rWp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(",rWp", ",rWp");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<Pipeline> list0 = spider1.getAll((Collection<String>) set0);
      spider2.setPipelines(list0);
      SmartContentSelector smartContentSelector0 = new SmartContentSelector();
      // Undeclared exception!
      try { 
        smartContentSelector0.selectList("#v\"?o*FQ~9*tgwC~");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.SmartContentSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      Request request0 = new Request();
      Request request1 = request0.setMethod("");
      // Undeclared exception!
      try { 
        spider1.onError(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "$*[v)DYRb'. SF";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$*[v)DYRb'. SF");
      Locale locale0 = Locale.JAPANESE;
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.startRequest((List<Request>) null);
      Spider spider2 = spider1.setSpawnUrl(false);
      Spider spider3 = spider2.setExitWhenComplete(false);
      Spider spider4 = spider3.setPipelines((List<Pipeline>) null);
      Json json0 = new Json((String) null);
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      Spider spider5 = spider4.setSpiderListeners((List<SpiderListener>) null);
      String string1 = "eLp?5J]";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("eLp?5J]", "$*[v)DYRb'. SF");
      Spider spider6 = spider5.downloader(phantomJSDownloader0);
      Spider spider7 = spider2.setScheduler(priorityScheduler0);
      spider7.runAsync();
      // Undeclared exception!
      try { 
        spider6.thread((-2821));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_KmRzM>#Mzjv7");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.clearPipeline();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider1.setSpiderListeners(linkedList0);
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      Spider.create(simplePageProcessor0);
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNotNull(list0);
      
      spider0.isExitWhenComplete();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_KmRzM>#Mzjv7");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.setScheduler(queueScheduler0);
      ExecutorService executorService0 = null;
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      Request request0 = new Request();
      Request request1 = request0.setBinaryContent(true);
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider2 = spider1.setPipelines(linkedList0);
      queueScheduler0.setDuplicateRemover((DuplicateRemover) null);
      int int0 = (-1066);
      request1.toString();
      // Undeclared exception!
      try { 
        spider2.thread((ExecutorService) null, (-1066));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H*[v)DYRb'. SF");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("init file error");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockThread mockThread0 = new MockThread("init file error");
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(3411, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, true);
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      Spider spider2 = spider1.clearPipeline();
      Spider spider3 = spider2.setSpawnUrl(false);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Spider spider4 = spider3.startUrls(list0);
      FilePipeline filePipeline0 = new FilePipeline("init file error");
      Spider spider5 = spider4.addPipeline(filePipeline0);
      // Undeclared exception!
      try { 
        spider5.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider2 = spider1.scheduler(fileCacheQueueScheduler0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider3 = spider2.setPipelines(linkedList0);
      // Undeclared exception!
      try { 
        spider3.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",rWp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(",rWp", ",rWp");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Locale locale0 = Locale.JAPANESE;
      locale0.getUnicodeLocaleAttributes();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider2.setScheduler(priorityScheduler0);
      Spider spider3 = spider1.thread(1390);
      spider1.spawnUrl = false;
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      spider3.executorService = (ExecutorService) forkJoinPool0;
      spider3.run();
      spider3.getUUID();
      spider3.clearPipeline();
      FilePipeline filePipeline0 = new FilePipeline();
      spider0.pipeline(filePipeline0);
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "JwZ}BusrXF|";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("JwZ}BusrXF|");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H*[v)DYRb'. SF");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      Spider spider1 = Spider.create(simplePageProcessor0);
      Spider spider2 = new Spider(simplePageProcessor0);
      Request request0 = new Request("H*[v)DYRb'. SF");
      Request request1 = request0.setUrl("H*[v)DYRb'. SF");
      // Undeclared exception!
      try { 
        spider1.onSuccess(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("g-");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      spider1.setUUID("g-");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("g-");
      spider0.getThreadAlive();
      Page.fail();
      Page page0 = new Page();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H*[v)DYRb'. SF");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("D1KzT,0");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockThread mockThread0 = new MockThread("D1KzT,0");
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(39, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, true);
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider1.setScheduler(fileCacheQueueScheduler0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Spider spider2 = spider0.setSpawnUrl(true);
      // Undeclared exception!
      try { 
        spider2.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      QueueScheduler queueScheduler0 = new QueueScheduler();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setPipelines((List<Pipeline>) null);
      spider1.setEmptySleepTime((-568));
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_KmRzM>#Mzjv7");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      spider2.setPipelines(linkedList1);
      Spider.create(simplePageProcessor0);
      Spider spider3 = new Spider(simplePageProcessor0);
      Request request0 = new Request("href");
      request0.setUrl(", extras=");
      Spider spider4 = spider1.setSpawnUrl(false);
      // Undeclared exception!
      try { 
        spider4.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "Copyright");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      Spider spider3 = spider2.scheduler((Scheduler) null);
      Spider spider4 = spider3.clearPipeline();
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("", "process request ");
      spider4.setDownloader(phantomJSDownloader1);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      String string0 = "";
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider5 = Spider.create(simplePageProcessor1);
      // Undeclared exception!
      try { 
        spider5.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.setScheduler(priorityScheduler0);
      spider0.clearPipeline();
      spider2.getScheduler();
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-120);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum((-1));
      Spider spider2 = spider1.setDownloader(phantomJSDownloader1);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider2.scheduler(priorityScheduler0);
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      spider2.getAll((Collection<String>) priorityBlockingQueue0);
      // Undeclared exception!
      try { 
        spider0.sleep((-104));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$VALUES");
      Spider.create(simplePageProcessor0);
      String string0 = "8";
      Json json0 = new Json("8");
      Class<Request> class0 = Request.class;
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Qct");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.addRequest((Request[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H*[v)DYRb'. SF");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("H*[v)DYRb'. SF");
      Spider spider0 = Spider.create(simplePageProcessor1);
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      spider0.isExitWhenComplete();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",rWp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(",rWp", ",rWp");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Locale locale0 = Locale.JAPANESE;
      locale0.getUnicodeLocaleAttributes();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider2.setScheduler(priorityScheduler0);
      int int0 = 1390;
      spider1.thread(1390);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ",rWp";
      stringArray0[1] = ",rWp";
      stringArray0[2] = ",rWp";
      stringArray0[3] = "<t9ux";
      stringArray0[4] = ",rWp";
      stringArray0[5] = ",rWp";
      stringArray0[6] = ",rWp";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",rWp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(",rWp", ",rWp");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      spider1.getAll((Collection<String>) set0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider1.setScheduler(queueScheduler0);
      Spider spider3 = spider2.pipeline((Pipeline) null);
      spider3.thread(31);
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider2 = spider1.setUUID("");
      spider2.setDownloader(phantomJSDownloader0);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      spider0.getAll((Collection<String>) set0);
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        spider2.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("?:i)<d+7ZF6GeF7xmb");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getUUID();
      Spider spider1 = spider0.addPipeline((Pipeline) null);
      spider0.stop();
      spider0.getCollectorPipeline();
      // Undeclared exception!
      try { 
        spider1.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      spider1.extractAndAddRequests((Page) null, false);
      Spider spider2 = spider1.thread(5);
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request();
      Request request1 = request0.addCookie("", "");
      Request request2 = request1.putExtra("", spider0);
      Request request3 = request2.addHeader("", "");
      requestArray0[0] = request3;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H*[v)DYRb'. SF");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor1);
      spider0.setSpawnUrl(false);
      Request request0 = new Request();
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      spider1.stop();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",rWp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      String string0 = "";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", ",rWp");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "2J";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("2J");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request request0 = new Request();
      Request request1 = request0.setPriority(1557L);
      request1.putExtra("_cycle_tried_times", "2J");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider1 = spider0.startUrls(linkedList0);
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedList0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H*[v)DYRb'. SF");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.test((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.processor.SimplePageProcessor");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request request0 = new Request();
      Request request1 = request0.setPriority((-583L));
      // Undeclared exception!
      try { 
        spider0.onSuccess(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("~LlK5eH<!3223bm=;");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.setSpawnUrl(false);
      spider0.scheduler = (Scheduler) priorityScheduler0;
      boolean boolean0 = spider0.isSpawnUrl();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$N}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[2];
      Request request0 = new Request();
      Request request1 = request0.addHeader("$N}", "$N}");
      Request request2 = request1.addCookie("_cycle_tried_times", "_cycle_tried_times");
      Request request3 = request2.putExtra("_cycle_tried_times", "$N}");
      request1.addCookie("$N}", "Y~prS61l");
      Request request4 = request3.setCharset("Y~prS61l");
      Request request5 = request4.setPriority(0L);
      requestArray0[0] = request5;
      Request request6 = request0.setBinaryContent(true);
      requestArray0[1] = request6;
      Spider spider1 = spider0.addRequest(requestArray0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.setScheduler(priorityScheduler0);
      // Undeclared exception!
      try { 
        spider2.thread((-729));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider2 = spider1.scheduler(fileCacheQueueScheduler0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider3 = spider2.setPipelines(linkedList0);
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3, threadPoolExecutor_DiscardOldestPolicy0);
      // Undeclared exception!
      try { 
        spider3.thread((ExecutorService) scheduledThreadPoolExecutor0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Spider.Status.fromValue((-72));
      SimplePageProcessor simplePageProcessor0 = null;
      try {
        simplePageProcessor0 = new SimplePageProcessor((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.processor.SimplePageProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("2J");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 1);
      Request request0 = new Request();
      Request request1 = request0.setBinaryContent(false);
      Request request2 = request1.setCharset("+-b3*J*3intn5\"tMI");
      Request request3 = request2.setMethod("_cycle_tried_times");
      Request request4 = request3.setPriority(1);
      // Undeclared exception!
      try { 
        spider1.onError(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        spider0.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request();
      Request request1 = request0.setPriority((-965L));
      String string0 = "";
      Request request2 = request1.addCookie("", "");
      Request request3 = request2.putExtra("", spider0);
      Request request4 = request3.addHeader("", "");
      requestArray0[0] = request4;
      String string1 = "LLCfAitOL";
      // Undeclared exception!
      try { 
        spider0.onError(request3);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      QueueScheduler queueScheduler0 = new QueueScheduler();
      String[] stringArray0 = new String[0];
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      
      Spider spider1 = spider0.setExitWhenComplete(false);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1840, threadFactory0, threadPoolExecutor_AbortPolicy0);
      Spider spider2 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 3211);
      Spider spider3 = spider2.setExecutorService(scheduledThreadPoolExecutor0);
      Spider spider4 = spider3.setSpawnUrl(true);
      Spider spider5 = spider4.clearPipeline();
      spider5.getSpiderListeners();
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "[yE]x~%5ud jX2#)p>Z";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[yE]x~%5ud jX2#)p>Z");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      // Undeclared exception!
      try { 
        spider1.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Spider.Status.values();
      String string0 = "g-";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("g-");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      Spider spider2 = spider1.setUUID("g-");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider3 = spider2.pipeline(resultItemsCollectorPipeline0);
      Spider spider4 = spider3.downloader((Downloader) null);
      // Undeclared exception!
      try { 
        spider4.thread((-568));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".!yb~o6\"qCIUQod#ZW|");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider1.thread(1655);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".!yb~o6\"qCIUQod#ZW|";
      stringArray0[1] = ".!yb~o6\"qCIUQod#ZW|";
      stringArray0[2] = ".!yb~o6\"qCIUQod#ZW|";
      stringArray0[3] = ".!yb~o6\"qCIUQod#ZW|";
      stringArray0[4] = ".!yb~o6\"qCIUQod#ZW|";
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider2 = spider1.scheduler(fileCacheQueueScheduler0);
      spider2.addPipeline((Pipeline) null);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("g-");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.clearPipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("g-");
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider0.pipelines = (List<Pipeline>) linkedList0;
      spider1.scheduler = (Scheduler) fileCacheQueueScheduler0;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("g-", "g-");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      spider2.run();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      spider2.getThreadAlive();
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".z1Z;w)2/&5Lmr,p");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider2 = spider1.addPipeline(consolePipeline0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".z1Z;w)2/&5Lmr,p";
      stringArray0[1] = ".z1Z;w)2/&5Lmr,p";
      stringArray0[2] = ".z1Z;w)2/&5Lmr,p";
      stringArray0[3] = ".z1Z;w)2/&5Lmr,p";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      spider0.setScheduler(fileCacheQueueScheduler0);
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H*[v)DYRb'. SF");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      spider1.sleep(0);
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&Oqkx`");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread(1655);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider2 = spider1.setExecutorService(forkJoinPool0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      forkJoinPool0.getAsyncMode();
      boolean boolean0 = false;
      Spider spider3 = spider2.setExitWhenComplete(false);
      Collection<String> collection0 = null;
      spider3.getUUID();
      Spider spider4 = spider3.clearPipeline();
      CollectorPipeline collectorPipeline0 = spider3.getCollectorPipeline();
      spider4.pipeline(collectorPipeline0);
      // Undeclared exception!
      try { 
        spider3.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Spider.Status.fromValue(704);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("1nvalid regex");
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("1nvalid regex");
      Spider spider0 = Spider.create(simplePageProcessor1);
      Spider spider1 = spider0.setUUID("9TB}fVbbHXCSw%^4OGE");
      Spider spider2 = spider1.setExitWhenComplete(false);
      Spider spider3 = spider2.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "1nvalid regex");
      Spider spider4 = spider3.downloader(phantomJSDownloader0);
      Request[] requestArray0 = new Request[6];
      Request request0 = new Request();
      Request request1 = request0.addCookie("aO/YK", "us.codecraft.webmagic.model.HttpRequestBody");
      Request request2 = request1.setCharset("us.codecraft.webmagic.Spider");
      Request request3 = request2.setUrl("abs:href");
      Request request4 = request3.setPriority(704);
      ResultItems resultItems0 = new ResultItems();
      Map<String, Object> map0 = resultItems0.getAll();
      Request request5 = request4.setExtras(map0);
      requestArray0[0] = request5;
      Request request6 = request5.setCharset("_cycle_tried_times");
      requestArray0[1] = request6;
      Request request7 = request1.setPriority(1615L);
      requestArray0[2] = request7;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      byte byte0 = (byte)63;
      byteArray0[1] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Request request8 = request3.putExtra("us.codecraft.webmagic.selector.BaseElementSelector", byteArrayInputStream0);
      requestArray0[3] = request8;
      Request request9 = request0.setBinaryContent(false);
      requestArray0[4] = request9;
      Request request10 = request0.setCharset("process request ");
      Request request11 = request10.setMethod("_cycle_tried_times");
      requestArray0[5] = request11;
      // Undeclared exception!
      try { 
        spider4.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H*[v)DYRb'. SF");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread(1);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      spider1.thread((ExecutorService) forkJoinPool0, 1511);
      spider0.runAsync();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",rWp");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.clearPipeline();
      Spider spider1 = Spider.create(simplePageProcessor0);
      Spider spider2 = spider0.thread(2073);
      spider1.setSpawnUrl(false);
      spider2.getSpiderListeners();
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      spider3.getUUID();
      spider2.setUUID("");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "[yGp9}0xZ%!");
      Spider spider4 = spider2.downloader(phantomJSDownloader0);
      spider4.setEmptySleepTime((-1066));
      assertTrue(spider4.isSpawnUrl());
      
      spider1.getStartTime();
      assertFalse(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("2J");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request request0 = new Request();
      Request request1 = request0.setPriority(1557L);
      Request request2 = request1.putExtra("_cycle_tried_times", "2J");
      Request request3 = request2.putExtra("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler$2", "2J");
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      Spider.create(simplePageProcessor0);
      Spider spider1 = new Spider(simplePageProcessor0);
      Request request4 = new Request("_cycle_tried_times");
      request3.setUrl("TKWd'9]FIEE_");
      // Undeclared exception!
      try { 
        spider1.onSuccess(request3);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }
}
