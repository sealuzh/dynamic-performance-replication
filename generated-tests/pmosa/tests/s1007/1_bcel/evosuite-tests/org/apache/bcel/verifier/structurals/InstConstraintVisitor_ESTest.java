/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 08:40:01 GMT 2018
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.OutputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.AASTORE;
import org.apache.bcel.generic.ACONST_NULL;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ARRAYLENGTH;
import org.apache.bcel.generic.ASTORE;
import org.apache.bcel.generic.ATHROW;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.BREAKPOINT;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CALOAD;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2L;
import org.apache.bcel.generic.DADD;
import org.apache.bcel.generic.DALOAD;
import org.apache.bcel.generic.DCMPG;
import org.apache.bcel.generic.DCONST;
import org.apache.bcel.generic.DDIV;
import org.apache.bcel.generic.DLOAD;
import org.apache.bcel.generic.DMUL;
import org.apache.bcel.generic.DNEG;
import org.apache.bcel.generic.DREM;
import org.apache.bcel.generic.DRETURN;
import org.apache.bcel.generic.DSTORE;
import org.apache.bcel.generic.DSUB;
import org.apache.bcel.generic.DUP;
import org.apache.bcel.generic.DUP2;
import org.apache.bcel.generic.DUP2_X1;
import org.apache.bcel.generic.DUP2_X2;
import org.apache.bcel.generic.DUP_X1;
import org.apache.bcel.generic.F2D;
import org.apache.bcel.generic.F2I;
import org.apache.bcel.generic.F2L;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FASTORE;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FCMPL;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.FDIV;
import org.apache.bcel.generic.FLOAD;
import org.apache.bcel.generic.FMUL;
import org.apache.bcel.generic.FNEG;
import org.apache.bcel.generic.FREM;
import org.apache.bcel.generic.FRETURN;
import org.apache.bcel.generic.FSTORE;
import org.apache.bcel.generic.FSUB;
import org.apache.bcel.generic.GETSTATIC;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.I2B;
import org.apache.bcel.generic.I2C;
import org.apache.bcel.generic.I2D;
import org.apache.bcel.generic.I2F;
import org.apache.bcel.generic.I2L;
import org.apache.bcel.generic.IADD;
import org.apache.bcel.generic.IAND;
import org.apache.bcel.generic.IASTORE;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IDIV;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNONNULL;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.IF_ICMPLE;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.IMPDEP1;
import org.apache.bcel.generic.IMPDEP2;
import org.apache.bcel.generic.IMUL;
import org.apache.bcel.generic.INEG;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.INVOKEINTERFACE;
import org.apache.bcel.generic.INVOKESPECIAL;
import org.apache.bcel.generic.INVOKESTATIC;
import org.apache.bcel.generic.IOR;
import org.apache.bcel.generic.IREM;
import org.apache.bcel.generic.ISHL;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.ISUB;
import org.apache.bcel.generic.IUSHR;
import org.apache.bcel.generic.IXOR;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.L2D;
import org.apache.bcel.generic.L2F;
import org.apache.bcel.generic.L2I;
import org.apache.bcel.generic.LADD;
import org.apache.bcel.generic.LALOAD;
import org.apache.bcel.generic.LAND;
import org.apache.bcel.generic.LASTORE;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.LDC;
import org.apache.bcel.generic.LDC2_W;
import org.apache.bcel.generic.LDC_W;
import org.apache.bcel.generic.LLOAD;
import org.apache.bcel.generic.LMUL;
import org.apache.bcel.generic.LNEG;
import org.apache.bcel.generic.LREM;
import org.apache.bcel.generic.LRETURN;
import org.apache.bcel.generic.LSHL;
import org.apache.bcel.generic.LSHR;
import org.apache.bcel.generic.LSTORE;
import org.apache.bcel.generic.LSUB;
import org.apache.bcel.generic.LUSHR;
import org.apache.bcel.generic.LXOR;
import org.apache.bcel.generic.MONITORENTER;
import org.apache.bcel.generic.MONITOREXIT;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.NEW;
import org.apache.bcel.generic.NEWARRAY;
import org.apache.bcel.generic.NOP;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.POP;
import org.apache.bcel.generic.POP2;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.PUTFIELD;
import org.apache.bcel.generic.PUTSTATIC;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.SALOAD;
import org.apache.bcel.generic.SASTORE;
import org.apache.bcel.generic.SIPUSH;
import org.apache.bcel.generic.SWAP;
import org.apache.bcel.generic.StoreInstruction;
import org.apache.bcel.generic.TABLESWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.apache.bcel.verifier.structurals.OperandStack;
import org.apache.bcel.verifier.structurals.UninitializedObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstConstraintVisitor_ESTest extends InstConstraintVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FADD fADD0 = new FADD();
      LLOAD lLOAD0 = new LLOAD(0);
      instConstraintVisitor0.visitLLOAD(lLOAD0);
      fADD0.toString(false);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFADD(fADD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ALOAD aLOAD0 = new ALOAD(3691);
      instConstraintVisitor0.visitALOAD(aLOAD0);
      assertEquals(4, aLOAD0.getLength());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      CALOAD cALOAD0 = null;
      DLOAD dLOAD0 = new DLOAD(3015);
      instConstraintVisitor0.visitDLOAD(dLOAD0);
      IINC iINC0 = new IINC(2445, 5);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = 241;
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackInstruction(dUP2_X1_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}uMCFHT");
      LLOAD lLOAD0 = new LLOAD(87);
      lLOAD0.toString();
      instConstraintVisitor0.visitLLOAD(lLOAD0);
      SWAP sWAP0 = new SWAP();
      // Undeclared exception!
      try { 
        sWAP0.accept(instConstraintVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FLOAD fLOAD0 = new FLOAD(2064);
      instConstraintVisitor0.visitFLOAD(fLOAD0);
      assertEquals(2064, fLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ILOAD iLOAD0 = new ILOAD(3);
      instConstraintVisitor0.visitILOAD(iLOAD0);
      assertEquals("iload_3", iLOAD0.getName());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IXOR iXOR0 = new IXOR();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IMPDEP1 iMPDEP1_0 = new IMPDEP1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP1(iMPDEP1_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP1.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LCONST lCONST0 = new LCONST(0L);
      instConstraintVisitor0.visitLCONST(lCONST0);
      assertEquals(1, lCONST0.getLength());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FCONST fCONST0 = new FCONST(0.0F);
      instConstraintVisitor0.visitFCONST(fCONST0);
      assertEquals("fconst_0", fCONST0.getName());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ISTORE iSTORE0 = new ISTORE(87);
      instConstraintVisitor0.visitISTORE(iSTORE0);
      assertEquals((short)54, iSTORE0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FSTORE fSTORE0 = new FSTORE(111);
      instConstraintVisitor0.visitFSTORE(fSTORE0);
      assertEquals(2, fSTORE0.getLength());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      SIPUSH sIPUSH0 = new SIPUSH((short) (-887));
      instConstraintVisitor0.visitSIPUSH(sIPUSH0);
      assertEquals("sipush", sIPUSH0.getName());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      instConstraintVisitor0.visitACONST_NULL(aCONST_NULL0);
      assertEquals((short)1, aCONST_NULL0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitDCONST((DCONST) null);
      IINC iINC0 = null;
      try {
        iINC0 = new IINC((-811), (-811));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Negative index value: -811
         //
         verifyException("org.apache.bcel.generic.IINC", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitBREAKPOINT(bREAKPOINT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as BREAKPOINT.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LALOAD lALOAD0 = new LALOAD();
      Constant[] constantArray0 = new Constant[0];
      instConstraintVisitor0.visitGOTO_W((GOTO_W) null);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      lALOAD0.toString(constantPool1);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLALOAD(lALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitLSTORE((LSTORE) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(3, 131);
      FileSystemHandling.shouldAllThrowIOExceptions();
      iNVOKEINTERFACE0.getExceptions();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEINTERFACE(iNVOKEINTERFACE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DSTORE dSTORE0 = new DSTORE(0);
      instConstraintVisitor0.visitDSTORE(dSTORE0);
      DUP dUP0 = new DUP();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP(dUP0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DMUL dMUL0 = new DMUL();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKESPECIAL iNVOKESPECIAL0 = new INVOKESPECIAL(131);
      instConstraintVisitor0.visitInvokeInstruction(iNVOKESPECIAL0);
      assertEquals(3, iNVOKESPECIAL0.getLength());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitARRAYLENGTH(aRRAYLENGTH0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      InstructionList instructionList0 = new InstructionList();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LREM lREM0 = (LREM)InstructionConstants.LREM;
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) lREM0);
      JSR_W jSR_W0 = new JSR_W(instructionHandle0);
      jSR_W0.updateTarget(instructionHandle0, instructionHandle0);
      instConstraintVisitor0.visitJSR_W(jSR_W0);
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X2(dUP2_X2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ICONST iCONST0 = new ICONST(2);
      instConstraintVisitor0.visitICONST(iCONST0);
      assertEquals((short)5, iCONST0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BIPUSH bIPUSH0 = new BIPUSH((byte)87);
      instConstraintVisitor0.visitBIPUSH(bIPUSH0);
      assertEquals(2, bIPUSH0.getLength());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LASTORE lASTORE0 = new LASTORE();
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY((short)512, (short)179);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMULTIANEWARRAY(mULTIANEWARRAY0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LCONST lCONST0 = new LCONST(0L);
      GETSTATIC gETSTATIC0 = new GETSTATIC(428);
      instConstraintVisitor0.visitGETSTATIC(gETSTATIC0);
      InstructionList instructionList0 = new InstructionList(lCONST0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) lCONST0);
      JSR jSR0 = new JSR(instructionHandle0);
      instConstraintVisitor0.visitJSR(jSR0);
      assertEquals(0, jSR0.getIndex());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      I2F i2F0 = new I2F();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1706);
      ObjectType objectType0 = new ObjectType("~q5zz");
      OperandStack operandStack0 = new OperandStack(1706, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      instConstraintVisitor0.visitPOP((POP) null);
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(535);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEDYNAMIC(iNVOKEDYNAMIC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INVOKEDYNAMIC instruction is not supported at this time
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitGOTO((GOTO) null);
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP2(iMPDEP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP2.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DUP2 dUP2_0 = new DUP2();
      BasicType basicType0 = Type.BYTE;
      instConstraintVisitor0.setMethodGen((MethodGen) null);
      NEWARRAY nEWARRAY0 = new NEWARRAY(basicType0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackProducer(dUP2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(1441, 1441);
      int int0 = 17;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitTABLESWITCH((TABLESWITCH) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE((short)179, (short)179);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      LDC_W lDC_W0 = new LDC_W((short)179);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDC_W(lDC_W0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LDC_W constraint violated: Referenced constant should be a CONSTANT_Integer, a CONSTANT_Float, a CONSTANT_String or a CONSTANT_Class, but is 'null'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      PUTSTATIC pUTSTATIC0 = new PUTSTATIC(1);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFieldInstruction(pUTSTATIC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction PUTSTATIC constraint violated: Index '1' should refer to a CONSTANT_Fieldref_info structure, but refers to 'null'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      I2L i2L0 = new I2L();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(104, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LREM lREM0 = new LREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLREM(lREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LREM constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(734, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      I2D i2D0 = new I2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2D(i2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LPp</[tX;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      I2L i2L0 = new I2L();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LREM lREM0 = new LREM();
      ARETURN aRETURN0 = new ARETURN();
      instConstraintVisitor0.visitARETURN(aRETURN0);
      InstructionList instructionList0 = new InstructionList(aRETURN0);
      FMUL fMUL0 = (FMUL)InstructionConstants.FMUL;
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) fMUL0, (Instruction) fMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction fmul[106](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[1];
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      LDC2_W lDC2_W0 = new LDC2_W(39);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDC2_W(lDC2_W0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LDC2_W constraint violated: Referenced constant should be a CONSTANT_Integer, a CONSTANT_Float or a CONSTANT_String, but is 'null'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      I2L i2L0 = new I2L();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      int int0 = 2572;
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      operandStack0.getClone();
      operandStack0.initializeObject((UninitializedObjectType) null);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LREM lREM0 = new LREM();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Pp<.[tX");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X1((DUP2_X1) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      I2L i2L0 = new I2L();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LREM lREM0 = new LREM();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Pp<.[tX");
      lREM0.toString(true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream1);
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X1(dUP2_X1_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(2055, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      IAND iAND0 = new IAND();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIAND(iAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IAND constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("tXv2D");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tXv2D");
      L2F l2F0 = new L2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2F(l2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2F constraint violated: The value at the stack top is not of type 'long', but of type 'tXv2D'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DALOAD dALOAD0 = new DALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDALOAD(dALOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LPp</[tX;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(734, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      F2L f2L0 = new F2L();
      F2I f2I0 = new F2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2I(f2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LPp</[tX;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("d:]*:F}h%rklPg@`bi");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      L2I l2I0 = new L2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2I(l2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2I constraint violated: The value at the stack top is not of type 'long', but of type 'd:]*:F}h%rklPg@`bi'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      I2L i2L0 = new I2L();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LREM lREM0 = new LREM();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Pp<.[tX");
      lREM0.toString(true);
      DMUL dMUL0 = new DMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDMUL(dMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LPp</[tX;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("tXv2D");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      LADD lADD0 = new LADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLADD(lADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LADD constraint violated: The value at the stack top is not of type 'long', but of type 'tXv2D'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("The value at the stack next-to-top is not of a ReferenceType, but of type '");
      OperandStack operandStack0 = new OperandStack(734, objectType0);
      LocalVariables localVariables0 = new LocalVariables(734);
      localVariables0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      I2C i2C0 = new I2C();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIADD((IADD) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(133, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      I2D i2D0 = new I2D();
      DADD dADD0 = new DADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDADD(dADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DADD constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("Stack next-to-top must be of type double[] but is '");
      OperandStack operandStack0 = new OperandStack(220, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      LocalVariables localVariables0 = new LocalVariables(220);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      LREM lREM0 = new LREM();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Pp<.[tX");
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackProducer(lREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LREM constraint violated: Cannot consume 4 stack slots: only 1 slot(s) left on stack!
         // Stack:
         // Slots used: 1 MaxStack: 220.
         // Stack next-to-top must be of type double[] but is ' (Size: 1)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DSUB dSUB0 = new DSUB();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LREM lREM0 = new LREM();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Pp<.[tX");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream1);
      lREM0.dump(dataOutputStream0);
      LMUL lMUL0 = new LMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLMUL(lMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LPp</[tX;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("Pp<.[t");
      OperandStack operandStack0 = new OperandStack(734, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      INEG iNEG0 = new INEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINEG(iNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LPp</[t;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      I2L i2L0 = new I2L();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(1180, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "");
      IXOR iXOR0 = new IXOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIXOR(iXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IXOR constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(5);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINSTANCEOF(iNSTANCEOF0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("%l+*");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINSTANCEOF((INSTANCEOF) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("Cannot STORE: Stack to read from is empty.");
      OperandStack operandStack0 = new OperandStack(2055, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      I2D i2D0 = new I2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSUB((LSUB) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(2055, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      I2D i2D0 = new I2D();
      LSHR lSHR0 = new LSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHR(lSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHR constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType.getInstance("%l+*");
      OperandStack operandStack0 = new OperandStack(2572);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LREM lREM0 = new LREM();
      FSTORE fSTORE0 = new FSTORE(2572);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(fSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FSTORE constraint violated: Cannot STORE: Stack to read from is empty.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DSUB dSUB0 = new DSUB();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ASTORE aSTORE0 = new ASTORE(1988);
      instConstraintVisitor0.visitStoreInstruction(aSTORE0);
      LMUL lMUL0 = new LMUL();
      DMUL dMUL0 = new DMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFSUB((FSUB) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LPp</[tX;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("tXv2D");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tXv2D");
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFSUB((FSUB) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("1<.[`X");
      OperandStack operandStack0 = new OperandStack(2547, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LNEG lNEG0 = new LNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLNEG(lNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L1</[`X;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Pp<.[tX");
      ISUB iSUB0 = new ISUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISUB(iSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LPp</[tX;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(2055, objectType0);
      operandStack0.getClone();
      operandStack0.clone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame0);
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X2(dUP2_X2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("%l+*");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X2(dUP2_X2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(734, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      F2L f2L0 = new F2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDREM((DREM) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LPp</[tX;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("%l+*");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FCMPG fCMPG0 = new FCMPG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPG(fCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPG constraint violated: The value at the stack top is not of type 'float', but of type '%l+*'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(2055, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      I2D i2D0 = new I2D();
      ISUB iSUB0 = new ISUB();
      ISHL iSHL0 = new ISHL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHL(iSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHL constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("Cannot STORE: Stack to read from is empty.");
      OperandStack operandStack0 = new OperandStack(2055, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DSUB dSUB0 = new DSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDSUB(dSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSUB constraint violated: The value at the stack top is not of type 'double', but of type 'Cannot STORE: Stack to read from is empty.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LREM lREM0 = new LREM();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Pp<.[tX");
      lREM0.toString(true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      SALOAD sALOAD0 = new SALOAD();
      LAND lAND0 = new LAND();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLAND(lAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LPp</[tX;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(2055, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      I2D i2D0 = new I2D();
      ISUB iSUB0 = new ISUB();
      DUP dUP0 = new DUP();
      instConstraintVisitor0.visitDUP(dUP0);
      assertEquals("dup", dUP0.getName());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      I2L i2L0 = new I2L();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      int int0 = 2572;
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LREM lREM0 = new LREM();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Pp<.[tX");
      lREM0.toString(true);
      IDIV iDIV0 = new IDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIDIV(iDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LPp</[tX;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(2055, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      I2B i2B0 = new I2B();
      instConstraintVisitor0.visitStackProducer(i2B0);
      PUTSTATIC pUTSTATIC0 = null;
      try {
        pUTSTATIC0 = new PUTSTATIC((-2872));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Negative index value: -2872
         //
         verifyException("org.apache.bcel.generic.CPInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("d:]*:F}h%rklPg@`bi");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FRETURN fRETURN0 = new FRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFRETURN(fRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FRETURN constraint violated: The value at the stack top is not of type 'float', but of type 'd:]*:F}h%rklPg@`bi'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("%l+*");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FCMPG fCMPG0 = new FCMPG();
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(1322);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitANEWARRAY(aNEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ANEWARRAY constraint violated: The 'count' at the stack top is not of type 'int' but of type '%l+*'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("tXv2D");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      DUP2 dUP2_0 = new DUP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2(dUP2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(734, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DUP2 dUP2_0 = new DUP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2(dUP2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE((short)179, (short)179);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble((short)179);
      constantPoolGen0.addFieldref("74o/::W", "zY2WjlevrX?", "zY2WjlevrX?");
      constantPoolGen0.addString("74o/::W");
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCPInstruction(iNVOKEINTERFACE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Huh?! Constant pool index of instruction 'invokeinterface[185](5) 179' illegal? Pass 3a should have checked this!
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("Cannot STORE: Stack to read from is empty.");
      OperandStack operandStack0 = new OperandStack(2055, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DSUB dSUB0 = new DSUB();
      DNEG dNEG0 = new DNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDNEG(dNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DNEG constraint violated: The value at the stack top is not of type 'double', but of type 'Cannot STORE: Stack to read from is empty.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble((-195.129486979));
      constantPoolGen0.addFieldref("tXv2D", "p^Lv,:q{", "p^Lv,:q{");
      constantPoolGen0.addString("74o/::W");
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      LDC_W lDC_W0 = new LDC_W(7);
      instConstraintVisitor0.visitCPInstruction(lDC_W0);
      assertEquals(7, lDC_W0.getIndex());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DSUB dSUB0 = new DSUB();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Pp<.[tX");
      instConstraintVisitor0.visitIFNONNULL((IFNONNULL) null);
      Frame frame1 = new Frame((LocalVariables) null, operandStack1);
      instConstraintVisitor0.setFrame(frame1);
      MockPrintStream mockPrintStream1 = new MockPrintStream("Pp<.[tX");
      F2I f2I0 = new F2I();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("The value at the stack next-to-top is not of a ReferenceType, but of type '");
      OperandStack operandStack0 = new OperandStack(1532, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      F2L f2L0 = new F2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2L((F2L) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(734, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      D2L d2L0 = new D2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2L(d2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LPp</[tX;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      I2L i2L0 = new I2L();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(1180, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LCMP lCMP0 = new LCMP();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLCMP(lCMP0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LCMP constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      I2L i2L0 = new I2L();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LREM lREM0 = new LREM();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Pp<.[tX");
      F2I f2I0 = new F2I();
      IXOR iXOR0 = new IXOR();
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      assertEquals(1, mONITOREXIT0.getLength());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectType objectType0 = ObjectType.getInstance("K|z$j;:9>fe=7~yoa8");
      OperandStack operandStack0 = new OperandStack(1, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      Frame frame1 = new Frame((LocalVariables) null, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitAASTORE((AASTORE) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectType objectType0 = ObjectType.getInstance("Cannot STORE: Stack to read from is empty.");
      OperandStack operandStack0 = new OperandStack(2093, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      LALOAD lALOAD0 = new LALOAD();
      assertEquals((short)47, lALOAD0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(31, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      I2C i2C0 = new I2C();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2C(i2C0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2C constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LREM lREM0 = new LREM();
      INVOKESPECIAL iNVOKESPECIAL0 = new INVOKESPECIAL(2067);
      ATHROW aTHROW0 = new ATHROW();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitATHROW(aTHROW0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Missing class: java.lang.ClassNotFoundException: Exception while looking for class Pp<.[tX: org.evosuite.runtime.mock.java.lang.MockThrowable: Couldn't find: Pp</[tX.class
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("%l+*");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      F2L f2L0 = new F2L();
      LRETURN lRETURN0 = new LRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLRETURN(lRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LRETURN constraint violated: The value at the stack top is not of type 'long', but of type '%l+*'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[t");
      OperandStack operandStack0 = new OperandStack(734, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      F2L f2L0 = new F2L();
      IREM iREM0 = new IREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIREM(iREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LPp</[t;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(734, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LALOAD lALOAD0 = new LALOAD();
      L2I l2I0 = new L2I();
      FDIV fDIV0 = new FDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFDIV(fDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LPp</[tX;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("d:]*:F}h%rklPg@`bi");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      I2L i2L0 = new I2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2L(i2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2L constraint violated: The value at the stack top is not of type 'int', but of type 'd:]*:F}h%rklPg@`bi'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("%l+*");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      D2L d2L0 = new D2L();
      LSHL lSHL0 = new LSHL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHL(lSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHL constraint violated: The value at the stack top is not of type 'int', but of type '%l+*'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("1<.[`X");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)49;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OperandStack operandStack0 = new OperandStack(2554, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      POP2 pOP2_0 = new POP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPOP2(pOP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L1</[`X;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      I2L i2L0 = new I2L();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DMUL dMUL0 = new DMUL();
      F2D f2D0 = new F2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2D(f2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LPp</[tX;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      frame0.equals("Pp<.[tX");
      instConstraintVisitor0.setFrame(frame0);
      LREM lREM0 = new LREM();
      StoreInstruction storeInstruction0 = null;
      SWAP sWAP0 = new SWAP();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSWAP(sWAP0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("%l+*");
      OperandStack operandStack0 = new OperandStack(116, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      IADD iADD0 = new IADD();
      SWAP sWAP0 = new SWAP();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSWAP(sWAP0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      I2L i2L0 = new I2L();
      String string0 = "";
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(1180, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "");
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      IFLT iFLT0 = new IFLT(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLT(iFLT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFLT constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("%l+*");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      LXOR lXOR0 = new LXOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLXOR(lXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LXOR constraint violated: The value at the stack top is not of type 'long', but of type '%l+*'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      OperandStack operandStack1 = new OperandStack(2, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      IUSHR iUSHR0 = new IUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIUSHR(iUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LPp</[tX;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("The value at the stack next-to-top is not of a ReferenceType, but of type '");
      OperandStack operandStack0 = new OperandStack(1532, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      L2D l2D0 = new L2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2D(l2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2D constraint violated: The value at the stack top is not of type 'long', but of type 'The value at the stack next-to-top is not of a ReferenceType, but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      OperandStack operandStack0 = new OperandStack(734, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      INVOKESTATIC iNVOKESTATIC0 = new INVOKESTATIC(734);
      FNEG fNEG0 = new FNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFNEG(fNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LPp</[tX;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FSTORE fSTORE0 = new FSTORE(2046);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(fSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LPp</[tX;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      IASTORE iASTORE0 = new IASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIASTORE(iASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LPp</[tX;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("%l+*");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      F2L f2L0 = new F2L();
      LALOAD lALOAD0 = new LALOAD();
      I2B i2B0 = new I2B();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2B(i2B0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2B constraint violated: The value at the stack top is not of type 'int', but of type '%l+*'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("%l+*");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCHECKCAST((CHECKCAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("%l+*");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      CHECKCAST cHECKCAST0 = new CHECKCAST(2572);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCHECKCAST(cHECKCAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("Cannot STORE: Stack to read from is empty.");
      OperandStack operandStack0 = new OperandStack(2093, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DSUB dSUB0 = new DSUB();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-62);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-4374.5205F));
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      instructionList0.insert(instructionHandle0, (Instruction) dSUB0);
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ(instructionHandle0);
      IF_ACMPEQ iF_ACMPEQ1 = new IF_ACMPEQ(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ACMPEQ(iF_ACMPEQ1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IINC iINC0 = new IINC(19, 19);
      Frame frame0 = new Frame(313, 313);
      Frame frame1 = frame0.getClone();
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame1);
      int int0 = 101;
      iINC0.setIndex(313);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IINC iINC0 = new IINC(415, 415);
      Frame frame0 = new Frame(313, 227);
      Frame frame1 = frame0.getClone();
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame1);
      iINC0.setIndex(101);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not of type int but of type <unknown object>.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(4862, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LUSHR lUSHR0 = new LUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLUSHR(lUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LPp</[tX;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      INVOKESPECIAL iNVOKESPECIAL0 = new INVOKESPECIAL(2056);
      FNEG fNEG0 = new FNEG();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte)127;
      byteArray0[8] = (byte) (-73);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      SASTORE sASTORE0 = new SASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSASTORE(sASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LPp</[tX;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame0 = new Frame(77, 77);
      instConstraintVisitor0.setFrame(frame0);
      LREM lREM0 = new LREM();
      RET rET0 = new RET(46);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitRET(rET0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction RET constraint violated: Expecting a ReturnaddressType in local variable 46.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame0);
      LREM lREM0 = new LREM();
      FCMPL fCMPL0 = new FCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPL(fCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LPp</[tX;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("%l+*");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.setFrame(frame0);
      ASTORE aSTORE0 = new ASTORE(3005);
      instConstraintVisitor0.visitASTORE(aSTORE0);
      assertEquals(4, aSTORE0.getLength());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("The value at the stack next-to-top is not of a ReferenceType, but of type '");
      OperandStack operandStack0 = new OperandStack(1532, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      L2D l2D0 = new L2D();
      NEWARRAY nEWARRAY0 = new NEWARRAY((byte)13);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEWARRAY(nEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction NEWARRAY constraint violated: The value at the stack top is not of type 'int', but of type 'The value at the stack next-to-top is not of a ReferenceType, but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("%l+*");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DSUB dSUB0 = new DSUB();
      IOR iOR0 = new IOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIOR(iOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IOR constraint violated: The value at the stack top is not of type 'int', but of type '%l+*'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("The value at the stack next-to-top is not of a ReferenceType, but of type '");
      OperandStack operandStack0 = new OperandStack(734, objectType0);
      LocalVariables localVariables0 = new LocalVariables(734);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFADD((FADD) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("The value at the stack next-to-top is not of a ReferenceType, but of type '");
      OperandStack operandStack0 = new OperandStack(734, objectType0);
      LocalVariables localVariables0 = new LocalVariables(734);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DMUL dMUL0 = new DMUL();
      INVOKESTATIC iNVOKESTATIC0 = new INVOKESTATIC(734);
      DRETURN dRETURN0 = new DRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDRETURN(dRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DRETURN constraint violated: The value at the stack top is not of type 'double', but of type 'The value at the stack next-to-top is not of a ReferenceType, but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("[rXV)U{J$='js");
      OperandStack operandStack0 = new OperandStack(108, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("[rXV)U{J$='js");
      DCMPG dCMPG0 = new DCMPG();
      DCMPG dCMPG1 = new DCMPG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPG(dCMPG1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPG constraint violated: The value at the stack top is not of type 'double', but of type '[rXV)U{J$='js'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(734, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      F2L f2L0 = new F2L();
      DDIV dDIV0 = new DDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDDIV(dDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LPp</[tX;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(734, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DUP2 dUP2_0 = new DUP2();
      dUP2_0.toString();
      InstructionList instructionList0 = new InstructionList(dUP2_0);
      InstructionList instructionList1 = instructionList0.copy();
      InstructionHandle instructionHandle0 = instructionList1.append((Instruction) dUP2_0, (Instruction) dUP2_0);
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPEQ(iF_ICMPEQ0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LPp</[tX;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DSUB dSUB0 = new DSUB();
      ObjectType objectType0 = ObjectType.getInstance("Pp<.[tX");
      OperandStack operandStack0 = new OperandStack(2572, objectType0);
      OperandStack operandStack1 = new OperandStack(2572, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      NOP nOP0 = new NOP();
      instConstraintVisitor0.visitNOP(nOP0);
      DUP_X1 dUP_X1_0 = new DUP_X1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP_X1(dUP_X1_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
