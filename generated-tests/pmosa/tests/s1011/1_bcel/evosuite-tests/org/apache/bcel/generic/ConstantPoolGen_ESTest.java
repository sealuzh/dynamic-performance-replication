/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 20:29:34 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ObjectInputStream;
import java.util.regex.Pattern;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.ExceptionTable;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.InnerClass;
import org.apache.bcel.classfile.InnerClasses;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble(3089.989);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      int int0 = 64;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(64, 64);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(64, 64);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantInterfaceMethodref1.copy();
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      ConstantFloat constantFloat0 = new ConstantFloat(64);
      constantArray0[3] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-132), (-132));
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("URXY<na[bG 2eovE  $");
      constantPoolGen0.addFloat(2);
      constantPoolGen0.addLong((-1024L));
      constantPoolGen0.addInteger(3);
      ARETURN aRETURN0 = new ARETURN();
      Type type0 = aRETURN0.getType(constantPoolGen0);
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType(type0, 2123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid number of dimensions: 2123
         //
         verifyException("org.apache.bcel.generic.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      constantPoolGen0.addUtf8("P3y+m1=\"be!FQ#P3y+m1=\"be!FQ#a gUWC+7[TgL]");
      // Undeclared exception!
      try { 
        constantPoolGen0.addClass((ObjectType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addUtf8("The wildcard must notbe null");
      constantPoolGen0.lookupInteger(1);
      int int0 = constantPoolGen0.lookupFloat(1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger(2578);
      int int0 = constantPoolGen0.lookupLong(2578);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      int int0 = constantPoolGen0.addFloat(9.862F);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      constantPoolGen0.addString("Dont call getValueBoolean() on a non BOOLEAN ElementValue");
      int int0 = constantPoolGen0.lookupInterfaceMethodref(" slot(s) left on stack!\nStack:\n", ">8B.YKdeP/m/9hE~", "1)CONSTANT_NameAndType[12](name_index = -1, signature_index = -1)\n2)CONSTANT_Double[6](bytes = 0/0)\n");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addMethodref("9d", "9d", "9d");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("P3y+m1=\"be!FQ", "The wildcard must not be null", "The wildcard must not be null");
      constantPoolGen0.addInteger(213);
      constantPoolGen0.addNameAndType("org.apache.bcel.classfile.ElementValue", "P3y+m1=\"be!FQ");
      constantPoolGen0.addClass("3Uo&kf7A{~O~Jv6aiIh");
      constantPoolGen0.lookupFieldref("3Uo&kf7A{~O~Jv6aiIh", "whJ0/2S", "whJ0/2S");
      constantPoolGen0.adjustSize();
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.lookupNameAndType("3Uo&kf7A{~O~Jv6aiIh", "'+@rc%$Zk(lF");
      constantPoolGen0.addLong(0L);
      int int0 = constantPoolGen0.addString("3Uo&kf7A{~O~Jv6aiIh");
      assertEquals(14, constantPoolGen0.getSize());
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = Pattern.UNICODE_CASE;
      constantPoolGen0.addNameAndType("[CO5' \"", "[CO5' \"");
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupFloat(1.0F);
      constantPoolGen0.adjustSize();
      constantPoolGen0.addFieldref("#", ":", "");
      constantPoolGen0.addFieldref("Unexpected constant type: ", "b", "zD61");
      constantPoolGen0.lookupLong(0L);
      assertEquals(13, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.addFieldref("lstore", "lstore", "lstore");
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Double.BYTES;
      constantPoolGen0.addDouble(8);
      int int1 = constantPoolGen0.lookupDouble((-996.8396735));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.size = 1;
      // Undeclared exception!
      try { 
        constantPoolGen0.addDouble((-1647.1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-295), (-1));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(0, (-4065));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1), 1);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantInvokeDynamic constantInvokeDynamic2 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[3] = (Constant) constantInvokeDynamic2;
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[4] = (Constant) constantLong0;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[5] = (Constant) constantDouble1;
      ConstantClass constantClass0 = new ConstantClass((-295));
      constantArray0[6] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstant(0);
      constantArray0[7] = null;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4065
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("Yf4KS:<L7%^\":W", "Yf4KS:<L7%^\":W", "Yf4KS:<L7%^\":W");
      constantPoolGen0.lookupFieldref("Yf4KS:<L7%^\":W", "Yf4KS:<L7%^\":W", "Yf4KS:<L7%^\":W");
      constantPoolGen0.addDouble(1.0);
      int int0 = constantPoolGen0.addInterfaceMethodref("P3y+m1=\"be!FQ", "P3y+m1=\"be!FQ", "a gUWC+7[TgL]");
      assertEquals(12, constantPoolGen0.getSize());
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      int int0 = constantPoolGen0.addInterfaceMethodref("&J+iE:zNm^C", "&J+iE:zNm^C", "&J+iE:zNm^C");
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantInteger constantInteger0 = new ConstantInteger(1965);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantLong constantLong0 = new ConstantLong(775L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1965, (-1191));
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantFloat constantFloat0 = new ConstantFloat((-2894.5256F));
      constantArray0[3] = (Constant) constantFloat0;
      ConstantDouble constantDouble0 = new ConstantDouble((-1191));
      constantArray0[4] = (Constant) constantDouble0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2730), 1965);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.setConstant((-2075900857), constantArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2075900857
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat(358.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      String string0 = "";
      constantPoolGen0.addUtf8("");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addConstant(constantFloat1, constantPoolGen1);
      constantPoolGen0.addDouble(0.0);
      int int0 = 47;
      byte byte0 = (byte)1;
      BasicType basicType0 = null;
      try {
        basicType0 = new BasicType((byte)1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: 1
         //
         verifyException("org.apache.bcel.generic.BasicType", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2417, 256);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(256, 256);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(64, 64);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantString constantString0 = new ConstantString(256);
      constantArray0[2] = (Constant) constantString0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(64, 401);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupDouble((-565.1336));
      constantPoolGen0.toString();
      constantPoolGen0.toString();
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType("", 401);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid number of dimensions: 401
         //
         verifyException("org.apache.bcel.generic.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      MethodGen methodGen0 = null;
      constantPoolGen0.lookupMethodref("3Uo&kf7A{~O~Jv6aiIh", (String) null, (String) null);
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantInteger constantInteger0 = new ConstantInteger(1965);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantLong constantLong0 = new ConstantLong(775L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1965, (-1191));
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantDouble constantDouble0 = new ConstantDouble((-1191));
      constantArray0[4] = (Constant) constantDouble0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2730), 1965);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addDouble(1006.82);
      int int0 = constantPoolGen0.getSize();
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat(358.0F);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addUtf8("");
      constantPoolGen0.addConstant(constantFloat0, constantPoolGen0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-700), 4271);
      assertEquals(4271, constantInterfaceMethodref0.getNameAndTypeIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addUtf8("OpX_Gy.K%&p0\"$_");
      ConstantLong constantLong0 = new ConstantLong((-1L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantPoolGen0.addConstant(constantLong0, constantPoolGen0);
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.addConstant(constantLong0, constantPoolGen1);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantInteger constantInteger0 = new ConstantInteger(1965);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantLong constantLong0 = new ConstantLong(775L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ClassPath classPath0 = new ClassPath("#");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<ConstantMethodref> class0 = ConstantMethodref.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, visitor0);
      constantLong0.accept(descendingVisitor0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1965, (-1191));
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantDouble constantDouble0 = new ConstantDouble((-1191));
      constantArray0[4] = (Constant) constantDouble0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2730), 1965);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.addLong(0L);
      assertEquals(11, constantPoolGen0.getSize());
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = (-2267);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2267), (-2267));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantMethodHandle1.copy();
      constantMethodHandle0.clone();
      String string0 = "org.apache.commons.io.filefilter.FalseFileFilter";
      String string1 = "A0Ff[t6i/Fc7y@D";
      constantPoolGen1.lookupInterfaceMethodref("org.apache.commons.io.filefilter.FalseFileFilter", "org.apache.commons.io.filefilter.FalseFileFilter", "A0Ff[t6i/Fc7y@D");
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodHandle1, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = -2267, reference_index = -2267)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("multianewar~ry");
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(118);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("z?K.& Xi7Y1-~Bt?i,.");
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[2] = (Constant) constantMethodType1;
      ConstantFloat constantFloat0 = new ConstantFloat(118);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[3] = (Constant) constantFloat1;
      constantFloat1.clone();
      ConstantUtf8.getInstance("VRL\"MB8NrRWZ/>[N7Q");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addFloat((-445.7109F));
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addUtf8("OpX_Gy.K%&p0\"$_");
      constantPoolGen0.getSize();
      ConstantLong constantLong0 = new ConstantLong(1909L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantLong1, constantPoolGen1);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = Pattern.UNICODE_CASE;
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2279), (-2279));
      ConstantString constantString0 = new ConstantString((-2279));
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantString0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2040109463), (-2279));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantMethodHandle1.copy();
      constantMethodHandle1.clone();
      constantPoolGen0.lookupInterfaceMethodref("]N%RwEVyRG", "A0Ff[t6i/Fc7y@D", "6+Wm?");
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantFieldref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2279
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger(1965);
      constantPoolGen0.lookupInteger(1965);
      int int0 = constantPoolGen0.lookupFloat(0.0F);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantString constantString0 = new ConstantString(169);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-336), (-2040109463));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(16, (-348));
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(constantMethodHandle1);
      constantMethodHandle1.copy();
      ConstantMethodHandle constantMethodHandle3 = new ConstantMethodHandle((-336), (-2105376123));
      constantMethodHandle3.clone();
      constantPoolGen1.lookupInterfaceMethodref("q)+^c8<Kap", "mf)Cs}7W]q{j", "mf)Cs}7W]q{j");
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantString0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.getFinalConstantPool();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(47, (-1610612734));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodref1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1610612734
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantPoolGen0.lookupFieldref("PM}G", "PM}G", "PM}G");
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble((-1));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantDouble1, constantPoolGen1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("]N%RwEVyRG");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInteger constantInteger0 = new ConstantInteger((-72));
      constantArray0[1] = (Constant) constantInteger0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-72), (-72));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addConstant(constantArray0[0], constantPoolGen1);
      assertEquals(2, constantPoolGen0.getSize());
      
      int int0 = constantPoolGen1.lookupUtf8("Unexpected constant type: &b&Unexpected constant type: ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("z?K.& Xi7Y1-~Bt?i,.");
      Constant[] constantArray0 = new Constant[6];
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addUtf8("z?K.& Xi7Y1-~Bt?i,.");
      constantPoolGen0.lookupInteger(124);
      constantPoolGen0.lookupFloat(0.0F);
      constantPoolGen0.lookupUtf8("z?K.& Xi7Y1-~Bt?i,.");
      int int0 = constantPoolGen0.addInteger(617);
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger((-2279));
      constantPoolGen0.lookupInteger((-2069));
      int int0 = constantPoolGen0.lookupFloat(1863.396F);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger(1965);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(3224, 4);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantNameAndType0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3224
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat(358.0F);
      ConstantClass constantClass0 = new ConstantClass(2322);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2322
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[4];
      String string0 = "#TQ6K";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("#TQ6K");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1500, 1500);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantInterfaceMethodref1, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1500
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.toString();
      ConstantInteger constantInteger0 = new ConstantInteger(47);
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen1);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      assertFalse(constantPoolGen2.equals((Object)constantPoolGen0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong((-2813L));
      constantPoolGen0.addFieldref("=>IRjnd?/", "=>IRjnd?/", "=>IRjnd?/");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("=>IRjnd?/");
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1, 6);
      Constant constant0 = constantNameAndType0.copy();
      constantArray0[5] = constant0;
      constantArray0[6] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantUtf8_0;
      constantArray0[8] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen1);
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong((-2813L));
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("b+KcuRc0RBxzn");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1, 1);
      constantNameAndType0.copy();
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantNameAndType0;
      constantArray0[3] = (Constant) constantNameAndType0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.toString();
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte) (-93);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[9];
      ConstantString constantString0 = new ConstantString(3);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantClass constantClass0 = new ConstantClass(3);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[1] = (Constant) constantClass1;
      int int0 = 167;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(167, (-2542));
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("rNH~&a.Y~4|Z=.[\"7Fu&multianw4arry");
      constantArray0[3] = (Constant) constantUtf8_0;
      Constant constant0 = constantNameAndType0.copy();
      constantArray0[4] = constant0;
      ConstantClass constantClass2 = new ConstantClass(constantClass0);
      constantArray0[5] = (Constant) constantClass2;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("BN_wP,/y");
      constantArray0[6] = (Constant) constantUtf8_1;
      ConstantClass constantClass3 = new ConstantClass(3);
      constantArray0[7] = (Constant) constantClass3;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(64, 170);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[8] = (Constant) constantMethodref1;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2542
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("multianewarray");
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantClass constantClass0 = new ConstantClass(5);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[4] = (Constant) constantClass1;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      assertEquals(8, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "multianw4`\\rry";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("multianw4`\rry");
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantString constantString0 = new ConstantString(2);
      constantArray0[4] = (Constant) constantString0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantUtf8_0;
      constantArray0[8] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      String string1 = null;
      // Undeclared exception!
      try { 
        constantPoolGen1.addInterfaceMethodref("multianw4`\rry", (String) null, "M8]mDtQ%oi9*H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }
}
