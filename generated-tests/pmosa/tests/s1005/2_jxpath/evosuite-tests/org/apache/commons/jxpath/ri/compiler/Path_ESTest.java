/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 03:28:39 GMT 2018
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Path_ESTest extends Path_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      locationPath0.createContextForStep((EvalContext) null, 0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        locationPath0.getSingleNodePointerForSteps((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) locationPath0;
      boolean boolean0 = locationPath0.areBasicPredicates(expressionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) locationPath0;
      expressionArray0[1] = (Expression) locationPath0;
      expressionArray0[2] = (Expression) locationPath0;
      Step step0 = new Step(0, (NodeTest) null, expressionArray0);
      step0.isContextDependent();
      step0.isContextDependent();
      step0.isContextDependent();
      step0.toString();
      step0.toString();
      step0.toString();
      locationPath0.isSimpleStep(step0);
      locationPath0.computeContextDependent();
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, stepArray0);
      expressionPath0.areBasicPredicates(expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("%%h");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      expressionPath0.createContextForStep(namespaceContext0, 0, processingInstructionTest0);
      expressionPath0.computeContextDependent();
      expressionPath0.getExpression();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        expressionPath0.buildContextChain((EvalContext) null, (-608), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Step[] stepArray0 = new Step[1];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      locationPath0.areBasicPredicates((Expression[]) null);
      // Undeclared exception!
      try { 
        locationPath0.searchForPath((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      Step[] stepArray0 = new Step[2];
      int int0 = 10;
      coreOperationOr0.args = null;
      QName qName0 = new QName("~+4", "~+4");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "-QbB'AQc>E");
      Step step0 = new Step(10, nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(10, nodeNameTest0, (Expression[]) null);
      step0.toString();
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, (Expression[]) null, stepArray0);
      expressionPath0.computeContextDependent();
      step0.isContextDependent();
      expressionPath0.getSteps();
      expressionPath0.isSimpleStep(step1);
      expressionPath0.isSimpleExpressionPath();
      boolean boolean0 = false;
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, false);
      AncestorContext ancestorContext0 = new AncestorContext(childContext0, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step(6, (NodeTest) null, (Expression[]) null);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      boolean boolean0 = locationPath0.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      EvalContext evalContext0 = null;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      locationPath0.isSimplePath();
      // Undeclared exception!
      try { 
        locationPath0.searchForPath((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      locationPath0.computeContextDependent();
      // Undeclared exception!
      try { 
        locationPath0.searchForPath((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2535);
      Expression[] expressionArray0 = new Expression[1];
      String string0 = "";
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      Step step0 = new Step(1407, nodeTypeTest0, expressionArray0);
      step0.isContextDependent();
      stepArray0[0] = step0;
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(545);
      Step step1 = new Step(545, nodeTypeTest1, expressionArray0);
      nodeTypeTest0.toString();
      nodeTypeTest1.toString();
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      locationPath0.areBasicPredicates(expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      expressionPath0.isSimpleExpressionPath();
      expressionPath0.computeContextDependent();
      expressionPath0.toString();
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest1);
      // Undeclared exception!
      try { 
        ancestorContext0.getJXPathContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = new Step(1, (NodeTest) null, expressionArray0);
      locationPath0.isSimpleStep(step0);
      // Undeclared exception!
      try { 
        locationPath0.searchForPath((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step(1302, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      locationPath0.evalSteps((EvalContext) null);
      EvalContext evalContext0 = locationPath0.createContextForStep((EvalContext) null, 0, nodeTypeTest0);
      assertNull(evalContext0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Step[] stepArray0 = new Step[1];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      QName qName0 = new QName("1");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      EvalContext evalContext0 = locationPath0.createContextForStep((EvalContext) null, 5, nodeNameTest0);
      assertEquals(0, evalContext0.getPosition());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("\"ID!p.2)J8");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationNegate0);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationOr0, expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[5] = expression0;
      Step step0 = new Step((-221), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      Step step3 = new Step(0, nodeNameTest0, expressionArray0);
      locationPath0.isSimpleStep(step3);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      SelfContext selfContext0 = new SelfContext(ancestorContext0, nodeNameTest0);
      EvalContext evalContext0 = locationPath0.evalSteps(selfContext0);
      assertEquals(0, selfContext0.getPosition());
      assertNotNull(evalContext0);
      assertFalse(evalContext0.isChildOrderingRequired());
      
      Step step4 = new Step(0, nodeNameTest0, expressionArray0);
      boolean boolean0 = locationPath0.isSimpleStep(step4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VariableReference variableReference0 = new VariableReference((QName) null);
      variableReference0.toString();
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(variableReference0);
      Expression[] expressionArray0 = new Expression[0];
      Step[] stepArray0 = new Step[1];
      int int0 = 0;
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "p_qOK");
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate0, expressionArray0, stepArray0);
      expressionPath0.computeContextDependent();
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      locationPath0.areBasicPredicates(expressionArray0);
      locationPath0.computeContextDependent();
      locationPath0.areBasicPredicates(expressionArray0);
      expressionPath0.computeContextDependent();
      step0.isContextDependent();
      expressionPath0.getPredicates();
      // Undeclared exception!
      try { 
        step0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.NodeNameTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      locationPath0.toString();
      locationPath0.evalSteps((EvalContext) null);
      // Undeclared exception!
      try { 
        locationPath0.getSingleNodePointerForSteps((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QName qName0 = new QName("R39CFU?");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "R39CFU?");
      Expression[] expressionArray0 = new Expression[6];
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[4];
      Step step0 = new Step(13, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      Step step1 = new Step(193, nodeNameTest1, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      Step step2 = new Step((-1411), nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step((-3105), nodeNameTest1, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step((-3637), nodeNameTest1, expressionArray1);
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      RootContext rootContext1 = rootContext0.getRootContext();
      // Undeclared exception!
      try { 
        expressionPath0.buildContextChain(rootContext1, 13, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      Step[] stepArray0 = new Step[2];
      coreOperationOr0.args = null;
      QName qName0 = new QName("~+4", "~+4");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "-QbB'AQc>E");
      Step step0 = new Step(10, nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(10, nodeNameTest0, (Expression[]) null);
      step0.toString();
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      locationPath0.isSimplePath();
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, (Expression[]) null, stepArray0);
      expressionPath0.getPredicates();
      Step step2 = new Step((-408), nodeNameTest0, (Expression[]) null);
      step0.toString();
      step0.isContextDependent();
      step0.toString();
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) locationPath0;
      expressionArray0[1] = (Expression) coreOperationOr0;
      expressionArray0[2] = (Expression) expressionPath0;
      expressionArray0[3] = (Expression) expressionPath0;
      expressionArray0[4] = (Expression) expressionPath0;
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      Step step3 = new Step((-124), nodeNameTest0, (Expression[]) null);
      expressionPath1.isSimpleStep(step3);
      locationPath0.isSimplePath();
      locationPath0.isAbsolute();
      expressionPath0.getPredicates();
      Expression expression0 = expressionPath1.getExpression();
      assertSame(coreOperationOr0, expression0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      Step step0 = new Step(2, (NodeTest) null, (Expression[]) null);
      locationPath0.isSimpleStep(step0);
      // Undeclared exception!
      try { 
        locationPath0.searchForPath((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      QName qName0 = new QName("/-ixpMW\"r#;D.", "/-ixpMW\"r#;D.");
      VariableReference variableReference0 = new VariableReference(qName0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) variableReference0;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, (Step[]) null);
      expressionPath0.areBasicPredicates(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionPath0, expressionArray0[0]);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("/-ixpMW\"r#;D.");
      processingInstructionTest0.toString();
      Step step0 = new Step((-1223), processingInstructionTest0, expressionArray0);
      Step step1 = new Step(3335, processingInstructionTest0, expressionArray0);
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionPath0, coreOperationNotEqual0);
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      expressionArray1[1] = (Expression) expressionPath1;
      expressionArray1[2] = (Expression) expressionPath0;
      expressionArray1[3] = (Expression) expressionPath1;
      expressionArray1[4] = (Expression) nameAttributeTest0;
      ExpressionPath expressionPath2 = new ExpressionPath(nameAttributeTest0, expressionArray1, (Step[]) null);
      expressionPath2.areBasicPredicates(expressionArray1);
      expressionPath1.areBasicPredicates(expressionArray0);
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      assertTrue(locationPath0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName("ivsZ'R", "ivsZ'R");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "ivsZ'R");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      Constant constant0 = new Constant("`WXMEt&[P,v:2/");
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, constant0);
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) variableReference0;
      expressionArray0[1] = (Expression) nameAttributeTest0;
      expressionArray0[2] = (Expression) nameAttributeTest0;
      expressionArray0[3] = (Expression) variableReference0;
      expressionArray0[4] = (Expression) variableReference0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(constant0, constant0);
      expressionArray0[5] = (Expression) nameAttributeTest1;
      expressionArray0[6] = (Expression) nameAttributeTest0;
      expressionArray0[7] = (Expression) nameAttributeTest0;
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      expressionPath0.areBasicPredicates(expressionArray0);
      expressionPath0.areBasicPredicates((Expression[]) null);
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertFalse(locationPath0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      Expression[] expressionArray0 = new Expression[7];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, locationPath0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) locationPath0;
      expressionArray0[4] = (Expression) locationPath0;
      expressionArray0[5] = (Expression) locationPath0;
      expressionArray0[6] = (Expression) locationPath0;
      locationPath0.areBasicPredicates(expressionArray0);
      // Undeclared exception!
      try { 
        locationPath0.searchForPath((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, coreOperationUnion0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationUnion0, nameAttributeTest0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, nameAttributeTest0);
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreOperationDivide0, coreOperationUnion0);
      expressionArray0[2] = (Expression) coreOperationMultiply1;
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      Step[] stepArray0 = new Step[0];
      step0.toString();
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      locationPath0.isSimpleStep(step0);
      locationPath0.evalSteps((EvalContext) null);
      locationPath0.isSimpleStep(step0);
      EvalContext evalContext0 = locationPath0.createContextForStep((EvalContext) null, 2, nodeTypeTest0);
      assertNotNull(evalContext0);
      
      boolean boolean0 = locationPath0.isSimplePath();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Expression[] expressionArray0 = new Expression[9];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      Step step0 = new Step(1, nodeTypeTest0, expressionArray0);
      boolean boolean0 = locationPath0.isSimpleStep(step0);
      boolean boolean1 = locationPath0.computeContextDependent();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, coreOperationUnion0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationUnion0, nameAttributeTest0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, nameAttributeTest0);
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreOperationDivide0, coreOperationUnion0);
      expressionArray0[2] = (Expression) coreOperationMultiply1;
      Step step0 = new Step(0, nodeTypeTest0, (Expression[]) null);
      Step[] stepArray0 = new Step[4];
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationUnion0;
      expressionArray1[1] = (Expression) coreOperationMultiply0;
      Step step1 = new Step((-1091), nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      stepArray0[2] = step0;
      stepArray0[1] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      locationPath0.isSimpleStep(step1);
      // Undeclared exception!
      try { 
        locationPath0.evalSteps((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, coreOperationUnion0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationUnion0, nameAttributeTest0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, nameAttributeTest0);
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreOperationDivide0, coreOperationUnion0);
      expressionArray0[2] = (Expression) coreOperationMultiply1;
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      locationPath0.isSimpleStep(step0);
      locationPath0.evalSteps((EvalContext) null);
      locationPath0.isSimpleStep(step0);
      EvalContext evalContext0 = locationPath0.createContextForStep((EvalContext) null, 2, nodeTypeTest0);
      EvalContext evalContext1 = locationPath0.createContextForStep(evalContext0, 5, nodeTypeTest0);
      assertEquals(0, evalContext1.getPosition());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      QName qName0 = new QName("R39CFU?");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "R39CFU?");
      Expression[] expressionArray0 = new Expression[6];
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, coreOperationUnion0);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(variableReference0, extensionFunction0);
      Step[] stepArray0 = new Step[4];
      Step step0 = new Step(10, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(27, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(10, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(10, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      EvalContext evalContext0 = locationPath1.evalSteps((EvalContext) null);
      assertNotNull(evalContext0);
      
      locationPath0.createContextForStep(evalContext0, 27, nodeNameTest0);
      assertTrue(evalContext0.isChildOrderingRequired());
      assertEquals(1, evalContext0.getDocumentOrder());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[20];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      Constant constant0 = new Constant("^$L\"{");
      QName qName0 = new QName("`WXMEt&[P,v:2/", "`WXMEt&[P,v:2/");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step(2, nodeNameTest0, (Expression[]) null);
      QName qName1 = new QName("", "oG*");
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1, "org.apache.commons.jxpath.JXPathTypeConversionException");
      Step step1 = new Step(2, nodeNameTest1, (Expression[]) null);
      Step[] stepArray0 = new Step[8];
      stepArray0[0] = step1;
      stepArray0[1] = step1;
      stepArray0[2] = step0;
      stepArray0[3] = step1;
      stepArray0[4] = step0;
      stepArray0[5] = step1;
      stepArray0[6] = step0;
      stepArray0[7] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      Constant constant1 = new Constant("");
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, (Expression[]) null, stepArray0);
      // Undeclared exception!
      try { 
        expressionPath0.getSingleNodePointerForSteps((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EvalContext evalContext0 = null;
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step(5, nodeNameTest0, (Expression[]) null);
      locationPath0.isSimpleStep(step0);
      // Undeclared exception!
      try { 
        locationPath0.searchForPath((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      QName qName0 = new QName("R39CFU?");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "R39CFU?");
      Expression[] expressionArray0 = new Expression[6];
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(variableReference0, extensionFunction0);
      Step[] stepArray0 = new Step[2];
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreOperationUnion0;
      expressionArray1[1] = (Expression) extensionFunction0;
      expressionArray1[2] = (Expression) extensionFunction0;
      expressionArray1[3] = (Expression) variableReference0;
      expressionArray1[4] = (Expression) coreOperationUnion0;
      expressionArray1[5] = (Expression) coreOperationMultiply0;
      expressionArray1[6] = (Expression) coreOperationUnion0;
      Step step0 = new Step(7, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(7, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      EvalContext evalContext0 = locationPath0.evalSteps((EvalContext) null);
      assertNotNull(evalContext0);
      assertTrue(evalContext0.isChildOrderingRequired());
      
      EvalContext evalContext1 = locationPath0.createContextForStep((EvalContext) null, 7, nodeNameTest0);
      assertEquals((-1), evalContext1.getDocumentOrder());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step[] stepArray0 = new Step[3];
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("", "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray1);
      expressionArray0[1] = (Expression) coreFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(extensionFunction0, extensionFunction0);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      Step step0 = new Step(3, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(3, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(3, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      EvalContext evalContext0 = locationPath0.evalSteps((EvalContext) null);
      assertNotNull(evalContext0);
      
      locationPath0.createContextForStep(evalContext0, 61, nodeTypeTest0);
      assertEquals(1, evalContext0.getDocumentOrder());
      assertTrue(evalContext0.isChildOrderingRequired());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = new Step(1, nodeTypeTest0, expressionArray0);
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      Step step1 = new Step((-321), nodeTypeTest0, expressionArray0);
      locationPath0.isSimpleStep(step0);
      Step step2 = new Step((-321), nodeTypeTest0, expressionArray0);
      locationPath0.isSimpleStep(step2);
      locationPath0.computeContextDependent();
      String string0 = locationPath0.toString();
      assertEquals("null/null/null/null/null/null/null/null", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      nodeTypeTest0.toString();
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      nodeTypeTest0.toString();
      locationPath0.createContextForStep((EvalContext) null, 0, nodeTypeTest0);
      locationPath0.createContextForStep((EvalContext) null, 8, nodeTypeTest0);
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, (Expression[]) null, (Step[]) null);
      // Undeclared exception!
      try { 
        expressionPath0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      locationPath0.evalSteps((EvalContext) null);
      QName qName0 = new QName("Q&F8f]");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "-xv?");
      EvalContext evalContext0 = locationPath0.createContextForStep((EvalContext) null, 12, nodeNameTest0);
      assertEquals(0, evalContext0.getDocumentOrder());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Step[] stepArray0 = new Step[2];
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[1] = expression0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[1], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      Constant constant0 = new Constant("Exception trying to remove xpath ");
      expressionArray0[3] = (Expression) constant0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationUnion0;
      Step step0 = new Step(9, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(9, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      locationPath0.evalSteps((EvalContext) null);
      EvalContext evalContext0 = locationPath0.createContextForStep((EvalContext) null, (-973), (NodeTest) null);
      assertNull(evalContext0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-25));
      nodeTypeTest0.toString();
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      locationPath0.createContextForStep((EvalContext) null, (-3134), nodeTypeTest0);
      EvalContext evalContext0 = locationPath0.createContextForStep((EvalContext) null, 11, nodeTypeTest0);
      assertEquals(0, evalContext0.getDocumentOrder());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-4201));
      Expression[] expressionArray0 = new Expression[4];
      int int0 = Double.SIZE;
      Constant constant0 = new Constant(64);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], constant0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-279), expressionArray0);
      expressionArray0[3] = (Expression) coreFunction0;
      Step step0 = new Step((-4201), nodeTypeTest0, expressionArray0);
      boolean boolean0 = true;
      Step[] stepArray0 = new Step[3];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      locationPath0.createContextForStep((EvalContext) null, (-1815), nodeTypeTest0);
      EvalContext evalContext0 = locationPath0.createContextForStep((EvalContext) null, 6, nodeTypeTest0);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, stepArray0);
      locationPath0.areBasicPredicates(expressionArray0);
      // Undeclared exception!
      try { 
        expressionPath0.searchForPath(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EvalContext evalContext0 = null;
      boolean boolean0 = true;
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      String string0 = "";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      locationPath0.createContextForStep((EvalContext) null, 4, processingInstructionTest0);
      // Undeclared exception!
      try { 
        locationPath0.searchForPath((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      Step step0 = new Step(13, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, nodeTypeTest0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      Step[] stepArray1 = new Step[1];
      stepArray1[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray1);
      Pointer pointer0 = expressionPath0.searchForPath(evalContext0);
      assertNull(pointer0);
      assertEquals(0, evalContext0.getPosition());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      Step step0 = new Step(13, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, rootContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      Step[] stepArray1 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray1);
      BeanPointer beanPointer0 = (BeanPointer)expressionPath0.searchForPath(evalContext0);
      assertEquals(1, beanPointer0.getLength());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Constant constant0 = new Constant("{,=b)8ok=!e~K~");
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      Step step0 = new Step(13, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(13, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(13, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(13, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      Object object0 = new Object();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, object0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      Object object1 = expressionPath0.expressionPath(evalContext0, true);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Constant constant0 = new Constant("{,=b)8ok=!e~K~");
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) constant0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      Step step0 = new Step(13, nodeTypeTest0, expressionArray0);
      Step step1 = new Step(1390, nodeTypeTest0, (Expression[]) null);
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      Locale locale0 = Locale.CHINESE;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null, (Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, rootContext0, (Pointer) null);
      RootContext rootContext1 = new RootContext(jXPathContextReferenceImpl1, (NodePointer) null);
      JXPathContext jXPathContext1 = rootContext0.getJXPathContext();
      Object object0 = new Object();
      Object object1 = RootContext.UNKNOWN_VALUE;
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContext1, object1, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl2.getAbsoluteRootContext();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object object2 = new Object();
      Pointer pointer0 = expressionPath0.searchForPath(evalContext0);
      assertNull(pointer0);
      assertEquals(0, evalContext0.getPosition());
  }
}
