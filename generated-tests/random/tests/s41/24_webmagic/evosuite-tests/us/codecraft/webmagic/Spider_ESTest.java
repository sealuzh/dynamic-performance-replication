/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 02:55:24 GMT 2019
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.selector.AndSelector;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.JsonPathSelector;
import us.codecraft.webmagic.selector.OrSelector;
import us.codecraft.webmagic.selector.Selector;
import us.codecraft.webmagic.selector.SmartContentSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_5(?*");
      Spider spider0 = Spider.create(simplePageProcessor0);
      int int0 = 1;
      Spider spider1 = spider0.thread(1);
      Spider spider2 = spider1.setExitWhenComplete(true);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_5(?*");
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover((DuplicateRemover) null);
      Spider spider3 = spider2.setScheduler(duplicateRemovedScheduler0);
      spider3.setUUID("us.codecraft.webmagic.selector.Html");
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider1.pipeline(multiPagePipeline0);
      Request[] requestArray0 = new Request[3];
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider1);
      requestArray0[0] = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("9v8I");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Th", "Th");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Th";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Spider spider2 = spider0.setExitWhenComplete(false);
      spider2.initComponent();
      stringArray0[1] = "9v8I";
      stringArray0[2] = "9v8I";
      stringArray0[3] = "9v8I";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      List<SpiderListener> list0 = spider0.getAll((Collection<String>) synchronousQueue0);
      Spider spider3 = spider2.setSpiderListeners(list0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        spider3.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("threadNum should be more than one!");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread(52);
      Spider spider2 = spider1.setSpiderListeners((List<SpiderListener>) null);
      Spider spider3 = spider2.setSpawnUrl(true);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Stopped", "|xd\"fsz");
      Spider spider4 = spider3.setDownloader(phantomJSDownloader0);
      Page page0 = Page.fail();
      spider0.setSpawnUrl(true);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider1.startRequests = (List<Request>) linkedList0;
      Page page1 = page0.setRawText("");
      List<Request> list0 = page1.getTargetRequests();
      page1.getJson();
      Spider spider5 = spider4.startRequest(list0);
      spider5.setSpiderListeners((List<SpiderListener>) null);
      spider4.getCollectorPipeline();
      Spider spider6 = spider2.downloader(phantomJSDownloader0);
      Spider.Status.values();
      Spider.Status.values();
      String[] stringArray0 = new String[4];
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.scheduler = (Scheduler) queueScheduler0;
      stringArray0[0] = "us.codecraft.webmagic.selector.LinksSelector";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "threadNum should be more than one!";
      // Undeclared exception!
      try { 
        spider6.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "h>5V/");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      assertTrue(spider1.isExitWhenComplete());
      
      Spider spider2 = spider1.setExitWhenComplete(false);
      spider1.scheduler((Scheduler) null);
      Page page0 = Page.fail();
      Page page1 = page0.setRawText("3=r'j");
      Page page2 = page1.setSkip(false);
      spider2.extractAndAddRequests(page2, false);
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      Spider spider2 = spider1.setUUID("+ro~.<_I6");
      Request[] requestArray0 = new Request[9];
      Request request0 = new Request("");
      Request request1 = request0.setCharset("");
      requestArray0[0] = request1;
      Request request2 = new Request();
      requestArray0[1] = request2;
      Request request3 = request2.setCharset("_cycle_tried_times");
      requestArray0[2] = request3;
      Request request4 = new Request("_cycle_tried_times");
      requestArray0[3] = request4;
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider2);
      requestArray0[4] = null;
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("edR6");
      fileCacheQueueScheduler0.poll(spider2);
      requestArray0[5] = null;
      priorityScheduler0.poll(spider1);
      requestArray0[6] = null;
      Request request5 = new Request("_cycle_tried_times");
      requestArray0[7] = request5;
      Request request6 = request2.putExtra("J\"=RH$8Dq=Mj", request4);
      requestArray0[8] = request6;
      // Undeclared exception!
      try { 
        spider2.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.processor.SimplePageProcessor");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setScheduler((Scheduler) null);
      Spider spider2 = spider1.scheduler((Scheduler) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.processor.SimplePageProcessor", "k");
      Spider spider3 = spider2.downloader(phantomJSDownloader0);
      spider0.getSpiderListeners();
      spider3.setSpiderListeners((List<SpiderListener>) null);
      Spider.create(simplePageProcessor0);
      Selector[] selectorArray0 = new Selector[4];
      SmartContentSelector smartContentSelector0 = new SmartContentSelector();
      selectorArray0[0] = (Selector) smartContentSelector0;
      AndSelector andSelector0 = new AndSelector(selectorArray0);
      selectorArray0[1] = (Selector) andSelector0;
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      OrSelector orSelector0 = new OrSelector(linkedList0);
      List<String> list0 = orSelector0.selectList("");
      // Undeclared exception!
      try { 
        spider3.getAll((Collection<String>) list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = ", bytes=";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", bytes=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider0.pageProcessor = (PageProcessor) simplePageProcessor0;
      Spider spider2 = spider1.addPipeline((Pipeline) null);
      spider2.pageProcessor = (PageProcessor) simplePageProcessor0;
      spider1.getPageCount();
      Page page0 = Page.fail();
      Page page1 = page0.setSkip(false);
      page1.putField(", bytes=", spider0.pageProcessor);
      Json json0 = page1.getJson();
      String string1 = "";
      // Undeclared exception!
      try { 
        json0.removePadding("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // us/codecraft/xsoup/XTokenQueue
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider0.startRequest(linkedList0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      FilePipeline filePipeline0 = new FilePipeline("X=MF|l,%u");
      Spider spider2 = spider1.pipeline(filePipeline0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      linkedList0.add((SpiderListener) null);
      Spider spider3 = spider2.setSpiderListeners(linkedList0);
      Spider spider4 = spider3.setUUID("X=MF|l,%u");
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider5 = spider4.addPipeline(jsonFilePipeline0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("init file error");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      spider5.pageProcessor = (PageProcessor) simplePageProcessor0;
      spider5.scheduler(duplicateRemovedScheduler0);
      linkedList0.add((SpiderListener) null);
      // Undeclared exception!
      try { 
        spider2.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("us.codecraft.webmagic.scheduler.QueueScheduler");
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider2 = spider1.setPipelines(linkedList0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider3 = spider2.setScheduler(priorityScheduler0);
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      Spider spider4 = spider3.setSpiderListeners(linkedList1);
      assertTrue(spider4.isSpawnUrl());
      
      Spider spider5 = spider4.setSpawnUrl(false);
      spider5.getUUID();
      spider5.getScheduler();
      assertFalse(spider4.isSpawnUrl());
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$1");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Spider spider1 = spider0.startRequest(linkedList0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      linkedList0.add((Request) null);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider1.pipeline(resultItemsCollectorPipeline0);
      Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[7];
      requestArray0[0] = null;
      requestArray0[1] = null;
      requestArray0[2] = null;
      requestArray0[3] = null;
      requestArray0[4] = null;
      requestArray0[5] = null;
      requestArray0[6] = null;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("nb rO");
      Selector[] selectorArray0 = new Selector[0];
      OrSelector orSelector0 = new OrSelector(selectorArray0);
      List<String> list0 = orSelector0.selectList("");
      Spider spider2 = spider1.startUrls(list0);
      assertTrue(spider2.isExitWhenComplete());
      
      Spider spider3 = spider2.setExitWhenComplete(false);
      Page page0 = new Page();
      Json json0 = page0.getJson();
      Class<Request> class0 = Request.class;
      json0.toList(class0);
      Spider spider4 = spider3.startRequest((List<Request>) null);
      Spider spider5 = spider4.thread(434);
      spider5.sleep(5);
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider1.addRequest(requestArray0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider3 = spider2.addPipeline(jsonFilePipeline0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider4 = spider3.downloader(phantomJSDownloader0);
      Spider spider5 = spider4.setScheduler((Scheduler) null);
      boolean boolean0 = spider5.isSpawnUrl();
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("3`\"='' V");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("u==k");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      boolean boolean0 = spider1.isExitWhenComplete();
      assertTrue(boolean0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("TW]/GBwF@KExyz&?P");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedHashSet<SpiderMonitor.MonitorSpiderListener> linkedHashSet0 = new LinkedHashSet<SpiderMonitor.MonitorSpiderListener>();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>(linkedHashSet0);
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "_cycle_tried_times";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(200);
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 2);
      Spider spider2 = spider1.setExecutorService(scheduledThreadPoolExecutor0);
      Spider spider3 = spider2.scheduler((Scheduler) null);
      Spider spider4 = spider3.setScheduler((Scheduler) null);
      Request[] requestArray0 = new Request[2];
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_cycle_tried_times");
      fileCacheQueueScheduler0.poll(spider4);
      requestArray0[0] = null;
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Selector[] selectorArray0 = new Selector[3];
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector(" stop fail!");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      int int0 = 584;
      Spider.Status.fromValue(584);
      String string0 = "&";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      spider0.startRequest(list0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      // Undeclared exception!
      try { 
        Charset.forName("&");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // &
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("get a candidate url {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.pipeline(resultItemsCollectorPipeline0);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request();
      String string0 = "QNf)";
      Request request1 = request0.setUrl("QNf)");
      request1.getExtras();
      Request request2 = request1.setExtras((Map<String, Object>) null);
      Request request3 = request2.setBinaryContent(false);
      Request request4 = new Request("I_vySE}<G6");
      Request request5 = request4.setUrl(" stop fail!");
      Request request6 = request3.putExtra("_cycle_tried_times", request5);
      requestArray0[0] = request6;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSite();
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("threadNum should be more than one!");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1895);
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      String[] stringArray0 = new String[0];
      Spider spider2 = spider1.addUrl(stringArray0);
      spider0.executorService = (ExecutorService) forkJoinPool0;
      Spider spider3 = spider2.thread(3);
      Spider spider4 = spider3.clearPipeline();
      spider4.destroyWhenExit = false;
      spider4.addUrl(stringArray0);
      spider2.start();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider5 = spider4.setPipelines(linkedList0);
      Spider spider6 = spider5.clearPipeline();
      FilePipeline filePipeline0 = new FilePipeline();
      linkedList0.add((Pipeline) filePipeline0);
      forkJoinPool0.getUncaughtExceptionHandler();
      spider6.getSpiderListeners();
      spider5.setEmptySleepTime(1452);
      spider2.setEmptySleepTime(3);
      spider5.setExecutorService(forkJoinPool0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("h3");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("h3");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      spider0.setScheduler(duplicateRemovedScheduler0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider2 = spider1.pipeline(multiPagePipeline0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      spider2.startUrls(list0);
      spider2.start();
      spider1.getStartTime();
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Spider.Status.fromValue(3350);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      SynchronousQueue<Runnable> synchronousQueue0 = new SynchronousQueue<Runnable>();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(1000, 3350, 767L, timeUnit0, synchronousQueue0, threadPoolExecutor_CallerRunsPolicy0);
      Spider spider1 = spider0.setExecutorService(threadPoolExecutor0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = " stop fail!";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$1");
      Spider spider0 = new Spider(simplePageProcessor0);
      String string0 = "s/Vygn&I<?*9MmLIc7";
      spider0.exitWhenComplete = false;
      // Undeclared exception!
      try { 
        spider0.get("us.codecraft.webmagic.Spider$1");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "zset_";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("zset_");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinTask.getPool();
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      Spider spider2 = spider1.setExitWhenComplete(false);
      Spider spider3 = spider2.setSpawnUrl(false);
      // Undeclared exception!
      try { 
        spider3.thread((ExecutorService) null, (-3049));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider0.pipeline(resultItemsCollectorPipeline0);
      int int0 = 3;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3, (RejectedExecutionHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.setScheduler(priorityScheduler0);
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      spider1.setUUID("F4dd{");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "");
      spider0.start();
      // Undeclared exception!
      try { 
        phantomJSDownloader0.download((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "C#u7m3/_9T";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("C#u7m3/_9T");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      // Undeclared exception!
      try { 
        spider1.thread((-722));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "=@j'ddg*F'YBr.OriXe");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      spider2.clearPipeline();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-1), threadFactory0, threadPoolExecutor_AbortPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("task or site can not be null");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setUUID("task or site can not be null");
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("a{X8T0C:-=9~>qQJ7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("TW]/GBwF@KExyz&?P");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedHashSet<SpiderMonitor.MonitorSpiderListener> linkedHashSet0 = new LinkedHashSet<SpiderMonitor.MonitorSpiderListener>();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>(linkedHashSet0);
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "TW]/GBwF@KExyz&?P";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&U%`N'-IlI9qPMG");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "&U%`N'-IlI9qPMG";
      stringArray0[1] = "&U%`N'-IlI9qPMG";
      stringArray0[2] = "&U%`N'-IlI9qPMG";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("omit-xml-declaration");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinTask.getPool();
      Spider spider1 = spider0.thread((ExecutorService) null, 1327);
      Request[] requestArray0 = new Request[2];
      String string0 = "8<=Js{";
      spider1.setExitWhenComplete(true);
      Request request0 = new Request("8<=Js{");
      request0.setBinaryContent(false);
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("D6G:vcBggo#_\"0", "D6G:vcBggo#_\"0");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(31);
      Spider spider1 = spider0.setDownloader(phantomJSDownloader1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "D6G:vcBggo#_\"0";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "D6G:vcBggo#_\"0";
      stringArray0[5] = "D6G:vcBggo#_\"0";
      stringArray0[6] = "D6G:vcBggo#_\"0";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      String string1 = "us.codecraft.webmagic.samples.scheduler.DelayQueueScheduler$RequestWrapper";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider spider3 = spider2.setUUID("us.codecraft.webmagic.samples.scheduler.DelayQueueScheduler$RequestWrapper");
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider4 = spider3.addPipeline(consolePipeline0);
      Spider spider5 = spider4.setSpiderListeners((List<SpiderListener>) null);
      spider5.getStatus();
      spider3.setEmptySleepTime(3084);
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) priorityBlockingQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y9@/SvF7zH%LJjOM\"");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Y9@/SvF7zH%LJjOM\"";
      stringArray0[1] = "P7Tuq-y8b";
      stringArray0[2] = "Y9@/SvF7zH%LJjOM\"";
      stringArray0[3] = "us.codecraft.webmagic.Spider$Status";
      stringArray0[4] = "us.codecraft.webmagic.selector.Json";
      stringArray0[5] = "Y9@/SvF7zH%LJjOM\"";
      stringArray0[6] = "Y9@/SvF7zH%LJjOM\"";
      stringArray0[7] = "Y9@/SvF7zH%LJjOM\"";
      stringArray0[8] = "o9Jj";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = " error";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader(" error");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("zset_");
      Spider spider0 = Spider.create(simplePageProcessor0);
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("zset_");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      Spider spider2 = spider1.setScheduler(duplicateRemovedScheduler0);
      spider2.stop();
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Json json0 = new Json("-2T>9_");
      Class<Pipeline> class0 = Pipeline.class;
      json0.all();
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "Spider ";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.getLeftRequestsCount(spider0);
      spider0.scheduler(queueScheduler0);
      int int0 = 4;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ArrayBlockingQueue<Runnable> arrayBlockingQueue0 = new ArrayBlockingQueue<Runnable>(39, false);
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(4, 4, 126L, timeUnit0, arrayBlockingQueue0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("Spider ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider {} closed! {} pages downloaded.");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Json json0 = new Json(linkedList0);
      spider0.getSpiderListeners();
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      linkedList0.addLast("U%ve`$\"/s,#[nDX%");
      Spider spider2 = spider1.thread(1327);
      Spider spider3 = spider2.setSpawnUrl(false);
      Spider spider4 = Spider.create(simplePageProcessor0);
      Site site0 = spider4.site;
      Site site1 = site0.setDomain("Spider {} closed! {} pages downloaded.");
      Site site2 = site1.setRetrySleepTime((-1711));
      Site site3 = site2.setCharset("");
      Site site4 = site3.addHeader("Spider is already running!", (String) null);
      spider1.site = site4;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Spider {} closed! {} pages downloaded.", "bCaOj");
      Spider spider5 = spider3.setDownloader(phantomJSDownloader0);
      Spider spider6 = spider5.downloader(phantomJSDownloader0);
      spider6.getThreadAlive();
      spider1.setExitWhenComplete(false);
      assertFalse(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      boolean boolean0 = false;
      Spider spider2 = spider1.setExitWhenComplete(false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "Init");
      int int0 = 0;
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(0);
      spider2.setDownloader(phantomJSDownloader1);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = null;
      try {
        fileCacheQueueScheduler0 = new FileCacheQueueScheduler((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = ".nWCr@yhUc";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".nWCr@yhUc");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      int int0 = 4;
      spider1.thread(4);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedList0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }
}
