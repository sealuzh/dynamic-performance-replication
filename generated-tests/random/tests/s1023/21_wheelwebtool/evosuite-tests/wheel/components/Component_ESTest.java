/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 13:37:57 GMT 2019
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.Date;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.RenderableComponent;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "No corresponding component found for end expression '", "No corresponding component found for end expression '");
      Checkbox checkbox0 = new Checkbox(textArea0, "#>J;H726gVBy", "No corresponding component found for end expression '");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "java.lang.String@0000000012";
      Component component0 = checkbox0.attributes(stringArray0);
      assertSame(component0, checkbox0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "h6", "h6");
      TextArea textArea0 = new TextArea(radio0, "", "C`,d");
      List<Component> list0 = textArea0._getChildren();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, " \"t?~%,S%/$4MB", " \"t?~%,S%/$4MB");
      StandaloneComponent standaloneComponent0 = textArea0.getPage();
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "var");
      errorPage0._setGeneratedId(true);
      TableBlock tableBlock0 = table0.tbody();
      TableRow tableRow0 = new TableRow(tableBlock0);
      tableRow0.end("var");
      assertTrue(errorPage0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "org.mvel.optimizers.impl.asm.ASMAccessorOptimizer");
      TableBlock tableBlock0 = table0.tbody();
      TableRow tableRow0 = tableBlock0.tr();
      Component component0 = tableRow0.end();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.create();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.a();
      Component component1 = component0.attribute("comment started on line ", "comment started on line ");
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._getXhtmlAttributes();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._getActions();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.renderHint((CharSequence) null);
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "java.lang.String@0000000012");
      table0.map("java.lang.String@0000000021");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      table0.el("");
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.attribute((String) null, (CharSequence) null);
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "vQfQrS#,UMmCq#o", "java.lang.String@0000000021");
      textInput0._setParent((Component) null);
      assertTrue(textInput0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Form form0 = new Form("Z");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Z");
      // Undeclared exception!
      try { 
        form0.wBlock(charBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "Component with id ", "Component with id ");
      // Undeclared exception!
      try { 
        fileInput0.tt((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Form form0 = new Form("Gv}Kr<CEzjlv7EE~8]x");
      DateInput dateInput0 = new DateInput(form0, "dt", "Gv}Kr<CEzjlv7EE~8]x", "Gv}Kr<CEzjlv7EE~8]x");
      // Undeclared exception!
      try { 
        dateInput0.textInput("dt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(";od");
      // Undeclared exception!
      try { 
        xmlEntityRef0.table();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.style();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Form form0 = new Form("could not resolve entity named '");
      // Undeclared exception!
      try { 
        form0.strong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Form form0 = new Form("://");
      // Undeclared exception!
      try { 
        form0.placeholder("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "b", "W}ly~31/");
      // Undeclared exception!
      try { 
        radio0.p();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Form form0 = new Form("bH");
      // Undeclared exception!
      try { 
        form0.nbsp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "java.lang.String@0000000012", "tr");
      // Undeclared exception!
      try { 
        textArea0.kbd((Object) "tr");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("wheel.components.Component");
      TextInput textInput0 = new TextInput(xmlEntityRef0, ", ", ", ");
      // Undeclared exception!
      try { 
        textInput0.ins();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Form form0 = new Form("not implemented");
      // Undeclared exception!
      try { 
        form0.i();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "7$:u{7~-nD!)6", "7$:u{7~-nD!)6");
      // Undeclared exception!
      try { 
        textInput0.htmlText((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Select select0 = new Select((Component) null, "EWgsy~3/~4w-f|U", "EWgsy~3/~4w-f|U", (ISelectModel) null, "EWgsy~3/~4w-f|U");
      // Undeclared exception!
      try { 
        select0.hr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "", "%S\"mdymj");
      // Undeclared exception!
      try { 
        fileInput0.h5();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000004");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h4((Object) "A^WT=0Yx<[[J='(= &");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      TableRow tableRow0 = table0.tr();
      Checkbox checkbox0 = new Checkbox(tableRow0, "", "");
      // Undeclared exception!
      try { 
        checkbox0.h3();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "org.mvel.conversion.ByteCH$2", "Td component can be added only to a TableRow.");
      // Undeclared exception!
      try { 
        checkbox0.h3();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Form form0 = new Form("Ei\" LF");
      // Undeclared exception!
      try { 
        form0.h2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.entity("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Form form0 = new Form("sO.\"cI%L8)e,OBg");
      // Undeclared exception!
      try { 
        form0.em();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "X#qT 9jZr\",");
      Link link0 = new Link(block0, block0);
      Checkbox checkbox0 = new Checkbox(link0, "cbIbjVyX'cNM7g_e@[R", "java.lang.String@0000000007");
      // Undeclared exception!
      try { 
        checkbox0.dl();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Form form0 = new Form("wheel_ErrorPage");
      Submit submit0 = new Submit(form0, (String) null, "/'9.yU#m");
      // Undeclared exception!
      try { 
        submit0.dl();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Form form0 = new Form("oL: ;4(c{#tB&tFN");
      Submit submit0 = new Submit(form0, ":9k", "oL: ;4(c{#tB&tFN");
      Checkbox checkbox0 = new Checkbox(submit0, "P", "comment started on line ");
      // Undeclared exception!
      try { 
        checkbox0.del();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("http://xmlpull.org/v1/doc/features.html#report-namespace-prefixes");
      NumberInput numberInput0 = new NumberInput(xmlEntityRef0, "vz`KgUVxp$;Cx<|y-j1", "vz`KgUVxp$;Cx<|y-j1");
      // Undeclared exception!
      try { 
        numberInput0.dd((Object) "http://xmlpull.org/v1/doc/features.html#report-namespace-prefixes");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "h6", "h6");
      // Undeclared exception!
      try { 
        radio0.big((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("HG>EZ6ZF^K>Xd>/");
      // Undeclared exception!
      try { 
        xmlEntityRef0.big();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Form form0 = new Form("D9s#+FhEDiMqL=dhY#H");
      // Undeclared exception!
      try { 
        form0.b();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000012");
      // Undeclared exception!
      try { 
        form0.address((Object) "java.lang.String@0000000012");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Form form0 = new Form("could not resolve entity named '");
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        form0.abbr((Object) errorPage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "MMn0$qb[L Lq", "java.lang.String@0000000012");
      // Undeclared exception!
      try { 
        submit0.abbr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Form form0 = new Form("1:kPUZ^YR48Pl1");
      Hidden hidden0 = new Hidden(form0, "1:kPUZ^YR48Pl1", "1:kPUZ^YR48Pl1");
      // Undeclared exception!
      try { 
        form0.a((Object) hidden0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "null", "null");
      checkbox0._wrapComponentId("null");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.getSubmittedForm();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tried to access a form, but none was submitted.
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StandaloneComponent standaloneComponent0 = errorPage0._getTopLevelComponent(true);
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "gRT|Ks");
      Any any0 = new Any(table0, "gRT|Ks");
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("!NG");
      ElExpression elExpression0 = new ElExpression("!NG");
      RadioGroup radioGroup0 = new RadioGroup(any0, "!NG", "!NG", dynamicSelectModel1, elExpression0);
      // Undeclared exception!
      try { 
        radioGroup0.buildComponent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't read value with binding !NG in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, (String) null);
      Table table1 = table0.renderHint((CharSequence) null);
      assertEquals("Table_1", table1.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.rollback();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Form form0 = new Form("org.mvel.conversion.BigDecimalCH$11");
      // Undeclared exception!
      try { 
        form0.head();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "X#qT 9jZr\",");
      Component component0 = block0.meta();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.end();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not end compoennt, already at root.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "org.mvel.optimizers.impl.asm.ASMAccessorOptimizer");
      TableBlock tableBlock0 = table0.tbody();
      tableBlock0.end();
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "Cannot add a form element. No surrounding form found.", "T]Ima@.87=Gl}Iw,");
      // Undeclared exception!
      try { 
        textArea0.end("Cannot add a form element. No surrounding form found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression 'Cannot add a form element. No surrounding form found.'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "var");
      TableBlock tableBlock0 = table0.tbody();
      TableRow tableRow0 = new TableRow(tableBlock0);
      Component component0 = tableRow0.end("var");
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "", "W=:fnf].49W<");
      // Undeclared exception!
      try { 
        textInput0.dateFormat("", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Select select0 = new Select(errorPage0, (String) null, "Could not evaluate expression ", "Could not evaluate expression ", (ISelectModel) null, false);
      ElExpression elExpression0 = new ElExpression("");
      Text text0 = new Text(select0, elExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(text0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.samp();
      ElExpression elExpression0 = new ElExpression("");
      // Undeclared exception!
      try { 
        errorPage0.findAll(elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Finder expression didn't evaluate to a boolean value.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "Hc)X-c:C(+,i0Kx", ">aK<\"k2~`X*4mDE");
      ElExpression elExpression0 = new ElExpression(">aK<\"k2~`X*4mDE");
      List<Component> list0 = hidden0.findAll(elExpression0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "java.lang.String@0000000021", "java.lang.String@0000000021");
      // Undeclared exception!
      try { 
        submit0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id 'null'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("DM");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "DM", "DM");
      // Undeclared exception!
      try { 
        checkbox0.up(1024);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      ElExpression elExpression0 = new ElExpression("org.mvel.ast.Union");
      RadioGroup radioGroup0 = new RadioGroup(block0, "org.mvel.ast.Union", "org.mvel.ast.Union", (ISelectModel) null, elExpression0);
      Select select0 = new Select(radioGroup0, (String) null, "org.mvel.ast.Union", (ISelectModel) null, elExpression0);
      ActionExpression actionExpression0 = new ActionExpression("org.mvel.ast.Union");
      Form form0 = new Form(select0, "java.lang.String@0000000021", actionExpression0);
      form0.up((-1599));
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(block0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Form form0 = new Form("M(Mw4");
      Hidden hidden0 = new Hidden(form0, "M(Mw4", "M(Mw4");
      boolean boolean0 = form0.equals(hidden0);
      assertEquals("M(Mw4", form0.getComponentId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.blockquote();
      TableBlock tableBlock0 = new TableBlock(component0);
      Any any0 = tableBlock0.col();
      any0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", any0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("eO [s");
      Form form0 = new Form(errorPage0, "java.lang.String@0000000012", actionExpression0);
      form0.addInternalRenderHint("eO [s");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, "68jd!s?", "68jd!s?", "68jd!s?");
      // Undeclared exception!
      try { 
        errorPage0.add(dateInput0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add a form element. No surrounding form found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "java.lang.String@0000000021");
      TableBlock tableBlock0 = table0.tbody();
      tableBlock0.getComponents();
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0._getTopLevelComponent(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "h6", "h6");
      TextArea textArea0 = new TextArea(radio0, "", "C`,d");
      Form form0 = textArea0._getVisibleForm(true);
      assertNull(form0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression(" name '");
      Form form0 = new Form(errorPage0, "tt", actionExpression0);
      Form form1 = form0._getVisibleForm(false);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNull(form1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "", "GETFIELD p");
      TableBlock tableBlock0 = new TableBlock(textArea0, "");
      Table table0 = new Table(tableBlock0, "");
      TableBlock tableBlock1 = table0.thead();
      assertEquals("TableBlock_2", tableBlock1.getComponentId());
      
      tableBlock1.id("Can't add components to a component that is not an instance of IContainer.");
      assertFalse(tableBlock1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("");
      Form form0 = new Form(errorPage0, "br", actionExpression0);
      Component component0 = form0.br();
      assertEquals("Any_1", component0.getComponentId());
      
      form0.id("INVOKESTATIC: ");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      TableRow tableRow0 = table0.tr();
      Checkbox checkbox0 = new Checkbox(tableRow0, "", "");
      checkbox0.id("");
      assertFalse(checkbox0._isGeneratedId());
      assertTrue(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.find("iframe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id iframe on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Select select0 = new Select((Component) null, "omvtftK", "omvtftK", "omvtftK", (ISelectModel) null, true);
      Checkbox checkbox0 = new Checkbox(select0, "\"v D#`+9$pUx%", "iKyIy:d{=J%?Zb: Ez:");
      ActionExpression actionExpression0 = checkbox0._getAction();
      assertNull(actionExpression0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        errorPage0.area(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attributes must be given in name, value pairs.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Boolean boolean0 = new Boolean("p");
      Link link0 = new Link(errorPage0, boolean0);
      Table table0 = new Table(link0, "p");
      TableRow tableRow0 = table0.tr();
      Image image0 = new Image(tableRow0, "p", "p");
      String[] stringArray0 = new String[0];
      Component component0 = image0.attributes(stringArray0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Form form0 = new Form("9PX@X?[Y.Nht2L/,?pr");
      Checkbox checkbox0 = new Checkbox(form0, "9PX@X?[Y.Nht2L/,?pr", "div");
      // Undeclared exception!
      try { 
        checkbox0.code();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "J8EeHZO:V");
      Component component0 = table0.p((Object) "J8EeHZO:V");
      Component component1 = component0.dfn();
      Component component2 = component1.em((Object) table0);
      assertTrue(component2._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("mdy8.%E{#k{");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "No corresponding component found for end expression '", "No corresponding component found for end expression '");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(textArea0, "java.lang.String@0000000012", "java.lang.String@0000000012", (ISelectModel) null, (ElExpression) null);
      // Undeclared exception!
      try { 
        textArea0.cite((Object) checkboxGroup0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "2G&< -FI;w>5d4}!");
      TableRow tableRow0 = table0.tr();
      Component component0 = tableRow0.del((Object) "2G&< -FI;w>5d4}!");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("I/&NT");
      Hidden hidden0 = new Hidden(xmlEntityRef0, "/META-INF/services/org.xmlpull.v1.XmlPullParserFactory", "I/&NT");
      Short short0 = new Short((short)0);
      // Undeclared exception!
      try { 
        hidden0.h5((Object) short0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.sup();
      TextArea textArea0 = new TextArea(errorPage0, "", "GETFIELD p");
      TableBlock tableBlock0 = new TableBlock(textArea0, "");
      ActionExpression actionExpression0 = new ActionExpression("");
      actionExpression0.setOwner(tableBlock0);
      // Undeclared exception!
      try { 
        actionExpression0.getUpdateTarget();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id null on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Form form0 = new Form("&F;8#G_s^NllS/p^n$");
      // Undeclared exception!
      try { 
        form0.noscript();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000012");
      Checkbox checkbox0 = new Checkbox(form0, "java.lang.String@0000000012", "java.lang.String@0000000012");
      // Undeclared exception!
      try { 
        checkbox0.q();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.blockquote();
      Component component1 = component0.pre((Object) errorPage0);
      Component component2 = component1.renderHint("map");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component2._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "kre0q/H]fHkXxlKIW", "kre0q/H]fHkXxlKIW");
      // Undeclared exception!
      try { 
        checkbox0.td();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Td component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, " \"t?~%,S%/$4MB", " \"t?~%,S%/$4MB");
      Checkbox checkbox0 = new Checkbox(errorPage0, "f6es<'_UOh6'n#=L", (String) null);
      // Undeclared exception!
      try { 
        checkbox0.addFirst(textArea0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      // Undeclared exception!
      try { 
        tableBlock0.select("org.mvel.UnresolveablePropertyException", (ISelectModel) null, "##$PGAJOS0V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression(" name '");
      Form form0 = new Form(errorPage0, "tt", actionExpression0);
      Table table0 = new Table(form0, "fjU");
      TableBlock tableBlock0 = table0.colgroup();
      tableBlock0.form("$ui.S|r ~\"Z{2", actionExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      FileInput fileInput0 = new FileInput(xmlEntityRef0, (String) null, "java.lang.String@0000000012");
      // Undeclared exception!
      try { 
        fileInput0.body();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "div", "div");
      TextInput textInput0 = new TextInput(radio0, "div", "div");
      Table table0 = new Table(textInput0, "div");
      Short short0 = new Short((short)2155);
      Component component0 = table0.a((Object) short0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "2G&< -FI;w>5d4}!");
      TableRow tableRow0 = table0.tr();
      // Undeclared exception!
      try { 
        tableRow0.caption();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("1");
      Form form0 = new Form(errorPage0, "#7K", actionExpression0);
      Table table0 = new Table(form0, "wheel_ErrorPage");
      TableBlock tableBlock0 = table0.tbody();
      Component component0 = tableBlock0.param("wheel_ErrorPage", "1");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Form form0 = new Form("k4n#}e9.c:`EN5'T#:o");
      // Undeclared exception!
      try { 
        form0.reset("k4n#}e9.c:`EN5'T#:o");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "Component with id ", "a`=WX.y$kAvtaD[AB");
      // Undeclared exception!
      try { 
        fileInput0.ol();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "var");
      TableBlock tableBlock0 = table0.tbody();
      TableRow tableRow0 = new TableRow(tableBlock0);
      Component component0 = tableRow0.big((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      TableRow tableRow0 = tableBlock0.tr();
      Component component0 = tableRow0.th();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("hr");
      Float float0 = new Float(3894.7335);
      Component component0 = block0.strong((Object) float0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000021");
      // Undeclared exception!
      try { 
        xmlEntityRef0.thead();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("x+b8-^");
      errorPage0._setParent(xmlEntityRef0);
      // Undeclared exception!
      try { 
        errorPage0.q((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "Component with id ", "Component with id ");
      fileInput0._clear();
      assertFalse(fileInput0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.span();
      component0.style();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.textarea("S;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Double double0 = new Double(0.0);
      Label label0 = new Label(errorPage0, double0);
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(label0, (String) null, (String) null, (CharSequence) null, stringSelectModel0, false);
      Checkbox checkbox0 = new Checkbox(select0, (String) null, "eC*_e%#i");
      // Undeclared exception!
      try { 
        checkbox0.u((Object) stringSelectModel0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression("");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(errorPage0, "", "", stringSelectModel0, elExpression0);
      Integer integer0 = new Integer(74);
      Component component0 = checkboxGroup0.address((Object) integer0);
      Component component1 = component0.br();
      assertEquals("Any_1", component1.getComponentId());
      assertTrue(checkboxGroup0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression(" name '");
      Form form0 = new Form(errorPage0, "tt", actionExpression0);
      Table table0 = new Table(form0, "fjU");
      table0.textInput("6>v7aynr");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.th();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Th component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "X#qT 9jZr\",");
      Link link0 = new Link(block0, block0);
      link0.action("cbIbjVyX'cNM7g_e@[R");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(link0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.rawText("java.lang.String@0000000012");
      Radio radio0 = new Radio(errorPage0, "java.lang.String@0000000012", "d%$wVfq{ws");
      FileInput fileInput0 = new FileInput(radio0, "wD+", "wD+");
      // Undeclared exception!
      try { 
        component0.big((Object) fileInput0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = errorPage0.selectModel();
      ElExpression elExpression0 = new ElExpression((String) null);
      // Undeclared exception!
      try { 
        errorPage0.radioGroup("D\"Bi?tC&/emP;hR7V'", dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.sub();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "sn8", "vwMJE,gceT^NpNX&");
      Text text0 = new Text(textArea0, "sn8");
      // Undeclared exception!
      try { 
        text0.wrapSelf();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("nFbU{>1$9");
      // Undeclared exception!
      try { 
        xmlEntityRef0.submit("nFbU{>1$9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("tt");
      // Undeclared exception!
      try { 
        xmlEntityRef0.link();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "null", "null");
      Radio radio0 = new Radio(checkbox0, "null", "null");
      // Undeclared exception!
      try { 
        radio0.big();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "!ie(aVR_", "!ie(aVR_");
      Component component0 = errorPage0.label((Object) submit0);
      // Undeclared exception!
      try { 
        component0.message("L");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Form form0 = new Form("./");
      // Undeclared exception!
      try { 
        form0.strike();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Form form0 = new Form("QXYz:A/Abn");
      // Undeclared exception!
      try { 
        form0.h1((Object) "o^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "UlM9vA<", "rJ9*yX^HyI27");
      // Undeclared exception!
      try { 
        checkbox0.noframes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.i();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("1");
      Form form0 = new Form(errorPage0, "#7K", actionExpression0);
      ElExpression elExpression0 = new ElExpression("1");
      Component component0 = form0.dd((Object) elExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._applyFormat(errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.tt();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "?-~_\"+", "?-~_\"+");
      // Undeclared exception!
      try { 
        checkbox0.u();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "#@ik!+B\"");
      Component component0 = table0.script();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000012");
      // Undeclared exception!
      try { 
        xmlEntityRef0.hidden("org.mvel.conversion.FloatCH$9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("\"jf7ZXV7s");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "java.lang.String@0000000021", "|~@Y");
      ActionExpression actionExpression0 = new ActionExpression("XSRCV*I8Bup1iu*uS:");
      // Undeclared exception!
      try { 
        checkbox0.small((Object) actionExpression0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      Component component0 = block0.h2();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.sub((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "var");
      TableBlock tableBlock0 = table0.tbody();
      TableRow tableRow0 = new TableRow(tableBlock0);
      Text text0 = (Text)tableRow0.htmlText(tableBlock0);
      assertTrue(text0._isGeneratedId());
      assertTrue(text0.isHtml());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      TableRow tableRow0 = tableBlock0.tr();
      Component component0 = tableRow0.h5();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "org.mvel.optimizers.impl.asm.ASMAccessorOptimizer");
      TableBlock tableBlock0 = table0.tbody();
      TableRow tableRow0 = tableBlock0.tr();
      Component component0 = tableRow0.bdo("<null id=\"Any_1\"class=\"java.lang.String@0000000009\"/>");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "b", "W}ly~31/");
      Checkbox checkbox0 = new Checkbox(radio0, "EbUiM`o", "EbUiM`o");
      // Undeclared exception!
      try { 
        checkbox0.h3((Object) radio0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.code((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "pn4nZ", "Can't add components to a component that is not an instance of IContainer.");
      // Undeclared exception!
      try { 
        checkbox0.dt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("`i$qjI0");
      // Undeclared exception!
      try { 
        xmlEntityRef0.numberInput("`i$qjI0", (CharSequence) "`i$qjI0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Form form0 = new Form("B'+ YCK");
      // Undeclared exception!
      try { 
        form0.text("B'+ YCK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "div", "div");
      TextInput textInput0 = new TextInput(radio0, "div", "div");
      Component component0 = errorPage0.del();
      Component component1 = component0.h4((Object) textInput0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.abbr();
      assertTrue(component0._isGeneratedId());
      
      errorPage0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Form form0 = new Form("`Bf$");
      // Undeclared exception!
      try { 
        form0.h4();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      NumberInput numberInput0 = new NumberInput((Component) null, "=q!", "=q!");
      // Undeclared exception!
      try { 
        numberInput0.span((Object) "=q!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.cite();
      Component component1 = component0.b();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "org.mvel.optimizers.impl.asm.ASMAccessorOptimizer");
      TableBlock tableBlock0 = table0.tbody();
      TableRow tableRow0 = tableBlock0.tr();
      Any any0 = new Any(table0, "org.mvel.optimizers.impl.asm.ASMAccessorOptimizer");
      // Undeclared exception!
      try { 
        any0.b((Object) tableRow0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.buttonInput("}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.table();
      // Undeclared exception!
      try { 
        component0.passwordInput("java.lang.String@0000000012");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Form form0 = new Form("uRfdnZ?5t2U27");
      // Undeclared exception!
      try { 
        form0.encode("O`% G5m%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "div", "div");
      TextInput textInput0 = new TextInput(radio0, "div", "div");
      Table table0 = new Table(textInput0, "div");
      Checkbox checkbox0 = new Checkbox(table0, "wheel.components.ActionExpression@0000000009", "l @1>p~Q5");
      Component component0 = errorPage0.var((Object) checkbox0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "java.lang.String@0000000021");
      TableBlock tableBlock0 = table0.tbody();
      Component component0 = tableBlock0.pre();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Text text0 = new Text(errorPage0, errorPage0);
      // Undeclared exception!
      try { 
        text0.ins();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Form form0 = new Form("tejHZ|1:U6A");
      // Undeclared exception!
      try { 
        form0.object();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.colgroup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Colgroup component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression("");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(errorPage0, "", "", stringSelectModel0, elExpression0);
      checkboxGroup0.acronym();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(checkboxGroup0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Component component0 = errorPage0.tt((Object) date0);
      Component component1 = component0.li((Object) errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.radio("noscript");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "X#qT 9jZr\",");
      Component component0 = block0.entity("X#qT 9jZr\",");
      block0.remove(component0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("X#qT 9jZr\",", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      TableRow tableRow0 = table0.tr();
      tableRow0.abbr((Object) table0);
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000021");
      // Undeclared exception!
      try { 
        form0.div();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "D@c{%w#o} ]`n", "D@c{%w#o} ]`n");
      // Undeclared exception!
      try { 
        checkbox0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Form form0 = new Form("~47HZ%d@@:");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression("");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(form0, "~47HZ%d@@:", "~47HZ%d@@:", stringSelectModel0, elExpression0);
      // Undeclared exception!
      try { 
        checkboxGroup0.dateFormat((String) null, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize SimpleDateFormat with pattern 'null'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.em();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.nbsp();
      List<RenderableComponent> list0 = errorPage0._getRenderableChildren();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "org.mvel.optimizers.impl.asm.ASMAccessorOptimizer");
      TableBlock tableBlock0 = table0.tbody();
      TableRow tableRow0 = tableBlock0.tr();
      String string0 = tableRow0.getComponentName();
      assertEquals("TableRow", string0);
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "8p>K", "mvel.debugging.file");
      // Undeclared exception!
      try { 
        textInput0.fieldset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.base((CharSequence) null);
      // Undeclared exception!
      try { 
        component0.find((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id null on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Short short0 = new Short((short) (-2797));
      Component component0 = errorPage0.strike((Object) short0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.q((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "div", "div");
      // Undeclared exception!
      try { 
        radio0.a();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Form form0 = new Form("I9k LuK");
      // Undeclared exception!
      try { 
        form0.li();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.s((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.address();
      component0.form("5x!UQxoA|.?");
      // Undeclared exception!
      try { 
        errorPage0.find("iframe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id iframe on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.imageSubmit("onclick", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.tr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tr component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.blockquote();
      component0.form("map");
      Component component1 = component0.pre((Object) errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.legend((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "var");
      TableBlock tableBlock0 = table0.tbody();
      TableRow tableRow0 = new TableRow(tableBlock0);
      Component component0 = tableRow0.dl();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Form form0 = new Form("mvel.disable.jit");
      Hidden hidden0 = new Hidden(form0, "mvel.disable.jit", "mvel.disable.jit");
      FileInput fileInput0 = new FileInput(hidden0, "mvel.disable.jit", "mvel.disable.jit");
      // Undeclared exception!
      try { 
        fileInput0.samp((Object) hidden0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Form form0 = new Form("V>gb5N8i.2h.");
      // Undeclared exception!
      try { 
        form0.img(": to ", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "]M0", "]M0");
      Checkbox checkbox0 = new Checkbox(submit0, "]M0", "]M0");
      // Undeclared exception!
      try { 
        checkbox0.numberInput("yU~*^)?sf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "@/ROAELoZ", "getName");
      TextInput textInput0 = new TextInput(submit0, "Tr component can be added only to a TableBlock.", "@/ROAELoZ");
      Block block0 = new Block(textInput0, "@/ROAELoZ");
      Table table0 = new Table(block0, "!uDJLu_V[Msazy");
      TableBlock tableBlock0 = table0.colgroup();
      ElExpression elExpression0 = new ElExpression("K");
      // Undeclared exception!
      try { 
        tableBlock0.checkboxGroup("K", (ISelectModel) null, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Form form0 = new Form((String) null);
      ElExpression elExpression0 = new ElExpression((String) null);
      // Undeclared exception!
      try { 
        form0.fileInput((String) null, elExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      List<RenderableComponent> list0 = errorPage0._getRenderableChildren();
      assertNotNull(list0);
      
      Component component0 = errorPage0.i((Object) list0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "J8EeHZO:V");
      // Undeclared exception!
      try { 
        table0.fileInput("4Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.title("bP*Pi");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000018");
      Checkbox checkbox0 = new Checkbox(form0, "div", "@/");
      Map<String, String> map0 = checkbox0.getAttributes();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Form form0 = new Form("8AnY*API");
      // Undeclared exception!
      try { 
        form0.button();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DateInput dateInput0 = new DateInput((Component) null, "dI<)odl+", ")=yPHW?\"ne4O;e,.mGt", "dI<)odl+");
      // Undeclared exception!
      try { 
        dateInput0.checkbox("dI<)odl+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.tbody();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tbody component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression("");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(errorPage0, "", "", stringSelectModel0, elExpression0);
      Block block0 = checkboxGroup0.placeholder("");
      block0.blockquote();
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "java.lang.String@0000000012");
      Component component0 = table0.strong();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, (String) null, (String) null);
      TextArea textArea0 = new TextArea(checkbox0, "org.mvel.conversion.BigDecimalCH", (String) null);
      Block block0 = new Block(textArea0);
      FileInput fileInput0 = new FileInput(block0, "", (String) null);
      // Undeclared exception!
      try { 
        fileInput0.ins((Object) "org.mvel.conversion.BigDecimalCH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "java.lang.String@0000000012");
      ActionExpression actionExpression0 = new ActionExpression("java.lang.String@0000000012");
      Form form0 = new Form(tableBlock0, "java.lang.String@0000000012", actionExpression0);
      Checkbox checkbox0 = new Checkbox(form0, "^?_M6dU .%*BQ", "^?_M6dU .%*BQ");
      // Undeclared exception!
      try { 
        checkbox0.p();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.area((String[]) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("{HI]O3ub");
      // Undeclared exception!
      try { 
        xmlEntityRef0.acronym((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "org.mvel.conversion.BigIntegerCH$6", "org.mvel.conversion.BigIntegerCH$6");
      ActionExpression actionExpression0 = new ActionExpression("org.mvel.conversion.BigIntegerCH$6");
      Form form0 = new Form(checkbox0, "org.mvel.conversion.BigIntegerCH$6", actionExpression0);
      Component component0 = form0.h3();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "", "GETFIELD p");
      TableBlock tableBlock0 = new TableBlock(textArea0, "");
      Table table0 = new Table(tableBlock0, "");
      table0.h6();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      NumberInput numberInput0 = new NumberInput((Component) null, "'.", "Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .");
      // Undeclared exception!
      try { 
        numberInput0.s();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "bA^]", "bA^]");
      checkbox0.requestFocus();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("}");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dateInput("}", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      NumberInput numberInput0 = new NumberInput((Component) null, "NEW java/lang/Byte", "NEW java/lang/Byte");
      // Undeclared exception!
      try { 
        numberInput0.var();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, errorPage0);
      TableBlock tableBlock0 = new TableBlock(link0);
      Radio radio0 = new Radio(tableBlock0, "", "java.lang.String@0000000021");
      Component component0 = tableBlock0.sup((Object) radio0);
      Component component1 = component0.ul();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Form form0 = new Form("");
      Checkbox checkbox0 = new Checkbox(form0, "/ qO$TPd,5nZ; _0", "/ qO$TPd,5nZ; _0");
      // Undeclared exception!
      try { 
        checkbox0.small();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression("");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(errorPage0, "", "", stringSelectModel0, elExpression0);
      Block block0 = checkboxGroup0.placeholder("");
      // Undeclared exception!
      try { 
        block0.frame(elExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Component component0 = tableBlock0.kbd((Object) tableBlock0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.iframe();
      // Undeclared exception!
      try { 
        component0.samp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      NumberInput numberInput0 = new NumberInput(tableBlock0, "RaInq@", "RaInq@", (CharSequence) null);
      // Undeclared exception!
      try { 
        numberInput0.label();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.hr();
      // Undeclared exception!
      try { 
        component0.map("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      Component component0 = tableRow0.dfn((Object) errorPage0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "could not create reader for encoding ", "could not create reader for encoding ");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      StringBuilder stringBuilder0 = new StringBuilder(93);
      Select select0 = new Select(submit0, "could not create reader for encoding ", "could not create reader for encoding ", stringSelectModel0, stringBuilder0);
      Checkbox checkbox0 = new Checkbox(select0, "]]Tc4|4", "~osrrJm;qvS:n w");
      Radio radio0 = new Radio(checkbox0, "L:&h-z", "@je}a0dRQvx7");
      Radio radio1 = (Radio)radio0.actionBinding("~osrrJm;qvS:n w");
      assertEquals("input", radio1.defaultTagName());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.tfoot();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tfoot component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "java.lang.String@0000000012", "d%$wVfq{ws");
      Component component0 = errorPage0.h6((Object) radio0);
      assertTrue(component0._isGeneratedId());
      assertEquals("d%$wVfq{ws", radio0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Form form0 = new Form("I;|Py");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "I;|Py");
      // Undeclared exception!
      try { 
        form0.h2((Object) charBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Form form0 = new Form("{jjL+");
      Component component0 = form0.clasS("{jjL+");
      assertEquals("{jjL+", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000012");
      // Undeclared exception!
      try { 
        xmlEntityRef0.multiSelect("8y/Gk?vmk#<|9", (ISelectModel) null, "8y/Gk?vmk#<|9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Form form0 = new Form("");
      FileInput fileInput0 = new FileInput(form0, "", "2g}n{%%R<6F");
      // Undeclared exception!
      try { 
        fileInput0.legend();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.kbd();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "org.mvel.optimizers.impl.asm.ASMAccessorOptimizer");
      Any any0 = new Any(table0, "org.mvel.optimizers.impl.asm.ASMAccessorOptimizer");
      any0.toString();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", any0.getComponentId());
      assertFalse(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringBuilder stringBuilder0 = new StringBuilder(708);
      Component component0 = errorPage0.table();
      Component component1 = component0.dt((Object) stringBuilder0);
      String[] stringArray0 = new String[4];
      component1.attributes(stringArray0);
      assertEquals("Table_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("MF7[lN}");
      Component component0 = block0.dd();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("MF7[lN}", block0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }
}
