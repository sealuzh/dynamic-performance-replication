/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 11:22:39 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.BootstrapMethod;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte) (-32);
      byteArray0[7] = (byte)76;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)70, (int) (byte)70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utility.compactClassName("O||)q5yyklNxSX", true);
      int int0 = (-53786696);
      Utility.accessToString((-53786696));
      Utility.getSignature("static final synchronized transient native interface abstract enum");
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("n @2k");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-73));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantArray0[1] = (Constant) constantDouble1;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("FV");
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2906, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 22272. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!N!^_4j,7e)n6s");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      Utility.printArray(printWriter0, objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)33;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 235, 66, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.setBit(1060, 1060);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte)57;
      Utility.accessToString((int) (byte) (-80), false);
      Utility.toHexString(byteArray0);
      Utility.compactClassName("final synchronized transient native interface abstract strictfp synthetic annotation enum", "9e 30 38 b0 cb ab 3e 39", false);
      String string0 = "DcX:|vT$aIJ1V#@~ `";
      // Undeclared exception!
      try { 
        Utility.decode("DcX:|vT$aIJ1V#@~ `", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"aI\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = ">:TZ";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString(">:TZ");
      try { 
        Utility.typeOfSignature(">:TZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >:TZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Utility.isSet(3584, (-71));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)117;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 176, 172, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "@$";
      Utility.decode("@$", false);
      String string1 = "checkcast";
      Utility.compactClassName("@$", "checkcast", true);
      Utility.convertString("OVjY+WR*~HwWa3");
      String string2 = "dV}YHyG1Y~t ";
      try { 
        Utility.typeOfSignature("dV}YHyG1Y~t ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dV}YHyG1Y~t 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-29);
      ConstantPool constantPool0 = null;
      int int0 = (-1238);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-29), (-1238));
      Utility.convertString("0:    <illegal opcode>\n");
      String string0 = "";
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)13;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 48, (int) (byte)117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-78);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.accessToString((-2378), true);
      Utility.replace(">N*a/kR ", "private protected final transient abstract synthetic annotation enum", "private protected final transient abstract synthetic annotation enum");
      Utility.compactClassName("private protected final transient abstract synthetic annotation enum", "*`Pz6iH", true);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)47;
      byteArray1[1] = (byte)26;
      byteArray1[2] = (byte)39;
      byteArray1[3] = (byte) (-78);
      byteArray1[4] = (byte)122;
      byteArray1[5] = (byte)47;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)47, (-1460));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.typeOfSignature("J");
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (byte)11, false, '-');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "!";
      Utility.convertString("!");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-38);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature(":\"W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :\"W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = Utility.format(82, 91, true, 'o');
      assertEquals("82ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo", string0);
      
      Utility.format(81, 2, true, 'o');
      byte byte0 = Utility.typeOfSignature("!FG(65ir'i WvVI/");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte) (-13);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)34, (int) (byte) (-74));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "bbl1v_,5h\"84McY[\"/s");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-118);
      byteArray0[7] = (byte)102;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 412, 2048, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "|&Kq$POWar{Goh";
      objectArray0[1] = (Object) "|&Kq$POWar{Goh";
      objectArray0[2] = (Object) "|&Kq$POWar{Goh";
      objectArray0[3] = (Object) pipedOutputStream0;
      objectArray0[4] = (Object) pipedOutputStream0;
      objectArray0[5] = (Object) "|&Kq$POWar{Goh";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "|&Kq$POWar{Goh", objectArray0);
      Object[] objectArray1 = new Object[0];
      Utility.printArray(printStream0, objectArray1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte) (-101);
      byteArray0[7] = (byte) (-61);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1024, 1024, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte) (-6);
      byteArray0[8] = (byte) (-87);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)127, (int) (byte) (-74), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 45306. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "Y%(p2gO\\\"Y~";
      try { 
        Utility.typeOfSignature("Y%(p2gO\"Y~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y%(p2gO\"Y~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.setBit(1060, 1060);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)62, 166);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lneg", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte)37;
      byteArray0[8] = (byte)101;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)112, 69);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)15;
      byteArray0[8] = (byte) (-118);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-9), 993, true);
      try { 
        Utility.methodSignatureArgumentTypes("i2s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i2s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "strictfp");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "dup2";
      stringArray0[1] = "dup2";
      stringArray0[2] = "float";
      stringArray0[3] = "dup2";
      stringArray0[4] = "dup2";
      String string0 = Utility.methodTypeToSignature("dup2", stringArray0);
      assertEquals("(Ldup2;Ldup2;FLdup2;Ldup2;)Ldup2;", string0);
      
      Utility.compactClassName("dup2", true);
      String string1 = Utility.methodSignatureReturnType("(Ldup2;Ldup2;FLdup2;Ldup2;)Ldup2;");
      assertEquals("dup2", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)39;
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("F$L$3e$c9$7b$r$t", string2);
      
      boolean boolean0 = Utility.isSet((byte)39, (byte)37);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)70;
      byteArray1[1] = (byte)70;
      byteArray1[2] = (byte)62;
      byteArray1[3] = (byte) (-84);
      byteArray1[4] = (byte)39;
      byteArray1[5] = (byte)39;
      byteArray1[6] = (byte)123;
      boolean boolean1 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      String string0 = "+UQUw8'59Gf";
      try { 
        Utility.typeOfSignature("+UQUw8'59Gf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UQUw8'59Gf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte) (-55);
      Utility.toHexString(byteArray0);
      Utility.isSet((byte)76, (byte)68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)76, (int) (byte)67);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Utility.isJavaIdentifierPart('`');
      try { 
        Utility.typeOfSignature("Mjd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Mjd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "#";
      try { 
        Utility.typeOfSignature("#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)0;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("97 aa b6 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 97 aa b6 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "\nAttribute(s):\n";
      Utility.getSignature("\nAttribute(s):\n");
      Utility.getSignature("LAttribute(s):;");
      String string1 = "n.4OB`ASxh`6`q29F";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("n.4OB`ASxh`6`q29F", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: n.4OB`ASxh`6`q29F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-125);
      Utility.toHexString(byteArray0);
      Utility.convertString("WLUoPt%^{n,T/`");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "ce 83";
      objectArray0[1] = (Object) (byte) (-50);
      objectArray0[2] = (Object) "WLUoPt%^{n,T/`";
      objectArray0[3] = (Object) (byte) (-125);
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 218, 218);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte) (-15);
      byteArray0[7] = (byte)40;
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      constantArray0[0] = (Constant) constantLong0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(2547, (byte) (-91));
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 39, (int) (byte) (-15), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "H}\\9zHWxM3PWU8ui,1";
      try { 
        Utility.methodSignatureReturnType("H}9zHWxM3PWU8ui,1", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H}9zHWxM3PWU8ui,1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Utility.format(125, 125, false, 'd');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-79);
      byteArray0[2] = (byte)52;
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte) (-61);
      byteArray0[7] = (byte)60;
      byteArray0[8] = (byte)47;
      Constant[] constantArray0 = new Constant[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)47);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("?>...\"");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getCachedInstance("?>...\"");
      constantArray0[3] = (Constant) constantUtf8_1;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8("?>...\"");
      constantArray0[4] = (Constant) constantUtf8_2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)59, (-1084));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)28;
      byteArray0[8] = (byte) (-38);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-25), 966);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)68;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.classOrInterface(109);
      Utility.fillup("class", 109, true, 'o');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)68, (byte)68);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantDouble0.clone();
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)32, (-1025), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)48;
      byteArray0[2] = (byte) (-15);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)88;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)5, (int) (byte)88, false);
      try { 
        Utility.typeOfSignature("5:    <illegal opcode>\n6:    pop2\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5:    <illegal opcode>
         // 6:    pop2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('V');
      Utility.accessToString((-2142));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-113);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-113), 222);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        constantPool0.getConstant(1121, (byte)61);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "qQ,~.8<dse5%]";
      Utility.getSignature("qQ,~.8<dse5%]");
      try { 
        Utility.methodSignatureReturnType("LqQ,~/8<dse5%];", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LqQ,~/8<dse5%];
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Utility.compactClassName("j>F]AB9f&%");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dload_3", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("dneg", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dneg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AEisK");
      String string0 = Utility.classOrInterface(430);
      assertEquals("class", string0);
      
      int int0 = Utility.clearBit((-2548), 430);
      assertEquals((-18932), int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('x');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte)27;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-3550), (int) (byte) (-98), true);
      assertEquals("0:    monitorenter\n1:    aload_0\n2:    iconst_m1\n3:    lor\n4:    ishl\n5:    ifle\t\t#-17376\n", string1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, false);
      Utility.isJavaIdentifierPart(']');
      Utility.classOrInterface((-1101));
      Utility.searchOpcode("I<C0.pmYA");
      Utility.compactClassName("dstore_0");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte) (-26);
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-26), (-697));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantInteger constantInteger0 = new ConstantInteger((-689));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-26), (-689));
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[3] = (Constant) constantFloat1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)10, (byte) (-26));
      constantArray0[4] = (Constant) constantNameAndType0;
      ConstantFieldref constantFieldref1 = new ConstantFieldref((-697), 97);
      constantArray0[5] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 48, 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 2768. Constant pool size is: 6
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byte byte0 = (byte)105;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)111;
      byte byte1 = (byte) (-81);
      byteArray0[4] = (byte) (-81);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 70, (int) (byte)111);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)36;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-981), (int) (byte)88, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("qG#f 4TO/'~o91}", "qG#f 4TO/'~o91}", "Class ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: qG#f 4TO/'~o91}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte) (-42);
      byteArray0[7] = (byte) (-39);
      byteArray0[8] = (byte)13;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2847), (int) (byte) (-14), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = ")\t";
      Utility.compactClassName(")\t", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-71);
      byte byte0 = (byte) (-128);
      byteArray0[3] = (byte) (-128);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), (int) (byte)23, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fload\t\t%37
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)65;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 152, 152);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "N/gpjs#7$5Q=";
      try { 
        Utility.typeOfSignature("N/gpjs#7$5Q=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N/gpjs#7$5Q=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)9;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)118, 39, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "ifnonnull";
      boolean boolean0 = false;
      Utility.compactClassName("ifnonnull", false);
      try { 
        Utility.typeOfSignature("UE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.replace("NewObject", "NewObject", "NewObject");
      Utility.compactClassName("NewObject", "NewObject", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)10;
      Utility.equals(byteArray0, byteArray0);
      Utility.printArray((Object[]) null, false);
      Utility.classOrInterface((byte)7);
      Utility.setBit((byte)10, (byte)10);
      Utility.compactClassName("Y8WfQE&%", ":|Ltf7 J", true);
      Constant[] constantArray0 = new Constant[6];
      ConstantClass constantClass0 = new ConstantClass((byte)7);
      constantArray0[0] = (Constant) constantClass0;
      ConstantClass constantClass1 = new ConstantClass(10);
      constantArray0[1] = (Constant) constantClass1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(20, (-219));
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)7, (byte) (-67));
      constantArray0[3] = (Constant) constantMethodref0;
      ConstantFloat constantFloat0 = new ConstantFloat((-219));
      constantArray0[4] = (Constant) constantFloat0;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[5] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1407), 133, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iconst_4
         // 1:    iconst_4
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.classOrInterface(36);
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("class", false);
      Utility.typeOfSignature("TH:}R~hwum6l");
      Utility.encode(byteArray0, false);
      Utility.convertString("class");
      Utility.decode("TH:}R~hwum6l", false);
      String string0 = "short";
      try { 
        Utility.typeOfMethodSignature("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.classOrInterface(1160);
      Utility.accessToString(1356);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte)61;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)26, (int) (byte) (-48), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utility.classOrInterface(102);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-22);
      byte byte0 = (byte)89;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)0;
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte)0);
      try { 
        Utility.typeOfSignature("6`(p[4:%c_lL{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6`(p[4:%c_lL{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-19);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)28, (int) (byte)124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.clearBit(171, 4);
      Utility.accessToString(171);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)40;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-498), 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lshr
         // 1:    fastore
         // 2:    fastore
         // 3:    fmul
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[1] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("i2l", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = false;
      Utility.format((-2610), (-2610), false, 'h');
      Utility.accessToString((-2610), false);
      try { 
        Utility.typeOfSignature("-2610");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -2610
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Utility.compactClassName("j>F]AB9f&%");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("castore", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = Utility.format(211, 0, true, 'l');
      assertEquals("211", string0);
      
      Utility.format(0, 0, false, '3');
      String string1 = Utility.getSignature("0");
      assertEquals("L0;", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)52;
      byteArray0[8] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)30, (-2272));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(63, 3589);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ifnonnull\t\t#15902", string2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)95;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)95, 227, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = ".jar";
      try { 
        Utility.typeOfSignature(".jar");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .jar
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.accessToString(2357, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte) (-67);
      byteArray0[8] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble(2357);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(160);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)80;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.methodTypeToSignature("invokedynamic", (String[]) null);
      assertEquals("()Linvokedynamic;", string0);
      
      Utility.methodSignatureArgumentTypes("()Linvokedynamic;");
      String string1 = Utility.methodSignatureToString("()Linvokedynamic;", "()Linvokedynamic;", "invokedynamic", true);
      assertEquals("invokedynamic invokedynamic ()Linvokedynamic;()", string1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "monitorenter";
      Utility.methodTypeToSignature("monitorenter", stringArray0);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-5);
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-56);
      byte byte1 = (byte)126;
      byteArray0[2] = (byte)126;
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-63);
      byte byte2 = (byte)23;
      byteArray0[6] = (byte)23;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1086), (int) (byte)23, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    <illegal opcode>
         // 2:    iand
         // 3:    nop
         // 4:    monitorenter
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte) (-121);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)121, (int) (byte)115);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "eX#jjw]0";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "goto_w");
      Utility.getSignature("eX#jjw]0");
      boolean boolean0 = true;
      Utility.compactClassName("[d6hU)X1n[sZN9cf~)", "double", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[d6hU)X1n[sZN9cf~)", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `d6hU)X1n[sZN9cf~)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "3=PdE*+]M]z=8[Z[*";
      try { 
        Utility.typeOfSignature("3=PdE*+]M]z=8[Z[*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3=PdE*+]M]z=8[Z[*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      String string0 = "pCvxbZ^w";
      Utility.replace("pCvxbZ^w", "pCvxbZ^w", "pCvxbZ^w");
      Utility.getSignature("anewarray");
      String string1 = "GCn";
      try { 
        Utility.typeOfSignature("GCn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GCn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.searchOpcode("rNuR");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte) (-93);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1096), 1828, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 8128. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)70;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-3), 51, false);
      assertEquals("0:    aaload\n1:    fcmpl\n2:    <illegal opcode>\n3:    aload_3\n4:    <illegal opcode>\n5:    fstore_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AEisK");
      String string0 = Utility.classOrInterface(430);
      assertEquals("class", string0);
      
      int int0 = Utility.clearBit((-2548), 430);
      assertEquals((-18932), int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('r');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte)27;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-3550), (int) (byte) (-98), true);
      assertEquals("0:    monitorenter\n1:    monitorenter\n2:    iconst_m1\n3:    lor\n4:    ishl\n5:    ifle\t\t#-17376\n", string1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utility.clearBit(9, (-965));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-64);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("i2c", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `i2c'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)11;
      byteArray0[0] = (byte)11;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)111;
      byte byte1 = (byte) (-81);
      byteArray0[4] = (byte) (-81);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 70, (int) (byte)11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte) (-46);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-21), (int) (byte) (-46));
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-11);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1237, (int) (byte)40, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)88;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)5, (int) (byte)88, false);
      assertEquals("5:    <illegal opcode>\n6:    pop2\n", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-6);
      byteArray0[0] = (byte) (-6);
      byte byte1 = (byte) (-32);
      byteArray0[1] = (byte) (-32);
      byte byte2 = (byte)120;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-76);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "n~<94");
      byteArray0[4] = (byte) (-107);
      byte byte3 = (byte)47;
      byteArray0[5] = (byte)47;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-107), 933, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = Utility.replace("int", "int", ";&3jU28];LLxw+>za");
      assertEquals(";&3jU28];LLxw+>za", string0);
      
      String string1 = Utility.getSignature("lsub");
      assertEquals("Llsub;", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)11;
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-4276), 3179);
      assertEquals("0:    sastore\n1:    ldiv\n2:    dastore\n3:    iastore\n4:    fconst_0\n", string2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.searchOpcode("G0PkT8\"f$=Oq2M-|m#F");
      Utility.compactClassName("W?xH*(nYkbteZkoA");
      Utility.compactClassName("W?xH*(nYkbteZkoA");
      Utility.classOrInterface(39);
      Utility.searchOpcode("U*vw(P0n;YfU]");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "G0PkT8\"f$=Oq2M-|m#F";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Utility.printArray(objectArray0, true, false);
      Utility.searchOpcode("G0PkT8\"f$=Oq2M-|m#F");
      char char0 = '3';
      Utility.fillup("{G0PkT8\"f$=Oq2M-|m#F, java.lang.Object@1a47b904}", 122, false, '3');
      try { 
        Utility.typeOfSignature("W?xH*(nYkbteZkoA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W?xH*(nYkbteZkoA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-126));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ixor", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = Utility.accessToString(90, false);
      assertEquals("private static final volatile", string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "private static final volatile";
      objectArray0[1] = (Object) "private static final volatile";
      objectArray0[2] = (Object) "private static final volatile";
      objectArray0[3] = (Object) "private static final volatile";
      objectArray0[4] = (Object) "private static final volatile";
      objectArray0[5] = (Object) "private static final volatile";
      objectArray0[6] = (Object) "private static final volatile";
      String string1 = Utility.printArray(objectArray0, false);
      assertEquals("private static final volatile, private static final volatile, private static final volatile, private static final volatile, private static final volatile, private static final volatile, private static final volatile", string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "private static final volatile";
      stringArray0[1] = "private static final volatile";
      stringArray0[2] = "lload_3";
      stringArray0[3] = "lload_3";
      stringArray0[4] = "private static final volatile, private static final volatile, private static final volatile, private static final volatile, private static final volatile, private static final volatile, private static final volatile";
      stringArray0[5] = "private static final volatile";
      stringArray0[6] = "getfield";
      stringArray0[7] = "private static final volatile";
      stringArray0[8] = "private static final volatile";
      String string2 = Utility.methodTypeToSignature("lload_3", stringArray0);
      assertEquals("(Lprivate;Lprivate;Llload_3;Llload_3;Lprivate;Lprivate;Lgetfield;Lprivate;Lprivate;)Llload_3;", string2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "VYI";
      Utility.typeOfSignature("VYI");
      Utility.clearBit((-602), (-2325));
      Utility.classOrInterface(73);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, true);
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("VYI", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: VYI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-127);
      byteArray0[0] = (byte) (-127);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-127), 717);
      Utility.isJavaIdentifierPart('h');
      Utility.compactClassName("0:    lor\n", "8e(/YZ;", true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = 138;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 138, (int) (byte) (-127));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "8)?/Pr-v}";
      try { 
        Utility.typeOfSignature("8)?/Pr-v}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8)?/Pr-v}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte) (-98);
      byteArray0[7] = (byte)88;
      byte byte0 = (byte)25;
      byteArray0[8] = (byte)25;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("2e 88 38 90 2e 61 9e 58 19");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2e 88 38 90 2e 61 9e 58 19
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fload_0", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "[";
      Utility.compactClassName("[", "[", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)95;
      byteArray0[8] = (byte)103;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-3353), 4242, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fastore
         // 1:    dstore_1
         // 2:    laload
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Q6W";
      stringArray0[1] = "Q6W";
      stringArray0[2] = "+nx#3EE5|%3[?]<<";
      stringArray0[3] = "tableswitch";
      stringArray0[4] = "Q6W";
      stringArray0[5] = "Q6W";
      String string0 = Utility.methodTypeToSignature("Q6W", stringArray0);
      assertEquals("(LQ6W;LQ6W;[L+nx#3EE5|%3;Ltableswitch;LQ6W;LQ6W;)LQ6W;", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Utility.accessToString(199);
      Utility.classOrInterface(199);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-128);
      byte byte1 = (byte) (-14);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-28);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)2, (int) (byte) (-128));
      String string0 = null;
      boolean boolean0 = false;
      int int0 = (-688);
      int int1 = (-2146039614);
      Attribute[] attributeArray0 = new Attribute[2];
      int int2 = (-3311);
      BootstrapMethod[] bootstrapMethodArray0 = new BootstrapMethod[3];
      int[] intArray0 = new int[9];
      intArray0[0] = (-2137);
      intArray0[1] = (int) (byte) (-28);
      intArray0[2] = 199;
      intArray0[3] = (int) (byte) (-128);
      intArray0[4] = (int) (byte) (-28);
      intArray0[5] = (-2146039614);
      BootstrapMethod bootstrapMethod0 = new BootstrapMethod(183, intArray0);
      bootstrapMethodArray0[0] = bootstrapMethod0;
      BootstrapMethod bootstrapMethod1 = new BootstrapMethod((byte) (-128), intArray0);
      bootstrapMethodArray0[1] = bootstrapMethod1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      BootstrapMethod bootstrapMethod2 = null;
      try {
        bootstrapMethod2 = new BootstrapMethod(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "&BibtmP$7MX";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.decode("&BibtmP$7MX", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7M\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.compactClassName("D", "D", false);
      Utility.typeOfSignature("D");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)7;
      Utility.toHexString(byteArray0);
      Utility.replace("int", "int", "D");
      Utility.replace("invokevirtual", "int", "D");
      Utility.toHexString(byteArray0);
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-7);
      byteArray1[1] = (byte) (-7);
      byteArray1[2] = (byte) (-7);
      byteArray1[3] = (byte)124;
      byteArray1[4] = (byte) (-7);
      byteArray1[5] = (byte) (-7);
      byteArray1[6] = (byte)7;
      byteArray1[7] = (byte) (-7);
      byteArray1[8] = (byte)7;
      Utility.encode(byteArray1, false);
      Utility.clearBit((-867), 43);
      Utility.accessToString((int) (byte)7, false);
      short short0 = Utility.searchOpcode("int");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)46;
      byteArray0[0] = (byte)46;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)46, (int) (byte)46, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Utility.compactClassName("!1%D)'", "multianewarray", true);
      try { 
        Utility.typeOfSignature("!1%D)'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1%D)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.bcel.classfile.Utility$JavaReader";
      stringArray0[1] = "org.apache.bcel.classfile.Utility$JavaReader";
      stringArray0[2] = "org.apache.bcel.classfile.Utility$JavaReader";
      stringArray0[3] = "org.apache.bcel.classfile.Utility$JavaReader";
      stringArray0[4] = "org.apache.bcel.classfile.Utility$JavaReader";
      stringArray0[5] = "org.apache.bcel.classfile.Utility$JavaReader";
      stringArray0[6] = "org.apache.bcel.classfile.Utility$JavaReader";
      stringArray0[7] = "org.apache.bcel.classfile.Utility$JavaReader";
      stringArray0[8] = "org.apache.bcel.classfile.Utility$JavaReader";
      Utility.methodTypeToSignature("org.apache.bcel.classfile.Utility$JavaReader", stringArray0);
      boolean boolean0 = false;
      Utility.compactClassName("org.apache.bcel.classfile.Utility$JavaReader", "arraylength", false);
      boolean boolean1 = true;
      try { 
        Utility.decode("avD>B'hP{3tC1_i$q=", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Utility.setBit(2062, 2062);
      Utility.convertString("7~6p");
      Utility.clearBit(91, 91);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.fillup("org.apache.bcel.classfile.Utility$1", 91, true, 'j');
      boolean boolean0 = true;
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-120);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), (int) (byte) (-120), false);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-120);
      byteArray1[1] = (byte) (-120);
      byteArray1[2] = (byte) (-120);
      byteArray1[3] = (byte) (-120);
      byteArray1[4] = (byte) (-120);
      Utility.equals(byteArray1, byteArray1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = Utility.getSignature("o\"qMlE?$KR");
      Utility.compactClassName("java.lang.", false);
      Utility.signatureToString("Lo\"qMlE?$KR;");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte) (-53);
      byteArray0[8] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1255), (byte)6);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-103);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "freturn");
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)53;
      byte byte0 = (byte) (-94);
      byteArray0[5] = (byte) (-94);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 52, (int) (byte) (-96));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)54;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 35, 5428);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)107;
      byteArray0[8] = (byte) (-9);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)11, (int) (byte)0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Utility.accessToString(24, true);
      Utility.classOrInterface(24);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)30;
      Utility.encode(byteArray0, true);
      ConstantPool constantPool0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)123, 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("AA}Fovm,{P,&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AA}Fovm,{P,&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Utility.replace("R~jdc5_|4", "R~jdc5_|4", "V");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("R~jdc5_|4", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R~jdc5_|4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.clearBit(171, 4);
      Utility.accessToString(4);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)40;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-498), 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lshr
         // 1:    fastore
         // 2:    fastore
         // 3:    frem
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Utility.accessToString(231, false);
      Utility.fillup("public private protected synchronized volatile transient", 231, false, '$');
      try { 
        Utility.typeOfSignature("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$public private protected synchronized volatile transient");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$public private protected synchronized volatile transient
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "H,.";
      boolean boolean0 = false;
      Utility.compactClassName("H,.", false);
      String string1 = "E_9$U,T";
      try { 
        Utility.typeOfSignature("E_9$U,T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E_9$U,T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 108;
      Utility.isSet(108, 108);
      Utility.compactClassName(" ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      String string0 = "7#K\\+$ie{";
      try { 
        Utility.typeOfSignature("7#K+$ie{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7#K+$ie{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Utility.classOrInterface(196);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-74);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 196, (int) (byte) (-112), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Utility.compactClassName("#@faD,CKHl(|d8y|");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1019));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(259, 0);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      try { 
        Utility.typeOfSignature("XPbtb;wy3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XPbtb;wy3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Utility.typeOfSignature("CONSTANT_Class");
      try { 
        Utility.methodSignatureReturnType("5QX%mLX y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `5QX%mLX y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte) (-77);
      byteArray0[8] = (byte) (-50);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 15, (int) (byte)62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Utility.clearBit(1596, 1596);
      Utility.compactClassName("Ljava/lang/;V", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)2;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2811, 51, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "monitorenter";
      Utility.methodTypeToSignature("monitorenter", stringArray0);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-5);
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-56);
      byte byte1 = (byte)126;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-63);
      byte byte2 = (byte)23;
      byteArray0[6] = (byte)23;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1086), (int) (byte)23, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1084), 225);
      // Undeclared exception!
      try { 
        Utility.signatureToString("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `null'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byteArray0[0] = (byte) (-23);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.isSet(101, 101);
      Utility.typeOfSignature("*SG=e");
      int int0 = 245;
      Utility.format((byte) (-23), 245, false, 'c');
      String string0 = "n";
      String string1 = "putstatic";
      boolean boolean0 = false;
      int int1 = 32;
      int int2 = (-3254);
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getLocalVariableTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "byte");
      boolean boolean0 = Utility.isJavaIdentifierPart('9');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)57;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-84), (int) (byte)64, true);
      assertEquals("0:    lstore_0\n1:    ireturn\n2:    lstore_1\n3:    ishr\n4:    dstore\t\t%57\n", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(c*HBY{uAp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `c*HBY{uAp'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)43;
      byteArray0[8] = (byte)20;
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(177, 128);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)59, (int) (byte)20, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 51515. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2850, 2850);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)103;
      byte byte0 = (byte) (-118);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)57;
      int int0 = 304;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 304, (int) (byte)89);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 539;
      int int1 = (-3158);
      Utility.isSet(539, (-3158));
      String string0 = "Tat^qT@3OjIx";
      Utility.getSignature("Tat^qT@3OjIx");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Tat^qT@3OjIx";
      stringArray0[1] = "LTat^qT@3OjIx;";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("+f*GG&R+B[Dr\"[S^aC", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[Dr\"[S^aC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("I<C0.pmYAg(");
      Utility.compactClassName("I<C0.pmYAg(");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-3), 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    swap
         // 1:    aconst_null
         // 2:    iconst_3
         // 3:    <illegal opcode>
         // 4:    <illegal opcode>
         // 5:    fstore_2
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.typeOfSignature("ZWs\"48");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        byteSequence0.readChar();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "vJuqn%@]5";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "vJuqn%@]5";
      String string1 = "void";
      stringArray0[1] = "void";
      try { 
        Utility.methodTypeToSignature("vJuqn%@]5", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte) (-6);
      Constant[] constantArray0 = new Constant[7];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)76, (-3029));
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantInteger constantInteger0 = new ConstantInteger(1490);
      Constant constant0 = constantInteger0.copy();
      constantArray0[2] = constant0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-94), 90);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[3] = (Constant) constantInvokeDynamic1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("static");
      constantArray0[4] = (Constant) constantUtf8_0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-164), (byte)76);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[5] = (Constant) constantMethodref1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[6] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)76, 1490, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Utility.isJavaIdentifierPart('>');
      Utility.accessToString(26, false);
      Utility.clearBit(26, 26);
      Utility.isSet(26, 3648);
      String string0 = "B";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("B", "l%O1hN%Do5iH>f\"QV", "private static final", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Utility.isJavaIdentifierPart('[');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantString constantString0 = new ConstantString((byte)44);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("fcmpg");
      constantArray0[2] = (Constant) constantUtf8_0;
      try { 
        Utility.methodSignatureReturnType("Lnle");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lnle
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("U", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("jsr\t\t#548", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "(";
      Utility.replace("(", "(", "(");
      Utility.convertString("(");
      int int0 = 10;
      Utility.format((-2202), 10, false, 'y');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)33;
      byte byte0 = (byte)24;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)22;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)24, 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "YO?zy";
      try { 
        Utility.methodSignatureReturnType("YO?zy", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YO?zy'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";DD0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;DD0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xq{)5O=yW3QEJwxK#");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)19;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3413, (int) (byte)19, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Utility.clearBit((-1), (-1));
      Utility.methodSignatureReturnType("SAME_EXTENDED", false);
      Utility.signatureToString("C)M7M+b");
      try { 
        Utility.typeOfSignature("4~n\"9(_Y`^`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4~n\"9(_Y`^`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Utility.replace("\t(wide)", "\t(wide)", "Invalid type: ");
      Utility.isJavaIdentifierPart('`');
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Uz}P\"zyz3yj";
      stringArray0[1] = "Invalid type: ";
      stringArray0[2] = "Invalid type: ";
      stringArray0[3] = "Invalid type: ";
      stringArray0[4] = "\t(wide)";
      stringArray0[5] = "Invalid type: ";
      Utility.methodTypeToSignature(")\t", stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("double");
      mockPrintWriter0.println(false);
      mockPrintWriter0.println((Object) "Invalid type: ");
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) stringArray0);
      try { 
        Utility.typeOfMethodSignature("double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Utility.replace("ifnull", "ifnull", "ifnull");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)1, (int) (byte) (-105), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.clearBit((-1489), 57);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = false;
      Utility.compactClassName(")4 '/", false);
      Utility.methodSignatureReturnType("Float", false);
      Utility.compactClassName(")4 '.");
      int int0 = 76;
      Utility.classOrInterface(76);
      Utility.compactClassName(")4 '.", ")4 '.", true);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "XHUBfUO4,D+)&";
      Utility.convertString("XHUBfUO4,D+)&");
      int int0 = (-227);
      Utility.format((-227), (-227), false, 'r');
      // Undeclared exception!
      try { 
        Utility.signatureToString("XHUBfUO4,D+)&", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XHUBfUO4,D+)&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("NEtF.Y1#a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NEtF.Y1#a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1087), 4459);
      assertEquals("0:    dcmpl\n", string0);
      
      String string1 = Utility.accessToString((-1093), false);
      assertEquals("public private static final synchronized transient native interface strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)60;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte byte0 = Utility.typeOfSignature("BInQ|'IrCTYZ");
      assertEquals((byte)8, byte0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lookupswitch");
      Utility.printArray((Object[]) null);
      String string0 = Utility.getSignature("BInQ|'IrCTYZ");
      assertEquals("LBInQ|'IrCTYZ;", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.isSet((-1046), (-1046));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)6;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-82), 2051, true);
      Utility.compactClassName("0:    freturn\n1:    lrem\n2:    daload\n3:    iconst_3\n", true);
      try { 
        Utility.typeOfSignature("0:    freturn\n1:    lrem\n2:    daload\n3:    iconst_3\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    freturn
         // 1:    lrem
         // 2:    daload
         // 3:    iconst_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Utility.classOrInterface(3030);
      Utility.convertString("double");
      Utility.classOrInterface(98);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)7;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)8, (int) (byte)77, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "***vj{DI._X$SDW\\'!";
      Utility.getSignature("***vj{DI._X$SDW'!");
      try { 
        Utility.typeOfSignature("***vj{DI._X$SDW'!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: vj{DI._X$SDW'!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)2;
      byte byte0 = (byte) (-12);
      byteArray0[4] = (byte) (-12);
      int int0 = 209;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-58), 209);
      Utility.setBit((byte)88, (byte) (-48));
      try { 
        Utility.methodSignatureArgumentTypes("impdep1", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: impdep1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "OdeM9~EhW";
      try { 
        Utility.typeOfSignature("OdeM9~EhW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OdeM9~EhW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("Illegal type: ", false);
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-127);
      byteArray1[1] = (byte)89;
      byteArray1[2] = (byte)44;
      byteArray1[3] = (byte) (-12);
      byteArray1[4] = (byte) (-90);
      byteArray1[5] = (byte)64;
      byteArray1[6] = (byte)10;
      byteArray1[7] = (byte) (-69);
      byteArray1[8] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-12), (int) (byte)89, false);
      assertEquals("0:    dstore_2\n1:    idiv\n2:    idiv\n3:    lsub\n4:    dsub\n5:    ladd\n6:    idiv\n7:    lload_2\n8:    ineg\n9:    lshl\n10:   irem\n11:   lsub\n12:   astore\t\t%32\n", string0);
      assertEquals(14, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = Utility.getSignature(" ");
      assertEquals("L;", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "Invalid signature: ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid signature: ");
      Utility.getSignature("(3QF");
      char char0 = '|';
      Utility.fillup("(3QF", (-2570), true, '|');
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfMethodSignature("(3QF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (3QF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Utility.setBit(153, (-955));
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-87);
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-97), (byte) (-85));
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)32, 91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 159. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Utility.signatureToString("V]x");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "void";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-92);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)122;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[1] = (Object) "V]x";
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"void\", \"V]x\"}", string0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("? extends ", "void", true);
      assertEquals("? extends ", string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("14 b7 a4 3e 7a", string2);
      
      String string3 = Utility.convertString("V]x");
      assertEquals("V]x", string3);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte) (-123);
      byteArray0[8] = (byte) (-3);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 150, (int) (byte) (-3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = "<illegal opcode>";
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Utility.isSet((-6), 88);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)38;
      byteArray0[7] = (byte) (-97);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)77, (int) (byte)22, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0);
      String string0 = Utility.accessToString(18, true);
      assertEquals("private final", string0);
      
      short short0 = Utility.searchOpcode("{java.lang.Object@418492c, java.lang.Object@6fe74dc5, java.lang.Object@746362f7, java.lang.Object@285aa4dd, java.lang.Object@6ecdd9d3, java.lang.Object@3b9128aa}");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte) (-24);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmpeq\t\t#17746", string1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("vB**");
      mockPrintWriter0.println(1934L);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      mockPrintWriter0.println('D');
      objectArray0[1] = (Object) mockPrintWriter0;
      mockPrintWriter0.format("vB**", objectArray0);
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " (");
      boolean boolean0 = Utility.isSet(39, 39);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)107;
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)80, 49);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-52), (-2981), false);
      assertEquals("0:    <illegal opcode>\n1:    i2s\n2:    d2i\n3:    lstore_1\n4:    lastore\n5:    <illegal opcode>\n6:    lconst_0\n7:    dmul\n", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.searchOpcode("rR");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte) (-93);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1060), 1828, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    ineg
         // 2:    sastore
         // 3:    lload_1
         // 4:    fload_1
         // 5:    <illegal opcode>
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "getfield";
      stringArray0[1] = "getfield";
      stringArray0[2] = "getfield";
      stringArray0[3] = "getfield";
      stringArray0[4] = "getfield";
      stringArray0[5] = "getfield";
      stringArray0[6] = "getfield";
      stringArray0[7] = "getfield";
      String string0 = Utility.methodTypeToSignature("getfield", stringArray0);
      assertEquals("(Lgetfield;Lgetfield;Lgetfield;Lgetfield;Lgetfield;Lgetfield;Lgetfield;Lgetfield;)Lgetfield;", string0);
      
      String string1 = Utility.format(97, 176, false, 't');
      assertEquals("tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt97", string1);
      
      String string2 = Utility.methodSignatureToString("(Lgetfield;Lgetfield;Lgetfield;Lgetfield;Lgetfield;Lgetfield;Lgetfield;Lgetfield;)Lgetfield;", "{_S#Vn V},>uQo0", "", false);
      assertEquals("getfield {_S#Vn V},>uQo0(getfield arg1, getfield arg2, getfield arg3, getfield arg4, getfield arg5, getfield arg6, getfield arg7, getfield arg8)", string2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-117);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Llb`U.ryZA;c");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)68;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.classOrInterface(109);
      assertEquals("class", string0);
      
      String string1 = Utility.fillup("class", 109, true, 'o');
      assertEquals("classoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)68, (byte)68);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fstore_1", string2);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = Utility.replace("interface", "{g\"E![SWk$WTB:u9=^", "int");
      assertEquals("interface", string0);
      
      String string1 = Utility.fillup("{g\"E![SWk$WTB:u9=^", 167, false, '~');
      assertEquals("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{g\"E![SWk$WTB:u9=^", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantLong constantLong0 = new ConstantLong((byte) (-1));
      constantArray0[0] = (Constant) constantLong0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{g\"E![SWk$WTB:u9=^");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[3] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dup2_x2", string2);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true);
      try { 
        Utility.methodSignatureReturnType("Q", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("daload", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte) (-68);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 239, 101);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.isSet((-10), (-10));
      Utility.compactClassName("ByDqxqw<#SF[/{0&|LV", true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "ByDqxqw<#SF[.{0&|LV";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "ByDqxqw<#SF[.{0&|LV";
      objectArray0[3] = (Object) "ByDqxqw<#SF[/{0&|LV";
      objectArray0[4] = (Object) "ByDqxqw<#SF[/{0&|LV";
      objectArray0[5] = (Object) "ByDqxqw<#SF[/{0&|LV";
      objectArray0[6] = (Object) "ByDqxqw<#SF[.{0&|LV";
      Utility.printArray(objectArray0, true, true);
      Utility.isJavaIdentifierPart(' ');
      Utility.compactClassName("{\"ByDqxqw<#SF[.{0&|LV\", \"java.lang.Object@75f64eed\", \"ByDqxqw<#SF[.{0&|LV\", \"ByDqxqw<#SF[/{0&|LV\", \"ByDqxqw<#SF[/{0&|LV\", \"ByDqxqw<#SF[/{0&|LV\", \"ByDqxqw<#SF[.{0&|LV\"}");
      Utility.isJavaIdentifierPart('h');
      Utility.isSet((-10), 4372);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte) (-93);
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(124, (-1764));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)21, 3325);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(124);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[2] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)73, 1363, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 33399. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Utility.classOrInterface((-1212));
      String string0 = Utility.fillup("/4 W*30q@?", 4095, true, 'W');
      Utility.classOrInterface((-1212));
      Utility.format((-1834), 31, true, 'W');
      Utility.compactClassName("/4 W*30q@?", true);
      Utility.compactClassName(".4 W*30q@?", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      Utility.printArray(objectArray0);
      Utility.searchOpcode("G\"MT[");
      Utility.format((short) (-1), (-2692), false, 'l');
      // Undeclared exception!
      try { 
        Utility.signatureToString("G\"MT[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G\"MT['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = "(^$$:IXGS@";
      String string1 = "'BpFtN#9b%bjR";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(^$$:IXGS@", "(^$$:IXGS@", "'BpFtN#9b%bjR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `^$$:IXGS@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = "'q\\$?l";
      try { 
        Utility.typeOfSignature("'q$?l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'q$?l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("vB**");
      mockPrintWriter0.println(1934L);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      mockPrintWriter0.println('D');
      objectArray0[1] = (Object) mockPrintWriter0;
      mockPrintWriter0.format("vB**", objectArray0);
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " (");
      boolean boolean0 = Utility.isSet(39, 39);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)112;
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)80, 49);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-52), (-2981), false);
      assertEquals("0:    <illegal opcode>\n1:    i2s\n2:    d2i\n3:    lstore_1\n4:    lastore\n5:    <illegal opcode>\n6:    lconst_0\n7:    irem\n", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Utility.printArray((Object[]) null, false, false);
      Utility.searchOpcode("}");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)95;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 256, (int) (byte)44, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Utility.accessToString(39, false);
      Utility.setBit(170, 3463);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(6, byteSequence0.getIndex());
      assertEquals("istore\t\t%64", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = "/0N$";
      try { 
        Utility.typeOfSignature("/0N$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /0N$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)83;
      byte byte0 = (byte)4;
      byteArray0[3] = (byte)4;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2595, (-827), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)45;
      Utility.toHexString(byteArray0);
      Utility.isJavaIdentifierPart('J');
      Utility.clearBit((byte) (-103), (byte) (-103));
      Utility.format((byte) (-103), 80, true, 'H');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 934, (-33554535));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "ELfS";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("ELfS", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ELfS'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)111;
      byte byte0 = (byte) (-81);
      byteArray0[4] = (byte) (-81);
      int int0 = (-1478);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 70, (-1478));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "5$Ex$$qO&{pj0";
      boolean boolean0 = true;
      try { 
        Utility.decode("5$Ex$$qO&{pj0", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Utility.compactClassName("monitorexit");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)48;
      Utility.toHexString(byteArray0);
      String string0 = "C\"zDF4Q=8";
      Utility.convertString("C\"zDF4Q=8");
      String string1 = "Z)3@v65mK7Y!#bfE]";
      Utility.getSignature("Z)3@v65mK7Y!#bfE]");
      Utility.methodSignatureReturnType("C\"zDF4Q=8", true);
      try { 
        Utility.methodSignatureArgumentTypes("LZ)3@v65mK7Y!#bfE];", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LZ)3@v65mK7Y!#bfE];
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-76);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.toString();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-76), 12, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Utility.accessToString(1035);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.format(144, (-1464), true, '|');
      Utility.searchOpcode("bytes must not be null!");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Utility.accessToString(84);
      String string0 = "Z";
      Utility.methodSignatureReturnType("Z");
      String string1 = "o<2Cofb]-fkt";
      Utility.getSignature("o<2Cofb]-fkt");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte) (-53);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      try { 
        byteSequence0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)1, (int) (byte)1, false);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = "l,>`iu\\K|C/L$";
      Utility.convertString("l,>`iuK|C/L$");
      String string1 = "getstatic";
      MockFile mockFile0 = new MockFile("getstatic");
      MockFile mockFile1 = new MockFile(mockFile0, "getstatic");
      mockFile0.getCanonicalFile();
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1);
      mockFile0.renameTo(mockFile1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "w\\IY},FH[ 8v");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('M');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockFile1;
      objectArray0[2] = (Object) mockFile1;
      objectArray0[3] = (Object) "l,>`iu\\K|C/L$";
      mockPrintWriter0.append((CharSequence) "getstatic");
      objectArray0[4] = (Object) "l,>`iuK|C/L$";
      Utility.printArray(printWriter0, objectArray0);
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("{getstatic, /home/ubuntu/test/projects/1_bcel/getstatic/getstatic, /home/ubuntu/test/projects/1_bcel/getstatic/getstatic, l,>`iu\\K|C/L$, l,>`iuK|C/L$}", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{getstatic, /home/ubuntu/test/projects/1_bcel/getstatic/getstatic, /home/ubuntu/test/projects/1_bcel/getstatic/getstatic, l,>`iu\\K|C/L$, l,>`iuK|C/L$}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, false, true);
      Utility.convertString("\"java.lang.Object@3c196b2b\", \"java.lang.Object@49f9975b\", \"java.lang.Object@6e3d7517\"");
      Utility.getSignature("Only element values of type annotation can be built with this ctor - type specified: ");
      try { 
        Utility.typeOfMethodSignature("Only element values of type annotation can be built with this ctor - type specified: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Only element values of type annotation can be built with this ctor - type specified: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-247), (-247));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload_1", string0);
      
      String string1 = Utility.classOrInterface(922);
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Utility.accessToString(42);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-89);
      byteArray1[1] = (byte) (-89);
      byteArray1[2] = (byte) (-100);
      byteArray1[3] = (byte) (-89);
      byteArray1[4] = (byte) (-96);
      byteArray1[5] = (byte) (-89);
      byteArray1[6] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-100), (int) (byte) (-100));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    goto\t\t#-22628
         // 3:    goto\t\t#-24406
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('[');
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("fcmpg");
      assertEquals((short)150, short0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString((byte)44);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("fcmpg");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("aload_2", string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("JVgSB+:FWn.y$8%");
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "JVgSB+:FWn.y$8%";
      objectArray0[2] = (Object) "JVgSB+:FWn.y$8%";
      objectArray0[3] = (Object) "long";
      String string1 = Utility.printArray(objectArray0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = "";
      Utility.compactClassName("ZWq/I", "", true);
      int int0 = 137;
      Utility.accessToString(137);
      byte[] byteArray0 = null;
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Utility.typeOfSignature("Invalid type: ");
      String string0 = "double";
      try { 
        Utility.methodSignatureArgumentTypes("double", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("8<_t&H.pYZ:", false);
      Utility.signatureToString("D", false);
      // Undeclared exception!
      try { 
        Utility.compactClassName("if_icmpge", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Utility.decode("\"YA?^H", false);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        Utility.typeOfSignature("\"YA?^H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"YA?^H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.methodTypeToSignature("goto", (String[]) null);
      assertEquals("()Lgoto;", string0);
      
      String string1 = Utility.convertString("anewarray");
      assertEquals("anewarray", string1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte) (-31);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("istore_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: istore_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0, true);
      String string0 = "MX_6\"0(3L";
      // Undeclared exception!
      try { 
        Utility.signatureToString("MX_6\"0(3L", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MX_6\"0(3L'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = "The list of suffixes must not be null";
      // Undeclared exception!
      try { 
        Utility.signatureToString("The list of suffixes must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The list of suffixes must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int int0 = Utility.clearBit(2827, 2827);
      assertEquals(779, int0);
      
      boolean boolean0 = Utility.isSet((-2996), 1769);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)114;
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(144, (byte)2);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantClass constantClass0 = new ConstantClass(41);
      constantArray0[1] = (Constant) constantClass0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("ifnull");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 97, 2813, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = "KGVzyb09oI?stLeGj";
      try { 
        Utility.typeOfSignature("KGVzyb09oI?stLeGj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KGVzyb09oI?stLeGj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Utility.typeOfSignature("[$t2~aYoTw=l");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "[$t2~aYoTw=l";
      Utility.printArray(objectArray0);
      Utility.isJavaIdentifierPart('w');
      Utility.compactClassName("{[$t2~aYoTw=l}", true);
      Utility.accessToString((int) (byte)13);
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)13;
      Utility.encode(byteArray0, true);
      Utility.compactClassName("{[$t2~aYoTw=l}", "[$t2~aYoTw=l", false);
      // Undeclared exception!
      try { 
        Utility.getSignature("[$t2~aYoTw=l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [$t2~aYoTw=l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("5!41s]-*", "(W%foaF^gn$K~f", "(W%foaF^gn$K~f");
      Utility.accessToString(958);
      Utility.isSet(958, 2317);
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = "jsr_w";
      Utility.searchOpcode("jsr_w");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        Utility.methodSignatureReturnType("jsr_w", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `jsr_w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = "PM:Fc`xvhuq";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("PM:Fc`xvhuq", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PM:Fc`xvhuq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)3;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = Utility.replace("interface", "{g\"E![SWk$WTB:u9=^", "int");
      assertEquals("interface", string0);
      
      String string1 = Utility.fillup("{g\"E![SWk$WTB:u9=^", 167, false, '~');
      assertEquals("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{g\"E![SWk$WTB:u9=^", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantLong constantLong0 = new ConstantLong((byte) (-1));
      constantArray0[0] = (Constant) constantLong0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{g\"E![SWk$WTB:u9=^");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[3] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("athrow", string2);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Utility.clearBit(5, 85);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "int");
      Utility.signatureToString("Invalid signature: `", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("pmg@pv&e", "Invalid signature: `", "l2i", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: pmg@pv&e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("K7{lfpHeBJ7d:nKiyH", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K7{lfpHeBJ7d:nKiyH'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("aload_3", string0);
      
      MockFile mockFile0 = new MockFile("", "byte");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "aload_3";
      objectArray0[2] = (Object) (byte) (-9);
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(20L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      assertEquals("null, null, null", string0);
      
      String string1 = Utility.replace("null, null, null", "null, null, null", "Lbreakpoint;V");
      assertEquals("Lbreakpoint;V", string1);
      
      String string2 = Utility.fillup("`)a=,bW*C", 976, false, '!');
      assertEquals`)a=,bW*C", string2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte) (-54);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-54);
      byteArray1[1] = (byte) (-54);
      byteArray1[2] = (byte)18;
      byteArray1[3] = (byte) (-54);
      byteArray1[4] = (byte)18;
      byteArray1[5] = (byte) (-54);
      byteArray1[6] = (byte)18;
      byteArray1[7] = (byte) (-54);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("Lbreakpoint;V");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "short";
      String string1 = "]OWSr#`K~B(~";
      stringArray0[1] = "]OWSr#`K~B(~";
      stringArray0[2] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Utility.setBit(746, 746);
      String string0 = Utility.signatureToString("BkCm/6z2qdLw[7");
      boolean boolean0 = Utility.isJavaIdentifierPart('/');
      assertFalse(boolean0);
      
      String string1 = Utility.compactClassName("byte");
      assertTrue(string1.equals((Object)string0));
      
      int int0 = Utility.setBit(12, 168);
      assertEquals(268, int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Utility.classOrInterface(828);
      Utility.searchOpcode("interface");
      try { 
        Utility.typeOfSignature("QPQR{->");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QPQR{->
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.Utility");
      byteArray0[0] = (byte)42;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-58);
      byte byte0 = (byte)44;
      byteArray0[3] = (byte)44;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.toHexString(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString((-448), true);
      Utility.accessToString((-1544), true);
      try { 
        Utility.methodSignatureArgumentTypes("2a ff c6 2c", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2a ff c6 2c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      int int0 = 199;
      Utility.accessToString(199);
      Utility.classOrInterface(199);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byte byte0 = (byte) (-70);
      byteArray0[1] = (byte) (-70);
      byte byte1 = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      byte byte2 = (byte) (-14);
      byteArray0[3] = (byte) (-14);
      byte byte3 = (byte) (-28);
      byteArray0[4] = (byte) (-28);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), (int) (byte) (-128));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Utility.signatureToString("Sy ", true);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)122;
      byteArray0[0] = (byte)122;
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.format(125, 125, false, 'd');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte) (-61);
      byteArray0[7] = (byte)60;
      byteArray0[8] = (byte)47;
      Constant[] constantArray0 = new Constant[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)47);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("?>...\"");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getCachedInstance("?>...\"");
      constantArray0[3] = (Constant) constantUtf8_1;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8("?>...\"");
      constantArray0[4] = (Constant) constantUtf8_2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)59, (-1084));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Utility.compactClassName("dreturn");
      Utility.accessToString((-3471));
      Utility.isJavaIdentifierPart('\\');
      Utility.compactClassName("8Zq9ZXa]\"EZo7xyqG", false);
      Utility.compactClassName("public final synchronized volatile interface synthetic annotation enum");
      Utility.clearBit(158, 922);
      File file0 = MockFile.createTempFile("public final synchronized volatile interface synthetic annotation enum", "public final synchronized volatile interface synthetic annotation enum");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) "dreturn";
      objectArray0[2] = (Object) "8Zq9ZXa]\"EZo7xyqG";
      objectArray0[3] = (Object) file0;
      objectArray0[4] = (Object) mockPrintWriter0;
      Utility.printArray(objectArray0, false, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "/tmp/public final synchronized volatile interface synthetic annotation enum0public final synchronized volatile interface synthetic annotation enum, dreturn, 8Zq9ZXa]\"EZo7xyqG, /tmp/public final synchronized volatile interface synthetic annotation enum0public final synchronized volatile interface synthetic annotation enum, org.evosuite.runtime.mock.java.io.MockPrintWriter@723bbb32");
      Utility.printArray(printWriter0, objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 2
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.AccessFlags";
      Utility.searchOpcode("org.apache.bcel.classfile.AccessFlags");
      int int0 = 32;
      Utility.format(187, 32, false, 'b');
      Utility.isSet(2890, (-4145));
      int int1 = (-841);
      Utility.accessToString((-841), true);
      byte[] byteArray0 = new byte[0];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("org.apache.bcel.classfile.AccessFlags", "org.apache.bcel.classfile.AccessFlags");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"org.apache.bcel.classfile.AccessFlags\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)12;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-115), (-1629408860));
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantMethodHandle0.copy();
      constantMethodHandle0.clone();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)12, (int) (byte) (-115));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte) (-5);
      Constant[] constantArray0 = new Constant[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantFloat constantFloat0 = new ConstantFloat(1335.2863F);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[2] = (Constant) constantClass0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("]Y>+&");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 41, (int) (byte)92, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.searchOpcode("t<zi\"Sb~s");
      Utility.searchOpcode("t<zi\"Sb~s");
      Utility.isSet((short) (-1), (short) (-1));
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        constantPool0.getConstant((int) (short) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Utility.compactClassName(", high = ", ", high = ", true);
      String string0 = "";
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = Utility.compactClassName("TH:}R~hwum6l", true);
      assertEquals("TH:}R~hwum6l", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "TH:}R~hwum6l";
      stringArray0[1] = "TH:}R~hwum6l";
      stringArray0[2] = "TH:}R~hwum6l";
      stringArray0[3] = "TH:}R~hwum6l";
      stringArray0[4] = "AADS&Tk";
      stringArray0[5] = "TH:}R~hwum6l";
      String string1 = Utility.methodTypeToSignature("AADS&Tk", stringArray0);
      assertEquals("(LTH:}R~hwum6l;LTH:}R~hwum6l;LTH:}R~hwum6l;LTH:}R~hwum6l;LAADS&Tk;LTH:}R~hwum6l;)LAADS&Tk;", string1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "TH:}R~hwum6l";
      objectArray0[1] = (Object) "TH:}R~hwum6l";
      objectArray0[2] = (Object) "AADS&Tk";
      objectArray0[3] = (Object) "TH:}R~hwum6l";
      objectArray0[4] = (Object) "TH:}R~hwum6l";
      objectArray0[5] = (Object) "TH:}R~hwum6l";
      objectArray0[6] = (Object) "(LTH:}R~hwum6l;LTH:}R~hwum6l;LTH:}R~hwum6l;LTH:}R~hwum6l;LAADS&Tk;LTH:}R~hwum6l;)LAADS&Tk;";
      objectArray0[7] = (Object) "TH:}R~hwum6l";
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{TH:}R~hwum6l, TH:}R~hwum6l, AADS&Tk, TH:}R~hwum6l, TH:}R~hwum6l, TH:}R~hwum6l, (LTH:}R~hwum6l;LTH:}R~hwum6l;LTH:}R~hwum6l;LTH:}R~hwum6l;LAADS&Tk;LTH:}R~hwum6l;)LAADS&Tk;, TH:}R~hwum6l}", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = "3YAZ:)4pCK vg2\\o[;";
      // Undeclared exception!
      try { 
        Utility.getSignature("3YAZ:)4pCK vg2o[;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = "boolean";
      try { 
        Utility.methodSignatureArgumentTypes("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = "byte";
      Utility.compactClassName("byte");
      String string1 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Utility.clearBit(37, (-1900));
      Utility.decode("boolean", false);
      Utility.clearBit(81, (-1046));
      Utility.classOrInterface((-1900));
      Utility.accessToString(3, false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "public private";
      objectArray0[1] = (Object) "boolean";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-123);
      byte byte0 = (byte)64;
      byteArray0[1] = (byte)64;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("{java.lang.Object@4d7a8e29, java.lang.Object@56e9301a, java.lang.Object@146015b7, java.lang.Object@10edee34, java.lang.Object@97f31c6}", "YeJ$Z0$b'<q", ", ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {java.lang.Object@4d7a8e29, java.lang.Object@56e9301a, java.lang.Object@146015b7, java.lang.Object@10edee34, java.lang.Object@97f31c6}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = "%B<FL} F5(}IOc2";
      try { 
        Utility.typeOfSignature("%B<FL} F5(}IOc2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %B<FL} F5(}IOc2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)53;
      byte byte0 = (byte)97;
      byteArray0[8] = (byte)97;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 21
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      try { 
        Utility.typeOfSignature(",&?=LKAZ0*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,&?=LKAZ0*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte)24;
      byteArray0[8] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      byteSequence0.skipBytes((byte) (-57));
      byteSequence0.readFloat();
      byteSequence0.skip((byte)36);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = Utility.format(1, 75, true, 'M');
      assertEquals("1MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)55;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("Z$U$ed$407", string1);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-37);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "float", "\"java.lang.Object@1c3fdbb4\"", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.isJavaIdentifierPart('_');
      Utility.printArray((Object[]) null, false);
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = "~wNbvKm3_e4Qx";
      String string1 = "char";
      boolean boolean0 = false;
      LocalVariableTable localVariableTable0 = null;
      try { 
        Utility.methodSignatureToString("~wNbvKm3_e4Qx", "ioG<C2*Ej^VH!E@au`R", "char", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ~wNbvKm3_e4Qx
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Utility.compactClassName("]U/|.", false);
      int int0 = 594;
      Utility.accessToString(594, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("]U.|.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]U.|.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = "V";
      try { 
        Utility.methodSignatureArgumentTypes("V", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = " = ";
      try { 
        Utility.typeOfMethodSignature(" = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-77);
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)0;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      String string0 = "Ol";
      try { 
        Utility.methodSignatureReturnType("Ol");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ol'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Utility.getSignature("");
      Utility.format(136, 0, true, '1');
      Utility.convertString("");
      Utility.signatureToString("L;", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-54);
      Constant[] constantArray0 = new Constant[2];
      try { 
        MockURI.URI("", "", "<clinit>", ",:\u0000)s", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ://%3Cclinit%3E?,:%00)s#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      int int0 = 40;
      int int1 = 59;
      Utility.setBit(40, 59);
      String string0 = "V<?)wNjs`?S4k";
      String string1 = "L1m]_n'a>2Ufl7J=";
      boolean boolean0 = false;
      Attribute[] attributeArray0 = new Attribute[8];
      int int2 = (-38);
      int int3 = 2048;
      int int4 = (-1241);
      Constant[] constantArray0 = new Constant[9];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("?>...\"", "int");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"int\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.decode("9R9QA5eIo7,)C.Kg$>d", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)56;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.fillup("$l$8b$I$A$A$A$A$A$A$A", (byte)56, true, '\'');
      assertEquals("$l$8b$I$A$A$A$A$A$A$A'''''''''''''''''''''''''''''''''''", string1);
      
      String string2 = Utility.convertString("$l$8b$I$A$A$A$A$A$A$A'''''''''''''''''''''''''''''''''''");
      assertEquals("$l$8b$I$A$A$A$A$A$A$A\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'", string2);
      
      String string3 = Utility.classOrInterface(100);
      assertEquals("class", string3);
      
      String string4 = Utility.accessToString(241, true);
      assertEquals("public final volatile transient", string4);
      
      boolean boolean0 = Utility.isSet((byte)56, 8);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-117);
      Utility.encode(byteArray0, false);
      Utility.clearBit(123, 20);
      Utility.replace("dN$8b", "pFa7dl-Q", "pFa7dl-Q");
      Utility.classOrInterface((byte) (-117));
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)51;
      byteArray1[1] = (byte)100;
      byteArray1[2] = (byte)78;
      byteArray1[3] = (byte)78;
      byteArray1[4] = (byte) (-117);
      byteArray1[5] = (byte) (-117);
      byteArray1[6] = (byte) (-117);
      byteArray1[7] = (byte)104;
      byteArray1[8] = (byte) (-117);
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-117), (int) (byte) (-117));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte) (-117);
      objectArray0[1] = (Object) (byte) (-117);
      Utility.printArray(objectArray0);
      Utility.accessToString(20);
      // Undeclared exception!
      try { 
        Utility.signatureToString("protected final");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `protected final'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      int int0 = (-319);
      Utility.isSet((-319), 200);
      String string0 = "ifle";
      try { 
        Utility.typeOfSignature("ifle");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifle
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-44);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("long", "long");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"long\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      
      String string1 = Utility.classOrInterface((-1616260618));
      assertEquals("class", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte) (-58);
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("60 23 1b 52 e5 c6", string2);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      MockFile mockFile0 = new MockFile("instanceof");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) "instanceof";
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) mockPrintStream1;
      objectArray0[6] = (Object) mockPrintStream0;
      Utility.printArray((PrintStream) mockPrintStream1, objectArray0);
      try { 
        Utility.typeOfMethodSignature("lreturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("W_=Wl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W_=Wl'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Utility.getSignature("$>bBqm?rC CQ");
      Utility.compactClassName("chFE^n2BdTH", "L$>bBqm?rC;", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte)68;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-107), (byte) (-86));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 65, (int) (byte) (-44), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
