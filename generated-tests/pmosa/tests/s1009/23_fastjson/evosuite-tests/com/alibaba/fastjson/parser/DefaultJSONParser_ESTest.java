/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 14:17:38 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldDeserializer;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Point2D;
import java.io.CharArrayReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.net.HttpCookie;
import java.sql.Date;
import java.sql.Timestamp;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.time.chrono.ChronoLocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.getDateFormat();
      defaultJSONParser0.getDateFomartPattern();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      ParserConfig.global = parserConfig0;
      defaultJSONParser0.parseKey();
      defaultJSONParser0.getExtraTypeProviders();
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("e[[JGGo*!dK", parserConfig0, 88);
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertNotNull(list0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.parse();
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      assertNotNull(dateFormat0);
      
      defaultJSONParser0.resolveReference("`59tuTxJMVI");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error :", parserConfig0, 75);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      parserConfig0.defaultClassLoader = classLoader0;
      defaultJSONParser0.getObject((String) null);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      classLoader0.getParent();
      defaultJSONParser0.resolveStatus = 75;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : syntax error :
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("bOA&KJh3+y} *", parserConfig0, 2222);
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, false);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      defaultJSONParser0.getInput();
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(2222, 2222);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("jv.at.");
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(5, 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect iso8601, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("9fFJ");
      defaultJSONParser0.getInput();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("([C)Ljava/math/BigDecimal;", (-2077));
      char[] charArray0 = new char[1];
      charArray0[0] = ']';
      JSONLexerBase.readString(charArray0, 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.getObject("([C)Ljava/math/BigDecimal;");
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      ParserConfig parserConfig0 = defaultJSONParser0.getConfig();
      int int0 = 961;
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("([C)Ljava/math/BigDecimal;", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. ([C)Ljava/math/BigDecimal;
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = '$';
      charArray0[2] = 'I';
      charArray0[3] = '{';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 125, (-111));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getResolveStatus();
      Locale locale0 = jSONReaderScanner0.getLocale();
      jSONReaderScanner0.locale = locale0;
      defaultJSONParser0.getContext();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("jv.nat.");
      LinkedHashSet<HttpCookie> linkedHashSet0 = new LinkedHashSet<HttpCookie>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) linkedHashSet0, (Object) "jv.nat.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName jv.nat.
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn("jxv8").when(propertyProcessable0).toString();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) propertyProcessable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName jxv8
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "", (Object) "");
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "value ");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(propertyProcessable0).toString();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) propertyProcessable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("qft1HpS=&3,M<+uXP", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : qft1HpS=&3,M<+uXP
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("73E", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual float, pos 3, json : 73E
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("jv.at.");
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      parserConfig0.setDefaultClassLoader(classLoader0);
      BeanContext beanContext0 = defaultJSONParser0.lastBeanContext;
      defaultJSONParser0.lastBeanContext = null;
      Class<JSONReaderScanner> class0 = JSONReaderScanner.class;
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.fieldTypeResolver = null;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ClassLoader.getSystemClassLoader();
      ParserConfig.parserAllFieldToCache(class0, hashMap0);
      defaultJSONParser0.getSymbolTable();
      Feature feature0 = Feature.SortFeidFastMatch;
      classLoader0.setDefaultAssertionStatus(false);
      classLoader0.getParent();
      ClassLoader.getSystemClassLoader();
      defaultJSONParser0.config(feature0, false);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '_';
      charArray0[1] = ':';
      charArray0[2] = '=';
      charArray0[3] = ']';
      charArray0[4] = 'T';
      charArray0[5] = '!';
      charArray0[6] = 'i';
      charArray0[7] = '<';
      charArray0[8] = 'H';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      defaultJSONParser0.setConfig(parserConfig0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("H~7");
      defaultJSONParser0.setDateFormat("H~7");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : H~7
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "", (Object) "");
      String string0 = "value ";
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "value ");
      defaultJSONParser0.getContext();
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.getDoubleValue("value ");
      parseContext0.toString();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      defaultJSONParser0.setContext((Object) mockJapaneseDate0, (Object) defaultJSONParser_ResolveTask0);
      Vector<Byte> vector0 = new Vector<Byte>();
      Class<TimeZone> class0 = TimeZone.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      defaultJSONParser0.getInput();
      ParseContext parseContext0 = defaultJSONParser0.context;
      defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, ", ");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      Class<Rectangle> class0 = Rectangle.class;
      JSON.parseArray("", class0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("h|};5A?8?!,.o");
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      String string0 = "parse number key error";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("parse number key error");
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[double");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.getConfig();
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual [, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.deny");
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getConfig();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseInt error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.IntegerCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object object0 = null;
      String string0 = ", actual ";
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("h_IDw]Khiv", parserConfig0, 0);
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",lcS'BOLLSQjot", parserConfig0);
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeAccept");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultJSONParser0.getDateFormat();
      defaultJSONParser0.getDateFomartPattern();
      defaultJSONParser0.setContext((Object) "yyyy-MM-dd HH:mm:ss", (Object) "");
      defaultJSONParser0.setResolveStatus((-281));
      assertEquals((-281), defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",lcS'BOLLSQjot", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual '
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", pos ");
      ParserConfig parserConfig0 = new ParserConfig();
      jSONReaderScanner0.scanSymbolWithSeperator(parserConfig0.symbolTable, 'Z');
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      System.setCurrentTimeMillis(1899L);
      IdentityHashMap<Float, Point> identityHashMap0 = new IdentityHashMap<Float, Point>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "jv.at.";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("jv.at.");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : jv.at.
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, ", ");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.getSymbolTable();
      defaultJSONParser0.getObject("fastjson.parser.autoTypeAccept");
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(2);
      defaultJSONParser0.setDateFomrat(dateFormat0);
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("3:Rpca;$[_6Zs:iHY4a");
      defaultJSONParser0.parseKey();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "bfhh8:Z%1}jb/\"<uD");
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.getContext();
      defaultJSONParser0.getExtraTypeProviders();
      BeanContext beanContext0 = defaultJSONParser0.lastBeanContext;
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("bfhh8:Z%1}jb/\"<uD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - R, info : pos 2, json : 3:Rpca;$[_6Zs:iHY4a
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("jv.at.");
      defaultJSONParser0.getFieldTypeResolver();
      Hashtable<String, ParameterizedTypeImpl> hashtable0 = new Hashtable<String, ParameterizedTypeImpl>();
      defaultJSONParser0.checkMapResolve(hashtable0, (Object) null);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      JSON.parseArray("", class0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 15);
      HashMap<Method, MessageFormat> hashMap0 = new HashMap<Method, MessageFormat>();
      Double double0 = new Double(15);
      defaultJSONParser0.checkMapResolve(hashMap0, double0);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.parseKey();
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.getObject("D B:CVbxE[4");
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("3:Rpca;$[_6Zs:iHY4a");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : int
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("3:Rpa;$[_6s:irHY4a");
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.global;
      ArrayList<ExtraTypeProvider> arrayList0 = new ArrayList<ExtraTypeProvider>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'Z';
      charArray0[1] = '(';
      charArray0[2] = '\\';
      charArray0[3] = 's';
      charArray0[4] = 'r';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, 111);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(111);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.resolveReference("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(1792);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      classLoader0.clearAssertionStatus();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      parserConfig0.setDefaultClassLoader(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("scanFieldBigInteger", parserConfig0, 22);
      classLoader0.setDefaultAssertionStatus(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      classLoader0.getParent();
      defaultJSONParser0.getContext();
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.setContext((ParseContext) null);
      defaultJSONParser0.close();
      defaultJSONParser0.getDateFomartPattern();
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : scanFieldBigInteger
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.handleResovleTask("");
      defaultJSONParser0.getDateFormat();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("73E", parserConfig0);
      defaultJSONParser0.getDateFomartPattern();
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ofLocalizedTime(formatStyle0);
      Locale locale0 = dateTimeFormatter0.getLocale();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("73E", 37);
      defaultJSONParser0.setContext((Object) numberFormat0, (Object) jSONReaderScanner0);
      JSONScanner jSONScanner0 = new JSONScanner("SJCjRESTKAP;FYTVXE");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) jSONScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, pos 3, json : 73E
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      BigDecimal bigDecimal0 = new BigDecimal(4647432019745535567L);
      Class<Float> class0 = Float.TYPE;
      defaultJSONParser0.setContext((Object) bigDecimal0, (Object) class0);
      defaultJSONParser0.getSymbolTable();
      defaultJSONParser0.getObject("fastjson.parser.deny");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeAccept", 11);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // float
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("jv.at.");
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.checkListResolve(list0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.getObject("fastjson.parser.deny");
      defaultJSONParser0.resolveReference("fastjson.parser.deny");
      LinkedList<ParameterizedTypeImpl> linkedList0 = new LinkedList<ParameterizedTypeImpl>();
      defaultJSONParser0.checkListResolve(linkedList0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.handleResovleTask("");
      defaultJSONParser0.getDateFormat();
      Class<Double> class0 = Double.TYPE;
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)defaultJSONParser0.getDateFormat();
      assertEquals("yyyy-MM-dd HH:mm:ss", mockSimpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.serializer.CalendarCodec", parserConfig0);
      JSONLexer jSONLexer0 = defaultJSONParser0.getLexer();
      assertEquals(1, jSONLexer0.token());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "MhZEKFw&S*i86NdI[@");
      String string0 = "jv.at.";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("jv.at.");
      Point point0 = new Point();
      Point point1 = new Point();
      point0.x = 199;
      point0.setLocation((Point2D) point1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) point0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("3:Rpca;$[_6Zs:i2HY4a");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("XakNxSBUj<1z");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("rrVJahUS[", 6);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(classLoader0, defaultJSONParser0.lexer, parserConfig0);
      defaultJSONParser1.setContext((Object) parserConfig0, (Object) classLoader0);
      JSONScanner jSONScanner0 = new JSONScanner("XakNxSBUj<1z");
      ParserConfig parserConfig1 = new ParserConfig(false);
      defaultJSONParser0.getSymbolTable();
      defaultJSONParser0.getConfig();
      Insets insets0 = new Insets(1, 2, (-2984), 1381);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null, (Object) parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : 3:Rpca;$[_6Zs:i2HY4a
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", pos ");
      ParserConfig parserConfig0 = new ParserConfig();
      jSONReaderScanner0.scanSymbolWithSeperator(parserConfig0.symbolTable, 'Z');
      Locale locale0 = Locale.KOREAN;
      NumberFormat.getPercentInstance(locale0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("fastjson.parser.autoTypeSupport", 58);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("fastjson.parser.autoTypeSupport", (-1975));
      Integer integer0 = new Integer(43);
      ParserConfig parserConfig1 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(integer0, jSONReaderScanner0, parserConfig1);
      Point point0 = new Point((-622), 0);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("fastjson.parser.autoTypeAccept");
      defaultJSONParser0.setContext((Object) point0, (Object) choiceFormat0);
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.autoTypeSupport");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      defaultJSONParser0.getSymbolTable();
      defaultJSONParser0.getConfig();
      Insets insets0 = new Insets(1, (-719), (-419), 132);
      Collator collator0 = Collator.getInstance(locale0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null, (Object) collator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      ChoiceFormat choiceFormat0 = new ChoiceFormat("fastjson.parser.autoTypeAccept");
      ParseContext parseContext1 = new ParseContext((ParseContext) null, (Object) null, choiceFormat0);
      defaultJSONParser0.setContext(parseContext1, (Object) parseContext1, (Object) parserConfig0);
      defaultJSONParser0.setResolveStatus(541);
      defaultJSONParser0.setDateFormat("fastjson.parser.deny");
      defaultJSONParser0.popContext();
      Class<Double> class0 = Double.TYPE;
      assertEquals(1041, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      ParseContext parseContext0 = defaultJSONParser0.context;
      ParseContext parseContext1 = new ParseContext((ParseContext) null, (Object) null, defaultJSONParser0);
      defaultJSONParser0.setContext(parseContext1);
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.popContext();
      Class<Double> class0 = Double.TYPE;
      Feature feature0 = Feature.CustomMapDeserializer;
      boolean boolean0 = defaultJSONParser0.isEnabled(feature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : [
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "[";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = ",";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) ",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 1, json : ,
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J)Ho|!\"q|yF*DisaxF");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",lcS'BOLLSQjot", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) ",lcS'BOLLSQjot");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ', info : pos 4, json : ,lcS'BOLLSQjot
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("jv.at.");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) null, (Object) null);
      defaultJSONParser0.setContext(parseContext0);
      defaultJSONParser0.resolveReference("jv.at.");
      HashMap<Boolean, ParameterizedTypeImpl> hashMap0 = null;
      try {
        hashMap0 = new HashMap<Boolean, ParameterizedTypeImpl>((Map<? extends Boolean, ? extends ParameterizedTypeImpl>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(fFH");
      defaultJSONParser0.setContext((Object) "(fFH", (Object) "(fFH");
      defaultJSONParser0.resolveReference("MGEuhYk3+");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : (fFH
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : )
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(fFH");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "(fFH", (Object) "(fFH");
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<String> class0 = String.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      ParseContext parseContext1 = new ParseContext(parseContext0, feature0, throwableDeserializer0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      ParseContext parseContext2 = defaultJSONParser0.setContext(parseContext1, (Object) null, (Object) mockJapaneseDate0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext2, "(fFH");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.handleResovleTask("(fFH");
      defaultJSONParser0.config(feature0, false);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.handleResovleTask("[");
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("73E");
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "BR");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.handleResovleTask((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : [
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("73E", parserConfig0);
      defaultJSONParser0.getDateFomartPattern();
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ofLocalizedTime(formatStyle0);
      dateTimeFormatter0.getLocale();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeSupport", 2);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("{s(8", 0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONReaderScanner1, jSONReaderScanner1, parserConfig0);
      defaultJSONParser0.setContext((Object) "{s(8", (Object) formatStyle0);
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.deny");
      defaultJSONParser1.getSymbolTable();
      Insets insets0 = new Insets(0, 2414, 2414, 2414);
      Properties properties0 = new Properties();
      Float float0 = new Float((float) 1);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Type) null, (Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("m;x)ct4I'f(|f#a", 6);
      Properties properties0 = new Properties();
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(properties0, jSONReaderScanner0, parserConfig0);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      RenderingHints renderingHints0 = new RenderingHints((RenderingHints.Key) null, numberFormat0);
      Long long0 = new Long(1);
      defaultJSONParser1.setContext((Object) renderingHints0, (Object) long0);
      JSONScanner jSONScanner0 = new JSONScanner("7,wok i+fW>;");
      defaultJSONParser1.getSymbolTable();
      Insets insets0 = new Insets(2585, 2, 0, 4);
      Properties properties1 = new Properties();
      Float float0 = new Float(764.53F);
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(defaultJSONParser1.lexer, parserConfig0);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      // Undeclared exception!
      try { 
        defaultJSONParser2.parseObject((Type) null, (Object) decimalFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = 'q';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-26);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      charArray0[3] = '*';
      charArray0[4] = '-';
      charArray0[5] = '_';
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 6, parserConfig0, 6);
      defaultJSONParser0.handleResovleTask(charArray0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 1, actual *
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error");
      defaultJSONParser0.setResolveStatus(1);
      Stack<DefaultJSONParser.ResolveTask> stack0 = new Stack<DefaultJSONParser.ResolveTask>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.checkListResolve(stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(I)Ljava/lang/reflect/Type;");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      List<DefaultJSONParser.ResolveTask> list1 = defaultJSONParser0.getResolveTaskList();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("[j*/kakHg4Vq!R\"m_");
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [j*_/kakHg4Vq!R\"m_
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      char[] charArray0 = new char[0];
      int int0 = 12;
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[", parserConfig0, 12);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".Ue]-y V[");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : .Ue]-y V[
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("T>~V2$F9O6&DF9");
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : T>~V2$F9O6&DF9
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      Object object0 = defaultJSONParser0.parseKey();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[16];
      charArray0[0] = '}';
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 6, parserConfig0, 110);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : }\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = 'q';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-26);
      charArray0[3] = '*';
      charArray0[4] = '-';
      charArray0[5] = '_';
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 6, parserConfig0, 6);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.autoTypeAccept", linkedHashMap0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) mockDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : {pos 1, json : {{q*-_
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = '{';
      charArray0[3] = '}';
      charArray0[4] = '-';
      charArray0[5] = '_';
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 6, parserConfig0, 6);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.autoTypeAccept", linkedHashMap0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) mockDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : {pos 1, json : {{{}-_
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '{';
      charArray0[1] = '{';
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-26);
      byteArray0[0] = (byte) (-26);
      charArray0[3] = '*';
      charArray0[4] = '-';
      charArray0[5] = '_';
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 6, parserConfig0, 6);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000pos 2, json : {{\u0000*-_
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Feature feature0 = Feature.InternFieldNames;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Short> class0 = Short.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>(9, 9, false);
      ParserConfig.parserAllFieldToCache(class0, linkedHashMap0);
      Class<String> class1 = String.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class1);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = '9';
      charArray0[2] = 'K';
      charArray0[3] = '\"';
      charArray0[4] = 'm';
      charArray0[5] = 'S';
      charArray0[6] = '#';
      charArray0[7] = '4';
      charArray0[8] = '+';
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 9, parserConfig0, 345);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : [9K\"mS#4+
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<String> class0 = String.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = '9';
      charArray0[2] = 'K';
      charArray0[3] = '9';
      charArray0[4] = 'm';
      charArray0[5] = 'S';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 57);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("7\"eLE,(MAAF\"4^Y\"");
      defaultJSONParser0.parse();
      defaultJSONParser0.getResolveTaskList();
      Object object0 = defaultJSONParser0.parseKey();
      assertEquals("eLE,(MAAF", object0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Feature feature0 = Feature.InternFieldNames;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Short> class0 = Short.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>(9, 9, false);
      ParserConfig.parserAllFieldToCache(class0, linkedHashMap0);
      Class<String> class1 = String.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class1);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = '9';
      charArray0[2] = 'K';
      charArray0[3] = '\"';
      charArray0[4] = 'm';
      charArray0[5] = 'S';
      charArray0[6] = '#';
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 9, parserConfig0, 169);
      Class<MockHijrahDate> class2 = MockHijrahDate.class;
      LinkedList<RenderingHints> linkedList0 = new LinkedList<RenderingHints>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class2, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 1, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[0] = '{';
      charArray0[3] = '*';
      charArray0[4] = '-';
      charArray0[5] = '_';
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 6, parserConfig0, 4370);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "[S*C4";
      // Undeclared exception!
      try { 
        JSON.parseObject("[S*C4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [S*C4
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(fFH");
      defaultJSONParser0.getExtraProcessors();
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[19];
      charArray0[1] = '{';
      charArray0[2] = '1';
      charArray0[5] = '{';
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 6, parserConfig0, 6);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 3, json : \u0000{1\u0000\u0000{
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[6];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = '1';
      charArray0[3] = '*';
      charArray0[5] = '_';
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 6, parserConfig0, 6);
      Locale locale0 = Locale.PRC;
      MessageFormat messageFormat0 = new MessageFormat("fastjson.parser.deny", locale0);
      defaultJSONParser0.setContext((ParseContext) null, (Object) "fastjson.parser.autoTypeSupport", (Object) messageFormat0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 3, json : {{1*\u0000_
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("7\"eLE,(MAAF\"4^Y\"");
      defaultJSONParser0.parse();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, pos 12, json : 7\"eLE,(MAAF\"4^Y\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@1e8e1082.java.awt.Insets[top=2,left=31186,bottom=-1112,right=-1112].java.awt.Point[x=0,y=0].java.awt.Point[x=0,y=0].$.org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@1e8e1082.java.awt.Insets[top=2,left=31186,bottom=-1112,right=-1112].java.awt.Point[x=0,y=0]");
      ParseContext parseContext0 = defaultJSONParser0.context;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      Properties properties0 = new Properties();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "$.org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@58b8eac9.java.awt.Insets[top=2,left=31186,bottom=-1112,right=-1112].java.awt.Point[x=0,y=0].AllowArbitraryCommas");
      Point point0 = new Point();
      ResolveFieldDeserializer resolveFieldDeserializer0 = new ResolveFieldDeserializer(properties0, point0);
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.handleResovleTask(numberFormat0);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("7\"eLE,(MAAF\"4^Y\"");
      Object object0 = defaultJSONParser0.parse();
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, pos 1, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("lan");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "lan", (Object) "lan");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      defaultJSONParser0.getContext();
      ParseContext parseContext1 = defaultJSONParser0.context;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      Properties properties0 = new Properties();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "$.CustomMapDeserializer");
      ResolveFieldDeserializer resolveFieldDeserializer0 = new ResolveFieldDeserializer(properties0, defaultJSONParser0);
      defaultJSONParser_ResolveTask0.fieldDeserializer = (FieldDeserializer) resolveFieldDeserializer0;
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.handleResovleTask(numberFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "null", (Object) "null");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      ParseContext parseContext1 = defaultJSONParser0.setContext(parseContext0, (Object) "null", (Object) mockJapaneseDate0);
      Object object0 = new Object();
      ParseContext parseContext2 = new ParseContext(parseContext1, object0, "null");
      defaultJSONParser0.getContext();
      ParseContext parseContext3 = defaultJSONParser0.context;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      Properties properties0 = new Properties();
      defaultJSONParser0.setContext(parseContext2, (Object) numberFormat0, (Object) properties0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext1, "$.CustomMapDeserializer");
      ResolveFieldDeserializer resolveFieldDeserializer0 = new ResolveFieldDeserializer(properties0, defaultJSONParser0);
      defaultJSONParser_ResolveTask0.fieldDeserializer = (FieldDeserializer) resolveFieldDeserializer0;
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.handleResovleTask(numberFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Feature feature0 = Feature.InternFieldNames;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<String> class0 = String.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = '9';
      charArray0[2] = 'K';
      charArray0[4] = 'm';
      charArray0[5] = 'S';
      charArray0[6] = '0';
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 9, parserConfig0, 169);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      typeArray0[8] = (Type) class0;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error :error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Feature feature0 = Feature.InternFieldNames;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<String> class0 = String.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = '9';
      charArray0[2] = 'K';
      charArray0[4] = 'm';
      charArray0[5] = 'S';
      charArray0[6] = '0';
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 9, parserConfig0, 169);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      typeArray0[8] = (Type) class0;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error :error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      defaultJSONParser0.setResolveStatus(1);
      Stack<DefaultJSONParser.ResolveTask> stack0 = new Stack<DefaultJSONParser.ResolveTask>();
      TreeSet<SimpleTimeZone> treeSet0 = new TreeSet<SimpleTimeZone>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.checkListResolve(treeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Feature feature0 = Feature.InternFieldNames;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<String> class0 = String.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = 'K';
      charArray0[4] = 'm';
      charArray0[5] = 'S';
      charArray0[6] = '0';
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 9, parserConfig0, 169);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : [[K\u0000mS0\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "3:Rpa;$[_6s:irHY4a";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("3:Rpa;$[_6s:irHY4a");
      ClassLoader.getSystemClassLoader();
      ArrayList<ExtraTypeProvider> arrayList0 = new ArrayList<ExtraTypeProvider>();
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra(mapDeserializer0, "3:Rpa;$[_6s:irHY4a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : 3:Rpa;$[_6s:irHY4a
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("lan");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "lan", (Object) "lan");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      defaultJSONParser0.getContext();
      ParseContext parseContext1 = defaultJSONParser0.context;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      Properties properties0 = new Properties();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "lan");
      ResolveFieldDeserializer resolveFieldDeserializer0 = new ResolveFieldDeserializer(properties0, defaultJSONParser0);
      defaultJSONParser_ResolveTask0.fieldDeserializer = (FieldDeserializer) resolveFieldDeserializer0;
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.handleResovleTask(numberFormat0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }
}
