/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 09:14:13 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.PushbackReader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.sql.Connection;
import java.util.List;
import java.util.Locale;
import org.apache.derby.catalog.Dependable;
import org.apache.derby.iapi.services.context.ContextManager;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.DataDictionary;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.access.TransactionController;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.store.raw.log.LogToFile;
import org.databene.commons.bean.TypedPropertyMutator;
import org.databene.commons.bean.UntypedPropertyMutator;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.engine.SessionRemote;
import org.h2.jdbcx.JdbcDataSource;
import org.h2.value.ValueDecimal;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("1z'q", (DBTable) null, 44, "1z'q");
      defaultDBColumn0.equals((Object) null);
      String string0 = SQLUtil.normalize("[q8", false);
      assertEquals("[ q8", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "?{jP4PZsp)L-F0~W*";
      String string1 = "!;`<T31C5&,m\"t";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!;`<T31C5&,m\"t");
      int int0 = 290;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("?{jP4PZsp)L-F0~W*", defaultDBTable0, 290, "?{jP4PZsp)L-F0~W*");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      boolean boolean0 = true;
      SQLUtil.normalize("?{JP4PZSP)L-F0~W*", true);
      defaultDBTable0.getUniqueConstraint((String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "y9.{42-i{-qYPc";
      SQLUtil.mutatesDataOrStructure("y9.{42-i{-qYPc");
      TableContainer tableContainer0 = new TableContainer("");
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("`o-yh8P");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.mutatesDataOrStructure("alter index");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("vP6b/1*J");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("0?F1_M9>*[uA)E|LG");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = SQLUtil.normalize("rename", false);
      assertEquals("rename", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("rename");
      assertTrue(boolean0);
      
      String string1 = SQLUtil.substituteMarkers("@dw k~uuL", "@dw k~uuL", "rename");
      assertEquals("'rename'", string1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "updatememory:";
      SQLUtil.mutatesStructure("updatememory:");
      SQLUtil.typeAndName((DBObject) null);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "select into[dh-/!(t9$*rm%6f<", "select into[dh-/!(t9$*rm%6f<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil.removeComments("rename");
      System.setCurrentTimeMillis(0L);
      boolean boolean0 = SQLUtil.isDDL("rename");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLUtil.removeComments("[DH-/!(T9$*rM%6f<");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[DH-/!(T9$*rM%6f<");
      boolean boolean0 = SQLUtil.isQuery("[DH-/!(T9$*rM%6f<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = " REFERENCES ";
      stringArray0[3] = " REFERENCES ";
      stringArray0[4] = " REFERENCES ";
      stringArray0[5] = " REFERENCES ";
      stringArray0[6] = " REFERENCES ";
      stringArray0[7] = " REFERENCES ";
      stringArray0[8] = " REFERENCES ";
      SQLUtil.renderColumnListWithTableName(" REFERENCES ", stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.isDDL("connecting #");
      SQLUtil.isQuery(" REFERENCES ");
      ContextService contextService0 = null;
      try {
        contextService0 = new ContextService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.monitor.Monitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments("u=+Sx`8{YJBfp");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("22012");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "u=+Sx`8{YJBfp";
      stringArray0[1] = "u=+Sx`8{YJBfp";
      stringArray0[2] = "u=+Sx`8{YJBfp";
      stringArray0[3] = "u=+Sx`8{YJBfp";
      stringArray0[4] = "22012";
      stringArray0[5] = "u=+Sx`8{YJBfp";
      stringArray0[6] = "ltG*,&+^wb";
      stringArray0[7] = "22012";
      stringArray0[8] = "drop table";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "replication.slave.dbname";
      String string0 = SQLUtil.renderColumnListWithTableName("replication.slave.dbname", stringArray0);
      assertEquals("replication.slave.dbname.replication.slave.dbname", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DBUniqueConstraint dBUniqueConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "rundll32";
      stringArray0[1] = "rundll32";
      stringArray0[2] = "rundll32";
      stringArray0[3] = "rundll32";
      stringArray0[4] = "rundll32";
      stringArray0[5] = "rundll32";
      String string0 = "";
      SQLUtil.leftJoin("rundll32", stringArray0, "", "rundll32", stringArray0);
      TableContainer tableContainer0 = new TableContainer("rundll32");
      tableContainer0.getTable("rundll32");
      int int0 = (-2612);
      tableContainer0.getComponents();
      // Undeclared exception!
      try { 
        tableContainer0.addTable((DBTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainerSupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = SchemaDescriptor.SYSSTAT_SCHEMA_UUID;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "c013800d-00fb-2644-07ec-000000134f30";
      String string1 = SQLUtil.innerJoin("c013800d-00fb-2644-07ec-000000134f30", stringArray0, "executeh@?)", "TRUNQATE", stringArray0);
      assertEquals("executeh@?) as TRUNQATE on c013800d-00fb-2644-07ec-000000134f30.c013800d-00fb-2644-07ec-000000134f30 = TRUNQATE.c013800d-00fb-2644-07ec-000000134f30", string1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.derby.impl.io.VFMemoryStorageFactory";
      stringArray0[1] = "org.apache.derby.impl.io.VFMemoryStorageFactory";
      stringArray0[2] = "org.apache.derby.impl.io.VFMemoryStorageFactory";
      stringArray0[3] = "org.apache.derby.impl.io.VFMemoryStorageFactory";
      stringArray0[4] = "/*";
      stringArray0[5] = "org.apache.derby.impl.io.VFMemoryStorageFactory";
      String string0 = SQLUtil.innerJoin("org.apache.derby.impl.io.VFMemoryStorageFactory", stringArray0, "/*", "#2", stringArray0);
      SQLUtil.parseColumnTypeAndSize("org.apache.derby.impl.io.VFMemoryStorageFactory");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.io.VFMemoryStorageFactory");
      String[] stringArray1 = new String[8];
      stringArray1[0] = "?Xz'NX1L2";
      stringArray1[1] = "q\"XA*u8O'F{U$";
      stringArray1[2] = "/* as #2 on org.apache.derby.impl.io.VFMemoryStorageFactory.org.apache.derby.impl.io.VFMemoryStorageFactory = #2.org.apache.derby.impl.io.VFMemoryStorageFactory and org.apache.derby.impl.io.VFMemoryStorageFactory.org.apache.derby.impl.io.VFMemoryStorageFactory = #2.org.apache.derby.impl.io.VFMemoryStorageFactory and org.apache.derby.impl.io.VFMemoryStorageFactory.org.apache.derby.impl.io.VFMemoryStorageFactory = #2.org.apache.derby.impl.io.VFMemoryStorageFactory and org.apache.derby.impl.io.VFMemoryStorageFactory.org.apache.derby.impl.io.VFMemoryStorageFactory = #2.org.apache.derby.impl.io.VFMemoryStorageFactory and org.apache.derby.impl.io.VFMemoryStorageFactory./* = #2./* and org.apache.derby.impl.io.VFMemoryStorageFactory.org.apache.derby.impl.io.VFMemoryStorageFactory = #2.org.apache.derby.impl.io.VFMemoryStorageFactory";
      stringArray1[3] = "q\"XA*u8O'F{U$";
      stringArray1[4] = "org.apache.derby.impl.io.VFMemoryStorageFactory";
      stringArray1[5] = "/* as #2 on org.apache.derby.impl.io.VFMemoryStorageFactory.org.apache.derby.impl.io.VFMemoryStorageFactory = #2.org.apache.derby.impl.io.VFMemoryStorageFactory and org.apache.derby.impl.io.VFMemoryStorageFactory.org.apache.derby.impl.io.VFMemoryStorageFactory = #2.org.apache.derby.impl.io.VFMemoryStorageFactory and org.apache.derby.impl.io.VFMemoryStorageFactory.org.apache.derby.impl.io.VFMemoryStorageFactory = #2.org.apache.derby.impl.io.VFMemoryStorageFactory and org.apache.derby.impl.io.VFMemoryStorageFactory.org.apache.derby.impl.io.VFMemoryStorageFactory = #2.org.apache.derby.impl.io.VFMemoryStorageFactory and org.apache.derby.impl.io.VFMemoryStorageFactory./* = #2./* and org.apache.derby.impl.io.VFMemoryStorageFactory.org.apache.derby.impl.io.VFMemoryStorageFactory = #2.org.apache.derby.impl.io.VFMemoryStorageFactory";
      stringArray1[6] = "#2";
      stringArray1[7] = "org.apache.derby.impl.io.VFMemoryStorageFactory";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "org.apache.derby.impl.io.VFMemoryStorageFactory", true, stringArray1);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("q\"XA*u8O'F{U$", true, dBUniqueConstraint0);
      String string1 = SQLUtil.renderValue(dBUniqueIndex0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = TypeId.DATE_NAME;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[DH-/!(T9$*rM%6f<");
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("[DH-/!(T9$*rM%6f<", string1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLUtil.normalize("+!", false);
      DBSchema dBSchema0 = new DBSchema("b*;`WV]^|Ow3_7I");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("getHashScanResultSet", dBSchema0);
      dBSchema0.removeTable(defaultDBTable0);
      SQLUtil.ownerDotComponent(dBSchema0);
      SQLUtil.normalize("+ !", false);
      SQLUtil.renderColumnNames((String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder("3`._F");
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      StringBuilder stringBuilder1 = stringBuilder0.insert(5, charArray0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(501, (CharSequence) "()");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 501
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "[ rh -#/ ! (t9 $ * rm ", true, (String[]) null);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \"[ rh -#/ ! (t9 $ * rm \" ", string0);
      
      String string1 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertEquals("unique constraint [ rh -#/ ! (t9 $ * rm ", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("left");
      DBCatalog dBCatalog0 = new DBCatalog("left");
      DBSchema dBSchema0 = new DBSchema("");
      dBSchema0.equals(dBCatalog0);
      dBCatalog0.removeSchema(dBSchema0);
      SQLUtil.typeAndName(dBCatalog0);
      SQLUtil.mutatesDataOrStructure("");
      SQLUtil.typeAndName(dBSchema0);
      SQLUtil.typeAndName(dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "schema ";
      stringArray0[1] = "schema ";
      stringArray0[2] = "";
      stringArray0[3] = "left";
      stringArray0[4] = "left";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (schema , schema , , left, left)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("trun", false, "rC%#W/$M", "trun");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK trun", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", (DBSchema) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = ")(hJWw_?I-}2VV\"Xt";
      stringArray0[2] = ")(hJWw_?I-}2VV\"Xt";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ")(hJWw_?I-}2VV\"Xt", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(")(hJWw_?I-}2VV\"Xt", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String[] stringArray1 = new String[3];
      stringArray1[0] = "";
      stringArray1[1] = ")(hJWw_?I-}2VV\"Xt";
      stringArray1[2] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(")(hJWw_?I-}2VV\"Xt", true, dBTable0, stringArray0, dBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT )(hJWw_?I-}2VV\"Xt FOREIGN KEY (, )(hJWw_?I-}2VV\"Xt, )(hJWw_?I-}2VV\"Xt) REFERENCES (, )(hJWw_?I-}2VV\"Xt, )", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.removeComments("[DH-/!(T9$*rM%6f<");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[DH-/!(T9$*rM%6f<");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "KC#G2-%ha o[UAf<[", false, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \"KC#G2-%ha o[UAf<[\" ", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("syscs_", true, "22005", "syscs_");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition("22005", stringBuilder0);
      assertEquals("CONSTRAINT syscs_  and 22005", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[0];
      defaultDBTable0.toString();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      String string1 = "^0~:#u?eTzA";
      // Undeclared exception!
      try { 
        DBDataType.getInstance(0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLUtil.mutatesStructure("execute");
      SQLUtil.removeComments("execute");
      SQLUtil.isDDL("oRUN$Iw# :");
      SQLUtil.renderValue("execute");
      SQLUtil.substituteMarkers("oRUN$Iw# :", "oRUN$Iw# :", "execute");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "'execute'";
      stringArray0[1] = "oRUN$Iw# :";
      stringArray0[2] = "";
      stringArray0[3] = "'execute'";
      stringArray0[4] = "execute";
      stringArray0[5] = "";
      stringArray0[6] = "'execute'";
      stringArray0[7] = "";
      stringArray0[8] = "'execute'";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition("execute", stringBuilder0);
      assertEquals("execute", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "g3WVWf~)&~a,R";
      SQLUtil.normalize("g3WVWf~)&~a,R", false);
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLUtil.removeComments("");
      SQLUtil.mutatesDataOrStructure("(");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "(";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "(";
      stringArray0[6] = "";
      stringArray0[7] = "(";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      String string0 = "=nm\\Z0v$J";
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("FOREIGN KEY ", "", (VersionNumber) null);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("BPuvAe8 gji");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'BPuvAe8 gji'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLUtil.normalize("[DH-/!(T9$*rM%6f<", false);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "[DH-/!(T9$*rM%6f<");
      SQLUtil.addOptionalCondition("[DH-/!(T9$*rM%6f<", stringBuilder0);
      assertEquals("[DH-/!(T9$*rM%6f< or [DH-/!(T9$*rM%6f<", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("NULL");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("NULL", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("NULL(0)", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("1z'q", (DBTable) null, 44, "1z'q");
      defaultDBColumn0.equals((Object) null);
      Integer integer0 = RawTransaction.COMMIT;
      defaultDBColumn0.setSize(integer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1z'q");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String[] stringArray0 = new String[0];
      SQLUtil.leftJoin("--   empty: ", stringArray0, "alter tabley9.{42-i{-qypc", "bs98=", stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, (String) null, false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\"K7{k");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\"K7{k";
      stringArray0[1] = "\"K7{k";
      stringArray0[2] = "drop table+{p~)rd]oti;2t&";
      stringArray0[3] = "org.apache.derby.iapi.types.SQLBoolean";
      stringArray0[4] = "[DH-/!(T9$*rM%6f<";
      stringArray0[5] = "\"K7{k";
      stringArray0[6] = "drop table+{p~)rd]oti;2t&";
      stringArray0[7] = "\"K7{k";
      stringArray0[8] = "drop table+{p~)rd]oti;2t&";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop table+{p~)rd]oti;2t&", false, stringArray0);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT \"drop table+{p~)rd]oti;2t&\" CONSTRAINT \"drop table+{p~)rd]oti;2t&\" CONSTRAINT \"drop table+{p~)rd]oti;2t&\" ", stringBuilder0.toString());
      
      boolean boolean0 = SQLUtil.isQuery("[DH-/!(T9$*rM%6f<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("INSERT VALUES");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("Mi77082][");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, " (", true, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBPrimaryKeyConstraint0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      dBPrimaryKeyConstraint1.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBCatalog dBCatalog0 = new DBCatalog("column: ");
      DBSchema dBSchema0 = new DBSchema("INSERT VALUES", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("INSERT VALUES", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("cRD-", dBPackage0);
      dBPrimaryKeyConstraint1.equals(dBProcedure0);
      SQLUtil.pkSpec(dBPrimaryKeyConstraint1, nameSpec0);
      dBPrimaryKeyConstraint1.toString();
      SQLUtil.normalize("CONSTRAINT \" (\" PRIMARY KEY ()", false);
      SQLUtil.isDDL("rename");
      SQLUtil.substituteMarkers(" (", "INSERT VALUES", dBProcedure0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(" (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format:  (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("INSERT VALUES");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("Mi77082][");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, " (", true, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBPrimaryKeyConstraint0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      dBPrimaryKeyConstraint1.setTable(defaultDBTable0);
      DBCatalog dBCatalog0 = new DBCatalog("column: ");
      DBSchema dBSchema0 = new DBSchema("INSERT VALUES", dBCatalog0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      StringBuffer stringBuffer0 = new StringBuffer();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint2 = new DBPrimaryKeyConstraint(defaultDBTable1, "DATE", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("refere", true, dBPrimaryKeyConstraint2);
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint2, nameSpec0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      String string1 = SQLUtil.renderValue(mockJapaneseDate0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = LogToFile.TEST_SWITCH_LOG_FAIL2;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "[DH-e!(|9$*rM%6}<";
      stringArray0[1] = "lh5m0Op{'ANhK1!'$";
      stringArray0[2] = null;
      stringArray0[3] = "meD!z)";
      stringArray0[4] = "[DH-e!(|9$*rM%6}<";
      stringArray0[5] = " ADD ";
      stringArray0[6] = null;
      stringArray0[7] = " ADD ";
      stringArray0[8] = " ADD ";
      SQLUtil.join((String) null, " ADD ", stringArray0, " ADD ", "drop table", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("?B>HJ5|%j@");
      dBSchema0.getTable("?B>HJ5|%j@");
      String string0 = SQLUtil.normalize("l@$(<nH", true);
      assertEquals("l @ $ (< nH", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLUtil.normalize("Na6%*Ny\"'O", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("y9.{42", defaultDBTable0, 4780, "_ZJ?G@'p&");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("y9.{42", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", (DBSchema) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = ")(hJWw_?I-}2VV\"Xt";
      stringArray0[2] = ")(hJWw_?I-}2VV\"Xt";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ")(hJWw_?I-}2VV\"Xt", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(")(hJWw_?I-}2VV\"Xt", true, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      String string0 = SQLUtil.normalize("y9.{4", true);
      assertEquals("y9. { 4", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLUtil.removeComments("select");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("xscN+JN.BO/v");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "[DH-/!(T9$*rM%6f<";
      stringArray0[1] = "[DH-/!(T9$*rM%6f<";
      stringArray0[2] = "[DH-/!(T9$*rM%6f<";
      stringArray0[3] = "[DH-/!(T9$*rM%6f<";
      stringArray0[4] = "[DH-/!(T9$*rM%6f<";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintStream mockPrintStream0 = new MockPrintStream("drop materialized view0?f1_m9>*[ua)e|lg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      System.setCurrentTimeMillis(0L);
      Boolean boolean1 = SQLUtil.mutatesStructure("[Q8");
      assertTrue(boolean1.equals((Object)boolean0));
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "[Q8";
      stringArray0[1] = "alter sessionalter indexrename";
      stringArray0[2] = "select into";
      stringArray0[3] = "[Q8";
      stringArray0[4] = " REFERENCES ";
      stringArray0[5] = "insert{3v%%z2/j8tymmk]px";
      stringArray0[6] = "UNIQUE ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "UNIQUE ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ([Q8, alter sessionalter indexrename, select into, [Q8,  REFERENCES , insert{3v%%z2/j8tymmk]px, UNIQUE )", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLUtil.isQuery("select into");
      String string0 = SQLUtil.removeComments("/;GkGgT`u");
      assertEquals("/;GkGgT`u", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLUtil.removeComments("[DH-/!(T9$*rM%6f<");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[DH-/!(T9$*rM%6f<");
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("Unknown constraint type: ", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("[DH-/!(T9$*rM%6f<", dBPackage0);
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = " NULL";
      stringArray0[1] = "[DH-/!(T9$*rM%6f<";
      stringArray0[2] = "catalog null";
      stringArray0[3] = "[DH-/!(T9$*rM%6f<";
      stringArray0[4] = "catalog null";
      stringArray0[5] = "Unknown constraint type: ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("[DH-/!(T9$*rM%6f<", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT [DH-/!(T9$*rM%6f< FOREIGN KEY ( NULL, [DH-/!(T9$*rM%6f<, catalog null, [DH-/!(T9$*rM%6f<, catalog null, Unknown constraint type: ) REFERENCES [DH-/!(T9$*rM%6f<( NULL, [DH-/!(T9$*rM%6f<, catalog null, [DH-/!(T9$*rM%6f<, catalog null, Unknown constraint type: )", string1);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELECT MAX(ID) FROM INFORMATION_SCHEMA.LOBS", defaultDBTable0, 46, "call");
      String string2 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CALL", string2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLUtil.isQuery("select");
      String string0 = SQLUtil.removeComments(" WHERE ");
      assertEquals(" WHERE ", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)87;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream1 = new DynamicByteArrayOutputStream(dynamicByteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream1, false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("call", true, "call", "trun");
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec1);
      assertEquals("CONSTRAINT call CHECK trun", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("1z'q", (DBTable) null, 44, "1z'q");
      defaultDBColumn0.equals((Object) null);
      SQLUtil.normalize("1z'q", false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1z 'q'";
      stringArray0[1] = "rename";
      stringArray0[2] = "1z'q";
      stringArray0[3] = "1z 'q'";
      stringArray0[4] = "1z'q";
      stringArray0[5] = "1z 'q'";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLUtil.removeComments("[DH-/!(TE]9$*rM%6f<");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[DH-/!(TE]9$*rM%6f<");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "[DH-/!(TE]9$*rM%6f<";
      stringArray0[1] = "[DH-/!(TE]9$*rM%6f<";
      stringArray0[2] = "[DH-/!(TE]9$*rM%6f<";
      stringArray0[3] = "No ";
      stringArray0[4] = "[DH-/!(TE]9$*rM%6f<";
      stringArray0[5] = "?8:.E.oKO{@N]c";
      stringArray0[6] = "[DH-/!(TE]9$*rM%6f<";
      stringArray0[7] = "[DH-/!(TE]9$*rM%6f<";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "7'3xam", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("c{3emB3UbOg8U:_", false, dBPrimaryKeyConstraint0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("%w.UZn#GG>H`");
      String[] stringArray1 = new String[2];
      stringArray1[0] = "7'3xam";
      stringArray1[1] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable1, stringArray1, defaultDBTable1, stringArray1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 7'3xam PRIMARY KEY ([DH-/!(TE]9$*rM%6f<, [DH-/!(TE]9$*rM%6f<, [DH-/!(TE]9$*rM%6f<, No , [DH-/!(TE]9$*rM%6f<, ?8:.E.oKO{@N]c, [DH-/!(TE]9$*rM%6f<, [DH-/!(TE]9$*rM%6f<)", string0);
      
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec1);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      boolean boolean0 = SQLUtil.isDDL("[DH-/!(TE]9$*rM%6f<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      byte[] byteArray0 = new byte[1];
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      dynamicByteArrayOutputStream0.write((int) (byte)87);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream1 = new DynamicByteArrayOutputStream(dynamicByteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream1, false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String string0 = TypeId.VARCHAR_NAME;
      StringReader stringReader0 = new StringReader("VARCHAR");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0, 2049);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pushbackReader0);
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)87;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream1 = new DynamicByteArrayOutputStream(dynamicByteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, false);
      mockPrintWriter0.println('L');
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string0 = TypeId.VARCHAR_NAME;
      assertEquals("VARCHAR", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      byte[] byteArray0 = new byte[1];
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream1 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(".uwVSBfkaj");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("[($+6k|EAiz;<)Q");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"$+6k|EAiz;<\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setNull(String,int)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = SQLUtil.normalize("rC%#*/$6", false);
      assertEquals("rC % # */ $ 6", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      byte[] byteArray0 = new byte[1];
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cos(double)");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (-1.0E-13);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 1.0E-13", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      byte[] byteArray0 = new byte[1];
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (byte)87, "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.max(48, 297);
      defaultDBColumn0.setSize(integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String string0 = Dependable.PERM;
      String string1 = SQLUtil.removeComments("(3)");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) ":");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      UntypedPropertyMutator untypedPropertyMutator0 = new UntypedPropertyMutator("(3)", false);
      String string2 = SQLUtil.renderValue(untypedPropertyMutator0);
      assertFalse(string2.equals((Object)string1));
  }
}
