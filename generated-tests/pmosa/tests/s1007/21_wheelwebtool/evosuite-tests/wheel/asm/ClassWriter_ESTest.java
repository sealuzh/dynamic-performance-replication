/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 09:17:05 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;
import wheel.asm.Item;
import wheel.asm.MethodWriter;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      // Undeclared exception!
      try { 
        classWriter0.newConst((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1853);
      classWriter0.newUTF8("v8wgNV,&c");
      String string0 = "fA.'(D Pk#6`";
      classWriter0.addUninitializedType("fA.'(D Pk#6`", 0);
      // Undeclared exception!
      try { 
        classWriter0.newConstItem((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4520));
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(15);
      classWriter0.addType("$1");
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem((String) null, (String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 3431);
      classWriter0.getCommonSuperClass("org.apache.commons.io.IOCase", "org.apache.commons.io.IOCase");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(12, 7316);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5);
      int int0 = classWriter0.newField("wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "wheel.asm.ClassWriter");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3200));
      FieldWriter fieldWriter0 = classWriter0.firstField;
      classWriter0.firstField = null;
      classWriter0.newLong((-3200));
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("L", "L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'L.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Double double0 = new Double(0);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(0, "hs>mM", "hs>mM", "hs>mM", double0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassWriter classWriter0 = new ClassWriter(1530);
      classWriter0.visitOuterClass("IX/%HFWP", "IX/%HFWP", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitEnd();
      classWriter0.cr = null;
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-942), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1899));
      classWriter0.newFieldItem("(A5:v7)H", "DDQ,t5<+iZ", "(A5:v7)H");
      classWriter0.newLong(0L);
      Double double0 = new Double(2);
      Double.min((-1.0), (-1.0));
      Double.isFinite((-1899));
      classWriter0.newConst(double0);
      classWriter0.newInteger(0);
      classWriter0.visitOuterClass("(A5:v7)H", "(A5:v7)H", "");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-573));
      classWriter0.newInteger((-573));
      classWriter0.newUTF8("Insensitive");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(46, "c<d8", "a", "c<d8", stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(200);
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      Type type0 = Type.getType(class0);
      type0.getClassName();
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 352;
      ClassWriter classWriter0 = new ClassWriter(352);
      Type type0 = Type.SHORT_TYPE;
      Class<String> class0 = String.class;
      type0.getClassName();
      Type.getType(class0);
      classWriter0.newConstItem(type0);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(352, 352);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 205;
      ClassWriter classWriter0 = new ClassWriter(205);
      classWriter0.invalidFrames = true;
      classWriter0.visitOuterClass("", "mC>?t)", "L\"]->}ttT.[V1");
      classWriter0.thisName = "mC>?t)";
      classWriter0.newFieldItem("", "mC>?t)", "");
      classWriter0.newField("ps'", "ps'", "");
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalAnd(true, true);
      Boolean.getBoolean("_J5wtzZIYM.nb$");
      Boolean.compare(false, false);
      Boolean.logicalOr(true, true);
      classWriter0.newConstItem(boolean0);
      classWriter0.invalidFrames = true;
      classWriter0.threshold = 11;
      classWriter0.visitOuterClass("]rebWG}F0~py./-", "]rebWG}F0~py./-", "]rebWG}F0~py./-");
      classWriter0.visitOuterClass("X5(-", "1nkrDyA8/5,,R*{", "~~i5/hegk0");
      // Undeclared exception!
      try { 
        classWriter0.newClassItem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 4);
      int int0 = classWriter0.newUTF8("org.apache.commons.io.IOCase");
      assertEquals(125, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3168);
      Boolean boolean0 = Boolean.FALSE;
      Item item0 = classWriter0.newConstItem(boolean0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.addType("2|g)0u}Bh!S");
      Type type0 = Type.FLOAT_TYPE;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "", "The list of prefixes must not be null", "+", type0);
      ByteVector byteVector0 = new ByteVector(0);
      byteVector0.putLong(3);
      ByteVector byteVector1 = byteVector0.putInt(9);
      fieldWriter0.put(byteVector1);
      classWriter0.firstField = fieldWriter0;
      classWriter0.newFieldItem("+", "+", "");
      classWriter0.newDouble((-896.614792));
      int int0 = classWriter0.newMethod("", "", "char", false);
      assertEquals(16, int0);
      
      int int1 = classWriter0.newNameType("Exceptions", "");
      assertEquals(18, int1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4520));
      classWriter0.newInteger(43);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-407));
      classWriter0.newInteger((-407));
      classWriter0.firstMethod = null;
      classWriter0.newDouble(0.0);
      classWriter0.newFieldItem("The strings must not be null", "Deprecated", "Deprecated");
      classWriter0.newInteger(0);
      classWriter0.toByteArray();
      classWriter0.toByteArray();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Deprecated";
      stringArray0[1] = "The strings must not be null";
      stringArray0[2] = "Deprecated";
      stringArray0[3] = "The strings must not be null";
      stringArray0[4] = "StackMapTable";
      stringArray0[5] = "Deprecated";
      stringArray0[6] = "Deprecated";
      stringArray0[7] = "StackMapTable";
      classWriter0.visit(0, 10, "Deprecated", "The strings must not be null", "The strings must not be null", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-709));
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "kqP";
      stringArray0[4] = "kqP";
      // Undeclared exception!
      try { 
        classWriter0.visit(47, 47, "kqP", "kqP", (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(220);
      Item item0 = classWriter0.newLong(220);
      FieldWriter fieldWriter0 = classWriter0.firstField;
      classWriter0.firstField = null;
      classWriter0.newUTF8("u7XGhaN KIl");
      classWriter0.newMethodItem("|'V", "|'V", "ZzI\"sRmS", true);
      classWriter0.newNameType("9$byq:cO", "9$byq:cO");
      int int0 = classWriter0.newUTF8("cpTe%B2Id>LX{\"K<i");
      assertEquals(11, int0);
      
      Item item1 = classWriter0.newLong(220);
      assertSame(item1, item0);
      
      Item item2 = classWriter0.newDouble(3);
      assertNotSame(item2, item1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 0;
      ClassWriter classWriter0 = new ClassWriter(0);
      String string0 = "~)|YtUTRGa";
      classWriter0.newFieldItem("pP#;Z", "pP#;Z", "S/AaQvj&^YwA.?8xe ");
      classWriter0.newLong(0L);
      classWriter0.visitSource("", (String) null);
      classWriter0.visitSource("", "S/AaQvj&^YwA.?8xe ");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitSource((String) null, (String) null);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(2705, 33);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-638));
      classWriter0.newUTF8("5Qj");
      classWriter0.visitOuterClass("", (String) null, "5Qj");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte)81;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.addType("");
      classWriter0.newMethodItem("", "", "", false);
      classWriter0.visitOuterClass("", "", "");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(6);
      classWriter0.addType("?T*QJHa");
      ClassWriter classWriter1 = new ClassWriter(1);
      int int0 = classWriter0.addType("I:p<,;m;gvjrw+YT,u");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3057));
      classWriter0.addType("{P/wW`gg");
      classWriter0.visitInnerClass("{P/wW`gg", "{P/wW`gg", "{P/wW`gg", (-907));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1534);
      String string0 = null;
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, (-46));
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1534, 1534);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2212));
      classWriter0.newField("", "", "");
      classWriter0.visitAnnotation("", false);
      classWriter0.addUninitializedType("", (-356));
      classWriter0.visit(4, (-648), "^j{B.6nYWpU~", "", "kU(\"l<fxLYS`1xQ/", (String[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassWriter classWriter0 = new ClassWriter(0);
      ClassWriter classWriter1 = new ClassWriter(7);
      Item[] itemArray0 = new Item[5];
      Item item0 = classWriter0.key2;
      Item item1 = new Item(1, item0);
      itemArray0[0] = item1;
      Item item2 = classWriter0.newFloat((-1033));
      itemArray0[1] = item2;
      Item item3 = classWriter1.key3;
      itemArray0[2] = item3;
      Item item4 = classWriter1.newMethodItem("~4;M0c(U;|?]J@Pytmx", "", "", true);
      itemArray0[3] = item4;
      Item item5 = classWriter1.newFieldItem("d@#js>O2[8e<41z'q{", "K~A>", "K~A>");
      itemArray0[4] = item5;
      classWriter0.typeTable = itemArray0;
      String[] stringArray0 = new String[0];
      classWriter1.visit(2, (-1033), "", "", "RuntimeInvisibleAnnotations", stringArray0);
      classWriter0.newFloat(0.0F);
      classWriter1.visit(0, 256, "Signature", (String) null, "MZx.]U|t<?[", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(11);
      int int0 = Type.BYTE;
      classWriter0.visitOuterClass("$1", "YRWi_Ud:P7n?_u?aI!", (String) null);
      classWriter0.visitSource("$1", "$1");
      int int1 = classWriter0.newField("$1", "RuntimeVisibleAnnotations", "wheel.asm.Type");
      assertEquals(6, int1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2520);
      String[] stringArray0 = new String[0];
      classWriter0.visit(2520, (-3131), "InnerClasses", "O", "oS!94W{", stringArray0);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newFloat((-3131));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(11);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      classWriter0.addType("$1");
      classWriter0.addType("$1");
      Item item0 = classWriter0.newInteger(249);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2336);
      classWriter0.newClassItem("");
      Item item0 = classWriter0.newFloat(2336);
      Attribute attribute0 = new Attribute("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
      classWriter0.visitAttribute(attribute0);
      Item item1 = classWriter0.newInteger(1123);
      assertNotSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      String string0 = "";
      classWriter0.newConst("");
      classWriter0.newConst("");
      classWriter0.newField("", "0BGr8qXxh", "0BGr8qXxh");
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3200));
      classWriter0.getCommonSuperClass("org.apache.commons.io.IOCase", "org.apache.commons.io.IOCase");
      Item item0 = classWriter0.newDouble(0.0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3200));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      classWriter0.visit(384, (-3200), "", "", "", stringArray0);
      Item item0 = classWriter0.newInteger((-3200));
      Item item1 = classWriter0.newInteger((-3200));
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4520));
      classWriter0.newDouble((-4520));
      classWriter0.visitInnerClass("", "", "", 774);
      classWriter0.visitInnerClass("EnclosingMethod", "L/Jw0xw", "L/Jw0xw", 5);
      int int0 = classWriter0.addUninitializedType("", 774);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3200));
      classWriter0.newFloat(0.0F);
      classWriter0.newFloat(0.0F);
      classWriter0.getCommonSuperClass("org.apache.commons.io.IOCase", "org.apache.commons.io.IOCase");
      ClassWriter classWriter1 = new ClassWriter(1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(pipedInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.io.PipedInputStream@34d39a5a
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3178));
      classWriter0.newDouble(0.0);
      classWriter0.newDouble(1995.254393714);
      classWriter0.getCommonSuperClass("org.apache.commons.io.IOCase", "org.apache.commons.io.IOCase");
      classWriter0.newUTF8("?");
      classWriter0.newDouble(0.0);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-2678), 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-823));
      classWriter0.newDouble(0.0);
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      classWriter0.firstMethod = null;
      int int0 = classWriter0.newNameType("", "InnerClasses");
      assertEquals(5, int0);
      
      classWriter0.visitSource("InnerClasses", "InnerClasses");
      classWriter0.addUninitializedType("InnerClasses", 2724);
      int int1 = classWriter0.addUninitializedType("InnerClasses", 2724);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-38));
      classWriter0.newField("wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "wheel.asm.ClassWriter");
      classWriter0.newFieldItem("wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "wheel.asm.ClassWriter");
      String string0 = classWriter0.getCommonSuperClass("wheel.asm.ClassWriter", "wheel.asm.ClassWriter");
      assertEquals("wheel.asm.ClassWriter", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-709));
      classWriter0.newLong((-709));
      ClassWriter classWriter1 = new ClassWriter(1);
      FieldWriter fieldWriter0 = classWriter1.lastField;
      classWriter1.firstField = null;
      String string0 = classWriter0.getCommonSuperClass("wheel.asm.ClassWriter", "org.apache.commons.io.IOCase");
      assertEquals("java/lang/Object", string0);
      
      System.setCurrentTimeMillis(1);
      int int0 = classWriter0.newMethod("wheel.asm.ClassWriter", "java/lang/Object", "java/lang/Object", true);
      assertEquals(7, int0);
      
      classWriter1.getCommonSuperClass("wheel.asm.ClassWriter", "wheel.asm.ClassWriter");
      classWriter0.newMethodItem("wheel.asm.ClassWriter", "java/lang/Object", "java/lang/Object", true);
      int int1 = classWriter1.newConst("wheel.asm.ClassWriter");
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-709));
      classWriter0.newLong((-709));
      Item item0 = classWriter0.key;
      FieldWriter fieldWriter0 = classWriter0.lastField;
      classWriter0.newLong(2);
      classWriter0.getCommonSuperClass("wheel.asm.ClassWriter", "org.apache.commons.io.IOCase");
      System.setCurrentTimeMillis(1);
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.CanWriteFileFilter", "wheel.asm.ClassWriter");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(28, (-234));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }
}
