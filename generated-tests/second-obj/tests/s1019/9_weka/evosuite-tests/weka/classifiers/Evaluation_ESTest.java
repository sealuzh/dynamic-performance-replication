/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:16:28 GMT 2018
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Container;
import java.awt.FileDialog;
import java.awt.event.MouseEvent;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.TreeSet;
import javax.imageio.metadata.IIOMetadataNode;
import javax.swing.JComponent;
import javax.swing.JInternalFrame;
import javax.swing.JTree;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.Document;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.evaluation.output.prediction.Null;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.SGD;
import weka.classifiers.lazy.kstar.KStarConstants;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.MultiClassClassifier;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.pmml.consumer.TreeModel;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.M5P;
import weka.classifiers.trees.REPTree;
import weka.clusterers.SimpleKMeans;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Option;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;
import weka.core.converters.AbstractFileLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.CoverTree;
import weka.core.pmml.MiningSchema;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      String string0 = Evaluation.makeOptionString((Classifier) null, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate("\tOutputs information-theoretic statistics.\n");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      String string0 = DefaultEditorKit.beginLineAction;
      Evaluation evaluation0 = new Evaluation(instances1, costMatrix0);
      try { 
        Evaluation.evaluateModel((Classifier) bayesNet0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.bayes.BayesNet:
         // 
         // -D
         // \tDo not use ADTree data structure
         // 
         // -B <BIF file>
         // \tBIF file to compare with
         // 
         // -Q weka.classifiers.bayes.net.search.SearchAlgorithm
         // \tSearch algorithm
         // 
         // -E weka.classifiers.bayes.net.estimate.SimpleEstimator
         // \tEstimator algorithm
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals((-1), testInstances0.getClassIndex());
      assertNotNull(testInstances0);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01);
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertNotNull(instances0);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      assertEquals("The base classifier to be used.", costSensitiveClassifier0.classifierTipText());
      assertEquals("Sets the directory where cost files are loaded from. This option is used when the costMatrixSource is set to \"On Demand\".", costSensitiveClassifier0.onDemandDirectoryTipText());
      assertEquals(0, costSensitiveClassifier0.graphType());
      assertEquals("Sets the cost matrix explicitly. This matrix is used if the costMatrixSource property is set to \"Supplied\".", costSensitiveClassifier0.costMatrixTipText());
      assertFalse(costSensitiveClassifier0.getDebug());
      assertEquals("A metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", costSensitiveClassifier0.globalInfo());
      assertEquals("Sets whether the minimum expected cost criteria will be used. If this is false, the training data will be reweighted according to the costs assigned to each class. If true, the minimum expected cost criteria will be used.", costSensitiveClassifier0.minimizeExpectedCostTipText());
      assertEquals(1, costSensitiveClassifier0.getSeed());
      assertFalse(costSensitiveClassifier0.getMinimizeExpectedCost());
      assertEquals("The random number seed to be used.", costSensitiveClassifier0.seedTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", costSensitiveClassifier0.debugTipText());
      assertNotNull(costSensitiveClassifier0);
      assertEquals(2, CostSensitiveClassifier.MATRIX_SUPPLIED);
      assertEquals(1, CostSensitiveClassifier.MATRIX_ON_DEMAND);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01);
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1.0, evaluation0.kappa(), 0.01);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01);
      assertEquals(0.0, evaluation0.incorrect(), 0.01);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01);
      assertEquals(0.0, evaluation0.totalCost(), 0.01);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01);
      assertEquals(0.0, evaluation0.correct(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01);
      assertEquals(0.0, evaluation0.numInstances(), 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01);
      assertNotNull(evaluation0);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      
      String string0 = evaluation0.toMatrixString();
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01);
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1.0, evaluation0.kappa(), 0.01);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01);
      assertEquals(0.0, evaluation0.incorrect(), 0.01);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01);
      assertEquals(0.0, evaluation0.totalCost(), 0.01);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01);
      assertEquals(0.0, evaluation0.correct(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01);
      assertEquals(0.0, evaluation0.numInstances(), 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01);
      assertNotNull(string0);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01);
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1.0, evaluation0.kappa(), 0.01);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01);
      assertEquals(0.0, evaluation0.incorrect(), 0.01);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01);
      assertEquals(0.0, evaluation0.totalCost(), 0.01);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01);
      assertEquals(0.0, evaluation0.correct(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01);
      assertEquals(0.0, evaluation0.numInstances(), 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.SFPriorEntropy();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      try { 
        matlabLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.kappa();
      DenseInstance denseInstance0 = new DenseInstance(946.38605871817, (double[]) null);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      technicalInformationHandlerJavadoc0.getRevision();
      evaluation0.equals(technicalInformationHandlerJavadoc0);
      Random.setNextRandom((-831));
      evaluation0.weightedTrueNegativeRate();
      SGD sGD0 = new SGD();
      evaluation0.weightedRecall();
      // Undeclared exception!
      try { 
        evaluation0.recall(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      costMatrix0.toMatlab();
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.kappa();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      DenseInstance denseInstance0 = new DenseInstance((-5015.8), doubleArray0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[4];
      MatlabLoader.main(stringArray0);
      Evaluation.main(stringArray0);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      MouseEvent.getMouseModifiersText(58);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      double double0 = evaluation0.m_SumAbsErr;
      FileSystemHandling.shouldAllThrowIOExceptions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      try { 
        Evaluation.evaluateModel((Classifier) gaussianProcesses0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.kappa();
      DenseInstance denseInstance0 = new DenseInstance(946.38605871817, (double[]) null);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      evaluation0.equals(technicalInformationHandlerJavadoc0);
      Random.setNextRandom((-831));
      evaluation0.weightedTrueNegativeRate();
      SGD sGD0 = new SGD();
      Evaluation.makeOptionString(sGD0, false);
      evaluation0.matthewsCorrelationCoefficient(20);
      double double0 = KStarConstants.INITIAL_STEP;
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      CostMatrix costMatrix1 = new CostMatrix(1);
      costMatrix1.toMatlab();
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.toCumulativeMarginDistributionString();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      MockRandom mockRandom0 = new MockRandom();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      evaluation0.unweightedMacroFmeasure();
      Random.setNextRandom((-2));
      SGD sGD0 = new SGD();
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      try { 
        Evaluation.evaluateModel((Classifier) sGD0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.SGD:
         // 
         // -F
         // \tSet the loss function to minimize. 0 = hinge loss (SVM), 1 = log loss (logistic regression),
         // \t2 = squared loss (regression).
         // \t(default = 0)
         // -L
         // \tThe learning rate. If normalization is
         // \tturned off (as it is automatically for streaming data), then the
         // \tdefault learning rate will need to be reduced (try 0.0001).
         // \t(default = 0.01).
         // -R <double>
         // \tThe lambda regularization constant (default = 0.0001)
         // -E <integer>
         // \tThe number of epochs to perform (batch learning only, default = 500)
         // -N
         // \tDon't normalize the data
         // -M
         // \tDon't replace missing values
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      CostMatrix costMatrix1 = new CostMatrix(1);
      costMatrix1.toMatlab();
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      costSensitiveClassifier0.getCapabilities();
      evaluation0.toCumulativeMarginDistributionString();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      evaluation0.toSummaryString("", true);
      evaluation0.KBMeanInformation();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      MockFileWriter mockFileWriter0 = new MockFileWriter(".m", true);
      costMatrix0.write(mockFileWriter0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.matthewsCorrelationCoefficient(1);
      evaluation0.weightedTrueNegativeRate();
      SGD sGD0 = new SGD();
      Evaluation.makeOptionString(sGD0, true);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)106;
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1), 0.0);
      byteArray0[2] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashSet<FileDialog> hashSet0 = new HashSet<FileDialog>();
      TreeSet<Container> treeSet0 = new TreeSet<Container>(hashSet0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(byteArrayInputStream0);
      converterUtils_DataSource0.nextElement(instances0);
      converterUtils_DataSource0.reset();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, (Instance) null, (byte) (-27));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      costMatrix0.toMatlab();
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.m_SumErr = (double) 2;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 2.0;
      DenseInstance denseInstance0 = new DenseInstance((-10.0), doubleArray0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      evaluation0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      String string0 = JTree.CELL_RENDERER_PROPERTY;
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.kappa();
      DenseInstance denseInstance0 = new DenseInstance((-2), (double[]) null);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Option option0 = new Option("@relation", "cellRenderer", 1, "q:172");
      evaluation0.equals(mockMinguoDate0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) costSensitiveClassifier0, (Instance) denseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      costMatrix0.toMatlab();
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.toCumulativeMarginDistributionString();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      AbstractFileLoader.runFileLoader(matlabLoader0, testInstances0.DEFAULT_WORDS);
      evaluation0.KBRelativeInformation();
      try { 
        matlabLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      zeroR0.toString();
      Evaluation.wekaStaticWrapper(zeroR0, "");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(7);
      evaluation0.KBMeanInformation();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[4];
      MatlabLoader.main(stringArray0);
      CoverTree coverTree0 = new CoverTree();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      MouseEvent.getMouseModifiersText(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.KBInformation();
      evaluation0.addNumericTrainClass(0.0, (-1.7976931348623157E308));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-957.596);
      doubleArray0[1] = (-957.596);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 3.0);
      evaluation0.toSummaryString();
      evaluation0.unweightedMicroFmeasure();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      String string0 = JTree.CELL_RENDERER_PROPERTY;
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      testInstances0.toString();
      evaluation0.kappa();
      DenseInstance denseInstance0 = new DenseInstance(307.0, (double[]) null);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      evaluation1.weightedFalsePositiveRate();
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, 2248.01782);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MatlabLoader.main(stringArray0);
      Evaluation.main(stringArray0);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      int int0 = 83;
      MouseEvent.getMouseModifiersText(83);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString(".arff");
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      SerializedInstancesLoader serializedInstancesLoader1 = new SerializedInstancesLoader();
      try { 
        serializedInstancesLoader1.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SerializedInstancesLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      String string0 = JTree.CELL_RENDERER_PROPERTY;
      DenseInstance denseInstance0 = new DenseInstance(2.0, (double[]) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      DatabaseLoader databaseLoader2 = new DatabaseLoader();
      databaseLoader2.getNextInstance(instances0);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.areaUnderPRC(0);
      evaluation1.matthewsCorrelationCoefficient((-1));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_TotalCoverage = (double) (-1);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3339, (-1), 0, 0, 3339).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      DatabaseLoader databaseLoader2 = new DatabaseLoader();
      Evaluation.getGlobalInfo(gaussianProcesses0);
      evaluation0.SFPriorEntropy();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.toSummaryString();
      evaluation0.rootRelativeSquaredError();
      evaluation0.getClassPriors();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5gttqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 2, (-1123), (-2), 1056).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      evaluation0.kappa();
      DenseInstance denseInstance0 = new DenseInstance(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      HashSet<FileDialog> hashSet0 = new HashSet<FileDialog>();
      ZeroR zeroR0 = new ZeroR();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("@data");
      testInstances0.getOptions();
      iIOMetadataNode0.normalize();
      TreeModel treeModel0 = new TreeModel(iIOMetadataNode0, instances0, (MiningSchema) null);
      evaluation0.weightedFalseNegativeRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double0 = evaluation0.m_ConfLevel;
      Evaluation.makeOptionString(costSensitiveClassifier0, false);
      String string0 = "getC";
      int int0 = 478;
      try { 
        evaluation0.evaluateModelOnce((Classifier) zeroR0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      CostMatrix costMatrix1 = new CostMatrix(1);
      costMatrix1.toMatlab();
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.toCumulativeMarginDistributionString();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      evaluation0.weightedMatthewsCorrelation();
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.weightedAreaUnderROC();
      Random.setNextRandom((-1326));
      NaiveBayes naiveBayes0 = new NaiveBayes();
      try { 
        evaluation0.evaluateModel((Classifier) regressionByDiscretization0, instances0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      evaluation0.kappa();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      AbstractFileLoader.runFileLoader(matlabLoader0, testInstances0.DEFAULT_WORDS);
      try { 
        matlabLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = " ";
      stringArray0[1] = "t}p";
      stringArray0[2] = ".arff";
      stringArray0[3] = "@relation";
      stringArray0[4] = ".arff";
      testInstances0.setOptions(stringArray0);
      DenseInstance denseInstance0 = new DenseInstance(946.38605871817, (double[]) null);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      evaluation0.equals(technicalInformationHandlerJavadoc0);
      evaluation0.weightedTrueNegativeRate();
      SGD sGD0 = new SGD();
      Evaluation.makeOptionString(sGD0, false);
      Evaluation.makeOptionString(sGD0, true);
      evaluation0.SFMeanEntropyGain();
      evaluation0.weightedPrecision();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation0 = new Evaluation(instances0);
      costMatrix0.toMatlab();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[0.0 1.0; 1.0 0.0]");
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation evaluation1 = new Evaluation(instances1, costMatrix0);
      evaluation1.addNumericTrainClass((-2), 2);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-123);
      String string0 = JSONLoader.FILE_EXTENSION_COMPRESSED;
      instances0.containsAll(instances1);
      costMatrix0.toMatlab();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.toCumulativeMarginDistributionString();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      Evaluation evaluation3 = new Evaluation(instances0, costMatrix0);
      evaluation3.avgCost();
      evaluation0.weightedFalsePositiveRate();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)60;
      // Undeclared exception!
      try { 
        evaluation2.updateNumericScores(doubleArray0, doubleArray0, Double.NaN);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[4];
      MatlabLoader.main(stringArray0);
      Evaluation.main(stringArray0);
      CoverTree coverTree0 = new CoverTree();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      MouseEvent.getMouseModifiersText(58);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling.shouldAllThrowIOExceptions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setWordSeparators("[R$G2wviV;l>0qU");
      Null null0 = new Null();
      evaluation0.equals(null0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Random.setNextRandom((-3718));
      evaluation0.weightedTrueNegativeRate();
      evaluation0.SFMeanEntropyGain();
      evaluation0.toMatrixString();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.addNumericTrainClass(58, (-802.0164));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      String string0 = JTree.CELL_RENDERER_PROPERTY;
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.kappa();
      DenseInstance denseInstance0 = new DenseInstance((-2), (double[]) null);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Option option0 = new Option("", "-m <name of file with cost matrix>\n", (-1), " ");
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.equals(evaluation0);
      try { 
        evaluation1.evaluationForSingleInstance((Classifier) costSensitiveClassifier0, (Instance) denseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      String string0 = JTree.CELL_RENDERER_PROPERTY;
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.kappa();
      DenseInstance denseInstance0 = new DenseInstance((-2), (double[]) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'f';
      charArray0[1] = '2';
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = '5';
      charArray0[5] = 'G';
      evaluation1.num2ShortID(1, charArray0, 498);
      evaluation1.addNumericTrainClass(3487.1931166, (-2129.136781236336));
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, (-2129.136781236336));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      Evaluation.makeOptionString((Classifier) null, true);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      DenseInstance denseInstance0 = new DenseInstance((-1), (double[]) null);
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      int int0 = 1691;
      NaiveBayes naiveBayes0 = new NaiveBayes();
      evaluation0.weightedTrueNegativeRate();
      try { 
        evaluation0.evaluateModel((Classifier) naiveBayes0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      try { 
        evaluation0.toClassDetailsString("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      MouseEvent.getMouseModifiersText(1);
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setClassIndex(2);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance((-1), doubleArray0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      evaluation0.equals(mockJapaneseDate0);
      Random.setNextRandom(1539);
      double double0 = evaluation0.m_ClassPriorsSum;
      SGD sGD0 = new SGD();
      Evaluation.makeOptionString(costSensitiveClassifier0, true);
      evaluation0.matthewsCorrelationCoefficient((-2));
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, denseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setOptions");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.kappa();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[3] = (-2.0);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 946.38605871817;
      doubleArray0[6] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance(1.0, doubleArray0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      evaluation0.equals("");
      Random.setNextRandom((-1135193206));
      double double0 = evaluation0.m_ClassPriorsSum;
      evaluation0.matthewsCorrelationCoefficient(841);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, denseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      String string0 = "a-e/LyWIes=5g!tqI";
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      String string1 = XML.TAG_ATTRIBUTES;
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Random.setNextRandom(1691);
      NaiveBayes naiveBayes0 = new NaiveBayes();
      evaluation0.weightedTrueNegativeRate();
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.evaluateModel((Classifier) regressionByDiscretization0, instances0, objectArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setSeed(500);
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5gttqI");
      ZeroR zeroR0 = new ZeroR();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("\nIteration History...");
      testInstances0.getOptions();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode((String) null);
      TreeModel treeModel0 = new TreeModel(iIOMetadataNode1, instances0, (MiningSchema) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double0 = evaluation0.m_ConfLevel;
      REPTree rEPTree0 = new REPTree();
      Evaluation.makeOptionString(rEPTree0, true);
      try { 
        Evaluation.handleCostOption("a-e/LyWIes=5gttqI", 500);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".arff";
      stringArray0[1] = "olv";
      stringArray0[2] = "F)glMU9";
      stringArray0[3] = ".arff";
      stringArray0[4] = "olv";
      stringArray0[5] = "@data";
      stringArray0[6] = "@data";
      MockRandom mockRandom0 = new MockRandom();
      instances0.resample(mockRandom0);
      try { 
        evaluation0.crossValidateModel("olv", instances0, (-3232), stringArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: olv
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.kappa();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      M5P m5P0 = new M5P();
      Evaluation.getGlobalInfo(m5P0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce(58.0, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 58
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      MockFileWriter mockFileWriter0 = new MockFileWriter(" ", true);
      double[] doubleArray1 = new double[1];
      ZeroR zeroR0 = new ZeroR();
      MatlabLoader matlabLoader1 = new MatlabLoader();
      DenseInstance denseInstance1 = new DenseInstance(6);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      evaluation0.toMatrixString();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.SFMeanPriorEntropy();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      int int0 = 1056;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 2, (-1123), (-2), 1056).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.kappa();
      DenseInstance denseInstance0 = new DenseInstance(2);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      HashSet<FileDialog> hashSet0 = new HashSet<FileDialog>();
      ZeroR zeroR0 = new ZeroR();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      TreeModel treeModel0 = new TreeModel(iIOMetadataNode0, instances0, (MiningSchema) null);
      Evaluation.getGlobalInfo(treeModel0);
      evaluation0.weightedFalseNegativeRate();
      double double0 = evaluation0.m_ConfLevel;
      String string0 = XML.DTD_ZERO_OR_MORE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":\n\n");
      evaluation0.kappa();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      try { 
        serializedInstancesLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SerializedInstancesLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setOptions");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-1);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.693147181, doubleArray0);
      evaluation0.unweightedMicroFmeasure();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        gaussianProcesses0.predictIntervals(binarySparseInstance0, 0.95);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5gttqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 2, (-1123), (-2), 1056).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.kappa();
      DenseInstance denseInstance0 = new DenseInstance(2);
      SGD sGD0 = new SGD();
      sGD0.getOptions();
      Evaluation.makeOptionString(sGD0, false);
      try { 
        evaluation0.evaluateModelOnce(1.0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.kappa();
      DenseInstance denseInstance0 = new DenseInstance(946.38605871817, (double[]) null);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      evaluation0.equals(technicalInformationHandlerJavadoc0);
      Random.setNextRandom((-831));
      evaluation0.weightedTrueNegativeRate();
      SGD sGD0 = new SGD();
      Evaluation.makeOptionString(sGD0, false);
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      CostMatrix costMatrix1 = new CostMatrix(1);
      costMatrix1.toMatlab();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      FileSystemHandling.shouldAllThrowIOExceptions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      testInstances0.setWordSeparators("6");
      Random.setNextRandom((-3));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.SFMeanPriorEntropy();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      costMatrix0.toMatlab();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.addNumericTrainClass(1, (-1));
      HashSet<FileDialog> hashSet0 = new HashSet<FileDialog>();
      TreeSet<Container> treeSet0 = new TreeSet<Container>(hashSet0);
      JInternalFrame jInternalFrame0 = new JInternalFrame("weka.attributeSelection.PrincipalComponents", false, true, false);
      Container container0 = jInternalFrame0.getContentPane();
      treeSet0.lower(container0);
      testInstances0.toString();
      instances0.containsAll(treeSet0);
      String string0 = Document.TitleProperty;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      String[] stringArray0 = testInstances0.getOptions();
      TreeModel treeModel0 = new TreeModel(iIOMetadataNode0, instances0, (MiningSchema) null);
      evaluation0.weightedFalseNegativeRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double0 = evaluation0.m_ConfLevel;
      String string1 = XML.DTD_ZERO_OR_MORE;
      evaluation0.addNumericTrainClass(0.95, Double.NaN);
      evaluation0.relativeAbsoluteError();
      evaluation0.toMatrixString();
      evaluation0.meanAbsoluteError();
      Evaluation.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.kappa();
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-1);
      doubleArray0[4] = 1.0;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.totalCost();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5gttqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 2, (-1123), (-2), 1056).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      costSensitiveClassifier0.listOptions();
      evaluation0.kappa();
      DenseInstance denseInstance0 = new DenseInstance(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      ZeroR zeroR0 = new ZeroR();
      evaluation0.toCumulativeMarginDistributionString();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.errorRate();
      Double double0 = new Double(Double.NaN);
      Logistic logistic0 = new Logistic();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      evaluation0.correct();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5gttqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 2, (-1123), (-2), 1056).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Logistic logistic0 = new Logistic();
      try { 
        evaluation0.crossValidateModel((Classifier) regressionByDiscretization0, instances1, 23, (java.util.Random) null, (Object[]) regressionByDiscretization0.TAGS_ESTIMATOR);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      CostMatrix costMatrix1 = new CostMatrix(1);
      costMatrix1.toMatlab();
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.toCumulativeMarginDistributionString();
      costSensitiveClassifier0.getCostMatrixSource();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      MockRandom mockRandom0 = new MockRandom();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.toSummaryString();
      evaluation0.rootRelativeSquaredError();
      evaluation0.getClassPriors();
      evaluation0.SFMeanEntropyGain();
      evaluation0.relativeAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      costMatrix0.toMatlab();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.addNumericTrainClass(1, (-1));
      HashSet<FileDialog> hashSet0 = new HashSet<FileDialog>();
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^:EAU");
      evaluation1.kappa();
      DenseInstance denseInstance0 = new DenseInstance(120);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      HashSet<FileDialog> hashSet1 = new HashSet<FileDialog>();
      ZeroR zeroR0 = new ZeroR();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      testInstances0.getOptions();
      TreeModel treeModel0 = new TreeModel(iIOMetadataNode0, instances0, (MiningSchema) null);
      evaluation1.weightedFalseNegativeRate();
      double double0 = evaluation0.m_ConfLevel;
      String string0 = XML.DTD_ZERO_OR_MORE;
      evaluation1.addNumericTrainClass(928.27, (-1.0));
      evaluation1.relativeAbsoluteError();
      evaluation1.toMatrixString();
      evaluation0.meanAbsoluteError();
      evaluation0.pctIncorrect();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.toSummaryString(".bsi", true);
      evaluation0.KBMeanInformation();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      MockFileWriter mockFileWriter0 = new MockFileWriter(" ", true);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double[] doubleArray0 = new double[1];
      evaluation0.getDiscardPredictions();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.pctUnclassified();
      evaluation0.SFPriorEntropy();
      evaluation0.incorrect();
      // Undeclared exception!
      try { 
        evaluation0.precision(464);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 464
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[4];
      MatlabLoader.main(stringArray0);
      Evaluation.main(stringArray0);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      MouseEvent.getMouseModifiersText(58);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      double double0 = evaluation0.m_SumAbsErr;
      FileSystemHandling.shouldAllThrowIOExceptions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      Random.setNextRandom(1);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      SelectedTag selectedTag0 = wrapperSubsetEval0.getEvaluationMeasure();
      gaussianProcesses0.setFilterType(selectedTag0);
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      DatabaseLoader databaseLoader2 = new DatabaseLoader();
      databaseLoader1.getNextInstance(instances0);
      costMatrix0.toMatlab();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.useNoPriors();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.setDiscardPredictions(true);
      evaluation0.relativeAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      costMatrix0.toMatlab();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5,/d");
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.addNumericTrainClass(1, (-1));
      HashSet<FileDialog> hashSet0 = new HashSet<FileDialog>();
      TreeSet<Container> treeSet0 = new TreeSet<Container>(hashSet0);
      testInstances0.toString();
      instances0.containsAll(treeSet0);
      costMatrix0.toMatlab();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.useNoPriors();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.setDiscardPredictions(false);
      evaluation0.priorEntropy();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      costMatrix0.toMatlab();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.addNumericTrainClass(1, (-1));
      HashSet<FileDialog> hashSet0 = new HashSet<FileDialog>();
      TreeSet<Container> treeSet0 = new TreeSet<Container>(hashSet0);
      JInternalFrame jInternalFrame0 = new JInternalFrame("weka.attributeSelection.PrincipalComponents", false, true, false);
      Container container0 = jInternalFrame0.getContentPane();
      treeSet0.lower(container0);
      testInstances0.toString();
      instances0.containsAll(treeSet0);
      String string0 = Document.TitleProperty;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2;
      evaluation1.unweightedMacroFmeasure();
      DenseInstance denseInstance0 = new DenseInstance(0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      evaluation2.toMatrixString();
      evaluation1.meanPriorAbsoluteError();
      evaluation2.SFMeanPriorEntropy();
      evaluation1.toSummaryString(true);
      evaluation0.pctCorrect();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      MockRandom mockRandom0 = new MockRandom();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      classificationViaRegression0.buildClassifier(instances0);
      classificationViaRegression0.listOptions();
      System.setCurrentTimeMillis((-1L));
      Evaluation.evaluateModel((Classifier) costSensitiveClassifier0, testInstances0.DEFAULT_WORDS);
      C45Loader c45Loader0 = new C45Loader();
      Instances instances1 = c45Loader0.getStructure();
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      BallTree ballTree0 = new BallTree(instances1);
      Instance instance0 = c45Loader0.getNextInstance(instances0);
      ballTree0.nearestNeighbour(instance0);
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      AbstractFileLoader.runFileLoader(serializedInstancesLoader0, testInstances0.DEFAULT_WORDS);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      matlabLoader0.getStructure();
      Evaluation evaluation1 = new Evaluation(instances1, costMatrix0);
      String string0 = "graph";
      evaluation1.toMatrixString(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      costMatrix0.toMatlab();
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HashSet<FileDialog> hashSet0 = new HashSet<FileDialog>();
      TreeSet<Container> treeSet0 = new TreeSet<Container>(hashSet0);
      testInstances0.toString();
      instances0.containsAll(treeSet0);
      costMatrix0.toMatlab();
      String string0 = JComponent.TOOL_TIP_TEXT_KEY;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.setPriors(instances0);
      evaluation0.confusionMatrix();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String[] stringArray0 = new String[4];
      MatlabLoader.main(stringArray0);
      Evaluation.main(stringArray0);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MouseEvent.getMouseModifiersText(58);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Incorrect;
      double double1 = evaluation0.m_SumAbsErr;
      boolean boolean0 = evaluation0.m_NoPriors;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      boolean boolean1 = evaluation0.m_CoverageStatisticsAvailable;
      Random.setNextRandom(1);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      SelectedTag selectedTag0 = wrapperSubsetEval0.getEvaluationMeasure();
      gaussianProcesses0.setFilterType(selectedTag0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      evaluation0.unweightedMacroFmeasure();
      Random.setNextRandom(12);
      SGD sGD0 = new SGD();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      evaluation1.sizeOfPredictedRegions();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5g!tqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MouseEvent.getMouseModifiersText(1);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.weightedAreaUnderROC();
      testInstances0.setWordSeparators("@relation");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances1);
      double double0 = evaluation0.m_Correct;
      FileSystemHandling.shouldAllThrowIOExceptions();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      LinkedList<SparseInstance> linkedList0 = new LinkedList<SparseInstance>();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 2228.733241;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) 1;
      char[] charArray0 = new char[4];
      charArray0[0] = '5';
      doubleArray0[0] = (double) '3';
      charArray0[2] = 'n';
      charArray0[3] = '3';
      evaluation0.num2ShortID((-2951), charArray0, 0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setSeed(500);
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5gttqI");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFMeanEntropyGain();
      evaluation0.toMatrixString();
      Random.setNextRandom((-224));
      SGD sGD0 = new SGD();
      Evaluation evaluation2 = new Evaluation(instances1);
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation2.unweightedMacroFmeasure();
      evaluation3.sizeOfPredictedRegions();
      evaluation0.numTrueNegatives(2367);
      evaluation2.toClassDetailsString();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setSeed(500);
      Instances instances0 = testInstances0.generate("a-e/LyWIes=5gttqI");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      LinkedList<SparseInstance> linkedList0 = new LinkedList<SparseInstance>();
      Evaluation.handleCostOption((String) null, 2);
  }
}
