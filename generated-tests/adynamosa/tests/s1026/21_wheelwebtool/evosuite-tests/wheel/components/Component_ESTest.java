/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 17:36:03 GMT 2019
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlSerializer;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RenderableComponent;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.param("WFZhh<^< df+7ru<k", (CharSequence) null);
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, (String) null, (String) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      hidden0.internalRenderHints = list0;
      hidden0._clear();
      assertTrue(hidden0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Text text0 = new Text(errorPage0, errorPage0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "h6";
      // Undeclared exception!
      try { 
        text0.area(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:WL;MJgFX2K76Y");
      xmlEntityRef0._getRenderHints();
      assertEquals("~:WL;MJgFX2K76Y", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._clear();
      assertFalse(errorPage0._isBuilt());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("|e%tLR7q[SxIUXg{Jk");
      Form form0 = new Form(errorPage0, "j_M1lNOXKB~-O`", actionExpression0);
      TextArea textArea0 = new TextArea(form0, "S\"8S6d;37S.)7M~'`", "INVOKEINTERFACE org/mvel/integration/VariableResolverFactory.getVariableResolver");
      // Undeclared exception!
      try { 
        textArea0.textarea("#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Float float0 = new Float(197.2436F);
      Component component0 = errorPage0.s((Object) float0);
      Component component1 = errorPage0.text(component0);
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "java.lang.Stig@0000000008", "java.lang.Stig@0000000008");
      Hidden hidden0 = new Hidden(radio0, (String) null, "h2");
      TableBlock tableBlock0 = new TableBlock(hidden0, "java.lang.Stig@0000000008");
      Component component0 = tableBlock0.sup((Object) radio0);
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strike();
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "Text_1");
      Component component0 = errorPage0.a((Object) table0);
      MockDate mockDate0 = new MockDate();
      Component component1 = component0.small((Object) mockDate0);
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.small();
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.samp((Object) "No corresponding component found for end expression '");
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ErrorPage errorPage1 = (ErrorPage)errorPage0.requestFocus();
      assertEquals("div", errorPage1.defaultTagName());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Image image0 = new Image(errorPage0, "The skrings must no benull", "The skrings must no benull");
      Table table0 = new Table(image0, "~:WL;MJgFX2K76Y");
      TableBlock tableBlock0 = table0.tbody();
      Component component0 = tableBlock0.renderHint("~:WL;MJgFX2K76Y");
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.strong();
      FileInput fileInput0 = new FileInput(errorPage0, "gbA#", "gbA#");
      Component component0 = errorPage0.remove((Component) fileInput0);
      assertFalse(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("lKvJkCY");
      Form form0 = new Form(errorPage0, "Th component can be added only to a TableRow.", actionExpression0);
      Text text0 = (Text)form0.rawText(form0);
      assertTrue(text0._isGeneratedId());
      assertTrue(text0.isCdata());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.p();
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.noframes();
      assertTrue(component0._isGeneratedId());
      assertEquals("Block_2", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Text text0 = new Text(errorPage0, object0);
      Table table0 = new Table(text0, "h6");
      TableRow tableRow0 = table0.tr();
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(table0, ">", "FH4|", (ISelectModel) null, (ElExpression) null);
      Component component0 = tableRow0.legend((Object) checkboxGroup0);
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      Component component0 = tableBlock0.legend();
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.kbd((Object) null);
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.q();
      Text text0 = (Text)component0.htmlText(errorPage0);
      assertTrue(text0._isGeneratedId());
      assertTrue(text0.isHtml());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.hr();
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h6();
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ElExpression elExpression0 = new ElExpression("");
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h5((Object) elExpression0);
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h4();
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      Component component0 = errorPage0.h3((Object) dynamicSelectModel0);
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.getParent();
      assertNull(component0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("small");
      TextArea textArea0 = new TextArea(xmlEntityRef0, "small", "java.lang.String@0000000003");
      Component component0 = textArea0.getParent();
      assertEquals("small", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "2\"<YS-4Fr:K,");
      Checkbox checkbox0 = new Checkbox(block0, "2\"<YS-4Fr:K,", "2\"<YS-4Fr:K,");
      Table table0 = new Table(checkbox0, "java.lang.Stig@0000000008");
      table0.tr();
      Map<String, Component> map0 = errorPage0.getComponents();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("body");
      String string0 = xmlEntityRef0.getComponentId();
      assertEquals("body", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      Map<String, String> map0 = xmlEntityRef0.getAttributes();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.fieldset();
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.entity(" ");
      assertEquals(" ", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "Failed to initialize SimpleDateFormat with pattern '", "}");
      Table table0 = new Table(textArea0, "wheel_ErrorPage");
      Component component0 = table0.end("wheel_ErrorPage");
      assertNull(component0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.q();
      Table table0 = new Table(component0, "_8SWcqQ{?");
      Table table1 = new Table(table0, "+=");
      Component component1 = table1.end("_8SWcqQ{?");
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = "java.lang.Stig@0000000008";
      Radio radio0 = new Radio(errorPage0, "java.lang.Stig@0000000008", (String) null);
      Checkbox checkbox0 = new Checkbox(radio0, "E{", string0);
      Component component0 = checkbox0.end();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.div();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      Component component0 = errorPage0.dfn((Object) block0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "2\"<YS-4Fr:K,");
      Checkbox checkbox0 = new Checkbox(block0, "2\"<YS-4Fr:K,", "2\"<YS-4Fr:K,");
      Table table0 = new Table(checkbox0, "java.lang.Stig@0000000008");
      table0.create();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "2\"<YS-4Fr:K,");
      Checkbox checkbox0 = new Checkbox(block0, "Oa=!Qgz$}POv;!cf6$", "Oa=!Qgz$}POv;!cf6$");
      NumberInput numberInput0 = new NumberInput(errorPage0, "DiOLrN,)(57j", "Oa=!Qgz$}POv;!cf6$");
      Link link0 = new Link(checkbox0, numberInput0);
      Component component0 = link0.code();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.cite((Object) "j09$LtO#*}0");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      TableRow tableRow0 = tableBlock0.tr();
      Component component0 = tableRow0.cite();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, (Object) null);
      Table table0 = new Table(link0, "org.mvel.conversion.BooleanCH$1");
      TableBlock tableBlock0 = table0.tfoot();
      Component component0 = tableBlock0.big();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.b();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "java.lang.Stig@0000000008", (String) null);
      Table table0 = new Table(radio0, "java.lang.Stig@0000000008");
      TableBlock tableBlock0 = table0.tbody();
      Any any0 = tableBlock0.col();
      String[] stringArray0 = new String[2];
      Component component0 = any0.attributes(stringArray0);
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "zI,~bQ${vy");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(tableBlock0, "zI,~bQ${vy", (String) null, stringSelectModel0, "zI,~bQ${vy");
      Component component0 = select0.attribute("zI,~bQ${vy", "`5kf7KG:{");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.address((Object) "Text_1");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "aY!C%");
      Object object0 = new Object();
      Text text0 = new Text(tableBlock0, object0);
      Component component0 = text0.addInternalRenderHint("java.lang.String@0000000016");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      TextArea textArea0 = new TextArea(tableBlock0, "yes", "/:vJkCY");
      Text text0 = new Text(textArea0, tableBlock0);
      Component component0 = errorPage0.addFirst(text0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "Tex\"t_1");
      TableBlock tableBlock0 = table0.tfoot();
      ActionExpression actionExpression0 = new ActionExpression((String) null);
      Component component0 = tableBlock0.actionBinding(actionExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Text text0 = new Text(errorPage0, errorPage0);
      Component component0 = text0.actionBinding("bF]zc7y:F=+e?B4s");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      Component component0 = tableBlock0.acronym((Object) "\"D}$v");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("u~U");
      xmlEntityRef0._isGeneratedId();
      assertEquals("u~U", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ins();
      Byte byte0 = new Byte((byte)11);
      component0.u((Object) byte0);
      List<RenderableComponent> list0 = component0._getRenderableChildren();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.wBlock((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.var((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "JFdt", "Z.w5");
      Table table0 = new Table(textArea0, "Z.w5");
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Component component0 = table0.var((Object) charBuffer0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        xmlEntityRef0.u(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.tt((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.title((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.title("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(";LyPGK}yAPc0g");
      // Undeclared exception!
      try { 
        xmlEntityRef0.textarea((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.textarea("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "blockquote", "wheel_rrrae");
      // Undeclared exception!
      try { 
        textInput0.textInput((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Xb>]Hl");
      // Undeclared exception!
      try { 
        xmlEntityRef0.textInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.text((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.submit((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.submit("Pt8#4/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.sub((Object) null);
      Component component1 = component0.ul();
      assertEquals("Block_1", component1.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object object0 = new Object();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.strong(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("F/F5*");
      DynamicSelectModel dynamicSelectModel0 = xmlEntityRef0.selectModel();
      Component component0 = errorPage0.strike((Object) dynamicSelectModel0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("F/F5*", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Boolean");
      // Undeclared exception!
      try { 
        xmlEntityRef0.span((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("]8v6Jm\" ?n");
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        xmlEntityRef0.small((Object) charBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("=j5q4ZYe1");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      // Undeclared exception!
      try { 
        xmlEntityRef0.select("D\u0005$mWln8{", stringSelectModel0, (CharSequence) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        errorPage0.select((String) null, dynamicSelectModel0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.abbr();
      // Undeclared exception!
      try { 
        component0.select("~1se^OeMnD@OY*", (ISelectModel) null, "~1se^OeMnD@OY*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("convertable_to");
      // Undeclared exception!
      try { 
        xmlEntityRef0.reset((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0-Bgq7ItW4Q+");
      // Undeclared exception!
      try { 
        xmlEntityRef0.reset("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.renderHint((CharSequence) null);
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      Component component0 = xmlEntityRef0.renderHint("");
      assertEquals("wheel_components_XmlEntityRef", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.wBlock("iframe");
      Component component1 = errorPage0.code((Object) "u~RAr5brA");
      // Undeclared exception!
      try { 
        component1.remove(component0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.remove((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Could not find component with id '");
      ElExpression elExpression0 = new ElExpression("ZHhN=HKjxlb");
      // Undeclared exception!
      try { 
        xmlEntityRef0.radioGroup((String) null, (ISelectModel) null, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      DynamicSelectModel dynamicSelectModel0 = xmlEntityRef0.selectModel();
      ElExpression elExpression0 = new ElExpression("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.radioGroup("", dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("LST.}b_))r");
      // Undeclared exception!
      try { 
        xmlEntityRef0.radio((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.q((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "Q%rT1seOeMnD'OY*");
      Object object0 = new Object();
      Component component0 = block0.q(object0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.pre((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, (String) null);
      Block block0 = table0.placeholder((String) null);
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.passwordInput((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.passwordInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.param((CharSequence) null, (CharSequence) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000008");
      // Undeclared exception!
      try { 
        xmlEntityRef0.numberInput("txsmU`Dn", (CharSequence) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        xmlEntityRef0.numberInput(".values()", (CharSequence) charBuffer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("u~U");
      // Undeclared exception!
      try { 
        xmlEntityRef0.numberInput((String) null, (CharSequence) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.numberInput("", (CharSequence) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.numberInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(" failed.");
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        xmlEntityRef0.multiSelect("[I", dynamicSelectModel0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Boolean");
      // Undeclared exception!
      try { 
        xmlEntityRef0.multiSelect("Boolean", (ISelectModel) null, "Boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("tandalone");
      // Undeclared exception!
      try { 
        xmlEntityRef0.multiSelect("", (ISelectModel) null, "java.laig.SEring,00r0000C0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("rea");
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        xmlEntityRef0.message((String) null, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("B` MQiiSMsc1IhO");
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        xmlEntityRef0.message("", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.message((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.li((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("CHECKCAST [Z");
      // Undeclared exception!
      try { 
        xmlEntityRef0.legend((Object) dynamicSelectModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("!");
      // Undeclared exception!
      try { 
        xmlEntityRef0.label((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Form form0 = new Form("~V");
      // Undeclared exception!
      try { 
        form0.kbd((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("xx");
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        xmlEntityRef0.ins((Object) charBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("u~U");
      // Undeclared exception!
      try { 
        xmlEntityRef0.img("g<@cRt A#_zyi{u)", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.img((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.img("", (String) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(" on the page.");
      // Undeclared exception!
      try { 
        xmlEntityRef0.imageSubmit((String) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("]kE)'J z7\",z{&&2<");
      // Undeclared exception!
      try { 
        xmlEntityRef0.imageSubmit(">>>", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, (String) null);
      // Undeclared exception!
      try { 
        tableBlock0.id((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.i((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.htmlText((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("=j5q4ZYe1");
      // Undeclared exception!
      try { 
        xmlEntityRef0.hidden((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.hidden("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("}@T0d*gm");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h6((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      Component component0 = errorPage0.ol();
      ActionExpression actionExpression0 = new ActionExpression("M7<6/Z}1YaC\".o");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) dynamicSelectModel0;
      Component component1 = component0.form(" ...>>) (position: ", actionExpression0);
      component1.h6(objectArray0[0]);
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.wBlock("iframe");
      component0.h4((Object) null);
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.h2((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id 'null'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("?TGDL");
      // Undeclared exception!
      try { 
        xmlEntityRef0.frame((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("::?%;bM>1KmIB.j");
      // Undeclared exception!
      try { 
        xmlEntityRef0.frame("java.lang.Object@0000000005");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      ActionExpression actionExpression0 = new ActionExpression("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.form(",fT$<&y&{[1[F", actionExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ol();
      ActionExpression actionExpression0 = new ActionExpression("M7<6/Z}1YaC\".o");
      actionExpression0.submitForm(false);
      component0.form(" ...>>) (position: ", actionExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~rT1seOeMnD'OY*");
      ActionExpression actionExpression0 = new ActionExpression("Tbody component can be added only to a Table.");
      ActionExpression actionExpression1 = actionExpression0.submissible(true);
      // Undeclared exception!
      try { 
        xmlEntityRef0.form("~rT1seOeMnD'OY*", actionExpression1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(";LyPCGK}yAP$Ic0g");
      ActionExpression actionExpression0 = new ActionExpression((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.form("", actionExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000008");
      // Undeclared exception!
      try { 
        xmlEntityRef0.form("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("YsC1Mu=2");
      ElExpression elExpression0 = new ElExpression("");
      List<Component> list0 = xmlEntityRef0.findAll(elExpression0);
      assertNotNull(list0);
      assertEquals("YsC1Mu=2", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("e~]H<{>!=[^3s0+=");
      // Undeclared exception!
      try { 
        xmlEntityRef0.find((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.find("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      ElExpression elExpression0 = new ElExpression((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.fileInput("t>rs+_J", elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.fileInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("acronym");
      String string0 = xmlEntityRef0.eval((Object) null);
      assertEquals("acronym", xmlEntityRef0.getComponentId());
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("::?%;bM>1KmIB.j");
      Object object0 = new Object();
      xmlEntityRef0.eval(object0);
      assertEquals("::?%;bM>1KmIB.j", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.entity((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.encode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.encode("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      xmlEntityRef0.el((String) null);
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("acronym");
      xmlEntityRef0.el("acronym");
      assertEquals("acronym", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      xmlEntityRef0.el("");
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("|0I%!uZU");
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        xmlEntityRef0.dt((Object) dynamicSelectModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.dfn((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("By-");
      // Undeclared exception!
      try { 
        xmlEntityRef0.del((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("3##ylyJ+|WH<j");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        xmlEntityRef0.del(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("KQPOSTfkF9P`+U?");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dateInput("6QrD%SRvx0X;Ew,y5", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dateInput((String) null, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("!");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dateInput((String) null, "'.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dateInput("", "syntax error or incomptable types (left=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("non-digit in number value");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dateFormat((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize SimpleDateFormat with pattern 'null'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Could not evaluate expression ");
      // Undeclared exception!
      try { 
        xmlEntityRef0.code((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      Component component0 = xmlEntityRef0.clasS((CharSequence) null);
      assertEquals("wheel_components_XmlEntityRef", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("script");
      Component component0 = xmlEntityRef0.clasS("script");
      assertEquals("script", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.cite((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        block0.checkboxGroup("hr", dynamicSelectModel0, (ElExpression) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "No corresponding component found for end expression '", ";U){?");
      ElExpression elExpression0 = new ElExpression("");
      // Undeclared exception!
      try { 
        radio0.checkboxGroup("No corresponding component found for end expression '", (ISelectModel) null, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000007");
      ElExpression elExpression0 = new ElExpression("java.lang.String@0000000007");
      // Undeclared exception!
      try { 
        xmlEntityRef0.checkboxGroup((String) null, dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("NEW java/lang/Integer");
      // Undeclared exception!
      try { 
        xmlEntityRef0.checkbox((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.checkbox("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.buttonInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("acronym");
      // Undeclared exception!
      try { 
        xmlEntityRef0.big((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.big(object0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.bdo((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Component component0 = tableBlock0.bdo("U");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(">D_9G_fE#&vB#yG]<C]");
      // Undeclared exception!
      try { 
        xmlEntityRef0.base((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("tandalone");
      Component component0 = xmlEntityRef0.attribute("", (CharSequence) null);
      assertEquals("tandalone", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("j:PnLh{u]^<I0S;y");
      CharBuffer charBuffer0 = CharBuffer.allocate(44);
      Component component0 = xmlEntityRef0.attribute("A?\";i 1s8KVdS=Rf", charBuffer0);
      assertEquals("j:PnLh{u]^<I0S;y", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("script");
      Component component0 = xmlEntityRef0.attribute((String) null, "script");
      assertEquals("script", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      Component component0 = xmlEntityRef0.attribute("", "");
      assertEquals("wheel_components_XmlEntityRef", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.address((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        xmlEntityRef0.address(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      Component component0 = xmlEntityRef0.addInternalRenderHint((String) null);
      assertEquals("wheel_components_XmlEntityRef", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "2\"<YS-4Fr:K,");
      Checkbox checkbox0 = new Checkbox(block0, "2\"<YS-4Fr:K,", "2\"<YS-4Fr:K,");
      Table table0 = new Table(checkbox0, "java.lang.Stig@0000000008");
      TableRow tableRow0 = table0.tr();
      Image image0 = new Image(tableRow0, "java.lang.String@0000000008", "h6");
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.addFirst(image0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000014");
      // Undeclared exception!
      try { 
        xmlEntityRef0.add((Component) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.add(xmlEntityRef0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(",Beg*(k U,");
      ActionExpression actionExpression0 = new ActionExpression("PMKa>6Rh");
      actionExpression0.submitForm(false);
      Component component0 = xmlEntityRef0.actionBinding(actionExpression0);
      assertEquals(",Beg*(k U,", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("kav;.lang.String@0000000008");
      ActionExpression actionExpression0 = new ActionExpression("8c;jhSnX[^");
      actionExpression0.submissible(true);
      Component component0 = xmlEntityRef0.actionBinding(actionExpression0);
      assertSame(component0, xmlEntityRef0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      Component component0 = xmlEntityRef0.actionBinding("");
      assertEquals("wheel_components_XmlEntityRef", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.action((String) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("0-Bgq7ItW4Q+");
      xmlEntityRef0.action("");
      assertEquals("0-Bgq7ItW4Q+", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.acronym((Object) dynamicSelectModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(": P`&#5RU-~x*](`J@c");
      // Undeclared exception!
      try { 
        xmlEntityRef0.a((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Could not evaluate expression ");
      // Undeclared exception!
      try { 
        xmlEntityRef0._wrapComponentId((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Text text0 = new Text(errorPage0, object0);
      text0._wrapComponentId("");
      assertTrue(text0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      tableRow0._setParent(tableRow0);
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "parser must be on START_TAG to check for empty element");
      checkbox0._setGeneratedId(true);
      assertTrue(checkbox0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      xmlEntityRef0._setComponentId((String) null);
      assertFalse(xmlEntityRef0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "bdo", "bdo");
      Component component0 = errorPage0.p((Object) fileInput0);
      component0._setComponentId("7");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("d<o8}=q.(P9#Jeem*m_");
      // Undeclared exception!
      try { 
        xmlEntityRef0.wBlock("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.var();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Q");
      // Undeclared exception!
      try { 
        xmlEntityRef0.ul();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.u((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "bBL8IG(cyoY,Y", "bBL8IG(cyoY,Y");
      // Undeclared exception!
      try { 
        textInput0.u();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.u();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Form form0 = new Form("FH4|");
      // Undeclared exception!
      try { 
        form0.tt((Object) fileSystemHandling0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, (String) null, (String) null);
      // Undeclared exception!
      try { 
        hidden0.tt();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(",Beg*(k U,");
      // Undeclared exception!
      try { 
        xmlEntityRef0.tt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Xb>]Hl");
      FileInput fileInput0 = new FileInput(xmlEntityRef0, "Xb>]Hl", "Xb>]Hl");
      // Undeclared exception!
      try { 
        fileInput0.tt();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("org.mvel.conversion.LongCH$4");
      // Undeclared exception!
      try { 
        xmlEntityRef0.title("org.mvel.conversion.LongCH$4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.text(fileSystemHandling0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.table();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "Td component can be added only to a TableRow.", "");
      Radio radio0 = new Radio(errorPage0, "org.mvel.ast.PreFixDecNode", "JG,kqVa]`['");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(checkbox0, " and not ", "org.mvel.ast.PreFixDecNode", stringSelectModel0, "JG,kqVa]`['");
      Table table0 = new Table(select0, "JG,kqVa]`['");
      TableBlock tableBlock0 = table0.tfoot();
      // Undeclared exception!
      try { 
        radio0.sup((Object) tableBlock0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      Component component0 = tableRow0.meta();
      // Undeclared exception!
      try { 
        component0.sup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("wheel.components.Link");
      // Undeclared exception!
      try { 
        xmlEntityRef0.sup();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "2\"<YS-4Fr:K,");
      Checkbox checkbox0 = new Checkbox(block0, "Oa=!Qgz$}POv;!cf6$", "Oa=!Qgz$}POv;!cf6$");
      Submit submit0 = new Submit(checkbox0, "java.lang.String@0000000008", "Oa=!Qgz$}POv;!cf6$");
      // Undeclared exception!
      try { 
        submit0.sub((Object) submit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "2\"<YS-4Fr:K,");
      Checkbox checkbox0 = new Checkbox(block0, "2\"<YS-4Fr:K,", "2\"<YS-4Fr:K,");
      Table table0 = new Table(checkbox0, "java.lang.Stig@0000000008");
      TableRow tableRow0 = table0.tr();
      Image image0 = new Image(tableRow0, "java.lang.String@0000000008", "h6");
      // Undeclared exception!
      try { 
        image0.sub();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.sub();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("%ay3GD2Y1");
      // Undeclared exception!
      try { 
        xmlEntityRef0.style();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Form form0 = new Form("$ZPch");
      Hidden hidden0 = new Hidden(form0, "$ZPch", "INVOKEINTERFACE java/util/Map.put");
      // Undeclared exception!
      try { 
        hidden0.strong((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "2\"<YS-4Fr:K,");
      Checkbox checkbox0 = new Checkbox(block0, "Oa=!Qgz$}POv;!cf6$", "Oa=!Qgz$}POv;!cf6$");
      NumberInput numberInput0 = new NumberInput(errorPage0, "DiOLrN,)(57j", "Oa=!Qgz$}POv;!cf6$");
      Link link0 = new Link(checkbox0, numberInput0);
      Text text0 = new Text(link0, numberInput0);
      // Undeclared exception!
      try { 
        text0.strong();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("D~?k");
      // Undeclared exception!
      try { 
        xmlEntityRef0.strong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(">D_9G_fE#&vB#yG]<C]");
      // Undeclared exception!
      try { 
        xmlEntityRef0.strike((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "2\"<YS-4Fr:K,");
      Checkbox checkbox0 = new Checkbox(block0, "2\"<YS-4Fr:K,", "2\"<YS-4Fr:K,");
      // Undeclared exception!
      try { 
        checkbox0.strike();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000007");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, (String) null, "r~[Y)#vAorILmW");
      // Undeclared exception!
      try { 
        checkbox0.strike();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.span();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, (String) null, (String) null);
      // Undeclared exception!
      try { 
        submit0.small((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "T7M", "Z*ObMK<,DhI*");
      // Undeclared exception!
      try { 
        checkbox0.small();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.form("4[tdw|8^_");
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.enumeration((String) null);
      // Undeclared exception!
      try { 
        component0.select("9IT;+V-gR", dynamicSelectModel0, "4[tdw|8^_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mvel.PropertyAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("&lt;");
      // Undeclared exception!
      try { 
        xmlEntityRef0.samp((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Xb>]Hl");
      // Undeclared exception!
      try { 
        xmlEntityRef0.samp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("H~; a~0Iyf:H9ts;?P|");
      // Undeclared exception!
      try { 
        xmlEntityRef0.s((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Text text0 = new Text(errorPage0, object0);
      Checkbox checkbox0 = new Checkbox(text0, "h6", "org.mvel.optimizers.AbstractOptimizer");
      // Undeclared exception!
      try { 
        checkbox0.s();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("wheel.components.Link");
      // Undeclared exception!
      try { 
        xmlEntityRef0.s();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.remove("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("h6");
      Hidden hidden0 = new Hidden(xmlEntityRef0, "-QX/XMmF{E3r03J", "8wxe!7H#rG~Sl$Z,Oj");
      // Undeclared exception!
      try { 
        hidden0.rawText(fileSystemHandling0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("mvel.threadsafixety");
      // Undeclared exception!
      try { 
        xmlEntityRef0.radio("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "2\"<YS-4Fr:K,");
      Checkbox checkbox0 = new Checkbox(block0, "Oa=!Qgz$}POv;!cf6$", "Oa=!Qgz$}POv;!cf6$");
      Hidden hidden0 = new Hidden(checkbox0, "):", "U*fIJK");
      // Undeclared exception!
      try { 
        checkbox0.q((Object) hidden0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("VJ");
      // Undeclared exception!
      try { 
        xmlEntityRef0.q();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("script");
      // Undeclared exception!
      try { 
        xmlEntityRef0.pre();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "vtD-E%\"KmoIKd", "vtD-E%\"KmoIKd");
      Checkbox checkbox0 = new Checkbox(numberInput0, "vtD-E%\"KmoIKd", (String) null);
      // Undeclared exception!
      try { 
        checkbox0.placeholder("+Ao_bK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("b!E0'es~R9/4J!$|6P/");
      // Undeclared exception!
      try { 
        xmlEntityRef0.placeholder("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.param("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("wheel_ErrorPage");
      Submit submit0 = new Submit(xmlEntityRef0, "wheel_ErrorPage", "java.lang.String@0000000016");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        submit0.p(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "", "");
      // Undeclared exception!
      try { 
        submit0.object();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("ICONST_3");
      // Undeclared exception!
      try { 
        xmlEntityRef0.object();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000008");
      // Undeclared exception!
      try { 
        form0.numberInput("java.lang.String@0000000008");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      DateInput dateInput0 = new DateInput(tableBlock0, "w#q[ahG` #RS;jw", "\"", "w#q[ahG` #RS;jw");
      // Undeclared exception!
      try { 
        dateInput0.noscript();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.noscript();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("WFZhh<^< df+7ru<k");
      NumberInput numberInput0 = new NumberInput(xmlEntityRef0, "java.lang.String@0000000007", "iframe");
      // Undeclared exception!
      try { 
        numberInput0.noscript();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "parser must be on START_TAG to check for empty element");
      // Undeclared exception!
      try { 
        checkbox0.noframes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("z]");
      // Undeclared exception!
      try { 
        xmlEntityRef0.meta();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        xmlEntityRef0.message("G? kGDE?RC*a_j", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.message("uc'6nE,=p'h~&a", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.message("g9}fxGt9sT*.~>)8B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("org.mvel.conversion.LongCH$4");
      // Undeclared exception!
      try { 
        xmlEntityRef0.map("org.mvel.conversion.LongCH$4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.map((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Form form0 = new Form("noscript");
      // Undeclared exception!
      try { 
        form0.link();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        xmlEntityRef0.li(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("body");
      // Undeclared exception!
      try { 
        xmlEntityRef0.li();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.legend();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Object object0 = new Object();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("?;xcmN");
      // Undeclared exception!
      try { 
        xmlEntityRef0.label(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[0];
      Component component0 = errorPage0.area(stringArray0);
      // Undeclared exception!
      try { 
        component0.img("param", "java.lang.String@0000000008");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "t^Z)HlWQ>25'zzjI", "");
      // Undeclared exception!
      try { 
        checkbox0.iframe();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.iframe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("parser must be onzSTART_TAG to check for emp1y elem+nt");
      // Undeclared exception!
      try { 
        xmlEntityRef0.id("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.i();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("$)X8}s}Im!");
      Radio radio0 = new Radio(xmlEntityRef0, ")xoyKluFlZ0lY-", "5q>9qYp");
      // Undeclared exception!
      try { 
        radio0.h5((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "INVOKEINTERFACE: java/uil/Listget");
      Checkbox checkbox0 = new Checkbox(block0, "Oa=!Qgz$}POv;!cf6$", "Oa=!Qgz$}POv;!cf6$");
      Submit submit0 = new Submit(checkbox0, "Oa=!Qgz$}POv;!cf6$", "Oa=!Qgz$}POv;!cf6$");
      // Undeclared exception!
      try { 
        submit0.h5();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(",Beg*(k U,");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h5();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Object object0 = new Object();
      Form form0 = new Form("2\"<YS-4Fr:K,");
      // Undeclared exception!
      try { 
        form0.h4(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("a?b");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        xmlEntityRef0.h3(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.h1((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      FileInput fileInput0 = new FileInput(xmlEntityRef0, "[nVuh4pq|d-kuXnVth", "[nVuh4pq|d-kuXnVth");
      // Undeclared exception!
      try { 
        fileInput0.h1();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Form form0 = new Form("wJ6 e)10v@uNB6R>");
      // Undeclared exception!
      try { 
        form0.getPage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      NumberInput numberInput0 = new NumberInput((Component) null, "]amnK-f3X\"J&mU9]3Kn", "]amnK-f3X\"J&mU9]3Kn");
      TextInput textInput0 = new TextInput(numberInput0, "]amnK-f3X\"J&mU9]3Kn", "span");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(textInput0, "span", "GO", "GO", stringSelectModel0, true);
      // Undeclared exception!
      try { 
        select0.getPage();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Xb>]Hl");
      // Undeclared exception!
      try { 
        xmlEntityRef0.getComponents();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000016");
      ErrorPage errorPage0 = new ErrorPage();
      xmlEntityRef0._setParent(errorPage0);
      ActionExpression actionExpression0 = new ActionExpression("java.lang.String@0000000008");
      // Undeclared exception!
      try { 
        xmlEntityRef0.form("java.lang.String@0000000008", actionExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String[] stringArray0 = new String[12];
      ActionExpression actionExpression0 = new ActionExpression(stringArray0[5]);
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.form(stringArray0[3], actionExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Text text0 = new Text(errorPage0, errorPage0);
      // Undeclared exception!
      try { 
        text0.form("lKvJkCY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.form((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A Form must always have a given componentId.
         //
         verifyException("wheel.components.Form", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.wBlock("iframe");
      // Undeclared exception!
      try { 
        errorPage0.findAll((ElExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      ElExpression elExpression0 = new ElExpression("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.fileInput("", elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.fileInput((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("internal error in fillBuffer()");
      // Undeclared exception!
      try { 
        xmlEntityRef0.fieldset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Form form0 = new Form("|T2K,+N-");
      // Undeclared exception!
      try { 
        form0.entity("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "java.lang.Stig@0000000008", "java.lang.Stig@0000000008");
      Table table0 = new Table(hidden0, "org.mvel.conversion.DoubleCH$2");
      TableRow tableRow0 = table0.tr();
      // Undeclared exception!
      try { 
        tableRow0.end((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("parser must be onzSTART_TAG to check for emp1y elem+nt");
      // Undeclared exception!
      try { 
        xmlEntityRef0.em((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.em();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.dt((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("FH4|");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, (String) null, "Th component can be added only to a TableRow.");
      TextArea textArea0 = new TextArea(radio0, "~rT1seOeMnD'OY*", "Th component can be added only to a TableRow.");
      Checkbox checkbox0 = new Checkbox(textArea0, "~rT1seOeMnD'OY*", "Method '");
      // Undeclared exception!
      try { 
        checkbox0.dl();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("k/0");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("FH4|");
      // Undeclared exception!
      try { 
        xmlEntityRef0.div();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.dfn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.del();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000008");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dd((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.dd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "~A,E", "");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        textInput0.code(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "2\"<YS-4Fr:K,");
      Checkbox checkbox0 = new Checkbox(block0, "Oa=!Qgz$}POv;!cf6$", "Oa=!Qgz$}POv;!cf6$");
      Submit submit0 = new Submit(checkbox0, "java.lang.String@0000000008", "Oa=!Qgz$}POv;!cf6$");
      // Undeclared exception!
      try { 
        submit0.cite((Object) submit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "2\"<YS-4Fr:K,");
      Checkbox checkbox0 = new Checkbox(block0, "2\"<YS-4Fr:K,", "2\"<YS-4Fr:K,");
      // Undeclared exception!
      try { 
        checkbox0.cite();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Form form0 = new Form("'.");
      // Undeclared exception!
      try { 
        form0.buttonInput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(">D_9G_fE#&vB#yG]<C]");
      // Undeclared exception!
      try { 
        xmlEntityRef0.button();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "~rT1seOeMnD'OY*");
      Hidden hidden0 = new Hidden(block0, " T{'`UcW.z4Of`", " T{'`UcW.z4Of`");
      // Undeclared exception!
      try { 
        hidden0.br();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("y-s");
      // Undeclared exception!
      try { 
        xmlEntityRef0.br();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "wheel_rrrae", "l");
      // Undeclared exception!
      try { 
        hidden0.base("TWruum1ol,s1}_+M6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.base("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Form form0 = new Form("");
      Radio radio0 = new Radio(form0, "cBQg\"", "cBQg\"");
      // Undeclared exception!
      try { 
        form0.b((Object) radio0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.address();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "parser must be on START_TAG to check for empty element");
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("parser must be on START_TAG to check for empty element");
      // Undeclared exception!
      try { 
        xmlEntityRef0.addFirst(checkbox0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "t^Z)HlWQ>25'zzjI", "");
      Table table0 = new Table(checkbox0, "");
      TableRow tableRow0 = table0.tr();
      // Undeclared exception!
      try { 
        checkbox0.add(tableRow0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "2\"<YS-4Fr:K,");
      Checkbox checkbox0 = new Checkbox(block0, "2\"<YS-4Fr:K,", "2\"<YS-4Fr:K,");
      Submit submit0 = new Submit(checkbox0, "java.lang.Stig@0000000008", "2\"<YS-4Fr:K,");
      // Undeclared exception!
      try { 
        submit0.actionBinding((ActionExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.acronym();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      FileInput fileInput0 = new FileInput(xmlEntityRef0, "[nVuh4pq|d-kuXnVth", "[nVuh4pq|d-kuXnVth");
      // Undeclared exception!
      try { 
        fileInput0.abbr((Object) "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression((String) null);
      Radio radio0 = new Radio(errorPage0, "java.lang.String@0000000008", (String) null);
      // Undeclared exception!
      try { 
        radio0.a((Object) actionExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Xb>]Hl");
      // Undeclared exception!
      try { 
        xmlEntityRef0.a();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Form form0 = new Form("').submit();");
      // Undeclared exception!
      try { 
        form0._wrapComponentId("').submit();");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "parser must be on START_TAG to check for empty element");
      // Undeclared exception!
      try { 
        checkbox0._applyFormat((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "2\"<YS-4Fr:K,");
      Checkbox checkbox0 = new Checkbox(block0, "2\"<YS-4Fr:K,", "2\"<YS-4Fr:K,");
      Table table0 = new Table(checkbox0, "java.lang.Stig@0000000008");
      TableRow tableRow0 = table0.tr();
      Image image0 = new Image(tableRow0, "java.lang.String@0000000008", "h6");
      NumberInput numberInput0 = new NumberInput(image0, (String) null, "noframes", (CharSequence) null);
      // Undeclared exception!
      try { 
        numberInput0.b();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._wrapComponentId("D?4Z21l*x311");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("u36-O?Ma#fl%YV/H");
      xmlEntityRef0.hashCode();
      assertEquals("u36-O?Ma#fl%YV/H", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "java.lang.String@0000000007", "java.lang.String@0000000007");
      boolean boolean0 = checkbox0.equals(dynamicSelectModel0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      boolean boolean0 = xmlEntityRef0.equals(xmlEntityRef0);
      assertTrue(boolean0);
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.getComponents();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      String string0 = "\\uk";
      Table table0 = new Table(tableRow0, string0);
      TableBlock tableBlock0 = new TableBlock(table0);
      StandaloneComponent standaloneComponent0 = tableBlock0.getPage();
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.getSubmittedForm();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tried to access a form, but none was submitted.
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "w9", " T{'`UcW.z4Of`");
      Radio radio0 = new Radio(hidden0, "w9", "wo:");
      StandaloneComponent standaloneComponent0 = radio0._getTopLevelComponent(false);
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StandaloneComponent standaloneComponent0 = errorPage0._getTopLevelComponent(true);
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Form form0 = new Form((String) null);
      Radio radio0 = new Radio(form0, "bdo", "Th component can be added only to a TableRow.");
      Form form1 = radio0._getForm(true);
      assertEquals("wheel_components_Form", form1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "noscript", "java.lang.String@0000000007");
      Form form0 = radio0._getForm(false);
      assertNull(form0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "2\"<YS-4Fr:K,");
      Checkbox checkbox0 = new Checkbox(block0, "Oa=!Qgz$}POv;!cf6$", "Oa=!Qgz$}POv;!cf6$");
      NumberInput numberInput0 = new NumberInput(errorPage0, "DiOLrN,)(57j", "Oa=!Qgz$}POv;!cf6$");
      Link link0 = new Link(checkbox0, numberInput0);
      Text text0 = new Text(link0, numberInput0);
      Radio radio0 = new Radio(text0, "Oa=!Qgz$}POv;!cf6$", "text/html");
      radio0._getForm(true);
      assertTrue(text0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Image image0 = new Image(errorPage0, "}uJByEC;fb", "}uJByEC;fb");
      TableRow tableRow0 = new TableRow(image0);
      tableRow0.createTd();
      Block block0 = tableRow0.createTd();
      assertTrue(block0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dl();
      assertEquals("Block_1", component0.getComponentId());
      
      errorPage0._getChildren();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._getChildren();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[6];
      Component component0 = errorPage0.attributes(stringArray0);
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      tableBlock0.attributes((String[]) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "parser must be on START_TAG to check for empty element");
      Component component0 = checkbox0.attribute("could not create serializer: ", "could not create serializer: ");
      assertEquals("parser must be on START_TAG to check for empty element", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Form form0 = new Form("PlMgOLQx4+1");
      form0.getEngine();
      assertEquals("PlMgOLQx4+1", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "2\"<YS-4Fr:K,");
      Checkbox checkbox0 = new Checkbox(block0, "2\"<YS-4Fr:K,", "2\"<YS-4Fr:K,");
      Table table0 = new Table(checkbox0, "java.lang.Stig@0000000008");
      TableRow tableRow0 = table0.tr();
      tableRow0.afterAdd();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "parser must be on START_TAG to check for empty element");
      checkbox0._setGeneratedId(false);
      assertFalse(checkbox0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("z]");
      // Undeclared exception!
      try { 
        xmlEntityRef0.head();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Text text0 = new Text(errorPage0, errorPage0);
      boolean boolean0 = text0._isGeneratedId();
      assertTrue(boolean0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = errorPage0.getComponentName();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("ErrorPage", string0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("");
      Component component0 = errorPage0.actionBinding(actionExpression0);
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      xmlEntityRef0.date();
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.end();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not end compoennt, already at root.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dt((Object) null);
      Component component1 = component0.end();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "~rT1seOeMnD'OY*");
      Hidden hidden0 = new Hidden(block0, " T{'`UcW.z4Of`", " T{'`UcW.z4Of`");
      Table table0 = new Table(hidden0, "org.mvel.conversion.DoubleCH$2");
      TableRow tableRow0 = table0.tr();
      // Undeclared exception!
      try { 
        tableRow0.end("Th component can be added only to a TableRow.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression 'Th component can be added only to a TableRow.'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      TextArea textArea0 = new TextArea(tableBlock0, "ryes", "/:vJkCY");
      Table table0 = new Table(textArea0, "Failed to initialize SimpleDateFormat with pattern '");
      Component component0 = table0.end("div");
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ErrorPage errorPage0 = new ErrorPage();
      Text text0 = new Text(errorPage0, stringBuilder0);
      // Undeclared exception!
      try { 
        text0.end("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression ''.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dateFormat("", errorPage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("org.mvel.conversion.IntegerCH$8");
      Image image0 = new Image(errorPage0, elExpression0, "org.mvel.conversion.IntegerCH$8");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(image0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      ElExpression elExpression0 = new ElExpression(" :^#>lo");
      List<Component> list0 = xmlEntityRef0.findAll(elExpression0);
      assertNotNull(list0);
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      Component component0 = tableRow0.nbsp();
      String string0 = "\\uk";
      Table table0 = new Table(component0, string0);
      table0.id("legend");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(table0, "ol", "org.mvel.conversion.IntArrayCH$2", "ol", stringSelectModel0, true);
      select0.get("legend");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      // Undeclared exception!
      try { 
        table0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id ''.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "zI,~bQ${vy");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(tableBlock0, "zI,~bQ${vy", (String) null, stringSelectModel0, "zI,~bQ${vy");
      // Undeclared exception!
      try { 
        select0.up(28);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      Component component0 = xmlEntityRef0.up((-1));
      assertNotNull(component0);
      assertEquals("wheel_components_XmlEntityRef", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "n]]k4EVhHG}u.~[", "java.lang.String,0000000C0");
      boolean boolean0 = radio0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "~rT1seOeMnD'OY*");
      Hidden hidden0 = new Hidden(block0, " T{'`UcW.z4Of`", " T{'`UcW.z4Of`");
      Table table0 = new Table(hidden0, "org.mvel.conversion.DoubleCH$2");
      TableBlock tableBlock0 = table0.colgroup();
      Component component0 = tableBlock0.a((Object) " T{'`UcW.z4Of`");
      Component component1 = component0.wrapSelf();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      xmlEntityRef0.addInternalRenderHint("");
      xmlEntityRef0._clear();
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.form("4[tdw|8^_");
      component0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      TableBlock tableBlock0 = table0.thead();
      tableBlock0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.abbr((Object) null);
      Submit submit0 = new Submit(errorPage0, "}Wuyt", "A");
      // Undeclared exception!
      try { 
        submit0.wrapSelf();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add a form element. No surrounding form found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "zI,~bQ${vy");
      errorPage0.addFirst(tableBlock0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0._getTopLevelComponent(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Form form0 = new Form("frameset");
      Form form1 = form0._getVisibleForm(true);
      assertNotNull(form1);
      assertEquals("frameset", form1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "~rT1seOeMnD'OY*");
      Hidden hidden0 = new Hidden(block0, " T{'`UcW.z4Of`", " T{'`UcW.z4Of`");
      Table table0 = new Table(hidden0, "org.mvel.conversion.DoubleCH$2");
      TableRow tableRow0 = table0.tr();
      tableRow0._getVisibleForm(true);
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._getVisibleForm(false);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Form form0 = new Form("|}");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression("!E}Xk!h");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(form0, "", "|}", stringSelectModel0, elExpression0);
      Submit submit0 = new Submit(checkboxGroup0, " on the page.", "frame");
      Hidden hidden0 = new Hidden(submit0, "", " on the page.");
      // Undeclared exception!
      try { 
        hidden0.radio("org.mvel.optimizers.AbstractOptimizer");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = (Table)errorPage0.table();
      assertEquals("Table_1", table0.getComponentId());
      
      table0.id((String) null);
      assertFalse(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "2\"<YS-4Fr:K,");
      Checkbox checkbox0 = new Checkbox(block0, "Oa=!Qgz$}POv;!cf6$", "Oa=!Qgz$}POv;!cf6$");
      ActionExpression actionExpression0 = new ActionExpression("2\"<YS-4Fr:K,");
      Form form0 = new Form(checkbox0, "mI@%2aa", actionExpression0);
      // Undeclared exception!
      try { 
        form0.id("jIF95:MQ\",");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "_8SWcqQ{?");
      table0.tfoot();
      // Undeclared exception!
      try { 
        errorPage0.remove(",0*{S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Component with id ,0*{S does not exist.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Image image0 = new Image(errorPage0, "}uJByEC;fb", "}uJByEC;fb");
      TableRow tableRow0 = new TableRow(image0);
      Block block0 = tableRow0.createTd();
      MXSerializer mXSerializer0 = new MXSerializer();
      // Undeclared exception!
      try { 
        block0._render(mXSerializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // setOutput() must called set before serialization can start
         //
         verifyException("org.xmlpull.mxp1_serializer.MXSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("small");
      List<RenderableComponent> list0 = xmlEntityRef0._getRenderableChildren();
      assertEquals("small", xmlEntityRef0.getComponentId());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Select select0 = new Select(errorPage0, "W[}G\"", (String) null, (CharSequence) null, (ISelectModel) null, false);
      // Undeclared exception!
      try { 
        select0.find("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id / on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression((String) null);
      errorPage0.wBlock("p>7Hz");
      // Undeclared exception!
      try { 
        errorPage0.findAll(elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Finder expression didn't evaluate to a boolean value.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "2\"<YS-4Fr:K,");
      Hidden hidden0 = new Hidden(block0, "KpC|Nti#ZFGzb65iWP5", "org.mvel.conversion.BigDecimalCH$5");
      TextInput textInput0 = new TextInput(hidden0, "!J3e]8", "text/html;charset=");
      textInput0._getAction();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      xmlEntityRef0.actionBinding("7G");
      Component component0 = xmlEntityRef0.actionBinding(" eusYW'U");
      assertEquals("wheel_components_XmlEntityRef", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        xmlEntityRef0.attributes(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attributes must be given in name, value pairs.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "Q%rT1seOeMnD'OY*");
      String[] stringArray0 = new String[0];
      block0.attributes(stringArray0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      TextArea textArea0 = new TextArea(tableBlock0, "yes", "/:vJkCY");
      Double double0 = new Double(0.0);
      Text text0 = new Text(textArea0, double0);
      // Undeclared exception!
      try { 
        text0.area((String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("}&a");
      Component component0 = xmlEntityRef0.addInternalRenderHint("java.lang.String@0000000008");
      Component component1 = component0.renderHint("}&a");
      assertEquals("}&a", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.code();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "2\"<YS-4Fr:K,");
      Component component0 = block0.em((Object) errorPage0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h1();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Cannot add a form element. No surrounding form found.");
      // Undeclared exception!
      try { 
        xmlEntityRef0.cite((Object) dynamicSelectModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("");
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "-CULzk$");
      // Undeclared exception!
      try { 
        checkbox0.del((Object) elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      Radio radio0 = new Radio((Component) null, "noscript", "java.lang.String@0000000007");
      // Undeclared exception!
      try { 
        radio0.h5((Object) dynamicSelectModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dfn();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      Component component0 = tableBlock0.sup();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.noscript();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.q();
      ElExpression elExpression0 = new ElExpression("org.mvel.conversion.IntegerCH$8");
      // Undeclared exception!
      try { 
        errorPage0.findAll(elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Finder expression didn't evaluate to a boolean value.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "JFdt", "Z.w5");
      Table table0 = new Table(textArea0, "Z.w5");
      Component component0 = table0.span();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("tandalone");
      // Undeclared exception!
      try { 
        xmlEntityRef0.pre((Object) dynamicSelectModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Form form0 = new Form("vw@9Eeg#{7d YOkCQ");
      // Undeclared exception!
      try { 
        form0.td();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Td component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("x1~IDw3QgpekarrX");
      // Undeclared exception!
      try { 
        xmlEntityRef0.select("", dynamicSelectModel0, "Z.w5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(errorPage0, "tl,WQX!Al0zQnM\"", "tl,WQX!Al0zQnM\"", (ISelectModel) null, elExpression0);
      // Undeclared exception!
      try { 
        checkboxGroup0.body();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("=01");
      // Undeclared exception!
      try { 
        xmlEntityRef0.p((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "2\"<YS-4Fr:K,");
      Checkbox checkbox0 = new Checkbox(block0, "2\"<YS-4Fr:K,", "2\"<YS-4Fr:K,");
      Table table0 = new Table(checkbox0, "java.lang.Stig@0000000008");
      TableBlock tableBlock0 = table0.colgroup();
      tableBlock0.a((Object) checkbox0);
      TableBlock tableBlock1 = new TableBlock(tableBlock0, "java.lang.String@0000000011");
      Component component0 = tableBlock1.wrapSelf();
      assertFalse(component0.equals((Object)tableBlock0));
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Component component0 = errorPage0.label((Object) fileSystemHandling0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.caption();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.param("{paJ", "{paJ");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("7|gUmLR[_eNG7:b");
      // Undeclared exception!
      try { 
        xmlEntityRef0.reset("INVOKEVIRTUAL ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "parser must be onzSTART_TAG to check for emp1y elem+nt");
      // Undeclared exception!
      try { 
        checkbox0.ol();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.wBlock("p>7Hz");
      ElExpression elExpression0 = new ElExpression("?Yy@Qy-5#4}L'm;t");
      // Undeclared exception!
      try { 
        errorPage0.findAll(elExpression0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.Boolean
         //
         verifyException("org.mvel.MVELInterpretedRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.thead();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "parser must be on START_TAG to check for empty element");
      checkbox0._setParent((Component) null);
      assertEquals("input", checkbox0.defaultTagName());
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "java.lang.Stig@0000000008", (String) null);
      Table table0 = new Table(radio0, "java.lang.Stig@0000000008");
      TableBlock tableBlock0 = table0.tbody();
      Any any0 = tableBlock0.col();
      // Undeclared exception!
      try { 
        any0.address((Object) errorPage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "Td component can be added only to a TableRow.", "");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(checkbox0, " and not ", "samp", stringSelectModel0, "JG,kqVa]`['");
      select0._getActions();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(checkbox0._isGeneratedId());
      assertFalse(select0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "}j-ci");
      Component component0 = tableBlock0.style();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("}j-ci", tableBlock0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.blockquote();
      Component component1 = errorPage0.u((Object) component0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.br();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "parser must be on START_TAG to check for empty element");
      // Undeclared exception!
      try { 
        checkbox0.textInput("Colgroup component can be added only to a Table.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "~rT1seOeMnD'OY*");
      Hidden hidden0 = new Hidden(block0, " T{'`UcW.z4Of`", " T{'`UcW.z4Of`");
      // Undeclared exception!
      try { 
        hidden0.th();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Th component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("script");
      xmlEntityRef0.action("script");
      assertEquals("script", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("FH4|");
      // Undeclared exception!
      try { 
        xmlEntityRef0.rawText((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Text text0 = new Text(errorPage0, errorPage0);
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      // Undeclared exception!
      try { 
        text0.radioGroup("Ng?|", stringSelectModel0, (ElExpression) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "JFdt", "Z.w5");
      Table table0 = new Table(textArea0, "\"D}$v");
      Component component0 = table0.sub();
      assertTrue(component0._isGeneratedId());
      assertEquals("\"D}$v", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "2\"<YS-4Fr:K,");
      Checkbox checkbox0 = new Checkbox(block0, "2\"<YS-4Fr:K,", "2\"<YS-4Fr:K,");
      Table table0 = new Table(checkbox0, "java.lang.Stig@0000000008");
      TableBlock tableBlock0 = table0.colgroup();
      // Undeclared exception!
      try { 
        tableBlock0.wrapSelf();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.submit("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.link();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("script");
      // Undeclared exception!
      try { 
        xmlEntityRef0.cite();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("parser must be onzSTART_TAG to check for emp1y elem+nt");
      // Undeclared exception!
      try { 
        xmlEntityRef0.big();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.iframe();
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "content-type", "content-type");
      // Undeclared exception!
      try { 
        submit0.strike();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.h1(object0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "zI,~bQ${vy", "zI,~bQ${vy");
      // Undeclared exception!
      try { 
        checkbox0.noframes();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "YdfTUd`&[ !Xn");
      Component component0 = table0.i();
      assertFalse(table0._isGeneratedId());
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.dd(object0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("small");
      xmlEntityRef0._applyFormat("small");
      assertEquals("small", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      TableBlock tableBlock0 = table0.tbody();
      // Undeclared exception!
      try { 
        tableBlock0.title("`46HEMtU4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "~rT1seOeMnD'OY*");
      Component component0 = block0.tt();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.u();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Oa=!Qgz$}POv;!cf6$");
      // Undeclared exception!
      try { 
        xmlEntityRef0.hr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.script();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      Component component0 = tableBlock0.big((Object) "~:WL;MJgFX2K76Y");
      // Undeclared exception!
      try { 
        component0.hidden("bF]zc7y:F=+e?B4s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h2();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.sub((Object) dynamicSelectModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        xmlEntityRef0.htmlText(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "~rT1seOeMnD'OY*");
      Checkbox checkbox0 = new Checkbox(block0, "~rT1seOeMnD'OY*", "~rT1seOeMnD'OY*");
      Table table0 = new Table(checkbox0, "java.lang.Stig@0000000008");
      Component component0 = table0.h5();
      assertEquals("Block_1", component0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("!`o");
      // Undeclared exception!
      try { 
        xmlEntityRef0.bdo("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Text text0 = new Text(errorPage0, errorPage0);
      // Undeclared exception!
      try { 
        text0.h3((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "2\"<YS-4Fr:K,");
      Checkbox checkbox0 = new Checkbox(block0, "Oa=!Qgz$}POv;!cf6$", "Oa=!Qgz$}POv;!cf6$");
      Table table0 = new Table(checkbox0, "):");
      Component component0 = table0.dt();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.numberInput("Tex\"t_1", (CharSequence) "Tex\"t_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      TextArea textArea0 = new TextArea(tableBlock0, "yes", "/:vCkCY");
      Component component0 = tableBlock0.big((Object) "~:WL;MJgFX2K76Y");
      Table table0 = new Table(textArea0, "0!Q]nn##Jb^<oi");
      TableRow tableRow0 = table0.tr();
      Radio radio0 = new Radio(component0, "yZRl#]A|euXq_b", "~:WL;MJgFX2K76Y");
      // Undeclared exception!
      try { 
        radio0.text(tableRow0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "Td component can be added only to a TableRow.", "");
      Radio radio0 = new Radio(errorPage0, "org.mvel.ast.PreFixDecNode", "JG,kqVa]`['");
      // Undeclared exception!
      try { 
        radio0.h4((Object) checkbox0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "parser must be on START_TAG to check for empty element");
      // Undeclared exception!
      try { 
        checkbox0.abbr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("script");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h4();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "Td component can be added only to a TableRow.", "");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(checkbox0, " and not ", "samp", stringSelectModel0, "JG,kqVa]`['");
      Table table0 = new Table(select0, "H({~lcL|}l$I1t<a/T");
      table0.span((Object) " and not ");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(checkbox0._isGeneratedId());
      assertFalse(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("parser must be onzSTART_TAG to check for emp1y elem+nt");
      // Undeclared exception!
      try { 
        xmlEntityRef0.b();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.table();
      component0.b((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "parser must be on START_TAG to check aor empty element");
      // Undeclared exception!
      try { 
        checkbox0.buttonInput("parser must be on START_TAG to check aor empty element");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "2\"<YS-4Fr:K,");
      // Undeclared exception!
      try { 
        block0.passwordInput("textarea");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "INVOKEINTERFACE: java/uil/Listget");
      TextArea textArea0 = new TextArea(block0, "NV7", "89C_7|+v>%aw");
      // Undeclared exception!
      try { 
        textArea0.encode("INVOKEINTERFACE: java/uil/Listget");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "-HMgC+W>$k*vkh@b*9\"", "-HMgC+W>$k*vkh@b*9\"");
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Could not evaluate expression ");
      // Undeclared exception!
      try { 
        xmlEntityRef0.var((Object) submit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "~rT1seOeMnD'OY*");
      Component component0 = block0.pre();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("parser must be onzSTART_TAG to check for emp1y elem+nt");
      // Undeclared exception!
      try { 
        xmlEntityRef0.ins();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      table0.object();
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("5#");
      // Undeclared exception!
      try { 
        xmlEntityRef0.colgroup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Colgroup component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("");
      Image image0 = new Image(errorPage0, "java.lang.String@0000000008", elExpression0);
      Component component0 = errorPage0.tt((Object) image0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("script");
      // Undeclared exception!
      try { 
        xmlEntityRef0.remove((Component) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      TextArea textArea0 = new TextArea(tableBlock0, "yes", "/:vJkCY");
      // Undeclared exception!
      try { 
        textArea0.ul();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Radio radio0 = new Radio(errorPage0, "~rT1seOeMnD'OY*", "<kCd'}T_B,_EMr-.\"");
      // Undeclared exception!
      try { 
        radio0.abbr(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "~A,E", "");
      // Undeclared exception!
      try { 
        textInput0.div();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("c");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dateFormat("c", dynamicSelectModel0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize SimpleDateFormat with pattern 'c'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "zI,~bQ${vy");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(tableBlock0, "zI,~bQ${vy", (String) null, stringSelectModel0, "zI,~bQ${vy");
      Component component0 = select0.em();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertEquals("zI,~bQ${vy", tableBlock0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.nbsp();
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ErrorPage errorPage1 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.addFirst(errorPage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, "null", "java.lang.Stig@0000000008", ".");
      // Undeclared exception!
      try { 
        dateInput0.fieldset();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("");
      Form form0 = new Form(errorPage0, "}e(hC", actionExpression0);
      Component component0 = form0.base("");
      assertFalse(form0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "parser must be on START_TAG to check for empty element");
      DateInput dateInput0 = new DateInput((Component) null, "parser must be on START_TAG to check for empty element", "parser must be on START_TAG to check for empty element", "");
      // Undeclared exception!
      try { 
        checkbox0.q((Object) dateInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "INVOKEINTERFACE: java/uil/Listget");
      Component component0 = block0.a();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("INVOKEINTERFACE: java/uil/Listget", block0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.del();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.li();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "Text_1");
      TableBlock tableBlock0 = table0.tfoot();
      TableRow tableRow0 = tableBlock0.tr();
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Component component0 = tableRow0.s((Object) charBuffer0);
      assertFalse(table0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.address();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      TableRow tableRow0 = tableBlock0.tr();
      Component component1 = component0.del((Object) tableRow0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.imageSubmit("", " T{'`UcW.z4Of`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.tr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tr component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.legend((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.dl();
      Component component0 = errorPage0.id("n]]k4EVhHG}u.~[");
      assertSame(component0, errorPage0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Text text0 = new Text(errorPage0, errorPage0);
      // Undeclared exception!
      try { 
        text0.samp(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.numberInput((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("y9CXWa1kSoc5mr8");
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = errorPage0.selectModel();
      ElExpression elExpression0 = new ElExpression(")X9+JzwP[@VbQFJ[");
      // Undeclared exception!
      try { 
        xmlEntityRef0.checkboxGroup("", dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.form("4[tdw|8^_");
      ElExpression elExpression0 = new ElExpression("JFdt");
      FormElement formElement0 = component0.fileInput((String) null, elExpression0);
      assertEquals("null", formElement0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "2\"<YS-4Fr:K,");
      Checkbox checkbox0 = new Checkbox(block0, "2\"<YS-4Fr:K,", "2\"<YS-4Fr:K,");
      Object object0 = new Object();
      Table table0 = new Table(checkbox0, "java.lang.Stig@0000000008");
      TableRow tableRow0 = table0.tr();
      Component component0 = tableRow0.i(object0);
      assertFalse(table0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("@\"E\"-Ri)`ejTj");
      Form form0 = new Form(errorPage0, "YVp3QD0/_8s#z", actionExpression0);
      FormElement formElement0 = form0.fileInput("YVp3QD0/_8s#z");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      xmlEntityRef0._setComponentId("");
      assertNull(xmlEntityRef0.defaultTagName());
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "XCv12X!<VyRIX\u0000r'7s", "No corresponding component found for end expression '");
      checkbox0.getAttributes();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "Tex\"t_1");
      TableBlock tableBlock0 = table0.tfoot();
      Component component0 = tableBlock0.button();
      assertEquals("Tex\"t_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "Td component can be added only to a TableRow.", "");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(checkbox0, " and not ", "samp", stringSelectModel0, "JG,kqVa]i['");
      Component component0 = select0.acronym();
      // Undeclared exception!
      try { 
        component0.checkbox("}Hxy5,5J$yq>mPVsZc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "T7M", "Z*ObMK<,DhI*");
      // Undeclared exception!
      try { 
        checkbox0.tbody();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tbody component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("u36-O?Ma#fl%YV/H");
      // Undeclared exception!
      try { 
        xmlEntityRef0.blockquote();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ins((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "Td component can be added only to a TableRow.", "");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(checkbox0, " and not ", "samp", stringSelectModel0, "JG,kqVa]i['");
      Block block0 = select0.placeholder("Could not encode string '");
      assertEquals("Could not encode string '", block0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(checkbox0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.p();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "parser must be on START_TAG to check for empty element");
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        checkbox0.area(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("46VX-6");
      // Undeclared exception!
      try { 
        xmlEntityRef0.acronym((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h3();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("sup");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h6();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "Td component can be added only to a TableRow.", "");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(checkbox0, " and not ", "samp", stringSelectModel0, "JG,kqVa]`['");
      Table table0 = new Table(select0, "H({~lcL|}l$I1t<a/T");
      table0.s();
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "java.lang.Stig@0000000008", "java.lang.Stig@0000000008");
      Hidden hidden0 = new Hidden(radio0, (String) null, "h2");
      TableBlock tableBlock0 = new TableBlock(hidden0, "java.lang.Stig@0000000008");
      TableRow tableRow0 = tableBlock0.tr();
      Component component0 = tableRow0.requestFocus();
      assertTrue(component0._isGeneratedId());
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.var();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "uLYAXFKCu&9", "uLYAXFKCu&9");
      // Undeclared exception!
      try { 
        checkbox0.sup((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("tCTD?U7=f^*Hh^2Z");
      // Undeclared exception!
      try { 
        xmlEntityRef0.small();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.frame("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Form form0 = new Form("");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        form0.kbd(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Text text0 = new Text(errorPage0, errorPage0);
      // Undeclared exception!
      try { 
        text0.samp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Text text0 = new Text(errorPage0, object0);
      Table table0 = new Table(text0, "h6");
      ActionExpression actionExpression0 = new ActionExpression("h6");
      Component component0 = table0.strong((Object) actionExpression0);
      Component component1 = component0.label();
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      TextArea textArea0 = new TextArea(tableBlock0, "yes", "/:vJkCY");
      Table table0 = new Table(textArea0, "\"D}$v");
      Component component0 = table0.map("~:WL;MJgFX2K76Y");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("~:WL;MJgFX2K76Y", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      Component component0 = xmlEntityRef0.actionBinding((String) null);
      assertEquals("wheel_components_XmlEntityRef", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h2((Object) "org.mvel.conversion.ByteCH$2");
      // Undeclared exception!
      try { 
        component0.tfoot();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tfoot component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("parser must be onzSTART_TAG to check for emp1y elem+nt");
      Component component0 = xmlEntityRef0.clasS("");
      assertEquals("parser must be onzSTART_TAG to check for emp1y elem+nt", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("+%qo%\"!K9(pxd-M");
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        xmlEntityRef0.multiSelect((String) null, dynamicSelectModel0, (CharSequence) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "2\"<YS-4Fr:K,");
      Checkbox checkbox0 = new Checkbox(block0, "2\"<YS-4Fr:K,", "2\"<YS-4Fr:K,");
      // Undeclared exception!
      try { 
        checkbox0.legend();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.kbd();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._renderXhtmlAttributes((XmlSerializer) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "w9", "w9");
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("w9");
      TextInput textInput0 = new TextInput(xmlEntityRef0, "w:", "w9");
      // Undeclared exception!
      try { 
        hidden0.dt((Object) textInput0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      TextArea textArea0 = new TextArea(tableBlock0, "yes", "/:vJkCY");
      Table table0 = new Table(textArea0, "\"D}$v");
      Component component0 = table0.dd();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("\"D}$v", table0.getComponentId());
  }
}
