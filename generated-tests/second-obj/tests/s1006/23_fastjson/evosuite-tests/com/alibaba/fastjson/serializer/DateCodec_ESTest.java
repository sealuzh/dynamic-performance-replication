/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:42:41 GMT 2018
 */

package com.alibaba.fastjson.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.AfterFilter;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.DateCodec;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.FieldInfo;
import java.io.OutputStreamWriter;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.time.temporal.ChronoField;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateCodec_ESTest extends DateCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Bi`q!(5mV824W");
      Class<Short> class0 = Short.TYPE;
      Long long0 = new Long(2);
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) long0, (Object) "Bi`q!(5mV824W");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Bi`q!(5mV824W\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Float float0 = new Float((-1823.1747395307557));
      Class<Double> class0 = Double.TYPE;
      dateCodec0.write(jSONSerializer0, float0, jSONSerializer0, class0, 1598);
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      Locale locale0 = Locale.ITALY;
      dateCodec0.getFastMatchToken();
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        dateCodec0.cast((DefaultJSONParser) null, (Type) class0, (Object) class0, (Object) JSON.defaultLocale);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse error
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      JSONScanner jSONScanner0 = new JSONScanner("");
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(dateCodec0, jSONScanner0, parserConfig0);
      Class<Byte> class0 = Byte.TYPE;
      dateCodec0.deserialze(defaultJSONParser0, (Type) class0, (Object) jSONScanner0, "notWriteDefaultValue", 2);
      parserConfig0.setAutoTypeSupport(false);
      dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) null, (Object) "");
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("O9Cqly{k");
      Class<Integer> class0 = Integer.TYPE;
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) mockJapaneseDate0, (Object) null);
      System.setCurrentTimeMillis(2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(754, true);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      dateCodec0.write(jSONSerializer0, (Object) null, mockMinguoDate0, (Type) null, 17);
      assertEquals(2, dateCodec0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Object object0 = new Object();
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
      
      MockDate mockDate0 = new MockDate(790, 2, 2, 19, 790, 790);
      dateCodec0.write(jSONSerializer0, mockDate0, mockDate0, (Type) null, 2);
      assertEquals(2, dateCodec0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",XR7CU<b<I=a'A([|k");
      boolean boolean0 = ParserConfig.AUTO_SUPPORT;
      Float float0 = new Float((double) 2);
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) null, (Object) ",XR7CU<b<I=a'A([|k");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \",XR7CU<b<I=a'A([|k\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Object object0 = new Object();
      Integer integer0 = new Integer(804);
      Integer integer1 = new Integer(880);
      JSONScanner jSONScanner0 = new JSONScanner("", 804);
      jSONScanner0.setToken(8);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      JSONScanner jSONScanner1 = new JSONScanner("0000-00-00");
      Locale locale0 = Locale.ITALY;
      JSON.defaultLocale = locale0;
      dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) "", (Object) "0000-00-00");
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Float float0 = new Float((-75.46231964759194));
      Float float1 = new Float((double) 0.0F);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5$");
      DateCodec dateCodec1 = new DateCodec();
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) "/Date(writeFieldName", (Object) "/Date(writeFieldName");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/Date(writeFieldName\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      Locale locale0 = Locale.PRC;
      JSON.DEFAULT_TYPE_KEY = "0000-00-00T00F00:0.000";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0000-00-00T00F00:0.000");
      String string0 = (String)defaultJSONParser0.input;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) dateCodec0, (Object) "0000-00-00T00F00:0.000");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0000-00-00T00F00:0.000\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      MockPrintStream mockPrintStream0 = new MockPrintStream("type not match error");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.MapSortField;
      serializerFeatureArray0[3] = serializerFeature3;
      serializerFeatureArray0[4] = serializerFeature2;
      SerializerFeature serializerFeature4 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[5] = serializerFeature4;
      SerializeWriter serializeWriter0 = new SerializeWriter(outputStreamWriter0, 62, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      SerializeConfig serializeConfig0 = jSONSerializer0.getMapping();
      JSONSerializer jSONSerializer1 = new JSONSerializer(serializeWriter0, serializeConfig0);
      Float float0 = new Float((float) 62);
      dateCodec0.write(jSONSerializer1, float0, jSONSerializer1, (Type) null, (-7143));
      assertEquals(26, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis((-3885L));
      DateCodec dateCodec0 = new DateCodec();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Double double0 = new Double((-3885L));
      Class<Byte> class0 = Byte.class;
      Class<MockThaiBuddhistDate> class1 = MockThaiBuddhistDate.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("zr2Ui']fR3", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("zr2Ui']fR3", class1, class1, class1, (Field) null, 43, 1890, 43);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Class<?> class2 = beanContext0.getFieldClass();
      dateCodec0.write(jSONSerializer0, double0, serializerFeature1, class2, 43);
      assertEquals(21, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      MockPrintStream mockPrintStream0 = new MockPrintStream("type not match error");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[5] = serializerFeature1;
      mockPrintStream0.print("type not match error");
      SerializeWriter serializeWriter0 = new SerializeWriter(outputStreamWriter0, 5, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)23;
      byteArray0[0] = (byte)23;
      ParserConfig parserConfig0 = ParserConfig.global;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((byte)23, 5, (byte)23, (byte)23, (byte)23);
      dateCodec0.write(jSONSerializer0, mockGregorianCalendar0, mockGregorianCalendar0, (Type) null, (byte)23);
      assertEquals(13, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      JSON.setDefaultTypeKey("0000-00-00T00:00:0.000");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0001-01-01T00:00:00+08:00");
      defaultJSONParser0.getResolveTaskList();
      Integer integer0 = new Integer((-1881256057));
      Long.valueOf((long) (-1881256057));
      ChronoField chronoField0 = ChronoField.ALIGNED_WEEK_OF_MONTH;
      dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) chronoField0, (Object) "0001-01-01T00:00:00+08:00");
      dateCodec0.getFastMatchToken();
      System.setCurrentTimeMillis(2);
      DateCodec dateCodec1 = DateCodec.instance;
      Locale locale0 = Locale.FRENCH;
      MockCalendar.getInstance(locale0);
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      JSON.setDefaultTypeKey("0000-00-00T00:00:00");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0000-00-00T00:00:00");
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      String string0 = (String)defaultJSONParser0.input;
      JSON.setDefaultTypeKey("0000-00-00T00:00:00");
      List<AfterFilter> list0 = jSONSerializer0.getAfterFilters();
      Feature feature0 = Feature.AllowISO8601DateFormat;
      defaultJSONParser0.config(feature0, false);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) list0, (Object) "0000-00-00T00:00:00");
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 16);
      Float float0 = new Float((double) 0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      MockPrintStream mockPrintStream0 = new MockPrintStream("type not atch errr");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[5] = serializerFeature1;
      SerializeWriter serializeWriter0 = new SerializeWriter(outputStreamWriter0, (-1640839251), serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      outputStreamWriter0.append(')');
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte)23;
      byteArray0[3] = (byte)23;
      byteArray0[0] = (byte)0;
      ParserConfig parserConfig0 = new ParserConfig();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((byte)0, (-1640839251), (byte)23, (byte)0, (byte)23);
      // Undeclared exception!
      try { 
        dateCodec0.write(jSONSerializer0, mockGregorianCalendar0, mockGregorianCalendar0, (Type) null, (byte)23);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockGregorianCalendar cannot be cast to java.util.Date
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }
}
