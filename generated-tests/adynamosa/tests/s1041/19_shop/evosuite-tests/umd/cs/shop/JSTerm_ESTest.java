/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 19:25:54 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.toArray();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add(0, (Object) jSTerm1);
      jSTerm0.makeFunction();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSJshopVars.minus = 0;
      JSJshopVars.verticalL = (-3);
      jSTerm0.toStr();
      jSTerm1.makeEval(true);
      JSJshopVars.dot = (-3);
      jSTerm2.print();
      jSTerm1.makeConstant();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      JSJshopVars.leftPar = (-3);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.isEval();
      jSTerm3.standardizerTerm();
      StringReader stringReader0 = new StringReader("GqRt?)t40rRM");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm4 = jSTerm1.parseList(streamTokenizer0);
      jSTerm4.print();
      stringReader0.read();
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.toArray();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add(0, (Object) jSTerm1);
      jSTerm0.makeFunction();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      SystemInUtil.addInputLine("Pw2)vVMH=$CscTq6*");
      JSJshopVars.minus = 0;
      JSJshopVars.verticalL = (-3);
      jSTerm0.toStr();
      jSTerm1.makeEval(true);
      JSJshopVars.dot = (-3);
      jSTerm2.print();
      jSTerm1.makeConstant();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      JSJshopVars.leftPar = (-3);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm3.applySubstitutionT(jSSubstitution0);
      SystemInUtil.addInputLine("Pw2)vVMH=$CscTq6*");
      StringReader stringReader0 = new StringReader("T<+;DaMHg?K9yX$Vx%&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSJshopVars.backquote = (-3);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      jSTerm3.call();
      char[] charArray0 = new char[5];
      charArray0[0] = 'S';
      charArray0[1] = '7';
      charArray0[2] = '%';
      charArray0[3] = 'c';
      charArray0[4] = 'o';
      stringReader0.read(charArray0);
      // Undeclared exception!
      try { 
        jSTerm4.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.toArray();
      jSTerm0.add(0, (Object) jSTerm0);
      SystemInUtil.addInputLine("p");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSJshopVars.verticalL = (-3);
      jSTerm0.toStr();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm3.toStr();
      JSTerm jSTerm4 = new JSTerm();
      JSJshopVars.leftPar = (-3);
      jSTerm2.add((Object) jSTerm3);
      jSTerm2.listIterator();
      jSTerm0.listIterator(0);
      jSTerm2.isEmpty();
      jSTerm0.isGround();
      JSJshopVars.greaterT = (-3);
      jSTerm2.isGround();
      SystemInUtil.addInputLine(";");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm3.retainAll(jSTerm1);
      JSJshopVars.flagLevel = (-3);
      JSTerm jSTerm5 = new JSTerm();
      JSJshopVars.greaterT = (-3);
      jSTerm4.isFunction();
      StringReader stringReader0 = new StringReader(" Term expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("call");
      JSTerm jSTerm6 = null;
      try {
        jSTerm6 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.toArray();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add(0, (Object) jSTerm1);
      jSTerm0.makeFunction();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      SystemInUtil.addInputLine("4r4Iz:s|?G");
      JSJshopVars.minus = 0;
      JSJshopVars.verticalL = (-3);
      jSTerm0.toStr();
      jSTerm1.makeEval(true);
      JSJshopVars.dot = 17;
      jSTerm2.print();
      JSJshopVars.whiteSpace = 0;
      jSTerm1.makeConstant();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      JSJshopVars.colon = 93;
      jSTerm3.trimToSize();
      JSJshopVars.leftPar = (-3);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm3.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader("T<+;DaMHg?K9yX$Vx%&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.print();
      jSTerm1.matches(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("=");
      jSTerm0.removeAllElements();
      jSTerm0.addElement("A>HYv29ARfuw8sa4L%0");
      SystemInUtil.addInputLine("u24+\"*Mc\n-N");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSJshopVars.apostrophe = (-3);
      jSTerm1.add((Object) jSTerm0);
      JSJshopVars.equalT = 2147483645;
      jSTerm0.equals(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.call();
      jSSubstitution0.add((Object) jSTerm1);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm3, jSSubstitution0);
      jSSubstitution0.removeAllElements();
      jSTerm2.equals(jSTerm3);
      JSJshopVars.backquote = (-3);
      jSTerm0.add((Object) jSTerm2);
      jSTerm0.matches(jSTerm3);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm3.iterator();
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution1);
      StringReader stringReader0 = new StringReader("=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm3.print();
      jSTerm4.matches(jSTerm0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution4);
      jSTerm1.matches(jSTerm2, jSSubstitution4);
      assertEquals("[A>HYv29ARfuw8sa4L%0, [A>HYv29ARfuw8sa4L%0, [A>HYv29ARfuw8sa4L%0, [A>HYv29ARfuw8sa4L%0]]]]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      Object[] objectArray0 = new Object[7];
      objectArray0[4] = (Object) iterator0;
      SystemInUtil.addInputLine("%%%");
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[2] = (Object) iterator0;
      objectArray0[3] = (Object) iterator0;
      objectArray0[4] = (Object) iterator0;
      objectArray0[6] = (Object) iterator0;
      jSTerm0.toArray(objectArray0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add(0, (Object) jSTerm1);
      jSTerm0.makeEval(true);
      jSTerm0.makeFunction();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.listIterator(0);
      SystemInUtil.addInputLine("Pw2)vVMH=$CscTq6*");
      JSJshopVars.minus = 0;
      JSJshopVars.verticalL = (-3);
      jSTerm0.toStr();
      jSTerm1.makeEval(true);
      JSJshopVars.dot = (-3);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm3.print();
      jSTerm1.makeConstant();
      JSTerm jSTerm4 = jSTerm2.cloneT();
      JSJshopVars.leftPar = (-3);
      SystemInUtil.addInputLine("T<+;DaMHg?K9yX$Vx%&");
      StringReader stringReader0 = new StringReader("T<+;DaMHg?K9yX$Vx%&");
      jSTerm4.print();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.addElement("A>HYv29ARfuw8sa4L%0");
      SystemInUtil.addInputLine("u24+\"*Mc\n-N");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.add((Object) jSTerm0);
      JSJshopVars.equalT = 2147483645;
      jSTerm0.equals(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm3, jSSubstitution0);
      jSSubstitution0.removeAllElements();
      jSTerm2.equals(jSTerm3);
      JSJshopVars.backquote = (-3);
      jSTerm0.add((Object) jSTerm2);
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.matches(jSTerm3);
      jSTerm2.makeVariable();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm4.iterator();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm3.containsAll(jSTerm5);
      JSTerm jSTerm6 = new JSTerm();
      JSTerm jSTerm7 = new JSTerm();
      jSTerm7.equals(jSTerm1);
      StringReader stringReader0 = new StringReader("Operator name expectd");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.toArray();
      SystemInUtil.addInputLine("$");
      jSTerm0.add(0, (Object) jSTerm0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSJshopVars.verticalL = (-3);
      jSTerm0.toStr();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm0.makeConstant();
      jSTerm3.toStr();
      JSTerm jSTerm4 = jSTerm1.cloneT();
      JSJshopVars.leftPar = (-3);
      jSTerm2.add((Object) jSTerm3);
      jSTerm2.listIterator();
      jSTerm2.isEmpty();
      jSTerm0.isGround();
      jSTerm4.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm3.matches(jSTerm2, jSSubstitution0);
      jSSubstitution1.removeAllElements();
      jSTerm1.equals(jSTerm0);
      StringReader stringReader0 = new StringReader("JSUtil>>stringTokenizer is returning %%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.addElement("A>HYv29ARfuw8sa4L%0");
      SystemInUtil.addInputLine("u24+\"*Mc\n-N");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.add((Object) jSTerm0);
      JSJshopVars.equalT = 2147483645;
      jSTerm0.equals(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm3, jSSubstitution0);
      jSSubstitution0.removeAllElements();
      jSTerm2.equals(jSTerm3);
      JSJshopVars.backquote = (-3);
      jSTerm0.add((Object) jSTerm2);
      jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.matches(jSTerm3);
      // Undeclared exception!
      try { 
        jSTerm3.get(60);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 60
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.toArray();
      SystemInUtil.addInputLine("$");
      jSTerm0.add(0, (Object) jSTerm0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSJshopVars.verticalL = (-3);
      jSTerm0.toStr();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm0.makeConstant();
      jSTerm3.toStr();
      JSTerm jSTerm4 = jSTerm1.cloneT();
      JSJshopVars.leftPar = (-3);
      jSTerm2.add((Object) jSTerm3);
      jSTerm2.listIterator();
      jSTerm2.isEmpty();
      SystemInUtil.addInputLine("0.0");
      jSTerm0.isGround();
      JSJshopVars.greaterT = (-3);
      jSTerm2.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.iterator();
      JSTerm jSTerm5 = new JSTerm();
      JSJshopVars.equalT = (-3);
      jSTerm5.containsAll(jSTerm3);
      JSTerm jSTerm6 = new JSTerm();
      jSTerm1.equals(jSTerm6);
      StringReader stringReader0 = new StringReader("Operator name expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("f,ElS(cQ^");
      jSTerm1.print();
      jSTerm4.call();
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.toArray();
      SystemInUtil.addInputLine("$");
      jSTerm0.add(0, (Object) jSTerm0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSJshopVars.verticalL = (-3);
      jSTerm0.toStr();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm0.makeConstant();
      jSTerm3.toStr();
      JSTerm jSTerm4 = jSTerm1.cloneT();
      JSJshopVars.leftPar = (-3);
      jSTerm2.add((Object) jSTerm3);
      jSTerm2.isEmpty();
      SystemInUtil.addInputLine("0.0");
      jSTerm0.isGround();
      JSJshopVars.greaterT = (-3);
      jSTerm2.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.iterator();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm5.containsAll(jSTerm3);
      JSTerm jSTerm6 = new JSTerm();
      jSTerm1.equals(jSTerm6);
      StringReader stringReader0 = new StringReader("Operator name expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("f,ElS(cQ^");
      jSTerm1.print();
      jSTerm4.call();
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.toArray();
      jSTerm0.add(0, (Object) jSTerm0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSJshopVars.verticalL = (-3);
      jSTerm0.toStr();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm0.makeConstant();
      jSTerm3.toStr();
      JSTerm jSTerm4 = jSTerm1.cloneT();
      JSJshopVars.leftPar = (-3);
      jSTerm2.add((Object) jSTerm3);
      jSTerm4.isConstant();
      jSTerm3.isGround();
      SystemInUtil.addInputLine("{*h");
      StringReader stringReader0 = new StringReader("j,Ee(oC^M&");
      jSTerm2.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm3);
      jSTerm1.iterator();
      JSTerm jSTerm5 = new JSTerm();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm1.equals(jSTerm6);
      StringReader stringReader1 = new StringReader("Operator name expected");
      JSJshopVars.slash = (-3);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = new StringReader("j,Ee(oC^M&");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      // Undeclared exception!
      try { 
        jSTerm4.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("_Sz4K%X8SpL#");
      jSTerm0.add(0, (Object) jSTerm0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      SystemInUtil.addInputLine("- ");
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSJshopVars.rightPar = (-3);
      JSJshopVars.verticalL = (-3);
      jSTerm2.toStr();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      JSTerm jSTerm4 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.leftPar = (-3);
      jSTerm2.remove((Object) jSTerm3);
      SystemInUtil.addInputLine("3o4yJD]IAtn100_b");
      jSTerm2.isConstant();
      jSTerm4.isConstant();
      jSTerm3.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm4.iterator();
      StringReader stringReader0 = new StringReader("Operator name expected");
      JSTerm jSTerm5 = jSTerm3.applySubstitutionT(jSSubstitution1);
      SystemInUtil.addInputLine("Operator name expected");
      jSTerm0.toStr();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm6 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.matches(jSTerm6);
      jSTerm2.equals(jSTerm0);
      jSTerm5.matches(jSTerm0, jSSubstitution1);
      JSTerm jSTerm7 = new JSTerm(streamTokenizer0);
      jSTerm7.standardizerTerm();
      System.setCurrentTimeMillis((-1199L));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.toArray();
      jSTerm0.add(0, (Object) jSTerm0);
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSJshopVars.verticalL = (-3);
      jSTerm0.toStr();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm1.makeConstant();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.leftPar = (-3);
      SystemInUtil.addInputLine("3o4yJD]IAtn100_b");
      jSTerm1.add((Object) jSTerm2);
      jSTerm3.isConstant();
      jSTerm2.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.iterator();
      StringReader stringReader0 = new StringReader("z+}a=h");
      JSTerm jSTerm4 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis(0L);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.addElement("A>HYv29ARfuw8sa4L%0");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.toStr();
      jSTerm1.add((Object) jSTerm0);
      SystemInUtil.addInputLine("A>HYv29ARfuw8sa4L%0");
      jSTerm0.equals(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm2.matches(jSTerm3, jSSubstitution0);
      jSTerm1.standardizerTerm();
      jSTerm1.print();
      jSTerm0.makeConstant();
      jSTerm2.equals(jSTerm3);
      StringReader stringReader0 = new StringReader("Ogdv2Qmtj?X/uk3Pvf");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.exclamation = (-824);
      SystemInUtil.addInputLine("I");
      SystemInUtil.addInputLine("I");
      jSTerm0.iterator();
      jSTerm0.toArray();
      jSTerm0.add(0, (Object) jSTerm0);
      jSTerm0.makeEval(true);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSJshopVars.verticalL = (-3);
      SystemInUtil.addInputLine("I");
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.print();
      jSTerm0.makeConstant();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSJshopVars.leftPar = (-3);
      JSJshopVars.exclamation = (-3);
      SystemInUtil.addInputLine("the tokenizer is SPACE!");
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm1.isGround();
      // Undeclared exception!
      try { 
        jSTerm3.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.toArray();
      jSTerm0.add(0, (Object) jSTerm0);
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSJshopVars.verticalL = (-3);
      jSTerm0.toStr();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm0.makeConstant();
      JSTerm jSTerm4 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.leftPar = (-3);
      jSTerm2.add((Object) jSTerm3);
      jSTerm4.isConstant();
      jSTerm3.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.iterator();
      StringReader stringReader0 = new StringReader("Operator name expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("I");
      jSTerm0.iterator();
      jSTerm0.toArray();
      jSTerm0.toArray();
      jSTerm0.add(0, (Object) "I");
      jSTerm0.makeEval(true);
      jSTerm0.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.addElement("A>HYv29ARfuw8sa4L%0");
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.toStr();
      JSJshopVars.slash = (-1092617721);
      jSTerm1.add((Object) jSTerm0);
      SystemInUtil.addInputLine("A>HYv29ARfuw8sa4L%0");
      jSTerm0.equals(jSTerm0);
      SystemInUtil.addInputLine("Ogdv2Qmtj?X/uk3Pvf");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("A>HYv29ARfuw8sa4L%0");
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm1.matches(jSTerm2, jSSubstitution0);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm3.print();
      jSTerm2.makeConstant();
      jSTerm0.cloneT();
      jSTerm1.isGround();
      JSTerm jSTerm4 = new JSTerm();
      StringReader stringReader1 = new StringReader("A>HYv29ARfuw8sa4L%0");
      jSTerm3.equals(jSTerm1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.addElement("A>HYv29ARfuw8sa4L%0");
      jSTerm0.parallelStream();
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.toStr();
      JSJshopVars.slash = (-1092617721);
      jSTerm1.add((Object) jSTerm0);
      boolean boolean0 = jSTerm0.equals(jSTerm0);
      assertFalse(boolean0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("A>HYv29ARfuw8sa4L%0");
      JSTerm jSTerm2 = jSTerm1.call();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm2, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSTerm2.capacity());
      
      jSTerm1.toStr();
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals(44, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      String string0 = "A>HYv29ARfuw8sa4L%0";
      jSTerm0.addElement("A>HYv29ARfuw8sa4L%0");
      Stream stream0 = jSTerm0.parallelStream();
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.toStr();
      int int0 = (-1092617721);
      JSJshopVars.slash = (-1092617721);
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.isGround();
      jSTerm0.add((Object) stream0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine("call");
      StringReader stringReader0 = new StringReader("A>HYv29ARfuw8sa4L%0");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.stream.ReferencePipeline$Head cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      String string0 = ". ";
      jSTerm0.addElement(". ");
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader("(-");
      JSTerm jSTerm1 = jSTerm0.call();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iterator0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) iterator0;
      objectArray0[3] = (Object) iterator0;
      objectArray0[3] = (Object) iterator0;
      objectArray0[6] = (Object) iterator0;
      jSTerm0.toArray(objectArray0);
      jSTerm0.add(0, (Object) jSTerm0);
      jSTerm0.makeEval(true);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSJshopVars.verticalL = (-3);
      jSTerm1.toStr();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.print();
      jSTerm0.makeConstant();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSJshopVars.leftPar = (-3);
      jSTerm3.toStr();
      jSTerm0.call();
      jSTerm0.call();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.matches(jSTerm1);
      StringReader stringReader0 = new StringReader("'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      String string0 = "A>HYv29ARfuw8sa4L%0";
      jSTerm0.addElement("A>HYv29ARfuw8sa4L%0");
      jSTerm0.parallelStream();
      JSJshopVars.flagLevel = 93;
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      JSJshopVars.slash = (-1092617705);
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.add((Object) stringBuffer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iterator0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) iterator0;
      objectArray0[3] = (Object) iterator0;
      objectArray0[5] = (Object) iterator0;
      objectArray0[6] = (Object) iterator0;
      jSTerm0.toArray(objectArray0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add(0, (Object) jSTerm1);
      jSTerm0.makeEval(true);
      jSTerm0.makeFunction();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSJshopVars.verticalL = (-3);
      jSTerm0.toStr();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      StringReader stringReader0 = new StringReader("sW");
      stringReader0.skip(1L);
      StringReader stringReader1 = new StringReader("sW");
      stringReader1.read();
      StringReader stringReader2 = new StringReader("it2l");
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm4.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.addElement("A>HYv29ARfuw8sa4L%0");
      jSTerm0.parallelStream();
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(22, stringBuffer0.length());
      
      jSTerm1.add((Object) jSTerm0);
      boolean boolean0 = jSTerm1.isGround();
      StringReader stringReader0 = new StringReader("b");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars(5304, (-4));
      JSTerm jSTerm2 = jSTerm0.cloneT();
      streamTokenizer1.slashSlashComments(true);
      JSTerm jSTerm3 = jSTerm2.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution1.add(object0);
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      boolean boolean1 = jSTerm1.equals(jSTerm3);
      assertFalse(boolean1 == boolean0);
      
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution2);
      assertTrue(jSTerm4.isFunction());
      assertEquals(10, jSTerm3.capacity());
      assertTrue(jSSubstitution2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.addElement("A>HYv29ARfuw8sa4L%0");
      jSTerm0.parallelStream();
      JSJshopVars.flagLevel = 93;
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.toStr();
      JSJshopVars.slash = (-1092617705);
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.call();
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm1.print();
      jSTerm1.makeConstant();
      jSTerm2.cloneT();
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.percent = 61;
      jSTerm0.addElement("nil");
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm0);
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.isConstant();
      jSTerm1.addAll((Collection) jSSubstitution0);
      jSTerm1.print();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.toStr();
      jSTerm0.print();
      StringReader stringReader0 = new StringReader(" ) ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("}vshWW5B$.<Sy");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.addElement("A>HYv29ARfuw8sa4L%0");
      JSJshopVars.flagLevel = 93;
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.toStr();
      jSTerm1.add((Object) jSTerm0);
      assertEquals(1, jSTerm0.size());
      
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("I");
      jSTerm0.iterator();
      jSTerm0.toArray();
      jSTerm0.add(0, (Object) jSTerm0);
      jSTerm0.makeEval(true);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSJshopVars.verticalL = (-3);
      SystemInUtil.addInputLine("I");
      jSTerm1.standardizerTerm();
      jSTerm0.print();
      jSTerm1.makeConstant();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      SystemInUtil.addInputLine("the tokenizer is SPACE!");
      jSTerm1.isGround();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      StringReader stringReader0 = new StringReader("GqRt?)t40rRM");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm2.isGround();
      JSTerm jSTerm4 = jSTerm0.parseList(streamTokenizer0);
      jSTerm4.print();
      jSTerm1.toStr();
      boolean boolean0 = jSTerm3.isGround();
      assertTrue(jSTerm0.isFunction());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSJshopVars.percent = 61;
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "(OIrt");
      jSTerm0.print();
      jSTerm0.toStr();
      jSTerm0.print();
      jSTerm0.toStr();
      StringReader stringReader0 = new StringReader("DLt7z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.standardizerTerm();
      assertEquals("[(OIrt, [%%%]]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSJshopVars.equalT = 41;
      JSJshopVars.percent = 41;
      StringReader stringReader0 = new StringReader("(qw\"(+Z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iterator0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) iterator0;
      objectArray0[3] = (Object) iterator0;
      objectArray0[4] = (Object) iterator0;
      objectArray0[6] = (Object) iterator0;
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add(0, (Object) jSTerm1);
      jSTerm0.makeEval(true);
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSJshopVars.verticalL = (-3);
      jSTerm0.toStr();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm3.print();
      jSTerm1.makeConstant();
      assertTrue(jSTerm1.isConstant());
      
      jSTerm2.cloneT();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm3.sort(comparator0);
      JSJshopVars.leftPar = (-3);
      JSJshopVars.minus = (-3);
      StringReader stringReader0 = new StringReader("T<+;DaMHg?K9yX$Vx%&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.call();
      assertFalse(jSTerm0.equals((Object)jSTerm2));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.equalT = 41;
      jSTerm0.removeAllElements();
      JSJshopVars.percent = 41;
      JSJshopVars.coma = 41;
      jSTerm0.addElement("nil");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.matches(jSTerm1);
      jSTerm1.print();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.add((Object) jSTerm3);
      jSTerm0.isConstant();
      // Undeclared exception!
      try { 
        jSTerm2.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      Object[] objectArray0 = new Object[16];
      objectArray0[0] = (Object) iterator0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) iterator0;
      objectArray0[14] = (Object) iterator0;
      objectArray0[13] = (Object) iterator0;
      objectArray0[1] = (Object) iterator0;
      objectArray0[6] = (Object) iterator0;
      jSTerm0.toArray(objectArray0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add(0, (Object) jSTerm1);
      jSTerm0.makeEval(true);
      jSTerm0.makeFunction();
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSJshopVars.verticalL = (-3);
      jSTerm0.toStr();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm3.print();
      jSTerm0.makeConstant();
      jSTerm2.cloneT();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm3.sort(comparator0);
      JSJshopVars.leftPar = (-3);
      StringReader stringReader0 = new StringReader("spEAXcA}d@FIoEo*");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm3.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iterator0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) iterator0;
      objectArray0[3] = (Object) iterator0;
      objectArray0[4] = (Object) iterator0;
      objectArray0[5] = (Object) iterator0;
      objectArray0[6] = (Object) iterator0;
      jSTerm0.toArray(objectArray0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add(0, (Object) jSTerm1);
      jSTerm0.makeEval(true);
      jSTerm0.makeFunction();
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSJshopVars.verticalL = (-3);
      jSTerm0.toStr();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm3.print();
      jSTerm1.makeConstant();
      assertTrue(jSTerm1.isConstant());
      
      jSTerm2.cloneT();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm3.sort(comparator0);
      JSJshopVars.leftPar = (-3);
      StringReader stringReader0 = new StringReader("T<+;DaMHg?K9yX$Vx%&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm3.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm2.equals((Object)jSTerm3));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iterator0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) iterator0;
      objectArray0[3] = (Object) iterator0;
      objectArray0[4] = (Object) iterator0;
      objectArray0[5] = (Object) iterator0;
      objectArray0[6] = (Object) iterator0;
      jSTerm0.toArray(objectArray0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add(0, (Object) jSTerm1);
      jSTerm0.makeEval(true);
      jSTerm0.makeFunction();
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSJshopVars.verticalL = (-3);
      jSTerm0.toStr();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm3.print();
      jSTerm1.makeConstant();
      jSTerm2.cloneT();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm3.sort(comparator0);
      JSJshopVars.leftPar = (-3);
      StringReader stringReader0 = new StringReader("T<+;DaMHg?K9yX$Vx%&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm3.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.isVariable();
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.addElement(jSTerm0);
      jSTerm1.toStr();
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm2.isEmpty();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("HgD'_f@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.matches(jSTerm3, jSSubstitution2);
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm4.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      JSJshopVars.coma = 1399;
      boolean boolean0 = jSTerm0.isEval();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 42;
      jSTerm0.setSize(42);
      StringReader stringReader0 = new StringReader("(*T");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iterator0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) iterator0;
      objectArray0[3] = (Object) iterator0;
      objectArray0[4] = (Object) iterator0;
      objectArray0[5] = (Object) iterator0;
      objectArray0[6] = (Object) iterator0;
      jSTerm0.toArray(objectArray0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add(0, (Object) jSTerm1);
      jSTerm0.makeEval(true);
      jSTerm0.makeFunction();
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSJshopVars.verticalL = (-3);
      jSTerm0.toStr();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm3.print();
      jSTerm1.makeConstant();
      jSTerm2.cloneT();
      JSJshopVars.leftPar = (-3);
      jSTerm2.isConstant();
      jSTerm3.print();
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm2.isFunction());
      
      StringReader stringReader0 = new StringReader("ZMvfm$C^&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSTerm0.add(object0);
      jSTerm0.isVariable();
      jSTerm0.toStr();
      StringReader stringReader0 = new StringReader("1M)b+@r)?0wI");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.toStr();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.retainAll(jSSubstitution1);
      jSTerm1.call();
      jSTerm1.lastElement();
      jSTerm2.addElement(jSPredicateForm0);
      jSTerm1.matches(jSTerm0, jSSubstitution1);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.isGround();
      jSTerm2.cloneT();
      jSTerm2.parseList(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "(");
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader("K");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(1944, 2597);
      jSTerm1.isVariable();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2);
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.call();
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.equalT = 1786;
      jSTerm0.removeAllElements();
      JSJshopVars.percent = 41;
      JSJshopVars.coma = 41;
      jSTerm0.addElement("");
      JSJshopVars.VarCounter = 41;
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.call();
      boolean boolean0 = jSTerm1.isEmpty();
      assertFalse(boolean0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals("( )", stringBuffer0.toString());
      
      jSTerm1.isConstant();
      jSTerm1.isFunction();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      assertFalse(jSSubstitution1.fail());
      
      JSTerm jSTerm2 = jSTerm0.cloneT();
      assertTrue(jSTerm2.isFunction());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      jSTerm0.removeIf(predicate0);
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.isEval();
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      Object object0 = new Object();
      jSTerm1.remove(object0);
      streamTokenizer0.slashSlashComments(false);
      System.setCurrentTimeMillis((-1));
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.isConstant();
      jSTerm0.equals(jSTerm3);
      jSTerm3.isEval();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "(");
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader(")D~k_/=vD(iE:2!P'Hk");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.toStr();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.isGround();
      jSTerm2.toStr();
      jSTerm2.matches(jSTerm1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.parseList(streamTokenizer1);
      assertEquals(1, jSTerm0.size());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm1 = new JSTerm();
      jSPredicateForm0.add((Object) jSTerm1);
      jSTerm0.isConstant();
      jSTerm0.ensureCapacity(60);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm1 = new JSTerm();
      jSPredicateForm0.add((Object) jSTerm1);
      jSTerm0.isConstant();
      jSTerm0.ensureCapacity(60);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      StringReader stringReader0 = new StringReader("-");
      StringReader stringReader1 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.quoteChar((-5247));
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.matches(jSTerm1);
      System.setCurrentTimeMillis((-5247));
      jSTerm1.equals(jSTerm2);
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(60);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm1 = new JSTerm();
      jSPredicateForm0.add((Object) jSTerm1);
      jSTerm0.isConstant();
      jSTerm0.ensureCapacity(60);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.setSize(93);
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.isGround();
      StringBuffer stringBuffer0 = jSTerm2.toStr();
      assertEquals("([] )", stringBuffer0.toString());
      
      JSSubstitution jSSubstitution2 = jSTerm3.matches(jSTerm2);
      assertTrue(jSTerm2.isFunction());
      assertTrue(jSSubstitution2.fail());
      
      JSTerm jSTerm4 = jSTerm1.call();
      assertTrue(jSTerm4.isFunction());
      
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.equalT = 1786;
      JSJshopVars.percent = 41;
      JSJshopVars.coma = 41;
      jSTerm0.addElement("");
      JSJshopVars.VarCounter = 41;
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.isEval();
      jSTerm0.remove((Object) stringBuffer0);
      assertEquals("( )", stringBuffer0.toString());
      
      System.setCurrentTimeMillis(1144L);
      jSTerm0.isConstant();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean0);
      
      jSTerm0.isEval();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isFunction());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.equalT = 1786;
      jSTerm0.addElement("");
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.isEval();
      jSTerm1.removeAllElements();
      assertEquals(1, jSTerm0.size());
      
      jSTerm0.toStr();
      jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      assertTrue(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?f[pb4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.print();
      JSTerm jSTerm2 = new JSTerm();
      StringReader stringReader1 = new StringReader("");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSJshopVars.apostrophe = (-1111);
      streamTokenizer1.quoteChar(1);
      System.setCurrentTimeMillis(0L);
      boolean boolean0 = jSTerm1.isConstant();
      boolean boolean1 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean1 == boolean0);
      
      jSTerm2.isEval();
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals("?%%%0 ", stringBuffer0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.equalT = 1786;
      JSJshopVars.percent = 41;
      JSJshopVars.coma = 41;
      jSTerm0.addElement("");
      JSJshopVars.VarCounter = 41;
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.isEval();
      jSTerm0.toStr();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "(");
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.add((Object) "(");
      jSTerm2.call();
      JSTerm jSTerm3 = jSTerm0.call();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.isGround();
      boolean boolean0 = jSTerm1.equals(jSTerm3);
      assertEquals(1, jSTerm0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm1 = new JSTerm();
      jSPredicateForm0.add((Object) jSTerm1);
      jSTerm0.isConstant();
      jSTerm0.ensureCapacity(60);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.toStr();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSTerm jSTerm4 = new JSTerm();
      JSJshopVars.greaterT = (-2);
      jSTerm2.remove((Object) jSTerm3);
      System.setCurrentTimeMillis(60);
      jSTerm3.isConstant();
      // Undeclared exception!
      try { 
        jSTerm3.equals(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.removeAll(jSTerm1);
      jSTerm1.ensureCapacity(0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm1 = new JSTerm();
      jSPredicateForm0.add((Object) jSTerm1);
      jSTerm0.isConstant();
      int int0 = 60;
      jSTerm0.ensureCapacity(60);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.toStr();
      jSTerm2.standardizerTerm();
      jSTerm2.print();
      JSTerm jSTerm3 = new JSTerm();
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) jSTerm0;
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.isConstant();
      jSTerm0.isVariable();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.isFunction();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.makeFunction();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.matches(jSTerm2, jSSubstitution1);
      boolean boolean0 = jSTerm3.isFunction();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.parallelStream();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.isVariable();
      jSTerm0.toStr();
      StringReader stringReader0 = new StringReader("/");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.isEval());
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.call();
      boolean boolean0 = jSTerm2.isGround();
      assertTrue(jSTerm1.isFunction());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSPredicateForm0);
      jSTerm0.removeAll(jSPredicateForm0);
      jSTerm1.ensureCapacity(0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.add((Object) jSPredicateForm0);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tC.4AiRmg");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      JSJshopVars.leftPar = (-1);
      jSTerm1.isVariable();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.isFunction();
      jSTerm0.makeFunction();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer1);
      jSTerm3.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) jSTerm0;
      jSTerm0.add((Object) "/8|j((*2<.A`R");
      StringReader stringReader0 = new StringReader("/8|j((*2<.A`R");
      stringReader0.skip(3029L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.standardizerTerm();
      jSTerm0.add((Object) streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 35;
      jSTerm0.setSize(35);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(60);
      jSTerm0.setSize(60);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      String string0 = "(";
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "(");
      jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.get(60);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 60
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.setSize(39);
      assertTrue(jSTerm0.isVariable());
      
      jSTerm0.call();
      assertFalse(jSTerm0.isFunction());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.flagLevel = 35;
      jSTerm0.setSize(2442);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader("(");
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, (JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parallelStream();
      jSTerm0.makeVariable();
      jSTerm0.isVariable();
      JSTerm jSTerm1 = new JSTerm();
      assertEquals(10, jSTerm1.capacity());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(1812);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("ei%;mWG]&Yk");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeVariable();
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.exclamation = 40;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      jSTerm0.add((Object) null);
      objectArray0[2] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.lessT = (-861);
      StringReader stringReader0 = new StringReader(">");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(",");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("P");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) jSTerm0;
      jSTerm0.add((Object) "/8|j((*2<.A`R");
      StringReader stringReader0 = new StringReader("/8|j((*2<.A`R");
      stringReader0.skip(3029L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.standardizerTerm();
      jSTerm0.add((Object) streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("%X%z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Gq+");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm1 = jSTerm0.call();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean0);
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Gq+");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      jSTerm0.isVariable();
      assertFalse(jSTerm0.isEval());
      
      jSTerm0.isConstant();
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) "max");
      Predicate<JSSubstitution> predicate1 = predicate0.negate();
      Predicate<JSSubstitution> predicate2 = predicate0.and(predicate1);
      predicate0.or(predicate2);
      jSTerm0.removeIf(predicate0);
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      int int0 = 93;
      streamTokenizer0.ordinaryChars(93, 4296);
      jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0WVQ-@(Kf+$~$Z:6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      
      jSTerm1.isVariable();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertNotSame(jSTerm2, jSTerm0);
      assertTrue(jSTerm2.isConstant());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) jSTerm0;
      jSTerm0.add((Object) "/8|j((*2<.A`R");
      StringReader stringReader0 = new StringReader("/8|j((*2<.A`R");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.add((Object) streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tC.4AiRmg");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      JSJshopVars.leftPar = (-1);
      streamTokenizer0.commentChar((-754));
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm1.toStr();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm1.matches(jSTerm2);
      streamTokenizer0.wordChars(1944, 1944);
      jSTerm2.isVariable();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.matches(jSTerm2);
      jSTerm0.matches(jSTerm3, jSSubstitution0);
      jSTerm2.call();
      JSJshopVars.verticalL = (-754);
      // Undeclared exception!
      try { 
        jSTerm3.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("F[KU7ixV[_tr-Z*J<Sp");
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      jSTerm0.isConstant();
      jSTerm1.isVariable();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.isFunction();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSJshopVars.lessT = (-2668);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isVariable();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isFunction();
      jSTerm0.makeFunction();
      assertTrue(jSTerm0.isFunction());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      jSTerm0.toStr();
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Expecting Term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.print();
      streamTokenizer0.commentChar((-2718));
      jSTerm0.equals(jSTerm2);
      jSTerm2.applySubstitutionT((JSSubstitution) null);
      streamTokenizer0.wordChars(41, (-2024));
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm1 = new JSTerm();
      jSPredicateForm0.add((Object) jSTerm1);
      jSTerm0.removeAll(jSPredicateForm0);
      int int0 = 60;
      jSTerm0.ensureCapacity(60);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      int int1 = 60;
      // Undeclared exception!
      try { 
        jSTerm0.get(60);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 60
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isVariable();
      int int0 = (-971);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.isGround();
      jSTerm0.makeEval(false);
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?f[pb4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm1.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("list ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution0.fail());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iterator0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) iterator0;
      objectArray0[3] = (Object) iterator0;
      objectArray0[4] = (Object) iterator0;
      objectArray0[5] = (Object) iterator0;
      objectArray0[6] = (Object) iterator0;
      jSTerm0.toArray(objectArray0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add(0, (Object) jSTerm1);
      jSTerm0.makeEval(true);
      jSTerm0.makeFunction();
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSJshopVars.verticalL = (-3);
      jSTerm0.toStr();
      jSTerm2.standardizerTerm();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'@RK0O");
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("P");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iterator0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) iterator0;
      objectArray0[3] = (Object) iterator0;
      objectArray0[4] = (Object) iterator0;
      objectArray0[5] = (Object) iterator0;
      objectArray0[6] = (Object) iterator0;
      jSTerm0.toArray(objectArray0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add(0, (Object) jSTerm1);
      jSTerm0.makeEval(true);
      jSTerm0.makeFunction();
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSJshopVars.verticalL = (-3);
      jSTerm0.toStr();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm3.print();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm3.matches(jSTerm4);
      System.setCurrentTimeMillis(0);
      jSTerm0.isConstant();
      assertTrue(jSTerm0.isVariable());
      
      boolean boolean0 = jSTerm4.equals(jSTerm1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iterator0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) iterator0;
      objectArray0[3] = (Object) iterator0;
      objectArray0[4] = (Object) iterator0;
      objectArray0[5] = (Object) iterator0;
      objectArray0[6] = (Object) iterator0;
      jSTerm0.toArray(objectArray0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add(0, (Object) jSTerm1);
      jSTerm0.makeEval(true);
      jSTerm0.makeFunction();
      jSTerm0.makeVariable();
      jSTerm0.standardizerTerm();
      JSJshopVars.verticalL = (-3);
      jSTerm0.toStr();
      StringReader stringReader0 = new StringReader("L)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = (-2718);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = null;
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution0.fail());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("4hmZmIl43W!{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightPar = (-4299);
      JSJshopVars.slash = 59;
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      JSTerm jSTerm1 = new JSTerm();
      Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      predicate2.and(predicate3);
      Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate4 = predicate1.or(predicate3);
      predicate4.or(predicate2);
      predicate0.and(predicate4);
      predicate0.negate();
      predicate0.negate();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.removeIf(predicate0);
      JSJshopVars.leftPar = (-1403);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clear();
      int int0 = (-1711);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("list ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution0.fail());
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("noQT Q0n {O?h3C3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals("Q0n ", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.ensureCapacity((-445));
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isVariable();
      String string0 = "zGUU~xbmrQ}";
      StringReader stringReader0 = new StringReader("zGUU~xbmrQ}");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = (-971);
      // Undeclared exception!
      try { 
        stringReader0.mark((-971));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Read-ahead limit < 0
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("P");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clone();
      boolean boolean0 = false;
      jSTerm0.makeEval(false);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.addAll(1, (Collection) jSTerm2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ^$QpFf]Jx+");
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = 'l';
      charArray0[2] = ',';
      charArray0[3] = 'P';
      charArray0[4] = 'X';
      charArray0[5] = 'z';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.read();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      stringReader0.skip((-1923L));
      streamTokenizer0.whitespaceChars(41, 0);
      // Undeclared exception!
      try { 
        stringReader0.mark((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Read-ahead limit < 0
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&E{l$bRU<)rg/f<");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?f[pb4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      streamTokenizer0.parseNumbers();
      stringReader0.mark(2206);
      streamTokenizer0.nval = (-505.17968281158);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) jSTerm0;
      StringReader stringReader0 = new StringReader("/8|j((*2<.A`R");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
