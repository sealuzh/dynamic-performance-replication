/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 21:40:31 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Regexp_ESTest extends Regexp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[6];
      regexp0.runes = intArray0;
      regexp1.op = regexp_Op0;
      regexp1.reinit();
      regexp0.flags = 362;
      regexp1.equals(regexp0);
      regexp0.max = 362;
      regexp_Op0.isPseudo();
      Regexp regexp2 = new Regexp(regexp0);
      Regexp.Op.values();
      regexp0.toString();
      Object object0 = new Object();
      Regexp.Op.values();
      int int0 = regexp1.flags;
      regexp0.equals(regexp1);
      regexp0.maxCap();
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexp3.min = 4169;
      regexp0.toString();
      // Undeclared exception!
      try { 
        regexp3.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[1];
      regexp0.runes = intArray0;
      regexp1.op = regexp_Op0;
      regexp1.max = (-458);
      regexp1.reinit();
      regexp_Op0.isPseudo();
      Regexp regexp2 = new Regexp(regexp0);
      Regexp.Op.values();
      Regexp regexp3 = new Regexp(regexp2);
      regexp3.toString();
      Object object0 = new Object();
      Object object1 = new Object();
      regexp1.op.isPseudo();
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.cap = 3;
      regexp1.subs = null;
      regexp0.reinit();
      regexp1.flags = 3;
      regexp1.reinit();
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      regexp0.reinit();
      regexp1.min = 3;
      intArray0[1] = 0;
      intArray0[2] = 3;
      regexp1.runes = intArray0;
      regexp1.toString();
      regexp1.equals(regexp0);
      regexp1.toString();
      regexp1.maxCap();
      Regexp.Op.values();
      regexp_Op0.isPseudo();
      Regexp regexp2 = null;
      try {
        regexp2 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 132;
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp1;
      regexp0.name = "ALTERNATE";
      regexp0.subs = regexpArray0;
      Regexp regexp2 = new Regexp(regexp0);
      int[] intArray0 = new int[2];
      intArray0[0] = 34;
      intArray0[1] = (-2337);
      regexp0.runes = intArray0;
      regexp0.cap = 1226;
      regexp2.max = 132;
      regexp2.name = "";
      regexp0.min = (-30);
      // Undeclared exception!
      try { 
        regexp2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.min = 68416;
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexp1.runes = intArray0;
      regexp1.subs = regexpArray0;
      regexp1.max = 68416;
      int[] intArray1 = new int[9];
      intArray1[0] = 68416;
      intArray1[1] = 68416;
      regexp1.flags = 68416;
      intArray1[2] = 68416;
      intArray1[3] = 68416;
      intArray1[4] = 68416;
      intArray1[5] = 68416;
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      regexp0.op = regexp_Op1;
      intArray1[6] = 68416;
      regexpArray0[0].flags = (-2216);
      intArray1[8] = 68416;
      Regexp regexp2 = new Regexp(regexp1);
      // Undeclared exception!
      try { 
        regexp2.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.cap = 3;
      regexp0.reinit();
      regexp1.flags = 3;
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      regexp0.reinit();
      intArray0[1] = 3;
      intArray0[2] = 3;
      regexp0.equals(regexp1);
      regexp0.toString();
      Regexp regexp2 = new Regexp(regexp1);
      Regexp regexp3 = new Regexp(regexp2);
      Regexp.Op.values();
      regexp0.toString();
      boolean boolean0 = regexp2.equals("z");
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp3));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.min = 68416;
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexp1.name = "Inscriptional_Parthian";
      regexp1.subs = regexpArray0;
      int[] intArray1 = new int[9];
      intArray1[0] = 68416;
      intArray1[1] = 68416;
      intArray1[2] = 68416;
      intArray1[3] = 68416;
      intArray1[4] = 68416;
      regexp1.equals(regexp0);
      boolean boolean0 = regexp_Op0.isPseudo();
      assertFalse(boolean0);
      
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      Regexp.Op.values();
      Regexp.Op regexp_Op1 = Regexp.Op.LEFT_PAREN;
      regexpArray0[0].op = regexp_Op1;
      Regexp.Op regexp_Op2 = Regexp.Op.ANY_CHAR;
      regexp_Op2.isPseudo();
      regexp0.maxCap();
      Regexp.Op.values();
      regexp_Op2.isPseudo();
      Regexp regexp2 = new Regexp(regexp0);
      regexp1.toString();
      int int1 = regexp0.maxCap();
      assertEquals(0, int1);
      assertFalse(regexp0.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = 647;
      regexp0.reinit();
      regexp0.cap = 20;
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean0 = regexp0.equals(regexp1);
      Regexp.Op.values();
      boolean boolean1 = regexp1.equals(regexp_Op0);
      assertFalse(boolean1);
      
      regexp0.maxCap();
      Regexp.Op.values();
      boolean boolean2 = regexp_Op0.isPseudo();
      assertFalse(boolean2 == boolean0);
      
      Regexp regexp2 = new Regexp(regexp1);
      regexp2.toString();
      regexp0.maxCap();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      regexp1.flags = (-1680);
      Regexp.Op.values();
      Regexp.Op regexp_Op1 = Regexp.Op.END_TEXT;
      boolean boolean0 = regexp_Op1.isPseudo();
      assertFalse(boolean0);
      
      regexp1.op = regexp_Op1;
      Regexp regexp2 = new Regexp(regexp1);
      regexp1.toString();
      assertTrue(regexp1.equals((Object)regexp2));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.cap = 944;
      regexp0.min = 68416;
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexp1.subs = regexpArray0;
      int[] intArray1 = new int[9];
      intArray1[1] = 68416;
      intArray1[2] = 68416;
      intArray1[3] = 68416;
      intArray1[4] = 68416;
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      regexp0.op = regexp_Op1;
      intArray1[7] = 68416;
      regexpArray0[1].cap = 68416;
      regexpArray0[0].runes = intArray1;
      regexp1.maxCap();
      Object object0 = new Object();
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.max = 8;
      regexp1.min = 10;
      regexp1.reinit();
      regexp1.toString();
      regexp0.maxCap();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      regexp0.equals(regexp1);
      Regexp regexp2 = new Regexp(regexp0);
      regexp2.toString();
      assertTrue(regexp2.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.min = 68416;
      Object object0 = new Object();
      regexp1.equals(object0);
      Regexp.Op.values();
      regexp1.cap = 2;
      regexp0.flags = 8157;
      regexp0.equals(regexp1);
      regexp_Op0.isPseudo();
      regexp0.maxCap();
      Regexp.Op.values();
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.min = 68416;
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexp1.subs = regexpArray0;
      int[] intArray1 = new int[9];
      intArray1[0] = 68416;
      intArray1[1] = 68416;
      intArray1[2] = 68416;
      intArray1[3] = 68416;
      intArray1[4] = 68416;
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      regexp0.op = regexp_Op1;
      intArray1[7] = 68416;
      intArray1[0] = 68416;
      String string0 = regexp1.toString();
      regexp0.toString();
      String string1 = regexp1.toString();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = (-1820);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1820);
      intArray0[1] = (-1820);
      intArray0[2] = (-1820);
      intArray0[3] = (-1820);
      intArray0[4] = (-1820);
      intArray0[5] = (-1820);
      intArray0[6] = (-1820);
      intArray0[7] = (-1820);
      regexp0.min = (-1820);
      regexp1.runes = intArray0;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexp2.flags = (-1820);
      regexp2.name = "x{";
      regexp1.equals(regexp2);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = 0;
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[4] = regexp2;
      regexp0.subs = regexpArray0;
      regexp1.op = regexp_Op0;
      regexp0.equals(regexp1);
      regexp1.toString();
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexp0.subs = regexpArray0;
      Object object0 = new Object();
      regexp1.equals(object0);
      Object object1 = new Object();
      regexp1.reinit();
      regexp0.equals(object1);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.equals(regexp1);
      Regexp regexp2 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.LEFT_PAREN;
      Regexp.Op regexp_Op2 = Regexp.Op.CHAR_CLASS;
      Regexp regexp3 = new Regexp(regexp_Op2);
      regexp1.equals(regexp_Op1);
      regexp0.toString();
      // Undeclared exception!
      try { 
        regexp3.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.min = 68416;
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexp1.runes = intArray0;
      regexp1.subs = regexpArray0;
      int[] intArray1 = new int[9];
      intArray1[0] = 68416;
      intArray1[1] = 68416;
      intArray1[2] = 68416;
      intArray1[3] = 68416;
      intArray1[4] = 68416;
      intArray1[5] = (-779);
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      regexp0.op = regexp_Op1;
      intArray1[6] = 68416;
      intArray1[7] = 68416;
      intArray1[8] = 68416;
      regexpArray0[1].cap = 68416;
      regexpArray0[0].runes = intArray1;
      regexp1.max = 68416;
      regexp1.name = "com.google.re2j.Regexp";
      regexp1.maxCap();
      regexp0.maxCap();
      Regexp.Op.values();
      Regexp.Op regexp_Op2 = Regexp.Op.END_LINE;
      regexp_Op2.isPseudo();
      Regexp regexp2 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.min = 68416;
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexp1.runes = intArray0;
      regexp1.subs = regexpArray0;
      int[] intArray1 = new int[9];
      intArray1[0] = 68416;
      regexp0.reinit();
      intArray1[1] = 68416;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 68416;
      intArray1[5] = (-779);
      intArray1[6] = 68416;
      intArray1[7] = 68416;
      intArray1[8] = 68416;
      regexpArray0[1].cap = 68416;
      regexpArray0[0].runes = intArray1;
      regexp1.max = 0;
      regexp1.name = "com.google.re2j.Regexp";
      regexp1.maxCap();
      regexp0.maxCap();
      Regexp.Op.values();
      regexp_Op0.isPseudo();
      regexpArray0[0].max = (-320);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      boolean boolean0 = regexp0.equals(regexp0);
      Regexp.Op.valueOf("ANY_CHAR");
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      boolean boolean1 = regexp0.equals("Lisu");
      assertFalse(boolean1 == boolean0);
      
      regexp0.toString();
      assertTrue(regexp0.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.min = 68416;
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexp1.runes = intArray0;
      regexp1.subs = regexpArray0;
      int[] intArray1 = new int[9];
      intArray1[0] = 68416;
      intArray1[1] = 68416;
      intArray1[2] = 68416;
      intArray1[3] = 68416;
      intArray1[4] = 68416;
      intArray1[5] = (-779);
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      regexp0.op = regexp_Op1;
      intArray1[6] = 68416;
      intArray1[7] = 68416;
      intArray1[8] = 68416;
      regexpArray0[1].cap = 68416;
      regexpArray0[0].runes = intArray1;
      regexp1.max = 68416;
      regexp1.name = "com.google.re2j.Regexp";
      regexp1.maxCap();
      regexp0.maxCap();
      Regexp.Op.values();
      regexp_Op0.isPseudo();
      Regexp regexp2 = new Regexp(regexp0);
      regexp2.subs = regexpArray0;
      // Undeclared exception!
      try { 
        regexp2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.max = 5;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      boolean boolean0 = regexp1.equals(regexp0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = (-1329);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      regexp1.reinit();
      regexp0.flags = 361;
      regexp1.equals(regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      
      regexp0.toString();
      assertFalse(regexp0.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      Regexp regexp2 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op.values();
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[3];
      regexp0.reinit();
      intArray0[0] = 2;
      intArray0[1] = (-338);
      regexp0.cap = 2;
      intArray0[2] = (-423);
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.toString();
      regexp1.op = regexp_Op0;
      regexp0.equals(regexp1);
      Regexp.Op.values();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = 0;
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.equals(regexp1);
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexp0.subs = regexpArray0;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-559);
      intArray0[1] = 1023;
      regexp0.runes = intArray0;
      boolean boolean0 = regexp1.equals(regexp0);
      assertTrue(boolean0);
      
      regexp0.toString();
      assertTrue(regexp0.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      regexp1.name = " up7t'-aOX3<2?";
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      String string0 = regexp1.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.min = 68416;
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexp1.runes = intArray0;
      regexp1.subs = regexpArray0;
      int[] intArray1 = new int[9];
      intArray1[0] = 68416;
      intArray1[1] = 68416;
      intArray1[2] = 68416;
      intArray1[3] = 68416;
      intArray1[4] = 68416;
      intArray1[5] = (-779);
      intArray1[6] = 68416;
      intArray1[7] = 68416;
      intArray1[8] = 68416;
      regexpArray0[1].cap = 68416;
      regexpArray0[0].runes = intArray1;
      regexp1.max = 68416;
      regexp1.name = "com.google.re2j.Regexp";
      regexp1.maxCap();
      regexp0.maxCap();
      Regexp.Op.values();
      regexp_Op0.isPseudo();
      regexpArray0[0].max = (-320);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("g%Z_>@X 0v?;p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.g%Z_>@X 0v?;p
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean0 = regexp0.equals(regexp1);
      regexp1.toString();
      regexp0.equals((Object) null);
      Object object0 = new Object();
      Regexp regexp2 = new Regexp(regexp0);
      Object object1 = new Object();
      boolean boolean1 = regexp2.equals(object1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = regexp1.toString();
      assertEquals("\\z", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.op = regexp_Op0;
      regexp0.max = (-88);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = (-91);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      regexp1.toString();
      boolean boolean0 = regexp1.equals(regexp0);
      assertTrue(boolean0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.NO_MATCH;
      regexp1.toString();
      assertTrue(regexp0.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      regexp2.reinit();
      // Undeclared exception!
      try { 
        regexp1.equals(regexp2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.max = 18;
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      String string0 = "Wq/?T1;1^d7_0&RE";
      regexp1.equals(regexp_Op0);
      regexp1.name = "Wq/?T1;1^d7_0&RE";
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = 983;
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp0);
      regexp2.reinit();
      regexp1.equals(regexp0);
      regexp1.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("U2WeZ/K;[Mq%^.d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.U2WeZ/K;[Mq%^.d
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.flags = 0;
      regexp1.max = 0;
      regexp1.reinit();
      regexp1.equals(regexp0);
      regexp0.equals("6hVac%4S");
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "";
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_LINE;
      regexp0.toString();
      regexp0.maxCap();
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp1.reinit();
      regexp_Op1.isPseudo();
      String string0 = "(?P<";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("(?P<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(?P<
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.equals("6EaqER]2");
      regexp1.toString();
      Regexp regexp2 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR;
      Regexp regexp3 = new Regexp(regexp_Op1);
      Regexp regexp4 = new Regexp(regexp3);
      Regexp.Op regexp_Op2 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp5 = new Regexp(regexp_Op2);
      Regexp.Op regexp_Op3 = Regexp.Op.NO_MATCH;
      Regexp regexp6 = new Regexp(regexp_Op3);
      Regexp regexp7 = new Regexp(regexp3);
      regexp3.equals(regexp7);
      regexp2.reinit();
      regexp_Op3.isPseudo();
      Regexp regexp8 = new Regexp(regexp_Op1);
      Object object0 = new Object();
      regexp8.equals("Katakana");
      Regexp.Op.values();
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op.valueOf("BEGIN_LINE");
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      String string0 = regexp1.toString();
      assertEquals("(?s:.)", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexp0.subs = regexpArray0;
      Object object0 = new Object();
      Regexp regexp1 = new Regexp(regexp0);
      Object object1 = new Object();
      boolean boolean0 = regexp1.equals(object1);
      regexp0.reinit();
      regexp0.toString();
      regexp0.maxCap();
      Regexp.Op.values();
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      regexp0.equals(regexp_Op1);
      Regexp.Op regexp_Op2 = Regexp.Op.REPEAT;
      boolean boolean1 = regexp_Op2.isPseudo();
      assertTrue(boolean1 == boolean0);
      
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
      
      Regexp.Op.values();
      regexp0.toString();
      assertFalse(regexp0.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      regexp0.name = "";
      regexp1.equals("Qe$9jz_?NEp)b0ial|");
      regexp2.toString();
      regexp0.maxCap();
      regexp1.reinit();
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      regexp_Op1.isPseudo();
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      Object object0 = new Object();
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp0.equals(regexp1);
      regexp0.reinit();
      regexp1.toString();
      regexp1.maxCap();
      Regexp.Op.values();
      regexp_Op0.isPseudo();
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      regexp_Op1.isPseudo();
      int int0 = regexp0.max;
      Regexp.Op[] regexp_OpArray1 = Regexp.Op.values();
      assertNotSame(regexp_OpArray1, regexp_OpArray0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.equals(regexp1);
      regexp0.toString();
      regexp1.maxCap();
      regexp1.reinit();
      regexp_Op0.isPseudo();
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexp0.equals(regexp2);
      Regexp.Op regexp_Op1 = Regexp.Op.valueOf("VERTICAL_BAR");
      assertSame(regexp_Op1, regexp_Op0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      regexp0.op = regexp_Op1;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp0.equals(regexp2);
      Regexp regexp3 = new Regexp(regexp1);
      regexp3.maxCap();
      Regexp regexp4 = new Regexp(regexp3);
      regexp1.equals(regexp_Op1);
      regexp0.toString();
      Regexp.Op.values();
      regexp_Op1.isPseudo();
      regexp0.maxCap();
      Regexp.Op.values();
      regexp1.equals("\b");
      regexp4.reinit();
      regexp_Op0.isPseudo();
      regexp1.maxCap();
      regexp3.equals(regexp_Op1);
      regexp3.toString();
      regexp4.reinit();
      regexp3.maxCap();
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "zqg/g";
      regexp0.cap = 0;
      regexp0.toString();
      regexp0.flags = (-314);
      boolean boolean0 = regexp0.equals("");
      int[] intArray0 = new int[8];
      intArray0[0] = (-314);
      intArray0[1] = 0;
      intArray0[2] = (-314);
      intArray0[3] = (-314);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      regexp0.reinit();
      regexp0.reinit();
      regexp0.runes = intArray0;
      regexp0.max = (-314);
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      regexp0.op = regexp_Op1;
      regexp0.flags = (-314);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.equals("$");
      regexp1.cap = 2732;
      String string0 = regexp1.toString();
      assertEquals("\\xfffffec6\\x00\\xfffffec6\\xfffffec6\\x00\\x00\\x00\\x00", string0);
      
      Regexp.Op regexp_Op2 = Regexp.Op.VERTICAL_BAR;
      regexp1.op = regexp_Op2;
      Regexp.Op.values();
      Regexp.Op.values();
      regexp1.toString();
      regexp0.reinit();
      regexp0.reinit();
      assertNotSame(regexp0, regexp1);
      
      boolean boolean1 = regexp_Op2.isPseudo();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = 0;
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      regexp1.runes = intArray0;
      regexp1.cap = (-968);
      regexp_Op0.isPseudo();
      boolean boolean0 = regexp_Op0.isPseudo();
      assertFalse(boolean0);
      
      int int0 = regexp1.maxCap();
      assertEquals((-968), int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 955;
      Regexp.Op regexp_Op1 = Regexp.Op.CHAR_CLASS;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp0.equals(regexp_Op1);
      Regexp.Op regexp_Op2 = Regexp.Op.PLUS;
      Regexp regexp3 = new Regexp(regexp_Op2);
      regexp3.reinit();
      regexp3.cap = 1920;
      Regexp.Op regexp_Op3 = Regexp.Op.LITERAL;
      regexp_Op3.isPseudo();
      regexp3.equals(regexp1);
      Regexp.Op.values();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "zqg/g";
      regexp0.cap = 0;
      regexp0.toString();
      regexp0.flags = (-305);
      regexp0.equals("");
      int[] intArray0 = new int[8];
      intArray0[0] = (-305);
      intArray0[1] = 0;
      intArray0[2] = (-305);
      intArray0[3] = (-305);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      regexp0.reinit();
      regexp0.reinit();
      regexp0.runes = intArray0;
      regexp0.max = (-305);
      regexp0.runes = intArray0;
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      regexp0.op = regexp_Op1;
      regexp0.flags = (-305);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.equals("$");
      regexp1.cap = 2732;
      regexp1.toString();
      Regexp.Op regexp_Op2 = Regexp.Op.VERTICAL_BAR;
      regexp1.op = regexp_Op2;
      Regexp.Op.values();
      Regexp.Op.values();
      regexp1.toString();
      regexp0.reinit();
      regexp0.reinit();
      assertNotSame(regexp0, regexp1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 983038;
      intArray0[2] = 983038;
      intArray0[3] = 983038;
      regexp1.max = 983038;
      intArray0[4] = 149;
      regexp1.runes = intArray0;
      regexp0.op = regexp_Op0;
      regexp1.max = 983038;
      regexp1.min = 0;
      boolean boolean0 = regexp1.equals(regexp_Op0);
      assertFalse(boolean0);
      
      Regexp.Op.values();
      Regexp regexp2 = new Regexp(regexp0);
      regexp2.equals(regexp0);
      regexp0.reinit();
      boolean boolean1 = regexp_Op0.isPseudo();
      regexp2.maxCap();
      boolean boolean2 = regexp1.equals(regexp2);
      assertFalse(boolean2 == boolean1);
      
      regexp2.toString();
      regexp0.reinit();
      Regexp regexp3 = new Regexp(regexp0.op);
      int int0 = regexp3.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 65508;
      regexp0.equals(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 110;
      regexp0.cap = 110;
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexp0.subs = regexpArray0;
      regexpArray0[1].name = "";
      regexp0.reinit();
      regexpArray0[4].min = 0;
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      regexp0.reinit();
      Regexp.Op.values();
      regexp0.reinit();
      regexp0.equals((Object) null);
      Object object0 = new Object();
      boolean boolean0 = regexp0.equals(object0);
      String string0 = regexp0.toString();
      assertEquals("(?:)", string0);
      
      boolean boolean1 = regexp_Op0.isPseudo();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[9];
      intArray0[0] = 1244;
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR_NOT_NL;
      regexp0.op = regexp_Op1;
      intArray0[1] = (-657);
      regexp0.toString();
      regexp1.cap = 1244;
      intArray0[2] = 723;
      intArray0[3] = 4851;
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 955;
      regexp0.max = 955;
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      regexp_Op0.isPseudo();
      regexp_Op0.isPseudo();
      boolean boolean0 = regexp_Op0.isPseudo();
      assertFalse(boolean0);
      
      regexp_Op0.isPseudo();
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 8126;
      int[] intArray0 = new int[4];
      regexp0.name = "(?:";
      intArray0[0] = 8126;
      intArray0[1] = 8126;
      intArray0[2] = 8126;
      intArray0[3] = 8126;
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean1 = regexp1.equals(regexp0);
      assertTrue(boolean1);
      
      Regexp.Op.values();
      Regexp.Op.values();
      regexp0.reinit();
      Object object0 = new Object();
      regexp0.equals(object0);
      assertFalse(regexp0.equals((Object)regexp1));
      
      boolean boolean2 = regexp_Op0.isPseudo();
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.runes = null;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.flags = 3144;
      regexp1.equals("");
      Object object0 = new Object();
      regexp1.equals(object0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean0 = regexp0.equals(regexp1);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-6365);
      intArray0[1] = (-6365);
      intArray0[2] = (-6365);
      intArray0[3] = (-6365);
      intArray0[4] = (-6365);
      intArray0[5] = 44;
      intArray0[6] = (-6365);
      intArray0[7] = (-6365);
      regexp0.runes = intArray0;
      regexp0.toString();
      regexp1.min = (-6365);
      regexp1.reinit();
      regexp0.min = (-6365);
      regexp0.max = (-6365);
      regexp0.cap = (-6365);
      regexp1.min = 0;
      regexp0.reinit();
      regexp1.reinit();
      regexp0.reinit();
      regexp0.maxCap();
      String string0 = regexp1.toString();
      assertEquals("[^\\x00-\\x{10FFFF}]", string0);
      
      Regexp.Op.values();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      regexp1.reinit();
      assertTrue(regexp0.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.ALTERNATE;
      regexp0.op = regexp_Op1;
      regexp1.runes = null;
      regexp1.reinit();
      regexp1.op = regexp_Op0;
      regexp1.flags = (-3634);
      regexp1.maxCap();
      regexp1.runes = null;
      regexp0.reinit();
      regexp1.reinit();
      regexp1.reinit();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.op = regexp_Op0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      assertTrue(regexp1.equals((Object)regexp0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-129);
      intArray0[2] = 3575;
      intArray0[3] = 120198;
      intArray0[4] = (-4137);
      intArray0[5] = (-4216);
      intArray0[6] = 0;
      regexp0.runes = intArray0;
      regexp0.toString();
      regexp1.reinit();
      regexp1.equals(regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      
      boolean boolean0 = regexp_Op0.isPseudo();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.min = 68416;
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexp1.runes = intArray0;
      regexp1.subs = regexpArray0;
      int[] intArray1 = new int[9];
      intArray1[0] = 154;
      intArray1[1] = 68416;
      intArray1[2] = 68416;
      intArray1[3] = 68416;
      intArray1[4] = 154;
      intArray1[5] = (-779);
      intArray1[6] = 154;
      intArray1[7] = 154;
      intArray1[8] = 68416;
      regexpArray0[0].runes = intArray1;
      regexp1.max = 154;
      regexp1.name = "com.google.re2j.Regexp";
      regexp1.maxCap();
      regexp0.maxCap();
      Regexp.Op.values();
      regexp_Op0.isPseudo();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("g%Z_>@X 0v?;p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.g%Z_>@X 0v?;p
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      regexp_Op0.isPseudo();
      regexp_Op0.isPseudo();
      Regexp.Op.valueOf("CONCAT");
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp_Op0.isPseudo();
      Regexp.Op.valueOf("CONCAT");
      regexp0.reinit();
      regexp0.equals(regexp_Op0);
      regexp0.maxCap();
      regexp0.maxCap();
      String string0 = "@|k @6#L9uhz";
      regexp0.name = "@|k @6#L9uhz";
      regexp_Op0.isPseudo();
      regexp0.toString();
      regexp0.maxCap();
      regexp0.name = "$";
      regexp0.maxCap();
      regexp0.toString();
      regexp0.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("@|k @6#L9uhz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.@|k @6#L9uhz
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "9`T%ru3kX,Rn=kgLy";
      regexp0.cap = 0;
      regexp0.equals(regexp_Op0);
      regexp0.reinit();
      regexp0.reinit();
      regexp0.equals(regexp_Op0);
      regexp0.toString();
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 983038;
      intArray0[2] = 983038;
      intArray0[3] = 983038;
      regexp1.max = 983038;
      intArray0[4] = 149;
      regexp1.runes = intArray0;
      regexp0.op = regexp_Op0;
      regexp1.max = 983038;
      regexp1.min = 0;
      regexp1.equals(regexp_Op0);
      Regexp.Op.values();
      regexp0.toString();
      regexp0.reinit();
      regexp1.reinit();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("dz}`#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.dz}`#
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      regexp_Op0.isPseudo();
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = (-2752);
      regexp0.maxCap();
      regexp0.min = 0;
      regexp_Op0.isPseudo();
      boolean boolean0 = regexp_Op0.isPseudo();
      assertTrue(boolean0);
      
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = 0;
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      regexp1.runes = intArray0;
      regexp1.cap = (-968);
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 0;
      regexp1.runes = intArray1;
      regexp1.cap = 0;
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.equals(regexp_Op0);
      Object object0 = new Object();
      regexp0.equals(object0);
      regexp0.cap = 0;
      regexp0.reinit();
      regexp0.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.$
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.max = 592;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = (-2348);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Regexp regexp0 = null;
      Regexp regexp1 = null;
      try {
        regexp1 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
