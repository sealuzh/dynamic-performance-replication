/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 23:04:50 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Edge;
import wheel.asm.Frame;
import wheel.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("{N`{A*}?fyEyS");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      ClassReader classReader1 = new ClassReader(classReader0.b, 609, 4);
      // Undeclared exception!
      try { 
        classReader1.copyPool((ClassWriter) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      char[] charArray0 = new char[4];
      charArray0[1] = 'i';
      ClassReader classReader1 = new ClassReader(classReader0.b, 460, (-1120));
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter(classReader1, 179);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      ClassWriter classWriter0 = new ClassWriter(333);
      classReader0.accept((ClassVisitor) classWriter0, 109);
      assertEquals(33, classReader0.getAccess());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      classReader0.getClassName();
      classReader0.getClassName();
      ClassWriter classWriter0 = new ClassWriter((-1679));
      Attribute attribute0 = new Attribute("LocalVariableTable");
      ClassReader classReader1 = new ClassReader(classReader0.b);
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader(classReader0.b, 2, 101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 45977
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      classReader0.getClassName();
      classReader0.getClassName();
      ClassWriter classWriter0 = new ClassWriter((-1679));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Attribute attribute0 = new Attribute("org/apache/commons/io/filefilter/HiddenFileFilter");
      ClassReader classReader1 = new ClassReader(classReader0.b);
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      classReader1.getInterfaces();
      charArray0[1] = 's';
      charArray0[2] = '-';
      charArray0[3] = '0';
      classReader0.copyPool(classWriter0);
      classReader1.accept((ClassVisitor) classWriter0, 2);
      classReader0.copyPool(classWriter0);
      assertNotSame(classReader0, classReader1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      assertEquals(609, classReader0.header);
      
      String string0 = classReader0.getSuperName();
      assertNotNull(string0);
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = classReader0.readByte(51);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.FileFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 111);
      Attribute[] attributeArray0 = new Attribute[1];
      Attribute attribute0 = new Attribute("org.apache.commons.io.filefilter.FileFileFilter");
      Attribute attribute1 = attribute0.next;
      attributeArray0[0] = null;
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, (-205));
      String string0 = classReader0.getSuperName();
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      classReader0.getClassName();
      ClassWriter classWriter0 = new ClassWriter((-1679));
      ClassReader classReader1 = new ClassReader(classReader0.b);
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      classReader0.copyPool(classWriter0);
      classReader0.accept((ClassVisitor) classWriter0, 1);
      assertNotSame(classReader0, classReader1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "LocalVariableTable");
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      ClassReader classReader1 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      classReader0.getInterfaces();
      int int0 = classReader0.getAccess();
      assertEquals(33, int0);
      assertEquals(609, classReader0.header);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      classReader0.getClassName();
      classReader0.getClassName();
      ClassWriter classWriter0 = new ClassWriter(2758);
      Attribute attribute0 = new Attribute("org/apache/commons/io/filefilter/HiddenFileFilter");
      ClassReader classReader1 = new ClassReader(classReader0.b);
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = '6';
      charArray0[2] = '*';
      charArray0[3] = '8';
      charArray0[4] = 'D';
      charArray0[5] = 'r';
      charArray0[6] = '^';
      charArray0[7] = '9';
      // Undeclared exception!
      try { 
        classReader1.readConst(8, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      assertEquals(609, classReader0.header);
      
      classReader0.getClassName();
      classReader0.getClassName();
      ClassWriter classWriter0 = new ClassWriter(2758);
      Attribute attribute0 = new Attribute("org/apache/commons/io/filefilter/HiddenFileFilter");
      ClassReader classReader1 = new ClassReader(classReader0.b);
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = '6';
      charArray0[2] = '*';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Code");
      String string0 = classReader0.getSuperName();
      assertNotNull(string0);
      
      String string1 = classReader0.getClassName();
      assertEquals("org/apache/commons/io/filefilter/HiddenFileFilter", string1);
      
      int int0 = classReader1.getItem(1);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 4, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1175
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      classReader0.getClassName();
      ClassReader classReader1 = new ClassReader(classReader0.b, 8, 8);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("LocalVariableTypeTable");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      assertEquals(609, classReader0.header);
      
      String string0 = classReader0.getClassName();
      assertEquals("org/apache/commons/io/filefilter/HiddenFileFilter", string0);
      
      ClassWriter classWriter0 = new ClassWriter(195);
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader1.copyPool(classWriter0);
      int int0 = classReader0.readByte(2);
      assertEquals(186, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      classReader0.getClassName();
      ClassWriter classWriter0 = new ClassWriter((-1679));
      ClassWriter classWriter1 = new ClassWriter(classReader0, 2);
      classReader0.accept((ClassVisitor) classWriter1, 2);
      classReader0.copyPool(classWriter1);
      classReader0.accept((ClassVisitor) classWriter0, 8);
      // Undeclared exception!
      try { 
        classReader0.readLong(1110);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1110
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      ClassReader classReader1 = new ClassReader(classReader0.b, 609, 56);
      // Undeclared exception!
      try { 
        classReader1.getInterfaces();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      ClassReader classReader1 = new ClassReader(classReader0.b);
      Object object0 = new Object();
      ClassReader classReader2 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(classReader1, 8);
      classReader0.accept((ClassVisitor) classWriter0, (-2674));
      assertNotSame(classReader1, classReader0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = 'm';
      charArray0[2] = '*';
      charArray0[3] = '%';
      charArray0[4] = 'O';
      charArray0[5] = '{';
      charArray0[6] = 'u';
      charArray0[7] = ' ';
      charArray0[8] = 'H';
      // Undeclared exception!
      try { 
        classReader0.readConst(3, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      char char0 = 'i';
      int int0 = (-444);
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      classReader0.copyPool((ClassWriter) null);
      charArray0[1] = char0;
      classReader0.readConst(int0, charArray0);
      classReader0.getSuperName();
      classReader0.getClassName();
      classReader0.getSuperName();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(1);
      classReader0.accept((ClassVisitor) classWriter0, (-2386));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(1);
      classReader0.accept((ClassVisitor) classWriter0, 1);
      Label[] labelArray0 = new Label[3];
      // Undeclared exception!
      try { 
        classReader0.readLabel(2343, labelArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2343
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(1);
      ClassWriter classWriter1 = new ClassWriter(classReader0, 4);
      classReader0.accept((ClassVisitor) classWriter1, 1);
      assertEquals(2, ClassReader.SKIP_DEBUG);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(1);
      classReader0.accept((ClassVisitor) classWriter0, 2);
      classReader0.readByte(1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(1);
      ClassReader classReader1 = new ClassReader(classReader0.b, 0, 4);
      assertEquals(7802, classReader1.header);
      
      classReader1.copyPool(classWriter0);
      classReader0.getInterfaces();
      String string0 = classReader1.getSuperName();
      assertEquals("java/lang/Object", string0);
  }
}
