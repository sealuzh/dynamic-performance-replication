/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:29:57 GMT 2018
 */

package com.google.gson.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.internal.LinkedTreeMap;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinkedTreeMap_ESTest extends LinkedTreeMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      int int0 = linkedTreeMap_EntrySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>((Comparator<? super String>) null);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.spliterator();
      boolean boolean0 = linkedTreeMap_EntrySet0.contains(linkedTreeMap0);
      boolean boolean1 = linkedTreeMap_EntrySet0.remove((Object) null);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>();
      linkedTreeMap0.remove((Object) null);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedTreeMap<Integer, Integer> linkedTreeMap0 = new LinkedTreeMap<Integer, Integer>();
      Integer.getInteger("com.google.gson.internal.LinkedTreeMap");
      Integer.toUnsignedString((-2202));
      linkedTreeMap0.findByObject((Object) null);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.clear();
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      linkedTreeMap0.get((Object) null);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      int int0 = linkedTreeMap_KeySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      Integer integer0 = Integer.getInteger("", 1979);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.merge(integer0, "", biFunction0);
      linkedTreeMap0.keySet();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.remove("");
      assertEquals(1, linkedTreeMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedTreeMap<String, Integer> linkedTreeMap0 = new LinkedTreeMap<String, Integer>((Comparator<? super String>) null);
      linkedTreeMap0.clear();
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = linkedTreeMap0.find("XR", true);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      linkedTreeMap0.replaceAll(biFunction0);
      assertEquals(1, linkedTreeMap0.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, false);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      String string0 = "";
      linkedTreeMap0.putIfAbsent("", "");
      Integer integer0 = new Integer((-2));
      linkedTreeMap0.removeInternalByKey(integer0);
      Integer.getInteger("");
      linkedTreeMap0.removeInternalByKey((Object) null);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = null;
      try {
        linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>((LinkedTreeMap.Node<Object, Object>) null, "", (LinkedTreeMap.Node<Object, Object>) null, (LinkedTreeMap.Node<Object, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Integer>();
      linkedTreeMap_Node0.equals("LE*=p");
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node1 = linkedTreeMap_Node0.first();
      linkedTreeMap_Node1.getKey();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, String>();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      linkedTreeMap_Node0.right = linkedTreeMap_Node1;
      Map.Entry.comparingByKey();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node3 = linkedTreeMap_Node2.first();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>(comparator1);
      linkedTreeMap0.put("LE*=p", (String) null);
      linkedTreeMap_Node2.toString();
      linkedTreeMap0.find(linkedTreeMap_Node3, true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        linkedTreeMap_KeySet0.add("LA,3hSH8}Aexod-0:");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Integer> linkedTreeMap0 = new LinkedTreeMap<Object, Integer>(comparator0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.replaceAll(biFunction0);
      linkedTreeMap0.size = (-3597);
      linkedTreeMap0.entrySet();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.clear();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      Integer integer0 = new Integer(1);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(linkedTreeMap_EntrySet0, integer0);
      boolean boolean0 = linkedTreeMap_EntrySet0.remove(abstractMap_SimpleEntry0);
      assertEquals(0, linkedTreeMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>((Comparator<? super Object>) null);
      linkedTreeMap0.comparator = null;
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        linkedTreeMap0.merge((Object) null, "=", biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      Integer integer0 = Integer.valueOf(0);
      Integer.compare(0, (-1));
      linkedTreeMap0.containsKey(integer0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("=H1((X+^+K$ ~", "Qs\"3I9K31hS1Z");
      linkedTreeMap0.putAll(hashMap0);
      linkedTreeMap0.put("]BnSKEZfm]>", "]BnSKEZfm]>");
      linkedTreeMap0.isEmpty();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      // Undeclared exception!
      try { 
        linkedTreeMap_KeySet0.add("iq/\u0001H");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.computeIfPresent("", biFunction0);
      linkedTreeMap0.isEmpty();
      linkedTreeMap0.put("N", "\"LQ,b,`f<YuLefl");
      linkedTreeMap0.find("DTW", false);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, false);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.get("XR");
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = linkedTreeMap0.find("XR", true);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
      linkedTreeMap_Node1.next = linkedTreeMap_Node0;
      linkedTreeMap_Node1.prev = linkedTreeMap_Node0;
      linkedTreeMap_Node1.parent = linkedTreeMap_Node0;
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>();
      linkedTreeMap1.entrySet();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap1.new KeySet();
      Object object0 = new Object();
      LinkedTreeMap<String, Object> linkedTreeMap2 = new LinkedTreeMap<String, Object>();
      Object object1 = new Object();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet1 = linkedTreeMap0.new KeySet();
      boolean boolean0 = linkedTreeMap_KeySet1.contains("XR");
      assertEquals(1, linkedTreeMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Integer> linkedTreeMap0 = new LinkedTreeMap<String, Integer>(comparator0);
      Collection<Integer> collection0 = linkedTreeMap0.values();
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Integer>();
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, Integer>();
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node2 = linkedTreeMap_Node1.last();
      linkedTreeMap_Node0.right = linkedTreeMap_Node2;
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, false);
      LinkedTreeMap<Integer, Object> linkedTreeMap1 = new LinkedTreeMap<Integer, Object>();
      linkedTreeMap1.get(collection0);
      assertEquals((-1), linkedTreeMap0.size());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap2 = new LinkedTreeMap<String, Object>(comparator1);
      linkedTreeMap2.containsKey("key == null");
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node3 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node4 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node3, "", linkedTreeMap_Node3, linkedTreeMap_Node3);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node5 = linkedTreeMap_Node4.first();
      linkedTreeMap_Node5.getValue();
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, String> linkedTreeMap3 = new LinkedTreeMap<String, String>(comparator2);
      linkedTreeMap3.removeInternalByKey((Object) null);
      assertEquals(0, linkedTreeMap3.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Integer>();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, Integer>(linkedTreeMap_Node1, linkedTreeMap0, linkedTreeMap_Node0, linkedTreeMap_Node1);
      LinkedTreeMap linkedTreeMap1 = (LinkedTreeMap)linkedTreeMap_Node2.key;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Object, Integer>();
      linkedTreeMap_Node2.equals(linkedTreeMap_Node3);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, String> linkedTreeMap2 = new LinkedTreeMap<Object, String>(comparator1);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        linkedTreeMap0.merge(linkedTreeMap1, linkedTreeMap2, biFunction0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.LinkedTreeMap is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, String> linkedTreeMap1 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.putAll(linkedTreeMap1);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap1.replaceAll(biFunction0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedTreeMap1);
      predicate0.negate();
      linkedTreeMap0.put("p", "");
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = linkedTreeMap0.find(",f]22f", true);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, true);
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      linkedTreeMap0.find("", true);
      LinkedTreeMap<String, String> linkedTreeMap1 = new LinkedTreeMap<String, String>(comparator0);
      linkedTreeMap0.containsKey(linkedTreeMap1);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap1.put("C1=>V_r}|m^N.uB(h", "*q.fm))6?tl'&$p\"");
      linkedTreeMap1.putAll(linkedTreeMap0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedTreeMap_EntrySet0);
      predicate0.negate();
      // Undeclared exception!
      try { 
        linkedTreeMap0.find((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, String>();
      linkedTreeMap_Node0.value = "JfcWwZ]v{;f";
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node1 = linkedTreeMap_Node0.first();
      assertNotNull(linkedTreeMap_Node1);
      
      Integer integer0 = new Integer(39);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, String>();
      Object object0 = linkedTreeMap_Node2.key;
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Integer, String>();
      linkedTreeMap_Node3.prev = linkedTreeMap_Node1;
      String string0 = linkedTreeMap_Node3.setValue("JfcWwZ]v{;f");
      assertNull(string0);
      
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node4 = new LinkedTreeMap.Node<Integer, String>(linkedTreeMap_Node3, integer0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      boolean boolean0 = linkedTreeMap_Node1.equals(linkedTreeMap_Node0);
      assertTrue(boolean0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Integer> linkedTreeMap0 = new LinkedTreeMap<Object, Integer>(comparator0);
      Object object1 = new Object();
      linkedTreeMap0.findByObject(linkedTreeMap_Node0);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node5 = new LinkedTreeMap.Node<String, String>();
      boolean boolean1 = linkedTreeMap_Node5.equals((Object) null);
      assertFalse(boolean1);
      
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node6 = new LinkedTreeMap.Node<Object, Object>();
      linkedTreeMap_Node6.first();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      assertEquals(0, linkedTreeMap0.size());
      assertEquals(0, linkedTreeMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.put("", ",S{Lz'");
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.put("$8e3.5_\".u|_IG#h", "");
      linkedTreeMap0.putIfAbsent(",S{Lz'", (String) null);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.size = 3593;
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>(comparator1);
      linkedTreeMap1.removeInternalByKey((Object) null);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.remove(linkedTreeMap1);
      // Undeclared exception!
      try { 
        linkedTreeMap0.computeIfPresent("J:QLBu}w0@]10", (BiFunction<? super String, ? super String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node0, ",S{Lz'", linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap0.root = linkedTreeMap_Node1;
      linkedTreeMap0.putIfAbsent("nR", (String) null);
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>(comparator1);
      linkedTreeMap1.clear();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      assertEquals(1, linkedTreeMap0.size());
      
      Integer integer0 = new Integer(0);
      LinkedTreeMap<String, String> linkedTreeMap2 = new LinkedTreeMap<String, String>();
      linkedTreeMap2.replace("6:).'s=yoX##>", "nR", ",f]22f");
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Integer> linkedTreeMap3 = new LinkedTreeMap<Object, Integer>(comparator2);
      assertEquals(0, linkedTreeMap3.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, Object>(linkedTreeMap_Node1, linkedTreeMap_Node1, linkedTreeMap_Node1, linkedTreeMap_Node1);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node3 = linkedTreeMap_Node2.first();
      linkedTreeMap_Node3.first();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      linkedTreeMap0.keySet();
      linkedTreeMap_Node0.equals(linkedTreeMap_Node3);
      String string0 = "V-Tk8}FAL&";
      try { 
        Integer.valueOf("V-Tk8}FAL&");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"V-Tk8}FAL&\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>(comparator0);
      linkedTreeMap0.clear();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      Integer integer0 = new Integer((-66));
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>("pnn~0+?wY#9", integer0);
      linkedTreeMap_EntrySet0.contains(abstractMap_SimpleEntry0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = linkedTreeMap_Node0.first();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node1, "pnn~0+?wY#9", linkedTreeMap_Node1, linkedTreeMap_Node0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = linkedTreeMap0.find("nR", true);
      linkedTreeMap0.put(",f]22f", ",SHLC'");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, false);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node0, ",SHLC'", linkedTreeMap_Node1, linkedTreeMap_Node1);
      linkedTreeMap0.get(linkedTreeMap_Node2);
      linkedTreeMap0.root = linkedTreeMap_Node2;
      linkedTreeMap0.put("]<!u", "A_1;~i0(0_p");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        linkedTreeMap0.put("5Qs.nPARmZq", "5Qs.nPARmZq");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = linkedTreeMap0.find("DTW", true);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.parallelStream();
      linkedTreeMap_EntrySet0.remove(linkedTreeMap_Node0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, Integer>();
      // Undeclared exception!
      try { 
        linkedTreeMap0.replaceAll((BiFunction<? super String, ? super String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, String> linkedTreeMap0 = new LinkedTreeMap<Integer, String>(comparator0);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Integer>();
      Object object0 = new Object();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Integer>(linkedTreeMap_Node0, object0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap_Node0.right = linkedTreeMap_Node1;
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node2 = linkedTreeMap_Node0.last();
      linkedTreeMap0.containsValue(linkedTreeMap_Node2);
      LinkedTreeMap<Integer, Object> linkedTreeMap1 = new LinkedTreeMap<Integer, Object>();
      linkedTreeMap0.findByObject(linkedTreeMap1);
      LinkedTreeMap<Object, Object> linkedTreeMap2 = new LinkedTreeMap<Object, Object>();
      linkedTreeMap2.clear();
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Integer, Object>();
      try { 
        Integer.valueOf("LI#-96ruUz.1\u0001bCrI", 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 0 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = linkedTreeMap0.find("XR", true);
      linkedTreeMap0.put(",f]22f", ",S{Lz'");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      Object object0 = new Object();
      LinkedTreeMap<String, Integer> linkedTreeMap1 = new LinkedTreeMap<String, Integer>();
      linkedTreeMap1.keySet();
      linkedTreeMap0.put("", "");
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, String>();
      Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap<Integer, Integer> linkedTreeMap2 = new LinkedTreeMap<Integer, Integer>();
      linkedTreeMap_EntrySet0.contains(linkedTreeMap2);
      // Undeclared exception!
      try { 
        linkedTreeMap_EntrySet0.add(linkedTreeMap_Node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, String>();
      Map.Entry.comparingByValue();
      String string0 = "";
      linkedTreeMap_Node0.value = "";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>(comparator0);
      linkedTreeMap0.find("=", false);
      linkedTreeMap0.put("=", ",f]22f");
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      linkedTreeMap0.merge("", "", biFunction0);
      LinkedTreeMap<String, String> linkedTreeMap2 = new LinkedTreeMap<String, String>(comparator1);
      linkedTreeMap1.removeInternalByKey(linkedTreeMap2);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      Object object0 = new Object();
      linkedTreeMap_KeySet0.remove(object0);
      LinkedTreeMap<String, Integer> linkedTreeMap3 = new LinkedTreeMap<String, Integer>();
      linkedTreeMap3.keySet();
      linkedTreeMap2.put("", (String) null);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = null;
      try {
        linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, String>((LinkedTreeMap.Node<String, String>) null, "", (LinkedTreeMap.Node<String, String>) null, linkedTreeMap_Node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.find("XR", true);
      linkedTreeMap0.put(",f]22f", ",S{Lz'");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap0.putIfAbsent("XR", "");
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, Integer>();
      // Undeclared exception!
      try { 
        linkedTreeMap0.replaceAll((BiFunction<? super String, ? super String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedTreeMap<String, Integer> linkedTreeMap1 = new LinkedTreeMap<String, Integer>();
      linkedTreeMap1.keySet();
      Set<String> set0 = linkedTreeMap1.keySet();
      assertNotNull(set0);
      
      Integer integer0 = new Integer(0);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap_Node0.first();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      Object object0 = new Object();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap2 = new LinkedTreeMap<String, Object>(comparator1);
      LinkedTreeMap<String, Object> linkedTreeMap3 = new LinkedTreeMap<String, Object>();
      Set<Map.Entry<String, Object>> set1 = (Set<Map.Entry<String, Object>>)linkedTreeMap2.entrySet();
      assertEquals(0, set1.size());
      
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, String>();
      String string0 = linkedTreeMap_Node2.toString();
      assertEquals("null=null", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, String>();
      linkedTreeMap_Node0.value = "yCjB(]WH";
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node1 = linkedTreeMap_Node0.first();
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, Integer>();
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node3 = new LinkedTreeMap.Node<String, Integer>(linkedTreeMap_Node2, "JZ?O[4b)0T>U2:]FGX.g", linkedTreeMap_Node2, linkedTreeMap_Node2);
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node4 = linkedTreeMap_Node3.parent;
      assertNotNull(linkedTreeMap_Node4);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(linkedTreeMap_Node4);
      Integer integer0 = new Integer(39);
      linkedTreeMap_Node3.equals(integer0);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node5 = new LinkedTreeMap.Node<Object, String>();
      Object object0 = linkedTreeMap_Node5.key;
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node6 = new LinkedTreeMap.Node<Integer, String>();
      linkedTreeMap_Node6.value = "yCjB(]WH";
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node7 = linkedTreeMap_Node1.last();
      assertNotNull(linkedTreeMap_Node7);
      
      boolean boolean0 = linkedTreeMap_Node6.equals(linkedTreeMap_Node5);
      assertFalse(boolean0);
      
      Integer integer1 = new Integer(4072);
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node8 = new LinkedTreeMap.Node<Integer, String>();
      boolean boolean1 = linkedTreeMap_Node7.equals(linkedTreeMap_Node0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Integer> linkedTreeMap0 = new LinkedTreeMap<Object, Integer>(comparator0);
      Object object1 = new Object();
      linkedTreeMap0.findByObject(linkedTreeMap_Node0);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node9 = new LinkedTreeMap.Node<String, String>();
      boolean boolean2 = linkedTreeMap_Node9.equals((Object) null);
      assertFalse(boolean2 == boolean1);
      
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      assertEquals(0, linkedTreeMap_KeySet0.size());
      
      LinkedTreeMap<String, String> linkedTreeMap1 = new LinkedTreeMap<String, String>();
      linkedTreeMap1.find("r+>Fxy1x<N", false);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node10 = new LinkedTreeMap.Node<Object, String>();
      Object object2 = linkedTreeMap_Node10.key;
      linkedTreeMap1.findByObject((Object) null);
      assertEquals(0, linkedTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Integer>();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Integer>();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, Integer>(linkedTreeMap_Node0, linkedTreeMap_Node0, linkedTreeMap_Node1, linkedTreeMap_Node1);
      linkedTreeMap_Node1.prev = linkedTreeMap_Node2;
      linkedTreeMap_Node0.next = linkedTreeMap_Node2;
      Integer integer0 = new Integer((-19));
      Integer.divideUnsigned((-1063), 17);
      linkedTreeMap_Node2.setValue(integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Object, Integer>(linkedTreeMap_Node0, linkedTreeMap_Node0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node4 = linkedTreeMap_Node3.first();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node5 = new LinkedTreeMap.Node<String, Object>();
      linkedTreeMap_Node5.setValue((Object) null);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node6 = new LinkedTreeMap.Node<String, Object>(linkedTreeMap_Node5, (String) null, linkedTreeMap_Node5, linkedTreeMap_Node5);
      linkedTreeMap_Node6.toString();
      Map.Entry.comparingByKey();
      boolean boolean0 = linkedTreeMap_Node6.equals(linkedTreeMap_Node0.next);
      assertSame(linkedTreeMap_Node0.next, linkedTreeMap_Node4);
      assertFalse(boolean0);
      
      linkedTreeMap_Node5.toString();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node7 = new LinkedTreeMap.Node<Object, Integer>(linkedTreeMap_Node0.next, "", linkedTreeMap_Node3, linkedTreeMap_Node0.next);
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>();
      linkedTreeMap0.entrySet();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>(comparator1);
      linkedTreeMap1.clear();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node8 = new LinkedTreeMap.Node<Object, Object>();
      Object object0 = linkedTreeMap_Node8.setValue(linkedTreeMap_Node2);
      assertNull(object0);
      
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node9 = linkedTreeMap_Node8.prev;
      linkedTreeMap1.modCount = (-19);
      boolean boolean1 = linkedTreeMap_Node9.equals(linkedTreeMap_Node8);
      assertTrue(boolean1);
      
      LinkedTreeMap<Object, String> linkedTreeMap2 = new LinkedTreeMap<Object, String>();
      linkedTreeMap2.findByObject(linkedTreeMap1);
      assertEquals(0, linkedTreeMap1.size());
      
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      Object object1 = new Object();
      boolean boolean2 = linkedTreeMap_KeySet0.contains(object1);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, String>();
      Map.Entry.comparingByValue();
      linkedTreeMap_Node0.value = "";
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node1 = linkedTreeMap_Node0.first();
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node2 = linkedTreeMap_Node1.first();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node3 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node4 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node3, ".S>(-^&LH", linkedTreeMap_Node3, linkedTreeMap_Node3);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node5 = new LinkedTreeMap.Node<String, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, String> linkedTreeMap0 = new LinkedTreeMap<Integer, String>();
      boolean boolean0 = linkedTreeMap_Node5.equals(linkedTreeMap_Node2);
      assertFalse(boolean0);
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>(comparator1);
      linkedTreeMap1.entrySet();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node6 = new LinkedTreeMap.Node<Object, Object>();
      linkedTreeMap0.remove((Object) linkedTreeMap_Node3);
      assertTrue(linkedTreeMap_Node3.equals((Object)linkedTreeMap_Node5));
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>(comparator0);
      linkedTreeMap0.replace("qB!!]B{*RxNM=Vse", "qB!!]B{*RxNM=Vse", "qB!!]B{*RxNM=Vse");
      linkedTreeMap0.put("S", (String) null);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>(comparator1);
      linkedTreeMap1.entrySet();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Integer>();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Integer>(linkedTreeMap_Node0, linkedTreeMap_Node0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node2 = linkedTreeMap_Node1.last();
      linkedTreeMap_Node1.left = linkedTreeMap_Node2;
      // Undeclared exception!
      linkedTreeMap_Node2.first();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string0 = "com.google.gson.internal.LinkedTreeMap";
      String string1 = ",f]22f";
      linkedTreeMap0.put("com.google.gson.internal.LinkedTreeMap", ",f]22f");
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, Object>(linkedTreeMap_Node0, "com.google.gson.internal.LinkedTreeMap", linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap0.findByEntry(linkedTreeMap_Node1);
      linkedTreeMap0.putAll(linkedTreeMap0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        linkedTreeMap0.putIfAbsent((String) null, ",S{Lz'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = linkedTreeMap0.find("nR", true);
      String string0 = ",f]22f";
      linkedTreeMap0.put(",f]22f", ",S{Lz'");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node0, ",f]22f", linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, false);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node0, ",S{Lz'", linkedTreeMap_Node1, linkedTreeMap_Node1);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node3 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap0.get(linkedTreeMap_Node2);
      linkedTreeMap0.put("]<!u", "A1;A~i0(0_p");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      linkedTreeMap_Node3.toString();
      linkedTreeMap_Node1.next = linkedTreeMap_Node3;
      LinkedTreeMap<String, String> linkedTreeMap1 = new LinkedTreeMap<String, String>();
      // Undeclared exception!
      try { 
        linkedTreeMap1.putAll(linkedTreeMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = linkedTreeMap0.find("nR", true);
      String string0 = ",S{Lz'";
      linkedTreeMap0.put(",f]22f", ",S{Lz'");
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, false);
      linkedTreeMap0.get((Object) null);
      // Undeclared exception!
      try { 
        linkedTreeMap0.putAll(linkedTreeMap0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      String string0 = ",f]22f";
      linkedTreeMap0.put(",f]22f", ",S{Lz'");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.put("nTR", ",f]22f");
      linkedTreeMap0.putIfAbsent(",S{Lz'", (String) null);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>(comparator1);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap<String, String> linkedTreeMap2 = new LinkedTreeMap<String, String>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      linkedTreeMap_EntrySet0.removeIf(predicate1);
      predicate1.negate();
      try { 
        Integer.decode("nTR");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"nTR\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = linkedTreeMap0.find("nR", true);
      linkedTreeMap0.put(",f]22f", ",S{Lz'");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, false);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node0, ",S{Lz'", linkedTreeMap_Node1, linkedTreeMap_Node1);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node3 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap0.get(linkedTreeMap_Node2);
      linkedTreeMap0.put("]<!u", "A1;A~i0(0_p");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      linkedTreeMap0.put("5Qs.nPARmZq", "5Qs.nPARmZq");
      linkedTreeMap_Node3.toString();
      linkedTreeMap_Node1.next = linkedTreeMap_Node3;
      LinkedTreeMap<String, String> linkedTreeMap1 = new LinkedTreeMap<String, String>();
      linkedTreeMap1.putAll(linkedTreeMap0);
      LinkedTreeMap<String, Object> linkedTreeMap2 = new LinkedTreeMap<String, Object>(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      LinkedTreeMap<Object, String> linkedTreeMap3 = new LinkedTreeMap<Object, String>(comparator1);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node4 = linkedTreeMap3.header;
      Object object0 = new Object();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node5 = new LinkedTreeMap.Node<Object, String>();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node6 = new LinkedTreeMap.Node<Object, String>(linkedTreeMap_Node4, object0, linkedTreeMap_Node5, linkedTreeMap_Node5);
      linkedTreeMap3.root = linkedTreeMap_Node6;
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap3.new EntrySet();
      Integer integer0 = new Integer((-498));
      linkedTreeMap_EntrySet0.contains(linkedTreeMap_Node2);
      Integer integer1 = new Integer(1);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap4 = new LinkedTreeMap<Object, Object>(comparator2);
      linkedTreeMap4.removeInternalByKey(integer1);
      LinkedTreeMap<Integer, String> linkedTreeMap5 = new LinkedTreeMap<Integer, String>();
      String string0 = linkedTreeMap5.remove((Object) ",f]22f");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = linkedTreeMap0.find("nR", true);
      linkedTreeMap0.put(",f]22f", ",SHLC'");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node0, ",SHLC'", linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, false);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node0, ",SHLC'", linkedTreeMap_Node1, linkedTreeMap_Node1);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node3 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap0.get(linkedTreeMap_Node2);
      String string0 = "A_1\\;~i0(0_p";
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      // Undeclared exception!
      try { 
        linkedTreeMap_EntrySet0.removeIf(predicate2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, String>();
      Map.Entry.comparingByValue();
      linkedTreeMap_Node0.value = "";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.find("=", false);
      linkedTreeMap0.put("=", ",f]22f");
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap_Node0.toString();
      LinkedTreeMap<String, String> linkedTreeMap2 = new LinkedTreeMap<String, String>(comparator1);
      linkedTreeMap1.removeInternalByKey(linkedTreeMap2);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      Object object0 = new Object();
      linkedTreeMap_KeySet0.remove(object0);
      String string0 = linkedTreeMap_KeySet0.toString();
      assertEquals(1, linkedTreeMap0.size());
      assertEquals("[=]", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.find("com.google.gson.internal.LinkedTreeMap", true);
      linkedTreeMap0.put(",f]22f", ",S{Lz'");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.put("com.google.gson.internal.LinkedTreeMap", ",f]22f");
      linkedTreeMap0.putAll(linkedTreeMap0);
      linkedTreeMap0.putIfAbsent("Z", "6:).'s=yoX#S#>");
      linkedTreeMap0.putIfAbsent("6:).'s=yoX#S#>", (String) null);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap<String, String> linkedTreeMap1 = new LinkedTreeMap<String, String>(comparator0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "6:).'s=yoX#S#>");
      Predicate<Object> predicate1 = predicate0.negate();
      linkedTreeMap_EntrySet0.removeIf(predicate1);
      try { 
        Integer.valueOf(",S{Lz'");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \",S{Lz'\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.put(",f]22f", ",S{Lz'");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.put("nR", ",f]22f");
      linkedTreeMap0.putIfAbsent(",S{Lz'", (String) null);
      linkedTreeMap0.put(",f]22f", ",f]22f");
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, String>();
      String string0 = linkedTreeMap_Node0.value;
      linkedTreeMap0.containsKey((Object) null);
      LinkedTreeMap<String, String> linkedTreeMap1 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.put("", "AWV:b");
      linkedTreeMap1.putIfAbsent(",S{Lz'", "");
      linkedTreeMap1.containsValue(",S{Lz'");
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      linkedTreeMap_EntrySet0.removeIf(predicate1);
      linkedTreeMap0.put("lo][[1|2}", "AWV:b");
      LinkedTreeMap<String, Object> linkedTreeMap2 = new LinkedTreeMap<String, Object>();
      linkedTreeMap2.findByEntry(linkedTreeMap_Node0);
      LinkedTreeMap<Integer, Object> linkedTreeMap3 = new LinkedTreeMap<Integer, Object>(comparator0);
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node1 = linkedTreeMap3.findByObject("AWV:b");
      assertNull(linkedTreeMap_Node1);
  }
}
