/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:32:58 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.RenderingHints;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.TreeMap;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.ToDoubleFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      TypeUtils.unwrapOptional((Type) null);
      TypeUtils.castToTimestamp((Object) null);
      TypeUtils.castToShort((Object) null);
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TypeUtils.loadClass("0%op");
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, (PropertyNamingStrategy) null);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<JSONObject> class0 = JSONObject.class;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(aSMClassLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.util.ASMClassLoader@2737e25a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("com.alibaba.fastjson.serializer.StringCodec");
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class com.alibaba.fastjson.parser.deserializer.TimeDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      String string0 = ParserConfig.DENY_PROPERTY;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "fastjson.parser.autoTypeAccept", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<Integer> class1 = Integer.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(serializeBeanInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : com.alibaba.fastjson.serializer.SerializeBeanInfo@8
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TypeUtils.loadClass("Y%ot");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance_timestamp;
      Class<UUID> class0 = UUID.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache(",'tSTxj9b", hashMap0);
      hashMap0.put(",'tSTxj9b", (Field) null);
      hashMap0.replace(",'tSTxj9b", (Field) null, (Field) null);
      ParserConfig.getFieldFromCache(",'tSTxj9b", hashMap0);
      Float float0 = new Float(0.0);
      TypeUtils.castToBoolean(float0);
      System.setCurrentTimeMillis((-9223372036854775808L));
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(mockNullPointerException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      TypeUtils.castToString(classLoader1);
      Class<Double> class0 = Double.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.replaceAll(biFunction0);
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, false);
      PageAttributes pageAttributes0 = new PageAttributes();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(pageAttributes0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : color=monochrome,media=iso-a4,orientation-requested=portrait,origin=physical,print-quality=normal,printer-resolution=[72,72,3]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Point point0 = new Point((-3218), (-3218));
      Class<BitSet> class0 = BitSet.class;
      TypeUtils.castToDouble((Object) null);
      int int0 = Calendar.SUNDAY;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("D3SZ");
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(mockIllegalStateException0);
      TypeUtils.clearClassMapping();
      Class<Double> class0 = Double.TYPE;
      TypeUtils.getGenericParamType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      System.setCurrentTimeMillis((-547L));
      int int0 = Opcodes.ACC_PUBLIC;
      long long0 = TypeUtils.fnv1a_64("getClass");
      assertEquals(1476653560816147065L, long0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TypeUtils.loadClass("0%op");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(mockHijrahDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate@701b9a59
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance_timestamp;
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(sqlDateDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TypeUtils.loadClass("0%op");
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "0%op", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.IllegalMonitorStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = (-677);
      StackTraceElement stackTraceElement0 = new StackTraceElement("f-bWu", "f-bWu", "f-bWu", (-677));
      Class<Byte> class0 = Byte.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackTraceElement0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : f-bWu.f-bWu(f-bWu)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("[pU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : [pU
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      List<FieldInfo> list0 = new ArrayList<FieldInfo>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<BreakIterator> class0 = BreakIterator.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0, false);
      TypeUtils.loadClass("*");
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      TypeUtils.castToDate((Object) null);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("e:3$;Cnk5sP`HECMr(K");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TypeUtils.castToChar((Object) null);
      TypeUtils.castToChar((Object) null);
      TypeUtils.castToSqlDate((Object) null);
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      JavaBeanInfo.getBuilderClass(class0, (JSONType) null);
      Class<NoSuchMethodException> class1 = NoSuchMethodException.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("BNcpL90&c9<|1g:{k'");
      TypeUtils.castToString(illegalThreadStateException0);
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<AtomicInteger> class0 = AtomicInteger.class;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      Class<InstantiationError> class1 = InstantiationError.class;
      JavaBeanInfo.build((Class<?>) class1, (Type) class1, propertyNamingStrategy0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<IllegalMonitorStateException> class2 = IllegalMonitorStateException.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.IllegalMonitorStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("java.util.concurrent.ConcurrentSkipListSet");
      assertEquals("java.util.concurrent.concurrentskiplistset", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("java.util.concurrent.concurrentskiplistset", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Class<?> class0 = TypeUtils.loadClass("java.util.concurrent.ConcurrentSkipListSet");
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("class java.util.concurrent.ConcurrentSkipListSet", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<OptionalCodec> class0 = OptionalCodec.class;
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache("(Ljava/lang/reflect/Type;)", hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo("(Ljava/lang/reflect/Type;)", class0, class0, (Type) null, (Field) null, 193, (-25), (-2361));
      assertNull(fieldInfo0.getFormat());
      assertEquals("(Ljava/lang/reflect/Type;)", fieldInfo0.toString());
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals((-2361), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals((-25), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertNotNull(fieldInfo0);
      
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      assertNull(fieldInfo0.getFormat());
      assertEquals("(Ljava/lang/reflect/Type;)", fieldInfo0.toString());
      assertEquals((-25), beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertNull(beanContext0.getFormat());
      assertEquals("(Ljava/lang/reflect/Type;)", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals((-2361), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals((-25), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertNotNull(beanContext0);
      
      Method method0 = beanContext0.getMethod();
      assertNull(fieldInfo0.getFormat());
      assertEquals("(Ljava/lang/reflect/Type;)", fieldInfo0.toString());
      assertEquals((-25), beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertNull(beanContext0.getFormat());
      assertEquals("(Ljava/lang/reflect/Type;)", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals((-2361), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals((-25), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertNull(method0);
      
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<MockDateFormat> class0 = MockDateFormat.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      Point point0 = new Point((-3218), (-3218));
      assertEquals((-3218.0), point0.getY(), 0.01);
      assertEquals((-3218.0), point0.getX(), 0.01);
      assertEquals((-3218), point0.x);
      assertEquals((-3218), point0.y);
      assertNotNull(point0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.replaceAll(biFunction0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, false);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(serializeBeanInfo0);
      
      PageAttributes pageAttributes0 = new PageAttributes();
      assertNotNull(pageAttributes0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(pageAttributes0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : color=monochrome,media=iso-a4,orientation-requested=portrait,origin=physical,print-quality=normal,printer-resolution=[72,72,3]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
      
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("0%op");
      assertNull(class0);
      
      Class<UUID> class1 = UUID.class;
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertNotNull(class2);
      
      Class<?> class3 = TypeUtils.getCollectionItemClass(class2);
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isPrimitive());
      assertNotNull(class3);
      
      Collection collection0 = TypeUtils.createCollection(class3);
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isPrimitive());
      assertNotNull(collection0);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class3);
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isPrimitive());
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      Class<Point> class1 = Point.class;
      Class<MockDate> class2 = MockDate.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Field field0 = ParserConfig.getFieldFromCache("k2F", hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo("GR", class1, class2, class1, (Field) null, (-554), (-554), (-554));
      assertEquals("GR", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertEquals((-554), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals((-554), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.jsonDirect);
      assertNotNull(fieldInfo0);
      
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      assertEquals("GR", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals("GR", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals((-554), beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertEquals((-554), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals((-554), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.jsonDirect);
      assertNotNull(beanContext0);
      
      Method method0 = beanContext0.getMethod();
      assertEquals("GR", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals("GR", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals((-554), beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertEquals((-554), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals((-554), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.jsonDirect);
      assertNull(method0);
      
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("0%op");
      assertNull(class0);
      
      Class<?> class1 = TypeUtils.loadClass("0%op");
      assertNull(class1);
      
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
      
      TypeUtils.clearClassMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      Class<TimeDeserializer> class2 = TimeDeserializer.class;
      TimeDeserializer timeDeserializer0 = TypeUtils.cast((Object) null, class2, parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNull(timeDeserializer0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis((-547L));
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class<?> class0 = TypeUtils.getClass((Type) parameterizedTypeImpl0);
      assertEquals(1537, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isInterface());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("interface java.util.List", class0.toString());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertEquals(1537, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isInterface());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("interface java.util.List", class0.toString());
      assertFalse(class0.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotSame(class0, class1);
      assertNotSame(class1, class0);
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      assertEquals(1537, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isInterface());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("interface java.util.List", class0.toString());
      assertFalse(class0.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.lang.Object", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertNotSame(class0, class1);
      assertNotSame(class0, class2);
      assertNotSame(class1, class0);
      assertSame(class1, class2);
      assertNotSame(class2, class0);
      assertSame(class2, class1);
      assertFalse(class0.equals((Object)class1));
      assertFalse(class1.equals((Object)class0));
      assertFalse(class2.equals((Object)class0));
      assertNotNull(class2);
      
      Class<SQLTransientException> class3 = SQLTransientException.class;
      int int0 = TypeUtils.getParserFeatures(class3);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNull(noSuchMethodError0.getMessage());
      assertNotNull(noSuchMethodError0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Class<?> class0 = TypeUtils.loadClass("8t#A0AKOc^B(EW:V");
      assertNull(class0);
      
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
      
      TypeUtils.clearClassMapping();
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      String string0 = hashMap0.compute("oGaef2OwxC3.m", biFunction0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string0);
      
      Class<?> class1 = TypeUtils.getClass(type0);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertSame(class1, class2);
      assertSame(class2, class1);
      assertNotNull(class2);
      
      Collection collection0 = TypeUtils.createCollection(class2);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertSame(class1, class2);
      assertSame(class2, class1);
      assertNotNull(collection0);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      java.util.IdentityHashMap identityHashMap1 = (java.util.IdentityHashMap)identityHashMap0.clone();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap1.size());
      assertTrue(identityHashMap1.isEmpty());
      assertNotNull(identityHashMap1);
      
      String string0 = "Ljava.awt.Color";
      String string1 = Character.getName(13);
      assertEquals("CARRIAGE RETURN (CR)", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(identityHashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<OutOfMemoryError> class0 = OutOfMemoryError.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class java.lang.OutOfMemoryError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, renderingHints_Key0);
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertNotNull(renderingHints0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      parserConfig0.setAutoTypeSupport(false);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) renderingHints0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.awt.RenderingHints$Key
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
      
      Character character1 = TypeUtils.castToChar((Object) null);
      assertNull(character1);
      
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, (JSONType) null);
      assertNull(class1);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockMinguoDate0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=r[OwMic";
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
      
      Class<?> class0 = TypeUtils.getClassFromMapping("=r[OwMic");
      assertNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("=r[OwMic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : =r[OwMic
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Long> class0 = Long.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.UUID
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
      
      TypeUtils.clearClassMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      Class<TimeDeserializer> class1 = TimeDeserializer.class;
      TimeDeserializer timeDeserializer0 = TypeUtils.cast((Object) properties0, class1, parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(2, timeDeserializer0.getFastMatchToken());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(timeDeserializer0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      Class<GridBagConstraints> class1 = GridBagConstraints.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, false);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(serializeBeanInfo0);
      
      Class<?> class2 = TypeUtils.getClassFromMapping("");
      assertNull(class2);
      
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
      
      TypeUtils.clearClassMapping();
      Class<Integer> class3 = Integer.TYPE;
      assertFalse(class3.isAnnotation());
      assertEquals("int", class3.toString());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1041, class3.getModifiers());
      assertTrue(class3.isPrimitive());
      assertNotNull(class3);
      
      Type type0 = TypeUtils.getGenericParamType(class3);
      assertFalse(class3.isAnnotation());
      assertEquals("int", class3.toString());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1041, class3.getModifiers());
      assertTrue(class3.isPrimitive());
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Method> class0 = Method.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      assertEquals(0, treeMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("UNASSIGNED_STACK");
      assertEquals(16, stringCharacterIterator0.getEndIndex());
      assertEquals(0, stringCharacterIterator0.getBeginIndex());
      assertEquals('U', stringCharacterIterator0.current());
      assertEquals(0, stringCharacterIterator0.getIndex());
      assertNotNull(stringCharacterIterator0);
      
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
      
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      FieldInfo fieldInfo0 = null;
      Class<BufferCapabilities> class2 = BufferCapabilities.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class2, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.util.concurrent.ConcurrentSkipListSet");
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isNumber("java.util.concurrent.ConcurrentSkipListSet");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      Constructor<SQLInvalidAuthorizationSpecException>[] constructorArray0 = (Constructor<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNull(noSuchMethodError0.getMessage());
      assertNotNull(noSuchMethodError0);
      
      String string0 = "U";
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("U");
      assertEquals(0, stringCharacterIterator0.getBeginIndex());
      assertEquals('U', stringCharacterIterator0.current());
      assertEquals(0, stringCharacterIterator0.getIndex());
      assertEquals(1, stringCharacterIterator0.getEndIndex());
      assertNotNull(stringCharacterIterator0);
      
      StackOverflowError stackOverflowError0 = new StackOverflowError("U");
      assertEquals("U", stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError: U", stackOverflowError0.toString());
      assertNotNull(stackOverflowError0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("U");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertFalse(class0.isEnum());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertNotNull(class0);
      
      Class<SQLException> class1 = SQLException.class;
      boolean boolean0 = TypeUtils.isProxy(class1);
      assertFalse(boolean0);
      
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      TypeUtils.clearClassMapping();
      PageAttributes pageAttributes0 = new PageAttributes();
      assertNotNull(pageAttributes0);
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
      
      boolean boolean1 = TypeUtils.isPath(class2);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(",'tSTxj9b", "!0", 585);
      assertEquals("!0", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(",'tSTxj9b", sQLNonTransientConnectionException0.getMessage());
      assertEquals(585, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ,'tSTxj9b", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)sQLNonTransientConnectionException0.fillInStackTrace();
      assertEquals("!0", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(",'tSTxj9b", sQLNonTransientConnectionException0.getMessage());
      assertEquals(585, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ,'tSTxj9b", sQLNonTransientConnectionException0.toString());
      assertEquals("!0", sQLNonTransientConnectionException1.getSQLState());
      assertEquals(",'tSTxj9b", sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ,'tSTxj9b", sQLNonTransientConnectionException1.toString());
      assertEquals(585, sQLNonTransientConnectionException1.getErrorCode());
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException1);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNull(illegalThreadStateException0.getMessage());
      assertNotNull(illegalThreadStateException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = (SQLNonTransientConnectionException)sQLNonTransientConnectionException0.initCause(illegalThreadStateException0);
      assertEquals("!0", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(",'tSTxj9b", sQLNonTransientConnectionException0.getMessage());
      assertEquals(585, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ,'tSTxj9b", sQLNonTransientConnectionException0.toString());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ,'tSTxj9b", sQLNonTransientConnectionException2.toString());
      assertEquals(",'tSTxj9b", sQLNonTransientConnectionException2.getMessage());
      assertEquals("!0", sQLNonTransientConnectionException2.getSQLState());
      assertEquals(585, sQLNonTransientConnectionException2.getErrorCode());
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException2);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException2, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException2, sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException2);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(sQLNonTransientConnectionException1);
      assertEquals("!0", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(",'tSTxj9b", sQLNonTransientConnectionException0.getMessage());
      assertEquals(585, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ,'tSTxj9b", sQLNonTransientConnectionException0.toString());
      assertEquals("!0", sQLNonTransientConnectionException1.getSQLState());
      assertEquals(",'tSTxj9b", sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ,'tSTxj9b", sQLNonTransientConnectionException1.toString());
      assertEquals(585, sQLNonTransientConnectionException1.getErrorCode());
      assertTrue(boolean0);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException2);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException2);
      
      TypeUtils.clearClassMapping();
      InstantiationError instantiationError0 = new InstantiationError();
      assertEquals("java.lang.InstantiationError", instantiationError0.toString());
      assertNull(instantiationError0.getMessage());
      assertNotNull(instantiationError0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(sQLNonTransientConnectionException2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLNonTransientConnectionException: ,'tSTxj9b
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Long> class0 = Long.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      int int0 = TypeUtils.getSerializeFeatures(class1);
      assertEquals(0, int0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class2 = TypeUtils.loadClass("TODO", classLoader0);
      assertNull(class2);
      
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("6o-Re5~K^0,.eXypa");
      assertEquals("6o-Re5~K^0,.eXypa", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread("6o-Re5~K^0,.eXypa");
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "6o-Re5~K^0,.eXypa", (-2233L));
      assertEquals("6o-Re5~K^0,.eXypa", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      MockThread mockThread2 = new MockThread(mockThread1, "Xa5M',0>4tN?xY.%|");
      assertEquals("6o-Re5~K^0,.eXypa", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertNotNull(mockThread2);
      
      ThreadGroup threadGroup1 = new ThreadGroup("Xa5M',0>4tN?xY.%|");
      assertEquals("Xa5M',0>4tN?xY.%|", threadGroup1.getName());
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNotNull(threadGroup1);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      Class<?> class0 = TypeUtils.loadClass("Ljava/lang/Object;Ljava/lang/Object;I)V", classLoader0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("com.alibaba.fastjson.serializer.StringCodec");
      assertEquals(2022598471736692923L, long0);
      
      Float float0 = new Float((double) 2022598471736692923L);
      assertEquals(2.02259851E18F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Timestamp timestamp0 = new Timestamp(2022598471736692923L);
      assertEquals("64095564-01-28 23:44:52.923", timestamp0.toString());
      assertEquals(923000000, timestamp0.getNanos());
      assertNotNull(timestamp0);
      
      Class<Calendar> class0 = Calendar.class;
      Byte byte0 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte0);
      assertNotNull(byte0);
      
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)TypeUtils.castToJavaBean((Object) byte0, class0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=90,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=90,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("0%op");
      assertNull(class0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("isInitialized");
      assertEquals("isInitialized", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: isInitialized", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Byte byte0 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte0);
      assertNotNull(byte0);
      
      Class<Calendar> class1 = Calendar.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) classLoader0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("com.alibaba.fastjson.serializer.StringCodec");
      assertEquals(2022598471736692923L, long0);
      
      Float float0 = new Float((double) 2022598471736692923L);
      assertEquals(2.02259851E18F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Timestamp timestamp0 = new Timestamp(2022598471736692923L);
      assertEquals("64095564-01-28 23:44:52.923", timestamp0.toString());
      assertEquals(923000000, timestamp0.getNanos());
      assertNotNull(timestamp0);
      
      Class<Calendar> class0 = Calendar.class;
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.util.Calendar
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      Short short0 = TypeUtils.castToShort("");
      assertNull(short0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.awt.F{Pont");
      assertNull(class0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass((Type) null);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<OutOfMemoryError> class2 = OutOfMemoryError.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) hashtable0, propertyNamingStrategy0, false);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(serializeBeanInfo0);
      
      boolean boolean0 = TypeUtils.isProxy(class1);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Long> class0 = Long.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException((String) null);
      assertEquals("java.lang.IllegalMonitorStateException", illegalMonitorStateException0.toString());
      assertNull(illegalMonitorStateException0.getMessage());
      assertNotNull(illegalMonitorStateException0);
      
      String string0 = "Eza*:1.kzPh9B/Nd";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "Eza*:1.kzPh9B/Nd", (-1262), illegalMonitorStateException0);
      assertEquals("java.lang.IllegalMonitorStateException", illegalMonitorStateException0.toString());
      assertNull(illegalMonitorStateException0.getMessage());
      assertEquals((-1262), sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("Eza*:1.kzPh9B/Nd", sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(sQLTimeoutException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"jav\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("q{RJ");
      assertNull(class0);
      
      Class<?> class1 = TypeUtils.loadClass("q{RJ");
      assertNull(class1);
      
      TypeUtils.clearClassMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      AtomicLong atomicLong0 = new AtomicLong((-1248L));
      assertEquals((byte)32, atomicLong0.byteValue());
      assertEquals((-1248L), atomicLong0.get());
      assertEquals((-1248.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((-1248L), atomicLong0.longValue());
      assertEquals("-1248", atomicLong0.toString());
      assertEquals((-1248.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals((-1248), atomicLong0.intValue());
      assertEquals((short) (-1248), atomicLong0.shortValue());
      assertNotNull(atomicLong0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("q{RJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : q{RJ
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      java.util.IdentityHashMap identityHashMap1 = (java.util.IdentityHashMap)identityHashMap0.clone();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap1.size());
      assertTrue(identityHashMap1.isEmpty());
      assertNotNull(identityHashMap1);
      
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("=r[OwM_c");
      assertEquals(8, stringCharacterIterator0.getEndIndex());
      assertEquals(0, stringCharacterIterator0.getBeginIndex());
      assertEquals('=', stringCharacterIterator0.current());
      assertEquals(0, stringCharacterIterator0.getIndex());
      assertNotNull(stringCharacterIterator0);
      
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      String string0 = TypeUtils.decapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      Class<BufferCapabilities> class2 = BufferCapabilities.class;
      Class<SQLNonTransientException> class3 = SQLNonTransientException.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class3, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
      
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      assertNotNull(jSONPDeserializer0);
      
      Class<String> class0 = String.class;
      Class<Point> class1 = Point.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap0);
      assertEquals(0, treeMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      String string0 = ParserConfig.DENY_PROPERTY;
      assertEquals("fastjson.parser.deny", string0);
      assertNotNull(string0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@1577b10d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      assertNotNull(list0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<NoSuchFieldException> class1 = NoSuchFieldException.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
      
      Short short0 = new Short((short)116);
      assertEquals((short)116, (short)short0);
      assertNotNull(short0);
      
      Byte byte0 = TypeUtils.castToByte(short0);
      assertEquals((byte)116, (byte)byte0);
      assertNotNull(byte0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      assertTrue(class0.isInterface());
      assertEquals(1537, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("interface java.util.List", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      assertNotNull(type0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("Ljava.lang.AutoCloseable", "gettoString");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      String string1 = hashMap0.put("toString", (String) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(string1);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, hashMap0, true, propertyNamingStrategy0);
      assertTrue(class0.isInterface());
      assertEquals(1537, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("interface java.util.List", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(parameterizedTypeImpl0, type0);
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : interface java.util.List
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[4] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      assertNotNull(parameterizedTypeImpl0);
      
      String string0 = ParserConfig.DENY_PROPERTY;
      assertEquals("fastjson.parser.deny", string0);
      assertNotNull(string0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.util.concurrent.atomic.AtomicInteger", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals("class java.util.concurrent.atomic.AtomicInteger", class2.toString());
      assertFalse(class2.isInterface());
      assertEquals(1, class2.getModifiers());
      assertSame(class2, class1);
      assertNotNull(class2);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(typeArray0[2]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.util.concurrent.atomic.AtomicInteger
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("0%op");
      assertNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("0%op");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 0%op
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("0%op");
      assertNull(class0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
      
      Locale locale0 = TypeUtils.toLocale("java.util.concurrent.ConcurrentSkiCListSet");
      assertEquals("java.util.concurrent.concurrentskiclistset", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("java.util.concurrent.concurrentskiclistset", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy1, true);
      assertNotSame(propertyNamingStrategy1, propertyNamingStrategy0);
      assertNotSame(serializeBeanInfo1, serializeBeanInfo0);
      assertFalse(propertyNamingStrategy1.equals((Object)propertyNamingStrategy0));
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
      assertNotNull(serializeBeanInfo1);
      
      Class<?> class1 = TypeUtils.loadClass("java.util.concurrent.ConcurrentSkiCListSet");
      assertNull(class1);
      
      TypeUtils typeUtils1 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertFalse(typeUtils1.equals((Object)typeUtils0));
      assertNotNull(typeUtils1);
      
      LinkedHashSet<Point> linkedHashSet0 = new LinkedHashSet<Point>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("java.util.concurrent.ConcurrentSkiCListSet");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.util.concurrent.ConcurrentSkiCListSet\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("q{RJ");
      assertNull(class0);
      
      Class<?> class1 = TypeUtils.loadClass("q{RJ");
      assertNull(class1);
      
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      TypeUtils.clearClassMapping();
      EvoSuiteFile evoSuiteFile0 = null;
      Class<Character> class2 = Character.TYPE;
      assertFalse(class2.isInterface());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertEquals("char", class2.toString());
      assertNotNull(class2);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "$]l[=:r~03QhtPK-", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertNotNull(class0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Time time0 = TypeUtils.cast((Object) null, (Type) class1, (ParserConfig) null);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNull(time0);
      
      String string0 = TypeUtils.castToString(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertNotNull(string0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, false);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Point point0 = new Point(58, 58);
      assertEquals(58.0, point0.getX(), 0.01);
      assertEquals(58.0, point0.getY(), 0.01);
      assertEquals(58, point0.y);
      assertEquals(58, point0.x);
      assertNotNull(point0);
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
      
      int int0 = Calendar.SUNDAY;
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      JSONObject jSONObject0 = new JSONObject(306);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotNull(jSONObject0);
      
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      Class<Float> class1 = Float.TYPE;
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("float", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      Class<NumberFormatException> class2 = NumberFormatException.class;
      Class<?> class3 = JavaBeanInfo.getBuilderClass(class2, (JSONType) null);
      assertNull(class3);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      parserConfig0.setAsmEnable(true);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      SQLClientInfoException sQLClientInfoException0 = TypeUtils.cast((Object) null, (Type) class2, parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertNull(sQLClientInfoException0);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      assertEquals("java.lang.NoSuchFieldError", noSuchFieldError0.toString());
      assertNull(noSuchFieldError0.getMessage());
      assertNotNull(noSuchFieldError0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.parser.ParserConfig@96
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Long long0 = new Long((-254670111376247151L));
      assertEquals((-254670111376247151L), (long)long0);
      assertNotNull(long0);
      
      Double double0 = TypeUtils.castToDouble(long0);
      assertEquals((-2.54670111376247136E17), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "sU!F");
      assertFalse(boolean0);
      
      String string0 = "!U`LJ_2aJ";
      SQLDataException sQLDataException0 = new SQLDataException("!U`LJ_2aJ", "!U`LJ_2aJ");
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: !U`LJ_2aJ", sQLDataException0.toString());
      assertEquals("!U`LJ_2aJ", sQLDataException0.getSQLState());
      assertEquals("!U`LJ_2aJ", sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("!U`LJ_2aJ", "!U`LJ_2aJ", sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: !U`LJ_2aJ", sQLDataException0.toString());
      assertEquals("!U`LJ_2aJ", sQLDataException0.getSQLState());
      assertEquals("!U`LJ_2aJ", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: !U`LJ_2aJ", sQLFeatureNotSupportedException0.toString());
      assertEquals("!U`LJ_2aJ", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("!U`LJ_2aJ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      DataTruncation dataTruncation0 = new DataTruncation((-3782), true, true, (-3782), 44, sQLFeatureNotSupportedException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: !U`LJ_2aJ", sQLDataException0.toString());
      assertEquals("!U`LJ_2aJ", sQLDataException0.getSQLState());
      assertEquals("!U`LJ_2aJ", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: !U`LJ_2aJ", sQLFeatureNotSupportedException0.toString());
      assertEquals("!U`LJ_2aJ", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("!U`LJ_2aJ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertNotNull(dataTruncation0);
      
      String string1 = "xgQ\\G)*S)[+8>HA";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("xgQG)*S)[+8>HA", "sU!F");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // sU!F
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null, (Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType1).toString();
      doReturn(type0).when(genericArrayType1).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType1);
      assertFalse(type1.equals((Object)type0));
      assertNotNull(type1);
      
      boolean boolean0 = TypeUtils.isGenericParamType(type1);
      assertFalse(boolean0);
      assertFalse(type0.equals((Object)type1));
      assertFalse(type1.equals((Object)type0));
      
      TypeUtils.clearClassMapping();
      Class<?> class0 = TypeUtils.getCollectionItemClass(type1);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals(1, class0.getModifiers());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(type0.equals((Object)type1));
      assertFalse(type1.equals((Object)type0));
      assertNotNull(class0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("org.springframework.remoting.support.RemoteInvocation").when(biFunction0).apply(anyString() , anyString());
      String string0 = hashMap0.compute("org.springframework.remoting.support.RemoteInvocation", biFunction0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      String string1 = hashMap0.put("\"/e]]P)aDw", "\"/e]]P)aDw");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string1);
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) hashMap0, propertyNamingStrategy0, false);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals(1, class0.getModifiers());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(type0.equals((Object)type1));
      assertFalse(type1.equals((Object)type0));
      assertNotNull(serializeBeanInfo0);
      
      Class<?> class1 = TypeUtils.getClass(type1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      assertSame(class1, class0);
      assertFalse(type0.equals((Object)type1));
      assertFalse(type1.equals((Object)type0));
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(type1);
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertSame(class2, class1);
      assertSame(class2, class0);
      assertFalse(type0.equals((Object)type1));
      assertFalse(type1.equals((Object)type0));
      assertNotNull(class2);
      
      Collection collection0 = TypeUtils.createCollection(class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      assertSame(class1, class2);
      assertSame(class1, class0);
      assertFalse(type0.equals((Object)type1));
      assertFalse(type1.equals((Object)type0));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("q{RJ");
      assertNull(class0);
      
      Class<?> class1 = TypeUtils.loadClass("q{RJ");
      assertNull(class1);
      
      TypeUtils.clearClassMapping();
      Short short0 = new Short((short) (-602));
      assertEquals((short) (-602), (short)short0);
      assertNotNull(short0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : -602
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertNull(noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNotNull(noSuchMethodError0);
      
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("U");
      assertEquals(1, stringCharacterIterator0.getEndIndex());
      assertEquals(0, stringCharacterIterator0.getIndex());
      assertEquals('U', stringCharacterIterator0.current());
      assertEquals(0, stringCharacterIterator0.getBeginIndex());
      assertNotNull(stringCharacterIterator0);
      
      Character character0 = TypeUtils.castToChar("U");
      assertEquals('U', (char)character0);
      assertNotNull(character0);
      
      StackOverflowError stackOverflowError0 = new StackOverflowError("U");
      assertEquals("U", stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError: U", stackOverflowError0.toString());
      assertNotNull(stackOverflowError0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      Short short0 = new Short((short) (-632));
      assertEquals((short) (-632), (short)short0);
      assertNotNull(short0);
      
      Short short1 = TypeUtils.castToShort(short0);
      assertEquals((short) (-632), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("6o-Re5~K^0,.eXypa");
      assertEquals("6o-Re5~K^0,.eXypa", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "6o-Re5~K^0,.eXypa", (-2233L));
      assertEquals("6o-Re5~K^0,.eXypa", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.clearAssertionStatus();
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      mockThread1.setContextClassLoader(classLoader1);
      assertEquals("6o-Re5~K^0,.eXypa", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      MockThread mockThread2 = new MockThread(mockThread1, "Xa5M',0>4tN?xY.%|");
      assertEquals("6o-Re5~K^0,.eXypa", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertNotNull(mockThread2);
      
      ThreadGroup threadGroup1 = new ThreadGroup("Xa5M',0>4tN?xY.%|");
      assertEquals("Xa5M',0>4tN?xY.%|", threadGroup1.getName());
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNotNull(threadGroup1);
      
      ClassLoader classLoader2 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertNotNull(classLoader2);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader2);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertNotNull(aSMDeserializerFactory0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory1);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(parserConfig0);
      
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      TimeDeserializer timeDeserializer0 = TypeUtils.cast((Object) null, class0, parserConfig0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory1);
      assertNotSame(aSMDeserializerFactory1, aSMDeserializerFactory0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNull(timeDeserializer0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      Class<PropertyNamingStrategy> class2 = PropertyNamingStrategy.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) hashtable0, (PropertyNamingStrategy) null);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("javax.xml.datatype.XMLGregorianCalendar");
      assertEquals((-2969273025837522563L), long0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("%]", locale0);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("%]", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("%]", mockSimpleDateFormat0.toPattern());
      assertNotNull(mockSimpleDateFormat0);
      
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      IllegalMonitorStateException illegalMonitorStateException0 = TypeUtils.cast((Object) null, class0, parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNull(illegalMonitorStateException0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("0%op");
      assertNull(class0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNotNull(mockIllegalArgumentException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(mockIllegalArgumentException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLClientInfoException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Long> class0 = Long.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
      
      JobAttributes jobAttributes0 = new JobAttributes();
      assertEquals(1, jobAttributes0.getCopies());
      assertEquals(1, jobAttributes0.getMinPage());
      assertNull(jobAttributes0.getPrinter());
      assertEquals(Integer.MAX_VALUE, jobAttributes0.getMaxPage());
      assertEquals(1, jobAttributes0.getFromPage());
      assertEquals(1, jobAttributes0.getToPage());
      assertNull(jobAttributes0.getFileName());
      assertNotNull(jobAttributes0);
      
      JobAttributes jobAttributes1 = new JobAttributes(jobAttributes0);
      assertEquals(1, jobAttributes0.getCopies());
      assertEquals(1, jobAttributes0.getMinPage());
      assertNull(jobAttributes0.getPrinter());
      assertEquals(Integer.MAX_VALUE, jobAttributes0.getMaxPage());
      assertEquals(1, jobAttributes0.getFromPage());
      assertEquals(1, jobAttributes0.getToPage());
      assertNull(jobAttributes0.getFileName());
      assertEquals(1, jobAttributes1.getCopies());
      assertEquals(1, jobAttributes1.getMinPage());
      assertEquals(1, jobAttributes1.getFromPage());
      assertEquals(Integer.MAX_VALUE, jobAttributes1.getMaxPage());
      assertEquals(1, jobAttributes1.getToPage());
      assertNull(jobAttributes1.getPrinter());
      assertNull(jobAttributes1.getFileName());
      assertTrue(jobAttributes1.equals((Object)jobAttributes0));
      assertNotNull(jobAttributes1);
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Type[] typeArray0 = new Type[0];
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertEquals("class com.alibaba.fastjson.parser.deserializer.TimeDeserializer", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class1);
      assertEquals("class com.alibaba.fastjson.parser.deserializer.TimeDeserializer", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(parameterizedTypeImpl0);
      
      String string0 = ParserConfig.DENY_PROPERTY;
      assertEquals("fastjson.parser.deny", string0);
      assertNotNull(string0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      ParserConfig parserConfig1 = new ParserConfig(true);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.fieldBased);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) biFunction0, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.46, class $java.util.function.BiFunction$$EnhancerByMockitoWithCGLIB$$130570ae, write javaBean error, fastjson version 1.2.46, class org.evosuite.shaded.org.mockito.internal.creation.cglib.MethodInterceptorFilter, fieldName : 0, write javaBean error, fastjson version 1.2.46, class org.evosuite.shaded.org.mockito.internal.handler.InvocationNotifierHandler, fieldName : handler, create asm serializer error, class class org.evosuite.shaded.org.mockito.internal.creation.settings.CreationSettings
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isArray());
      assertEquals("class [S", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertNotNull(class1);
      
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      TypeUtils.clearClassMapping();
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isArray());
      assertEquals("class [S", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class2.isAnnotation());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = TypeUtils.decapitalize("org.springframework.remoting.support.RemoteInvocation");
      assertEquals("org.springframework.remoting.support.RemoteInvocation", string0);
      assertNotNull(string0);
      
      String string1 = hashMap0.put("\"/e]]P)aDw", "\"/e]]P)aDw");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string1);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=r[OwM_c";
      stringArray0[1] = ",'tSTxj9b";
      Class<JSONObject> class0 = JSONObject.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache(",'tSTxj9b", hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(field0);
      
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      Float float0 = new Float((double) (-328));
      assertEquals((-328.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      float float2 = Float.min((-1.0F), 909.78F);
      assertEquals((-1.0F), float2, 0.01F);
      
      Boolean boolean1 = TypeUtils.castToBoolean(float1);
      assertFalse(boolean1);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      byte[] byteArray0 = TypeUtils.castToBytes("=r[OwM_c");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-50), (byte) (-1), (byte) (-1), (byte) (-36)}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("6o-Re5~K^0,.eXypa");
      assertEquals("6o-Re5~K^0,.eXypa", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "6o-Re5~K^0,.eXypa", (-2233L));
      assertEquals("6o-Re5~K^0,.eXypa", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      MockThread mockThread2 = new MockThread(mockThread1, "Xa5M',0>4tN?xY.%|");
      assertEquals("6o-Re5~K^0,.eXypa", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertNotNull(mockThread2);
      
      ThreadGroup threadGroup1 = new ThreadGroup("Xa5M',0>4tN?xY.%|");
      assertEquals("Xa5M',0>4tN?xY.%|", threadGroup1.getName());
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNotNull(threadGroup1);
      
      TypeUtils.clearClassMapping();
      InstantiationError instantiationError0 = new InstantiationError();
      assertEquals("java.lang.InstantiationError", instantiationError0.toString());
      assertNull(instantiationError0.getMessage());
      assertNotNull(instantiationError0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("Xa5M',0>4tN?xY.%|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Xa5M',0>4tN?xY.%|
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass((String) null);
      assertNull(class0);
      
      Class<IllegalMonitorStateException> class1 = IllegalMonitorStateException.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Class<?> class2 = parserConfig0.checkAutoType("$assertionsDisabled", class1, (-1297));
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNull(class2);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNull(illegalThreadStateException0.getMessage());
      assertNotNull(illegalThreadStateException0);
      
      ParserConfig parserConfig1 = new ParserConfig(true);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertTrue(parserConfig1.fieldBased);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      assertEquals("java.lang.IllegalMonitorStateException", illegalMonitorStateException0.toString());
      assertNull(illegalMonitorStateException0.getMessage());
      assertNotNull(illegalMonitorStateException0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
      
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      assertNotNull(jSONPDeserializer0);
      
      Class<String> class0 = String.class;
      Class<Point> class1 = Point.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap0);
      assertEquals(0, treeMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      String string0 = ParserConfig.DENY_PROPERTY;
      assertEquals("fastjson.parser.deny", string0);
      assertNotNull(string0);
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("T=|");
      assertEquals("java.lang.IllegalMonitorStateException: T=|", illegalMonitorStateException0.toString());
      assertEquals("T=|", illegalMonitorStateException0.getMessage());
      assertNotNull(illegalMonitorStateException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "Ljava/lang/Object;Ljava/lang/Object;I)V;", (-1792925011), illegalMonitorStateException0);
      assertEquals("java.lang.IllegalMonitorStateException: T=|", illegalMonitorStateException0.toString());
      assertEquals("T=|", illegalMonitorStateException0.getMessage());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("Ljava/lang/Object;Ljava/lang/Object;I)V;", sQLTimeoutException0.getSQLState());
      assertEquals((-1792925011), sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
      
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      int int0 = TypeUtils.getSerializeFeatures(class2);
      assertEquals(0, int0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class3 = TypeUtils.loadClass("Ljava/lang/Object;Ljava/lang/Object;I)V;", classLoader0);
      assertNull(class3);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("0%op");
      assertNull(class0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Class<UUID> class1 = UUID.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "0%op", class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.UUID
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<AtomicInteger> class0 = AtomicInteger.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      AtomicInteger atomicInteger0 = new AtomicInteger(110);
      assertEquals(110, atomicInteger0.get());
      assertEquals(110.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("110", atomicInteger0.toString());
      assertEquals(110, atomicInteger0.intValue());
      assertEquals((byte)110, atomicInteger0.byteValue());
      assertEquals((short)110, atomicInteger0.shortValue());
      assertEquals(110.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(110L, atomicInteger0.longValue());
      assertNotNull(atomicInteger0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : SnakeCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader2 = aSMClassLoader0.getParent();
      assertSame(classLoader0, classLoader2);
      assertSame(classLoader2, classLoader0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertNotNull(classLoader2);
      
      String string0 = TypeUtils.castToString(classLoader2);
      assertSame(classLoader0, classLoader2);
      assertSame(classLoader2, classLoader0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertNotNull(string0);
      
      Class<Double> class0 = Double.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      Point point0 = new Point();
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertNotNull(point0);
      
      Point point1 = new Point(point0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      assertTrue(point1.equals((Object)point0));
      assertNotNull(point1);
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNull(bigDecimal0);
      
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertNotNull(parameterizedTypeImpl0);
      
      String string0 = ParserConfig.DENY_PROPERTY;
      assertEquals("fastjson.parser.deny", string0);
      assertNotNull(string0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      String string1 = hashMap0.compute("#|V#Ugv~H", biFunction0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string1);
      
      String string2 = hashMap0.put("Lorg.springframework.util.LinkedMultiValueMap", "L");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string2);
      
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertSame(parserConfig1, parserConfig0);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertNotNull(parserConfig1);
      
      System.setCurrentTimeMillis((-973L));
      Class<EnumDeserializer> class1 = EnumDeserializer.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) identityHashMap0, (PropertyNamingStrategy) null, false);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(serializeBeanInfo0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
      
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      assertNotNull(jSONPDeserializer0);
      
      Class<Point> class0 = Point.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      assertEquals(0, treeMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      InterruptedException interruptedException0 = new InterruptedException();
      assertNull(interruptedException0.getMessage());
      assertEquals("java.lang.InterruptedException", interruptedException0.toString());
      assertNotNull(interruptedException0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      MockThread mockThread0 = new MockThread();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(aSMDeserializerFactory0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, true);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertNotNull(javaBeanInfo0);
      
      ObjectDeserializer objectDeserializer0 = aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(objectDeserializer0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class1 = TypeUtils.loadClass("R!<", (ClassLoader) aSMClassLoader0, false);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isAnnotation());
      assertNotNull(type0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(type0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(boolean0);
      
      TypeUtils.clearClassMapping();
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("C-a").when(biFunction0).apply(any() , any());
      String string0 = hashMap0.compute((String) null, biFunction0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("C-a", string0);
      assertNotNull(string0);
      
      String string1 = hashMap0.put("org.springframework.remoting.support.RemoteInvocation", "getclone");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(string1);
      
      Class<?> class2 = TypeUtils.getClass(type0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertSame(class1, class2);
      assertSame(class2, class1);
      assertNotNull(class2);
      
      Class<?> class3 = TypeUtils.getCollectionItemClass(class1);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertSame(class1, class2);
      assertSame(class1, class3);
      assertSame(class3, class1);
      assertSame(class3, class2);
      assertNotNull(class3);
      
      Collection collection0 = TypeUtils.createCollection(class3);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertSame(class1, class2);
      assertSame(class1, class3);
      assertSame(class3, class1);
      assertSame(class3, class2);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertEquals("class [D", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertTrue(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class1);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertEquals("class [D", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertTrue(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(boolean0);
      
      TypeUtils.clearClassMapping();
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertEquals("class [D", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertTrue(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Object>) toDoubleFunction0);
      assertNotNull(comparator0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>(comparator0);
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class1, treeMap0, true, propertyNamingStrategy0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertEquals("class [D", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertTrue(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(0, treeMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Point point0 = new Point();
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertNotNull(point0);
      
      Point point1 = (Point)point0.clone();
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      assertTrue(point1.equals((Object)point0));
      assertNotNull(point1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(list0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      Class<Properties> class1 = Properties.class;
      boolean boolean1 = TypeUtils.isKotlin(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      Class class2 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.NumberDeserializer", class2.toString());
      assertFalse(class2.isPrimitive());
      assertNotNull(class2);
      
      Class class3 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class3.isEnum());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.NumberDeserializer", class3.toString());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isPrimitive());
      assertSame(class3, class2);
      assertNotNull(class3);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.util.Properties
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertEquals("class [D", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertNotNull(class1);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class1);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertEquals("class [D", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertFalse(boolean0);
      
      TypeUtils.clearClassMapping();
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertEquals("class [D", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertNotNull(class2);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Point point0 = new Point();
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertNotNull(point0);
      
      point0.setLocation((-1440.0), (-1104.2041997));
      assertEquals((-1440.0), point0.getX(), 0.01);
      assertEquals((-1104.0), point0.getY(), 0.01);
      assertEquals((-1440), point0.x);
      assertEquals((-1104), point0.y);
      
      Point point1 = new Point(point0);
      assertEquals((-1440.0), point0.getX(), 0.01);
      assertEquals((-1104.0), point0.getY(), 0.01);
      assertEquals((-1104.0), point1.getY(), 0.01);
      assertEquals((-1440.0), point1.getX(), 0.01);
      assertEquals((-1440), point0.x);
      assertEquals((-1104), point0.y);
      assertEquals((-1440), point1.x);
      assertEquals((-1104), point1.y);
      assertTrue(point1.equals((Object)point0));
      assertNotNull(point1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-8);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((byte) (-8), bigInteger0.byteValue());
      assertEquals((short)28920, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)126, (byte)108, (byte)49, (byte)112, (byte) (-8)}, byteArray0);
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(bigInteger0);
      assertEquals((byte) (-8), bigInteger0.byteValue());
      assertEquals((short)28920, bigInteger0.shortValue());
      assertEquals((byte) (-8), bigDecimal0.byteValue());
      assertEquals((short)28920, bigDecimal0.shortValue());
      assertArrayEquals(new byte[] {(byte)126, (byte)108, (byte)49, (byte)112, (byte) (-8)}, byteArray0);
      assertNotNull(bigDecimal0);
      
      Class<MessageFormat> class3 = MessageFormat.class;
      int int0 = TypeUtils.getSerializeFeatures(class3);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : [B@4f46a334
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("!0", "!0", 585);
      assertEquals("!0", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: !0", sQLNonTransientConnectionException0.toString());
      assertEquals("!0", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(585, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)sQLNonTransientConnectionException0.fillInStackTrace();
      assertEquals("!0", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: !0", sQLNonTransientConnectionException0.toString());
      assertEquals("!0", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(585, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: !0", sQLNonTransientConnectionException1.toString());
      assertEquals(585, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("!0", sQLNonTransientConnectionException1.getMessage());
      assertEquals("!0", sQLNonTransientConnectionException1.getSQLState());
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException1);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNull(illegalThreadStateException0.getMessage());
      assertNotNull(illegalThreadStateException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException();
      assertEquals(0, sQLNonTransientConnectionException2.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException2.toString());
      assertNull(sQLNonTransientConnectionException2.getMessage());
      assertNull(sQLNonTransientConnectionException2.getSQLState());
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      assertNotNull(sQLNonTransientConnectionException2);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = (SQLNonTransientConnectionException)sQLNonTransientConnectionException2.initCause(sQLNonTransientConnectionException0);
      assertEquals("!0", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: !0", sQLNonTransientConnectionException0.toString());
      assertEquals("!0", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(585, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLNonTransientConnectionException2.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException2.toString());
      assertNull(sQLNonTransientConnectionException2.getMessage());
      assertNull(sQLNonTransientConnectionException2.getSQLState());
      assertNull(sQLNonTransientConnectionException3.getMessage());
      assertNull(sQLNonTransientConnectionException3.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException3.toString());
      assertEquals(0, sQLNonTransientConnectionException3.getErrorCode());
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertNotSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException3);
      assertNotSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException2);
      assertNotSame(sQLNonTransientConnectionException2, sQLNonTransientConnectionException0);
      assertNotSame(sQLNonTransientConnectionException2, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException2, sQLNonTransientConnectionException3);
      assertSame(sQLNonTransientConnectionException3, sQLNonTransientConnectionException2);
      assertNotSame(sQLNonTransientConnectionException3, sQLNonTransientConnectionException1);
      assertNotSame(sQLNonTransientConnectionException3, sQLNonTransientConnectionException0);
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException0));
      assertNotNull(sQLNonTransientConnectionException3);
      
      Locale locale0 = Locale.forLanguageTag("com.alibaba.fastjson.serializer.SerializeWriter");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(mockGregorianCalendar0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(boolean0);
      
      TypeUtils.clearClassMapping();
      InstantiationError instantiationError0 = new InstantiationError();
      assertEquals("java.lang.InstantiationError", instantiationError0.toString());
      assertNull(instantiationError0.getMessage());
      assertNotNull(instantiationError0);
      
      Time time0 = TypeUtils.castToSqlTime(mockGregorianCalendar0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("20:21:21", time0.toString());
      assertNotNull(time0);
      
      Class<Character> class0 = Character.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("char", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("char", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "\\";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<Character> class0 = Character.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertNotNull(class0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNull(noSuchMethodException0.getMessage());
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNotNull(noSuchMethodException0);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("fastjson.parser.deny", "ownerContext", "[F", 3232);
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals(3232, stackTraceElement0.getLineNumber());
      assertEquals("[F", stackTraceElement0.getFileName());
      assertEquals("ownerContext", stackTraceElement0.getMethodName());
      assertEquals("fastjson.parser.deny", stackTraceElement0.getClassName());
      assertEquals("fastjson.parser.deny.ownerContext([F:3232)", stackTraceElement0.toString());
      assertNotNull(stackTraceElement0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackTraceElement0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : fastjson.parser.deny.ownerContext([F:3232)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=r[OwM_c";
      stringArray0[1] = ",'QtSTxj9b";
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache(",'QtSTxj9b", hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(field0);
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException(",'QtSTxj9b");
      assertEquals("java.lang.IllegalMonitorStateException: ,'QtSTxj9b", illegalMonitorStateException0.toString());
      assertEquals(",'QtSTxj9b", illegalMonitorStateException0.getMessage());
      assertNotNull(illegalMonitorStateException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(",'QtSTxj9b", ",'QtSTxj9b", 223, illegalMonitorStateException0);
      assertEquals("java.lang.IllegalMonitorStateException: ,'QtSTxj9b", illegalMonitorStateException0.toString());
      assertEquals(",'QtSTxj9b", illegalMonitorStateException0.getMessage());
      assertEquals(223, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ,'QtSTxj9b", sQLTimeoutException0.toString());
      assertEquals(",'QtSTxj9b", sQLTimeoutException0.getSQLState());
      assertEquals(",'QtSTxj9b", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
      
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)39;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      assertEquals((byte)39, bigInteger1.byteValue());
      assertEquals((short)10791, bigInteger1.shortValue());
      assertArrayEquals(new byte[] {(byte) (-12), (byte)57, (byte)42, (byte)39}, byteArray0);
      assertNotNull(bigInteger1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(bigInteger1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -197580249
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "isgetSigners";
      Class<?> class0 = TypeUtils.loadClass("isgetSigners");
      assertNull(class0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("Lorg.springframework.util.LinkedMultiValueMap");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Lorg.springframework.util.LinkedMultiValueMap\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      Class<UUID> class1 = UUID.class;
      Class<?> class2 = TypeUtils.getCollectionItemClass(class0);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      Class class3 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isPrimitive());
      assertEquals("class java.lang.Object", class3.toString());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertNotNull(class3);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      Timestamp timestamp0 = new Timestamp((-602L));
      assertEquals(398000000, timestamp0.getNanos());
      assertEquals("1969-12-31 23:59:59.398", timestamp0.toString());
      assertNotNull(timestamp0);
      
      Hashtable<EnumDeserializer, ChronoLocalDate> hashtable0 = new Hashtable<EnumDeserializer, ChronoLocalDate>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Class<Calendar> class4 = Calendar.class;
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)TypeUtils.castToJavaBean((Object) timestamp0, class4);
      assertEquals(398000000, timestamp0.getNanos());
      assertEquals("1969-12-31 23:59:59.398", timestamp0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-602,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=398,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      Class<UUID> class1 = UUID.class;
      AtomicLong atomicLong0 = new AtomicLong((-1248L));
      assertEquals((short) (-1248), atomicLong0.shortValue());
      assertEquals((-1248L), atomicLong0.longValue());
      assertEquals("-1248", atomicLong0.toString());
      assertEquals((-1248.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals((byte)32, atomicLong0.byteValue());
      assertEquals((-1248), atomicLong0.intValue());
      assertEquals((-1248L), atomicLong0.get());
      assertEquals((-1248.0), atomicLong0.doubleValue(), 0.01);
      assertNotNull(atomicLong0);
      
      Class<UUID> class2 = UUID.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) atomicLong0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.UUID
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      assertNotNull(jSONPDeserializer0);
      
      Class<String> class0 = String.class;
      Class<Point> class1 = Point.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap0);
      assertEquals(0, treeMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Type[] typeArray0 = new Type[0];
      Type type1 = null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, class0);
      assertNotNull(parameterizedTypeImpl0);
      
      String string0 = ParserConfig.DENY_PROPERTY;
      assertEquals("fastjson.parser.deny", string0);
      assertNotNull(string0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.autoTypeAccept", "@sLDx'-c) Z\"H~g6.");
      assertEquals("java.sql.SQLTransactionRollbackException: fastjson.parser.autoTypeAccept", sQLTransactionRollbackException0.toString());
      assertEquals("fastjson.parser.autoTypeAccept", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("@sLDx'-c) Z\"H~g6.", sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTransactionRollbackException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.sql.SQLTransactionRollbackException -> java.lang.String
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertNull(noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNotNull(noSuchMethodError0);
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache("U", hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(field0);
      
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      Float float0 = new Float((double) (-328));
      assertEquals((-328.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1119.77275));
      assertEquals((-1119.7727F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Timestamp timestamp0 = new Timestamp((-328));
      assertEquals("1969-12-31 23:59:59.672", timestamp0.toString());
      assertEquals(672000000, timestamp0.getNanos());
      assertNotNull(timestamp0);
      
      Class<Calendar> class1 = Calendar.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "U", class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"U\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("=t=`iZu*m");
      assertFalse(boolean0);
      
      long long0 = TypeUtils.fnv1a_64_lower("=t=`iZu*m");
      assertEquals((-3373359804268753300L), long0);
      
      Float float0 = new Float((double) 41);
      assertEquals(41.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Float float1 = new Float((-894.0));
      assertEquals((-894.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a;*CYS6");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long long1 = TypeUtils.fnv1a_64_lower("=t=`iZu*m");
      assertEquals((-3373359804268753300L), long1);
      assertTrue(long1 == long0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Collection collection0 = TypeUtils.createCollection(parameterizedTypeImpl0);
      assertNotNull(collection0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertNull(class1);
      
      Class<?> class2 = TypeUtils.getClass((Type) parameterizedTypeImpl0);
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("interface java.util.List", class2.toString());
      assertEquals(1537, class2.getModifiers());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "f";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      String string1 = "gethashCode";
      boolean boolean0 = false;
      classLoader0.setClassAssertionStatus("gethashCode", false);
      assertSame(classLoader0, classLoader1);
      
      classLoader0.setClassAssertionStatus("scanFieldIntArray", false);
      assertSame(classLoader0, classLoader1);
      
      Class<?> class0 = TypeUtils.loadClass("f", classLoader0, false);
      assertSame(classLoader0, classLoader1);
      assertNull(class0);
      
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      assertEquals(12, javaObjectDeserializer0.getFastMatchToken());
      assertNotNull(javaObjectDeserializer0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("scanFieldIntArray", parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertNotNull(defaultJSONParser0);
      
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class1, "}T:dfh]^q8t", fieldArray0);
      assertNull(field0);
      
      FieldInfo fieldInfo0 = null;
      try {
        fieldInfo0 = new FieldInfo("f", (Class<?>) null, (Class<?>) null, (Type) null, (Field) null, (-30733247), (-30733247), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.FieldInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("com.alibaba.fastjson.serializer.StringCodec");
      assertEquals(2022598471736692923L, long0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      Float float0 = new Float((double) 2022598471736692923L);
      assertEquals(2.02259851E18F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Timestamp timestamp0 = new Timestamp(2022598471736692923L);
      assertEquals(923000000, timestamp0.getNanos());
      assertEquals("64095564-01-28 23:44:52.923", timestamp0.toString());
      assertNotNull(timestamp0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory1);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(parserConfig0);
      
      ParserConfig parserConfig1 = new ParserConfig((ClassLoader) null);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) float0, (Class<IllegalMonitorStateException>) null, parserConfig1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // clazz is null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache(",'tSTxj9b", hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(field0);
      
      Class<InstantiationError> class0 = InstantiationError.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      ThreadGroup threadGroup0 = new ThreadGroup(",'tSTxj9b");
      assertEquals(",'tSTxj9b", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, ",'tSTxj9b");
      assertEquals(",'tSTxj9b", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(mockThread0, ",'tSTxj9b");
      assertEquals(",'tSTxj9b", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1);
      assertEquals(",'tSTxj9b", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertNotNull(mockThread2);
      
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      assertEquals(",'tSTxj9b", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertEquals(",'tSTxj9b", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader2, classLoader1);
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertNotNull(classLoader2);
      
      classLoader1.clearAssertionStatus();
      assertEquals(",'tSTxj9b", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      assertSame(classLoader1, classLoader2);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader2.setDefaultAssertionStatus(false);
      assertSame(classLoader2, classLoader1);
      assertFalse(classLoader2.equals((Object)classLoader0));
      
      Class<?> class1 = TypeUtils.loadClass(",'tSTxj9b", classLoader2);
      assertSame(classLoader2, classLoader1);
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertNull(class1);
      
      Class<Character> class2 = Character.TYPE;
      assertEquals("char", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(",'tSTxj9b");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \",'tSTxj9b\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader2 = aSMClassLoader0.getParent();
      assertSame(classLoader0, classLoader2);
      assertSame(classLoader2, classLoader0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertNotNull(classLoader2);
      
      Class<Double> class0 = Double.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      Point point0 = new Point();
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertNotNull(point0);
      
      String string0 = linkedHashMap0.put((String) null, (String) null);
      assertEquals(1, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      assertNull(string0);
      
      Point point1 = new Point(point0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      assertTrue(point1.equals((Object)point0));
      assertNotNull(point1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(linkedHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("kr_>UQns");
      assertEquals(">UQNS", locale0.getCountry());
      assertEquals("kr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kau", locale0.getISO3Language());
      assertEquals("kr_>UQNS", locale0.toString());
      assertNotNull(locale0);
      
      Class<?> class0 = TypeUtils.loadClass("kr_>UQns");
      assertNull(class0);
      
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      int int0 = (-1935042767);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1935042767), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1935042767
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertNull(noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNotNull(noSuchMethodError0);
      
      Class<?> class0 = TypeUtils.loadClass("");
      assertNull(class0);
      
      Class<?> class1 = TypeUtils.loadClass("EwfX27eVDS9%(aM8;");
      assertNull(class1);
      
      TypeUtils.clearClassMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      AtomicLong atomicLong0 = new AtomicLong((-1209L));
      assertEquals((byte)71, atomicLong0.byteValue());
      assertEquals((-1209), atomicLong0.intValue());
      assertEquals((short) (-1209), atomicLong0.shortValue());
      assertEquals((-1209.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals((-1209L), atomicLong0.get());
      assertEquals("-1209", atomicLong0.toString());
      assertEquals((-1209.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((-1209L), atomicLong0.longValue());
      assertNotNull(atomicLong0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.Object@177e2954
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNull(noSuchMethodError0.getMessage());
      assertNotNull(noSuchMethodError0);
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache("OU", hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(field0);
      
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      Float float0 = new Float((double) (-328));
      assertEquals((-328.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1119.77275));
      assertEquals((-1119.7727F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Timestamp timestamp0 = new Timestamp((-328));
      assertEquals("1969-12-31 23:59:59.672", timestamp0.toString());
      assertEquals(672000000, timestamp0.getNanos());
      assertNotNull(timestamp0);
      
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      Float float2 = TypeUtils.castToFloat(float1);
      assertEquals((-1119.7727F), (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      String string0 = TypeUtils.decapitalize("OU");
      assertEquals("OU", string0);
      assertNotNull(string0);
  }
}
