/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:01:12 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Random;
import java.util.stream.IntStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceInnerProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(5, (double) 5, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(10, 1.0, (Random) mockRandom0);
      Vector vector0 = compressedVector0.blankOfLength(10);
      assertEquals(10, compressedVector0.length());
      assertEquals(10, vector0.length());
      assertFalse(vector0.equals((Object)compressedVector0));
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      CompressedVector compressedVector0 = new CompressedVector();
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3643, 3643);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3643, vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(12, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      boolean boolean0 = compressedVector0.nonZeroAt((-81));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.setAll(0.0);
      compressedVector0.toDiagonalMatrix();
      compressedVector0.swapElements(0, 0);
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("hk:xRX");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(0, (-472));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -472.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(880);
      compressedVector0.swapElements(880, 9);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Integer integer0 = new Integer(1607);
      hashMap0.put(integer0, (Float) null);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 1607);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3, 3);
      compressedVector0.setAll((-1.0));
      compressedVector0.swapElements(3, 3);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 13);
      Vector vector0 = compressedVector0.blankOfLength(13);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertTrue(vector0.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2100.737);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      double double0 = compressedVector0.manhattanNorm();
      assertEquals(2100.737, double0, 0.01);
      
      Matrix matrix0 = compressedVector0.toDiagonalMatrix();
      assertEquals((-2100.737), matrix0.min(), 0.01);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap1, 9);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(9, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("i-\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2100.737);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      int int0 = 0;
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      Integer integer0 = new Integer(0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.toCSV((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      compressedVector0.update(vectorFunction0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(247);
      assertEquals(247, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(3, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2, 2);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(2, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(201);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(3654, (-280.066485176279), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.setAll(16);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2268);
      compressedVector0.setAll(2268);
      Integer integer0 = new Integer((-247));
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(3, (-4846));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextGaussian();
      mockRandom0.nextDouble();
      mockRandom0.ints();
      CompressedVector compressedVector0 = CompressedVector.random(1, (double) 1, (Random) mockRandom0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      CompressedVector compressedVector1 = new CompressedVector(6028, 6028);
      Vector.random(720, mockRandom0);
      compressedVector0.iterator();
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer(25);
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(3.164427613854135).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(25, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.toSparseVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1915.4165777878).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-2902), vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (-2100.737);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Matrix matrix0 = compressedVector0.toDiagonalMatrix();
      assertEquals((-2100.737), matrix0.min(), 0.01);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Vector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(6, 6);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.swapElements(2107, 1254);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1739.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(6, vectorFunction0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertNotNull(byteArray0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2146635651);
      assertEquals(2146635651, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Byte byte0 = new Byte((byte) (-101));
      assertEquals((byte) (-101), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = hashMap0.put(integer0, byte0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(byte1);
      
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 7);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, sparseVector0.cardinality());
      assertEquals(7, sparseVector0.length());
      assertEquals(0.14285714285714285, sparseVector0.density(), 0.01);
      assertNotNull(sparseVector0);
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      assertNotSame(sparseVector0, compressedVector0);
      
      boolean boolean0 = compressedVector0.nonZeroAt(2146635651);
      assertFalse(boolean0);
      assertEquals(2146635651, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertNotSame(compressedVector0, sparseVector0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      int int0 = mockRandom0.nextInt(2146439941);
      assertEquals(0, int0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      CompressedVector compressedVector0 = CompressedVector.random(1, (double) 1, (Random) mockRandom0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(1, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotNull(compressedVector1);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("SNELi");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2962.94127533479;
      doubleArray0[1] = (-128.375946519);
      doubleArray0[1] = (-265.483445799);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {2962.94127533479, (-265.483445799), 0.0}, doubleArray0, 0.01);
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-1), (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = (-2100.737);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(20, compressedVector0.length());
      assertEquals(0.05, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertNotNull(decimalFormat0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(90.93304271056198).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      assertEquals(20, compressedVector0.length());
      assertEquals(0.05, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      // Undeclared exception!
      try { 
        Vector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2100.737);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {(-2100.737)}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertNotNull(decimalFormat0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector0.toDiagonalMatrix();
      assertArrayEquals(new double[] {(-2100.737)}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals((-2100.737), cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      assertArrayEquals(new double[] {(-2100.737)}, doubleArray0, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        Vector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1102, 5);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1102, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)4, (byte)78, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1102, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-903));
      assertEquals((-903), (int)integer0);
      assertNotNull(integer0);
      
      Byte byte0 = hashMap0.put(integer0, (Byte) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(byte0);
      
      // Undeclared exception!
      try { 
        SparseVector.fromMap(hashMap0, (-289));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (-2100.737);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(14, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertNotNull(decimalFormat0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector0.toDiagonalMatrix();
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(14, compressedVector0.length());
      assertEquals(0.00510204081632653, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals((-2100.737), cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(14, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(14, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      double double0 = compressedVector0.getOrElse(0, (-2100.737));
      assertEquals((-2100.737), double0, 0.01);
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(14, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("1u;p(|1QTe7mT");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 870;
      int[] intArray0 = new int[6];
      intArray0[1] = 870;
      intArray0[5] = 870;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 870.0}, doubleArray0, 0.01);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      boolean boolean0 = compressedVector0.nonZeroAt(0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 870.0}, doubleArray0, 0.01);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertArrayEquals(new double[] {0.0, 870.0}, doubleArray0, 0.01);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 158.428721202198;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {158.428721202198, 0.0, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertEquals(4, compressedVector0.length());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      Float float0 = new Float(158.428721202198);
      assertEquals(158.42873F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance();
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("\u00A4", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-\u00A4", decimalFormat0.getNegativePrefix());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertNotNull(decimalFormat0);
      
      String string0 = compressedVector0.mkString((NumberFormat) decimalFormat0, "^9&Yn#(A[@arZ");
      assertEquals("\u00A4158.43^9&Yn#(A[@arZ\u00A40.00^9&Yn#(A[@arZ\u00A4\u221E^9&Yn#(A[@arZ\u00A40.00", string0);
      assertArrayEquals(new double[] {158.428721202198, 0.0, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertEquals(4, compressedVector0.length());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("\u00A4", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-\u00A4", decimalFormat0.getNegativePrefix());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertNotNull(string0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2100.737);
      int[] intArray0 = new int[6];
      intArray0[1] = 3824;
      intArray0[3] = 3824;
      intArray0[4] = 8;
      intArray0[5] = 8;
      CompressedVector compressedVector0 = new CompressedVector(3824, 3824, doubleArray0, intArray0);
      assertArrayEquals(new double[] {(-2100.737)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 3824, 0, 3824, 8, 8}, intArray0);
      assertEquals(3824, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3824, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength(2276);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 870;
      doubleArray0[1] = (double) 870;
      int[] intArray0 = new int[6];
      intArray0[1] = 870;
      intArray0[5] = 870;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {870.0, 870.0}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      boolean boolean0 = compressedVector0.nonZeroAt(0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {870.0, 870.0}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = (-2100.737);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.07692307692307693, compressedVector0.density(), 0.01);
      assertEquals(13, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2100.737)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-4864), vectorFunction0);
      assertEquals(0.15384615384615385, compressedVector0.density(), 0.01);
      assertEquals(13, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      
      // Undeclared exception!
      try { 
        Vector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(14, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertNotNull(decimalFormat0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector0.toDiagonalMatrix();
      assertEquals(14, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(14, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(14, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      double double0 = compressedVector0.getOrElse(0, 0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(14, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      int int0 = (-4864);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      double double0 = (-2100.737);
      doubleArray0[0] = (-2100.737);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(16, compressedVector0.length());
      assertEquals(0.0625, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertNotNull(decimalFormat0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(16, compressedVector0.length());
      assertEquals(0.0625, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      int int0 = 1840700269;
      Double double1 = new Double((-2100.737));
      assertEquals((-2100.737), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      assertNotNull(ooPlaceInnerProduct0);
      
      Double double2 = ooPlaceInnerProduct0.apply((SparseVector) compressedVector0, (SparseVector) compressedVector0);
      assertEquals(4413095.943169001, (double)double2, 0.01);
      assertEquals(16, compressedVector0.length());
      assertEquals(0.0625, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      // Undeclared exception!
      DenseVector.unit(1840700269);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 158.428721202198;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 158.428721202198, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertNotNull(decimalFormat0);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      int int0 = 0;
      double double0 = compressedVector0.getOrElse(0, 158.428721202198);
      assertEquals(158.428721202198, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 158.428721202198, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      
      Integer integer0 = new Integer((-4846));
      assertEquals((-4846), (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      int int1 = 1114;
      // Undeclared exception!
      try { 
        SparseVector.fromCollection((Collection<? extends Number>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2276);
      assertEquals(2276, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(2276);
      assertEquals(2276, compressedVector0.cardinality());
      assertEquals(2276, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      Integer integer0 = new Integer(2276);
      assertEquals(2276, (int)integer0);
      assertNotNull(integer0);
      
      Float float0 = new Float((double) 2276);
      assertEquals(2276.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int0 = (-2401);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-2401), 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      double double0 = (-2100.737);
      doubleArray0[0] = (-2100.737);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(14, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertNotNull(decimalFormat0);
      
      Float float0 = new Float((float) (-4846));
      assertEquals((-4846.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      compressedVector0.swapElements(0, (-4846));
      assertEquals(14, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
      
      Float float1 = new Float((double) 0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        CompressedVector.zero((-4846), (-4846));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -4846
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 2276;
      CompressedVector compressedVector0 = new CompressedVector(2276, 2276);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2276, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(2276);
      assertEquals(2276, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2276, compressedVector0.length());
      
      Integer integer0 = new Integer(2276);
      assertEquals(2276, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Float float0 = new Float((double) 2276);
      assertEquals(2276.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Float float1 = new Float(4016.784378093);
      assertEquals(4016.7844F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      int int1 = 373;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(2276, 373);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(12, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertNotNull(decimalFormat0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector0.toDiagonalMatrix();
      assertEquals(12, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(12, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(12, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      double double0 = compressedVector0.norm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(12, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-344.5989916263734)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      assertEquals(12, compressedVector0.length());
      assertEquals(0.08333333333333333, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      compressedVector0.swapElements(0, 32);
      assertEquals(12, compressedVector0.length());
      assertEquals(0.08333333333333333, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      Float float1 = new Float((double) 0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      long long0 = (-2652L);
      MockRandom mockRandom0 = new MockRandom((-2652L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random((-1), (double) 0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (-2100.737);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(12, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.08333333333333333, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertNotNull(decimalFormat0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector0.toDiagonalMatrix();
      assertEquals(12, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.08333333333333333, compressedVector0.density(), 0.01);
      assertEquals(12, cRSMatrix0.rows());
      assertEquals((-2100.737), cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.006944444444444444, cRSMatrix0.density(), 0.01);
      assertEquals(12, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      double double0 = compressedVector0.getOrElse(0, (-2100.737));
      assertEquals((-2100.737), double0, 0.01);
      assertEquals(12, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.08333333333333333, compressedVector0.density(), 0.01);
      
      Integer integer0 = new Integer((-4846));
      assertEquals((-4846), (int)integer0);
      assertNotNull(integer0);
      
      Float float0 = new Float(1274.0F);
      assertEquals(1274.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min(1274.0F, 1274.0F);
      assertEquals(1274.0F, float1, 0.01F);
      
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.08333333333333333, compressedVector1.density(), 0.01);
      assertEquals(12, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(compressedVector1, compressedVector0);
      
      int int0 = 9993;
      compressedVector0.swapElements(0, 9993);
      assertEquals(12, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.08333333333333333, compressedVector0.density(), 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertNotSame(compressedVector0, compressedVector1);
      
      CompressedVector compressedVector2 = CompressedVector.fromArray(doubleArray0);
      assertEquals(12, compressedVector2.length());
      assertEquals(1, compressedVector2.cardinality());
      assertEquals(0.08333333333333333, compressedVector2.density(), 0.01);
      assertNotNull(compressedVector2);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector3 = (CompressedVector)compressedVector2.to(vectorFactory0);
      assertEquals(12, compressedVector0.length());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(12, compressedVector2.length());
      assertEquals(1, compressedVector2.cardinality());
      assertEquals(0.08333333333333333, compressedVector2.density(), 0.01);
      assertEquals(2, compressedVector3.cardinality());
      assertEquals(0.16666666666666666, compressedVector3.density(), 0.01);
      assertEquals(12, compressedVector3.length());
      assertNotNull(compressedVector3);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertTrue(compressedVector3.equals((Object)compressedVector1));
      assertTrue(compressedVector3.equals((Object)compressedVector2));
      assertNotSame(compressedVector0, compressedVector2);
      assertSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector3);
      assertNotSame(compressedVector3, compressedVector2);
      assertSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector1);
      
      VectorIterator vectorIterator0 = compressedVector2.iterator();
      assertEquals(12, compressedVector2.length());
      assertEquals(1, compressedVector2.cardinality());
      assertEquals(0.08333333333333333, compressedVector2.density(), 0.01);
      assertNotNull(vectorIterator0);
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertTrue(compressedVector2.equals((Object)compressedVector3));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector3);
      
      CompressedVector compressedVector4 = null;
      try {
        compressedVector4 = new CompressedVector((-438), 9993);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -438
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (-2100.737);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(14, compressedVector0.length());
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertNotNull(decimalFormat0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector0.toDiagonalMatrix();
      assertEquals(14, compressedVector0.length());
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(14, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals((-2100.737), cRSMatrix0.min(), 0.01);
      assertEquals(14, cRSMatrix0.rows());
      assertEquals(0.00510204081632653, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      double double0 = compressedVector0.getOrElse(0, (-2100.737));
      assertEquals((-2100.737), double0, 0.01);
      assertEquals(14, compressedVector0.length());
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      Float float0 = new Float((float) (-4864));
      assertEquals((-4864.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      compressedVector0.swapElements(0, (-4846));
      assertEquals(14, compressedVector0.length());
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2100.737)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      assertEquals(14, compressedVector0.length());
      assertEquals(0.14285714285714285, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      
      Float float1 = new Float((double) 0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Integer integer0 = new Integer(8);
      assertEquals(8, (int)integer0);
      assertNotNull(integer0);
      
      compressedVector0.swapElements((-4864), 0);
      assertEquals(14, compressedVector0.length());
      assertEquals(0.14285714285714285, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      HashMap<Integer, Float> hashMap2 = new HashMap<Integer, Float>();
      assertTrue(hashMap2.isEmpty());
      assertEquals(0, hashMap2.size());
      assertNotNull(hashMap2);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-4846));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -4846
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 2276;
      CompressedVector compressedVector0 = new CompressedVector(2276, 2276);
      assertEquals(2276, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)8, (byte) (-28), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2276, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(byteArray0);
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)8, (byte) (-28), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2276, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(2276, compressedVector1.length());
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.divide(2276);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)8, (byte) (-28), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2276, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(2276, compressedVector1.length());
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(2276, compressedVector2.length());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertNotNull(compressedVector2);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      
      Integer integer0 = new Integer(1830);
      Float float0 = new Float((double) 1830);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt(2276, vectorFunction0);
      Integer integer1 = new Integer(373);
      Float float1 = new Float((double) 1830);
      MockRandom mockRandom0 = new MockRandom(2276);
      Vector.constant(1830, 0.0);
      // Undeclared exception!
      try { 
        CompressedVector.random(2276, (double) (-2141285040), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1049.219645336284;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {1.0, 1049.219645336284, Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, compressedVector0.length());
      assertEquals(0.42857142857142855, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      compressedVector0.swapElements(393, (-4846));
      assertArrayEquals(new double[] {1.0, 1049.219645336284, Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, compressedVector0.length());
      assertEquals(0.42857142857142855, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1, vectorFunction0);
      assertArrayEquals(new double[] {1.0, 1049.219645336284, Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.2857142857142857, compressedVector0.density(), 0.01);
      
      Float float1 = new Float((-1.0));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = (-289);
      // Undeclared exception!
      try { 
        compressedVector0.eachNonZero((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (-2100.737);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(14, compressedVector0.length());
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertNotNull(decimalFormat0);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      float float0 = 205.0F;
      compressedVector0.swapElements(0, (-4846));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(14, compressedVector0.length());
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Float float1 = new Float((double) 0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      int int0 = 22;
      compressedVector0.swapElements(22, (-4846));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(14, compressedVector0.length());
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
      
      double double0 = compressedVector0.manhattanNorm();
      assertEquals(2100.737, double0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(14, compressedVector0.length());
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.toDenseVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2276, 2276);
      assertEquals(2276, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(2276);
      assertEquals(2276, compressedVector0.length());
      assertEquals(2276, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      Integer integer0 = new Integer(2276);
      assertEquals(2276, (int)integer0);
      assertNotNull(integer0);
      
      Float float0 = new Float((double) 2276);
      assertEquals(2276.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Float float1 = new Float(4016.784378093);
      assertEquals(4016.7844F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      compressedVector0.swapElements(32, 48);
      assertEquals(2276, compressedVector0.length());
      assertEquals(2276, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        CompressedVector.zero(32, 2237);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 2237.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-1911.3247476726349);
      double double0 = 2531.4199565;
      doubleArray0[2] = (-1911.3247476726349);
      doubleArray0[3] = 2531.4199565;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1911.3247476726349), (-1911.3247476726349), 2531.4199565}, doubleArray0, 0.01);
      assertEquals(0.75, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, (-1911.3247476726349)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertArrayEquals(new double[] {0.0, (-1911.3247476726349), (-1911.3247476726349), 2531.4199565}, doubleArray0, 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.length());
      
      int int0 = 377;
      Integer integer0 = new Integer(377);
      assertEquals(377, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = 17;
      int int2 = 386;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(17, 386);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1783.884369685;
      doubleArray0[1] = (-1911.3247476726349);
      doubleArray0[2] = 2531.4199565;
      doubleArray0[3] = 2531.4199565;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {1783.884369685, (-1911.3247476726349), 2531.4199565, 2531.4199565}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY, 1783.884369685, 1783.884369685, (-1911.3247476726349)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertArrayEquals(new double[] {1783.884369685, (-1911.3247476726349), 2531.4199565, 2531.4199565}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      
      int int0 = 377;
      Integer integer0 = new Integer(377);
      assertEquals(377, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = 386;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(17, 386);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1783.884369685;
      double double0 = (-1911.5109546);
      doubleArray0[1] = (-1911.5109546);
      doubleArray0[2] = 2531.4199565;
      doubleArray0[3] = (-755.23);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {1783.884369685, (-1911.5109546), 2531.4199565, (-755.23)}, doubleArray0, 0.01);
      assertEquals(4, compressedVector0.length());
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertArrayEquals(new double[] {1783.884369685, (-1911.5109546), 2531.4199565, (-755.23)}, doubleArray0, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new double[] {1783.884369685, (-1911.5109546), 2531.4199565, (-755.23)}, doubleArray0, 0.01);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)4, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = compressedVector0.toBinary();
      assertArrayEquals(new double[] {1783.884369685, (-1911.5109546), 2531.4199565, (-755.23)}, doubleArray0, 0.01);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)4, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      CompressedVector compressedVector1 = CompressedVector.zero(394);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(394, compressedVector1.length());
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(compressedVector1, compressedVector0);
      
      // Undeclared exception!
      try { 
        SparseVector.fromCSV("org.la4j.vector.sparse.CompressedVector");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (-2100.737);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(14, compressedVector0.length());
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(14, compressedVector0.length());
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
      assertNotNull(byteArray0);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(14, compressedVector0.length());
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
      assertNotNull(vectorIterator0);
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(14, compressedVector0.length());
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
      assertEquals(14, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.07142857142857142, compressedVector1.density(), 0.01);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      compressedVector1.setAll((-2100.737));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(14, compressedVector0.length());
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
      assertEquals(14, compressedVector1.cardinality());
      assertEquals(14, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.divide((-2100.737));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(14, compressedVector0.length());
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
      assertEquals(14, compressedVector2.length());
      assertEquals(1, compressedVector2.cardinality());
      assertEquals(0.07142857142857142, compressedVector2.density(), 0.01);
      assertNotNull(compressedVector2);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      
      double double0 = compressedVector0.euclideanNorm();
      assertEquals(2100.737, double0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(14, compressedVector0.length());
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      
      Byte byte0 = new Byte((byte) (-41));
      assertEquals((byte) (-41), (byte)byte0);
      assertNotNull(byte0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        compressedVector1.select(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No elements selected.
         //
         verifyException("org.la4j.Vector", e);
      }
  }
}
