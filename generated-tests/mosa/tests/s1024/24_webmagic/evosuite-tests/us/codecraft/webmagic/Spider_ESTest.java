/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 15:22:23 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#wbLA^j!wg");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider0.setPipelines(linkedList0);
      // Undeclared exception!
      try { 
        spider0.get("#wbLA^j!wg");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      assertTrue(spider1.isSpawnUrl());
      
      spider1.setSpawnUrl(false);
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.scheduler(queueScheduler0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider1 = spider0.pipeline(collectorPipeline0);
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[2];
      stringArray0[1] = null;
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.fromValue(86);
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("sx;gzL]-C");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      spider1.getStatus();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#wb|LA^j!g");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#wb|LA^j!g");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.scheduler(queueScheduler0);
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertTrue(spider0.isSpawnUrl());
      assertNull(list0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Fz !^=:pneo<h");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[19];
      Request request0 = new Request();
      Request request1 = request0.setMethod(":t0k");
      request0.getExtras();
      Request request2 = request1.setExtras((Map<String, Object>) null);
      requestArray0[0] = request2;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      spider0.thread((ExecutorService) forkJoinPool0, 1871);
      Page page0 = new Page();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Links can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).");
      Spider spider0 = Spider.create(simplePageProcessor0);
      boolean boolean0 = spider0.isExitWhenComplete();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(boolean0);
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.thread(39);
      // Undeclared exception!
      try { 
        spider0.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      int int0 = (-426);
      // Undeclared exception!
      try { 
        spider0.thread((-426));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider.create(simplePageProcessor0);
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      spider0.getSite();
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#wb|LA^j!g");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedHashSet0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "d:GxK)_%\\|6AA-m7>";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("d:GxK)_%|6AA-m7>");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.start();
      spider0.stop();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      boolean boolean0 = spider0.isSpawnUrl();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(boolean0);
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = new Page();
      Spider spider1 = spider0.setUUID("");
      spider0.stop();
      spider1.start();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#wb|LA^j!g");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) forkJoinPool0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.extractAndAddRequests((Page) null, false);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.sleep(5);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#wb|LA^j!g");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Rq,");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page.fail();
      spider0.stop();
      spider0.getScheduler();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request();
      Request request1 = request0.setMethod(":t0k");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":t0k");
      request0.getExtras();
      request1.setExtras((Map<String, Object>) null);
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#b|LA^jg");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      spider0.startUrls(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("#b|LA^jg", "#b|LA^jg");
      // Undeclared exception!
      try { 
        spider0.get("#b|LA^jg");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("application/x-www-form-urlencoded");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      Spider spider1 = spider0.setSpawnUrl(true);
      int int0 = spider1.getThreadAlive();
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0, int0);
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Fz !^=:pneo<h");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GZU:NV[oUFcsV&r<o");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("GZU:NV[oUFcsV&r<o", "GZU:NV[oUFcsV&r<o");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider1.run();
      Request request0 = new Request("LrYdwr");
      assertFalse(request0.isBinaryContent());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request();
      Site site0 = simplePageProcessor0.getSite();
      Site site1 = site0.addCookie("_cycle_tried_times", "_cycle_tried_times", (String) null);
      Site site2 = site1.setDomain("Gx");
      Site site3 = site2.setRetryTimes(66);
      spider0.site = site3;
      Request request1 = request0.setMethod(":t0k");
      request0.getExtras();
      Request request2 = request1.setExtras((Map<String, Object>) null);
      requestArray0[0] = request2;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.scheduler(queueScheduler0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("application/x-www-form-urlencoded");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      // Undeclared exception!
      try { 
        spider1.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_lYx[UqxEyjH");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("_lYx[UqxEyjH", "_lYx[UqxEyjH");
      spider0.downloader(phantomJSDownloader0);
      // Undeclared exception!
      try { 
        spider0.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("l4 Dez/sz+BVHnbnL[");
      Spider spider0 = new Spider(simplePageProcessor0);
      long long0 = spider0.getPageCount();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, long0);
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      spider0.downloader(phantomJSDownloader0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#wbLA^j!wg");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("#wbLA^j!wg");
      Spider spider0 = new Spider(simplePageProcessor1);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("#wbLA^j!wg");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      String[] stringArray0 = new String[0];
      Spider spider2 = spider1.addUrl(stringArray0);
      spider2.getSpiderListeners();
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(")w");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setEmptySleepTime(3350);
      Request request0 = new Request(")w");
      assertEquals(")w", request0.getUrl());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GZU:yNV[oUcsV&r>o");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("GZU:yNV[oUcsV&r>o", "GZU:yNV[oUcsV&r>o");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      spider1.getAll((Collection<String>) linkedHashSet0);
      // Undeclared exception!
      try { 
        spider1.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#wb|LA^j!g");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider1 = spider0.startUrls(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("#wb|LA^j!g", "#wb|LA^j!g");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      // Undeclared exception!
      try { 
        spider2.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("hOsu*1pz&_$)3=2PZA ", "#wb|LA^j!g");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertTrue(spider1.isExitWhenComplete());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      spider0.getAll((Collection<String>) linkedHashSet0);
      spider1.initComponent();
      spider0.getThreadAlive();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#wb|LA^j!g");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("#wb|LA^j!g", "#wb|LA^j!g");
      spider0.downloader(phantomJSDownloader0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      // Undeclared exception!
      try { 
        spider1.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "#wb|LA^j!g";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#wb|LA^j!g");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      SpiderMonitor.instance();
      MockThread mockThread0 = new MockThread(spider0, "");
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn(mockThread0).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(5, threadFactory0);
      BlockingQueue<Runnable> blockingQueue0 = scheduledThreadPoolExecutor0.getQueue();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy1 = new ThreadPoolExecutor.DiscardOldestPolicy();
      MockThread mockThread1 = new MockThread();
      threadPoolExecutor_DiscardOldestPolicy1.rejectedExecution(mockThread1, scheduledThreadPoolExecutor0);
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(5, 5, 5, timeUnit0, blockingQueue0, threadPoolExecutor_DiscardOldestPolicy1);
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 86);
      String string1 = ".+X";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(string0, string1);
      spider0.downloader(phantomJSDownloader0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedHashSet0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GZU:yNV[oUcsV&r>o");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("GZU:yNV[oUcsV&r>o", "GZU:yNV[oUcsV&r>o");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider1.stop();
      spider0.getStartTime();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(". !m1w04]");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", ". !m1w04]");
      spider0.downloader(phantomJSDownloader0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      String[] stringArray0 = new String[0];
      spider0.test(stringArray0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GZU:NV[oUFcsV&r<o");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setScheduler((Scheduler) null);
      Spider spider2 = spider1.scheduler((Scheduler) null);
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GZU:NV[oUFcsV&r<o");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("GZU:NV[oUFcsV&r<o", "GZU:NV[oUFcsV&r<o");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = null;
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      ForkJoinTask<SpiderMonitor.MonitorSpiderListener> forkJoinTask0 = ForkJoinTask.adapt((Runnable) spider1, spiderMonitor_MonitorSpiderListener0);
      ForkJoinTask<SpiderMonitor.MonitorSpiderListener> forkJoinTask1 = forkJoinTask0.fork();
      forkJoinPool0.submit(forkJoinTask1);
      Spider spider2 = spider0.setExecutorService(forkJoinPool0);
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }
}
