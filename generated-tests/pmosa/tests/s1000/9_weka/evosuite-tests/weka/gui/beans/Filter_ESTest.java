/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 14:52:30 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.GridLayout;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.awt.Menu;
import java.awt.MenuBar;
import java.awt.Panel;
import java.awt.event.HierarchyBoundsListener;
import java.beans.EventSetDescriptor;
import java.beans.PropertyChangeListener;
import java.util.Locale;
import javax.swing.Icon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JPopupMenu;
import javax.swing.JRootPane;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.border.BevelBorder;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.text.StyledEditorKit;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.associations.Apriori;
import weka.associations.FilteredAssociator;
import weka.classifiers.meta.FilteredClassifier;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.converters.TextDirectoryLoader;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;
import weka.filters.supervised.instance.StratifiedRemoveFolds;
import weka.gui.Logger;
import weka.gui.SysErrLog;
import weka.gui.beans.Appender;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.Classifier;
import weka.gui.beans.ClassifierPerformanceEvaluator;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CostBenefitAnalysis;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.DataSourceListener;
import weka.gui.beans.DataVisualizer;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.GraphViewer;
import weka.gui.beans.ImageSaver;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceListener;
import weka.gui.beans.InstanceStreamToBatchMaker;
import weka.gui.beans.Loader;
import weka.gui.beans.Saver;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetListener;
import weka.gui.beans.TrainingSetMaker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.removePropertyChangeListener((PropertyChangeListener) null);
      Saver saver0 = new Saver();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      saver0.addAncestorListener(ancestorListener0);
      filter0.removeDataSourceListener(saver0);
      filter0.getCustomName();
      filter0.addTrainingSetListener(saver0);
      boolean boolean0 = filter0.eventGeneratable("AllFilter");
      assertFalse(boolean0);
      
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Logger logger0 = substringLabeler0.m_log;
      filter0.setLog((Logger) null);
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      filter0.addInstanceListener(substringLabeler0);
      filter0.getFilter();
      Classifier classifier0 = new Classifier();
      filter0.removeTestSetListener(classifier0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setCustomName("Date");
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      boolean boolean0 = filter0.eventGeneratable("dataSet");
      assertEquals("Date", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setCursor((Cursor) null);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      filter0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      // Undeclared exception!
      try { 
        filter0.performRequest("[Filter] ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Filter]  not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.performRequest("dataSet");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dataSet not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.removeTrainingSetListener((TrainingSetListener) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      substringReplacer0.getKeyListeners();
      filter0.isFocusable();
      BevelBorder bevelBorder0 = new BevelBorder(0);
      Insets insets0 = bevelBorder0.getBorderInsets((Component) substringReplacer0);
      insets0.bottom = 0;
      insets0.right = 0;
      filter0.getInsets(insets0);
      filter0.addInstanceListener(substringReplacer0);
      filter0.getInputVerifier();
      filter0.isBusy();
      filter0.isBusy();
      BeanVisual beanVisual0 = filter0.getVisual();
      JComponent.getDefaultLocale();
      beanVisual0.getMinimumSize();
      filter0.removeDataSourceListener((DataSourceListener) null);
      filter0.connectionAllowed("weka/gui/beans/icons/");
      filter0.getVisual();
      filter0.enumerateRequests();
      filter0.removeInstanceListener(substringReplacer0);
      filter0.getVisual();
      filter0.setCustomName("weka/gui/beans/icons/");
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertEquals("weka/gui/beans/icons/", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.enumerateRequests();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.isBusy();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = "jCm";
      ImageSaver imageSaver0 = new ImageSaver();
      filter0.connectionNotification("jCm", imageSaver0);
      filter0.getWrappedAlgorithm();
      GraphViewer graphViewer0 = new GraphViewer();
      graphViewer0.getInputContext();
      graphViewer0.getVisual();
      int int0 = 41;
      int int1 = (-301);
      int int2 = (-3762);
      boolean boolean0 = false;
      MenuElement[] menuElementArray0 = new MenuElement[5];
      String string1 = "globalInfo";
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame("globalInfo");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.stop();
      Saver saver0 = new Saver();
      filter0.disconnectionNotification("Uq8G8g|C[U", (Object) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.disconnectionNotification("Stop", "Stop");
      filter0.globalInfo();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      trainTestSplitMaker0.setRequestFocusEnabled(false);
      trainTestSplitMaker0.isRequestFocusEnabled();
      filter0.removeTestSetListener(trainTestSplitMaker0);
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      
      String string1 = filter0.getCustomName();
      assertEquals("AllFilter", string1);
      
      boolean boolean0 = filter0.eventGeneratable("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>");
      assertFalse(boolean0);
      
      Saver saver0 = new Saver();
      filter0.addDataSourceListener(saver0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Instances instances0 = substringLabeler0.m_outputStructure;
      TestSetEvent testSetEvent0 = new TestSetEvent("'", (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setIgnoreRepaint(false);
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      crossValidationFoldMaker0.getPropertyChangeListeners();
      crossValidationFoldMaker0.getPropertyChangeListeners();
      Logger logger0 = crossValidationFoldMaker0.m_logger;
      crossValidationFoldMaker0.setRequestFocusEnabled(false);
      filter0.setLog((Logger) null);
      filter0.createVolatileImage(37, (-2883));
      filter0.isBusy();
      filter0.getMinimumSize();
      Locale locale0 = new Locale("", "$Ez\"OcGx:FX", "y~B#N,)'K'HLITW@C");
      filter0.setLocale(locale0);
      filter0.setCustomName("Filtering training data (");
      filter0.setCustomName("Filtering training data (");
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      filter0.removeTestSetListener(crossValidationFoldMaker0);
      filter0.getVisual();
      filter0.getFilter();
      BeanVisual beanVisual0 = filter0.getVisual();
      filter0.getWrappedAlgorithm();
      filter0.getFilter();
      filter0.getCustomName();
      filter0.getVisual();
      filter0.setVisual(beanVisual0);
      ConfigurationListener configurationListener1 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener1);
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      filter0.addDataSourceListener(trainingSetMaker0);
      // Undeclared exception!
      try { 
        filter0.performRequest("Filtering training data (");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Filtering training data ( not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.eventGeneratable("configuration");
      assertTrue(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0, (Instance) null, 3115);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, (Instances) null);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      filter0.connectionNotification("qRCq8IY>4&3?XxNW", stratifiedRemoveFolds0);
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.addTestSetListener(trainTestSplitMaker0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      filter0.removeTestSetListener(trainTestSplitMaker0);
      AllFilter allFilter0 = new AllFilter();
      Apriori apriori0 = new Apriori();
      apriori0.getInstancesOnlyClass();
      try { 
        weka.filters.Filter.useFilter((Instances) null, allFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      weka.filters.Filter filter1 = filteredClassifier0.getFilter();
      filter0.setFilter(filter1);
      filter0.stop();
      filter0.useDefaultVisual();
      assertEquals("Discretize", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      filter0.connectionNotification("qRCq8IY>4&3?XxNW", stratifiedRemoveFolds0);
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.addTestSetListener(trainTestSplitMaker0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 2147483645;
      intArray0[2] = 0;
      intArray0[3] = 3137;
      intArray0[4] = 2;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      System.setCurrentTimeMillis(104L);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, (Instances) null, (-2642), (-2642));
      DataSetEvent dataSetEvent0 = new DataSetEvent(trainingSetEvent0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      GridLayout gridLayout0 = new GridLayout(1945, 0, (-2191), 1945);
      Panel panel0 = new Panel(gridLayout0);
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(panel0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class java.awt.Panel : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getPropertyChangeListeners((String) null);
      Classifier classifier0 = new Classifier();
      classifier0.getInsets();
      filter0.addInstanceListener(classifier0);
      Object object0 = filter0.getWrappedAlgorithm();
      filter0.stop();
      filter0.setWrappedAlgorithm(object0);
      filter0.globalInfo();
      filter0.getFilter();
      filter0.useDefaultVisual();
      filter0.getFilter();
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultiFilter multiFilter0 = new MultiFilter();
      weka.filters.Filter filter1 = weka.filters.Filter.makeCopy(multiFilter0);
      filter0.setFilter(filter1);
      Appender appender0 = new Appender();
      filter0.removeInstanceListener(appender0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)24;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      filter0.addNotify();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("|M(%;4`@7P'RBE", "|M(%;4`@7P'RBE");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, instances0, (-3663), (-3663), (-1475881811), (-3663));
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("|M(%;4`@7P'RBE", "|M(%;4`@7P'RBE");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      boolean boolean0 = filter0.eventGeneratable("|M(%;4`@7P'RBE");
      assertTrue(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("|M(%;4`@7P'RBE", "|M(%;4`@7P'RBE");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      boolean boolean0 = filter0.eventGeneratable("|M(%;4`@7P'RBE");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      ImageSaver imageSaver0 = new ImageSaver();
      filter0.connectionNotification("jCm", imageSaver0);
      GraphViewer graphViewer0 = new GraphViewer();
      filter0.connectionNotification("jCm", (Object) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(instances0, instances0);
      Filter filter1 = new Filter();
      filter1.getGraphicsConfiguration();
      filter1.acceptTrainingSet(trainingSetEvent0);
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      DataSetEvent dataSetEvent0 = new DataSetEvent(instanceStreamToBatchMaker0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      filter0.connectionNotification("`=5_'i", classifierPerformanceEvaluator0);
      boolean boolean0 = filter0.eventGeneratable("`=5_'i");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      Loader loader0 = new Loader();
      filter0.connectionNotification("[Filter] ", loader0);
      boolean boolean0 = filter0.eventGeneratable("[Filter] ");
      assertTrue(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      Loader loader0 = new Loader();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.connectionNotification("instance", multiFilter0);
      boolean boolean0 = loader0.m_stopped;
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      SysErrLog sysErrLog0 = new SysErrLog();
      filter0.setLog(sysErrLog0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.removeInstanceListener(flowByExpression0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      ThreadGroup threadGroup0 = new ThreadGroup("J^V2QB~+v");
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      filter0.m_filterThread = (Thread) mockThread0;
      Random.setNextRandom(940);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertTrue(filter0.isBusy());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("jcCm", "jcCm");
      filter0.eventGeneratable("jcCm");
      filter0.addInstanceListener((InstanceListener) null);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      // Undeclared exception!
      try { 
        filter0.notifyInstanceListeners(instanceEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Filter filter0 = new Filter();
      Appender appender0 = new Appender();
      filter0.addInstanceListener(appender0);
      Sorter sorter0 = new Sorter();
      sorter0.getHeight();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      boolean boolean0 = filter0.eventGeneratable("X:bVUp$");
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Filter filter0 = new Filter();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)125;
      MockThread mockThread0 = new MockThread();
      filter0.m_filterThread = (Thread) mockThread0;
      byteArray0[1] = (byte)24;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      filter0.addNotify();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      filter0.addTestSetListener(dataVisualizer0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionAllowed("nY8@]");
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      weka.filters.Filter filter1 = filteredAssociator0.getFilter();
      filter0.setFilter(filter1);
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDataSet();
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      filter0.addTestSetListener(dataVisualizer0);
      TestSetEvent testSetEvent0 = new TestSetEvent(instances0, instances0);
      filter0.acceptTestSet(testSetEvent0);
      System.setCurrentTimeMillis(2000L);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      Appender appender0 = new Appender();
      Logger logger0 = appender0.m_log;
      filter0.setLog((Logger) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DataSetEvent dataSetEvent0 = new DataSetEvent(findWithCapabilities0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      instanceEvent0.setStatus(15);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      boolean boolean0 = filter0.connectionAllowed("instance");
      assertEquals("MultiFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }
}
