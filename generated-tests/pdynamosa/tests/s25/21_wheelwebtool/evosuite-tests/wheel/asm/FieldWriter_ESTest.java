/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 12:12:34 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-480));
      String[] stringArray0 = new String[0];
      classWriter0.visit(57, (-480), "Theprei mustznot be nul", "", "Theprei mustznot be nul", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "Theprei mustznot be nul", "Q).dJ^?9[", "Q).dJ^?9[", (Object) null);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-540));
      classWriter0.index = (-540);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "RuAtimuVasibleAnotations", "RuAtimuVasibleAnotations", "RuAtimuVasibleAnotations", "RuAtimuVasibleAnotations");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-499));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Theprei mustznot be nul";
      stringArray0[1] = "Synthetic";
      stringArray0[2] = "Synthetic";
      stringArray0[3] = "Theprei mustznot be nul";
      stringArray0[4] = "Theprei mustznot be nul";
      stringArray0[5] = "Synthetic";
      stringArray0[6] = "Theprei mustznot be nul";
      stringArray0[7] = "Theprei mustznot be nul";
      stringArray0[8] = "Theprei mustznot be nul";
      classWriter0.visit(64, (-499), "Synthetic", "Synthetic", "Theprei mustznot be nul", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-499), "Theprei mustznot be nul", "Theprei mustznot be nul", "Theprei mustznot be nul", "Theprei mustznot be nul");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-540));
      classWriter0.index = (-540);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "RuAtimuVasibleAnotations", "RuAtimuVasibleAnotations", "RuAtimuVasibleAnotations", "RuAtimuVasibleAnotations");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(946);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 5150, "b", "Invalid IOCase name: ", (String) null, "Invalid IOCase name: ");
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3594);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 64, "w,?d+^=xiY(( ", "Invalid IOCase name: ", "J8%]CJ1$Pma`r", "Invalid IOCase name: ");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3594);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-537), "", " JK'sCC{Qa7;", "AnnotationDefault", " JK'sCC{Qa7;");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-641));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-641), "Deprecated", "m", "m", (Object) null);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putLong((-1605L));
      ByteVector byteVector2 = byteVector1.putInt(507);
      byte[] byteArray0 = new byte[8];
      byteVector2.data = byteArray0;
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3594);
      Object object0 = new Object();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 2, "vc1JU<k1'", "Signature", (String) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@70e68dbe
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(26);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 169, "", "8zTJSd", "8zTJSd", "8zTJSd");
      ByteVector byteVector0 = new ByteVector();
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 169, "", "8zTJSd", "8zTJSd", "8zTJSd");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.visitAnnotation("LH8,", false);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3594);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2421), "8yf", "", "mvSv',>6IbvARD]", "");
      fieldWriter0.visitAnnotation("The wildcard array must not be null", true);
      ByteVector byteVector0 = new ByteVector(269);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-495));
      String[] stringArray0 = new String[0];
      classWriter0.visit(49, (-495), "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "RuntimeVisibleAnnotations", "wheel.asm.FieldWriter", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-540));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "RuAtimuVasibleAnotations", "RuAtimuVasibleAnotations", (String) null, (Object) null);
      Attribute attribute0 = new Attribute("[]");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3594);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2421), "8yf", "", "mvSv',>6IbvARD]", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-495));
      String[] stringArray0 = new String[0];
      classWriter0.visit(49, (-495), "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "RuntimeVisibleAnnotations", "wheel.asm.FieldWriter", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3594);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2421), "8yf", "", "mvSv',>6IbvARD]", "");
      fieldWriter0.visitAnnotation("The wildcard array must not be null", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 169, "", "8zTJSd", "8zTJSd", "8zTJSd");
      fieldWriter0.visitAnnotation("LH8,", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-540));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "RuAtimuVasibleAnotations", "RuAtimuVasibleAnotations", (String) null, (Object) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(59, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3594);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2421), "8yf", "", "mvSv',>6IbvARD]", "");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 3594, "", "mvSv',>6IbvARD]", "8zTJSd", "mvSv',>6IbvARD]");
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3594);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2421), "8yf", "", "mvSv',>6IbvARD]", "");
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 169, "", "8zTJSd", "8zTJSd", "8zTJSd");
      fieldWriter0.next = fieldWriter0;
      // Undeclared exception!
      try { 
        fieldWriter0.next.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }
}
