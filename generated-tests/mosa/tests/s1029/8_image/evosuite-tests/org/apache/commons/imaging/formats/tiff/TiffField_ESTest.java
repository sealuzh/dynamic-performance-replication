/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 19:59:53 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.nio.ByteOrder;
import java.util.regex.Pattern;
import org.apache.commons.imaging.formats.tiff.TiffElement;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeFloat;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeRational;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffField_ESTest extends TiffField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(2498, 2498, fieldTypeByte0, 2498, 2498, byteArray0, byteOrder0, 2498);
      tiffField0.dump();
      assertEquals(2498L, tiffField0.getCount());
      assertEquals(2498, tiffField0.getTag());
      assertEquals(2498, tiffField0.getDirectoryType());
      assertEquals(2498, tiffField0.getSortHint());
      assertEquals(2498, tiffField0.getBytesLength());
      assertEquals(2498, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(2489, 2489, fieldTypeByte0, 2489, 2489, byteArray0, byteOrder0, 2489);
      String string0 = tiffField0.getTagName();
      assertEquals(2489, tiffField0.getOffset());
      assertEquals("Unknown Tag (0x9b9)", string0);
      assertEquals(2489, tiffField0.getDirectoryType());
      assertEquals(2489, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField((-1309), (-1309), fieldTypeFloat0, (-1309), (-1309), byteArray0, byteOrder0, (-1309));
      tiffField0.getOversizeValueElement();
      // Undeclared exception!
      try { 
        tiffField0.toString();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(2515, 2515, fieldTypeByte0, 2515, 2515, byteArray0, byteOrder0, 2515);
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [B cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[67];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(2225, 2225, fieldTypeFloat0, 2225, 2225, byteArray0, byteOrder0, 2225);
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals(2225, tiffField0.getDirectoryType());
      assertEquals(2225, tiffField0.getTag());
      assertEquals(2225, tiffField0.getSortHint());
      assertNotNull(tiffElement0);
      assertEquals(2225L, tiffElement0.offset);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[65];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(2226, 2226, fieldTypeFloat0, 2226, 2226, byteArray0, byteOrder0, 2226);
      String string0 = tiffField0.getDescriptionWithoutValue();
      assertEquals(2226, tiffField0.getOffset());
      assertEquals(2226, tiffField0.getDirectoryType());
      assertEquals(2226, tiffField0.getSortHint());
      assertEquals("2226 (0x8b2: Unknown Tag): ", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(2489, 2489, fieldTypeByte0, 2489, 2489, byteArray0, byteOrder0, 2489);
      tiffField0.getFieldTypeName();
      assertEquals(2489, tiffField0.getSortHint());
      assertEquals(2489, tiffField0.getOffset());
      assertEquals(2489, tiffField0.getTag());
      assertEquals(2489, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[92];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(2195, 2195, fieldTypeFloat0, 2195, 2195, byteArray0, byteOrder0, 2195);
      boolean boolean0 = tiffField0.isLocalValue();
      assertEquals(2195, tiffField0.getOffset());
      assertFalse(boolean0);
      assertEquals(2195, tiffField0.getTag());
      assertEquals(2195, tiffField0.getDirectoryType());
      assertEquals(2195, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(327, 327, fieldTypeFloat0, 31, 31, byteArray0, byteOrder0, 31);
      String string0 = tiffField0.getTagName();
      assertEquals(31, tiffField0.getSortHint());
      assertEquals(327, tiffField0.getDirectoryType());
      assertEquals(31, tiffField0.getOffset());
      assertEquals(327, tiffField0.getTag());
      assertEquals("CleanFaxData", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(37, 37, fieldTypeFloat0, 37, 37, byteArray0, byteOrder0, 37);
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [F@1c90a5be for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      TiffField tiffField0 = new TiffField(88, 88, fieldTypeShort0, 88, 0L, byteArray0, byteOrder0, 88);
      int[] intArray0 = tiffField0.getIntArrayValue();
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      tiffField0.dump();
      assertEquals(88, tiffField0.getTag());
      assertEquals(88L, tiffField0.getCount());
      assertEquals(88, tiffField0.getSortHint());
      assertEquals(176, tiffField0.getBytesLength());
      assertEquals(88, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(2498, 2498, fieldTypeByte0, 2498, 2498, byteArray0, byteOrder0, 2498);
      int int0 = tiffField0.getSortHint();
      assertEquals(2498, tiffField0.getDirectoryType());
      assertEquals(2498, tiffField0.getTag());
      assertEquals(2498, tiffField0.getOffset());
      assertEquals(2498, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[67];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(2225, 2225, fieldTypeFloat0, 2225, 2225, byteArray0, byteOrder0, 2225);
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(2225, 2225);
      String string0 = tiffField_OversizeValueElement0.getElementDescription(true);
      assertNull(string0);
      assertEquals(2225, tiffField0.getSortHint());
      assertEquals(2225, tiffField0.getDirectoryType());
      assertEquals(2225, tiffField0.getTag());
      assertEquals(2225, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[21];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(2514, 1590, fieldTypeShort0, 1590, 1590, byteArray0, byteOrder0, 2514);
      tiffField0.dump();
      assertEquals(3180, tiffField0.getBytesLength());
      assertEquals(1590L, tiffField0.getCount());
      assertEquals(1590, tiffField0.getDirectoryType());
      assertEquals(2514, tiffField0.getTag());
      assertEquals(1590, tiffField0.getOffset());
      assertEquals(2514, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(2225, 2225, fieldTypeFloat0, 2225, 2225, byteArray0, byteOrder0, 2225);
      tiffField0.getDoubleArrayValue();
      assertEquals(2225, tiffField0.getSortHint());
      assertEquals(2225, tiffField0.getDirectoryType());
      assertEquals(8900, tiffField0.getBytesLength());
      assertEquals(2225, tiffField0.getTag());
      assertEquals(2225, tiffField0.getOffset());
      assertEquals(2225L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(2514, 2514, fieldTypeByte0, 2514, 2514, byteArray0, byteOrder0, 2514);
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@3445e9f6 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      TiffField tiffField0 = new TiffField(2515, 2515, fieldTypeRational0, 2515, 2515, byteArray0, byteOrder0, 2515);
      tiffField0.getDoubleArrayValue();
      tiffField0.dump();
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [Lorg.apache.commons.imaging.common.RationalNumber;@35a3dc0e
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[67];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(2225, 2225, fieldTypeFloat0, 2225, 2225, byteArray0, byteOrder0, 2225);
      tiffField0.dump();
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(2225, 2225);
      String string0 = tiffField_OversizeValueElement0.getElementDescription(false);
      assertEquals(2225, tiffField0.getSortHint());
      assertNotNull(string0);
      assertEquals(2225, tiffField0.getDirectoryType());
      assertEquals("OversizeValueElement, tag: Unknown Tag, fieldType: Float", string0);
      assertEquals(2225L, tiffField0.getCount());
      assertEquals(8900, tiffField0.getBytesLength());
      assertEquals(2225, tiffField0.getTag());
      assertEquals(2225, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[165];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(2225, 2225, fieldTypeFloat0.IFD, 2225, 2225, byteArray0, byteOrder0, 2225);
      tiffField0.dump();
      tiffField0.getIntArrayValue();
      assertEquals(8900, tiffField0.getBytesLength());
      assertEquals(2225, tiffField0.getSortHint());
      assertEquals(2225, tiffField0.getTag());
      assertEquals(2225, tiffField0.getOffset());
      assertEquals(2225L, tiffField0.getCount());
      assertEquals(2225, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(2487, "N]u@*4\"C-Ll");
      byte[] byteArray0 = new byte[1];
      TiffField tiffField0 = new TiffField(2487, 2487, fieldTypeAscii0, 2487, 2487, byteArray0, byteOrder0, (byte) (-22));
      String string0 = tiffField0.getStringValue();
      assertEquals(2487, tiffField0.getDirectoryType());
      assertEquals((-22), tiffField0.getSortHint());
      assertNotNull(string0);
      assertEquals(2487, tiffField0.getBytesLength());
      assertEquals(2487, tiffField0.getTag());
      assertEquals(2487, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[14];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(2514, 1605, fieldTypeShort0, 1605, 1605, byteArray0, byteOrder0, 2514);
      tiffField0.getDoubleArrayValue();
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [S@79249e11
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[42];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      TiffField tiffField0 = new TiffField(896, 896, fieldTypeLong0, 896, 896, byteArray0, byteOrder0, 896);
      tiffField0.getIntValueOrArraySum();
      assertEquals(896, tiffField0.getOffset());
      assertEquals(896, tiffField0.getTag());
      assertEquals(896, tiffField0.getSortHint());
      assertEquals(3584, tiffField0.getBytesLength());
      assertEquals(896, tiffField0.getDirectoryType());
      assertEquals(896L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(37, 37, fieldTypeFloat0, 37, 37, byteArray0, byteOrder0, 37);
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [F@48f8c883 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[77];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      TiffField tiffField0 = new TiffField(28, 2204, fieldTypeDouble0.LONG, 28, 28, byteArray0, byteOrder0, 2204);
      tiffField0.dump();
      tiffField0.getDoubleArrayValue();
      assertEquals(28, tiffField0.getOffset());
      assertEquals(2204, tiffField0.getDirectoryType());
      assertEquals(2204, tiffField0.getSortHint());
      assertEquals(28, tiffField0.getTag());
      assertEquals(112, tiffField0.getBytesLength());
      assertEquals(28L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[86];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(32, 32, fieldTypeFloat0, 32, 32, byteArray0, byteOrder0, 32);
      int int0 = tiffField0.getDirectoryType();
      assertEquals(32, int0);
      assertEquals(32, tiffField0.getTag());
      assertEquals(32, tiffField0.getOffset());
      assertEquals(32, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      TiffField tiffField0 = new TiffField(2515, 2515, fieldTypeRational0, 2515, 2515, byteArray0, byteOrder0, 2515);
      tiffField0.dump();
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(65541, 65541, fieldTypeRational0, 65541, 1804L, byteArray0, byteOrder0, 65541);
      tiffField0.getIntArrayValue();
      tiffField0.getDoubleArrayValue();
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [Lorg.apache.commons.imaging.common.RationalNumber; cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeRational0, 0, 0, byteArray0, byteOrder0, 0);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(0, int0);
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[14];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      System.setCurrentTimeMillis(1605);
      TiffField tiffField0 = new TiffField(1605, 1605, fieldTypeShort0, 524328L, 524328L, byteArray0, byteOrder0, 1605);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(1605, tiffField0.getSortHint());
      assertEquals(1605, tiffField0.getDirectoryType());
      assertEquals(1605, tiffField0.getTag());
      assertEquals(524328L, tiffField0.getCount());
      assertEquals(1048656, tiffField0.getBytesLength());
      assertEquals(0, int0);
      assertEquals(524328, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(22, 22, fieldTypeFloat0, 22, 22, byteArray0, byteOrder0, 22);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Unknown: ");
      tiffField0.dump((PrintWriter) mockPrintWriter0, "Unknown: ");
      assertEquals(22, tiffField0.getDirectoryType());
      assertEquals(88, tiffField0.getBytesLength());
      assertEquals(22L, tiffField0.getCount());
      assertEquals(22, tiffField0.getSortHint());
      assertEquals(22, tiffField0.getTag());
      assertEquals(22, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[82];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      TiffField tiffField0 = new TiffField(1, 65556, fieldTypeAscii0, 1, 65556, byteArray0, byteOrder0, 65556);
      tiffField0.dump();
      assertEquals(65556, tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getTag());
      assertEquals(65556, tiffField0.getOffset());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(1, tiffField0.getBytesLength());
      assertEquals(65556, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[92];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(2225, 2225, fieldTypeFloat0, 2225, 2225, byteArray0, byteOrder0, 2225);
      tiffField0.dump();
      assertEquals(2225L, tiffField0.getCount());
      assertEquals(2225, tiffField0.getTag());
      assertEquals(2225, tiffField0.getSortHint());
      assertEquals(2225, tiffField0.getOffset());
      assertEquals(8900, tiffField0.getBytesLength());
      assertEquals(2225, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(50, 2275, fieldTypeFloat0, 1L, (-1022L), byteArray0, byteOrder0, 50);
      tiffField0.getFieldType();
      assertEquals(1L, tiffField0.getCount());
      
      tiffField0.getIntValueOrArraySum();
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(50, tiffField0.getTag());
      assertEquals(2275, tiffField0.getDirectoryType());
      assertEquals((-1022), tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[83];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(2244, 2244, fieldTypeDouble0.SRATIONAL, 265L, 2244, byteArray0, byteOrder1, 2244);
      int int0 = Pattern.COMMENTS;
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[165];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(2225, 2225, fieldTypeFloat0, 1L, 2225, byteArray0, byteOrder0, 2225);
      tiffField0.dump();
      tiffField0.getDoubleArrayValue();
      assertEquals(2225, tiffField0.getTag());
      assertEquals(2225, tiffField0.getSortHint());
      assertEquals(2225, tiffField0.getDirectoryType());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(2225, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeFloat0, 1, 12, byteArray0, byteOrder0, 1);
      tiffField0.getIntArrayValue();
      assertEquals(1, tiffField0.getTag());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(12, tiffField0.getOffset());
      assertEquals(1, tiffField0.getSortHint());
      assertEquals(4, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[100];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      TiffField tiffField0 = new TiffField(65556, 65556, fieldTypeDouble0, 65556, 65556, byteArray0, byteOrder0, 65556);
      tiffField0.getDoubleArrayValue();
      tiffField0.dump();
      assertEquals(65556, tiffField0.getOffset());
      assertEquals(65556, tiffField0.getTag());
      assertEquals(65556, tiffField0.getSortHint());
      assertEquals(65556, tiffField0.getDirectoryType());
      assertEquals(524448, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[165];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField((-3703), (-3703), fieldTypeFloat0.BYTE, 272L, 272L, byteArray0, byteOrder0, (-3703));
      tiffField0.dump();
      assertEquals((-3703), tiffField0.getDirectoryType());
      assertEquals(272, tiffField0.getBytesLength());
      assertEquals(272, tiffField0.getOffset());
      assertEquals((-3703), tiffField0.getTag());
      assertEquals((-3703), tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[77];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      TiffField tiffField0 = new TiffField(754, 2465, fieldTypeAscii0, 754, 754, byteArray0, byteOrder0, 754);
      tiffField0.dump();
      assertEquals(754, tiffField0.getOffset());
      assertEquals(2465, tiffField0.getDirectoryType());
      assertEquals(754, tiffField0.getTag());
      assertEquals(754, tiffField0.getSortHint());
      assertEquals(754, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[347];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      TiffField tiffField0 = new TiffField((-965), 1284, fieldTypeShort0, 1284, (-965), byteArray0, byteOrder0, 1284);
      tiffField0.dump();
      assertEquals((-965), tiffField0.getOffset());
      assertEquals(1284, tiffField0.getDirectoryType());
      assertEquals(2568, tiffField0.getBytesLength());
      assertEquals((-965), tiffField0.getTag());
      assertEquals(1284, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[236];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(54, 54, fieldTypeFloat0, 54, 54, byteArray0, byteOrder0, 54);
      tiffField0.dump();
      assertEquals(54, tiffField0.getOffset());
      assertEquals(54, tiffField0.getTag());
      assertEquals(216, tiffField0.getBytesLength());
      assertEquals(54, tiffField0.getSortHint());
      assertEquals(54, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[219];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      TiffField tiffField0 = new TiffField(757, 757, fieldTypeLong0, 3678L, 757, byteArray0, byteOrder0, 757);
      tiffField0.dump();
      assertEquals(14712, tiffField0.getBytesLength());
      assertEquals(757, tiffField0.getOffset());
      assertEquals(757, tiffField0.getTag());
      assertEquals(757, tiffField0.getSortHint());
      assertEquals(757, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[420];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      TiffField tiffField0 = new TiffField(34, 34, fieldTypeDouble0, 1069L, 4L, byteArray0, byteOrder0, 34);
      ByteOrder.nativeOrder();
      tiffField0.dump();
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [D@227e0241
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }
}
