/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:03:16 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.MnCross;
import org.freehep.math.minuit.MnFunctionCross;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserCovariance;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnFunctionCross_ESTest extends MnFunctionCross_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2854.596798), (-2854.596798), (-2854.596798), (-2854.596798), 4.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.8884256965923687;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[2];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1806.7, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1645.65727).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 583.06660283, mnStrategy0, 583.06660283);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 583.06660283;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 15976.664545274863, 1803);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 10.0, mnStrategy0, (-980.0984));
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-980.0984);
      doubleArray0[1] = (-980.0984);
      doubleArray0[2] = (-980.0984);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.012451886272825397, (-539));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1335.7), (-1335.7), (-1335.7), (-2738.760196868832), (-1335.7)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[10];
      doubleArray0[9] = (-1450.48622917261);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[10];
      mnStrategy0.setHessianStepTolerance(0);
      mnUserParameterState0.add("8i\"%UW#`R", 0.46631185010732024, (-753.4400923359294), (-6140.383886667), 1.0);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2854.596798), (-2854.596798), (-2854.596798), (-2854.596798), 4.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.8884256965923687;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[2];
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.8884256965923687, 0);
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1806.7, 0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy(1);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = 0.51;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)1, (-1660.0), 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 10.0, mnStrategy0, 0.51);
      mnUserParameters1.toString();
      mnStrategy0.setHessianG2Tolerance(0.51);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.51, 1219);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2346320.6436938606, (-2125570535));
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2854.5968), (-2854.5968), (-2854.5968), (-2854.5968), (-2854.5968)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-6.964288638260407);
      doubleArray0[3] = 2.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      double[] doubleArray1 = mnUserParameterState0.params();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-980.0984), mnStrategy0, 2.0);
      int[] intArray0 = new int[2];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-919.98215), 2661);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (-2734.6392428025);
      doubleArray0[1] = (-7.760956469937324);
      doubleArray0[2] = (-2734.6392428025);
      doubleArray0[3] = 960.89;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-980.0984), mnStrategy0, 960.89);
      int[] intArray0 = new int[2];
      mnStrategy0.setLowStrategy();
      mnStrategy0.setHessianStepTolerance((-2506.2951471267525));
      mnUserParameterState0.add("8i\"%UW#`R", 0.46631185010732024, 157.57, (-6140.383886667), 0.05);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 0);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2415.1293207, (-2123080424));
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy(1);
      mnUserParameters0.add("org.freeheptmath.minuit.MnFunctionC+oss", (-7.977956300301273), 0.3);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[8];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-538789.2280301232), 0.0, (-538789.2280301232), (-7.977956300301273), 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 633.851619659, mnStrategy0, 362.836);
      MnStrategy mnStrategy1 = new MnStrategy();
      mnStrategy1.setMediumStrategy();
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-980.420207251), 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2854.596798), (-2226.79), (-2854.596798), (-2226.79), 4.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-7.183857658800134);
      doubleArray0[3] = 2.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2.0, mnStrategy0, 2.0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      double[] doubleArray1 = new double[2];
      mnStrategy0.setMediumStrategy();
      mnStrategy0.setGradientTolerance(2.0);
      doubleArray1[0] = (double) 0;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 0.0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1192.0839999999998, 1192.0839999999998, 1192.0839999999998, 1192.0839999999998, 0.51).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      int int0 = 1;
      MnStrategy mnStrategy0 = new MnStrategy(1);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.07984732794022309, mnStrategy0, 1);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = 0.07984732794022309;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 0.07984732794022309;
      doubleArray0[6] = 0.07984732794022309;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2.0, (-2126008811));
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 8;
      doubleArray1[1] = (-716.9081669);
      doubleArray1[2] = (-2275.9027378530063);
      doubleArray1[3] = (-716.9081669);
      double double0 = (-0.5);
      // Undeclared exception!
      try { 
        mnUserParameters0.name((-2126008811));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2854.597), (-2854.597), (-2854.597), (-2854.597), 2.6926798877748066).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-6.964288638260407);
      doubleArray0[3] = 2.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      double[] doubleArray1 = mnUserParameterState0.params();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-980.0984), mnStrategy0, 2.0);
      int[] intArray0 = new int[2];
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-919.98215), 2661);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1702.0775008449248), 1.0E-6, 2409.87331).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 10.0, mnStrategy0, (-980.0984));
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-980.0984);
      doubleArray0[1] = (-980.0984);
      doubleArray0[2] = (-980.0984);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.012451886272825397, (-539));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1192.0839999999998, 1192.0839999999998, 1192.0839999999998, 1192.0839999999998, (-7.977956300301273)).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy(1);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-7.977956300301273), mnStrategy0, 1);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[8];
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1, 1);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 633.851619659, 1);
      doubleArray0[0] = (double) 1;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1073.6398920402185, 1);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1281, 1281);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-732.02860003323), (-732.02860003323), 98.17614369969873, (-732.02860003323), 98.17614369969873).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 98.17614369969873, mnStrategy0, (-1061.541));
      mnStrategy0.setGradientTolerance(243.7109);
      int[] intArray0 = new int[3];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 98.17614369969873, 2260);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1192.0839999999998, 1192.0839999999998, 1192.0839999999998, 1192.0839999999998, 0.51).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy(1);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.07984732794022309, mnStrategy0, 1);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[8];
      mnStrategy0.setGradientStepTolerance(1037.5718548938678);
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = 0.07984732794022309;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 0.07984732794022309;
      doubleArray0[4] = (double) 1;
      int[] intArray1 = new int[8];
      intArray1[1] = 8;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 8, 3679);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2854.596798), (-2226.79), (-2854.596798), (-2226.79), 4.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-7.183857658800134);
      doubleArray0[3] = 2.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-980.0984), mnStrategy0, 2.0);
      int[] intArray0 = new int[2];
      mnStrategy0.setLowStrategy();
      mnStrategy0.setGradientStepTolerance(2.0);
      mnStrategy0.setLowStrategy();
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2749.6392428025), 200);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2854.596798), (-1095));
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = (-2854.596798);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2179.0, mnStrategy0, (-2854.596798));
      mnUserParameterState0.add((String) null, (-1.0), 2921.3330453097906, (-1.0), 2.0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 157.57;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2854.596798), 0);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2179.0, 1871);
      int int0 = (-2126209261);
      // Undeclared exception!
      try { 
        mnUserParameterState0.ext2int((-2126209261), 2.1622776601683786);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1335.7), (-1335.7), (-1335.7), (-2734.6392428025), (-1335.7)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (-2734.6392428025);
      doubleArray0[2] = (-2734.6392428025);
      doubleArray0[3] = 960.89;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1516.1777, mnStrategy0, 960.89);
      int[] intArray0 = new int[1];
      mnUserParameterState0.add("9[b?:Is,p!-COd96b", 0.05, 960.89, (double) 0, 1.0);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 100.0, 0);
      MnStrategy mnStrategy1 = new MnStrategy();
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.3, 0);
      mnStrategy1.setLowStrategy();
      mnStrategy0.setGradientStepTolerance((-1082.13100271425));
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-27.767584464805083), 0);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1804.209143137, 1804.209143137, 1804.209143137, 2.1622776601683795, 518.28363).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      double double0 = 0.07984732794022309;
      int int0 = 1;
      MnStrategy mnStrategy0 = new MnStrategy(1);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.07984732794022309, mnStrategy0, 1);
      int[] intArray0 = new int[0];
      mnUserParameters0.clone();
      double[] doubleArray0 = new double[8];
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 518.28363, 1);
      doubleArray0[0] = (double) 1;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-902.04), 1);
      // Undeclared exception!
      try { 
        mnUserParameters1.setLimits(1, (-902.04), 10.000000000000002);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2854.596798), (-2226.79), (-2854.596798), (-2226.79), 4.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 4.0;
      doubleArray0[3] = 4.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-980.0984), mnStrategy0, 4.0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      double[] doubleArray1 = new double[2];
      mnStrategy0.setMediumStrategy();
      doubleArray1[0] = (double) 0;
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 0.5, 0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1335.7), (-1335.7), (-1335.7), (-2735.0), (-1335.7)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (-2735.0);
      doubleArray0[1] = (-718.5);
      doubleArray0[2] = (-2735.0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-2735.0), mnStrategy0, 0.0);
      int[] intArray0 = new int[10];
      int int0 = 0;
      double double0 = (-6140.383886667);
      mnStrategy0.setHessianStepTolerance(0);
      mnUserParameterState0.add("8i\"%UW#`R", 0.46631185010732024, (-2735.0), (-6140.383886667), 0.05);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 0);
      mnStrategy0.setHessianStepTolerance((-718.5));
      double[] doubleArray1 = new double[6];
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, (-718.5), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1335.7), (-1335.7), (-1335.7), (-2734.6392428025), (-1335.7)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (-2734.6392428025);
      doubleArray0[1] = 18.583151622393913;
      doubleArray0[2] = (-2734.6392428025);
      doubleArray0[3] = 960.89;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1007.7068144964948), mnStrategy0, 960.89);
      int[] intArray0 = new int[2];
      mnUserParameterState0.add("8i\"%UW#`R", 18.583151622393913, 157.57, (-6140.383886667), 18.583151622393913);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.0;
      mnStrategy0.setLowStrategy();
      mnStrategy0.setGradientStepTolerance((-2734.6392428025));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 0);
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-2734.6392428025), 0);
      mnStrategy0.setMediumStrategy();
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1335.7), (-1335.7), (-1335.7), (-2734.6392428025), (-1335.7)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (-2734.6392428025);
      doubleArray0[1] = (-1335.7);
      doubleArray0[2] = (-2734.6392428025);
      doubleArray0[3] = (-1335.7);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1007.7068144964948), mnStrategy0, (-1335.7));
      int[] intArray0 = new int[2];
      int int0 = 0;
      mnStrategy0.setHessianStepTolerance((-2734.6392428025));
      mnUserParameterState0.add("8i\"%UW#`R", 0.46631185010732024, 157.57, (-6140.383886667), (-1335.7));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.0;
      mnStrategy0.setLowStrategy();
      mnStrategy0.setGradientStepTolerance((-2734.6392428025));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, (-3130.0498325583), 0);
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross((int[]) null, doubleArray0, doubleArray1, 1.0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-2226.79);
      doubleArray0[3] = 2.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.params();
      int[] intArray0 = new int[2];
      mnUserParameterState0.fix(0);
      intArray0[0] = 0;
      double[] doubleArray1 = new double[2];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnStrategy mnStrategy1 = new MnStrategy((-1929));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-980.0984), mnStrategy1, 2.0);
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 2.0;
      doubleArray2[1] = 2.0;
      doubleArray2[2] = 0.1;
      doubleArray2[3] = 2.0;
      mnStrategy1.setMediumStrategy();
      doubleArray2[4] = (-394.361147782191);
      doubleArray2[5] = (-980.0984);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray2, doubleArray0, (-980.0984), 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (-2735.0);
      doubleArray0[1] = (-718.5);
      doubleArray0[2] = (-2735.0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[10];
      mnStrategy0.setHessianStepTolerance((-38));
      mnUserParameterState0.add("8i\"%UW#`R", 0.46631185010732024, (-2735.0), (-6140.383886667), 0.05);
      mnStrategy0.setHessianStepTolerance((-718.5));
      mnUserParameterState0.setUpperLimit("8i\"%UW#`R", (-846.819991708));
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-0.11);
      mnStrategy0.setLowStrategy();
      mnStrategy0.setGradientStepTolerance((-2735.0));
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 960.89;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnStrategy mnStrategy1 = new MnStrategy(3816);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 960.89, mnStrategy1, (-2735.0));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2735.0), (-38));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1335.7), (-1335.7), (-1335.7), (-2733.2341903785377), (-1335.7)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (-2733.2341903785377);
      doubleArray0[1] = (-1450.48622917261);
      doubleArray0[2] = (-2733.2341903785377);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-2733.2341903785377), mnStrategy0, 0.0);
      int[] intArray0 = new int[10];
      mnStrategy0.setHessianStepTolerance(0);
      mnUserParameterState0.add("8i\"%UW#`R", 0.46631185010732024, (-753.4400923359294), (-6140.383886667), 0.05);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 0);
      mnStrategy0.setHessianStepTolerance((-1450.48622917261));
      double[] doubleArray1 = new double[6];
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-0.11), 0);
      doubleArray1[0] = (-0.11);
      mnStrategy0.setLowStrategy();
      mnUserParameterState0.setLowerLimit(0, (-1450.48622917261));
      mnStrategy0.setGradientStepTolerance((-2733.2341903785377));
      double[] doubleArray2 = new double[9];
      doubleArray2[2] = 4.0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (-0.11);
      doubleArray2[5] = (-6140.383886667);
      doubleArray2[6] = (-753.4400923359294);
      doubleArray2[8] = (-1335.7);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray2, 3113.955832320038, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy(1);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = 0.51;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, 1.0, 13.200000000000003, (double)1, 18.4993613).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 10.0, mnStrategy0, 0.51);
      mnUserParameters1.toString();
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 13.200000000000003, 1);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 12, 12);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.51, 0);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1, 12);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy(1);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = 0.51;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)1, 1.0, 3.0255994610420647, 0.0, 2.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 10.0, mnStrategy0, 0.51);
      mnUserParameters1.toString();
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2185.352385765524), 1219);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2346320.6436938606, (-2125570549));
      assertFalse(mnCross1.equals((Object)mnCross0));
  }
}
