/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 15:07:50 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.nio.charset.Charset;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.GzipSink;
import okio.HashingSink;
import okio.HashingSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealBufferedSink_ESTest extends RealBufferedSink_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.writeLong((-231L));
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8CodePoint(0);
      assertSame(bufferedSink0, realBufferedSink0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Pipe pipe0 = new Pipe(8192L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-57);
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)17;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(pipe_PipeSink0, byteString0);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink1);
      realBufferedSink0.outputStream();
      realBufferedSink0.close();
      // Undeclared exception!
      try { 
        realBufferedSink0.writeDecimalLong((-1080L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.close();
      // Undeclared exception!
      try { 
        realBufferedSink0.write(buffer0, (-2424L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.close();
      // Undeclared exception!
      try { 
        realBufferedSink0.write((byte[]) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Pipe pipe0 = new Pipe(960L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = true;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      pipe0.sourceClosed = true;
      realBufferedSink0.writeHexadecimalUnsignedLong(960L);
      realBufferedSink0.timeout();
      realBufferedSink0.emit();
      realBufferedSink0.toString();
      realBufferedSink0.writeShortLe((-125));
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.emit();
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong((-1414L));
      assertSame(bufferedSink0, realBufferedSink0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.close();
      // Undeclared exception!
      try { 
        realBufferedSink0.writeHexadecimalUnsignedLong(8192L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeShortLe(1);
      Buffer buffer1 = realBufferedSink0.buffer();
      assertFalse(buffer1.equals((Object)buffer0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8(".outputStream()");
      assertSame(realBufferedSink0, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeLong((-1L));
      realBufferedSink0.close();
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.close();
      // Undeclared exception!
      try { 
        realBufferedSink0.write((byte[]) null, (-2145868997), (-2145868997));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSink0.writeString("[S", 18, 1, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 1 < 18
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Pipe pipe0 = new Pipe(8192L);
      pipe0.sourceClosed = true;
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-57);
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong((byte) (-57));
      Buffer buffer1 = buffer0.writeByte(1);
      HashingSink.md5(buffer0);
      GzipSink gzipSink0 = new GzipSink(buffer1);
      RealBufferedSink realBufferedSink0 = null;
      try {
        realBufferedSink0 = new RealBufferedSink((Sink) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Pipe pipe0 = new Pipe(8192L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)17;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(pipe_PipeSink0, byteString0);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink1);
      realBufferedSink0.outputStream();
      realBufferedSink0.writeDecimalLong((-3020L));
      realBufferedSink0.timeout();
      realBufferedSink0.emit();
      Buffer buffer0 = realBufferedSink0.buffer();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeInt(1067);
      assertSame(realBufferedSink0, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Pipe pipe0 = new Pipe(960L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-27);
      byteArray0[7] = (byte)90;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      hashingSink0.hash();
      HashingSink.sha512(buffer0);
      HashingSink.hmacSha512(buffer0, byteString0);
      HashingSink hashingSink1 = HashingSink.hmacSha1(hashingSink0, byteString0);
      hashingSink1.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeInt((byte)0);
      assertSame(realBufferedSink0, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.flush();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte) (-97);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      HashingSink hashingSink1 = HashingSink.hmacSha256(hashingSink0, byteString0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      HashingSource.sha1(buffer0);
      HashingSource.sha1(hashingSource0);
      buffer0.writeAll(hashingSource0);
      HashingSink hashingSink2 = HashingSink.sha512(hashingSink0);
      hashingSink2.hash();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink1);
      realBufferedSink0.write(byteString0);
      realBufferedSink0.writeAll(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("buffer(");
      BufferedSink bufferedSink1 = realBufferedSink0.writeLong((-1217L));
      realBufferedSink0.write(byteString0);
      bufferedSink1.flush();
      bufferedSink0.writeDecimalLong(1145L);
      bufferedSink1.emit();
      assertEquals(35L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("RIV>Z!{'_iqAjk5");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.emit();
      realBufferedSink0.timeout();
      long long0 = realBufferedSink0.writeAll(buffer1);
      assertEquals(16L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.close();
      // Undeclared exception!
      try { 
        realBufferedSink0.writeString("lv:,,U(@", (Charset) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeHexadecimalUnsignedLong(16L);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink0.writeString("closed", charset0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte) (-92);
      // Undeclared exception!
      try { 
        realBufferedSink0.write(byteArray0, (int) (byte) (-93), 3573);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=-93 byteCount=3573
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      HashingSource.sha1(realBufferedSource0);
      BufferedSink bufferedSink0 = buffer1.write((Source) buffer0, 0L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      realBufferedSource0.inputStream();
      realBufferedSink0.close();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      realBufferedSink0.close();
      BufferedSink bufferedSink1 = realBufferedSink0.write((Source) realBufferedSource0, 0L);
      assertSame(realBufferedSink0, bufferedSink1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = new Buffer();
      try { 
        realBufferedSink0.write((Source) buffer1, 669L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      HashingSource.sha1(realBufferedSource0);
      BufferedSink bufferedSink0 = buffer1.write((Source) buffer0, 0L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      realBufferedSink0.close();
      realBufferedSink0.outputStream();
      realBufferedSink0.close();
      GzipSink gzipSink0 = new GzipSink(buffer1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(gzipSink0);
      realBufferedSink1.close();
      realBufferedSink0.outputStream();
      realBufferedSink0.close();
      // Undeclared exception!
      try { 
        realBufferedSink0.emit();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.timeout();
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe((-1501));
      assertSame(realBufferedSink0, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.writeUtf8("", 1, (-3914));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -3914 < 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.writeUtf8("Ar^HZeC^wKkFWD4", 4174, 1024);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 1024 < 4174
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.close();
      // Undeclared exception!
      try { 
        realBufferedSink0.writeShort(2133447807);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeShort((-1));
      realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-120);
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte) (-124);
      realBufferedSink0.write(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSink0.write(buffer0, 65L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=65
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.flush();
      ByteString[] byteStringArray0 = new ByteString[3];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)28;
      ByteString byteString0 = new ByteString(byteArray0);
      byteStringArray0[0] = byteString0;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      byteStringArray0[1] = byteString1;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      ByteString byteString2 = realBufferedSource0.readByteString();
      byteStringArray0[2] = byteString2;
      Options options0 = Options.of(byteStringArray0);
      ByteString byteString3 = options0.get(1);
      HashingSource hashingSource0 = HashingSource.hmacSha1(realBufferedSink0.buffer, byteString3);
      Source source0 = hashingSource0.delegate();
      try { 
        buffer0.write(source0, (long) (byte)28);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.close();
      // Undeclared exception!
      try { 
        realBufferedSink0.writeLongLe((-126L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.close();
      // Undeclared exception!
      try { 
        realBufferedSink0.writeByte(924);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(4294967295L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.close();
      realBufferedSink0.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.clear();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink1.close();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSource0.buffer);
      BufferedSink bufferedSink0 = realBufferedSink2.writeLongLe(100000000L);
      assertFalse(bufferedSink0.equals((Object)realBufferedSink1));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      HashingSource.sha1(realBufferedSource0);
      buffer1.write((Source) buffer0, (-286L));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSource0.inputStream();
      realBufferedSink0.close();
      realBufferedSink0.closed = false;
      realBufferedSource0.buffer.clear();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer0);
      realBufferedSink2.writeShortLe((-2090));
      realBufferedSink2.close();
      try { 
        realBufferedSink0.write((Source) realBufferedSource0, 4294967295L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      HashingSource.sha1(realBufferedSource0);
      BufferedSink bufferedSink0 = buffer1.write((Source) realBufferedSource0, (-876L));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSource0.inputStream();
      realBufferedSink0.close();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSource0.buffer);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink2.close();
      realBufferedSource0.buffer.clear();
      realBufferedSink0.write((Source) buffer0, (-1L));
      BufferedSink bufferedSink1 = realBufferedSink1.writeShortLe(567);
      realBufferedSink2.close();
      bufferedSink1.writeByte(1073741824);
      bufferedSink1.emit();
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)bufferedSink0));
  }
}
