/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 23:54:55 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter((ClassWriter) null, 101, "", "", "", "{&6):");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      Object object0 = new Object();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", (String) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@62791459
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "", "", "6U)\"v*3kS-D", "");
      ByteVector byteVector0 = new ByteVector();
      Attribute attribute0 = new Attribute("6U)\"v*3kS-D");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1565);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1565, "The list of names must not be null", "The list of names must not be null", "The list of names must not be null", (Object) null);
      fieldWriter0.visitAnnotation("+*n&,f&Wf.jd", false);
      ByteVector byteVector0 = new ByteVector(0);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1565);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1565, "The list of names must not be null", "The list of names must not be null", "The list of names must not be null", (Object) null);
      fieldWriter0.visitAnnotation("0", true);
      ByteVector byteVector0 = new ByteVector(0);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(644);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 285212676, "D", "l[[Zi_b;M<#;pV4+Diz", (String) null, "l[[Zi_b;M<#;pV4+Diz");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-44), "X3pTr~IA1>TZe", "X3pTr~IA1>TZe", ">B", ">B");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1199);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "hT9", "Deprecated", "hT9", (Object) null);
      Attribute attribute0 = new Attribute("Deprecated");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1565);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1565, "The list of names must not be null", "The list of names must not be null", "The list of names must not be null", (Object) null);
      fieldWriter0.visitAnnotation("+*n&,f&Wf.jd", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1565);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1565, "The list of names must not be null", "The list of names must not be null", "The list of names must not be null", (Object) null);
      fieldWriter0.visitAnnotation("0", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-44), "X3pTr~IA1>TZe", "X3pTr~IA1>TZe", ">B", ">B");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-538));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1141), "", "", (String) null, (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "wheel.asm.Attribute", "", "-5SCYxn^.:+zN", "wheel.asm.Attribute");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 2, "wheel.asm.Attribute", "-5SCYxn^.:+zN", "Deprecated", (Object) null);
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1199);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "hT9", "Deprecated", "hT9", (Object) null);
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-595));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2025, "$[b@", "$[b@", "wheel.asm.FieldWriter", (Object) null);
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }
}
