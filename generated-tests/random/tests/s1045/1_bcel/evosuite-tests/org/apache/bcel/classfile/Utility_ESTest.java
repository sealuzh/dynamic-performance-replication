/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 17:18:43 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.EOFException;
import java.io.File;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassLoaderRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("xui", stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("()Lxui;", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)110}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertArrayEquals(new byte[] {(byte)110}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals("fdiv", string1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)40, (byte)38, (byte) (-19), (byte) (-98), (byte)85}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(212, 68);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals(68, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(212, constantInterfaceMethodref0.getClassIndex());
      
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)40, (byte)38, (byte) (-19), (byte) (-98), (byte)85}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(constantString0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(64040, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      
      ConstantString constantString1 = new ConstantString(constantString0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)40, (byte)38, (byte) (-19), (byte) (-98), (byte)85}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(constantString1.equals((Object)constantString0));
      assertNotNull(constantString1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(64040, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(64040, constantString1.getStringIndex());
      assertEquals((byte)8, constantString1.getTag());
      
      constantArray0[1] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)40, (byte)38, (byte) (-19), (byte) (-98), (byte)85}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotNull(string0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(2, constantPool0.getLength());
      assertEquals("dload_0", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = Utility.accessToString(123, true);
      assertNotNull(string0);
      assertEquals("public private static final volatile", string0);
      
      short short0 = Utility.searchOpcode("]L8vd'r[d;g~+|FTa/");
      assertEquals((short) (-1), short0);
      
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "]L8vd'r[d;g~+|FTa/";
      objectArray0[2] = (Object) "public private static final volatile";
      objectArray0[3] = (Object) "public private static final volatile";
      objectArray0[4] = (Object) "public private static final volatile";
      objectArray0[5] = (Object) "]L8vd'r[d;g~+|FTa/";
      objectArray0[6] = (Object) "public private static final volatile";
      String string1 = Utility.printArray(objectArray0);
      assertEquals(7, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-35);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 123, (-1724));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = Utility.decode("lookupswitch", false);
      assertEquals(12, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertEquals(12, byteArray0.length);
      assertNotNull(string0);
      assertEquals("lookupswitch", string0);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("<illegal opcode>");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("<illegal opcode>", constantUtf8_0.getBytes());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2723), (-1759));
      assertNotNull(constantMethodHandle0);
      assertEquals((-2723), constantMethodHandle0.getReferenceKind());
      assertEquals((-1759), constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getCachedInstance("lookupswitch");
      assertFalse(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotSame(constantUtf8_1, constantUtf8_0);
      assertNotNull(constantUtf8_1);
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("lookupswitch", constantUtf8_1.getBytes());
      
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantClass constantClass0 = new ConstantClass((-1759));
      assertNotNull(constantClass0);
      assertEquals((-1759), constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      constantArray0[2] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-2723), (-1759), false);
      assertEquals(12, byteArray0.length);
      assertEquals(3, constantArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, constantPool0.getLength());
      assertEquals("0:    idiv\n1:    ddiv\n2:    ddiv\n3:    dmul\n4:    lneg\n5:    irem\n6:    drem\n7:    dneg\n8:    lmul\n9:    ineg\n10:   dadd\n11:   imul\n", string1);
      
      try { 
        Utility.methodSignatureReturnType("0:    idiv\n1:    ddiv\n2:    ddiv\n3:    dmul\n4:    lneg\n5:    irem\n6:    drem\n7:    dneg\n8:    lmul\n9:    ineg\n10:   dadd\n11:   imul\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    idiv
         // 1:    ddiv
         // 2:    ddiv
         // 3:    dmul
         // 4:    lneg
         // 5:    irem
         // 6:    drem
         // 7:    dneg
         // 8:    lmul
         // 9:    ineg
         // 10:   dadd
         // 11:   imul
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 173;
      int int1 = 20;
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.format(173, 20, true, '');
      assertNotNull(string0);
      assertEquals("173", string0);
      
      try { 
        Utility.typeOfSignature("173");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 173
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-20);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)43;
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(4644);
      assertNotNull(constantMethodType0);
      assertEquals(4644, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertNotNull(constantMethodType1);
      assertEquals(4644, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(4644, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantMethodType constantMethodType2 = new ConstantMethodType(constantMethodType1);
      assertTrue(constantMethodType0.equals((Object)constantMethodType1));
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertTrue(constantMethodType2.equals((Object)constantMethodType1));
      assertTrue(constantMethodType2.equals((Object)constantMethodType0));
      assertNotNull(constantMethodType2);
      assertEquals(4644, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(4644, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(4644, constantMethodType2.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType2.getTag());
      
      constantArray0[1] = (Constant) constantMethodType2;
      ConstantString constantString0 = new ConstantString(198);
      assertNotNull(constantString0);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(198, constantString0.getStringIndex());
      
      ConstantString constantString1 = new ConstantString(constantString0);
      assertTrue(constantString1.equals((Object)constantString0));
      assertNotNull(constantString1);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(198, constantString0.getStringIndex());
      assertEquals((byte)8, constantString1.getTag());
      assertEquals(198, constantString1.getStringIndex());
      
      constantArray0[2] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1201), (int) (byte)43, true);
      assertArrayEquals(new byte[] {(byte) (-3), (byte) (-117), (byte) (-20), (byte)0, (byte)53, (byte) (-61), (byte)43, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(3, constantArray0.length);
      assertNotNull(string0);
      assertEquals(3, constantPool0.getLength());
      assertEquals("0:    <illegal opcode>\n1:    f2i\n2:    <illegal opcode>\n3:    nop\n4:    saload\n5:    monitorexit\n6:    aload_1\n7:    nop\n", string0);
      
      String string1 = Utility.accessToString(198);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("private protected volatile transient", string1);
      
      try { 
        Utility.typeOfSignature("#3Ip.hA<%Y>jE5&3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #3Ip.hA<%Y>jE5&3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-64);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1869, 1869, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = Utility.format((-3166), (-3166), false, '^');
      assertNotNull(string0);
      assertEquals("-3166", string0);
      
      String string1 = Utility.accessToString((-3166), true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("private transient native synthetic annotation enum", string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-48);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 82, (int) (byte)75);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = Utility.classOrInterface(150);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(798, (-181));
      assertNotNull(constantFieldref0);
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-181), constantFieldref0.getNameAndTypeIndex());
      assertEquals(798, constantFieldref0.getClassIndex());
      
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-62), (-965));
      assertNotNull(constantInterfaceMethodref0);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((-965), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((-62), constantInterfaceMethodref0.getClassIndex());
      
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(2, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 798, 798, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)61;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1550), (-1550), false);
      assertArrayEquals(new byte[] {(byte)42, (byte) (-53), (byte)21, (byte)42, (byte)122, (byte)61}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    aload_0\n1:    <illegal opcode>\n2:    iload\t\t%42\n4:    ishr\n5:    istore_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals(4, objectArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('|');
      assertFalse(boolean0);
      
      String string1 = Utility.signatureToString("F$+,E3>.sZ#b@Y9", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("float", string1);
      
      String string2 = Utility.accessToString(36, true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("protected", string2);
      
      String string3 = Utility.fillup("oG%)bQk:[r{Mzqs\"", (-1227), true, '|');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("oG%)bQk:[r{Mzqs\"", string3);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)73;
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(899, (byte) (-65));
      assertNotNull(constantNameAndType0);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-65), constantNameAndType0.getSignatureIndex());
      assertEquals(899, constantNameAndType0.getNameIndex());
      
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(186, 2968);
      assertNotNull(constantMethodref0);
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(2968, constantMethodref0.getNameAndTypeIndex());
      assertEquals(186, constantMethodref0.getClassIndex());
      
      constantArray0[1] = (Constant) constantMethodref0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-89), (byte)0, (byte)19, (byte)73}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-89), (byte)0, (byte)19, (byte)73}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(constantNameAndType1.equals((Object)constantNameAndType0));
      assertNotNull(constantNameAndType1);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(49063, constantNameAndType1.getNameIndex());
      assertEquals((byte)12, constantNameAndType1.getTag());
      assertEquals(19, constantNameAndType1.getSignatureIndex());
      
      constantArray0[2] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(3, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantPool1.getLength());
      
      String string4 = Utility.codeToString(byteArray0, constantPool1, (-41), 129);
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-89), (byte)0, (byte)19, (byte)73}, byteArray0);
      assertEquals(3, constantArray0.length);
      assertEquals(5, byteArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(string4);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantPool1.getLength());
      assertEquals("0:    athrow\n1:    goto\t\t#20\n4:    dstore_2\n", string4);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-61);
      byte byte0 = (byte)23;
      byteArray0[6] = (byte)23;
      byte byte1 = (byte) (-43);
      byteArray0[7] = (byte) (-43);
      byteArray0[8] = (byte)9;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)75, (-2716), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = Utility.setBit((-556), (-556));
      assertEquals((-556), int0);
      
      String string0 = "/@";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)125;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte)74, (byte) (-27), (byte)76, (byte)43, (byte)125}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      
      String string1 = Utility.replace("/@", "/@", "/@");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("/@", string1);
      
      short short0 = Utility.searchOpcode("/@");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-7);
      byteArray1[1] = (byte) (-34);
      byteArray1[2] = (byte)113;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-34), (byte)113}, byteArray1);
      assertEquals(3, byteArray1.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertFalse(boolean1);
      
      int int1 = 233;
      int int2 = Utility.setBit(233, 511);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-2147483415), int2);
      
      boolean boolean2 = false;
      String string2 = Utility.format((-339), (-2147483415), false, '9');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("-339", string2);
      
      int int3 = Utility.setBit((-556), 511);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals((-556), int3);
      
      try { 
        Utility.typeOfSignature("/@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = Utility.setBit(80, 11);
      assertEquals(2128, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte)7;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1338, 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = Utility.fillup("{\"java.lang.Object@6e7a6703\", \"java.lang.Object@2d551c9a\"}", 2, true, '3');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-101);
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-104));
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-104.0F), constantFloat0.getBytes(), 0.01F);
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-104.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((-104.0F), constantFloat1.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      
      constantArray0[0] = (Constant) constantFloat1;
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-104));
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-104), constantInteger0.getBytes());
      
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      assertNotNull(constantInteger1);
      assertEquals((byte)3, constantInteger1.getTag());
      assertEquals((-104), constantInteger1.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-104), constantInteger0.getBytes());
      
      constantArray0[1] = (Constant) constantInteger1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1370);
      assertNotNull(constantMethodType0);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(1370, constantMethodType0.getDescriptorIndex());
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertNotNull(constantMethodType1);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(1370, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(1370, constantMethodType1.getDescriptorIndex());
      
      constantArray0[2] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(3, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantPool1.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 7, 137, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte)15;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 0, (int) (byte)10, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('K');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)48;
      String string0 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)89, (byte)6, (byte) (-91), (byte) (-72), (byte) (-62), (byte) (-61), (byte)48}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      int int0 = Utility.setBit(178, 116);
      assertEquals(1048754, int0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('n');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = Utility.convertString("putfield");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("putfield", string1);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(195, (byte) (-72));
      assertNotNull(constantMethodHandle0);
      assertEquals(195, constantMethodHandle0.getReferenceKind());
      assertEquals((-72), constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)48, 46, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(191);
      assertNotNull(constantMethodType0);
      assertEquals(191, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 191, 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = Utility.getSignature("f2d");
      assertNotNull(string0);
      assertEquals("Lf2d;", string0);
      
      short short0 = Utility.searchOpcode("Lf2d;");
      assertEquals((short) (-1), short0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Lf2d;";
      stringArray0[1] = "vk#hctVD<6.!V5_h\"w";
      stringArray0[2] = "f2d";
      stringArray0[3] = "Lf2d;";
      stringArray0[4] = "Lf2d;";
      stringArray0[5] = "vk#hctVD<6.!V5_h\"w";
      stringArray0[6] = "Lf2d;";
      stringArray0[7] = "vk#hctVD<6.!V5_h\"w";
      String string1 = Utility.methodTypeToSignature("vk#hctVD<6.!V5_h\"w", stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("(LLf2d;;Lvk#hctVD<6/!V5_h\"w;Lf2d;LLf2d;;LLf2d;;Lvk#hctVD<6/!V5_h\"w;LLf2d;;Lvk#hctVD<6/!V5_h\"w;)Lvk#hctVD<6/!V5_h\"w;", string1);
      
      String string2 = Utility.printArray((Object[]) stringArray0, true, false);
      assertEquals(8, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("{Lf2d;, vk#hctVD<6.!V5_h\"w, f2d, Lf2d;, Lf2d;, vk#hctVD<6.!V5_h\"w, Lf2d;, vk#hctVD<6.!V5_h\"w}", string2);
      
      String string3 = Utility.replace("R<tBJqwL4'", "Lf2d;", "Lf2d;");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("R<tBJqwL4'", string3);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-43);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)117, (byte)124, (byte) (-4), (byte) (-89), (byte) (-43)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      
      String string4 = Utility.codeToString(byteSequence0, constantPool1);
      assertArrayEquals(new byte[] {(byte)117, (byte)124, (byte) (-4), (byte) (-89), (byte) (-43)}, byteArray0);
      assertEquals(0, constantArray0.length);
      assertEquals(5, byteArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(string4);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals("lneg", string4);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = Utility.convertString("getfield");
      assertNotNull(string0);
      assertEquals("getfield", string0);
      
      try { 
        Utility.typeOfSignature("3_+[a#cv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3_+[a#cv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte)42;
      byteArray0[8] = (byte)75;
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass((byte)75);
      assertNotNull(constantClass0);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(75, constantClass0.getNameIndex());
      
      constantArray0[0] = (Constant) constantClass0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("aastore");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("aastore", constantUtf8_0.getBytes());
      
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(2, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertNotNull(constantPool1);
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantPool0.getLength());
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertEquals(2, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotNull(constantPool2);
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantPool2.getLength());
      assertEquals(2, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-1097971799), 1494);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)0;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)75, (byte) (-60), (byte)3, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 712, (int) (byte)75, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u3&*hFw-NaX");
      assertFalse(boolean0);
      
      int int0 = (-3202);
      boolean boolean1 = false;
      String string0 = Utility.accessToString((-3202), false);
      assertNotNull(string0);
      assertEquals("private protected static final synchronized volatile native interface synthetic annotation enum", string0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string1 = Utility.replace("u3&*hFw-NaX", "invokespecial", "\n     ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("u3&*hFw-NaX", string1);
      
      String string2 = Utility.compactClassName("u3&*hFw-NaX");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("u3&*hFw-NaX", string2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.commons.io.filefilter.SuffixFileFilter";
      stringArray0[1] = "\n     ";
      stringArray0[2] = "private protected static final synchronized volatile native interface synthetic annotation enum";
      stringArray0[3] = "org.apache.commons.io.filefilter.SuffixFileFilter";
      stringArray0[4] = "\"";
      stringArray0[5] = "org.apache.commons.io.filefilter.SuffixFileFilter";
      String string3 = Utility.methodTypeToSignature("org.apache.commons.io.filefilter.SuffixFileFilter", stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("(Lorg/apache/commons/io/filefilter/SuffixFileFilter;L;Lprivate;Lorg/apache/commons/io/filefilter/SuffixFileFilter;L\";Lorg/apache/commons/io/filefilter/SuffixFileFilter;)Lorg/apache/commons/io/filefilter/SuffixFileFilter;", string3);
      
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-85);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)6, (-2212), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 8250. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      try { 
        Utility.typeOfSignature("99");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 99
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      try { 
        Utility.typeOfSignature("MGDh~REic:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MGDh~REic:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "$((lK";
      try { 
        Utility.decode("$((lK", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)32;
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)123, (byte)67);
      assertNotNull(constantFieldref0);
      assertEquals(123, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(67, constantFieldref0.getNameAndTypeIndex());
      
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      assertTrue(constantFieldref1.equals((Object)constantFieldref0));
      assertNotNull(constantFieldref1);
      assertEquals(123, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(67, constantFieldref0.getNameAndTypeIndex());
      assertEquals(67, constantFieldref1.getNameAndTypeIndex());
      assertEquals(123, constantFieldref1.getClassIndex());
      assertEquals((byte)9, constantFieldref1.getTag());
      
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantFieldref constantFieldref2 = new ConstantFieldref((byte)80, (byte) (-28));
      assertFalse(constantFieldref2.equals((Object)constantFieldref0));
      assertFalse(constantFieldref2.equals((Object)constantFieldref1));
      assertNotNull(constantFieldref2);
      assertEquals((byte)9, constantFieldref2.getTag());
      assertEquals((-28), constantFieldref2.getNameAndTypeIndex());
      assertEquals(80, constantFieldref2.getClassIndex());
      
      constantArray0[1] = (Constant) constantFieldref2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)32, 77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = Utility.compactClassName("athrow", false);
      assertNotNull(string0);
      assertEquals("athrow", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('W');
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("!K-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = Utility.setBit(652, 652);
      assertEquals(4748, int0);
      
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object1));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object0));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals(7, objectArray0.length);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte)76;
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)84, (byte)126, (byte)31, (byte)46, (byte) (-5), (byte)76}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)84, (byte)126, (byte)31, (byte)46, (byte) (-5), (byte)76}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(32287, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(84, constantInterfaceMethodref0.getClassIndex());
      
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)84);
      assertNotNull(constantMethodType0);
      assertEquals(84, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertNotNull(constantMethodType1);
      assertEquals(84, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(84, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-5), 77);
      assertNotNull(constantInvokeDynamic0);
      assertEquals(77, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-5), constantInvokeDynamic0.getClassIndex());
      assertEquals((-5), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(3, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantPool1.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 652, (int) (byte)126);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Utility$1";
      boolean boolean0 = true;
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte) (-41);
      byteArray0[8] = (byte)12;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 10, 803, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte)122;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte) (-117), (byte) (-26), (byte) (-12), (byte) (-38), (byte) (-16), (byte)122}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertTrue(boolean0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-98), (byte) (-117), (byte) (-26), (byte) (-12), (byte) (-38), (byte) (-16), (byte)122}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(string0);
      assertEquals("$9e$8b$e6$f4$da$f0z", string0);
      
      String string1 = Utility.compactClassName("breakpoint");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("breakpoint", string1);
      
      try { 
        Utility.decode("$9e$8b$e6$f4$da$f0z", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      try { 
        Utility.typeOfSignature("OVp1yt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OVp1yt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte) (-9);
      byteArray0[8] = (byte) (-14);
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)70, (-1760));
      assertNotNull(constantInterfaceMethodref0);
      assertEquals((-1760), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(70, constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(84);
      assertNotNull(constantMethodType0);
      assertEquals(84, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      assertTrue(constantInterfaceMethodref1.equals((Object)constantInterfaceMethodref0));
      assertNotNull(constantInterfaceMethodref1);
      assertEquals((-1760), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(70, constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((-1760), constantInterfaceMethodref1.getNameAndTypeIndex());
      assertEquals(70, constantInterfaceMethodref1.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref1.getTag());
      
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)16, 43, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 19591. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, true);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("{java.lang.Object@3dac5ffa, java.lang.Object@1d268972}", "", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.methodSignatureReturnType("org.apache.bcel.classfile.Utility$JavaReader", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.Utility$JavaReader'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte) (-59);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 871, (-2315));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("NL?9HpBs_e|?", false);
      assertEquals(12, byteArray0.length);
      assertNotNull(byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(12, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.compactClassName("<illegal opcode>");
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      ConstantPool constantPool0 = null;
      int int0 = 1217;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1217, (-1845897142));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      try { 
        Utility.typeOfSignature("H%m8F#q>3,}g:` ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H%m8F#q>3,}g:` 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('3');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)75, (byte)41, (byte) (-18), (byte)86}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)104, (byte)105, (byte)39, (byte)105, (byte)17}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)104, (byte)105, (byte)39, (byte)105, (byte)17}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte)104, byte0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte)104, (byte)105, (byte)39, (byte)105, (byte)17}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(string0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("lmul", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte) (-86);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte)47);
      assertNotNull(constantClass0);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(47, constantClass0.getNameIndex());
      
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1056, (int) (byte)122, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = Utility.setBit(38, 38);
      assertEquals(102, int0);
      
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "int");
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-121);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)97, (byte) (-121)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = Utility.classOrInterface((-534));
      assertNotNull(string0);
      assertEquals("class", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)97, 120, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'X2P5b;p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'X2P5b;p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-38);
      byte byte0 = (byte) (-43);
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte) (-17);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)61, (int) (byte) (-38));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-39);
      byte byte0 = (byte)70;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[1] = (byte)70;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-39), (byte)70}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("GmDTCAM;Fc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GmDTCAM;Fc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.format(3182, 3182, true, 'K');
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte) (-1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.accept(emptyVisitor0);
      assertEquals(0, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (-1097));
      assertArrayEquals(new byte[] {(byte)0, (byte)113, (byte)2, (byte) (-10), (byte)92, (byte)118, (byte)15, (byte) (-1)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    nop\n1:    lrem\n2:    iconst_m1\n3:    <illegal opcode>\n4:    dup2\n5:    fneg\n6:    dconst_1\n7:    impdep2\n", string1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte)51;
      byteArray0[8] = (byte) (-102);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)43, (byte)45, (byte) (-3), (byte)4, (byte)75, (byte)71, (byte)51, (byte) (-102)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-66);
      byteArray1[1] = (byte) (-106);
      byteArray1[2] = (byte)77;
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-106), (int) (byte) (-66));
      assertArrayEquals(new byte[] {(byte) (-66), (byte) (-106), (byte)77}, byteArray1);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    arraylength\n1:    fcmpg\n2:    astore_2\n", string0);
      
      boolean boolean1 = Utility.equals(byteArray1, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-66), (byte) (-106), (byte)77}, byteArray1);
      assertEquals(3, byteArray1.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = ")d[ceZDru";
      try { 
        Utility.typeOfSignature(")d[ceZDru");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )d[ceZDru
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object1));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object0));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals(7, objectArray0.length);
      assertNotNull(string0);
      
      int int0 = Utility.clearBit(8, 8);
      assertEquals(8, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte) (-50);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 185, 8, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":a=7^b";
      String string0 = Utility.methodTypeToSignature(":a=7^b", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("(L:a=7^b;)L:a=7^b;", string0);
      
      String string1 = Utility.fillup("(L:a=7^b;)L:a=7^b;", 103, true, '`');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("(L:a=7^b;)L:a=7^b;`````````````````````````````````````````````````````````````````````````````````````", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)6, (byte) (-38), (byte) (-74), (byte) (-80)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)6, (byte) (-38), (byte) (-74), (byte) (-80)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("arraylength", string2);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = Utility.fillup("\"pShV)W", (-222), false, 'c');
      assertNotNull(string0);
      assertEquals("\"pShV)W", string0);
      
      try { 
        Utility.typeOfSignature("\"pShV)W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"pShV)W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.bcel.classfile.CodeException";
      stringArray0[1] = "org.apache.bcel.classfile.CodeException";
      stringArray0[2] = "org.apache.bcel.classfile.CodeException";
      stringArray0[3] = "org.apache.bcel.classfile.CodeException";
      String string0 = Utility.methodTypeToSignature("org.apache.bcel.classfile.CodeException", stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string0);
      assertEquals("(Lorg/apache/bcel/classfile/CodeException;Lorg/apache/bcel/classfile/CodeException;Lorg/apache/bcel/classfile/CodeException;Lorg/apache/bcel/classfile/CodeException;)Lorg/apache/bcel/classfile/CodeException;", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte) (-50);
      byteArray0[8] = (byte)58;
      Constant[] constantArray0 = new Constant[5];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-108), (byte) (-34));
      assertNotNull(constantFieldref0);
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-34), constantFieldref0.getNameAndTypeIndex());
      assertEquals((-108), constantFieldref0.getClassIndex());
      
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-886), (byte)58);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals((-886), constantInterfaceMethodref0.getClassIndex());
      assertEquals(58, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantFieldref constantFieldref1 = (ConstantFieldref)constantFieldref0.copy();
      assertTrue(constantFieldref1.equals((Object)constantFieldref0));
      assertNotSame(constantFieldref0, constantFieldref1);
      assertNotSame(constantFieldref1, constantFieldref0);
      assertNotNull(constantFieldref1);
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-34), constantFieldref0.getNameAndTypeIndex());
      assertEquals((-108), constantFieldref0.getClassIndex());
      assertEquals((-34), constantFieldref1.getNameAndTypeIndex());
      assertEquals((-108), constantFieldref1.getClassIndex());
      assertEquals((byte)9, constantFieldref1.getTag());
      
      constantArray0[2] = (Constant) constantFieldref1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("org.apache.bcel.classfile.CodeException");
      assertNotNull(constantUtf8_0);
      assertEquals("org.apache.bcel.classfile.CodeException", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantInteger constantInteger0 = new ConstantInteger(820);
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(820, constantInteger0.getBytes());
      
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      assertNotNull(constantInteger1);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(820, constantInteger0.getBytes());
      assertEquals(820, constantInteger1.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      
      constantArray0[4] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(5, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 159, (-687));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature(">*)t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >*)t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "TK#|E~f;GD1K";
      stringArray0[1] = "TK#|E~f;GD1K";
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      stringArray0[2] = "";
      String string0 = Utility.methodTypeToSignature("TK#|E~f;GD1K", stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
      assertEquals("(LTK#|E~f;GD1K;LTK#|E~f;GD1K;L;)LTK#|E~f;GD1K;", string0);
      
      try { 
        Utility.methodSignatureToString("(LTK#|E~f;GD1K;LTK#|E~f;GD1K;L;)LTK#|E~f;GD1K;", "", "(LTK#|E~f;GD1K;LTK#|E~f;GD1K;L;)LTK#|E~f;GD1K;", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GD1K;LTK#|E~f;GD1K;L;)LTK#|E~f;GD1K;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "84e}-nzkP#";
      try { 
        Utility.typeOfSignature("84e}-nzkP#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 84e}-nzkP#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "D8aC-";
      stringArray0[1] = "A{8[kH]FfCwq9}zm";
      stringArray0[2] = "A{8[kH]FfCwq9}zm";
      stringArray0[3] = "A{8[kH]FfCwq9}zm";
      stringArray0[4] = "A{8[kH]FfCwq9}zm";
      stringArray0[5] = "A{8[kH]FfCwq9}zm";
      String string0 = Utility.methodTypeToSignature("A{8[kH]FfCwq9}zm", stringArray0);
      assertEquals(6, stringArray0.length);
      assertNotNull(string0);
      assertEquals("(LD8aC-;[LA{8;[LA{8;[LA{8;[LA{8;[LA{8;)[LA{8;", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte) (-11);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)42, (byte)49, (byte) (-51), (byte) (-123), (byte)70, (byte)53, (byte) (-11)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)75;
      byteArray0[8] = (byte) (-97);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)66, (byte) (-56), (byte)118, (byte)47, (byte) (-47), (byte)115, (byte) (-55), (byte)75, (byte) (-97)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertArrayEquals(new byte[] {(byte)66, (byte) (-56), (byte)118, (byte)47, (byte) (-47), (byte)115, (byte) (-55), (byte)75, (byte) (-97)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(constantMethodType0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(17096, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-56), 3963, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lstore_3
         // 1:    goto_w\t\t#1982845300
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "double");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)96;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)96, 98, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("%gdeBJ4t$89C", false);
      assertArrayEquals(new byte[] {(byte)37, (byte)103, (byte)100, (byte)101, (byte)66, (byte)74, (byte)52, (byte)116, (byte) (-119), (byte)67}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string0 = Utility.convertString("%gdeBJ4t$89C");
      assertNotNull(string0);
      assertEquals("%gdeBJ4t$89C", string0);
      
      String string1 = ", low = ";
      boolean boolean0 = false;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string2 = Utility.fillup(", low = ", 56, false, '8');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("888888888888888888888888888888888888888888888888, low = ", string2);
      
      String string3 = "V";
      String string4 = Utility.convertString("V");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("V", string4);
      
      String string5 = Utility.getSignature("888888888888888888888888888888888888888888888888, low = ");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("L888888888888888888888888888888888888888888888888,;", string5);
      
      String string6 = "newarray";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("newarray", ", low = ", "V", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: newarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = Utility.setBit((-1902), (-1902));
      assertEquals((-1902), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte) (-117), (byte)108, (byte)22, (byte)7, (byte) (-118)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      float float0 = byteSequence0.readFloat();
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte) (-117), (byte)108, (byte)22, (byte)7, (byte) (-118)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(2.2028903E-18F, float0, 0.01F);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte) (-117), (byte)108, (byte)22, (byte)7, (byte) (-118)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(string0);
      assertEquals(6, byteSequence0.getIndex());
      assertEquals("lload\t\t%7", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)7, (int) (byte)108, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "51Or9{z";
      try { 
        Utility.typeOfSignature("51Or9{z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 51Or9{z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=A/R_r450x8!e|KQHT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =A/R_r450x8!e|KQHT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-79), (byte)48, (byte) (-94), (byte) (-7), (byte)48}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      int int0 = byteSequence0.available();
      assertArrayEquals(new byte[] {(byte) (-79), (byte)48, (byte) (-94), (byte) (-7), (byte)48}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, int0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte) (-79), (byte)48, (byte) (-94), (byte) (-7), (byte)48}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("return", string0);
      
      String string1 = "protected";
      // Undeclared exception!
      try { 
        byteSequence0.read(byteArray0, (int) (byte) (-7), (int) (byte)48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte)42;
      byteArray0[8] = (byte)75;
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass((byte)75);
      assertNotNull(constantClass0);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(75, constantClass0.getNameIndex());
      
      constantArray0[0] = (Constant) constantClass0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("aastore");
      assertNotNull(constantUtf8_0);
      assertEquals("aastore", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(2, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertNotNull(constantPool1);
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-1097971799), 1494);
      assertArrayEquals(new byte[] {(byte)81, (byte) (-95), (byte) (-68), (byte) (-4), (byte)13, (byte)3, (byte)75, (byte)42, (byte)75}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertNotNull(string0);
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantPool0.getLength());
      assertEquals("0:    fastore\n1:    if_icmplt\t\t#-17155\n4:    fconst_2\n5:    iconst_0\n6:    astore_0\n7:    aload_0\n8:    astore_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)113, (byte) (-4), (byte)83, (byte)2}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      byteSequence0.close();
      assertArrayEquals(new byte[] {(byte)113, (byte) (-4), (byte)83, (byte)2}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte)113, (byte) (-4), (byte)83, (byte)2}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("lrem", string0);
      
      String string1 = Utility.accessToString((int) (byte)83, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("public private final volatile", string1);
      
      String string2 = Utility.format((byte) (-4), (byte) (-4), false, 'O');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("-4", string2);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)84;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)121, (int) (byte)6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(":)<NTg(wQ<t.<zWzK<C", false);
      assertEquals(19, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte byte0 = Utility.typeOfSignature("F7pu[T`6OAl__e}6be");
      assertEquals((byte)6, byte0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertEquals(19, byteArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) ":)<NTg(wQ<t.<zWzK<C";
      objectArray0[1] = (Object) "F7pu[T`6OAl__e}6be";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      String string0 = Utility.printArray(objectArray0);
      assertEquals(3, objectArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = Utility.accessToString((-1234));
      assertNotNull(string0);
      assertEquals("private protected static synchronized native interface strictfp synthetic annotation enum", string0);
      
      byte[] byteArray0 = Utility.decode("TEy1=:8<.UwD", false);
      assertEquals(12, byteArray0.length);
      assertNotNull(byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(12, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(12, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("bastore", string1);
      
      int int0 = Utility.setBit((-1234), (-1234));
      assertEquals((-1234), int0);
      
      String string2 = Utility.convertString("V8u)t>JcRCdD}Tu");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("V8u)t>JcRCdD}Tu", string2);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("3MrjGl<0])Hgv'zM>SC", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `3MrjGl<0])Hgv'zM>SC'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("ZstQVY!Z");
      assertEquals((byte)4, byte0);
      
      try { 
        Utility.methodSignatureReturnType("true", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `true'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)7, (byte)111, (byte)28, (byte)69, (byte) (-56), (byte)12}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      assertArrayEquals(new byte[] {(byte)7, (byte)111, (byte)28, (byte)69, (byte) (-56), (byte)12}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(constantFloat0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(1.7988669E-34F, constantFloat0.getBytes(), 0.01F);
      
      constantArray0[0] = (Constant) constantFloat0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(97, (-2431));
      assertNotNull(constantMethodHandle0);
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(97, constantMethodHandle0.getReferenceKind());
      assertEquals((-2431), constantMethodHandle0.getReferenceIndex());
      
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertNotNull(constantMethodHandle1);
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(97, constantMethodHandle0.getReferenceKind());
      assertEquals((-2431), constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertEquals(97, constantMethodHandle1.getReferenceKind());
      assertEquals((-2431), constantMethodHandle1.getReferenceIndex());
      
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantFloat constantFloat1 = new ConstantFloat(161.39171F);
      assertFalse(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals((byte)4, constantFloat1.getTag());
      assertEquals(161.39171F, constantFloat1.getBytes(), 0.01F);
      
      constantArray0[2] = (Constant) constantFloat1;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      JavaClass javaClass0 = classLoaderRepository0.findClass((String) null);
      assertNull(javaClass0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      assertNotNull(descendingVisitor0);
      
      constantMethodHandle1.accept(descendingVisitor0);
      assertTrue(constantMethodHandle0.equals((Object)constantMethodHandle1));
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertNotSame(constantMethodHandle0, constantMethodHandle1);
      assertNotSame(constantMethodHandle1, constantMethodHandle0);
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(97, constantMethodHandle0.getReferenceKind());
      assertEquals((-2431), constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertEquals(97, constantMethodHandle1.getReferenceKind());
      assertEquals((-2431), constantMethodHandle1.getReferenceIndex());
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte) (-116);
      byteArray0[8] = (byte)19;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1012, (int) (byte)19);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object2));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      String string0 = Utility.printArray(objectArray0, true, false);
      assertEquals(6, objectArray0.length);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)83;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1599, 3965, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), (int) (byte) (-73));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-80);
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-44), (byte) (-80)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(string0);
      assertEquals("$J$d4$b0", string0);
      
      String string1 = Utility.accessToString(0, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      MockFile mockFile0 = new MockFile("$J$d4$b0");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("lh+b", "$J$d4$b0");
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("lh+b0$J$d4$b0", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp/lh+b0$J$d4$b0", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H8j");
      assertFalse(boolean0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockPrintStream0);
      
      String string2 = mockFile0.getAbsolutePath();
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(mockFile0, file0);
      assertNotNull(string2);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("$J$d4$b0", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("$J$d4$b0", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/ubuntu/test/projects/1_bcel/$J$d4$b0", string2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockFile0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(1, objectArray0.length);
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("$J$d4$b0", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(11L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("$J$d4$b0", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      
      String string3 = Utility.getSignature("$J$d4$b0");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("L$J$d4$b0;", string3);
      
      String string4 = Utility.compactClassName("", "dastore", false);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte) (-80));
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-80L), constantLong0.getBytes());
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertNotNull(constantLong1);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-80L), constantLong0.getBytes());
      assertEquals((-80L), constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      
      constantArray0[0] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)9, 80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "B^\"W%k2z=";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B^\"W%k2z=");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = Utility.setBit(125, 125);
      assertEquals(536871037, int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-58)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = Utility.convertString("boolean");
      assertNotNull(string0);
      assertEquals("boolean", string0);
      
      String string1 = "(reference_kind = ";
      String string2 = "|RRnF4Jq,`RMu#\\0h1";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(reference_kind = ", ")", "|RRnF4Jq,`RMu#\u0000h1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `reference_kind = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("J");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = Utility.setBit((-1902), (-1902));
      assertEquals((-1902), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-14), (byte) (-117), (byte)108, (byte)22, (byte)7, (byte) (-118)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-14), (byte) (-117), (byte)108, (byte)22, (byte)7, (byte) (-118)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("fload_0", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-123);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)25, (byte)25);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals(25, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(25, constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      int int0 = 473;
      ConstantInterfaceMethodref constantInterfaceMethodref1 = (ConstantInterfaceMethodref)constantInterfaceMethodref0.copy();
      assertTrue(constantInterfaceMethodref1.equals((Object)constantInterfaceMethodref0));
      assertNotSame(constantInterfaceMethodref0, constantInterfaceMethodref1);
      assertNotSame(constantInterfaceMethodref1, constantInterfaceMethodref0);
      assertNotNull(constantInterfaceMethodref1);
      assertEquals(25, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(25, constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(25, constantInterfaceMethodref1.getClassIndex());
      assertEquals(25, constantInterfaceMethodref1.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref1.getTag());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 473, (int) (byte) (-123), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)22;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 408, 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)88;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      byteArray0[3] = (byte)54;
      boolean boolean1 = false;
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)63, (byte)48, (byte)88, (byte)54}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(string0);
      assertEquals("$3f0X6", string0);
      
      String string1 = "<:rVi=mL";
      try { 
        Utility.typeOfSignature("<:rVi=mL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <:rVi=mL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "Warning: Padding byte != 0 in ";
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WBca2O qNq$kl\"=?Uk");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "goto_w");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.printArray(objectArray0, true, false);
      assertEquals(4, objectArray0.length);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature(".K8g2JYwY *I?tL8SR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .K8g2JYwY *I?tL8SR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`P@.wU";
      stringArray0[1] = "`P@.wU";
      stringArray0[2] = "`P@.wU";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.methodTypeToSignature("`P@.wU", stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
      assertEquals("(L`P@/wU;L`P@/wU;L`P@/wU;)L`P@/wU;", string0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(L`P@/wU;L`P@/wU;L`P@/wU;)L`P@/wU;", false);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      int int0 = Utility.clearBit(122, 122);
      assertEquals(122, int0);
      
      // Undeclared exception!
      try { 
        Utility.replace("`P@.wU", (String) null, "(L`P@/wU;L`P@/wU;L`P@/wU;)L`P@/wU;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "Bbl";
      byte byte0 = Utility.typeOfSignature("Bbl");
      assertEquals((byte)8, byte0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)100, (byte)8}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-33);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte)8;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 956, (-547), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)1;
      int int0 = 76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)69, 76, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte) (-28);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-127), (byte) (-112), (byte)31, (byte) (-4), (byte)5, (byte) (-55), (byte)36, (byte) (-28)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      
      String string0 = "Null";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Null", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Null'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = Utility.convertString(")\n");
      assertNotNull(string0);
      assertEquals(")\\n", string0);
      
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[2];
      try { 
        ConstantUtf8.getInstance((DataInput) byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-4), (byte)83, (byte)2}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-4), (byte)83, (byte)2}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("f2d", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[1] = (byte) (-86);
      byteArray0[3] = (byte) (-104);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 62, (int) (byte) (-104));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-104);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 62, (int) (byte) (-104));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "%t8V^8cw";
      try { 
        Utility.typeOfSignature("%t8V^8cw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %t8V^8cw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      try { 
        Utility.typeOfSignature("P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = Utility.accessToString(611, true);
      assertNotNull(string0);
      assertEquals("public private volatile", string0);
      
      String string1 = Utility.classOrInterface(611);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("interface", string1);
      
      String string2 = Utility.printArray((Object[]) null, true);
      assertNull(string2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)55, 171);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "Sk";
      byte byte0 = Utility.typeOfSignature("Sk");
      assertEquals((byte)9, byte0);
      
      try { 
        Utility.methodSignatureArgumentTypes("\t\t%", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = Utility.fillup("ladd", 201, false, '{');
      assertNotNull(string0);
      assertEquals("{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ladd", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-119);
      byte byte0 = (byte)3;
      byteArray0[1] = (byte)3;
      byte byte1 = (byte) (-7);
      byteArray0[2] = (byte) (-7);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)3, (int) (byte)3);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)3, (byte) (-7)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, constantPool0.getLength());
      assertEquals("", string1);
      
      String string2 = Utility.convertString("ladd");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("ladd", string2);
      
      String string3 = "wide";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        constantPool0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-83), (byte)46, (byte) (-96), (byte)62, (byte)12, (byte)47, (byte) (-64)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-83), (byte)46, (byte) (-96), (byte)62, (byte)12, (byte)47, (byte) (-64)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertNotNull(string0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("if_acmpne\t\t#-21202", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)52, (byte)103}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[0];
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6l#Z@8o}3oRf]P0M");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      int int0 = byteSequence0.available();
      assertArrayEquals(new byte[] {(byte)37, (byte)52, (byte)103}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, int0);
      
      String string0 = constantPool0.toString();
      assertEquals(0, constantArray0.length);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals("", string0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte)37, (byte)52, (byte)103}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("fload_3", string1);
      
      String string2 = Utility.getSignature("fload_3");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Lfload_3;", string2);
      
      String string3 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertArrayEquals(new byte[] {(byte)37, (byte)52, (byte)103}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("caload", string3);
      
      String string4 = Utility.printArray((Object[]) constantArray0);
      assertEquals(0, constantArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("{}", string4);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('f');
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string5 = Utility.printArray((Object[]) constantArray0, true, true);
      assertEquals(0, constantArray0.length);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("{}", string5);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-125);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-100), (int) (byte)75);
      assertArrayEquals(new byte[] {(byte) (-37), (byte)75, (byte)42, (byte) (-100), (byte)20, (byte) (-125)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string0);
      assertEquals("0:    <illegal opcode>\n1:    astore_0\n2:    aload_0\n3:    ifge\t\t#5254\n", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "'[8yhm0Pkv ('%[";
      stringArray0[1] = "'[8yhm0Pkv ('%[";
      stringArray0[2] = "[\";hM</6=*0!5Dlu";
      stringArray0[3] = null;
      stringArray0[4] = "'[8yhm0Pkv ('%[";
      stringArray0[5] = "'[8yhm0Pkv ('%[";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("'[8yhm0Pkv ('%[", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[8yhm0Pkv ('%[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = Utility.isSet(181, 181);
      assertFalse(boolean0);
      
      int int0 = Utility.setBit(181, 196);
      assertEquals(181, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)44;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[4] = (byte) (-65);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 187, (int) (byte) (-65));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)46;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)103, 170, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = Utility.compactClassName("float");
      assertNotNull(string0);
      assertEquals("float", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("float", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("()F", string1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(7);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      byteArrayOutputStream0.flush();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      byteArrayOutputStream0.close();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.println((float) 7);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      mockPrintWriter0.print("float");
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      boolean boolean0 = Utility.isJavaIdentifierPart('G');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4ujF");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)74}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int int0 = Utility.setBit((byte)74, 1270);
      assertEquals(4194378, int0);
      
      String string2 = Utility.methodSignatureToString("()F", "*#@)l#Kt6R~4:6", "float");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("float float *#@)l#Kt6R~4:6()", string2);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('C');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)79;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1), 8, false);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-97), (byte) (-73), (byte)45, (byte)79}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    if_icmpeq\t\t#-18642\n4:    iastore\n", string0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte) (-97);
      objectArray0[1] = (Object) (byte) (-97);
      objectArray0[2] = (Object) (byte)45;
      objectArray0[3] = (Object) (byte) (-97);
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) "0:    nop\n1:    if_icmpeq\t\t#-18642\n4:    iastore\n";
      objectArray0[6] = (Object) "0:    nop\n1:    if_icmpeq\t\t#-18642\n4:    iastore\n";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[8] = object1;
      String string1 = Utility.printArray(objectArray0, false, false);
      assertEquals(9, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, "lor");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.methodSignatureReturnType("V", false);
      assertNotNull(string0);
      assertEquals("void", string0);
      
      String string1 = Utility.accessToString(138);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("private static transient", string1);
      
      String string2 = Utility.compactClassName("ifge");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("ifge", string2);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)75;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 88, 73, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = Utility.isSet(3958, 3958);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = "long";
      String string1 = Utility.convertString("long");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("long", string1);
      
      int int0 = Utility.clearBit(3958, (-1706));
      assertEquals(3958, int0);
      
      String string2 = "@4tC)PCTs9@+lC~v`";
      try { 
        Utility.typeOfSignature("@4tC)PCTs9@+lC~v`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @4tC)PCTs9@+lC~v`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2I9+R Zw64-o\"6C");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)60;
      String string0 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)91, (byte)78, (byte)60}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(string0);
      assertEquals("5b 4e 3c", string0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2I9+R Zw64-o\"6C");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = Utility.classOrInterface((byte)91);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      String string2 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)91, (byte)78, (byte)60}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("$5bN$3c", string2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "2I9+R Zw64-o\"6C";
      String string3 = Utility.printArray(objectArray0, false);
      assertEquals(1, objectArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("2I9+R Zw64-o\"6C", string3);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 366, 366, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "Xq(=";
      try { 
        Utility.typeOfSignature("Xq(=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xq(=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = Utility.signatureToString("F");
      assertNotNull(string0);
      assertEquals("float", string0);
      
      String string1 = "r{JA3DyMMT.L ";
      String string2 = "putstatic";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("r{JA3DyMMT.L ", "putstatic", "putstatic", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: r{JA3DyMMT.L 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)102, (byte)93, (byte) (-48), (byte)59, (byte) (-93), (byte)97, (byte) (-66), (byte)24}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte)102, (byte)93, (byte) (-48), (byte)59, (byte) (-93), (byte)97, (byte) (-66), (byte)24}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("fsub", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("PHuK5EOg[pua-f5,8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PHuK5EOg[pua-f5,8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "V ^*JWM/3";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ifgt";
      stringArray0[1] = "V ^*JWM/3";
      String string1 = Utility.methodTypeToSignature("V ^*JWM/3", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("(Lifgt;LV;)LV;", string1);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-107);
      byteArray0[0] = (byte) (-107);
      byte byte1 = (byte)59;
      byteArray0[1] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-107), (byte)59}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertArrayEquals(new byte[] {(byte) (-107), (byte)59}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("fcmpl", string2);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("fcmpl", "j:|]|WsO|");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // j:|]|WsO|
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.accessToString(752);
      assertNotNull(string0);
      assertEquals("final synchronized volatile transient interface", string0);
      
      String string1 = Utility.replace("final synchronized volatile transient interface", "org.apache.bcel.classfile.Utility$JavaWriter", "org.apache.bcel.classfile.Utility$JavaWriter");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("final synchronized volatile transient interface", string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "final synchronized volatile transient interface";
      stringArray0[1] = "final synchronized volatile transient interface";
      stringArray0[2] = "class";
      stringArray0[3] = "astore_1";
      stringArray0[4] = "final synchronized volatile transient interface";
      stringArray0[5] = "org.apache.bcel.classfile.Utility$JavaWriter";
      stringArray0[6] = "org.apache.bcel.classfile.Utility$JavaWriter";
      stringArray0[7] = "org.apache.bcel.classfile.Utility$JavaWriter";
      String string2 = Utility.methodTypeToSignature("astore_1", stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("(Lfinal;Lfinal;Lclass;Lastore_1;Lfinal;Lorg/apache/bcel/classfile/Utility$JavaWriter;Lorg/apache/bcel/classfile/Utility$JavaWriter;Lorg/apache/bcel/classfile/Utility$JavaWriter;)Lastore_1;", string2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 46, (-467));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 85, 18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("RPR|*K%C/R3\"NdZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RPR|*K%C/R3\"NdZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)72;
      ConstantPool constantPool0 = null;
      int int0 = (-131);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)67, (-131), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("7E_o{`c<V", "7E_o{`c<V", false);
      assertNotNull(string0);
      assertEquals("7E_o{`c<V", string0);
      
      String string1 = Utility.fillup("r]X (18AuP;#@R3>u", (-119), false, '/');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("r]X (18AuP;#@R3>u", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)70;
      String string2 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)61, (byte)28, (byte) (-11), (byte)2, (byte)70}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("$3d$i$f5$CF", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)61, (byte)28, (byte) (-11), (byte)2, (byte)70}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.accept(emptyVisitor0);
      assertEquals(0, constantArray0.length);
      assertEquals(0, constantPool0.getLength());
      
      String string3 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertArrayEquals(new byte[] {(byte)61, (byte)28, (byte) (-11), (byte)2, (byte)70}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("istore_2", string3);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)39, (byte)3}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertArrayEquals(new byte[] {(byte)39, (byte)3}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, false);
      assertNull(string0);
      
      String string1 = Utility.printArray((Object[]) null);
      assertNull(string1);
      
      String string2 = "(\"";
      try { 
        Utility.methodSignatureArgumentTypes("(\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = null;
      String string0 = Utility.methodTypeToSignature("jsr_w", (String[]) null);
      assertNotNull(string0);
      assertEquals("()Ljsr_w;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte) (-9);
      byteArray0[6] = (byte) (-123);
      byteArray0[7] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-104), 3787, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iconst_2
         // 1:    aload_3
         // 2:    dcmpg
         // 3:    dstore\t\t%202
         // 5:    <illegal opcode>
         // 6:    i2l
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('z');
      assertTrue(boolean0);
      
      Object[] objectArray0 = null;
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      String string1 = "VlZad";
      byte byte0 = Utility.typeOfSignature("VlZad");
      assertEquals((byte)12, byte0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = Utility.clearBit((byte)12, 700);
      assertEquals(12, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)12, (byte)12, (byte)12}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      byteSequence0.readFully(byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)12, (byte)12, (byte)12}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteSequence0.getIndex());
      
      try { 
        byteSequence0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("XHY;dP3uIOjO%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XHY;dP3uIOjO%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-88)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = Utility.classOrInterface(196);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)26, (byte)120, (byte) (-85)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte)26, (byte)120, (byte) (-85)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("iload_0", string1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-127);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-117), (byte) (-61), (byte) (-99), (byte) (-127)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "N@Y0LmE_S|g.sHwZ^Y9");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = Utility.methodSignatureReturnType("CONSTANT_Double");
      assertNotNull(string0);
      assertEquals("char", string0);
      
      try { 
        Utility.typeOfSignature("N@Y0LmE_S|g.sHwZ^Y9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N@Y0LmE_S|g.sHwZ^Y9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)40;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-34), 84, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 28270. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = Utility.compactClassName("_", false);
      assertNotNull(string0);
      assertEquals("_", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-31);
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-105), (byte)77, (byte) (-117), (byte) (-112), (byte) (-62), (byte) (-31), (byte)20, (byte)0, (byte)74}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte) (-105), (byte)77, (byte) (-117), (byte) (-112), (byte) (-62), (byte) (-31), (byte)20, (byte)0, (byte)74}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("dcmpl", string1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte) (-113);
      byteArray0[7] = (byte)3;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 118, (int) (byte)59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = "LocalVariableTypeTable";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("LocalVariableTypeTable", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariableTypeTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "65";
      try { 
        Utility.typeOfSignature("65");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 65
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "$_AWV4ROj3";
      try { 
        Utility.typeOfSignature("$_AWV4ROj3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $_AWV4ROj3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "At!Mg^zx#se!PXN";
      try { 
        Utility.typeOfSignature("At!Mg^zx#se!PXN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: At!Mg^zx#se!PXN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = ", high = ";
      try { 
        Utility.typeOfSignature(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)2;
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(4644);
      assertNotNull(constantMethodType0);
      assertEquals(4644, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertNotNull(constantMethodType1);
      assertEquals(4644, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(4644, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantMethodType constantMethodType2 = new ConstantMethodType(constantMethodType1);
      assertTrue(constantMethodType0.equals((Object)constantMethodType1));
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertTrue(constantMethodType2.equals((Object)constantMethodType0));
      assertTrue(constantMethodType2.equals((Object)constantMethodType1));
      assertNotNull(constantMethodType2);
      assertEquals(4644, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(4644, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(4644, constantMethodType2.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType2.getTag());
      
      constantArray0[1] = (Constant) constantMethodType2;
      ConstantString constantString0 = new ConstantString(198);
      assertNotNull(constantString0);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(198, constantString0.getStringIndex());
      
      ConstantString constantString1 = new ConstantString(constantString0);
      assertTrue(constantString1.equals((Object)constantString0));
      assertNotNull(constantString1);
      assertEquals(198, constantString1.getStringIndex());
      assertEquals((byte)8, constantString1.getTag());
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(198, constantString0.getStringIndex());
      
      constantArray0[2] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1201), (int) (byte)43, true);
      assertArrayEquals(new byte[] {(byte) (-3), (byte) (-117), (byte) (-20), (byte)16, (byte)53, (byte) (-61), (byte)43, (byte)2}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(3, constantArray0.length);
      assertNotNull(string0);
      assertEquals(3, constantPool0.getLength());
      assertEquals("0:    <illegal opcode>\n1:    f2i\n2:    <illegal opcode>\n3:    bipush\t\t53\n5:    monitorexit\n6:    aload_1\n7:    iconst_m1\n", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        Utility.methodSignatureReturnType("T>UB.t&o}3p:=dtxDCa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T>UB.t&o}3p:=dtxDCa
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "monitorenter");
      assertFalse(boolean0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals(5, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = Utility.fillup("{\"java.lang.Object@1d074c9\", \"java.lang.Object@3ad0e7c8\", \"java.lang.Object@75da23a4\", \"java.lang.Object@53aa6e86\", \"java.lang.Object@51de3e06\"}", 67, true, '_');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.convertString("monitorenter");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("monitorenter", string2);
      
      String string3 = Utility.printArray(objectArray0);
      assertEquals(5, objectArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = Utility.convertString("{java.lang.Object@1d074c9, java.lang.Object@3ad0e7c8, java.lang.Object@75da23a4, java.lang.Object@53aa6e86, java.lang.Object@51de3e06}");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('_');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = Utility.fillup("{\"java.lang.Object@1d074c9\", \"java.lang.Object@3ad0e7c8\", \"java.lang.Object@75da23a4\", \"java.lang.Object@53aa6e86\", \"java.lang.Object@51de3e06\"}", (-1127), false, '_');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = Utility.fillup("C.TMbnQ9#aMfL", 1910, true, '*');
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte) (-20);
      byteArray0[8] = (byte) (-48);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1), 1058);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dreturn
         // 1:    nop
         // 2:    fstore_3
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-86)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = Utility.compactClassName("From\tTo\tHandler\tType\n", false);
      assertNotNull(string0);
      assertEquals("From\tTo\tHandler\tType\n", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)108;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 66, 1026, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)67;
      Constant[] constantArray0 = new Constant[6];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(76, (-3973));
      assertNotNull(constantInterfaceMethodref0);
      assertEquals(76, constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((-3973), constantInterfaceMethodref0.getNameAndTypeIndex());
      
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      assertTrue(constantInterfaceMethodref1.equals((Object)constantInterfaceMethodref0));
      assertNotNull(constantInterfaceMethodref1);
      assertEquals(76, constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((-3973), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((-3973), constantInterfaceMethodref1.getNameAndTypeIndex());
      assertEquals(76, constantInterfaceMethodref1.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref1.getTag());
      
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(1.0, constantDouble0.getBytes(), 0.01);
      
      constantArray0[1] = (Constant) constantDouble0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)36, (byte) (-120), (byte)89, (byte)67}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      assertArrayEquals(new byte[] {(byte)12, (byte)36, (byte) (-120), (byte)89, (byte)67}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(constantClass0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(3108, constantClass0.getNameIndex());
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertArrayEquals(new byte[] {(byte)12, (byte)36, (byte) (-120), (byte)89, (byte)67}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertNotNull(constantClass1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(3108, constantClass0.getNameIndex());
      assertEquals(3108, constantClass1.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      
      constantArray0[2] = (Constant) constantClass1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(69, (-3973));
      assertNotNull(constantMethodref0);
      assertEquals((-3973), constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(69, constantMethodref0.getClassIndex());
      
      constantArray0[3] = (Constant) constantMethodref0;
      ConstantDouble constantDouble1 = new ConstantDouble(0.0);
      assertFalse(constantDouble1.equals((Object)constantDouble0));
      assertNotNull(constantDouble1);
      assertEquals(0.0, constantDouble1.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      
      constantArray0[4] = (Constant) constantDouble1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertArrayEquals(new byte[] {(byte)12, (byte)36, (byte) (-120), (byte)89, (byte)67}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(constantMethodType0);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(34905, constantMethodType0.getDescriptorIndex());
      assertEquals(4, byteSequence0.getIndex());
      
      constantArray0[5] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(6, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(6, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 76, 2989, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.format(3182, (-1), true, 'K');
      assertNotNull(string0);
      assertEquals("3182", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte) (-1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (-1097));
      assertArrayEquals(new byte[] {(byte)0, (byte)98, (byte)2, (byte) (-10), (byte)83, (byte)118, (byte)15, (byte) (-1)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    nop\n1:    fadd\n2:    iconst_m1\n3:    <illegal opcode>\n4:    aastore\n5:    fneg\n6:    dconst_1\n7:    impdep2\n", string1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.classOrInterface(6);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "class");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = Utility.convertString("class");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      String string2 = Utility.methodTypeToSignature("class", (String[]) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("()Lclass;", string2);
      
      String string3 = Utility.compactClassName("double", "void", false);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("double", string3);
      
      String string4 = Utility.methodSignatureReturnType("Byte code error: ");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("byte", string4);
      
      String string5 = Utility.printArray((Object[]) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = Utility.compactClassName("e| ,w+$PC4Kz'^vY`56", true);
      assertNotNull(string0);
      assertEquals("e| ,w+$PC4Kz'^vY`56", string0);
      
      boolean boolean0 = Utility.isSet(81, 81);
      assertFalse(boolean0);
      
      String string1 = Utility.getSignature("bq");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Lbq;", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)56;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)56, (int) (byte)41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "4=mUK4GW~(rqZUWb<J";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4=mUK4GW~(rqZUWb<J");
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("4=mUK4GW~(rqZUWb<J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4=mUK4GW~(rqZUWb<J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)94;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4;<09");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)95, (byte) (-84), (byte)94, (byte)69, (byte)55, (byte)43, (byte)87}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertArrayEquals(new byte[] {(byte)95, (byte) (-84), (byte)94, (byte)69, (byte)55, (byte)43, (byte)87}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals("swap", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)95, (byte) (-84), (byte)94, (byte)69, (byte)55, (byte)43, (byte)87}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("5f ac 5e 45 37 2b 57", string1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      byteArrayOutputStream0.close();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false, "5f ac 5e 45 37 2b 57");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 5f ac 5e 45 37 2b 57
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "aastore");
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("D1H,U%]fYG^kdO6PSG");
      assertEquals((byte)7, byte0);
      
      String string0 = Utility.format((byte)7, 6, false, 'A');
      assertNotNull(string0);
      assertEquals("AAAAA7", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)7, (byte)7}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)7, 101);
      assertNotNull(constantMethodHandle0);
      assertEquals(7, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(101, constantMethodHandle0.getReferenceIndex());
      
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(90, (-311));
      assertNotNull(constantInvokeDynamic0);
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(90, constantInvokeDynamic0.getClassIndex());
      assertEquals(90, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-311), constantInvokeDynamic0.getNameAndTypeIndex());
      
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertNotNull(constantInvokeDynamic1);
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(90, constantInvokeDynamic0.getClassIndex());
      assertEquals(90, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-311), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(90, constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertEquals(90, constantInvokeDynamic1.getClassIndex());
      assertEquals((-311), constantInvokeDynamic1.getNameAndTypeIndex());
      
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantInvokeDynamic constantInvokeDynamic2 = new ConstantInvokeDynamic((byte)7, (byte)7);
      assertFalse(constantInvokeDynamic2.equals((Object)constantInvokeDynamic1));
      assertFalse(constantInvokeDynamic2.equals((Object)constantInvokeDynamic0));
      assertNotNull(constantInvokeDynamic2);
      assertEquals(7, constantInvokeDynamic2.getNameAndTypeIndex());
      assertEquals(7, constantInvokeDynamic2.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic2.getTag());
      assertEquals(7, constantInvokeDynamic2.getClassIndex());
      
      constantArray0[2] = (Constant) constantInvokeDynamic2;
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = Utility.format(240, 240, false, 'd');
      assertNotNull(string0);
      assertEquals("ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd240", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte)125;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)63, (byte) (-50), (byte)83, (byte)101, (byte) (-110), (byte) (-51), (byte)125}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1083531554), 85);
      assertArrayEquals(new byte[] {(byte)63, (byte) (-50), (byte)83, (byte)101, (byte) (-110), (byte) (-51), (byte)125}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    lstore_0\n1:    <illegal opcode>\n2:    aastore\n3:    lsub\n4:    i2c\n5:    <illegal opcode>\n6:    lushr\n", string1);
      
      String string2 = Utility.classOrInterface(11);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("class", string2);
      
      boolean boolean2 = Utility.isSet(11, 2854);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)63;
      objectArray0[0] = (Object) (byte)101;
      objectArray0[2] = (Object) "ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd240";
      objectArray0[3] = (Object) (byte)83;
      objectArray0[4] = (Object) null;
      String string3 = Utility.printArray(objectArray0, false);
      assertEquals(5, objectArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("101, null, ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd240, 83, null", string3);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-46);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)68, (byte) (-49), (byte) (-22), (byte) (-46)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte)68, (byte) (-49), (byte) (-22), (byte) (-46)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("fstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = Utility.getSignature("@<1:?v");
      assertNotNull(string0);
      assertEquals("L@<1:?v;", string0);
      
      String string1 = "@~";
      String string2 = Utility.convertString("@~");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("@~", string2);
      
      try { 
        Utility.methodSignatureReturnType("L@<1:?v;", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L@<1:?v;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = Utility.convertString("org.apache.bcel.classfile.Utility$JavaReader");
      assertNotNull(string0);
      assertEquals("org.apache.bcel.classfile.Utility$JavaReader", string0);
      
      String string1 = Utility.compactClassName("org.apache.bcel.classfile.Utility$JavaReader");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.apache.bcel.classfile.Utility$JavaReader", string1);
      
      String string2 = "^!`bM`79+%";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^!`bM`79+%");
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("org.apache.bcel.classfile.Utility$JavaReader");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Utility$JavaReader", false);
      assertEquals(43, byteArray0.length);
      assertNotNull(byteArray0);
      
      boolean boolean1 = Utility.isSet((short) (-1), (short) (-1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte byte0 = (byte)6;
      byteArray1[0] = (byte)6;
      byte byte1 = (byte)36;
      byteArray1[1] = (byte)36;
      byte byte2 = (byte)7;
      byteArray1[2] = (byte)7;
      byteArray1[3] = (byte)68;
      byte byte3 = (byte)65;
      byteArray1[4] = (byte)65;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertArrayEquals(new byte[] {(byte)6, (byte)36, (byte)7, (byte)68, (byte)65}, byteArray1);
      assertEquals(5, byteArray1.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertFalse(boolean2);
      
      try { 
        Utility.decode("2V1H:i+Bfa", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = Utility.accessToString(8192);
      assertNotNull(string0);
      assertEquals("annotation", string0);
      
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(22, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(22, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("astore_0", string1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte)1;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 236, (int) (byte)98);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte)102;
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-29), (byte)53, (byte) (-26), (byte) (-72), (byte) (-94), (byte)70, (byte)85, (byte)102}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(string0);
      assertEquals("$e35$e6$b8$a2FUf", string0);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-72);
      byteArray1[1] = (byte) (-72);
      byteArray1[2] = (byte) (-26);
      byteArray1[3] = (byte)70;
      byteArray1[4] = (byte)102;
      byteArray1[5] = (byte)102;
      byteArray1[6] = (byte)77;
      byteArray1[7] = (byte) (-94);
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-29), (byte)53, (byte) (-26), (byte) (-72), (byte) (-94), (byte)70, (byte)85, (byte)102}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-72), (byte) (-72), (byte) (-26), (byte)70, (byte)102, (byte)102, (byte)77, (byte) (-94)}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(boolean0);
      
      String string1 = Utility.format(69, 74, false, 'y');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy69", string1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = "[|ksIvjjJ3O#\\";
      byte byte0 = Utility.typeOfSignature("[|ksIvjjJ3O#");
      assertEquals((byte)13, byte0);
      
      String string1 = ")(M@4E_4uj3CHH";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("[|ksIvjjJ3O#", "[|ksIvjjJ3O#", ")(M@4E_4uj3CHH", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [|ksIvjjJ3O#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = "E";
      try { 
        Utility.typeOfSignature("E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "X:)GYZqImfV}\\&Gn61";
      try { 
        Utility.methodSignatureReturnType("X:)GYZqImfV}&Gn61");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GYZqImfV}&Gn61'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "K*gOF-`;HI9.4Pd\\";
      try { 
        Utility.typeOfSignature("K*gOF-`;HI9.4Pd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K*gOF-`;HI9.4Pd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = Utility.setBit((-428), (-428));
      assertEquals((-428), int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte)76;
      byteArray0[8] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)60, (byte) (-105), (byte)9, (byte) (-1), (byte) (-19), (byte)65, (byte)41, (byte)76, (byte)41}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertArrayEquals(new byte[] {(byte)60, (byte) (-105), (byte)9, (byte) (-1), (byte) (-19), (byte)65, (byte)41, (byte)76, (byte)41}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("istore_1", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = 76;
      int int1 = Utility.clearBit(76, 76);
      assertTrue(int1 == int0);
      assertEquals(76, int1);
      
      String string0 = "[H-.}R_b`U@`;";
      // Undeclared exception!
      try { 
        Utility.signatureToString("[H-.}R_b`U@`;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H-.}R_b`U@`;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)89, (byte)78, (byte)73, (byte)96, (byte)13}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[0];
      boolean boolean0 = byteSequence0.markSupported();
      assertArrayEquals(new byte[] {(byte)89, (byte)78, (byte)73, (byte)96, (byte)13}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteSequence0.getIndex());
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("java.lang.");
      assertNotNull(constantUtf8_0);
      assertEquals("java.lang.", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      String string0 = constantPool0.constantToString((Constant) constantUtf8_0);
      assertEquals(0, constantArray0.length);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals("java.lang.", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("java.lang.", string0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertArrayEquals(new byte[] {(byte)89, (byte)78, (byte)73, (byte)96, (byte)13}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("dup", string1);
      
      ConstantUtf8.printStats();
      String string2 = Utility.accessToString((int) (byte)73);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("public static volatile", string2);
      
      String string3 = Utility.compactClassName("java.lang.", true);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = Utility.printArray((Object[]) constantArray0);
      assertEquals(0, constantArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("{}", string4);
      
      String string5 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)89, (byte)78, (byte)73, (byte)96, (byte)13}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("YNI$60$N", string5);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      stringArray0[3] = "void";
      stringArray0[4] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)34;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)85, (byte)47, (byte) (-59), (byte)34}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
      
      String string0 = Utility.methodTypeToSignature("y:$Y;c4\"%BEu^", (String[]) null);
      assertNotNull(string0);
      assertEquals("()Ly:$Y;c4\"%BEu^;", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-59), (int) (byte)85, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    castore
         // 1:    laload
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)1;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("9x2aO(k*D37$1%l");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("9x2aO(k*D37$1%l", constantUtf8_0.getBytes());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte)3, 76, true);
      assertArrayEquals(new byte[] {(byte) (-82), (byte)91, (byte)4, (byte)119, (byte)3, (byte)1}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(string0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals("3:    dneg\n4:    iconst_0\n5:    aconst_null\n", string0);
      
      try { 
        MockURI.URI("9x2aO(k*D37$1%l", ".=$apG6HU-cXg`]", "invokestatic", (int) (byte) (-82), "invokestatic", ", npairs = ", ", npairs = ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 9x2aO(k*D37$1%l://.=$apG6HU-cXg%60%5D@invokestatic:-82invokestatic?,%20npairs%20=%20#,%20npairs%20=%20
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = Utility.getSignature("impdep1");
      assertNotNull(string0);
      assertEquals("Limpdep1;", string0);
      
      String string1 = Utility.printArray((Object[]) null, false, true);
      assertNull(string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte) (-36);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 89, (int) (byte)87, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = Utility.replace("<illegal opcode>", "putstatic", "m)#E@4:Si{C");
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "putstatic";
      objectArray0[1] = (Object) "putstatic";
      objectArray0[2] = (Object) "putstatic";
      objectArray0[3] = (Object) "<illegal opcode>";
      objectArray0[4] = (Object) "<illegal opcode>";
      String string1 = Utility.printArray(objectArray0);
      assertEquals(5, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("{putstatic, putstatic, putstatic, <illegal opcode>, <illegal opcode>}", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)66;
      byteArray0[8] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)66, (byte)79, (byte) (-19), (byte)79, (byte)126, (byte) (-11), (byte)108, (byte)66, (byte)112}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte)66, (byte)79, (byte) (-19), (byte)79, (byte)126, (byte) (-11), (byte)108, (byte)66, (byte)112}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("lstore_3", string2);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lreturn");
      assertFalse(boolean0);
      
      String string0 = Utility.printArray((Object[]) null, true);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)69;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)103, (byte)69}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)103, (byte)69}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[1];
      boolean boolean2 = byteSequence0.readBoolean();
      assertArrayEquals(new byte[] {(byte)103, (byte)69}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, byteSequence0.getIndex());
      assertTrue(boolean2);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(114, (byte)103);
      assertNotNull(constantMethodref0);
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(114, constantMethodref0.getClassIndex());
      assertEquals(103, constantMethodref0.getNameAndTypeIndex());
      
      constantMethodref0.setNameAndTypeIndex(3196);
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(114, constantMethodref0.getClassIndex());
      assertEquals(3196, constantMethodref0.getNameAndTypeIndex());
      
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte)103, (byte)69}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertNotNull(string1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertEquals("fstore_2", string1);
      
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)103, (byte)69}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = Utility.isJavaIdentifierPart('&');
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      byte[] byteArray1 = Utility.decode("wide", false);
      assertArrayEquals(new byte[] {(byte)119, (byte)105, (byte)100, (byte)101}, byteArray1);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = Utility.classOrInterface(1209);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      try { 
        Utility.methodSignatureArgumentTypes("(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Expected class `");
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("Illegally nested brackets:");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)112;
      byte byte0 = (byte)82;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-81);
      Constant[] constantArray0 = new Constant[1];
      String string0 = "-2]*WBDMG";
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("-2]*WBDMG");
      assertNotNull(constantUtf8_0);
      assertEquals("-2]*WBDMG", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)82, (int) (byte)82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      try { 
        Utility.typeOfSignature("?*0--N~yv:x4{}!1rTE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?*0--N~yv:x4{}!1rTE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals(5, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = Utility.accessToString(125, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("public protected static final volatile", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)91, (byte) (-55), (byte) (-95), (byte) (-64), (byte)68, (byte)1, (byte)36}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)91, (byte) (-55), (byte) (-95), (byte) (-64), (byte)68, (byte)1, (byte)36}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("if_icmple\t\t#23497", string2);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("R,(SHjI!r%\"Ua}mjb", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R,(SHjI!r%\"Ua}mjb'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = Utility.replace("arraylength", "arraylength", "double");
      assertNotNull(string0);
      assertEquals("double", string0);
      
      boolean boolean0 = true;
      String string1 = Utility.compactClassName("impdep1", "double", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("impdep1", string1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "double";
      objectArray0[1] = (Object) "impdep1";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "double";
      objectArray0[4] = (Object) "double";
      objectArray0[5] = (Object) "double";
      String string2 = Utility.printArray(objectArray0, true, true);
      assertEquals(6, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      try { 
        Utility.methodSignatureReturnType("UG?0g$D.Im2t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UG?0g$D.Im2t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object2));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object3));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals(7, objectArray0.length);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("EnclosingMethod");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EnclosingMethod'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-117), (byte)101, (byte)7, (byte)16, (byte)94}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-117), (byte)101, (byte)7, (byte)16, (byte)94}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(constantFloat0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-4.410911E-32F), constantFloat0.getBytes(), 0.01F);
      
      constantArray0[0] = (Constant) constantFloat0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)7, (byte)16);
      assertNotNull(constantMethodref0);
      assertEquals(7, constantMethodref0.getClassIndex());
      assertEquals(16, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte) (-117), (byte)101, (byte)7, (byte)16, (byte)94}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotNull(string0);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(2, constantPool0.getLength());
      assertEquals("dup2_x2", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int int0 = Utility.setBit(2673, 2673);
      assertEquals(133745, int0);
      
      String string0 = Utility.compactClassName("", "", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = Utility.signatureToString("JZ>!t");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("long", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)89;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)39, (byte) (-62), (byte) (-18), (byte)73, (byte)73, (byte)28, (byte)89}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertTrue(boolean0);
      
      String string2 = Utility.replace("monitorenter", ";", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("monitorenter", string2);
      
      String string3 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)39, (byte) (-62), (byte) (-18), (byte)73, (byte)73, (byte)28, (byte)89}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string3);
      
      boolean boolean1 = true;
      String string4 = Utility.format(2203, 8, true, '&');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("2203&&&&", string4);
      
      String string5 = Utility.fillup("efPaOi]OdsJyw+pTv", (byte)73, false, '&');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&efPaOi]OdsJyw+pTv", string5);
      
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-74);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-75), (byte)98, (byte) (-94), (byte) (-74), (byte) (-16), (byte)39}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-75), (byte)98, (byte) (-94), (byte) (-74), (byte) (-16), (byte)39}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(36533, constantInterfaceMethodref0.getClassIndex());
      assertEquals(25250, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-75), (byte)98, (byte) (-94), (byte) (-74), (byte) (-16), (byte)39}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertTrue(constantInterfaceMethodref1.equals((Object)constantInterfaceMethodref0));
      assertNotNull(constantInterfaceMethodref1);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(36533, constantInterfaceMethodref0.getClassIndex());
      assertEquals(25250, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(36533, constantInterfaceMethodref1.getClassIndex());
      assertEquals(25250, constantInterfaceMethodref1.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref1.getTag());
      
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 61479. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "access flags\t\t";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "\"";
      String string1 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals(9, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("(L;L;L;L;Laccess;L;L;L;L\";)L;", string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("impdep2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `impdep2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lreturn");
      assertFalse(boolean0);
      
      String string0 = Utility.printArray((Object[]) null, true);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)69;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)103, (byte)69}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)103, (byte)69}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(114, (byte)103);
      assertNotNull(constantMethodref0);
      assertEquals(103, constantMethodref0.getNameAndTypeIndex());
      assertEquals(114, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      assertTrue(constantMethodref1.equals((Object)constantMethodref0));
      assertNotNull(constantMethodref1);
      assertEquals(103, constantMethodref0.getNameAndTypeIndex());
      assertEquals(114, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(114, constantMethodref1.getClassIndex());
      assertEquals(103, constantMethodref1.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref1.getTag());
      
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte)103, (byte)69}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertNotNull(string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertEquals("dsub", string1);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)103, (byte)69}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = Utility.isJavaIdentifierPart('&');
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      byte[] byteArray1 = Utility.decode("wide", false);
      assertArrayEquals(new byte[] {(byte)119, (byte)105, (byte)100, (byte)101}, byteArray1);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "MD[!^j4";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("MD[!^j4", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MD[!^j4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = " arg";
      stringArray0[1] = " arg";
      stringArray0[2] = " arg";
      stringArray0[3] = " arg";
      stringArray0[4] = " arg";
      stringArray0[5] = " arg";
      stringArray0[6] = " arg";
      stringArray0[7] = " arg";
      stringArray0[8] = " arg";
      String string0 = Utility.methodTypeToSignature(" arg", stringArray0);
      assertEquals(9, stringArray0.length);
      assertNotNull(string0);
      assertEquals("(Larg;Larg;Larg;Larg;Larg;Larg;Larg;Larg;Larg;)Larg;", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#v^0StV8Qu! 'UL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #v^0StV8Qu! 'UL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.replace("Oh,{g6", "Oh,{g6", (String) null);
      assertNotNull(string0);
      assertEquals("null", string0);
      
      byte byte0 = Utility.typeOfSignature("The magic number must contain at least one byte");
      assertEquals((byte)14, byte0);
      
      String string1 = Utility.compactClassName("q 9Oz)wBxWe)E${{", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("q 9Oz)wBxWe)E${{", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte)14;
      String string2 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)67, (byte)14, (byte)14, (byte) (-1), (byte)14, (byte)14, (byte)14, (byte)14, (byte)14}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("43 0e 0e ff 0e 0e 0e 0e 0e", string2);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object3));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object2));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object5));
      assertNotNull(object7);
      
      objectArray0[7] = object7;
      Object object8 = new Object();
      assertFalse(object8.equals((Object)object4));
      assertFalse(object8.equals((Object)object0));
      assertFalse(object8.equals((Object)object6));
      assertFalse(object8.equals((Object)object7));
      assertFalse(object8.equals((Object)object5));
      assertFalse(object8.equals((Object)object3));
      assertFalse(object8.equals((Object)object1));
      assertFalse(object8.equals((Object)object2));
      assertNotNull(object8);
      
      objectArray0[8] = object8;
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals(9, objectArray0.length);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)86;
      byteArray0[0] = (byte)86;
      int int0 = 1368;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1368, (int) (byte)86, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = Utility.convertString("? extends ");
      assertNotNull(string0);
      assertEquals("? extends ", string0);
      
      int int0 = Utility.clearBit(40, (-883));
      assertEquals(40, int0);
      
      String string1 = Utility.compactClassName("? extends ");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("? extends ", string1);
      
      boolean boolean0 = false;
      String string2 = Utility.fillup("? extends ", (-883), false, 'q');
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("? extends ", string2);
      
      String string3 = Utility.accessToString(40, false);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("static synchronized", string3);
      
      String string4 = Utility.convertString("Ik'}{4GT+9\"E");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("Ik\\'}{4GT+9\\\"E", string4);
      
      int int1 = Utility.clearBit(40, 12);
      assertTrue(int1 == int0);
      assertEquals(40, int1);
      
      int int2 = Utility.setBit(12, 122);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(67108876, int2);
      
      int int3 = Utility.setBit((-883), 68);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-867), int3);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("mk?]}CxZ", "N|,s", "mk?]}CxZ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: mk?]}CxZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "O}%mT8c^vmgR^";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("O}%mT8c^vmgR^", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O}%mT8c^vmgR^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "x&Pha#6w");
      assertFalse(boolean0);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      String string0 = Utility.printArray(objectArray0);
      assertEquals(5, objectArray0.length);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte)115, (byte) (-86), (byte) (-19), (byte) (-63), (byte) (-59)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean1 = byteSequence0.markSupported();
      assertArrayEquals(new byte[] {(byte)54, (byte)115, (byte) (-86), (byte) (-19), (byte) (-63), (byte) (-59)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, byteSequence0.getIndex());
      assertTrue(boolean1);
      
      boolean boolean2 = true;
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertArrayEquals(new byte[] {(byte)54, (byte)115, (byte) (-86), (byte) (-19), (byte) (-63), (byte) (-59)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("istore\t\t%115", string1);
      
      try { 
        Utility.methodSignatureReturnType("{java.lang.Object@4d840bea, java.lang.Object@14913056, java.lang.Object@519f326f, java.lang.Object@7b5beb96, java.lang.Object@166d644c}", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{java.lang.Object@4d840bea, java.lang.Object@14913056, java.lang.Object@519f326f, java.lang.Object@7b5beb96, java.lang.Object@166d644c}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int int0 = Utility.clearBit(1, 1);
      assertEquals(1, int0);
      
      String string0 = Utility.classOrInterface(1);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      String string1 = ":";
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("wide", stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("()Lwide;", string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wide");
      assertFalse(boolean0);
      
      String string1 = Utility.compactClassName("Z~_>Mt3", "wide", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Z~_>Mt3", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)69, (byte)71, (byte) (-80), (byte) (-20), (byte) (-127)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      assertArrayEquals(new byte[] {(byte)69, (byte)71, (byte) (-80), (byte) (-20), (byte) (-127)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(constantMethodref0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(17735, constantMethodref0.getClassIndex());
      assertEquals(45292, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      assertArrayEquals(new byte[] {(byte)69, (byte)71, (byte) (-80), (byte) (-20), (byte) (-127)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(constantMethodref1.equals((Object)constantMethodref0));
      assertNotNull(constantMethodref1);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(17735, constantMethodref0.getClassIndex());
      assertEquals(45292, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(17735, constantMethodref1.getClassIndex());
      assertEquals(45292, constantMethodref1.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref1.getTag());
      
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertArrayEquals(new byte[] {(byte)69, (byte)71, (byte) (-80), (byte) (-20), (byte) (-127)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertEquals("lor", string2);
      
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = Utility.convertString("Illegally nested brackets:");
      assertNotNull(string0);
      assertEquals("Illegally nested brackets:", string0);
      
      String string1 = Utility.accessToString(2243);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("public private volatile transient strictfp", string1);
      
      String string2 = Utility.printArray((Object[]) null);
      assertNull(string2);
      
      short short0 = Utility.searchOpcode("Illegally nested brackets:");
      assertEquals((short) (-1), short0);
      
      String string3 = Utility.accessToString((int) (short) (-1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string3);
      
      short short1 = Utility.searchOpcode("double");
      assertTrue(short1 == short0);
      assertEquals((short) (-1), short1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-76), (byte)42}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      String string0 = Utility.printArray(objectArray0);
      assertEquals(5, objectArray0.length);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{java.lang.Object@572220c3, java.lang.Object@16ee29ff, java.lang.Object@5d4619cc, java.lang.Object@3e591dc3, java.lang.Object@783b06f3}";
      stringArray0[1] = "{java.lang.Object@572220c3, java.lang.Object@16ee29ff, java.lang.Object@5d4619cc, java.lang.Object@3e591dc3, java.lang.Object@783b06f3}";
      stringArray0[2] = "{java.lang.Object@572220c3, java.lang.Object@16ee29ff, java.lang.Object@5d4619cc, java.lang.Object@3e591dc3, java.lang.Object@783b06f3}";
      stringArray0[3] = "Lreturn;V";
      stringArray0[4] = "Lreturn;V";
      stringArray0[5] = "Lreturn;V";
      stringArray0[6] = "saload";
      stringArray0[7] = "{java.lang.Object@572220c3, java.lang.Object@16ee29ff, java.lang.Object@5d4619cc, java.lang.Object@3e591dc3, java.lang.Object@783b06f3}";
      stringArray0[8] = "Lreturn;V";
      String string1 = Utility.methodTypeToSignature("Lreturn;V", stringArray0);
      assertEquals(9, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.methodTypeToSignature("?>...", stringArray0);
      assertEquals(9, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('V');
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("(L{java/lang/Object@572220c3,;L{java/lang/Object@572220c3,;L{java/lang/Object@572220c3,;LLreturn;V;LLreturn;V;LLreturn;V;Lsaload;L{java/lang/Object@572220c3,;LLreturn;V;)LLreturn;V;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (L{java/lang/Object@572220c3,;L{java/lang/Object@572220c3,;L{java/lang/Object@572220c3,;LLreturn;V;LLreturn;V;LLreturn;V;Lsaload;L{java/lang/Object@572220c3,;LLreturn;V;)LLreturn;V;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">B_1%");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-53);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)79, (byte) (-34), (byte)76, (byte) (-98), (byte)59, (byte)32, (byte) (-53)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte)79, (byte) (-34), (byte)76, (byte) (-98), (byte)59, (byte)32, (byte) (-53)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("iastore", string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "-AsbfIx<Jg+Ny";
      try { 
        Utility.typeOfSignature("-AsbfIx<Jg+Ny");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -AsbfIx<Jg+Ny
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.accessToString(2637, false);
      assertNotNull(string0);
      assertEquals("public protected static volatile interface strictfp", string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "public protected static volatile interface strictfp";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "public protected static volatile interface strictfp";
      objectArray0[3] = (Object) "public protected static volatile interface strictfp";
      objectArray0[4] = (Object) "public protected static volatile interface strictfp";
      objectArray0[5] = (Object) "public protected static volatile interface strictfp";
      String string1 = Utility.printArray(objectArray0, false, true);
      assertEquals(6, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.classOrInterface(2637);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("interface", string2);
      
      String string3 = Utility.compactClassName("UZ9", true);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("UZ9", string3);
      
      String string4 = Utility.fillup("invokespecial", 2397, false, '<');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte) (-12);
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)101;
      byteArray1[1] = (byte) (-12);
      byteArray1[2] = (byte)76;
      boolean boolean1 = Utility.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)101, (byte) (-12), (byte)76}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-84), (byte)24, (byte) (-48), (byte)101, (byte) (-84), (byte)1, (byte) (-75), (byte) (-12)}, byteArray0);
      assertEquals(3, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = "&<o :T5Ck}jOjIwYr {";
      try { 
        Utility.typeOfSignature("&<o :T5Ck}jOjIwYr {");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &<o :T5Ck}jOjIwYr {
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JavaClass.debug");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short short0 = Utility.searchOpcode("if_acmpne");
      assertEquals((short)166, short0);
      
      try { 
        Utility.methodSignatureReturnType("\t\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = "2}.OBvf,n";
      try { 
        Utility.typeOfSignature("2}.OBvf,n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2}.OBvf,n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = Utility.format(240, 240, false, 'd');
      assertNotNull(string0);
      assertEquals("ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd240", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte)125;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)63, (byte) (-87), (byte)30, (byte)101, (byte) (-110), (byte) (-71), (byte)125}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1083531554), 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lstore_0
         // 1:    ret\t\t%30
         // 3:    lsub
         // 4:    i2c
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = Utility.format(793, 2, true, 'B');
      assertNotNull(string0);
      assertEquals("793", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte) (-50), (byte)72, (byte)89, (byte)91, (byte) (-1), (byte)25}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[5];
      ConstantLong constantLong0 = new ConstantLong(0L);
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(0L, constantLong0.getBytes());
      
      constantArray0[0] = (Constant) constantLong0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertArrayEquals(new byte[] {(byte)54, (byte) (-50), (byte)72, (byte)89, (byte)91, (byte) (-1), (byte)25}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(constantMethodType0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(14030, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      assertNotNull(constantDouble0);
      assertEquals(0.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      assertNotNull(constantDouble1);
      assertEquals(0.0, constantDouble1.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertEquals(0.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      constantArray0[2] = (Constant) constantDouble1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-50), 154);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals((-50), constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(154, constantInterfaceMethodref0.getNameAndTypeIndex());
      
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)25);
      assertNotNull(constantInteger0);
      assertEquals(25, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      
      constantArray0[4] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(5, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte)54, (byte) (-50), (byte)72, (byte)89, (byte)91, (byte) (-1), (byte)25}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(5, constantArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(5, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("dstore_1", string1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte) (-3);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)127, 90, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("*plxp9s-g6i}y?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: plxp9s-g6i}y?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Y \u0007&D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y \u0007&D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("\tdefault = ", false);
      assertEquals(11, byteArray0.length);
      assertNotNull(byteArray0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\tdefault = ");
      assertFalse(boolean0);
      
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals(0, objectArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertEquals(11, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      String string2 = "(";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", "2", "(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = Utility.convertString("988<");
      assertNotNull(string0);
      assertEquals("988<", string0);
      
      // Undeclared exception!
      try { 
        Utility.replace("lload_0", (String) null, "lload_0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte)1;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 236, (int) (byte)98);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_icmple");
      assertFalse(boolean0);
      
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-41);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      
      String string0 = constantPool0.toString();
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotSame(constantPool0, constantPool1);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals("", string0);
      
      String string1 = Utility.codeToString(byteArray0, constantPool1, (-2455), 97);
      assertArrayEquals(new byte[] {(byte)70, (byte)104, (byte) (-6), (byte) (-41)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(string1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals("0:    fstore_3\n1:    imul\n2:    <illegal opcode>\n3:    <illegal opcode>\n", string1);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = Utility.accessToString(97, false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("public synchronized volatile", string2);
      
      String string3 = Utility.replace("if_icmple", "public synchronized volatile", "if_icmplt");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("if_icmple", string3);
      
      int int0 = Utility.clearBit(97, 189);
      assertEquals(97, int0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("if_icmpgt", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `if_icmpgt'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[!D1,%/3JESTIW.m ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [!D1,%/3JESTIW.m 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = ";ZRUkBl$wM|LA";
      byte[] byteArray0 = Utility.decode(";ZRUkBl$wM|LA", false);
      assertEquals(12, byteArray0.length);
      assertNotNull(byteArray0);
      
      int int0 = (-3885);
      boolean boolean0 = Utility.isSet((-3885), (-3885));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString(";ZRUkBl$wM|LA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;ZRUkBl$wM|LA'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = Utility.convertString("5\"+PTi38@ee9");
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-6), (byte)78, (byte)41}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-57));
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-57), constantInteger0.getBytes());
      
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      
      String string1 = constantPool1.toString();
      assertEquals(1, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(string1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals("", string1);
      
      String string2 = "lujB";
      MockFile mockFile0 = new MockFile((File) null, "lujB");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "if_icmple");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // if_icmple
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals(3, objectArray0.length);
      assertNotNull(string0);
      
      try { 
        Utility.methodSignatureReturnType("Kg?W/j@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Kg?W/j@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "SyntheticRepository could not load ";
      String string1 = Utility.signatureToString("SyntheticRepository could not load ", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("short", string1);
      
      boolean boolean0 = false;
      String string2 = Utility.signatureToString("SyntheticRepository could not load ", false);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("short", string2);
      
      int int0 = (-667);
      String string3 = Utility.accessToString((-667), false);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("public protected synchronized volatile native abstract strictfp synthetic annotation enum", string3);
      
      String string4 = "F";
      String[] stringArray0 = null;
      String string5 = Utility.methodTypeToSignature("F", (String[]) null);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("()LF;", string5);
      
      String string6 = Utility.getSignature("short");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("S", string6);
      
      String string7 = "ifnull";
      Method method0 = new Method();
      assertNotNull(method0);
      assertFalse(method0.isPrivate());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isEnum());
      assertFalse(method0.isProtected());
      assertEquals(0, method0.getSignatureIndex());
      assertFalse(method0.isNative());
      assertFalse(method0.isTransient());
      assertFalse(method0.isFinal());
      assertFalse(method0.isInterface());
      assertFalse(method0.isVolatile());
      assertEquals(0, method0.getModifiers());
      assertEquals(0, method0.getNameIndex());
      assertFalse(method0.isPublic());
      assertFalse(method0.isSynchronized());
      assertEquals(0, method0.getAccessFlags());
      assertFalse(method0.isAnnotation());
      assertFalse(method0.isAbstract());
      assertFalse(method0.isStatic());
      assertFalse(method0.isStrictfp());
      assertFalse(method0.isVarArgs());
      
      // Undeclared exception!
      try { 
        method0.getLocalVariableTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.fillup("N*5s{(YD3#3d/", 248, false, '!');
      assertNotNull(string0);
      assertEquals("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!N*5s{(YD3#3d/", string0);
      
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!N*5s{(YD3#3d/";
      objectArray0[2] = (Object) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!N*5s{(YD3#3d/";
      objectArray0[3] = (Object) "N*5s{(YD3#3d/";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!N*5s{(YD3#3d/";
      objectArray0[6] = (Object) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!N*5s{(YD3#3d/";
      String string1 = Utility.printArray(objectArray0, false, true);
      assertEquals(7, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = Utility.setBit(248, 248);
      assertEquals(16777464, int0);
      
      String[] stringArray0 = new String[0];
      String string2 = Utility.methodTypeToSignature("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!N*5s{(YD3#3d/", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("()L!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!N*5s{(YD3#3d/;", string2);
      
      String string3 = Utility.accessToString(16777464, false);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("static final synchronized volatile transient", string3);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("static final synchronized volatile transient", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `static final synchronized volatile transient'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = Utility.compactClassName("instanceof");
      assertNotNull(string0);
      assertEquals("instanceof", string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("QfP$dE_+T", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QfP$dE_+T'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      short short0 = Utility.searchOpcode("T),y{2eU0,~$");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.accessToString((int) (short) (-1), true);
      assertNotNull(string0);
      assertEquals("public private protected static final volatile transient native abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_icmple");
      assertFalse(boolean0);
      
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-41);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      
      String string0 = constantPool0.toString();
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotSame(constantPool0, constantPool1);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals("", string0);
      
      String string1 = Utility.codeToString(byteArray0, constantPool1, (-2466), 97);
      assertArrayEquals(new byte[] {(byte)70, (byte)88, (byte) (-104), (byte) (-41)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(string1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals("0:    fstore_3\n1:    pop2\n2:    dcmpg\n3:    <illegal opcode>\n", string1);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = Utility.accessToString(97, false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("public synchronized volatile", string2);
      
      String string3 = Utility.replace("if_icmple", "public synchronized volatile", "if_icmplt");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("if_icmple", string3);
      
      int int0 = Utility.clearBit(97, 189);
      assertEquals(97, int0);
      
      String string4 = Utility.getSignature("if_icmple");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("Lif_icmple;", string4);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = "II@jRgTy[Se&N";
      String string1 = Utility.methodSignatureReturnType("II@jRgTy[Se&N");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("int", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-104);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte)45;
      String string2 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-104), (byte)96, (byte)36, (byte) (-20), (byte) (-6), (byte)45}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("99 98 60 24 ec fa 2d", string2);
      
      boolean boolean1 = false;
      try { 
        Utility.methodSignatureArgumentTypes("II@jRgTy[Se&N", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: II@jRgTy[Se&N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = "putstatic";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "putstatic", "putstatic");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = Utility.convertString("%ZRc&==KB");
      assertNotNull(string0);
      assertEquals("%ZRc&==KB", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "%ZRc&==KB";
      String string1 = Utility.printArray(objectArray0);
      assertEquals(1, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("{%ZRc&==KB}", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)79;
      String string2 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-15), (byte)77, (byte)60, (byte)100, (byte)8, (byte)8, (byte)79}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("f1 4d 3c 64 08 08 4f", string2);
      
      boolean boolean0 = false;
      String string3 = Utility.printArray(objectArray0, false, false);
      assertEquals(1, objectArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("%ZRc&==KB", string3);
      
      String string4 = "f#5%;BbM(--;<;pP!$9";
      String string5 = "Invalid method signature: ";
      String string6 = " extends ";
      int int0 = (-528);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-15), (byte)77, (byte)60, (byte)100, (byte)8, (byte)8, (byte)79}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[5];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-15), (byte)77, (byte)60, (byte)100, (byte)8, (byte)8, (byte)79}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(constantFieldref0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(15460, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(61773, constantFieldref0.getClassIndex());
      
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantFieldref constantFieldref1 = new ConstantFieldref((byte)8, 122);
      assertFalse(constantFieldref1.equals((Object)constantFieldref0));
      assertNotNull(constantFieldref1);
      assertEquals((byte)9, constantFieldref1.getTag());
      assertEquals(8, constantFieldref1.getClassIndex());
      assertEquals(122, constantFieldref1.getNameAndTypeIndex());
      
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 79
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      String string0 = Utility.printArray(objectArray0);
      assertEquals(5, objectArray0.length);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{java.lang.Object@bf255ce, java.lang.Object@5558306a, java.lang.Object@70d30de7, java.lang.Object@49ecf00e, java.lang.Object@502990d8}";
      stringArray0[1] = "{java.lang.Object@bf255ce, java.lang.Object@5558306a, java.lang.Object@70d30de7, java.lang.Object@49ecf00e, java.lang.Object@502990d8}";
      stringArray0[2] = "{java.lang.Object@bf255ce, java.lang.Object@5558306a, java.lang.Object@70d30de7, java.lang.Object@49ecf00e, java.lang.Object@502990d8}";
      stringArray0[3] = "Lreturn;V";
      stringArray0[4] = "Lreturn;V";
      stringArray0[5] = "Lreturn;V";
      stringArray0[6] = "saload";
      stringArray0[7] = "{java.lang.Object@bf255ce, java.lang.Object@5558306a, java.lang.Object@70d30de7, java.lang.Object@49ecf00e, java.lang.Object@502990d8}";
      stringArray0[8] = "Lreturn;V";
      String string1 = Utility.methodTypeToSignature("Lreturn;V", stringArray0);
      assertEquals(9, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.methodTypeToSignature("?>...", stringArray0);
      assertEquals(9, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('V');
      assertTrue(boolean0);
      
      byte byte0 = Utility.typeOfMethodSignature("(L{java/lang/Object@bf255ce,;L{java/lang/Object@bf255ce,;L{java/lang/Object@bf255ce,;LLreturn;V;LLreturn;V;LLreturn;V;Lsaload;L{java/lang/Object@bf255ce,;LLreturn;V;)LLreturn;V;");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = Utility.compactClassName("%g$e7Iv%");
      assertNotNull(string0);
      assertEquals("%g$e7Iv%", string0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "%g$e7Iv%";
      String string1 = Utility.printArray(objectArray0);
      assertEquals(2, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "jCazzpHl>";
      stringArray0[1] = "%g$e7Iv%";
      stringArray0[2] = "return";
      stringArray0[3] = "%g$e7Iv%";
      stringArray0[4] = "{java.lang.Object@6baa4586, %g$e7Iv%}";
      stringArray0[5] = "%g$e7Iv%";
      String string2 = Utility.methodTypeToSignature("return", stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      int int0 = Utility.setBit(48, 238);
      assertEquals(16432, int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " skipped");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.methodSignatureReturnType("VOoHs:", false);
      assertNotNull(string0);
      assertEquals("void", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte)77;
      byteArray0[8] = (byte) (-94);
      String string1 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte) (-108), (byte)65, (byte)125, (byte)57, (byte) (-68), (byte) (-108), (byte) (-74), (byte)77, (byte) (-94)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, true);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "m+L,z57b#D[:|iul(,");
      Utility.fillup("StackMap", 546, true, 'V');
      boolean boolean0 = Utility.isJavaIdentifierPart(']');
      assertFalse(boolean0);
      
      String string0 = Utility.fillup("_)", 546, false, 'D');
      assertEqualsstring0);
      
      Utility.signatureToString("StackMapfalse);
      Utility.methodSignatureReturnType("StackMapVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV", false);
      int int0 = Utility.clearBit(0, 546);
      assertEquals(0, int0);
      
      String string1 = Utility.convertString("org.apache.bcel.classfile.Unknown");
      assertEquals("org.apache.bcel.classfile.Unknown", string1);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Utility.replace("no`~", "no`~", "no`~");
      Utility.format((-2804), (-2804), false, '~');
      String string0 = Utility.accessToString((-2804));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)89;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string1 = Utility.compactClassName("protected static native abstract synthetic annotation enum");
      assertTrue(string1.equals((Object)string0));
      
      Utility.signatureToString("DW_`YE#,[2?7L5");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-50);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string2 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-50), 122);
      assertEquals("0:    <illegal opcode>\n", string2);
      
      int int0 = Utility.clearBit((byte) (-50), 2566);
      assertEquals((-114), int0);
      
      byte[] byteArray2 = Utility.decode("\n     Method Arguments:", false);
      assertEquals(23, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = Utility.accessToString(60, true);
      assertEquals("protected static final", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.getSignature("org.apache.bcel.classfile.StackMapEntry");
      Utility.getSignature("Lorg/apache/bcel/classfile/StackMapEntry;");
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("multianewarray", stringArray0);
      Utility.methodSignatureReturnType("()Lmultianewarray;");
      Utility.accessToString(166, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("()Lmultianewarray;");
      Locale locale0 = Locale.CANADA_FRENCH;
      mockPrintStream0.format(locale0, "B(nl_LxMcfdG*\"QQ.", (Object[]) stringArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      PrintStream printStream0 = mockPrintStream1.append('d');
      Utility.printArray(printStream0, (Object[]) stringArray0);
      Utility.format(90, 325, true, 'd');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)93;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = Utility.accessToString(426);
      assertEquals("private static synchronized transient native", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("pop2", string1);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Z`?7V-6.:", true);
      assertEquals("boolean", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-41);
      byteArray0[6] = (byte)77;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Utility.compactClassName("impdep1", false);
      Utility.replace("\t\t<", "impdep1", "@&2]~jeD\"2gtZeV");
      Utility.isJavaIdentifierPart('D');
      Utility.isJavaIdentifierPart('\"');
      Utility.replace("\"", "\"", " arg");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-27);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("impdep1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `impdep1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Utility.format(240, 240, false, 'd');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte)125;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1083531554), 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lstore_0
         // 1:    aaload
         // 2:    lload_0
         // 3:    lsub
         // 4:    i2c
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      short short0 = Utility.searchOpcode(" (");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      int int0 = Utility.clearBit(1289, 65);
      assertEquals(1289, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("aaload", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("void");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = Utility.getSignature("doubleclass");
      assertEquals("Ldoubleclass;", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)56;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$f6$ce$f6Vy8", string1);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = " ";
      Utility.compactClassName(" ", " ", true);
      String string1 = "!1.%y0MU`![X}bqPr";
      // Undeclared exception!
      try { 
        Utility.getSignature("!1.%y0MU`![X}bqPr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[X}bqPr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "m+L,z57b#D[:|iul(,";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "m+L,z57b#D[:|iul(,");
      int int0 = 546;
      Utility.fillup("StackMap", 546, true, 'V');
      Utility.isJavaIdentifierPart(']');
      Utility.fillup("_)", 546, false, 'N');
      try { 
        Utility.methodSignatureReturnType("m+L,z57b#D[:|iul(,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `m+L,z57b#D[:|iul(,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = Utility.classOrInterface(193);
      assertEquals("class", string0);
      
      byte byte0 = Utility.typeOfSignature("C[ObE");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      int int0 = 91;
      boolean boolean0 = true;
      Utility.accessToString(91, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("&qN8vpT", "&qN8vpT", "N]Ae^{%}4TEiJP3p8W?", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &qN8vpT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("YZn6a8kIo&", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YZn6a8kIo&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "class_index";
      stringArray0[1] = "long";
      stringArray0[2] = "long";
      String string0 = Utility.methodTypeToSignature("long", stringArray0);
      assertEquals("(Lclass_index;JJ)J", string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "long";
      objectArray0[1] = (Object) "long";
      objectArray0[2] = (Object) "long";
      objectArray0[3] = (Object) "long";
      objectArray0[4] = (Object) "(Lclass_index;JJ)J";
      objectArray0[5] = (Object) "long";
      objectArray0[6] = (Object) "long";
      String string1 = Utility.printArray(objectArray0, false);
      assertNotNull(string1);
      assertEquals("long, long, long, long, (Lclass_index;JJ)J, long, long", string1);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      try { 
        Utility.typeOfSignature("UyU}l2<@RPO,@et%j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UyU}l2<@RPO,@et%j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Utility.classOrInterface(2584);
      String string0 = "XYYk]8rzYf'+> \",\"";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)84;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("interface", "ZLko[gL#4Iu2", "XYYk]8rzYf'+> \",\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = "),xZ`";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "),xZ`");
      int int0 = 143;
      Utility.isSet((-1819), 143);
      String string1 = "lY";
      try { 
        Utility.methodSignatureArgumentTypes("lY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\t\t<", (String) null, "\t\t<", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = "public";
      try { 
        Utility.typeOfSignature("public");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('7');
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("double", "double");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter1;
      mockPrintWriter0.append((CharSequence) "class");
      objectArray0[5] = (Object) mockPrintWriter1;
      objectArray0[6] = (Object) "class";
      objectArray0[7] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "class", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      String string0 = Utility.convertString("double");
      assertEquals("double", string0);
      
      String string1 = Utility.compactClassName("class", "double", true);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Utility.methodSignatureReturnType("CONSTANT_NameAndType", false);
      Utility.setBit(178, 178);
      Utility.convertString("\t");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)122;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-109), 1695);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    i2s
         // 1:    iconst_3
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = Utility.compactClassName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Utility.getSignature("");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte)115;
      Utility.equals(byteArray0, byteArray0);
      Utility.typeOfSignature("L;");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2565), (byte)115);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[2] = (Constant) constantNameAndType2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("<illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Utility.setBit(1160, 1439);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Utility.isJavaIdentifierPart('l');
      int int0 = 200;
      Utility.fillup("anewarray", 200, true, '.');
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Utility.accessToString(48);
      Utility.setBit(253, 48);
      Utility.format(253, 0, true, ',');
      Utility.setBit(65789, 0);
      Utility.format(16384, 0, true, 'r');
      Utility.clearBit(1137, 253);
      String string0 = "";
      // Undeclared exception!
      Utility.replace("final synchronized", "", "16384");
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-57);
      byteArray0[0] = (byte) (-57);
      byte byte1 = (byte)20;
      byteArray0[1] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        byteSequence0.readUTF();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = "nX?[_G_XB([i";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("nX?[_G_XB([i");
      try { 
        Utility.methodSignatureReturnType("nX?[_G_XB([i", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `nX?[_G_XB([i'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)122;
      byteArray0[7] = (byte) (-68);
      byteArray0[8] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore_3", string0);
      
      int int0 = Utility.clearBit((byte)6, (byte)76);
      assertEquals(6, int0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      boolean boolean0 = Utility.isSet(85, 5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Utility.replace("4n\"b];m*Jc[(1", "\"", "\"");
      Utility.classOrInterface(46);
      try { 
        Utility.decode("4n\"b];m*Jc[(1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "D");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.accessToString((-220));
      Utility.accessToString((-2305), false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `char'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)40;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1534), (-161), false);
      Utility.isJavaIdentifierPart('~');
      Utility.compactClassName("0:    dup2_x1\n1:    dload_2\n", "0:    dup2_x1\n1:    dload_2\n", false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.accessToString(39);
      Utility.clearBit((-161), (byte)93);
      Utility.compactClassName("0:    dup2_x1\n1:    dload_2\n", "0:    dup2_x1\n1:    dload_2\n", false);
      Utility.classOrInterface(71);
      Utility.decode("castore", false);
      try { 
        Utility.typeOfSignature("0:    dup2_x1\n1:    dload_2\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    dup2_x1
         // 1:    dload_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("ret", true);
      Utility.isJavaIdentifierPart('B');
      String string0 = "W8{FPMi_AxM:2Lwem:";
      try { 
        Utility.methodSignatureReturnType("W8{FPMi_AxM:2Lwem:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W8{FPMi_AxM:2Lwem:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Utility.compactClassName("OjN_N/kHAIz", "OjN_N/kHAIz", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)92;
      Utility.toHexString(byteArray0);
      Utility.isJavaIdentifierPart('r');
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte)79;
      objectArray0[2] = (Object) (byte)5;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "OjN_N/kHAIz";
      objectArray0[5] = (Object) "OjN_N/kHAIz";
      objectArray0[6] = (Object) (byte)79;
      objectArray0[7] = (Object) (byte)5;
      Utility.printArray(objectArray0);
      try { 
        Utility.methodSignatureReturnType(".+m8$h~;b`xYt1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `.+m8$h~;b`xYt1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Utility.isJavaIdentifierPart('(');
      Utility.convertString("l4I^");
      Utility.getSignature("l4I^");
      Utility.accessToString(91, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte) (-94);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l4I^");
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)127;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-11), 90);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.replace("l4I^", (String) null, "iadd");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
