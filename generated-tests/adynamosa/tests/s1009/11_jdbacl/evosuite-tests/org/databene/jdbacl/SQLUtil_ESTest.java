/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 12:32:23 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Vector;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import javax.management.remote.JMXPrincipal;
import javax.sql.ConnectionPoolDataSource;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.DataDictionary;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.io.vfmem.DataStore;
import org.apache.derby.impl.io.vfmem.VirtualFile;
import org.apache.derby.impl.services.monitor.FileMonitor;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.InsertNode;
import org.apache.derby.impl.sql.compile.Predicate;
import org.databene.commons.version.VersionNumber;
import org.databene.commons.version.VersionNumberComponent;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBIndex;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.expression.Parameter;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.jdbcx.JdbcDataSource;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.wordChars(1291, 0);
      streamTokenizer0.nval = (-1726.23795340107);
      SQLUtil.renderNumber(streamTokenizer0);
      pipedReader0.markSupported();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.eolIsSignificant(false);
      SQLUtil.renderNumber(streamTokenizer0);
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("$m\"_==\"O7r|", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Boolean boolean0 = SQLUtil.mutatesStructure("AmK~=4PD\"1m|58dP");
      SQLUtil.isProcedureCall("rename");
      System.setCurrentTimeMillis(5L);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rename");
      DBDataType dBDataType0 = DBDataType.getInstance((-207471018), "AmK~=4PD\"1m|58dP");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("rename", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setVersionColumn(false);
      Integer.max(8, (-2332));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "rename";
      stringArray0[1] = "alter tablf";
      stringArray0[2] = "AmK~=4PD\"1m|58dP";
      stringArray0[3] = "AmK~=4PD\"1m|58dP";
      stringArray0[4] = "rename";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter tablf", false, stringArray0);
      defaultDBColumn0.addUkConstraint(dBPrimaryKeyConstraint0);
      Integer.max((-207471018), 4);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      SQLUtil.isQuery("rename");
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("rename", "renameamk~=4pd\"1m|58dp");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) boolean0;
      objectArray0[1] = (Object) "renameamk~=4pd\"1m|58dp";
      objectArray0[2] = (Object) "alter tablf";
      objectArray0[3] = (Object) "rename";
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) "AmK~=4PD\"1m|58dP";
      Object object0 = new Object();
      objectArray0[6] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("E($cl'GK", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLUtil.isQuery("jelect.v0rhann2+g-&");
      SQLUtil.normalize("jelect.v0rhann2+g-&", false);
      SQLUtil.isProcedureCall("jelect.v0rhann2 + g - &");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jelect.v0rhann2 + g - &");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("jelect.v0rhann2+g-&");
      byte[] byteArray0 = new byte[20];
      byteArray0[2] = (byte)59;
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("wzb0^");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[14];
      stringArray0[1] = "SELECT * FROM ";
      Predicate predicate0 = new Predicate();
      Boolean.valueOf(" */)");
      LinkedList<DBIndex> linkedList0 = new LinkedList<DBIndex>();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      Predicate predicate1 = new Predicate();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop table", false, stringArray0);
      SQLUtil.mutatesStructure("SELECT * FROM ");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("org.h2.comman", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("SELECT * FROM ", stringBuilder0);
      assertEquals("SELECT * FROM ", stringBuilder0.toString());
      
      DBUniqueConstraint dBUniqueConstraint0 = defaultDBTable0.getUniqueConstraint(stringArray0);
      Object object0 = new Object();
      SQLUtil.mutatesStructure(" AND ");
      SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, (NameSpec) null);
      Boolean boolean0 = Boolean.TRUE;
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      SQLUtil.renderColumnListWithTableName("null = null AND SELECT * FROM  = 'SELECT * FROM ' AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0);
      String string0 = SQLUtil.normalize("yD8knqDVbZG93", true);
      assertEquals("yD8knqDVbZG93", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("alter tableselecg", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      pipedReader0.close();
      streamTokenizer0.parseNumbers();
      Boolean boolean0 = new Boolean(true);
      SQLUtil.isProcedureCall("op: ");
      SQLUtil.removeComments("op: ");
      SQLUtil.isQuery("op: ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Predicate predicate0 = new Predicate();
      String[] stringArray0 = new String[4];
      stringArray0[3] = null;
      SQLUtil.mutatesDataOrStructure("op: ");
      LinkedList<DBIndex> linkedList0 = new LinkedList<DBIndex>();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      Predicate predicate1 = new Predicate();
      DBSchema dBSchema0 = new DBSchema((String) null);
      defaultDBTable1.setSchema(dBSchema0);
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, (String) null, true, stringArray0);
      SQLUtil.renderQuery(defaultDBTable2, stringArray0, stringArray0);
      defaultDBTable2.getPrimaryKeyConstraint();
      SQLUtil.renderValue(predicate1);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(" join ", 57);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, true);
      int int0 = 42;
      dynamicByteArrayOutputStream0.write(42);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      System.setCurrentTimeMillis(0);
      String string0 = "create materialized viewm^/:[]l\\b8y";
      SQLUtil.mutatesDataOrStructure("create materialized viewm^/:[]l\b8y");
      SQLUtil.parseColumnTypeAndSize("create materialized viewm^/:[]l\b8y");
      SQLUtil.mutatesStructure("create materialized viewm^/:[]l\b8y");
      SQLUtil.parseColumnTypeAndSize("x3%|c?r^z6@5>XWY?");
      String string1 = "create unique index";
      StringBuilder stringBuilder0 = new StringBuilder("create unique index");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.append((CharSequence) "create materialized viewm^/:[]l\b8y", 1, 391);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 1, end 391, s.length() 35
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "N";
      stringArray0[1] = "N";
      stringArray0[2] = "N";
      SQLUtil.normalize("^D8Xd6*L}{Vhfh'", false);
      SQLUtil.isQuery("select into");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Predicate predicate0 = new Predicate();
      SQLUtil.normalize("Z!/7b;jgLJ{@w", true);
      SQLUtil.removeComments("N");
      DBDataType dBDataType0 = DBDataType.getInstance(2, "N");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("~y?Mz^RIdM/j", defaultDBTable0, dBDataType0, integer0, (Integer) null);
      SQLUtil.mutatesDataOrStructure(" join");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DBCatalog dBCatalog0 = new DBCatalog("N");
      DBSchema dBSchema0 = new DBSchema("SELECT * FROM ", dBCatalog0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("WnU]{?7<7*I|zgAP", dBSchema0);
      List<DBColumn> list0 = defaultDBTable1.getColumns();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      SQLUtil.mutatesDataOrStructure("seectgp1");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("seectgp1");
      DBSequence dBSequence0 = new DBSequence("seectgp1", "seectgp1", "seectgp1");
      dBSequence0.setName("create table");
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("create table", dBCatalog0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable1.setDoc("/&,Y");
      SQLUtil.removeComments("0#p");
      TableContainer tableContainer0 = new TableContainer((String) null);
      String[] stringArray0 = new String[9];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "org.postgresql.ds.common.BaseDataSource", true, stringArray0);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.renderValue((Object) null);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "N";
      stringArray0[1] = "N";
      stringArray0[2] = "N";
      stringArray0[3] = "drop table";
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(compositeDBObject0).getName();
      doReturn((String) null).when(compositeDBObject0).getObjectType();
      TableContainer tableContainer0 = new TableContainer("drop table");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("N");
      Integer integer1 = RawTransaction.COMMIT;
      SQLUtil.normalize("8RIMAs\" KEY ", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DBDataType dBDataType0 = DBDataType.getInstance(43, "XK>F 7t");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("8RIMAs\" KEY ", defaultDBTable0, dBDataType0, integer1);
      linkedList0.add((DBColumn) defaultDBColumn0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8RIMAs \" KEY \"");
      linkedList0.parallelStream();
      SQLUtil.typeAndName(compositeDBObject0);
      TableContainer tableContainer1 = new TableContainer("null null");
      Predicate predicate0 = new Predicate();
      // Undeclared exception!
      try { 
        predicate0.getNodeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.QueryTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      DBSequence dBSequence0 = new DBSequence("jXA:Z#32H&", "ISO_DAY_OF_WEEK", "ISO_DAY_OF_WEEK");
      DBCatalog dBCatalog0 = new DBCatalog();
      dBSequence0.isIdentical(dBCatalog0);
      dBSequence0.setName("^LzOmGW@Ef8&G");
      SQLUtil.isQuery("jXA:Z#32H&");
      String[] stringArray0 = new String[2];
      SQLUtil.innerJoin("/*", stringArray0, "H_%F{#6sg=@h4c//h}", "", stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SQLUtil.removeComments("create unique index");
      SQLUtil.normalize("/*", false);
      SQLUtil.mutatesDataOrStructure("q'");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/*");
      SQLUtil.normalize("H_%F{#6sg=@h4c//h}", false);
      NameSpec nameSpec0 = NameSpec.NEVER;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "jXA:Z#32H&", false, stringArray0);
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "H_%F{#6sg=@h4c//h} as  on /*.null = .null and /*.null = .null";
      objectArray0[2] = (Object) "UNIQUE (, )";
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      DBDataType dBDataType0 = DBDataType.getInstance(8, "alter tablfxesectp1");
      DBSchema dBSchema0 = new DBSchema("alter materialized viewnosettings");
      dBSchema0.setDoc("alter tablfxesectp1");
      dBSchema0.setDoc("alter materialized viewnosettings");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter tablfxesectp1", (DBSchema) null);
      Object object0 = new Object();
      defaultDBTable0.equals(object0);
      LinkedList<DBTable> linkedList0 = new LinkedList<DBTable>();
      defaultDBTable0.getComponents();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null);
      defaultDBTable1.setName("alter tablfxesectp1");
      String[] stringArray0 = new String[1];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = SQLUtil.join("alter materialized viewnosettings", "Xy", stringArray0, "Xy", "Xy", stringArray0);
      assertEquals("alter materialized viewnosettings join Xy as Xy on Xy.null = Xy.null", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tablfxesectp1");
      assertNull(boolean0);
      
      LinkedList<DBColumn> linkedList1 = new LinkedList<DBColumn>();
      String string1 = SQLUtil.typeAndName(dBSchema0);
      assertEquals("schema alter materialized viewnosettings", string1);
      assertNotNull(string1);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("4IE:0]?#|d;Z^Ok2<}", defaultDBTable0, dBDataType0);
      linkedList1.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList1);
      SQLUtil.isDDL("0_eC;\u0000?v5!}`");
      String string2 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      String[] stringArray0 = new String[5];
      SQLUtil.normalize("create", true);
      SQLUtil.isQuery("j}2Sy/.@");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Predicate predicate0 = new Predicate();
      SQLUtil.normalize("*/", false);
      SQLUtil.leftJoin("{Pd&%97#J,K:ph;f (4", stringArray0, "G&|7{@w<McQ:!<@", "j}2Sy/.@", stringArray0);
      DBDataType dBDataType0 = DBDataType.getInstance(Integer.MIN_VALUE, "derby.version.major");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create", defaultDBTable0, dBDataType0, (Integer) 0, (Integer) 0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.mutatesDataOrStructure("HN]u0");
      PipedWriter pipedWriter0 = null;
      try {
        pipedWriter0 = new PipedWriter((PipedReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-23);
      byteArray0[2] = (byte) (-23);
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte) (-23);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(">c'", (DBTable) null, (byte)0, "create tabled");
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      defaultDBColumn0.setDefaultValue(">c'");
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(">c', >c'", string0);
      
      TableContainer tableContainer0 = new TableContainer(">c'", (CompositeDBObject<? extends DBObject>) null);
      defaultDBColumn0.isUnique();
      tableContainer0.getTable("create tabled");
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      TableContainer tableContainer1 = new TableContainer("i}S~ax2O6s");
      tableContainer1.getSequences(false, (List<DBSequence>) columnDescriptorList0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("org.apache.derby.impl.sql.compile.StaticClassFieldReferenceNode", (DBTable) null, (-1982723030), ">c'");
      Boolean.valueOf(false);
      String string1 = SQLUtil.normalize("left", true);
      assertEquals("left", string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "create tabled";
      stringArray0[1] = "left";
      stringArray0[2] = "org.apache.derby.impl.sql.compile.StaticClassFieldReferenceNode";
      stringArray0[3] = "REFERENCEDCOLUMNS";
      stringArray0[4] = "create tabled";
      stringArray0[5] = "create tabled";
      stringArray0[6] = "7&4";
      stringArray0[7] = "org.apache.derby.impl.sql.compile.StaticClassFieldReferenceNode";
      String string2 = SQLUtil.renderColumn(dBColumnArray0[1]);
      assertEquals(">c' CREATE TABLED DEFAULT >c' NULL", string2);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("-$w?E5&", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("oDT", dBSchema0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "].8|^sM@/x!=";
      stringArray0[1] = "-$w?E5&";
      stringArray0[2] = "[aopjj*\"G";
      stringArray0[3] = null;
      stringArray0[4] = "-$w?E5&";
      stringArray0[5] = "into";
      stringArray0[6] = "oDT";
      stringArray0[7] = "oDT";
      stringArray0[8] = "-$w?E5&";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("-$w?E5&", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(" join ", 57);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(42);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      System.setCurrentTimeMillis(42);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("create materialized viewm^/:[]l\b8y", true);
      SQLUtil.mutatesDataOrStructure("call?~o#kfgh.bkxvw5");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "call?~o#kfgh.bkxvw5";
      stringArray0[1] = "create materialized viewm ^ / : [ ] l  b8  y";
      stringArray0[2] = "call?~o#kfgh.bkxvw5";
      stringArray0[3] = "create materialized viewm^/:[]l\b8y";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create materialized viewm ^ / : [ ] l  b8  y", true, stringArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create materialized viewm^/:[]l\b8y", defaultDBTable0, (-319676703), "drop tablemcy,jo7_lp68d2jbr[(0,0)");
      DBUniqueConstraint dBUniqueConstraint1 = new DBUniqueConstraint(defaultDBTable0, "v", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint1, nameSpec0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("DROP TABLEMCY,JO7_LP68D2JBR[(0,0)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(" join ", 57);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.h2.command.ddl.DropFunctionAlias";
      stringArray0[1] = "org.h2.command.ddl.DropFunctionAlias";
      DBSchema dBSchema0 = new DBSchema("AD6@");
      dBSchema0.getTable("create unique index");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("F.OztGMaL^4vzCkV7&g", dBSchema0);
      defaultDBTable0.addReferrer((DBTable) null);
      SQLUtil.removeComments("org.h2.command.ddl.DropFunctionAlias");
      TableContainer tableContainer0 = new TableContainer("org.h2.command.ddl.DropFunctionAlias");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " with ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("+mg9Iw5!w8c", defaultDBTable0, (-98956053), "org.h2.command.ddl.DropFunctionAlias");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(" with ", (DBTable) null, 3693, "create unique index");
      // Undeclared exception!
      try { 
        defaultDBColumn1.getForeignKeyConstraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      dBSchema0.getTable("NOSETTINGS");
      FileSystemHandling.shouldAllThrowIOExceptions();
      streamTokenizer0.resetSyntax();
      DBDataType dBDataType0 = DBDataType.getInstance(2874, "NOSETTINGS");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("NOSETTINGS", (DBTable) null, dBDataType0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("NOSETTINGS", stringBuilder0);
      assertEquals("NOSETTINGS", stringBuilder0.toString());
      
      System.setCurrentTimeMillis((-4));
      VersionNumber.valueOf("!W4(5hx~ooM+h+ x_Kz");
      String string0 = SQLUtil.substituteMarkers("", "y~`0\"WkE/", streamTokenizer0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLUtil.isProcedureCall("create materialized view.u#mqq~jihqcty7l");
      ErrorMessages errorMessages0 = new ErrorMessages();
      DBSequence dBSequence0 = new DBSequence("jXA:Z#32H&", "ISO_DAY_OF_WEEK", "ISO_DAY_OF_WEEK");
      dBSequence0.setName("^LzOmGW@Ef8&G");
      SQLUtil.isQuery("jXA:Z#32H&");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("&)^", stringBuilder0);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("derby.optimizer.optimizeJoinOrdr", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique index", dBSchema0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable0.addReferrer(defaultDBTable1);
      SQLUtil.removeComments("create unique index");
      TableContainer tableContainer0 = new TableContainer("^LzOmGW@Ef8&G");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Igr=|:XcTE5";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "1B1$V.%6Y%xkIy3TSY", false, stringArray0);
      dBUniqueConstraint0.equals(dBCatalog0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("NWAA'UX", defaultDBTable1, 949, "^LzOmGW@Ef8&G");
      String string0 = SQLUtil.renderValue(dBCatalog0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(5);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, true);
      dynamicByteArrayOutputStream0.reset();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      System.setCurrentTimeMillis(30000L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.normalize("Illegal column type format: ", false);
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Illegal column type format: ", false, stringArray0);
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NT&)");
      SQLUtil.ownerDotComponent(defaultDBTable0);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, false);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable1, false, nameSpec0, mockPrintWriter0);
      System.setCurrentTimeMillis(5);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.normalize("create materialized viewm^/:[]l\b8y", true);
      SQLUtil.parseColumnTypeAndSize("org.apache.derby.jdbc.ResourceAdapterImpl");
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      SQLUtil.innerJoin((String) null, stringArray0, "R020", "truncateseectgp1", stringArray0);
      SQLUtil.normalize("R020 as truncateseectgp1 on null.null = truncateseectgp1.null and null.null = truncateseectgp1.null", true);
      System.setCurrentTimeMillis(32767L);
      String string0 = "plF*ukvofQl><";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "@OS2-", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-611), (-611));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -611
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "drop tableseectgp1");
      DBDataType dBDataType0 = DBDataType.getInstance(8, "X");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("X", compositeDBObject0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      tableContainer0.getTable("X");
      DBDataType.getInstance(8, "vyht,v");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "vyht,v");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("X", (DBTable) null, dBDataType0, integer0);
      Integer integer1 = RawTransaction.COMMIT;
      defaultDBColumn0.setFractionDigits(integer1);
      String string0 = defaultDBColumn0.toString();
      assertEquals("X : X(3,0)", string0);
      
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("(83g", (DBTable) null, 8, "vyht,v");
      String string1 = SQLUtil.renderColumn(defaultDBColumn1);
      assertEquals("(83g VYHT,V NULL", string1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "vSw*%J}ueB`9ERq*Y~$";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vSw*%J}ueB`9ERq*Y~$");
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder(685);
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "9xNb_*", false, stringArray0);
      dBPrimaryKeyConstraint0.setName("9xNb_*");
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1, nameSpec0);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.h2.command.ddl.DropFunctionAlias";
      stringArray0[1] = "org.h2.command.ddl.DropFunctionAlias";
      SQLUtil.leftJoin("org.h2.command.ddl.DropFunctionAlias", stringArray0, "org.h2.command.ddl.DropFunctionAlias", "org.h2.command.ddl.DropFunctionAlias", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder(685);
      SQLUtil.addRequiredCondition("org.h2.command.ddl.DropFunctionAlias", stringBuilder0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create materialized view", true, stringArray0);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("org.h2.command.ddl.DropFunctionAliasCONSTRAINT \"create materialized view\" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Parameter parameter0 = new Parameter(2318);
      SQLUtil.renderValue(parameter0);
      long long0 = 1713L;
      System.setCurrentTimeMillis(1713L);
      String string0 = "create unique index";
      SQLUtil.isQuery("?2319");
      SQLUtil.mutatesDataOrStructure("alter sessionselezctgp1");
      StringBuilder stringBuilder0 = new StringBuilder("create unique index");
      int int0 = 2682;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(1402, (CharSequence) "alter sessionselezctgp1", 2318, 2682);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 1402
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (double) (-4);
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.renderNumber(streamTokenizer0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("create tableselect", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLUtil.removeComments("7;%7@wLRRJH");
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.poll();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7;%7@wLRRJH";
      stringArray0[1] = "execinto";
      SQLUtil.join("execinto", "\nFOR UPDATE", stringArray0, "execinto", "7;%7@wLRRJH", stringArray0);
      DBSchema dBSchema0 = new DBSchema("Yp$(4YVH_: %4tAneQ");
      dBSchema0.getTable("- 4");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      DBDataType.getInstance((-4), "");
      DBDataType.getInstance(90, "rename");
      SQLUtil.mutatesDataOrStructure("select into");
      StringBuilder stringBuilder0 = new StringBuilder("select into");
      NameSpec nameSpec0 = NameSpec.NEVER;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getUniqueConstraint(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "alter table");
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G}|cGNgtIhy$]>9O");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("selezct");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "alter table");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "dop indexax1u$f-";
      int int0 = 2199;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("()");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("f", defaultDBTable1, (-1440), "()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "alter table");
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G}|cGNgtIhy$]>9O");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("selezct");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "()", false, stringArray0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      defaultDBTable0.setSchema((DBSchema) null);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "selezct");
      DBDataType dBDataType0 = DBDataType.getInstance(843, "selezct");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("gLzx", defaultDBTable0, dBDataType0, integer0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      defaultDBColumn0.toString();
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.spliterator();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedReader pipedReader1 = new PipedReader();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)71;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "call";
      stringArray0[1] = "truncate";
      stringArray0[2] = "rename";
      stringArray0[3] = "truncate";
      stringArray0[4] = "call";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("truncate", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      dBForeignKeyConstraint0.columnReferencedBy("truncate", false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT truncate FOREIGN KEY (call, truncate, rename, truncate, call) REFERENCES call(call, truncate, rename, truncate, call)", string0);
      
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("call = 'call' AND truncate = 'truncate' AND rename = 'rename' AND truncate = 'truncate' AND call = 'call'", string1);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("uB8A22pr");
      assertFalse(boolean0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader1);
      streamTokenizer0.nval = 4321.0;
      String string2 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("4321", string2);
      
      String[] stringArray1 = new String[0];
      String string3 = SQLUtil.renderWhereClause(stringArray1, stringArray0);
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Boolean boolean0 = new Boolean("org.apache.derby.impl.sql.catalog.TableKey");
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      pipedReader0.close();
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.isQuery("select.v+rhann:+g-&");
      SQLUtil.mutatesStructure("create materialized viewselezctgp1");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "calldelete from information_schema.lobs where table = -2;";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[1] = "9]v!";
      stringArray0[2] = "9]v!";
      stringArray0[3] = "UjlODyvY \"v{fA/";
      stringArray0[4] = "9]v!";
      SQLUtil.renderColumnListWithTableName("9]v!", stringArray0);
      SQLUtil.leftJoin("9]v!", stringArray0, "UjlODyvY \"v{fA/", "", stringArray0);
      SQLUtil.renderValue("9]v!");
      SQLUtil.isDML("FsHv");
      SQLUtil.join("calldelete from information_schema.lobs where table = -2;", "", stringArray0, "FsHv", "9]v!", stringArray0);
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      SQLUtil.removeComments("execdelete from information_schema.lobs where table = -2;");
      TableContainer tableContainer0 = new TableContainer("Tl");
      tableContainer0.getTable("Unknown constraint type: ");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "- ";
      stringArray0[1] = "fiG]!1Fp?8";
      stringArray0[2] = "";
      String string0 = "r}";
      stringArray0[3] = "r}";
      stringArray0[0] = "8'gVcQ)O+DDX#~.L";
      stringArray0[5] = ";9~8gZg";
      stringArray0[6] = "SYSCS_COMPRESS_TABLE";
      SQLUtil.removeComments("8'gVcQ)O+DDX#~.L");
      SQLUtil.innerJoin("'@/", stringArray0, ";9~8gZg", "8'gVcQ)O+DDX#~.L", stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.removeComments(" join ");
      SQLUtil.renderColumnListWithTableName("Disconnect called while not connected", stringArray0);
      SQLUtil.mutatesDataOrStructure("SYSCS_COMPRESS_TABLE");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil.mutatesDataOrStructure(" ()");
      File file0 = MockFile.createTempFile("SYSCS_COMPRESS_TABLE", ";9~8gZg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      SQLUtil.isQuery("'@/");
      SQLUtil.mutatesDataOrStructure("select");
      String string1 = "|NmUtED;Io* ";
      StringBuilder stringBuilder0 = new StringBuilder("|NmUtED;Io* ");
      NameSpec nameSpec1 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec1);
      int int0 = (-2728);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-2728), true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2728
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("K]~!K7yknoi\"3yBtj");
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      pipedReader0.close();
      SQLUtil.renderNumber(streamTokenizer0);
      streamTokenizer0.ordinaryChar(2133);
      SQLUtil.isQuery("a{B,xV?+dp/M");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "into";
      stringArray0[1] = "into";
      stringArray0[2] = null;
      stringArray0[3] = "a{B,xV?+dp/M";
      stringArray0[4] = "a{B,xV?+dp/M";
      stringArray0[5] = "K]~!K7yknoi\"3yBtj";
      stringArray0[6] = "";
      stringArray0[7] = "";
      SQLUtil.leftJoin("", stringArray0, "into", "DETERMINISTIC", stringArray0);
      DBTable dBTable0 = null;
      DBDataType.getInstance(173, "a{B,xV?+dp/M");
      Integer integer0 = RawTransaction.COMMIT;
      try { 
        Integer.parseUnsignedInt("into");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"into\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.close();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("K.L'`LlG}A1>EsuXcJ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BEFORE BIT", defaultDBTable0, 45, "create tableselectgp1");
      DBDataType dBDataType0 = DBDataType.getInstance(42, "create unique indexselectgp1");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(",&fjG_*?OW4-Q", defaultDBTable0, dBDataType0);
      Integer integer0 = new Integer(3);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("create tableselectgp1", defaultDBTable0, dBDataType0, integer0, (Integer) null);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn2);
      assertEquals("CREATE UNIQUE INDEXSELECTGP1(3)", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      SQLUtil.removeComments("selectgp1");
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      SQLUtil.isQuery("selectgp1");
      DBCatalog dBCatalog0 = new DBCatalog("b(7i;pS$x");
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, (NameSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "execdrop sequence having");
      boolean boolean0 = SQLUtil.isProcedureCall("execdrop sequence having");
      assertTrue(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execute'gp1'", (DBSchema) null);
      defaultDBTable0.equals((Object) null);
      defaultDBTable0.getColumns();
      System.setCurrentTimeMillis(615L);
      DBCatalog dBCatalog0 = new DBCatalog("4S8dafx1f`@`LIE");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "execute'gp1'";
      stringArray0[1] = "execute'gp1'";
      stringArray0[2] = "execute'gp1'";
      stringArray0[3] = "4S8dafx1f`@`LIE";
      stringArray0[4] = "4S8dafx1f`@`LIE";
      stringArray0[5] = "4S8dafx1f`@`LIE";
      stringArray0[6] = "execute'gp1'";
      stringArray0[7] = "execconstraint";
      stringArray0[8] = "4S8dafx1f`@`LIE";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("4S8dafx1f`@`LIE", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 4S8dafx1f`@`LIE FOREIGN KEY (execute'gp1', execute'gp1', execute'gp1', 4S8dafx1f`@`LIE, 4S8dafx1f`@`LIE, 4S8dafx1f`@`LIE, execute'gp1', execconstraint, 4S8dafx1f`@`LIE) REFERENCES execute'gp1'(execute'gp1', execute'gp1', execute'gp1', 4S8dafx1f`@`LIE, 4S8dafx1f`@`LIE, 4S8dafx1f`@`LIE, execute'gp1', execconstraint, 4S8dafx1f`@`LIE)", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("42S21");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "rename";
      stringArray0[1] = "UBCl85TG0^";
      stringArray0[2] = "Nf8SG<z";
      stringArray0[3] = "UBCl85TG0^";
      stringArray0[4] = "Nf8SG<z";
      stringArray0[5] = "42S21";
      stringArray0[6] = "Nf8SG<z";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Nf8SG<z", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UBCl85TG0^");
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Boolean boolean0 = new Boolean((String) null);
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (double) (-4);
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.removeComments("*/");
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.poll();
      delayQueue0.poll();
      SQLUtil.renderValue((Object) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.close();
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("V:", dBCatalog0);
      PipedReader pipedReader1 = new PipedReader();
      pipedReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.isQuery("jzw[tarUM/p,9M>Ty^&");
      SQLUtil.normalize("ZSjJ* hA,}fK,'0-", false);
      SQLUtil.isQuery("insertdelete from information_schema.lobs where table = -2;");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ZSjJ* hA,}fK,'0-";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "insertdelete from information_schema.lobs where table = -2;";
      stringArray0[4] = "ZSjJ * hA, } fK, '0-'";
      stringArray0[5] = "jzw[tarUM/p,9M>Ty^&";
      stringArray0[6] = null;
      stringArray0[7] = "insertdelete from information_schema.lobs where table = -2;";
      stringArray0[8] = "K]~!K7yknoi\"3yBtj";
      SQLUtil.innerJoin("ZSjJ* hA,}fK,'0-", stringArray0, "8Qc:}ZnJP>gM3l;", "K]~!K7yknoi\"3yBtj", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(stringArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      DBSchema dBSchema0 = new DBSchema("drop indexnull = null", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exec", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "a;c^t", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("exec", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("exec", dBTable0, (DBDataType) null, integer0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Integer integer1 = new Integer(34);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("a;c^t", defaultDBTable0, (DBDataType) null, integer1, (Integer) null);
      DBUniqueConstraint dBUniqueConstraint1 = new DBUniqueConstraint(dBTable0, (String) null, true, (String[]) null);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint1, (StringBuilder) null);
      assertNull(dBUniqueConstraint1.getName());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = SQLUtil.leftJoin("callsyscs_compress_table", stringArray0, "callsyscs_compress_table", "callsyscs_compress_table", stringArray0);
      assertEquals("left join callsyscs_compress_table as callsyscs_compress_table on callsyscs_compress_table. = callsyscs_compress_table.", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("DELETE FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = -2;");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = SQLUtil.isDML("left join callsyscs_compress_table as callsyscs_compress_table on callsyscs_compress_table. = callsyscs_compress_table.");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      StringBuilder stringBuilder1 = stringBuilder0.append("");
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("", stringBuilder1);
      assertEquals("", stringBuilder2.toString());
      
      SQLUtil sQLUtil0 = new SQLUtil();
      String string1 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals(".", string1);
      
      boolean boolean2 = SQLUtil.isProcedureCall("");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "- ";
      stringArray0[1] = "fiG]!1Fp?8";
      stringArray0[2] = "";
      stringArray0[3] = "r}";
      String string0 = "8'gVcQ)O+DDX#~.L";
      stringArray0[4] = "8'gVcQ)O+DDX#~.L";
      stringArray0[5] = "";
      String string1 = "SYSCS_COMPRESS_TABLE";
      stringArray0[2] = "SYSCS_COMPRESS_TABLE";
      SQLUtil.removeComments("8'gVcQ)O+DDX#~.L");
      SQLUtil.innerJoin("'@/", stringArray0, "", "8'gVcQ)O+DDX#~.L", stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.removeComments(" join ");
      SQLUtil.renderColumnListWithTableName("Disconnect called while not connected", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure(stringArray0[6]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.typeAndName((DBObject) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLUtil.removeComments("K.L'`LlG}A1>EsuXcJ");
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.close();
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("K.L'`LlG}A1>EsuXcJ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(1841, "GO[r1+zqXl");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select intothan threshold of", defaultDBTable0, dBDataType0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("FLOAT", defaultDBTable0, (-119206624), "jzw[tarUM/p,9M>Ty^&");
      defaultDBColumn0.setVersionColumn(false);
      String string0 = SQLUtil.normalize("jzw[tarUM/p,9M>Ty^&", false);
      assertEquals("jzw [ tarUM / p, 9M > Ty ^ &", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Boolean boolean0 = new Boolean("selectgp1");
      SQLUtil.removeComments("selectgp1");
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      SQLUtil.isQuery("selectgp1");
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("", (String[]) null, "selectgp1", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLUtil.removeComments("K.L'`LlG}A1>EsuXcJ");
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.close();
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("K.L'`LlG}A1>EsuXcJ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(1841, "GO[r1+zqXl");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select intothan threshold of", defaultDBTable0, dBDataType0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("FLOAT", defaultDBTable0, (-119206624), "jzw[tarUM/p,9M>Ty^&");
      defaultDBColumn0.setVersionColumn(true);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("GO[R1+ZQXL", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Boolean boolean0 = new Boolean((String) null);
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 749.5894043837637;
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.normalize("oh", true);
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLUtil.removeComments("delete>= page count:");
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DBSchema dBSchema0 = new DBSchema((String) null);
      String string0 = SQLUtil.typeAndName(dBSchema0);
      assertNotNull(string0);
      assertEquals("schema null", string0);
      
      boolean boolean0 = SQLUtil.isDDL("");
      boolean boolean1 = SQLUtil.isQuery("7MqgRfeObaEe$ZKcJ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Boolean boolean0 = new Boolean("selectgp1");
      SQLUtil.removeComments("selectgp1");
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Lne1`}}");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("selectgp1", defaultDBTable0, 2106, "selectgp1");
      DBDataType dBDataType0 = DBDataType.getInstance((-2630), "selectgp1");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("selectgp1", defaultDBTable0, dBDataType0);
      Integer integer0 = new Integer(42);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("selectgp1", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn2);
      assertEquals("SELECTGP1(42,42)", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Boolean boolean0 = new Boolean("selectgp1");
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      PipedWriter pipedWriter0 = new PipedWriter();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "selectgp1";
      SQLUtil.isQuery("selectgp1");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("kzUW,w`<k['q+k;");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("selecth 'i'", defaultDBTable0, (DBDataType) null, integer0, integer0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "cB@{6V{7~FTk+o]q,", true, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder(127);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      StringBuilder stringBuilder3 = stringBuilder2.append((double) 127);
      char[] charArray0 = new char[2];
      charArray0[0] = 'G';
      charArray0[1] = 'P';
      StringBuilder stringBuilder4 = stringBuilder3.append(charArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.typeAndName(dBCatalog0);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "\u0001\u0083", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("-$w?E5&", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("oDT", dBSchema0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "].8|^sM@/x!=";
      stringArray0[1] = "-$w?E5&";
      stringArray0[2] = "[aopjj*\"G";
      stringArray0[3] = null;
      stringArray0[4] = "-$w?E5&";
      stringArray0[5] = "into";
      stringArray0[6] = "oDT";
      stringArray0[7] = "oDT";
      stringArray0[8] = "-$w?E5&";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "into", true, stringArray0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT into UNIQUE (].8|^sM@/x!=, -$w?E5&, [aopjj*\"G, , -$w?E5&, into, oDT, oDT, -$w?E5&)", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "Gp1";
      SQLUtil.removeComments("Gp1");
      String string1 = "~.2SywQv.Bz7%4R";
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.codePoints();
      SQLUtil.addOptionalCondition("~.2SywQv.Bz7%4R", stringBuilder0);
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = 'F';
      charArray0[2] = 'M';
      String string2 = "pm7ZR";
      String string3 = "selectgetarray(";
      // Undeclared exception!
      try { 
        SQLUtil.join("selectgetarray(", "Gp1", (String[]) null, "pm7ZR", "pm7ZR", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("[*WAE{UpAN d(u2^");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("V\"kkU<}M,j&uk%8T", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      String string0 = SQLUtil.substituteMarkers("wWFj*M%y", "FK.RDB$RELATION_NAME", (Object) null);
      assertEquals("wWFj*M%y", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLUtil.normalize("selectselectgp1", false);
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("selectselectgp1", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLUtil.removeComments("K.L'`LlG}1suXcJ");
      boolean boolean0 = SQLUtil.isQuery("selettomjq6hf4du1");
      assertFalse(boolean0);
      
      DBCatalog dBCatalog0 = new DBCatalog("K.L'`LlG}1suXcJ");
      dBCatalog0.getSequences();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("K.L'`LlG}1suXcJ");
      DBDataType dBDataType0 = DBDataType.getInstance(90120, "BLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("2YSc-%B?\"C;$PqY", defaultDBTable0, dBDataType0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "selettomjq6hf4du1";
      stringArray0[1] = "2YSc-%B?\"C;$PqY";
      stringArray0[2] = "BLOB";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "selettomjq6hf4du1", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (selettomjq6hf4du1, 2YSc-%B?\"C;$PqY, BLOB)", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      DBSchema dBSchema0 = new DBSchema("drop indexnull = null", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exec", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "a;c^t", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("exec", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("exec", dBTable0, (DBDataType) null, integer0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Integer integer1 = new Integer(34);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("a;c^t", defaultDBTable0, (DBDataType) null, integer1, (Integer) null);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DBColumn dBColumn0 = defaultDBTable0.getColumn("a;c^t");
      dBColumnArray0[2] = dBColumn0;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("drop indexnull = null", dBTable0, (DBDataType) null);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn2;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("exec, a;c^t, a;c^t, drop indexnull = null", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLUtil.removeComments("42Y55");
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DBSchema dBSchema0 = new DBSchema((String) null);
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("42Y55", stringArray0, "3\"lHkH0", "'CREATE'", stringArray0);
      assertEquals("3\"lHkH0 as 'CREATE' on ", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Gp1";
      stringArray0[1] = "Gp1";
      stringArray0[2] = "&=@11?";
      stringArray0[3] = "h2.selectForUpdateMvcc";
      stringArray0[4] = "Gp1";
      stringArray0[5] = "Gp1";
      stringArray0[6] = "Gp1";
      stringArray0[7] = "Gp1";
      stringArray0[8] = "*|Q[^1SR7$.WI";
      String string0 = SQLUtil.innerJoin("h2.selectForUpdateMvcc", stringArray0, (String) null, "Gp1", stringArray0);
      assertEquals("null as Gp1 on h2.selectForUpdateMvcc.Gp1 = Gp1.Gp1 and h2.selectForUpdateMvcc.Gp1 = Gp1.Gp1 and h2.selectForUpdateMvcc.&=@11? = Gp1.&=@11? and h2.selectForUpdateMvcc.h2.selectForUpdateMvcc = Gp1.h2.selectForUpdateMvcc and h2.selectForUpdateMvcc.Gp1 = Gp1.Gp1 and h2.selectForUpdateMvcc.Gp1 = Gp1.Gp1 and h2.selectForUpdateMvcc.Gp1 = Gp1.Gp1 and h2.selectForUpdateMvcc.Gp1 = Gp1.Gp1 and h2.selectForUpdateMvcc.*|Q[^1SR7$.WI = Gp1.*|Q[^1SR7$.WI", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = SQLUtil.normalize("drop index", false);
      assertEquals("drop index", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "drop index";
      stringArray0[3] = "drop index";
      stringArray0[4] = "QfqW:=qO0c/-(";
      stringArray0[5] = null;
      String string1 = SQLUtil.join("QfqW:=qO0c/-(", (String) null, stringArray0, ":K", stringArray0[5], stringArray0);
      assertEquals("QfqW:=qO0c/-( join :K as null on null.null = null.null and null.null = null.null and null.drop index = null.drop index and null.drop index = null.drop index and null.QfqW:=qO0c/-( = null.QfqW:=qO0c/-( and null.null = null.null", string1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLUtil.removeComments("K.L'`LlG}A1>EsuXcJ");
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      boolean boolean0 = SQLUtil.isQuery("K.L'`LlG}A1>EsuXcJ");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("create unique indexgkd");
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = SQLUtil.mutatesStructure("create unique indexgkd");
      assertFalse(boolean2.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[2] = "";
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      System.setCurrentTimeMillis(1L);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SQLUtil.mutatesStructure("callq)0zn6rdhzyx");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Q=uLJ");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = SQLUtil.normalize("K.L'`LlG}A1>EsuXcJ", false);
      assertEquals("K.L '`LlG}A1>EsuXcJ'", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("K.L'`LlG}A1>EsuXcJ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DBSchema dBSchema0 = new DBSchema("- ");
      dBSchema0.getTable("- ");
      SQLUtil.normalize("EuuKi#_(JF)%^", false);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("aeR}L=?.\"b");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLUtil.normalize("ybyExOze\"H", true);
      SQLUtil.removeComments("ybyExOze \"H\"");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "':.I~ERYZ84J^3H0VI";
      stringArray0[1] = "ybyExOze\"H";
      stringArray0[2] = "ybyExOze\"H";
      SQLUtil.join("ybyExOze\"H", (String) null, stringArray0, "':.I~ERYZ84J^3H0VI", "java.awt.Desktop", stringArray0);
      String[] stringArray1 = new String[0];
      String[] stringArray2 = new String[1];
      stringArray2[0] = "ybyExOze\"H";
      SQLUtil.innerJoin("MINUS", stringArray1, "ybyExOze\"H", "ybyexoze\"h", stringArray2);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      TableDescriptor tableDescriptor0 = new TableDescriptor(dataDictionaryImpl0, "exec", (SchemaDescriptor) null, (-89171651), true, false);
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getConstraintDescriptors(tableDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLUtil.normalize("", false);
      SQLUtil.normalize("!D&3k&s", false);
      VersionNumber versionNumber0 = VersionNumber.valueOf("?/Y`1fJ^9;/ycCGU7");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("?/Y`1fJ^9;/ycCGU7", "?/Y`1fJ^9;/ycCGU7", versionNumber0);
      VersionNumber versionNumber1 = VersionNumber.valueOf("%=0Y+`FGUs");
      versionNumber0.compareTo(versionNumber1);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("! D & 3k & s", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '! D & 3k & s'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("OLDX`@iH4az");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.ownerDotComponent(dBForeignKeyConstraint0);
      assertEquals("null.CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().", string0);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec1);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      SQLUtil.isQuery("selectgp1");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectgp1");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null", string0);
      
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("null = null", "WA8ufR.D@K", (VersionNumber) null);
      defaultDatabase0.getTable("WA8ufR.D@K", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("yKdJD=cp", (DBTable) null, 1527, "");
      defaultDBColumn0.toString();
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string1);
      
      String string2 = SQLUtil.leftJoin("yKdJD=cp", stringArray0, "user=", "null = null", stringArray0);
      assertEquals("left join user= as null = null on yKdJD=cp.null = null = null.null", string2);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      String string0 = "- ";
      DBSchema dBSchema0 = new DBSchema("- ");
      dBSchema0.getTable("- ");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("- ", (DBTable) null, (-2204), "N}4D/(97mox");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: N}4D/(97mox
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("58~o:!NV4Qe");
      assertFalse(boolean0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("J-q", true, "58~o:!NV4Qe", "select");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT J-q ", string0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(arrayList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("CONSTRAINT J-q ", "select", versionNumber0);
      defaultDatabase0.getTable("select", false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT J-q CHECK select", string1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "j%h2BIe@f;yMeq{$";
      stringArray0[2] = "j%h2BIe@f;yMeq{$";
      SQLUtil.renderColumnListWithTableName("j%h2BIe@f;yMeq{$", stringArray0);
      SQLUtil.normalize("j%h2BIe@f;yMeq{$.j%h2BIe@f;yMeq{$, j%h2BIe@f;yMeq{$.null, j%h2BIe@f;yMeq{$.j%h2BIe@f;yMeq{$", false);
      String string0 = "executerenamenull = null";
      String string1 = "update";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("gtzW", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append('t');
      // Undeclared exception!
      try { 
        stringBuilder2.insert(2261, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2261
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "el!g54'9aF|NybrtR");
      SQLUtil.removeComments("j%h2BIe@f;yMeq{$");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("el!g54'9aF|NybrtR", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("el!g54'9aF|NybrtR", "j%h2BIe@f;yMeq{$");
      File file0 = FileUtil.canonicalFile((File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertNull(dBForeignKeyConstraint0.getDoc());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = new String[6];
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      String[] stringArray1 = new String[0];
      SQLUtil.renderWhereClause(stringArray1, stringArray1);
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      SQLUtil.isQuery("insertg5'lflax1gcna@[v[");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insertg5'lflax1gcna@[v[");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DataStore dataStore0 = new DataStore("alter index");
      VirtualFile virtualFile0 = new VirtualFile("CLOB", dataStore0);
      OutputStream outputStream0 = virtualFile0.getOutputStream(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, true);
      InsertNode insertNode0 = new InsertNode();
      Properties properties0 = insertNode0.targetProperties;
      MockPrintStream mockPrintStream0 = new MockPrintStream("{b`g'@1/>F;%");
      FileMonitor fileMonitor0 = new FileMonitor((Properties) null, mockPrintStream0);
      fileMonitor0.setLocale((Object) "CLOB", "alter index");
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "alter index", (Object[]) null);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertEquals("insertg5'lflax1gcna@[v[", defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(".&,Q_w9f/ xLjh;5>D");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals(35, rowOutputBinary0.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(constraintDescriptorList0, constraintDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("q", "exec", versionNumber0);
      defaultDatabase0.getTable("trunca", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("FSg8^ ^O*vr90p", (DBTable) null, 40, "exec");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("EXEC", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = " on ";
      stringArray0[1] = "FSg8^ ^O*vr90p";
      stringArray0[2] = "FSg8^ ^O*vr90p";
      String string1 = SQLUtil.renderColumnListWithTableName(" on ", stringArray0);
      assertEquals(" on . on ,  on .FSg8^ ^O*vr90p,  on .FSg8^ ^O*vr90p", string1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      SQLUtil.isQuery("insertg5'lflax1gcna@[v[");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLUtil.removeComments("Gp1");
      String string0 = SQLUtil.renderValue("Gp1");
      assertEquals("'Gp1'", string0);
      
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(constraintDescriptorList0, constraintDescriptorList0);
      ConstraintDescriptorList constraintDescriptorList1 = new ConstraintDescriptorList();
      boolean boolean0 = SQLUtil.isQuery("Gp1");
      String[] stringArray0 = new String[0];
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Gp1";
      objectArray0[1] = (Object) constraintDescriptorList0;
      objectArray0[2] = (Object) constraintDescriptorList0;
      objectArray0[3] = (Object) versionNumber0;
      objectArray0[4] = (Object) "'Gp1'";
      objectArray0[5] = (Object) constraintDescriptorList1;
      objectArray0[6] = (Object) versionNumber0;
      SQLUtil.renderWhereClause(stringArray0, objectArray0);
      Boolean boolean1 = SQLUtil.mutatesStructure("");
      assertTrue(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "BLOB");
      String[] stringArray0 = new String[1];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = "!P80|sh$<O";
      VersionNumber versionNumber0 = VersionNumber.valueOf("!P80|sh$<O");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("!P80|sh$<O", "null = null", versionNumber0);
      defaultDatabase0.getTable(":AO?%ZEy_XO~pT<`", false);
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLUtil.isQuery("58~o:!NV4Qe");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("E(Vv~CrL/<A\"KH63<");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "58~o:!NV4Qe";
      stringArray0[1] = "-2CU@`to~d";
      stringArray0[2] = "58~o:!NV4Qe";
      stringArray0[3] = "58~o:!NV4Qe";
      stringArray0[4] = "58~o:!NV4Qe";
      stringArray0[5] = "58~o:!NV4Qe";
      stringArray0[6] = "E(Vv~CrL/<A\"KH63<";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "58~o:!NV4Qe";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("E(Vv~CrL/<A\"KH63<", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "E(Vv~CrL/<A\"KH63<");
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) stringBuilder0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder3 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder2, nameSpec0);
      assertEquals("<36HK\"A</LrC~vV(E<36HK\"A</LrC~vV(ECONSTRAINT E(Vv~CrL/<A\"KH63< ", stringBuilder2.toString());
      assertEquals("<36HK\"A</LrC~vV(E<36HK\"A</LrC~vV(ECONSTRAINT E(Vv~CrL/<A\"KH63< ", stringBuilder3.toString());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("58~o:!NV4Qe");
      assertFalse(boolean0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("J-q", true, " join ", "select");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT J-q ", string0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(arrayList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("CONSTRAINT J-q ", (String) null, versionNumber0);
      defaultDatabase0.getTable((String) null, false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" join ", (DBTable) null, 1527, "");
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("create materialized view(sessionid =");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("delete");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "delete";
      stringArray0[1] = "create materialized view(sessionid =";
      stringArray0[2] = "Fa?pF\"5tF7+dhi(~6";
      stringArray0[3] = "create materialized view(sessionid =";
      stringArray0[4] = "Fa?pF\"5tF7+dhi(~6";
      stringArray0[5] = "alter table(sessionid =";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Fa?pF\"5tF7+dhi(~6", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (delete, create materialized view(sessionid =, Fa?pF\"5tF7+dhi(~6, create materialized view(sessionid =, Fa?pF\"5tF7+dhi(~6, alter table(sessionid =) REFERENCES delete(delete, create materialized view(sessionid =, Fa?pF\"5tF7+dhi(~6, create materialized view(sessionid =, Fa?pF\"5tF7+dhi(~6, alter table(sessionid =)", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("r`>JxR5{) BI?");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "a";
      stringArray0[1] = "r`>JxR5{) BI?";
      stringArray0[2] = "r`>JxR5{) BI?";
      stringArray0[3] = "r`>JxR5{) BI?";
      stringArray0[4] = "xn9ho5ayO";
      stringArray0[5] = "r`>JxR5{) BI?";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[6] = "CJ";
      stringArray0[7] = "r`>JxR5{) BI?";
      stringArray0[8] = "r`>JxR5{) BI?";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "r`>JxR5{) BI?", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"r`>JxR5{) BI?\" PRIMARY KEY (a, r`>JxR5{) BI?, r`>JxR5{) BI?, r`>JxR5{) BI?, xn9ho5ayO, r`>JxR5{) BI?, CJ, r`>JxR5{) BI?, r`>JxR5{) BI?)", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "executeinsertg5'lflax1gcna@[v[";
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("executeinsertg5'lflax1gcna@[v[", (String[]) null, "executeinsertg5'lflax1gcna@[v[", "executeinsertg5'lflax1gcna@[v[", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      String string0 = "execute()";
      pGConnectionPoolDataSource0.setPassword("execute()");
      StringBuilder stringBuilder1 = new StringBuilder();
      StringBuilder stringBuilder2 = new StringBuilder();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("execute()", defaultDBTable0, (-4021), "execute()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLUtil.isDML("I=");
      SQLUtil.isQuery("delete");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Boolean boolean0 = new Boolean("execdrop sequence having");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder("execdrop sequence having");
      boolean boolean1 = SQLUtil.isDML("");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("58~o:!NV4Qe");
      DBCatalog dBCatalog0 = new DBCatalog("/*");
      Vector<VersionNumberComponent> vector0 = new Vector<VersionNumberComponent>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      VersionNumber versionNumber0 = new VersionNumber(vector0, linkedList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("selectybyexoze\"h", "selectybyexoze\"h", versionNumber0);
      dBCatalog0.setDatabase(defaultDatabase0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      dBCatalog0.getSchema("58~o:!NV4Qe");
      SQLUtil.isQuery("C2/6e rXM%*Hnw<73D");
      SQLUtil.isProcedureCall("selectybyexoze\"h");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "selectfunxi#a<e}/5";
      stringArray0[1] = "selectfunxi#a<e}/5";
      stringArray0[2] = "/*";
      stringArray0[3] = "/*";
      stringArray0[4] = "58~o:!NV4Qe";
      stringArray0[5] = "selectybyexoze\"h";
      stringArray0[6] = "C2/6e rXM%*Hnw<73D";
      stringArray0[7] = "58~o:!NV4Qe";
      stringArray0[8] = "selectybyexoze\"h";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "selectfunxi#a<e}/5", false, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "execdrop sequence having");
      SQLUtil.isProcedureCall("execdrop sequence having");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execute'gp1'", (DBSchema) null);
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*$z]";
      String string0 = SQLUtil.leftJoin("*$z]", stringArray0, (String) null, "58~o:!NV4Qe", stringArray0);
      assertEquals("left join null as 58~o:!NV4Qe on *$z].*$z] = 58~o:!NV4Qe.*$z]", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "58~o:!NV4Qe", false, stringArray0);
      defaultDBTable0.getIndex("Dl(g9Jy^{V?-\"|_N");
      dBUniqueConstraint0.isIdentical((DBObject) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 58~o:!NV4Qe UNIQUE (*$z])", string1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      System.setCurrentTimeMillis((-2332L));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "58~o:!NV4Qe";
      stringArray0[1] = "58~o:!NV4Qe";
      stringArray0[2] = "58~o:!NV4Qe";
      stringArray0[3] = "58~o:!NV4Qe";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("58~o:!NV4Qe", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.setDescription("58~o:!NV4Qe");
      jdbcDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "58~o:!NV4Qe");
      boolean boolean0 = SQLUtil.isQuery("execdrop sequence having");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "execdrop sequence having";
      stringArray0[1] = "58~o:!NV4Qe";
      stringArray0[2] = "execdrop sequence having";
      stringArray0[3] = "select";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("execdrop sequence having = 'execdrop sequence having' AND 58~o:!NV4Qe = '58~o:!NV4Qe' AND execdrop sequence having = 'execdrop sequence having' AND select = 'select'", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      DBSchema dBSchema0 = new DBSchema("RoleGrant", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("%QR6d/", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure((String) null, dBPackage0);
      String string1 = SQLUtil.typeAndName(dBProcedure0);
      assertEquals("procedure null", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "execdrop sequence having";
      StringReader stringReader0 = new StringReader("execdrop sequence having");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "execdrop sequence having";
      stringArray0[3] = null;
      stringArray0[4] = "- 0";
      stringArray0[5] = null;
      stringArray0[6] = "execdrop sequence having";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("execdrop sequence having", stringArray0, (String) null, "null = null AND null = null AND execdrop sequence having = 'execdrop sequence having' AND null = null AND - 0 = '- 0' AND null = null AND execdrop sequence having = 'execdrop sequence having'", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLUtil.removeComments("Gp1");
      String string0 = SQLUtil.renderValue("Gp1");
      assertEquals("'Gp1'", string0);
      
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      pipedReader0.close();
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
      
      boolean boolean0 = SQLUtil.isQuery("- 0");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Gp1";
      stringArray0[1] = "'Gp1'";
      stringArray0[2] = "- 0";
      stringArray0[3] = null;
      stringArray0[4] = "'Gp1'";
      stringArray0[5] = "'Gp1'";
      String string2 = SQLUtil.join("into", "- 0", stringArray0, "into", "J<6opSB\"`bF}LU", stringArray0);
      assertEquals("into join into as J<6opSB\"`bF}LU on - 0.Gp1 = J<6opSB\"`bF}LU.Gp1 and - 0.'Gp1' = J<6opSB\"`bF}LU.'Gp1' and - 0.- 0 = J<6opSB\"`bF}LU.- 0 and - 0.null = J<6opSB\"`bF}LU.null and - 0.'Gp1' = J<6opSB\"`bF}LU.'Gp1' and - 0.'Gp1' = J<6opSB\"`bF}LU.'Gp1'", string2);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Boolean boolean0 = new Boolean((String) null);
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 749.5894043837637;
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.removeComments("insetschema null");
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.poll();
      SQLUtil.renderValue((Object) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("update", stringArray0, "*xME[;", "*$z]", stringArray0);
      assertEquals("left join *xME[; as *$z] on ", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLUtil.removeComments("58~o:!NV4Qe");
      SQLUtil.isQuery("58~o:!NV4Qe");
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.removeComments("Gp1");
      SQLUtil.renderValue("Gp1");
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("Q%})pomksjUT_", stringArray0, "Gp1", "`qXspD}e$7jmiD8", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "functio";
      String string1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLUtil.removeComments("58~o:!NV4Qe");
      System.setCurrentTimeMillis((-2332L));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setPassword("execute()");
      StringBuilder stringBuilder1 = new StringBuilder();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "drop indexd_r$q5*v`b5}:l$";
      stringArray0[1] = "d_r$q5";
      stringArray0[2] = "execute()";
      stringArray0[3] = "selectexecdrop sequence having";
      stringArray0[4] = "drop indexd_r$q5*v`b5}:l$";
      stringArray0[5] = "execute()";
      stringArray0[5] = "d_r$q5";
      stringArray0[7] = "d_r$q5";
      SQLUtil.renderColumnListWithTableName("selectexecdrop sequence having", stringArray0);
      SQLUtil.innerJoin("drop indexd_r$q5*v`b5}:l$", stringArray0, "d_r$q5", (String) null, stringArray0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1994566884), "selectexecdrop sequence having");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("d_r$q5 as null on drop indexd_r$q5*v`b5}:l$.drop indexd_r$q5*v`b5}:l$ = null.drop indexd_r$q5*v`b5}:l$ and drop indexd_r$q5*v`b5}:l$.d_r$q5 = null.d_r$q5 and drop indexd_r$q5*v`b5}:l$.execute() = null.execute() and drop indexd_r$q5*v`b5}:l$.selectexecdrop sequence having = null.selectexecdrop sequence having and drop indexd_r$q5*v`b5}:l$.drop indexd_r$q5*v`b5}:l$ = null.drop indexd_r$q5*v`b5}:l$ and drop indexd_r$q5*v`b5}:l$.d_r$q5 = null.d_r$q5 and drop indexd_r$q5*v`b5}:l$.null = null.null and drop indexd_r$q5*v`b5}:l$.d_r$q5 = null.d_r$q5", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder1, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "58~o:!NV4Qe";
      SQLUtil.removeComments("58~o:!NV4Qe");
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("d_r$q5", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLUtil.removeComments("58~o:!NV4Qe");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "58~o:!NV4Qe";
      stringArray0[1] = "d_r$q5";
      stringArray0[2] = "58~o:!NV4Qe";
      stringArray0[3] = "58~o:!NV4Qe";
      SQLUtil.renderColumnListWithTableName("58~o:!NV4Qe", stringArray0);
      String string0 = SQLUtil.renderColumnListWithTableName("58~o:!NV4Qe.58~o:!NV4Qe, 58~o:!NV4Qe.d_r$q5, 58~o:!NV4Qe.58~o:!NV4Qe, 58~o:!NV4Qe.58~o:!NV4Qe", stringArray0);
      assertEquals("58~o:!NV4Qe.58~o:!NV4Qe, 58~o:!NV4Qe.d_r$q5, 58~o:!NV4Qe.58~o:!NV4Qe, 58~o:!NV4Qe.58~o:!NV4Qe.58~o:!NV4Qe, 58~o:!NV4Qe.58~o:!NV4Qe, 58~o:!NV4Qe.d_r$q5, 58~o:!NV4Qe.58~o:!NV4Qe, 58~o:!NV4Qe.58~o:!NV4Qe.d_r$q5, 58~o:!NV4Qe.58~o:!NV4Qe, 58~o:!NV4Qe.d_r$q5, 58~o:!NV4Qe.58~o:!NV4Qe, 58~o:!NV4Qe.58~o:!NV4Qe.58~o:!NV4Qe, 58~o:!NV4Qe.58~o:!NV4Qe, 58~o:!NV4Qe.d_r$q5, 58~o:!NV4Qe.58~o:!NV4Qe, 58~o:!NV4Qe.58~o:!NV4Qe.58~o:!NV4Qe", string0);
      
      String string1 = SQLUtil.normalize("-\"<j8=V$|", true);
      assertEquals("- \"<j8=V$|\"", string1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(constraintDescriptorList0, constraintDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("null = null", "null = null", versionNumber0);
      defaultDatabase0.getTable("null = null", false);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("null = null", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("drop table", stringBuilder1);
      StringBuilder stringBuilder3 = stringBuilder2.append("XSCH7.S");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      StringBuilder stringBuilder4 = stringBuilder3.append('q');
      int int0 = (-3);
      String string0 = "drop table";
      // Undeclared exception!
      try { 
        stringBuilder4.replace((-3), (-3), "drop table");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null, (CompositeDBObject<? extends DBObject>) null);
      tableContainer0.getSchema();
      DBTrigger dBTrigger0 = new DBTrigger("58~o:!NV4Qe", (DBSchema) null);
      SQLUtil.ownerDotComponent(dBTrigger0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("X0X05.S");
      SQLUtil.removeComments("X0X05.S");
      String string0 = "";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "X0X05.S";
      stringArray0[1] = null;
      stringArray0[2] = "58~o:!NV4Qe";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string1 = "(W<HZBuEQK{OAZU";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "X0X05.S";
      stringArray1[1] = "";
      stringArray1[2] = "(W<HZBuEQK{OAZU";
      stringArray0[0] = "X0X05.S";
      stringArray1[4] = "";
      stringArray1[5] = "X0X05.S";
      stringArray1[6] = "X0X05.S";
      SQLUtil.leftJoin("58~o:!NV4Qe", stringArray1, "ALTER TABLE ", stringArray0[1], stringArray1);
      SQLUtil.typeAndName(dBTrigger0);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("left join ALTER TABLE  as null on 58~o:!NV4Qe.X0X05.S = null.X0X05.S and 58~o:!NV4Qe. = null. and 58~o:!NV4Qe.(W<HZBuEQK{OAZU = null.(W<HZBuEQK{OAZU and 58~o:!NV4Qe.null = null.null and 58~o:!NV4Qe. = null. and 58~o:!NV4Qe.X0X05.S = null.X0X05.S and 58~o:!NV4Qe.X0X05.S = null.X0X05.S", false, (DBTable) null, "(W<HZBuEQK{OAZU");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBCheckConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SQLUtil.isProcedureCall("drop indexcreate materialized view");
      SQLUtil.parseColumnTypeAndSize("\nHAVING ");
      DBSequence dBSequence0 = new DBSequence("\nHAVING ", " or ", "P:D");
      Long long0 = Long.valueOf((-2546L));
      dBSequence0.dropDDL();
      dBSequence0.setCache(long0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      dBSequence0.dropDDL();
      dBSequence0.getIncrementIfNotDefault();
      SQLUtil.typeAndName(dBSequence0);
      SQLUtil.isDDL("insert");
      SQLUtil.isProcedureCall("drop sequence \nHAVING ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLUtil.removeComments("pqm_=aok<SI`J$j");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder();
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("d_r$q5", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setPassword("execute()");
      pGConnectionPoolDataSource0.setPortNumber(90126);
      JdbcConnectionPool.create((ConnectionPoolDataSource) pGConnectionPoolDataSource0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("execute()");
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "mis";
      SQLUtil.removeComments("null = null");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, defaultDBTable0, "mis");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      SQLUtil.constraintName(dBCheckConstraint0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("mis");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'mis' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "Gp1";
      SQLUtil.removeComments("Gp1");
      SQLUtil.renderValue("Gp1");
      int int0 = 222;
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("~.2SywQv.Bz7%4R", stringBuilder0);
      int int1 = 1845;
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = '9';
      charArray0[2] = 'M';
      charArray0[3] = '-';
      int int2 = (-1883583042);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(1845, charArray0, (-1883583042), 1845);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1845
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setPassword(",(BQ%");
      SQLUtil.isQuery("");
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) pGConnectionPoolDataSource0);
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLUtil.removeComments("Gp1");
      SQLUtil.renderValue("Gp1");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Gp1";
      stringArray0[1] = "bW|Eaj+I=cdDZDU";
      stringArray0[2] = null;
      stringArray0[3] = ", isNameQuoted=";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin((String) null, (String[]) null, (String) null, ", isNameQuoted=", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "Gp1";
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.mutatesDataOrStructure("null = null");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Vf6n-ir5", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("P", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("hW,@&gv{p4bLDG(:I", true, dBTable0, stringArray0, dBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.append((CharSequence) "hW,@&gv{p4bLDG(:I", 4668, 4668);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 4668, end 4668, s.length() 17
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "alter materialized viewelvsy";
      SQLUtil.isDDL("alter table");
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder();
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setPassword("execute()");
      SQLUtil.isQuery("execute()");
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) pGConnectionPoolDataSource0);
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "alter materialized viewelvsy";
      stringArray0[1] = "alter materialized viewelvsy";
      stringArray0[2] = " REFERENCES ";
      stringArray0[3] = "alter materialized viewelvsy";
      stringArray0[4] = "alter materialized viewelvsy";
      stringArray0[5] = "alter materialized viewelvsy";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter materialized viewelvsy", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      String string1 = SQLUtil.removeComments("Q`3bX%6E");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      slaveDatabase0.getDataDictionary();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      dataDictionaryImpl0.getDeclaredGlobalTemporaryTablesSchemaDescriptor();
      TableDescriptor tableDescriptor0 = new TableDescriptor((DataDictionary) null, " NOT NULL", (SchemaDescriptor) null, 0, false, false);
      ColumnDescriptorList columnDescriptorList0 = tableDescriptor0.getColumnDescriptorList();
      ColumnDescriptorList columnDescriptorList1 = new ColumnDescriptorList();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(5);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule((Runnable) mockThread1, (-2070L), timeUnit0);
      columnDescriptorList0.add((Object) scheduledFuture0);
      columnDescriptorList0.containsAll(columnDescriptorList1);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      DBDataType dBDataType0 = DBDataType.getInstance(8, "alter tablfxesectp1");
      DBSchema dBSchema0 = new DBSchema("alter materialized viewnosettings");
      dBSchema0.setDoc("alter tablfxesectp1");
      dBSchema0.setDoc("alter materialized viewnosettings");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter tablfxesectp1", (DBSchema) null);
      Object object0 = new Object();
      defaultDBTable0.equals(object0);
      LinkedList<DBTable> linkedList0 = new LinkedList<DBTable>();
      defaultDBTable0.getComponents();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null);
      defaultDBTable1.setName("alter tablfxesectp1");
      String[] stringArray0 = new String[1];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = SQLUtil.join("alter materialized viewnosettings", "Xy", stringArray0, "Xy", "Xy", stringArray0);
      assertEquals("alter materialized viewnosettings join Xy as Xy on Xy.null = Xy.null", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tablfxesectp1");
      assertNull(boolean0);
      
      LinkedList<DBColumn> linkedList1 = new LinkedList<DBColumn>();
      String string1 = SQLUtil.typeAndName(dBSchema0);
      assertNotNull(string1);
      assertEquals("schema alter materialized viewnosettings", string1);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("4IE:0]?#|d;Z^Ok2<}", defaultDBTable0, dBDataType0);
      linkedList1.add((DBColumn) defaultDBColumn0);
      linkedList1.add((DBColumn) defaultDBColumn0);
      String string2 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList1);
      assertEquals("4IE:0]?#|d;Z^Ok2<}, 4IE:0]?#|d;Z^Ok2<}", string2);
      
      SQLUtil.isDDL("0_eC;\u0000?v5!}`");
      SQLUtil.renderColumnNames(stringArray0);
      String string3 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string3);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.removeComments("Gp1");
      Character character0 = new Character('9');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'9'", string0);
      
      String string1 = SQLUtil.leftJoin("'9'", stringArray0, "Gp1", "'9'", stringArray0);
      assertEquals("left join Gp1 as '9' on '9'.null = '9'.null", string1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null", string0);
      
      SQLUtil.renderValue(stringArray0[0]);
      String string1 = SQLUtil.leftJoin("mis", stringArray0, stringArray0[0], stringArray0[0], stringArray0);
      assertEquals("left join null as null on mis.null = null.null", string1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      SQLUtil.renderValue("");
      SQLUtil.leftJoin("renameelvsy", stringArray0, "Gp1", (String) null, stringArray0);
      SQLUtil.join("", "q{(F&s", stringArray0, "create tableelvsy", "alter materialized view", stringArray0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID("!$:1W(=Izuvh");
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getForeignKeys(basicUUID0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = SQLUtil.removeComments("Gp1");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder();
      Object object0 = new Object();
      String string1 = SQLUtil.substituteMarkers("8J", "l'z&\"z<!owcyxl?>,;", object0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.removeComments("Mp1");
      SQLUtil.join("MODE_TABLE", "Mp1", stringArray0, stringArray0[0], "", stringArray0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) pGConnectionPoolDataSource0);
      PrintWriter printWriter0 = jdbcConnectionPool0.getLogWriter();
      assertNull(printWriter0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLUtil.isDDL("L'Z&\"z<!OwCyxL?>,;");
      String string0 = "nuwIx4";
      boolean boolean0 = true;
      DBSchema dBSchema0 = new DBSchema("%.4/Hk;<.2<lBoS=}");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(607);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 607, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "org.h2.command.ddl.dropfunctionalias";
      SQLUtil.parseColumnTypeAndSize("org.h2.command.ddl.dropfunctionalias");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Table.addColumn");
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "drop table", false, "_(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '_(' not found in table 'Table.addColumn'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      SQLUtil.removeComments("Gp1");
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getUniqueConstraint(stringArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Gp1");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      NameSpec nameSpec1 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      SQLUtil.removeComments("Gp1");
      String string0 = "MODE_TABLE";
      SQLUtil.join("MODE_TABLE", "Gp1", stringArray0, "", "AJ8}D?#Z;LMI", stringArray0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getForeignKeys(basicUUID0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String[] stringArray1 = new String[5];
      stringArray1[0] = "w,.sS.U";
      stringArray1[1] = "w,.sS.U";
      stringArray1[2] = "org.h2.command.ddl.DropFunctionAlias";
      stringArray1[4] = "org.h2.command.ddl.DropFunctionAlias";
      SQLUtil.leftJoin("org.h2.command.ddl.DropFunctionAlias", stringArray0, "org.h2.command.ddl.DropFunctionAlias", "org.h2.command.ddl.DropFunctionAlias", stringArray1);
      String string0 = "oi}xZ";
      // Undeclared exception!
      try { 
        SQLUtil.join("org.h2.command.ddl.DropFunctionAlias", (String) null, stringArray1, "0<7/I+;7G$\"#)cefMn", "=+SI\r/5L7D", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.h2.command.ddl.DropFunctionAlias";
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(122, threadFactory0, threadPoolExecutor_AbortPolicy0);
      Thread thread0 = MockThread.currentThread();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      scheduledThreadPoolExecutor0.scheduleWithFixedDelay(thread0, (-555L), 122, timeUnit0);
      String string0 = SQLUtil.renderValue(threadPoolExecutor_AbortPolicy0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.h2.command.ddl.DropFunctionAlias";
      stringArray0[1] = "org.h2.command.ddl.DropFunctionAlias";
      String string0 = "";
      String string1 = "6";
      SQLUtil.removeComments("");
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("drop table", false, "_DSkDcfa7i;", "_DSkDcfa7i;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.h2.command.ddl.DropFunctionAlias";
      String string0 = "getByte";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "org.h2.command.ddl.DropFunctionAlias";
      stringArray1[1] = "getByte";
      stringArray1[2] = "=+SI\r/5L7D";
      stringArray1[3] = "=+SI\r/5L7D";
      stringArray1[4] = "^%Zm2 ";
      stringArray1[5] = "oi}xZ";
      stringArray1[6] = "=+SI\r/5L7D";
      // Undeclared exception!
      try { 
        SQLUtil.join("^%Zm2 ", "getByte", stringArray1, "org.h2.command.ddl.DropFunctionAlias", "getByte", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "fiG]!1Fp?8";
      stringArray0[2] = "";
      stringArray0[3] = "r}";
      String string0 = "8'gVcQ)O+DDX#~.L";
      stringArray0[4] = "8'gVcQ)O+DDX#~.L";
      stringArray0[5] = ";9~8gZg";
      stringArray0[6] = stringArray0[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.innerJoin("'@/", stringArray0, ";9~8gZg", "null = null AND fiG]!1Fp?8 = 'fiG]!1Fp?8' AND  = '' AND r} = 'r}' AND 8'gVcQ)O+DDX#~.L = '8'gVcQ)O+DDX#~.L' AND ;9~8gZg = ';9~8gZg' AND null = null", stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.renderColumnListWithTableName("Disconnect called while not connected", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure(stringArray0[6]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("4hMBxqUwz/B%M!]&L'");
      assertNull(boolean0);
      
      SQLUtil.mutatesStructure("constraint");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("constraint");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "constraint";
      stringArray0[1] = null;
      stringArray0[2] = "constraint";
      stringArray0[3] = null;
      stringArray0[4] = "4hMBxqUwz/B%M!]&L'";
      stringArray0[5] = null;
      stringArray0[6] = "4hMBxqUwz/B%M!]&L'";
      stringArray0[7] = "4hMBxqUwz/B%M!]&L'";
      stringArray0[8] = "constraint";
      defaultDBTable0.setSchema((DBSchema) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      dBPrimaryKeyConstraint0.toString();
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (constraint, , constraint, , 4hMBxqUwz/B%M!]&L', , 4hMBxqUwz/B%M!]&L', 4hMBxqUwz/B%M!]&L', constraint)", string0);
      
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("constraint = 'constraint' AND null = null AND constraint = 'constraint' AND null = null AND 4hMBxqUwz/B%M!]&L' = '4hMBxqUwz/B%M!]&L'' AND null = null AND 4hMBxqUwz/B%M!]&L' = '4hMBxqUwz/B%M!]&L'' AND 4hMBxqUwz/B%M!]&L' = '4hMBxqUwz/B%M!]&L'' AND constraint = 'constraint'", string1);
      
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.mutatesDataOrStructure("info.CACHE_SIZE");
      SQLUtil.mutatesStructure("info.CACHE_SIZE");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("xD#&Pwt&Qc+]~?1");
      defaultDBTable0.setSchema((DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      String string0 = "callsyscs_compress_table";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      SQLUtil.leftJoin("callsyscs_compress_table", stringArray0, "callsyscs_compress_table", "callsyscs_compress_table", stringArray0);
      SQLUtil.mutatesDataOrStructure("DELETE FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = -2;");
      SQLUtil.isDML("left join callsyscs_compress_table as callsyscs_compress_table on callsyscs_compress_table. = callsyscs_compress_table.");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      StringBuilder stringBuilder1 = stringBuilder0.append("");
      SQLUtil.addRequiredCondition("", stringBuilder1);
      SQLUtil sQLUtil0 = new SQLUtil();
      String string1 = "";
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      TableContainer tableContainer0 = new TableContainer(".");
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "- ";
      stringArray0[1] = "fiG]!1Fp?8";
      stringArray0[2] = "";
      stringArray0[3] = "r}";
      String string0 = "8'gVcQ)O+DDX#~.L";
      stringArray0[4] = "8'gVcQ)O+DDX#~.L";
      stringArray0[5] = ";9~8gZg";
      String string1 = "SYSCS_COMPRESS_TABLE";
      stringArray0[6] = "SYSCS_COMPRESS_TABLE";
      SQLUtil.removeComments("8'gVcQ)O+DDX#~.L");
      SQLUtil.innerJoin("'@/", stringArray0, ";9~8gZg", "8'gVcQ)O+DDX#~.L", stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.removeComments(" join ");
      SQLUtil.renderColumnListWithTableName("Disconnect called while not connected", stringArray0);
      SQLUtil.mutatesDataOrStructure("SYSCS_COMPRESS_TABLE");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (- , fiG]!1Fp?8, , r}, 8'gVcQ)O+DDX#~.L, ;9~8gZg, SYSCS_COMPRESS_TABLE)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderValue(stringArray0[0]);
      String string0 = "w,.sS.U";
      SQLUtil.leftJoin("null", stringArray0, "null", "w,.sS.U", stringArray0);
      String string1 = "oi}xZ";
      SQLUtil.join("/e5]Zs(tUwbB j\"t}", "^%Zm2 ", stringArray0, "oi}xZ", "=+SI\r/5L7D", stringArray0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getForeignKeys(basicUUID0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.isProcedureCall("()");
      SQLUtil.normalize("()", false);
      DBSchema dBSchema0 = new DBSchema("()");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("()", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "()", false, stringArray0);
      dBUniqueConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      String string0 = null;
      String string1 = null;
      SQLUtil.join((String) null, (String) null, stringArray0, (String) null, "select", stringArray0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getForeignKeys(basicUUID0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.h2.command.ddl.DropFunctionAlias";
      stringArray0[1] = "org.h2.command.ddl.DropFunctionAlias";
      SQLUtil.leftJoin("org.h2.command.ddl.DropFunctionAlias", stringArray0, "", "", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = 142;
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(142);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 142, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.mutatesStructure("()");
      SQLUtil.renderValue("()");
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = ";zSa%9Q^;=N@6j,wj";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        dBCatalog0.getTable(";zSa%9Q^;=N@6j,wj", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table ';zSa%9Q^;=N@6j,wj'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1853);
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = '\'';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) stringBuilder0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder2, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "is6Cgwi_Agk9f2";
      stringArray0[1] = "vNQdB\n08Y#F";
      stringArray0[2] = "--";
      stringArray0[3] = "";
      stringArray0[4] = "<^G@RAlelPPjm#d";
      stringArray0[5] = "}*C7s#CVe";
      stringArray0[6] = "";
      stringArray0[7] = "ui|Dn2+n!";
      stringArray0[8] = "";
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "getDDLResultSet";
      stringArray0[1] = "getDDLResultSet";
      stringArray0[2] = "getDDLResultSet";
      stringArray0[3] = "getDDLResultSet";
      stringArray0[4] = "getDDLResultSet";
      stringArray0[5] = "getDDLResultSet";
      stringArray0[6] = "getDDLResultSet";
      String string0 = "DELETE FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = -2;";
      stringArray0[7] = "DELETE FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = -2;";
      SQLUtil.leftJoin("getDDLResultSet", stringArray0, "getDDLResultSet", "", stringArray0);
      SQLUtil.mutatesDataOrStructure("");
      SQLUtil.isDML("DELETE FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = -2;");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "DELETE FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = -2;");
      stringBuilder0.append("getDDLResultSet");
      SQLUtil.addRequiredCondition("F_$n(.", stringBuilder0);
      SQLUtil sQLUtil0 = new SQLUtil();
      String string1 = "";
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      String string2 = "";
      TableContainer tableContainer0 = new TableContainer("");
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "";
      SQLUtil.mutatesStructure("");
      boolean boolean0 = true;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      int int0 = (-1131);
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider((-1131));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SQLUtil.typeAndName((DBObject) null);
      JMXPrincipal jMXPrincipal0 = null;
      try {
        jMXPrincipal0 = new JMXPrincipal((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // illegal null input
         //
         verifyException("javax.management.remote.JMXPrincipal", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DBConstraint dBConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library.";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library.";
      stringArray0[1] = "Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library.";
      stringArray0[2] = ".^HCy)&mMGn?/4n";
      stringArray0[3] = "Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library.";
      String string1 = "";
      stringArray0[4] = "";
      stringArray0[5] = "Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library.";
      stringArray0[6] = "Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library.";
      stringArray0[7] = "Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library.";
      SQLUtil.innerJoin("Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library.", stringArray0, ".^HCy)&mMGn?/4n", "Failed to initilize Jaybird native library. This is most likley due to a failure to load the firebird client library.", stringArray0);
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      boolean boolean0 = false;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string2 = "";
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "derby.locks.deadlockTimeout";
      stringArray0[1] = "derby.locks.deadlockTimeout";
      stringArray0[2] = "ZYMIwKg";
      stringArray0[3] = "org.apache.derby.impl.sql.compile.HasNodeVisitor";
      stringArray0[4] = "r";
      stringArray0[5] = "derby.locks.deadlockTimeout";
      String string0 = SQLUtil.renderColumnListWithTableName("derby.locks.deadlockTimeout", stringArray0);
      assertEquals("derby.locks.deadlockTimeout.derby.locks.deadlockTimeout, derby.locks.deadlockTimeout.derby.locks.deadlockTimeout, derby.locks.deadlockTimeout.ZYMIwKg, derby.locks.deadlockTimeout.org.apache.derby.impl.sql.compile.HasNodeVisitor, derby.locks.deadlockTimeout.r, derby.locks.deadlockTimeout.derby.locks.deadlockTimeout", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SQLUtil.removeComments("ybyExOze\"H");
      System.setCurrentTimeMillis(0L);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("ybyExOze\"H");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      slaveDatabase0.getDataDictionary();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      dataDictionaryImpl0.getDeclaredGlobalTemporaryTablesSchemaDescriptor();
      TableDescriptor tableDescriptor0 = new TableDescriptor((DataDictionary) null, " NOT NULL", (SchemaDescriptor) null, 0, false, false);
      ColumnDescriptorList columnDescriptorList0 = tableDescriptor0.getColumnDescriptorList();
      ColumnDescriptorList columnDescriptorList1 = new ColumnDescriptorList();
      columnDescriptorList0.containsAll(columnDescriptorList1);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = "Gp1";
      SQLUtil.innerJoin("", stringArray0, "Gp1", "Gp1", stringArray0);
      String string1 = "t[=6h,_'N(KO:HAE\\>";
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = 0;
      int int1 = 1415;
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, 0);
      // Undeclared exception!
      try { 
        stringBuilder1.append((CharSequence) "", 222, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 222, end 0, s.length() 0
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Bt6E0up";
      SQLUtil.renderColumnNames(stringArray0);
      String string0 = "G_gTH+g;";
      SQLUtil.normalize("G_gTH+g;", true);
      SQLUtil.isDML("Bt6E0up");
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.mutatesDataOrStructure("G_gTH+g;");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable1.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (Bt6E0up)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "Maximum number of rows must be a value grater than or equal to 0.";
      String string0 = "'";
      stringArray0[2] = "'";
      stringArray0[3] = "u'*j:sNDp";
      stringArray0[4] = "3JS";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.substituteMarkers("Cannot set transaction parameters when transaction is already started.", "", "u'*j:sNDp");
      SQLUtil.isQuery("u'*j:sNDp");
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("u'*j:sNDp", compositeDBObject0);
      tableContainer0.getTable("u'*j:sNDp");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("selectinsertg5'lflax1gcna@[v[");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SQLUtil.isDML("SAUuEO^7qDg");
      SQLUtil.substituteMarkers("SAUuEO^7qDg", "SAUuEO^7qDg", "SAUuEO^7qDg");
      DBTable dBTable0 = null;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "SAUuEO^7qDg";
      stringArray0[1] = "'SAUuEO^7qDg'";
      stringArray0[2] = "'SAUuEO^7qDg'";
      stringArray0[3] = "SAUuEO^7qDg";
      stringArray0[4] = "'SAUuEO^7qDg'";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, "SAUuEO^7qDg", true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "", versionNumber0);
      String string0 = "Pp1#GmI8TRv?iKHJ";
      defaultDatabase0.getTable("Pp1#GmI8TRv?iKHJ", false);
      versionNumber0.toString();
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      String string0 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("null.null, null.null, null.null, null.null, null.null", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.isProcedureCall("()");
      SQLUtil.normalize("()", false);
      DBSchema dBSchema0 = new DBSchema("()");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("()", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "()", false, stringArray0);
      dBUniqueConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      String string0 = null;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, 205, "rE2H59g%vD");
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("4hMBxqUwz/B%M!]&L'");
      assertNull(boolean0);
      
      SQLUtil.mutatesStructure("constraint");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("constraint");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "constraint";
      stringArray0[1] = null;
      stringArray0[2] = "constraint";
      stringArray0[3] = null;
      stringArray0[4] = "4hMBxqUwz/B%M!]&L'";
      stringArray0[5] = null;
      stringArray0[6] = "4hMBxqUwz/B%M!]&L'";
      stringArray0[7] = "4hMBxqUwz/B%M!]&L'";
      stringArray0[8] = "constraint";
      defaultDBTable0.setSchema((DBSchema) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (constraint, , constraint, , 4hMBxqUwz/B%M!]&L', , 4hMBxqUwz/B%M!]&L', 4hMBxqUwz/B%M!]&L', constraint)", string0);
      
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("constraint = 'constraint' AND null = null AND constraint = 'constraint' AND null = null AND 4hMBxqUwz/B%M!]&L' = '4hMBxqUwz/B%M!]&L'' AND null = null AND 4hMBxqUwz/B%M!]&L' = '4hMBxqUwz/B%M!]&L'' AND 4hMBxqUwz/B%M!]&L' = '4hMBxqUwz/B%M!]&L'' AND constraint = 'constraint'", string1);
  }
}
