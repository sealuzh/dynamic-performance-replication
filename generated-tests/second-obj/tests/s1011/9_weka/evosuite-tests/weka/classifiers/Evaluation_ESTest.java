/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:44:08 GMT 2018
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Locale;
import java.util.Random;
import java.util.TimeZone;
import javax.swing.JTree;
import javax.swing.plaf.nimbus.NimbusStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.ReliefFAttributeEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.LWL;
import weka.classifiers.lazy.kstar.KStarConstants;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.M5P;
import weka.classifiers.trees.m5.RuleNode;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.CoverTree;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.estimators.UnivariateKernelEstimator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      try { 
        Evaluation.wekaStaticWrapper(decisionStump0, ".xml");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.DecisionStump", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numInstances();
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      double double1 = evaluation0.rootMeanSquaredError();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[2];
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Evaluation.makeOptionString((Classifier) null, false);
      IBk iBk0 = new IBk();
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCost;
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = NimbusStyle.MINI_SCALE;
      double double3 = evaluation0.falsePositiveRate((-66));
      assertEquals(0.0, double3, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      try { 
        Evaluation.handleCostOption("Lno", 2659);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPredicted;
      double double1 = evaluation0.m_SumPredicted;
      evaluation0.incorrect();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.toSummaryString();
      evaluation0.errorRate();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      XRFFLoader xRFFLoader1 = new XRFFLoader();
      evaluation0.setNumericPriorsFromBuffer();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[5];
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(false);
      M5Rules m5Rules0 = new M5Rules();
      // Undeclared exception!
      try { 
        m5Rules0.getM5RootNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.m5.M5Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String string0 = null;
      textDirectoryLoader0.setRetrieval(169);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.toMatrixString();
      evaluation0.SFMeanPriorEntropy();
      double double1 = evaluation0.m_TotalCost;
      double double2 = NimbusStyle.MINI_SCALE;
      CostMatrix costMatrix0 = null;
      CostMatrix costMatrix1 = null;
      try {
        costMatrix1 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[5];
      textDirectoryLoader0.setRetrieval(1176);
      TextDirectoryLoader.main(stringArray0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(true);
      Vote vote0 = new Vote();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, (int[]) null, 78);
      IBk iBk0 = new IBk(2147483645);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) iBk0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPredicted;
      evaluation0.SFMeanPriorEntropy();
      evaluation0.SFMeanSchemeEntropy();
      String[] stringArray0 = new String[2];
      double double1 = KStarConstants.LOG2;
      evaluation0.truePositiveRate(25);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ClassPriorsSum;
      evaluation0.weightedPrecision();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.setDiscardPredictions(true);
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.weightedMatthewsCorrelation();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("B");
      String[] stringArray0 = new String[5];
      textDirectoryLoader0.setRetrieval(1343);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double double0 = NimbusStyle.MINI_SCALE;
      evaluation0.weightedPrecision();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable0.setDebug(false);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) naiveBayesMultinomialUpdateable0, instances0, 1343, (Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.reset();
      double double0 = evaluation0.m_SumPredicted;
      double double1 = evaluation0.m_SumClassPredicted;
      evaluation0.useNoPriors();
      instances0.stratify(68);
      evaluation0.SFMeanEntropyGain();
      evaluation0.SFSchemeEntropy();
      evaluation0.rootRelativeSquaredError();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[5];
      textDirectoryLoader0.setRetrieval((-2398));
      TextDirectoryLoader.main(stringArray0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.unclassified();
      evaluation0.KBMeanInformation();
      evaluation0.falsePositiveRate((-990));
      Evaluation.main(stringArray0);
      evaluation0.addNumericTrainClass(873.5603464, (-121.60906561706935));
      evaluation0.fMeasure((-2398));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[1];
      TextDirectoryLoader.main(stringArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.setClassifier(costSensitiveClassifier0);
      Evaluation.makeOptionString(costSensitiveClassifier0, true);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      char[] charArray0 = new char[2];
      evaluation0.num2ShortID(5522, charArray0, 5522);
      double double0 = evaluation0.m_MissingClass;
      evaluation0.correct();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      String string0 = JTree.EXPANDS_SELECTED_PATHS_PROPERTY;
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.avgCost();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Wzf vNl]gD,");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      instances0.equalHeadersMsg(instances0);
      CoverTree coverTree0 = new CoverTree();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setRetrieval(3784);
      Instances instances1 = new Instances(instances0, 2);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.unclassified();
      evaluation0.falsePositiveRate((-2908));
      evaluation0.numTruePositives((-2));
      evaluation0.rootRelativeSquaredError();
      evaluation0.meanAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Wzf vNl]gD,");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.numInstances();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      evaluation0.KBMeanInformation();
      M5P m5P0 = new M5P();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_NoPriors;
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      evaluation0.toClassDetailsString();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(0.1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Wzf vNl]gD,");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      instances0.equalHeadersMsg(instances0);
      CoverTree coverTree0 = new CoverTree();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setRetrieval(3784);
      Instances instances1 = new Instances(instances0, 2);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.unclassified();
      evaluation0.weightedPrecision();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.setDiscardPredictions(false);
      try { 
        Evaluation.evaluateModel((Classifier) inputMappedClassifier0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.misc.InputMappedClassifier:
         // 
         // -I
         // \tIgnore case when matching attribute names and nominal values.
         // -M
         // \tSuppress the output of the mapping report.
         // -trim
         // \tTrim white space from either end of names before matching.
         // -L <path to model to load>
         // \tPath to a model to load. If set, this model
         // \twill be used for prediction and any base classifier
         // \tspecification will be ignored. Environment variables
         // \tmay be used in the path (e.g. ${HOME}/myModel.model)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.rules.ZeroR)
         // 
         // Options specific to classifier weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumAbsErr = (-1.0);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.numTruePositives((-1));
      evaluation0.matthewsCorrelationCoefficient(11);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(11);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("MUYh/_uZL3@h");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      costSensitiveClassifier0.getCostMatrix();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.unclassified();
      evaluation0.KBMeanInformation();
      evaluation0.falsePositiveRate(0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double double0 = NimbusStyle.MINI_SCALE;
      evaluation0.toMatrixString("@data");
      evaluation0.weightedAreaUnderPRC();
      evaluation0.totalCost();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("MUYh/_uZL3@h");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numInstances();
      evaluation0.kappa();
      evaluation0.rootMeanSquaredError();
      evaluation0.toMatrixString(".arff");
      try { 
        Evaluation.evaluateModel("", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@relation";
      stringArray0[1] = "such";
      stringArray0[2] = "@relation";
      stringArray0[3] = ".bsi";
      stringArray0[4] = "@relation";
      stringArray0[5] = ".arff";
      evaluation0.KBMeanInformation();
      char[] charArray0 = new char[2];
      charArray0[1] = '0';
      evaluation0.num2ShortID(5522, charArray0, 11);
      evaluation0.SFMeanEntropyGain();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[3];
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      M5P m5P0 = new M5P();
      evaluation0.evaluateModel((Classifier) m5P0, instances0, (Object[]) stringArray0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.trueNegativeRate(25);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setDisplayModelInOldFormat");
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      AbstractClassifier.runClassifier(gaussianProcesses0, testInstances0.DEFAULT_WORDS);
      SparseInstance sparseInstance0 = new SparseInstance(1);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.relativeAbsoluteError();
      try { 
        Evaluation.handleCostOption(" -1       0    \n", 93);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate("Wzf vNl]gD,");
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1), (-2));
      double double0 = evaluation0.m_SumSchemeEntropy;
      double double1 = NimbusStyle.MINI_SCALE;
      evaluation0.weightedAreaUnderROC();
      J48 j48_0 = new J48();
      AbstractClassifier.runClassifier(j48_0, testInstances0.DEFAULT_WORDS);
      evaluation0.sizeOfPredictedRegions();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.kappa();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.setDiscardPredictions(true);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double2 = 1013.254518;
      evaluation1.getHeader();
      try { 
        evaluation1.updateStatsForPredictor(4.8, instance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      M5P m5P0 = new M5P();
      evaluation0.falsePositiveRate(1841);
      evaluation0.numTruePositives(1841);
      evaluation0.rootRelativeSquaredError();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPredicted;
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double1 = evaluation0.m_SumClassPredicted;
      instances0.stratify(68);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.toSummaryString(true);
      evaluation0.incorrect();
      evaluation0.KBRelativeInformation();
      evaluation0.weightedTrueNegativeRate();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      double double0 = evaluation0.m_ConfLevel;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toSummaryString();
      evaluation0.falseNegativeRate(15);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.numInstances();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@relation";
      stringArray0[1] = ".bsi";
      TextDirectoryLoader.main(stringArray0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation.k_MarginResolution = 20;
      evaluation1.updateNumericScores((double[]) null, (double[]) null, 4.6);
      evaluation1.KBInformation();
      String[] stringArray1 = new String[8];
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      textDirectoryLoader0.setSource(file0);
      stringArray1[2] = "@data";
      stringArray1[6] = ".bsi";
      Evaluation.main(stringArray1);
      evaluation0.addNumericTrainClass(300.0, 1190.935880561354);
      evaluation1.fMeasure(1781);
      evaluation0.toCumulativeMarginDistributionString();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.relativeAbsoluteError();
      Evaluation.handleCostOption("", 20);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[5];
      textDirectoryLoader0.setRetrieval(515);
      TextDirectoryLoader.main(stringArray0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.enumerateAttributes();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.unclassified();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      instances0.clear();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double[] doubleArray0 = evaluation0.evaluateModel((Classifier) costSensitiveClassifier0, instances0, (Object[]) stringArray0);
      evaluation0.setDiscardPredictions(true);
      costSensitiveClassifier0.getCostMatrixSource();
      evaluation0.weightedFalseNegativeRate();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) costSensitiveClassifier0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("MUYh/_uZL3@h");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[8];
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      Stacking stacking0 = new Stacking();
      evaluation0.evaluateModel((Classifier) stacking0, instances0, (Object[]) stringArray0);
      evaluation0.setDiscardPredictions(false);
      evaluation0.SFEntropyGain();
      try { 
        Evaluation.evaluateModel((Classifier) stacking0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setRetrieval(5);
      String[] stringArray0 = new String[0];
      TextDirectoryLoader.main(stringArray0);
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      textDirectoryLoader1.setDebug(false);
      instances0.enumerateAttributes();
      LWL lWL0 = new LWL();
      lWL0.enumerateMeasures();
      MockRandom mockRandom0 = new MockRandom();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("CCst1Lf8zDPB9>%F", arrayList0, 479);
      try { 
        evaluation0.crossValidateModel("CCst1Lf8zDPB9>%F", instances1, (-661), stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: CCst1Lf8zDPB9>%F
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate("Wzf vNl]gD,");
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.unclassified();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      textDirectoryLoader0.setCharSet("H|>M1X1RyJA'SKx2 E;");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      instances1.clear();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.trueNegativeRate((-2));
      double double0 = KStarConstants.INITIAL_STEP;
      evaluation0.weightedPrecision();
      textDirectoryLoader0.setRetrieval((-1));
      evaluation0.SFPriorEntropy();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      evaluation0.correct();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.weightedFalsePositiveRate();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = testInstances0.generate("Wzf vNl]gD,");
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1), (-4296.1));
      double double0 = KStarConstants.INITIAL_STEP;
      double double1 = NimbusStyle.MINI_SCALE;
      evaluation0.weightedAreaUnderROC();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      instances0.clear();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double[] doubleArray0 = evaluation0.getClassPriors();
      evaluation0.setDiscardPredictions(true);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, doubleArray0);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities0 = new Capabilities(inputMappedClassifier0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("lW{sGOS/Vu2hUOqf");
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.toSummaryString(" ", false);
      evaluation0.toClassDetailsString();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("MUYh/_uZL3@h");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances1 = new Instances(instances0, (-1));
      Evaluation evaluation1 = new Evaluation(instances1);
      double double0 = evaluation1.m_TotalCost;
      double double1 = evaluation1.m_SumClassPredicted;
      double double2 = NimbusStyle.MINI_SCALE;
      evaluation0.unweightedMacroFmeasure();
      evaluation1.SFPriorEntropy();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation1.numTrueNegatives(1);
      evaluation0.relativeAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = KStarConstants.EPSILON;
      double double1 = KStarConstants.ROOT_FINDER_ACCURACY;
      evaluation0.SFMeanPriorEntropy();
      evaluation0.SFMeanSchemeEntropy();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.addNumericTrainClass((-1065.63661157), 1.0E-5);
      double double2 = evaluation0.m_TotalCost;
      evaluation0.addNumericTrainClass((-1.0), Double.NaN);
      M5Rules m5Rules0 = new M5Rules();
      Evaluation.makeOptionString(m5Rules0, false);
      evaluation0.priorEntropy();
      evaluation0.areaUnderROC(22);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("Wzf vNl]gD,");
      Instances instances0 = testInstances0.generate("Wzf vNl]gD,");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      double double1 = evaluation0.m_SumPredicted;
      double double2 = evaluation0.m_SumClassPredicted;
      evaluation0.SFMeanPriorEntropy();
      evaluation0.SFMeanSchemeEntropy();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.SFMeanEntropyGain();
      evaluation0.weightedPrecision();
      evaluation0.unweightedMicroFmeasure();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate("WzSf vNl]gD,");
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCost;
      double double1 = evaluation0.m_SumSqrErr;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      evaluation0.toMatrixString();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String string0 = XML.TAG_ATTRIBUTE;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.coverageOfTestCasesByPredictedRegions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      costSensitiveClassifier0.getCostMatrix();
      evaluation1.weightedMatthewsCorrelation();
      evaluation1.toSummaryString(".bsi", true);
      try { 
        Evaluation.evaluateModel("getM5RootNode", testInstances1.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name getM5RootNode.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = new Capabilities(reliefFAttributeEval0);
      capabilities0.clone();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.totalCost();
      evaluation0.getDiscardPredictions();
      capabilities0.disableAll();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1130713547));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1130713547
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate("Wzf vNl]gD,");
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unclassified();
      double double0 = NimbusStyle.MINI_SCALE;
      evaluation0.unweightedMacroFmeasure();
      evaluation0.SFPriorEntropy();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      MockFile mockFile0 = new MockFile("u:o>&b34*CZjEm", ".arff");
      Evaluation.main(testInstances1.DEFAULT_WORDS);
      regressionByDiscretization0.getOptions();
      instances0.parallelStream();
      evaluation0.SFMeanEntropyGain();
      double double1 = evaluation0.m_Unclassified;
      evaluation0.fMeasure(0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, (Instance) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.toCumulativeMarginDistributionString();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getStructure();
      databaseLoader0.setSource(" ");
      DatabaseLoader databaseLoader2 = new DatabaseLoader();
      databaseLoader0.setUser("@relation");
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.SFMeanEntropyGain();
      evaluation0.weightedFMeasure();
      try { 
        xRFFLoader0.getNextInstance((Instances) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XRFFLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Wzf vNl]gD,");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      instances0.equalHeadersMsg(instances0);
      CoverTree coverTree0 = new CoverTree();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setRetrieval(3784);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.unclassified();
      double double0 = KStarConstants.FLOOR1;
      evaluation0.numTruePositives((-2));
      evaluation0.rootRelativeSquaredError();
      evaluation0.meanAbsoluteError();
      try { 
        evaluation0.evaluateModel((Classifier) costSensitiveClassifier0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPredicted;
      double double1 = evaluation0.m_SumClassPredicted;
      evaluation0.SFMeanPriorEntropy();
      evaluation0.SFMeanSchemeEntropy();
      LogitBoost logitBoost0 = new LogitBoost();
      Classifier classifier0 = AbstractClassifier.makeCopy(logitBoost0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".arff";
      try { 
        Evaluation.evaluateModel(classifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.LogitBoost:
         // 
         // -Q
         // \tUse resampling instead of reweighting for boosting.
         // -P <percent>
         // \tPercentage of weight mass to base training on.
         // \t(default 100, reduce to around 90 speed up)
         // -F <num>
         // \tNumber of folds for internal cross-validation.
         // \t(default 0 -- no cross-validation)
         // -R <num>
         // \tNumber of runs for internal cross-validation.
         // \t(default 1)
         // -L <num>
         // \tThreshold on the improvement of the likelihood.
         // \t(default -Double.MAX_VALUE)
         // -H <num>
         // \tShrinkage parameter.
         // \t(default 1)
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -I <num>
         // \tNumber of iterations.
         // \t(default 10)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.DecisionStump)
         // 
         // Options specific to classifier weka.classifiers.trees.DecisionStump:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPredicted;
      evaluation0.SFMeanPriorEntropy();
      evaluation0.SFMeanSchemeEntropy();
      String[] stringArray0 = new String[2];
      stringArray0[1] = ".arff";
      evaluation0.SFMeanEntropyGain();
      evaluation0.makeDistribution(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setRetrieval(515);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCost;
      double double1 = evaluation0.m_SumClassPredicted;
      evaluation0.SFMeanPriorEntropy();
      evaluation0.makeDistribution(Double.NaN);
      String[] stringArray0 = new String[0];
      textDirectoryLoader0.setOptions(stringArray0);
      double double2 = evaluation0.m_TotalCost;
      M5Rules m5Rules0 = new M5Rules();
      evaluation0.evaluateModel((Classifier) m5Rules0, instances0, (Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setSeed(480);
      evaluation0.incorrect();
      evaluation0.weightedAreaUnderPRC();
      double double0 = evaluation0.m_WithClass;
      evaluation0.sizeOfPredictedRegions();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.kappa();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.correct();
      evaluation0.rootMeanSquaredError();
      evaluation0.useNoPriors();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.unclassified();
      textDirectoryLoader0.reset();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      instances0.clear();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double[] doubleArray0 = evaluation0.getClassPriors();
      evaluation0.setDiscardPredictions(true);
      instances0.indexOf(doubleArray0);
      evaluation0.pctIncorrect();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Evaluation.makeOptionString(naiveBayes0, true);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation.handleCostOption((String) null, 50);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString("@data");
      evaluation0.confusionMatrix();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.getDiscardPredictions();
      evaluation0.KBInformation();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.equals(regressionByDiscretization0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Evaluation.main(testInstances1.DEFAULT_WORDS);
      String[] stringArray0 = TimeZone.getAvailableIDs((-2));
      evaluation0.toMatrixString();
      evaluation0.addNumericTrainClass((-1), (-3557.81147548));
      double double0 = evaluation0.m_SumSqrPredicted;
      double double1 = KStarConstants.ROOT_FINDER_ACCURACY;
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) serializedClassifier0, instances0, 2, (Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = null;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2629.03881008449;
      doubleArray0[1] = (-3780.26);
      doubleArray0[2] = (-577.958);
      doubleArray0[3] = 50.0;
      doubleArray0[4] = 1384.149161;
      doubleArray0[5] = (-3780.26);
      doubleArray0[6] = 410.7846;
      doubleArray0[7] = 3567.80275;
      DenseInstance denseInstance0 = new DenseInstance((-3780.26), doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Wzf vNl]gD,");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      testInstances0.setNumInstances(2);
      instances0.equalHeadersMsg(instances0);
      CoverTree coverTree0 = new CoverTree();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC(1);
      evaluation0.KBRelativeInformation();
      evaluation0.pctUnclassified();
      try { 
        evaluation0.evaluateModelOnce(0.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = new Instances(instances0);
      String[] stringArray0 = new String[0];
      TextDirectoryLoader.main(stringArray0);
      instances0.equalHeaders(instances1);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumClassPredicted;
      evaluation0.toSummaryString(true);
      double double1 = evaluation0.m_SumSqrErr;
      evaluation0.confusionMatrix();
      evaluation0.meanAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      System.setCurrentTimeMillis((-29L));
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("qx9/!|ao.,oN){");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      evaluation0.KBMeanInformation();
      evaluation0.numInstances();
      double double0 = evaluation1.m_WithClass;
      evaluation0.relativeAbsoluteError();
      costSensitiveClassifier0.costMatrixSourceTipText();
      evaluation0.matthewsCorrelationCoefficient(2);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation1.confusionMatrix();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDirectory();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1), 111.2);
      evaluation0.toMatrixString("j8MI[[\n`}zH?KD_.");
      evaluation0.equals((Object) null);
      evaluation0.toClassDetailsString();
      evaluation0.precision(0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.recall((-2));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPredicted;
      double double1 = evaluation0.m_SumClassPredicted;
      double double2 = evaluation0.m_SumPredicted;
      evaluation0.incorrect();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.toSummaryString();
      evaluation0.toClassDetailsString(".arff");
      evaluation0.errorRate();
      evaluation0.addNumericTrainClass((-6.78214234), 100.0);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getOnDemandDirectory();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-6.78214234);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      evaluation0.unclassified();
      evaluation0.weightedPrecision();
      evaluation0.sizeOfPredictedRegions();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.kappa();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.pctCorrect();
      evaluation0.correct();
      evaluation0.rootMeanSquaredError();
      evaluation0.useNoPriors();
      evaluation0.KBRelativeInformation();
      evaluation0.pctIncorrect();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Wzf vNl]gD,");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      instances0.equalHeadersMsg(instances0);
      CoverTree coverTree0 = new CoverTree();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@data");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.unclassified();
      evaluation0.weightedPrecision();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.toMatrixString(".bsi");
      evaluation0.getRevision();
      testInstances0.generate("0^<K:?Q;\"D[Rg9*B");
      evaluation0.weightedFalseNegativeRate();
      evaluation0.pctCorrect();
      evaluation0.correct();
      evaluation0.rootMeanSquaredError();
      evaluation0.useNoPriors();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.KBInformation();
      evaluation0.KBRelativeInformation();
      evaluation0.rootMeanPriorSquaredError();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Wzf vNl]gD,");
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.unclassified();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      textDirectoryLoader0.setCharSet(" ");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      instances0.clear();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.kappa();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.pctCorrect();
      evaluation0.correct();
      evaluation0.rootMeanSquaredError();
      evaluation0.useNoPriors();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "\nOptions specific to search ");
      databaseLoader0.getNextInstance(instances1);
      evaluation0.SFPriorEntropy();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Wzf vNl]gD,");
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.unclassified();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      textDirectoryLoader0.setCharSet("H|>M1X1RyJA'SKx2 E;");
      instances0.clear();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.trueNegativeRate((-2));
      double double0 = KStarConstants.INITIAL_STEP;
      textDirectoryLoader0.setRetrieval(1822);
      evaluation0.pctCorrect();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.correct();
      evaluation0.rootMeanSquaredError();
      evaluation0.useNoPriors();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "qJVha~sft0Dv}:");
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getNextInstance(instances0);
      evaluation1.SFPriorEntropy();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "import weka.core.Capabilities;\n");
      evaluation0.numFalseNegatives(84);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation1.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[5];
      TextDirectoryLoader.main(stringArray0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.unclassified();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      instances0.clear();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.evaluateModel((Classifier) costSensitiveClassifier0, instances0, (Object[]) stringArray0);
      evaluation0.setDiscardPredictions(false);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, intArray0, 3300);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".bsi");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      evaluation0.SFPriorEntropy();
      evaluation0.numFalseNegatives(74);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, sparseInstance0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setRelation("%");
      Instances instances0 = testInstances0.generate(" ");
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1), (-2));
      double double0 = KStarConstants.INITIAL_STEP;
      double double1 = NimbusStyle.MINI_SCALE;
      evaluation0.weightedAreaUnderROC();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      evaluation0.setNumericPriorsFromBuffer();
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-1), false, false);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation1.m_SumPredicted;
      evaluation0.SFMeanPriorEntropy();
      CostMatrix costMatrix0 = new CostMatrix(2);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation2 = new Evaluation(instances0, costMatrix1);
      evaluation2.SFMeanSchemeEntropy();
      evaluation0.SFMeanEntropyGain();
      evaluation2.SFSchemeEntropy();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate("WzSf vNl]gD,");
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCost;
      double double1 = evaluation0.m_SumSqrErr;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      MockFile mockFile0 = new MockFile(".bsi", "@relation");
      Evaluation.main(testInstances1.DEFAULT_WORDS);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Locale.getISOCountries();
      evaluation0.addNumericTrainClass((-2), (-1));
      evaluation0.toMatrixString("Ma[alQm");
      evaluation0.equals(evaluation0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Wzf vNl]gD,");
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unclassified();
      double double0 = evaluation0.m_SumPriorSqrErr;
      evaluation0.SFPriorEntropy();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-100);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      testInstances0.setNumRelationalDate((byte) (-100));
      regressionByDiscretization0.getOptions();
      evaluation0.useNoPriors();
      evaluation0.relativeAbsoluteError();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBInformation();
      try { 
        evaluation1.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[7];
      TextDirectoryLoader.main(stringArray0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.unclassified();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      AlphabeticTokenizer alphabeticTokenizer1 = new AlphabeticTokenizer();
      double double0 = evaluation1.m_TotalCost;
      double double1 = NimbusStyle.MINI_SCALE;
      evaluation1.unweightedMacroFmeasure();
      evaluation1.SFPriorEntropy();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getModelFile();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      File file0 = textDirectoryLoader1.getDirectory();
      textDirectoryLoader1.setSource(file0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "@relation";
      evaluation0.m_Correct = 1000.0;
      Evaluation.main(stringArray1);
      regressionByDiscretization0.getOptions();
      evaluation1.KBMeanInformation();
      evaluation1.addNumericTrainClass(20.0, 1);
      evaluation1.fMeasure(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.equals(evaluation1);
      evaluation0.weightedAreaUnderPRC();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation2 = new Evaluation(instances0, costMatrix0);
      double double2 = evaluation2.m_ConfLevel;
      evaluation2.areaUnderPRC(0);
      try { 
        Evaluation.handleCostOption(".bsi", (-1022));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[7];
      TextDirectoryLoader.main(stringArray0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Unclassified = 996.0;
      Evaluation evaluation1 = new Evaluation(instances0);
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.unclassified();
      AlphabeticTokenizer alphabeticTokenizer1 = new AlphabeticTokenizer();
      double double0 = evaluation1.m_TotalCost;
      double double1 = NimbusStyle.MINI_SCALE;
      evaluation1.unweightedMacroFmeasure();
      evaluation1.SFPriorEntropy();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      MockFile mockFile0 = new MockFile("@data", "@data");
      File file0 = textDirectoryLoader0.getDirectory();
      textDirectoryLoader0.setSource(file0);
      String[] stringArray1 = new String[1];
      stringArray0[2] = "@relation";
      Evaluation.main(stringArray1);
      regressionByDiscretization0.getOptions();
      evaluation1.addNumericTrainClass(20.0, 1);
      double double2 = evaluation1.m_TotalCost;
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.equals(evaluation1);
      double double3 = evaluation1.m_SumErr;
      evaluation1.useNoPriors();
      try { 
        evaluation1.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      textDirectoryLoader0.setRetrieval(508);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      double double1 = evaluation0.m_SumPredicted;
      double double2 = evaluation0.m_SumClassPredicted;
      evaluation0.SFMeanPriorEntropy();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.weightedFalseNegativeRate();
      textDirectoryLoader0.getDataSet();
      evaluation0.pctCorrect();
      evaluation0.rootMeanSquaredError();
      evaluation0.useNoPriors();
      evaluation0.KBInformation();
      evaluation0.priorEntropy();
      System.setCurrentTimeMillis(1160L);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("Wzf vNl]gD,");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      costSensitiveClassifier0.setSeed((-481));
      File file0 = serializedClassifier0.getModelFile();
      costSensitiveClassifier0.setOnDemandDirectory(file0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      IBk iBk0 = new IBk(2122);
      SelectedTag selectedTag0 = iBk0.getDistanceWeighting();
      selectedTag0.getRevision();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.setCostMatrixSource(selectedTag0);
      CoverTree coverTree0 = new CoverTree();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setRetrieval(98);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.KBRelativeInformation();
      evaluation0.numTruePositives(4);
      evaluation0.rootRelativeSquaredError();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[2];
      evaluation0.updateMargins(doubleArray0, 1, (-481));
      evaluation0.meanPriorAbsoluteError();
      evaluation0.weightedAreaUnderROC();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Wzf vNl]gD,");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      costSensitiveClassifier0.setSeed((-481));
      File file0 = serializedClassifier0.getModelFile();
      costSensitiveClassifier0.setOnDemandDirectory(file0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      IBk iBk0 = new IBk(2122);
      SelectedTag selectedTag0 = iBk0.getDistanceWeighting();
      selectedTag0.getRevision();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.setCostMatrixSource(selectedTag0);
      CoverTree coverTree0 = new CoverTree();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setRetrieval(98);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.unclassified();
      double double0 = new Float((double) (-481));
      evaluation0.rootRelativeSquaredError();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      evaluation0.updateMargins(doubleArray0, 1, (-481));
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier0, instances0, 1, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1), (-1));
      double double0 = KStarConstants.INITIAL_STEP;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double1 = KStarConstants.EPSILON;
      double double2 = KStarConstants.ROOT_FINDER_ACCURACY;
      evaluation0.SFMeanPriorEntropy();
      evaluation0.SFMeanSchemeEntropy();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "N?0T)P{J{mR");
      evaluation0.addNumericTrainClass((-1046.0), Double.NaN);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getOnDemandDirectory();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.coverageOfTestCasesByPredictedRegions();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      evaluation0.useNoPriors();
      evaluation0.KBMeanInformation();
      evaluation0.errorRate();
      evaluation0.toClassDetailsString();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.weightedAreaUnderROC();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      evaluation0.useNoPriors();
      evaluation0.sizeOfPredictedRegions();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.kappa();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.correct();
      evaluation0.KBRelativeInformation();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation1 = new Evaluation(instances1);
      int int0 = 107;
      evaluation1.numTruePositives(107);
      evaluation1.rootRelativeSquaredError();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        evaluation1.updateMargins((double[]) null, 107, 634.0202966500622);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.getCapabilities();
      try { 
        Evaluation.evaluateModel((Classifier) bayesNet0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.bayes.BayesNet:
         // 
         // -D
         // \tDo not use ADTree data structure
         // 
         // -B <BIF file>
         // \tBIF file to compare with
         // 
         // -Q weka.classifiers.bayes.net.search.SearchAlgorithm
         // \tSearch algorithm
         // 
         // -E weka.classifiers.bayes.net.estimate.SimpleEstimator
         // \tEstimator algorithm
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate("Wzf vNl]gD,");
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1), (-4296.1));
      double double0 = NimbusStyle.MINI_SCALE;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      MockFile mockFile0 = new MockFile("Wzf vNl]gD,");
      Evaluation.main(testInstances1.DEFAULT_WORDS);
      TimeZone.getAvailableIDs((-2));
      evaluation0.toMatrixString();
      instances0.parallelStream();
      evaluation0.addNumericTrainClass((-1), (-3557.81147548));
      double double1 = evaluation0.m_TotalCost;
      double double2 = KStarConstants.ROOT_FINDER_ACCURACY;
      double double3 = evaluation0.m_SumSqrClass;
      evaluation0.useNoPriors();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.toSummaryString(true);
      evaluation0.priorEntropy();
      costSensitiveClassifier0.costMatrixSourceTipText();
      MockRandom mockRandom0 = new MockRandom(0L);
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier0, instances0, (-158), (Random) mockRandom0, (Object[]) testInstances1.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = KStarConstants.EPSILON;
      double double1 = KStarConstants.ROOT_FINDER_ACCURACY;
      evaluation0.SFMeanPriorEntropy();
      evaluation0.SFMeanSchemeEntropy();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@data");
      evaluation0.addNumericTrainClass((-1065.63661157), 1.0E-5);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getOnDemandDirectory();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.SFMeanEntropyGain();
      evaluation0.incorrect();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setRelation("%");
      Instances instances0 = testInstances0.generate(" ");
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1), (-2));
      double double0 = KStarConstants.INITIAL_STEP;
      double double1 = NimbusStyle.MINI_SCALE;
      evaluation0.weightedAreaUnderROC();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      evaluation0.setNumericPriorsFromBuffer();
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-1), false, false);
      simpleLogistic0.getTechnicalInformation();
      AbstractClassifier.runClassifier(simpleLogistic0, testInstances0.DEFAULT_WORDS);
      Object[] objectArray0 = new Object[5];
      try { 
        evaluation0.evaluateModel((Classifier) serializedClassifier0, instances0, objectArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1), (-1));
      double double0 = KStarConstants.INITIAL_STEP;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumRelationalDate(306);
      Instances instances1 = new Instances(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      evaluation0.updatePriors(instance0);
      DenseInstance denseInstance0 = new DenseInstance(instance0);
      // Undeclared exception!
      try { 
        denseInstance0.setValue((-1), (double) 306);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String[] stringArray0 = new String[7];
      TextDirectoryLoader.main(stringArray0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      SparseInstance sparseInstance0 = new SparseInstance(3118);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance1);
      instances0.add((Instance) denseInstance0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.listOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Stacking stacking0 = new Stacking();
      Capabilities capabilities0 = stacking0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumRelationalDate((-197112209));
      IBk iBk0 = new IBk();
      Capabilities capabilities1 = iBk0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      testInstances0.assign(testInstances1);
      evaluation0.addNumericTrainClass(5.70001, (-1));
      double double0 = evaluation0.m_TotalCost;
      evaluation0.addNumericTrainClass(2914.0, 486);
      evaluation0.setDiscardPredictions(false);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.SFMeanEntropyGain();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.SFPriorEntropy();
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
