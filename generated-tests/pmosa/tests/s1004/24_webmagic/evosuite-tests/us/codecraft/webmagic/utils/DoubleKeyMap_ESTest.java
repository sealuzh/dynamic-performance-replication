/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 23:53:45 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>(class0);
      doubleKeyMap0.newMap();
      doubleKeyMap0.newMap();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) class0, (Map<Integer, String>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>(class0);
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>();
      Object object0 = new Object();
      doubleKeyMap1.get(object0, (Object) doubleKeyMap0);
      DoubleKeyMap<Object, String, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, String, Integer>(class0);
      String string0 = ". PJf+Bm&`;\"";
      doubleKeyMap2.remove((Object) ". PJf+Bm&`;\"");
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap3 = new DoubleKeyMap<Object, String, Object>(hashMap0);
      HashMap<String, Map<Object, Integer>> hashMap1 = new HashMap<String, Map<Object, Integer>>();
      HashMap<String, Map<Object, Integer>> hashMap2 = new HashMap<String, Map<Object, Integer>>(hashMap1);
      Class<Map> class1 = Map.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap4 = new DoubleKeyMap<String, Object, Integer>(hashMap2, class1);
      // Undeclared exception!
      try { 
        doubleKeyMap4.newMap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>((Map<Object, Map<String, Integer>>) null);
      doubleKeyMap0.remove((Object) "");
      DoubleKeyMap<Object, Map<Object, Integer>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Object, Integer>, Object>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      doubleKeyMap1.remove((Object) null, (Map<Object, Integer>) hashMap0);
      DoubleKeyMap<Object, Integer, Map<Object, Integer>> doubleKeyMap2 = new DoubleKeyMap<Object, Integer, Map<Object, Integer>>();
      Integer integer0 = new Integer((-1));
      doubleKeyMap2.remove((Object) doubleKeyMap1, integer0);
      HashMap<String, Map<Integer, Map<Object, Integer>>> hashMap1 = new HashMap<String, Map<Integer, Map<Object, Integer>>>();
      Class<Map> class0 = Map.class;
      HashMap<Integer, Map<Object, Integer>> hashMap2 = new HashMap<Integer, Map<Object, Integer>>();
      hashMap1.put("", hashMap2);
      DoubleKeyMap<String, Integer, Map<Object, Integer>> doubleKeyMap3 = new DoubleKeyMap<String, Integer, Map<Object, Integer>>(hashMap1, class0);
      doubleKeyMap3.remove("", (Integer) null);
      Class<Map> class1 = Map.class;
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap4 = null;
      try {
        doubleKeyMap4 = new DoubleKeyMap<Object, Object, Integer>(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>((Map<Object, Map<String, Integer>>) null);
      doubleKeyMap0.remove((Object) "");
      DoubleKeyMap<Object, Map<Object, Integer>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Object, Integer>, Object>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      doubleKeyMap1.remove((Object) null, (Map<Object, Integer>) hashMap0);
      DoubleKeyMap<Object, Integer, Map<Object, Integer>> doubleKeyMap2 = new DoubleKeyMap<Object, Integer, Map<Object, Integer>>();
      HashMap<String, Map<Integer, Map<Object, Integer>>> hashMap1 = new HashMap<String, Map<Integer, Map<Object, Integer>>>();
      Class<Map> class0 = Map.class;
      HashMap<Integer, Map<Object, Integer>> hashMap2 = new HashMap<Integer, Map<Object, Integer>>();
      Integer integer0 = new Integer((-1245));
      hashMap2.put(integer0, hashMap0);
      hashMap1.put("", hashMap2);
      DoubleKeyMap<String, Integer, Map<Object, Integer>> doubleKeyMap3 = new DoubleKeyMap<String, Integer, Map<Object, Integer>>(hashMap1, class0);
      doubleKeyMap3.remove("", (Integer) null);
      DoubleKeyMap<Object, Object, String> doubleKeyMap4 = null;
      try {
        doubleKeyMap4 = new DoubleKeyMap<Object, Object, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(class0);
      Integer integer0 = new Integer(2587);
      doubleKeyMap0.put((Object) class0, (Object) integer0, "");
      String string0 = doubleKeyMap0.put((Object) class0, (Object) integer0, "K");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>();
      Object object0 = new Object();
      doubleKeyMap1.get(object0, (Object) doubleKeyMap0);
      DoubleKeyMap<Object, String, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, String, Integer>(class0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Object, Map<String, Object>> hashMap1 = new HashMap<Object, Map<String, Object>>();
      HashMap<String, Map<Object, Integer>> hashMap2 = new HashMap<String, Map<Object, Integer>>();
      HashMap<String, Map<Object, Integer>> hashMap3 = new HashMap<String, Map<Object, Integer>>(hashMap2);
      DoubleKeyMap<String, Object, Object> doubleKeyMap3 = new DoubleKeyMap<String, Object, Object>();
      DoubleKeyMap<String, Integer, String> doubleKeyMap4 = new DoubleKeyMap<String, Integer, String>();
      Map<Object, Integer> map0 = doubleKeyMap4.newMap();
      doubleKeyMap3.remove("wrong proto type map ", (Object) map0);
      DoubleKeyMap<Integer, Object, String> doubleKeyMap5 = new DoubleKeyMap<Integer, Object, String>();
      Integer integer0 = new Integer(0);
      doubleKeyMap5.put(integer0, (Object) doubleKeyMap3, "wrong proto type map ");
      Map<Object, Map<Object, String>> map1 = doubleKeyMap5.newMap();
      DoubleKeyMap<Object, Object, String> doubleKeyMap6 = new DoubleKeyMap<Object, Object, String>(map1, class0);
      Object object1 = new Object();
      Integer integer1 = new Integer(0);
      doubleKeyMap2.put(object0, "wrong proto type map ", integer1);
      doubleKeyMap5.get(integer1, (Object) doubleKeyMap2);
      HashMap<Integer, Map<Integer, Object>> hashMap4 = new HashMap<Integer, Map<Integer, Object>>();
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap7 = new DoubleKeyMap<Integer, Integer, Object>(hashMap4);
      doubleKeyMap7.remove(integer1, integer1);
      Integer integer2 = new Integer(0);
      Map<String, Integer> map2 = doubleKeyMap2.get((Object) hashMap4);
      assertNull(map2);
  }
}
