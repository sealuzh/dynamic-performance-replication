/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 05:39:49 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getInt(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{SkraC&#w2zo16+r^M");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 18 of {SkraC&#w2zo16+r^M
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~nkAc=lG.ZNu`\"LW4M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~nkAc=lG.ZNu`\"LW4M
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("+z~8Z", (Map) null);
      Object object0 = jSONObject1.remove("+z~8Z");
      assertNotSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("o9)wr|-X", 8192);
      long long0 = jSONObject1.optLong("o9)wr|-X");
      assertEquals(8192L, long0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("A JSONObject text must begin with '{'", (-10384350));
      long long0 = jSONObject0.optLong("A JSONObject text must begin with '{'");
      assertEquals((-10384350L), long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("\f", 1.0);
      int int0 = jSONObject0.optInt("\f");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", 62);
      double double0 = jSONObject1.optDouble("] is not a number.");
      assertEquals(62.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(":J \"3", true);
      boolean boolean0 = jSONObject0.optBoolean(":J \"3");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Collection) linkedList0);
      JSONArray jSONArray0 = (JSONArray)jSONObject1.opt("{}");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("A JSONObject text must end with '}'");
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("1<", "1<");
      boolean boolean0 = jSONObject0.has("1<");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BCi#rURemR_^5aW");
      jSONObject0.put("BCi#rURemR_^5aW", 0.0);
      jSONObject0.getString("BCi#rURemR_^5aW");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Float float0 = Float.valueOf(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("C*IR<e`Zn6", 10);
      long long0 = jSONObject1.getLong("C*IR<e`Zn6");
      assertEquals(4, jSONObject0.length());
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("is", (-103));
      long long0 = jSONObject0.getLong("is");
      assertEquals((-103L), long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long0 = new Long(415L);
      hashMap0.put(long0, long0);
      JSONObject jSONObject1 = jSONObject0.put("fP!ae", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("fP!ae");
      assertEquals(1, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("vbA?G8:/6J", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("vbA?G8:/6J");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("n;\"D8m<x&I?QxSX=v5", 0L);
      int int0 = jSONObject1.getInt("n;\"D8m<x&I?QxSX=v5");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BCi#rURemR_^5aW");
      jSONObject0.put("null", (long) 69);
      int int0 = jSONObject0.getInt("null");
      assertEquals(4, jSONObject0.length());
      assertEquals(69, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = Integer.valueOf((-3313));
      JSONObject jSONObject1 = jSONObject0.putOpt("Ofs\u0001#>>QK7p", integer0);
      double double0 = jSONObject1.getDouble("Ofs\u0001#>>QK7p");
      assertEquals((-3313.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject1.get("");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = JSONObject.valueToString("n;\"D8m<x&I?QxSX=v5", (-9), (-9));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = JSONObject.valueToString("b=Rl", (-1407), 0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 10, 10);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(0, 0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.toString(0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.testValidity(object0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Object object0 = new Object();
      jSONObject0.putOpt("", object0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("", true);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      Collection<Object> collection0 = hashMap0.values();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@0000000002", collection0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("", (Collection) linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Byte byte0 = new Byte((byte)92);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("", 1080L);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("7y@ZYIqhtjr%i.OR*G", 0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (-185));
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("", (double) 400);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("toS", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = jSONObject0.optString((String) null, "");
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = jSONObject0.optString("", "gettoJSONObject");
      assertEquals("gettoJSONObject", string0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.optString("");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, 1379L);
      assertEquals(1379L, long0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      long long0 = jSONObject0.optLong("", (-1282L));
      assertEquals((-1282L), long0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.optJSONObject("");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Byte byte0 = new Byte((byte)92);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      int int0 = jSONObject0.optInt("_BbFS*A}#>jLs-E", (-12437164));
      assertEquals((-12437164), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, 16);
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("A JSONObject text must end with '}'");
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      int int0 = jSONObject0.optInt("b=Rl", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      double double0 = jSONObject0.optDouble("co", 633.9348508754007);
      assertEquals(1, jSONObject0.length());
      assertEquals(633.9348508754007, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, (-2392.18));
      assertEquals((-2392.18), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BCi#rURemR_^5aW");
      boolean boolean0 = jSONObject0.optBoolean((String) null, true);
      assertTrue(boolean0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      boolean boolean1 = jSONObject0.optBoolean("", true);
      assertTrue(boolean1);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Float float0 = new Float(1.0F);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Object object0 = jSONObject0.opt("0");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      try { 
        jSONObject0.getJSONArray(stringArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getJSONArray("vbA?G8:/6J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"vbA?G8:/6J\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.append("Jm=", object0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      Float float0 = new Float(0.0F);
      try { 
        jSONObject0.append((String) null, float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("kq$f=?:pVDM", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("null", object0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Float@0000000001");
      // Undeclared exception!
      jSONObject0.toString(473, 3465);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<Long, Byte> hashMap0 = new HashMap<Long, Byte>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)12);
      try { 
        jSONObject0.accumulate((String) null, short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Byte byte0 = new Byte((byte)108);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(byte0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = new Object();
      jSONObject0.put("vbA?G8:/6J", object0);
      String string0 = jSONObject0.toString((int) (byte)89, 4);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.toString((-2040), 1168);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = JSONObject.quote("vbA?G8:/6J");
      assertEquals("\"vbA?G8:/6J\"", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("#`", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"Substring bounds error\"", (-1));
      String string0 = jSONObject1.optString("\"Substring bounds error\"", ".");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BCi#rURemR_^5aW");
      jSONObject0.put("BCi#rURemR_^5aW", 0.0);
      double double0 = jSONObject0.optDouble("BCi#rURemR_^5aW", 0.0);
      assertEquals(4, jSONObject0.length());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      double double0 = jSONObject0.optDouble("", (-3760.5326532));
      assertEquals(1, jSONObject0.length());
      assertEquals((-3760.5326532), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.opt("");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Double double0 = new Double((byte) (-121));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      jSONObject0.put("fP!ae", (Map) hashMap0);
      try { 
        jSONObject0.getLong("fP!ae");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fP!ae\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Long long0 = new Long(2);
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.put("%et", true);
      try { 
        jSONObject0.getInt("%et");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"%et\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Float float0 = Float.valueOf(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("Unterminated string", (-1055L));
      int int0 = jSONObject0.getInt("Unterminated string");
      assertEquals(4, jSONObject0.length());
      assertEquals((-1055), int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("isparseDouble", "isparseDouble");
      try { 
        jSONObject0.getDouble("isparseDouble");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isparseDouble\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("] is not a number.", (Collection) linkedList0);
      try { 
        jSONObject0.getBoolean("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("uCS8lzjVRoLQo", "uCS8lzjVRoLQo");
      try { 
        jSONObject1.getBoolean("uCS8lzjVRoLQo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"uCS8lzjVRoLQo\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("1152.835", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(47);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      jSONObject0.put("2b3|NX@Y", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(400);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0, 20, 4523);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("4g=3Z_(3OO_b", hashMap0);
      String string0 = jSONObject1.toString(34);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (Map) null);
      String string0 = jSONObject0.toString((int) (byte) (-121));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 0, 0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      JSONObject jSONObject0 = new JSONObject((Object) "false");
      jSONObject0.put("IyG}=$PtKE", (Map) hashMap0);
      jSONObject0.toString();
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.append("", "");
      jSONObject0.toString(0, 24);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.append("", "");
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(17, (long) 17);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(18, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject("-2901.046944332028", stringArray0);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Byte byte0 = new Byte((byte)72);
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      try { 
        jSONObject0.put("rGVRGOjl", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("a cAh`L9LH\"Ipf[R1", (Object) null);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = JSONObject.quote("</8>NvYz|*L@M0H)Q8k");
      assertEquals("\"<\\/8>NvYz|*L@M0H)Q8k\"", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("n;\"D8m<x&I?QxSX=v5", 0L);
      String string0 = jSONObject0.toString(49);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSONArray0);
      String string0 = JSONObject.valueToString(predicate0);
      assertFalse(linkedList0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      int int0 = jSONObject0.optInt("\r");
      assertEquals(3, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = JSONObject.quote("{\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = JSONObject.quote("\t");
      assertEquals("\"\\t\"", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "b=Rl";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("is", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, (-228.206920558748));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("JSONArray[", 0L);
      String string0 = jSONObject0.optString("JSONArray[");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("+z~8Z", (Map) null);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("+z~8Z");
      assertNotSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Float float0 = Float.valueOf(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optJSONArray("C*IR<e`Zn6");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("n;\"D8m<x&I?QxSX=v5", 0L);
      double double0 = jSONObject1.optDouble("n;\"D8m<x&I?QxSX=v5");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(10, (long) 10);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONArray0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("n;\"D8m<x&I?QxSX=v5", 0L);
      long long0 = jSONObject1.getLong("n;\"D8m<x&I?QxSX=v5");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.append("", "");
      long long0 = jSONObject1.optLong("");
      assertEquals(2, jSONObject0.length());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("0", (Map) null);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("0");
      assertNotSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("no", false);
      try { 
        jSONObject1.getJSONObject("no");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"no\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject1.getJSONArray("");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-125));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Object) byte0);
      try { 
        jSONObject1.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "[]");
      JSONObject jSONObject1 = jSONObject0.put("?u!MxL2_Z).ofwqf", (double) (-2015));
      int int0 = jSONObject1.optInt("?u!MxL2_Z).ofwqf");
      assertEquals(4, jSONObject0.length());
      assertEquals((-2015), int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0L);
      JSONObject jSONObject1 = jSONObject0.putOpt("\"java.util.function.Predicate$$Lambda$57/1188756465@0000000002\"", double0);
      double double1 = jSONObject1.getDouble("\"java.util.function.Predicate$$Lambda$57/1188756465@0000000002\"");
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.append("", "");
      int int0 = jSONObject0.optInt("", 400);
      assertEquals(2, jSONObject0.length());
      assertEquals(400, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("A:Lj", true);
      boolean boolean0 = jSONObject0.getBoolean("A:Lj");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("$IhD;HxS_t3", (Object) "$IhD;HxS_t3");
      boolean boolean0 = jSONObject1.optBoolean("$IhD;HxS_t3", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean(false);
      jSONObject0.put("] is not a number.", (Object) boolean0);
      boolean boolean1 = jSONObject0.getBoolean("] is not a number.");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = JSONObject.doubleToString(724.3403377);
      assertEquals("724.3403377", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-18548323));
      assertEquals("-1.8548323E7", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("~2:g)Omm@", (Object) "~2:g)Omm@");
      Long long0 = new Long(0L);
      try { 
        jSONObject0.append("~2:g)Omm@", long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[~2:g)Omm@] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject1.append("", "");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSONArray[", 0L);
      JSONObject jSONObject2 = jSONObject1.accumulate("JSONArray[", jSONObject0);
      assertSame(jSONObject1, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("MU", jSONArray0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Long long0 = new Long(400);
      jSONObject0.accumulate("", long0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("getquote", "A JSONObject text must begin with '{'");
      Boolean boolean0 = new Boolean("] is not a Boolean.");
      JSONObject jSONObject2 = jSONObject1.accumulate("getquote", boolean0);
      assertSame(jSONObject0, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("2gw{S:4#NG67Sr-");
      jSONTokener0.nextValue();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 15 of 2gw{S:4#NG67Sr-
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\n\"java.lang.String@0000000002\": java.lang.Long@0000000003,\n\"java.lang.String@0000000004\": \"java.lang.Object@0000000005\",\n\"java.lang.String@0000000007\": {}\n}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertFalse(jSONTokener0.more());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{XEA_eq7oxw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 11 of {XEA_eq7oxw
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = new String[5];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray0 = jSONObject1.names();
      assertNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("-1655.30963", object0);
      boolean boolean0 = jSONObject1.isNull("-1655.30963");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("J3eg(DQX)[|", false);
      boolean boolean0 = jSONObject1.isNull("J3eg(DQX)[|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((int) (byte)13, (-763));
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Float float0 = Float.valueOf(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("C*IR<e`Zn6", 10);
      double double0 = jSONObject0.getDouble("C*IR<e`Zn6");
      assertEquals(4, jSONObject0.length());
      assertEquals(10.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      long long0 = jSONObject0.optLong("Oe23}f5L?q", (-160L));
      assertEquals(1, jSONObject0.length());
      assertEquals((-160L), long0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "[]");
      boolean boolean0 = jSONObject0.optBoolean("[]", false);
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String string0 = jSONObject0.optString((String) null);
      assertNotNull(string0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("gettoJSONObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of gettoJSONObject
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) null);
      boolean boolean0 = jSONObject1.optBoolean("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "[]");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "[]");
      jSONObject0.put("?u!MxL2_Z).ofwqf", (double) (-2015));
      jSONObject0.get("?u!MxL2_Z).ofwqf");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Float float0 = Float.valueOf(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("n;\"D8m<x&I?QxSX=v5", (-2687L));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("0.0", (Collection) null);
      jSONObject1.optJSONArray("0.0");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.has("");
      assertEquals(1, jSONObject0.length());
  }
}
