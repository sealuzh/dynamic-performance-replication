/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:10:38 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.ImageCapabilities;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.image.ImageObserver;
import java.sql.Time;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.Action;
import javax.swing.DebugGraphics;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JScrollBar;
import javax.swing.JTextPane;
import javax.swing.plaf.basic.BasicToolBarUI;
import javax.swing.plaf.synth.SynthSeparatorUI;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultStyledDocument;
import org.apache.batik.apps.svgbrowser.JSVGViewerFrame;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.commons.logging.impl.SimpleLog;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.processor.ProcessorCharacters;
import org.apache.xalan.templates.ElemNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1063), true, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setYear(0);
      jDayChooser0.setMaxDayCharacters((-1437625606));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setMinSelectableDate((Date) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.setAlwaysFireDayProperty(true);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JComponent.getDefaultLocale();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser0.setMonthChooser((JMonthChooser) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getLocale();
      jDayChooser0.getWeekdayForeground();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.enableInputMethods(true);
      jDayChooser_DecoratorButton0.setAction((Action) null);
      jDayChooser_DecoratorButton0.isFocusable();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getInsets();
      jDayChooser0.getLocale();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getSundayForeground();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 4, 13, 13, 3190);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlwaysFireDayProperty(false);
      Locale locale0 = Locale.TAIWAN;
      jDayChooser0.setLocale(locale0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.PINK;
      Color color1 = Color.getColor("day", 690);
      jDayChooser0.setDecorationBackgroundColor(color1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      Date date0 = jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.setMinSelectableDate(date0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-1));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.transferFocus();
      Color color0 = Color.white;
      jDayChooser0.setSundayForeground(color0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setAutoscrolls(false);
      jDayChooser0.getTopLevelAncestor();
      JButton jButton0 = new JButton();
      jDayChooser0.setSelectableDateRange(date0, (Date) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JButton jButton0 = new JButton();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(730);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setMaxDayCharacters(2);
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      Color color0 = Color.PINK;
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setOpaque(false);
      jDayChooser0.setYearChooser((JYearChooser) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2841), (-2841), (-2841), (-2841), '\\');
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser0.removeFocusListener(defaultCaret0);
      InputEvent.getModifiersExText((-2841));
      jDayChooser0.setFocus();
      jDayChooser0.isDecorationBackgroundVisible();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2841), true);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.setWeekOfYearVisible(false);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Time time0 = new Time(0L);
      jDayChooser0.setMaxSelectableDate(time0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setToolTipText("B&~7_Ho");
      Color.getColor("B&~7_Ho");
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.getSundayForeground();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 63731);
      jDayChooser0.focusLost(focusEvent0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 63731, 63731, 8592, 63731, '&');
      jDayChooser0.keyPressed(keyEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      jDayChooser0.setDay(351);
      jDayChooser0.drawWeeks();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      Color color0 = jTextPane0.getCaretColor();
      jDayChooser0.setWeekdayForeground(color0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.getVerifyInputWhenFocusTarget();
      jDayChooser0.setVisible(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/YL)tN-;{+'^jp");
      jDayChooser0.setMaxDayCharacters((-1061));
      jDayChooser0.setWeekOfYearVisible(false);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-1));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jDayChooser0;
      objectArray0[1] = (Object) jDayChooser0;
      objectArray0[2] = (Object) jDayChooser0;
      objectArray0[3] = (Object) jDayChooser0;
      objectArray0[4] = (Object) jDayChooser0;
      objectArray0[5] = (Object) jDayChooser0;
      objectArray0[6] = (Object) jDayChooser0;
      jDayChooser0.setYear(1027);
      jDayChooser0.setMaxDayCharacters(837);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JComponent.getDefaultLocale();
      jDayChooser0.isRequestFocusEnabled();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.keyTyped((KeyEvent) null);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      JButton jButton0 = new JButton();
      jButton0.setText("day");
      KeyEvent keyEvent0 = new KeyEvent(jButton0, 36, 36, 36, 36, '9');
      jButton0.getPressedIcon();
      KeyEvent.getKeyText(661);
      keyEvent0.paramString();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      jDayChooser0.keyPressed(keyEvent0);
      MockDate mockDate0 = new MockDate('9');
      jDayChooser0.drawDays();
      Locale locale0 = new Locale("day", "day");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Calendar calendar0 = MockCalendar.getInstance();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.getDecorationBackgroundColor();
      JScrollBar jScrollBar0 = new JScrollBar();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2162, (byte)2, 2162, 33, 'z');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.enableInputMethods(true);
      jDayChooser0.isDayBordersVisible();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.transferFocus();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.isDecorationBackgroundVisible();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-3238), ", false) call failed.", (-3238));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.isDecorationBackgroundVisible();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.drawDays();
      int int0 = SimpleLog.LOG_LEVEL_DEBUG;
      jDayChooser0.setDay(351);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j?/pU8O^Hxb8I`,|{ ");
      jDayChooser0.setMaxDayCharacters(4);
      MockCalendar.getInstance();
      jDayChooser0.setMonth(2);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 38);
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      KeyEvent.getKeyText(2);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.drawDays();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.keyReleased((KeyEvent) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      JDayChooser jDayChooser1 = new JDayChooser();
      JButton jButton0 = new JButton();
      jDayChooser1.drawDays();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      KeyEvent keyEvent0 = new KeyEvent(jButton0, 661, 1602L, 36, 38, 'i');
      jDayChooser1.keyPressed(keyEvent0);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser1.paint(debugGraphics0);
      Color color0 = Color.orange;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      SynthSeparatorUI synthSeparatorUI0 = new SynthSeparatorUI();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.getGraphicsConfiguration();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser_DecoratorButton1, 38, (-1648L), (-227), 35, 'i');
      jDayChooser1.setDecorationBordersVisible(false);
      KeyEvent.getKeyModifiersText(38);
      jDayChooser1.keyPressed(keyEvent1);
      jDayChooser0.setForeground(color0);
      KeyEvent keyEvent2 = new KeyEvent(jButton0, 4, 1646L, 35, 4, 'c');
      jDayChooser1.keyReleased(keyEvent2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.setCalendar(calendar0);
      JDayChooser jDayChooser1 = new JDayChooser();
      JEditorPane jEditorPane0 = new JEditorPane();
      JButton jButton0 = new JButton();
      boolean boolean0 = true;
      jDayChooser1.setDecorationBackgroundVisible(true);
      jDayChooser1.drawDays();
      int int0 = 34;
      KeyEvent keyEvent0 = new KeyEvent(jButton0, 34, 34, 34, 34, '9');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          JDayChooser jDayChooser0 = new JDayChooser();
          MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
          jDayChooser0.setCalendar(mockGregorianCalendar0);
          jDayChooser0.setEnabled(false);
          JDayChooser jDayChooser1 = new JDayChooser();
          JButton jButton0 = new JButton();
          FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
          JDayChooser jDayChooser2 = new JDayChooser();
          PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
          jDayChooser0.setAlwaysFireDayProperty(true);
          ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
          jDayChooser0.createVolatileImage(41, (-53), imageCapabilities0);
          jDayChooser2.checkImage((Image) null, (int) '4', 41, (ImageObserver) jButton0);
          FileSystemHandling.createFolder((EvoSuiteFile) null);
          KeyEvent keyEvent0 = new KeyEvent(jButton0, 10136, 10136, 90, 61, '4');
          InputEvent.getModifiersExText(40);
          jDayChooser0.setDay((-53));
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      JDayChooser jDayChooser0 = new JDayChooser();
      JButton jButton0 = new JButton();
      jDayChooser0.drawDays();
      KeyEvent keyEvent0 = new KeyEvent(jButton0, 36, 36, 36, 36, '9');
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, '9', 36, 661, 36, '9');
      KeyEvent keyEvent2 = new KeyEvent(jButton0, 661, 1602L, 36, 38, 'i');
      jDayChooser0.keyPressed(keyEvent2);
      keyEvent2.setSource(jButton0);
      Color color0 = Color.getColor((String) null, 661);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 38;
      floatArray0[1] = (float) 661;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 68;
      color0.getRGBColorComponents(floatArray0);
      Color color1 = Color.magenta;
      String string0 = JSVGViewerFrame.EXPORT_AS_JPG_ACTION;
      jDayChooser0.keyPressed(keyEvent2);
      jDayChooser0.getSelectedDay();
      jDayChooser0.isDecorationBordersVisible();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.isDecorationBackgroundVisible();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%");
      jDayChooser0.drawDays();
      Boolean boolean0 = GVTAttributedCharacterIterator.TextAttribute.STRIKETHROUGH_ON;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 45, 1L, (-1013), (-1013), 'h');
      jDayChooser0.setDay(144);
      Calendar calendar0 = MockCalendar.getInstance();
      calendar0.setFirstDayOfWeek(1698);
      jDayChooser0.getInputMethodListeners();
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.getDecorationBackgroundColor();
      Color color0 = Color.orange;
      Time time0 = new Time(525L);
      time0.getTime();
      jDayChooser0.setSelectableDateRange(time0, time0);
      jDayChooser0.createVolatileImage((-1013), 238);
      jDayChooser0.isWeekOfYearVisible();
      // Undeclared exception!
      try { 
        jDayChooser0.getInputMap(1129);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition must be one of JComponent.WHEN_IN_FOCUSED_WINDOW, JComponent.WHEN_FOCUSED or JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          JDayChooser jDayChooser0 = new JDayChooser();
          MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
          jDayChooser0.setCalendar(mockGregorianCalendar0);
          JDayChooser jDayChooser1 = new JDayChooser();
          JButton jButton0 = new JButton();
          jDayChooser1.drawDays();
          FileSystemHandling.shouldAllThrowIOExceptions();
          FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
          JDayChooser jDayChooser2 = new JDayChooser();
          jDayChooser0.setCalendar(mockGregorianCalendar0);
          jDayChooser0.getDecorationBackgroundColor();
          jDayChooser0.getDecorationBackgroundColor();
          JDayChooser jDayChooser3 = new JDayChooser();
          JDayChooser jDayChooser4 = new JDayChooser(true);
          jDayChooser4.setAlignmentX(0.0F);
          JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser4.new DecoratorButton();
          jDayChooser4.repaint(0L);
          jDayChooser_DecoratorButton0.paint((Graphics) null);
          jDayChooser_DecoratorButton0.getUI();
          KeyEvent keyEvent0 = new KeyEvent(jButton0, 351, 351, (-227), 40, '4');
          JDayChooser jDayChooser5 = new JDayChooser();
          jDayChooser5.setDecorationBordersVisible(false);
          KeyEvent.getKeyModifiersText(16);
          jDayChooser0.keyPressed(keyEvent0);
          jDayChooser5.setForeground((Color) null);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
