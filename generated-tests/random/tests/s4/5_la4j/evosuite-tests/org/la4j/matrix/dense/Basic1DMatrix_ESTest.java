/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 13:07:42 GMT 2019
 */

package org.la4j.matrix.dense;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.NumberFormat;
import java.util.NoSuchElementException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.vector.DenseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Basic1DMatrix_ESTest extends Basic1DMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(1, 1);
      Matrix matrix0 = basic1DMatrix0.removeFirstColumn();
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      Matrix matrix1 = ooPlaceMatricesAddition0.apply((DenseMatrix) basic1DMatrix0, (DenseMatrix) basic1DMatrix0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1);
      ooPlaceMatricesAddition0.applySymmetric((DenseMatrix) basic1DMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix1.withInverter(linearAlgebra_InverterFactory0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(matrix0, matrix0, matrix0, matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 16;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(16, 16);
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.fromBinary(byteArray0);
      basic1DMatrix1.removeFirstRow();
      // Undeclared exception!
      try { 
        basic1DMatrix1.maxInColumn(16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '16' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(1);
      DenseMatrix.fromCSV("");
      basic1DMatrix0.toCSV();
      basic1DMatrix0.toArray();
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      // Undeclared exception!
      try { 
        basic1DMatrix1.set(444, 444, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '444' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Basic1DMatrix.diagonal(441, 441);
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 441;
      doubleArray1[1] = (double) 441;
      doubleArray1[2] = (double) 441;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 441;
      doubleArray2[1] = (double) 441;
      doubleArray2[2] = (double) 441;
      doubleArray2[3] = (double) 441;
      doubleArray2[4] = (double) 441;
      doubleArray2[5] = (double) 441;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (double) 441;
      doubleArray3[1] = (double) 441;
      doubleArray3[2] = (double) 441;
      doubleArray3[3] = (double) 441;
      doubleArray3[4] = (double) 441;
      doubleArray3[5] = (double) 441;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (double) 441;
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = (double) 441;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = (double) 441;
      doubleArray5[3] = (double) 441;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = (-1.0);
      doubleArray6[1] = (-490.41315353697);
      doubleArray6[2] = (double) 441;
      doubleArray0[5] = doubleArray6;
      Basic1DMatrix.from2DArray(doubleArray0);
      basic1DMatrix0.swapColumns(1505, 441);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      Basic1DMatrix.randomSymmetric(614, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(1, 1000, mockRandom0);
      Matrix matrix0 = basic1DMatrix0.copyOfShape(1000, 1);
      assertEquals(1000, matrix0.rows());
      assertEquals(1, matrix0.columns());
      
      basic1DMatrix0.toArray();
      assertEquals(1000, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)9;
      byte byte0 = (byte) (-89);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)71;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(0, 0);
      basic1DMatrix0.swapRows((-3499), 1959);
      basic1DMatrix0.setAll(1.0);
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(99, 156.1711254407);
      basic1DMatrix0.toArray();
      DenseVector denseVector0 = DenseVector.unit(99);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[] doubleArray0 = new double[24];
      doubleArray0[0] = (double) 99;
      doubleArray0[1] = (double) 99;
      doubleArray0[22] = 156.1711254407;
      doubleArray0[3] = 156.1711254407;
      doubleArray0[4] = (double) 99;
      doubleArray0[5] = 156.1711254407;
      Basic1DMatrix basic1DMatrix1 = new Basic1DMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(99, 99, 279);
      Matrix matrix1 = ooPlaceMatricesSubtraction0.applySimple((DenseMatrix) basic1DMatrix1, (SparseMatrix) columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(matrix0, basic1DMatrix0, matrix1, columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1122.381501954);
      doubleArray1[1] = (-3073.5370905);
      doubleArray1[2] = 2.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (-1306.008);
      doubleArray1[5] = 3238.15969178;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      basic1DMatrix0.swapColumns(9967, 9967);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(7, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 121;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = 505.892;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(121, 9, doubleArray0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.copyOfShape(844, 137);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(7, 538.5);
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 538.5;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 7;
      doubleArray2[1] = (double) 7;
      doubleArray2[2] = (double) 7;
      doubleArray2[3] = 538.5;
      doubleArray2[4] = (double) 7;
      doubleArray2[5] = (double) 7;
      doubleArray2[6] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 2.0;
      doubleArray3[2] = (-1598.0);
      doubleArray3[3] = 538.5;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 538.5;
      doubleArray4[2] = (-1598.0);
      doubleArray4[3] = 2.0;
      doubleArray0[3] = doubleArray4;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(99, 156.1711254407);
      basic1DMatrix0.toArray();
      DenseVector denseVector0 = DenseVector.unit(99);
      denseVector0.toColumnMatrix();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 99;
      doubleArray0[1] = (double) 99;
      doubleArray0[2] = 156.1711254407;
      doubleArray0[3] = 156.1711254407;
      doubleArray0[4] = (double) 99;
      doubleArray0[5] = 156.1711254407;
      Basic1DMatrix basic1DMatrix1 = new Basic1DMatrix(99, 99, doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(99, 99, 279);
      // Undeclared exception!
      try { 
        ooPlaceMatricesSubtraction0.applySimple((DenseMatrix) basic1DMatrix1, (SparseMatrix) columnMajorSparseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      int int0 = 2203;
      Matrix.zero(2203, 2203);
      Matrix matrix0 = basic1DMatrix0.copyOfRows(2203);
      basic1DMatrix0.euclideanNorm();
      basic1DMatrix0.max();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      // Undeclared exception!
      try { 
        numberFormat0.format((Object) matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-966.0);
      doubleArray0[0] = doubleArray1;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapRows(11, 1757);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 3645;
      int int1 = 13;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(3645, 13);
      Matrix matrix0 = basic1DMatrix0.copyOfRows(13);
      matrix0.blankOfColumns(13);
      int int2 = 9;
      Matrix.diagonal(9, 1951.37);
      int int3 = 466;
      double double0 = 0.0;
      DenseMatrix.diagonal(466, 0.0);
      double double1 = (-201.93);
      // Undeclared exception!
      try { 
        basic1DMatrix0.add(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 3645x13 does not equal to 13x13.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(11, 11);
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapColumns(11, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 121
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV("");
      Matrix.zero(1078, 1078);
      basic1DMatrix0.setAll(917.3);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[][] doubleArray0 = new double[8][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 2760.658709687;
      doubleArray2[1] = (-2326.1038);
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = 2760.658709687;
      doubleArray4[2] = 2760.658709687;
      doubleArray4[3] = 2760.658709687;
      doubleArray4[4] = (-199.7618918386);
      doubleArray4[5] = (-800.385);
      doubleArray4[6] = 0.0;
      doubleArray4[7] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (-199.7618918386);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = (-800.385);
      doubleArray6[3] = 2760.658709687;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = (-2326.1038);
      doubleArray6[6] = 0.0;
      doubleArray6[7] = (-800.385);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = (-199.7618918386);
      doubleArray7[1] = (-800.385);
      doubleArray7[2] = (-199.7618918386);
      doubleArray7[3] = (-2326.1038);
      doubleArray7[4] = (-1.0);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      doubleArray0[7] = doubleArray8;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(16, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(604, 604);
      // Undeclared exception!
      basic1DMatrix0.toRowMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      int int0 = 5;
      Matrix matrix0 = Matrix.identity(5);
      matrix0.divide(5);
      // Undeclared exception!
      try { 
        basic1DMatrix0.insert(matrix0, 5, 55, 5, (-1475), 5, (-1475));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 5x-1475
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)9;
      byte byte0 = (byte) (-89);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)71;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(9, 1000, mockRandom0);
      assertEquals(1000, basic1DMatrix0.columns());
      assertEquals(9, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = (-1);
      int int1 = 8;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (-103.66473);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      Basic1DMatrix basic1DMatrix0 = null;
      try {
        basic1DMatrix0 = new Basic1DMatrix((-1), 8, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1x8
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromCSV("'T!%Qksc4Zn%9 rpl23");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        Basic1DMatrix.unit(759, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Basic1DMatrix.constant(16, 16, 16);
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket("'0>+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Basic1DMatrix.fromCSV("");
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        Basic1DMatrix.from1DArray((-726), 1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -726x1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          int int0 = (-693);
          MockRandom mockRandom0 = new MockRandom((-693));
          mockRandom0.nextInt();
          mockRandom0.nextBoolean();
          // Undeclared exception!
          Basic1DMatrix.random((-693), (-693), mockRandom0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(518, 518);
      // Undeclared exception!
      try { 
        basic1DMatrix0.getRow(518);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 48;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(48);
      int int1 = 607;
      basic1DMatrix0.swapRows(607, 607);
      int int2 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.randomSymmetric(0, mockRandom0);
      basic1DMatrix1.blankOfColumns(607);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix1, basic1DMatrix0, basic1DMatrix1, basic1DMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 47;
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(47, mockRandom0);
      int int1 = 2599;
      Matrix.diagonal(2599, 2599);
      basic1DMatrix0.sum();
      basic1DMatrix0.toBinary();
      Matrix matrix0 = basic1DMatrix0.blankOfShape(47, 2599);
      // Undeclared exception!
      matrix0.multiply((-1737.230500296641));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = null;
      try {
        basic1DMatrix0 = new Basic1DMatrix((-173), (-173));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -173x-173
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2657.63;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 2657.63;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 2657.63;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 2657.63;
      doubleArray3[1] = 2657.63;
      doubleArray0[2] = doubleArray1;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 2657.63;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 0.0;
      doubleArray0[3] = doubleArray4;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = basic1DMatrix0.shuffle();
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(matrix0, basic1DMatrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = null;
      try {
        basic1DMatrix0 = new Basic1DMatrix((-433), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -433x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        Basic1DMatrix.randomSymmetric((-274), mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -274x-274
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
