/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:53:00 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        SparseMatrix.randomSymmetric(5576, (double) 5576, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 31091776.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      String string0 = "No elements selected.";
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        Matrix.from1DArray((-1306), (-1306), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1306x-1306
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(8);
      rowMajorSparseMatrix0.toCSV();
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("1.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 1.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 1.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 1.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 1.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 1.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.000\n");
      sparseMatrix0.hadamardProduct(rowMajorSparseMatrix0);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, (-733.9899));
      cCSMatrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(4, 4);
      matrix0.blank();
      NumberFormat.getIntegerInstance();
      // Undeclared exception!
      try { 
        Matrix.unit((-3533), (-3533));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      SparseMatrix sparseMatrix0 = cCSMatrix0.toSparseMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      sparseMatrix0.toMatrixMarket();
      cCSMatrix0.equals((Object) rowMajorSparseMatrix0);
      MockRandom mockRandom0 = new MockRandom();
      Matrix.randomSymmetric(0, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(1, 1);
      basic2DMatrix0.equals((Object) cRSMatrix0);
      cRSMatrix0.insert((Matrix) basic2DMatrix0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 1723);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        matrix0.eachInRow(1723, (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1723
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 17;
      doubleArray1[1] = (double) 17;
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      denseMatrix0.removeFirstColumn();
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      denseMatrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toSparseMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(2352, 0.0);
      Matrix matrix1 = matrix0.removeLastColumn();
      matrix1.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(20, 1.0851753477252764);
      Matrix matrix1 = matrix0.removeLastColumn();
      matrix1.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.toSparseMatrix();
      cCSMatrix0.minInRow(2344);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.trace();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 895;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(895, 895, 0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.foldRows((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      SparseVector sparseVector0 = SparseVector.zero(1407);
      Vector vector0 = sparseVector0.sliceRight(9);
      // Undeclared exception!
      try { 
        cCSMatrix0.insertColumn(0, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("        ");
      columnMajorSparseMatrix0.hashCode();
      CRSMatrix cRSMatrix0 = new CRSMatrix(6, 6);
      Matrix matrix0 = cRSMatrix0.insert((Matrix) columnMajorSparseMatrix0);
      matrix0.toRowMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.zero(31, (-1120), 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 31x-1120
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(373, 373);
      basic2DMatrix0.copyOfRows(373);
      // Undeclared exception!
      basic2DMatrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(8);
      rowMajorSparseMatrix0.toCSV();
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("1.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 1.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 1.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 1.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 1.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 1.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.000\n");
      rowMajorSparseMatrix0.subtract((Matrix) sparseMatrix0);
      SparseMatrix sparseMatrix1 = sparseMatrix0.toSparseMatrix();
      sparseMatrix1.multiply((Matrix) rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.sliceBottomRight(2514, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [2514..8][8..8].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Matrix matrix0 = basic2DMatrix0.add((Matrix) basic2DMatrix0);
      Matrix matrix1 = matrix0.multiply((-1754.702987));
      matrix1.determinant();
      matrix0.subtract(matrix1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(37, mockRandom0);
      basic2DMatrix0.trace();
      basic2DMatrix0.multiply(1.0);
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MockRandom mockRandom0 = new MockRandom((-1614L));
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(4, mockRandom0);
      basic2DMatrix0.transpose();
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(2);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.maxInRow(1039);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1039' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = new CCSMatrix(9, 9);
      // Undeclared exception!
      try { 
        cCSMatrix0.get(17, 373);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '17' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 32;
      int int1 = 854;
      double double0 = (-2019.500224419048);
      Matrix matrix0 = Matrix.constant(32, 854, (-2019.500224419048));
      // Undeclared exception!
      matrix0.manhattanNorm();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      rowMajorSparseMatrix0.toMatrixMarket();
      Matrix matrix0 = Matrix.unit(0, 0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.QR;
      matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.removeColumn(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(10, 10);
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '11' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      DenseMatrix.from2DArray(doubleArray0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from2DArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic2DMatrix0.transformColumn(17, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1, 1);
      Matrix matrix0 = Matrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      Matrix matrix1 = matrix0.removeFirstColumn();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      matrix0.foldColumn(1, vectorAccumulator0);
      Matrix matrix2 = matrix1.slice((-822), 1, (-513), 1);
      // Undeclared exception!
      matrix2.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      SparseMatrix sparseMatrix0 = cCSMatrix0.toSparseMatrix();
      cCSMatrix0.hashCode();
      sparseMatrix0.insert((Matrix) cCSMatrix0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.eachInColumn(219, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(26, 26);
      NumberFormat.getIntegerInstance();
      sparseMatrix0.min();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      sparseMatrix0.foldColumns(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[0];
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      SparseMatrix.identity(930);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      matrix0.withSolver(linearAlgebra_SolverFactory0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      rowMajorSparseMatrix0.foldColumn(0, vectorAccumulator0);
      DenseMatrix.diagonal(4, 930);
      // Undeclared exception!
      try { 
        matrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      matrix0.setRow(1, (-186.900572144));
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.is(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1, 1);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.non(matrixPredicate0);
      Matrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      Basic2DMatrix.unit(1, 1);
      Matrix.unit(281, 10);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("        ");
      columnMajorSparseMatrix0.iteratorOrNonZeroColumns();
      columnMajorSparseMatrix0.removeLastRow();
      columnMajorSparseMatrix0.hashCode();
      columnMajorSparseMatrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(4, 3115.553226489178);
      MockRandom mockRandom0 = new MockRandom(4);
      cCSMatrix0.toCSV();
      cCSMatrix0.toSparseMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        denseMatrix0.foldColumn(4, vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Matrix.identity(3032);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 373;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(373);
      int int1 = 17;
      Matrix matrix0 = denseMatrix0.copyOfRows(17);
      int int2 = 9;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      denseMatrix0.transformRow(9, vectorFunction0);
      matrix0.toRowMajorSparseMatrix();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      int int3 = (-3446);
      int int4 = 1758;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = (double) int4;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(int2, int4, doubleArray0);
      int int5 = (-849);
      rowMajorSparseMatrix0.maxInRow(int5);
      rowMajorSparseMatrix0.maxInRow(int3);
      matrix0.columns();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("        ");
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      columnMajorSparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      columnMajorSparseMatrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(2352, 1.0851753477252764);
      matrix0.infinityNorm();
      Matrix matrix1 = matrix0.removeLastColumn();
      matrix1.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromCSV("t:9.S");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.product();
      SparseMatrix sparseMatrix0 = cCSMatrix0.toSparseMatrix();
      sparseMatrix0.insert((Matrix) cCSMatrix0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      rowMajorSparseMatrix0.mkString(numberFormat0);
      rowMajorSparseMatrix0.toCSV();
      rowMajorSparseMatrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      matrix0.toMatrixMarket();
      matrix0.infinityNorm();
      Matrix matrix1 = matrix0.subtract(0.0);
      int int0 = (-2118);
      // Undeclared exception!
      try { 
        matrix1.copyOfRows((-2118));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2118x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.toString();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1614L));
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(4, mockRandom0);
      basic2DMatrix0.norm();
      basic2DMatrix0.determinant();
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeColumn((-441));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 4, 4);
      cRSMatrix0.manhattanNorm();
      cRSMatrix0.toCSV();
      cRSMatrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1443, 1443);
      rowMajorSparseMatrix0.toCSV();
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      rowMajorSparseMatrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.equals((Object) "eQcgP]Lf#eZvF1");
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1, 1);
      Matrix matrix0 = Matrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) columnMajorSparseMatrix0, (-2964), 1, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -2964, 1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1, 1);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      columnMajorSparseMatrix0.non(matrixPredicate0);
      Matrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      Basic2DMatrix.unit(2806, 16);
      // Undeclared exception!
      try { 
        DenseMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(2352, 0.0);
      matrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insertColumn((-2147459210), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[0];
      DenseVector.fromArray(doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      int[] intArray0 = new int[1];
      intArray0[0] = (-264);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-264' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(4, 4);
      Matrix matrix0 = basic2DMatrix0.add(4733.0157264);
      matrix0.toSparseMatrix();
      int int0 = Integer.MAX_VALUE;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 16;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = (double) 4;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(Integer.MAX_VALUE, 16, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cCSMatrix0.hashCode();
      cRSMatrix0.insert((Matrix) cCSMatrix0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      ColumnMajorSparseMatrix.identity(219);
      NumberFormat.getIntegerInstance();
      cRSMatrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MockRandom mockRandom0 = new MockRandom(9976L);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(10, mockRandom0);
      basic2DMatrix0.determinant();
      basic2DMatrix0.rank();
      cCSMatrix0.toSparseMatrix();
      basic2DMatrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("        ");
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(2346, 2352);
      CCSMatrix cCSMatrix0 = new CCSMatrix(2352, 2352);
      cCSMatrix0.equals((Matrix) denseMatrix0, (double) 2346);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.hadamardProduct(denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 1x0 does not equal to 2346x2346.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(8);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1030, 2350, (-655.3099));
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) denseMatrix0, 2350, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 2350 rows and 2 cols at 0, 0 in a 8x8 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      RowMajorSparseMatrix.zero(1, 1446);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1, 1);
      columnMajorSparseMatrix0.sliceTopLeft(1, 1);
      columnMajorSparseMatrix0.toColumnMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1, 1);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      columnMajorSparseMatrix0.non(matrixPredicate0);
      Matrix matrix0 = Matrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      Matrix matrix1 = matrix0.copyOfRows(1);
      matrix1.max();
      // Undeclared exception!
      try { 
        matrix1.setRow(7, (double) 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("        ");
      columnMajorSparseMatrix0.hashCode();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.removeRow(43);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[0];
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.updateRow(11, vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(8);
      rowMajorSparseMatrix0.toCSV();
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("1.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 1.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 1.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 1.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 1.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 1.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.000\n");
      rowMajorSparseMatrix0.subtract((Matrix) sparseMatrix0);
      rowMajorSparseMatrix0.removeFirstRow();
      // Undeclared exception!
      try { 
        sparseMatrix0.slice(8, 3160, 3160, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [8..3160][3160..5].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = (-2297);
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-2297);
      doubleArray1[1] = (double) 17;
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      denseMatrix0.toCSV();
      Matrix matrix0 = denseMatrix0.removeFirstColumn();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.blankOfRows((-2297));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("        ");
      columnMajorSparseMatrix0.divide(2352);
      columnMajorSparseMatrix0.toColumnMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 373;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(373);
      int int1 = 17;
      Matrix matrix0 = denseMatrix0.copyOfRows(17);
      Vector vector0 = denseMatrix0.getRow(32);
      Vector vector1 = vector0.copyOfLength(32);
      // Undeclared exception!
      try { 
        matrix0.multiply(vector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 32 does not equal to 373.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 2, 0);
      VectorAccumulator vectorAccumulator0 = null;
      double[] doubleArray0 = columnMajorSparseMatrix0.foldRows((VectorAccumulator) null);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.update(matrixFunction0);
      double[][] doubleArray1 = new double[2][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      DenseMatrix.from2DArray(doubleArray1);
      int int0 = (-699);
      CCSMatrix cCSMatrix0 = null;
      try {
        cCSMatrix0 = new CCSMatrix((-699), (-515), 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -699x-515
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 5576;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = new CCSMatrix(5576, 5576);
      cCSMatrix0.toDenseMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      double double0 = 0.0;
      mockRandom0.doubles((long) int0, (double) int0, double0);
      NumberFormat.getIntegerInstance();
      int int1 = 1624;
      Matrix.randomSymmetric(int1, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      Matrix.diagonal(0, 0.0);
      columnMajorSparseMatrix0.setColumn(0, 0.0);
      columnMajorSparseMatrix0.updateColumn(0, (VectorFunction) null);
      columnMajorSparseMatrix0.max();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.updateAt(Integer.MAX_VALUE, 0, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.multiplyByItsTranspose();
      cCSMatrix0.hashCode();
      cRSMatrix0.insert((Matrix) cCSMatrix0);
      cCSMatrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.determinant();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cCSMatrix0.hashCode();
      Matrix matrix0 = cRSMatrix0.insert((Matrix) cCSMatrix0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.setColumn(932, (double) 932);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(5);
      int int0 = 13;
      // Undeclared exception!
      try { 
        denseMatrix0.copyOfRows(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Matrix matrix0 = Matrix.randomSymmetric(0, (Random) null);
      matrix0.blankOfColumns(0);
      matrix0.toDenseMatrix();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(18, 629.8679);
      denseMatrix0.determinant();
      denseMatrix0.rank();
      Matrix matrix0 = cCSMatrix0.removeLastRow();
      cCSMatrix0.hashCode();
      matrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(8);
      rowMajorSparseMatrix0.toCSV();
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("1.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 1.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 1.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 1.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 1.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 1.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.000\n");
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(8);
      CRSMatrix cRSMatrix1 = CRSMatrix.fromCSV("1.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 1.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 1.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 1.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 1.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 1.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.000\n");
      SparseMatrix sparseMatrix1 = sparseMatrix0.toSparseMatrix();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      sparseMatrix1.non(advancedMatrixPredicate0);
      rowMajorSparseMatrix0.determinant();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix1.foldRows(vectorAccumulator0);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInColumn(3303);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3303' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1, 1);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      columnMajorSparseMatrix0.non(matrixPredicate0);
      Matrix.diagonal(1, (-1.0));
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.setColumn(1, (-1.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.toSparseMatrix();
      cCSMatrix0.transform((MatrixFunction) null);
      double double0 = 629.8679;
      // Undeclared exception!
      try { 
        cCSMatrix0.set((-1), (-1), 629.8679);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(1, mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix0 = basic2DMatrix0.transform(matrixFunction0);
      matrix0.toSparseMatrix();
      CCSMatrix cCSMatrix0 = null;
      try {
        cCSMatrix0 = new CCSMatrix(1, 9, 1443);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 9.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(5, 5);
      rowMajorSparseMatrix0.toCSV();
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      Matrix.unit(712, 712);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      Matrix.diagonal(0, 0.0);
      columnMajorSparseMatrix0.setColumn(0, 0.0);
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      denseVector0.toDiagonalMatrix();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.setRow(4, (Vector) denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1. Should be: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(1, 2307.98769502);
      Basic2DMatrix.unit(1, 1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.updateRow(1, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(2352, 1.0851753477252764);
      matrix0.power(2352);
      matrix0.removeLastColumn();
      matrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = Matrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      Locale locale0 = Locale.ROOT;
      NumberFormat.getCurrencyInstance(locale0);
      matrix0.power(7);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      cCSMatrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Matrix matrix0 = Matrix.diagonal(0, 0.0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.power((-1584));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -1584.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1, 1);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.non(matrixPredicate0);
      Matrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      Basic2DMatrix.unit(1, 1);
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[21];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = 1.0;
      doubleArray0[0] = doubleArray1;
      DenseMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1, 1);
      Matrix matrix0 = Matrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      Locale locale0 = Locale.ROOT;
      NumberFormat.getCurrencyInstance(locale0);
      int int0 = 9;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) columnMajorSparseMatrix0, 86, 9, (-2235), 86);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -2235x86
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cRSMatrix1, 16, (-553), 16, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 16, -553
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CRSMatrix.zero(1, 1, 1);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(1, 1);
      basic2DMatrix0.rank();
      NumberFormat.getIntegerInstance();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(2352, 0.0);
      Matrix matrix1 = matrix0.removeLastRow();
      int int0 = 1103;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix1.foldColumn(int0, vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(17, 17);
      // Undeclared exception!
      try { 
        matrix0.insert(matrix0, 12, 12, 390, 1224, 2, (-2784));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 2x-2784
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Integer integer0 = new Integer(17);
      Matrix.unit(6, 6);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      Matrix.random(Integer.MAX_VALUE, 373, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CRSMatrix.zero(1, 1, 1);
      MockRandom mockRandom0 = new MockRandom((-1442L));
      MockRandom mockRandom1 = new MockRandom();
      Basic2DMatrix.randomSymmetric(1, mockRandom1);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(1);
      basic2DMatrix0.sum();
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(7, (-1.0));
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(7, 1392.184);
      int int0 = 3;
      int int1 = 4;
      // Undeclared exception!
      try { 
        cRSMatrix0.insert(matrix0, 7, 3, 822358364, 822358364, 7, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 822358364, 822358364
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[0];
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      Matrix matrix1 = matrix0.multiplyByItsTranspose();
      matrix0.kroneckerProduct(matrix1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      rowMajorSparseMatrix0.toMatrixMarket();
      matrix0.equals((Object) rowMajorSparseMatrix0);
      matrix0.rowMajorIterator();
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      // Undeclared exception!
      try { 
        cRSMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(2, 1.7540261287428858);
      denseMatrix0.min();
      MockRandom mockRandom0 = new MockRandom(2352);
      denseMatrix0.toCSV();
      SparseMatrix.zero(1059896267, 2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      DenseVector denseVector0 = DenseVector.fromCSV("1.000,");
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(denseVector0, denseVector0);
      Matrix matrix0 = vector0.toRowMatrix();
      matrix0.power(48);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(54);
      String string0 = rowMajorSparseMatrix0.toCSV();
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV(string0);
      CRSMatrix.identity(54);
      CRSMatrix.fromCSV(string0);
      SparseMatrix sparseMatrix1 = sparseMatrix0.toSparseMatrix();
      boolean boolean0 = false;
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      sparseMatrix1.non(advancedMatrixPredicate0);
      rowMajorSparseMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 17;
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.random(17, 17, mockRandom0);
      Matrix matrix0 = basic2DMatrix0.copyOfColumns(17);
      Matrix matrix1 = matrix0.shuffle();
      matrix1.rotate();
      String string0 = "..";
      // Undeclared exception!
      try { 
        DenseMatrix.fromCSV("..");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.determinant();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cCSMatrix0.hashCode();
      cRSMatrix0.insert((Matrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        Matrix.zero((-2198), (-2198));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2198x-2198
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(1, 1, doubleArray0);
      NumberFormat.getIntegerInstance();
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(1, mockRandom0);
      matrix0.toCSV();
      columnMajorSparseMatrix0.norm();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DenseMatrix.identity(373);
      CCSMatrix cCSMatrix0 = new CCSMatrix(373, 17);
      // Undeclared exception!
      try { 
        cCSMatrix0.updateColumn(17, (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(373, 373);
      Matrix matrix0 = basic2DMatrix0.copyOfRows(373);
      basic2DMatrix0.columnMajorIterator();
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert(matrix0, 9, 373, 9, 373);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 9 rows and 373 cols at 9, 373 in a 373x373 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 17;
      doubleArray1[1] = (double) 17;
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = denseMatrix0.removeFirstColumn();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = denseMatrix0.toColumnMajorSparseMatrix();
      matrix0.equals((Object) columnMajorSparseMatrix0);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      NumberFormat.getIntegerInstance();
      MockRandom mockRandom0 = new MockRandom(17);
      Matrix.randomSymmetric(32, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[0];
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      rowMajorSparseMatrix0.toMatrixMarket();
      matrix0.equals((Object) rowMajorSparseMatrix0);
      MockRandom mockRandom0 = new MockRandom();
      Matrix.randomSymmetric(0, mockRandom0);
      matrix0.insert((Matrix) rowMajorSparseMatrix0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      Matrix.diagonal(13, 2307.98769502);
      cRSMatrix0.toCSV();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(1, 2307.98769502);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(1, 1);
      matrix0.insert((Matrix) basic2DMatrix0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      DenseMatrix.from2DArray(doubleArray0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.transformColumn(5, vectorFunction0);
      MockRandom mockRandom0 = new MockRandom();
      Matrix.randomSymmetric(9, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.mkString("wOp", "wOp");
      cCSMatrix0.setAll(1160.1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(38, 38);
      basic2DMatrix0.blankOfShape(38, 38);
      basic2DMatrix0.toColumnVector();
      basic2DMatrix0.columns();
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      MockRandom mockRandom0 = new MockRandom(2207);
      // Undeclared exception!
      SparseMatrix.zero(2207, 1059896267);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[2] = (double) 18;
      doubleArray0[2] = (double) 18;
      doubleArray0[3] = (double) 18;
      int[] intArray0 = new int[0];
      CCSMatrix cCSMatrix1 = new CCSMatrix(18, 1712, 1712, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cCSMatrix1.insertColumn(1706, (Vector) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(8);
      rowMajorSparseMatrix0.toCSV();
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("1.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 1.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 1.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 1.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 1.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 1.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.000\n");
      CRSMatrix.identity(8);
      CRSMatrix.fromCSV("1.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 1.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 1.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 1.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 1.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 1.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.000\n");
      SparseMatrix sparseMatrix1 = sparseMatrix0.toSparseMatrix();
      sparseMatrix1.divide(8);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      sparseMatrix1.non(advancedMatrixPredicate0);
      rowMajorSparseMatrix0.determinant();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 8;
      doubleArray0[5] = (double) 8;
      doubleArray0[6] = 1.0;
      Matrix.from1DArray(5, 5, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(37, 37);
      MockRandom mockRandom0 = new MockRandom(37);
      denseMatrix0.toCSV();
      // Undeclared exception!
      SparseMatrix.zero(1059896267, 1059896267);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 2352;
      // Undeclared exception!
      try { 
        CCSMatrix.zero(2352, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MockRandom mockRandom0 = new MockRandom((-395L));
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(2, mockRandom0);
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Matrix.diagonal(1, 2307.98769502);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(1, 1);
      basic2DMatrix0.rank();
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Matrix.diagonal(1, 2307.98769502);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(1, 1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Vector vector0 = Vector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertRow((-1), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CRSMatrix.zero(1, 1, 1);
      Basic2DMatrix.unit(1, 1);
      MockRandom mockRandom0 = new MockRandom(0L);
      Basic2DMatrix.randomSymmetric(1, mockRandom0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(521, 1);
      // Undeclared exception!
      try { 
        basic2DMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Matrix.diagonal(2352, 2352);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(2352, 2352);
      NumberFormat.getIntegerInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Vector vector0 = Vector.fromCollection(linkedList0);
      basic2DMatrix0.insertRow(2352, vector0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1, 1);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(1, 1);
      basic2DMatrix0.equals((Object) cRSMatrix0);
      basic2DMatrix0.rank();
      NumberFormat.getIntegerInstance();
      // Undeclared exception!
      try { 
        basic2DMatrix0.is((MatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(1, 1);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      int[] intArray1 = new int[8];
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray1[2] = 1;
      intArray1[3] = 1;
      intArray1[4] = 1;
      intArray1[5] = 1;
      intArray1[6] = 1;
      intArray1[7] = 1;
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
