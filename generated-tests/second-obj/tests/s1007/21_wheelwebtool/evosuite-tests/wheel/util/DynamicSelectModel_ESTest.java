/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:35:15 GMT 2018
 */

package wheel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalField;
import java.util.Collection;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.junit.runner.RunWith;
import org.xmlpull.v1.XmlPullParser;
import wheel.ErrorPage;
import wheel.components.Component;
import wheel.components.ElExpression;
import wheel.components.StandaloneComponent;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DynamicSelectModel_ESTest extends DynamicSelectModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        dynamicSelectModel0.getLabel(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ElExpression elExpression0 = new ElExpression("");
      DynamicSelectModel dynamicSelectModel0 = null;
      try {
        dynamicSelectModel0 = new DynamicSelectModel(elExpression0, elExpression0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        dynamicSelectModel0.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.collection("");
      // Undeclared exception!
      try { 
        dynamicSelectModel0.getObjects();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression  evaluated to null. Can't build a dynamic ISelectModel
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("~3y");
      // Undeclared exception!
      try { 
        dynamicSelectModel1.getOptionCount();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression ~3y.values() to create a dynamic ISelectModel.
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.getTopLevelComponent();
      // Undeclared exception!
      try { 
        dynamicSelectModel0.getOptionCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.getTopLevelComponent();
      dynamicSelectModel0.setTopLevelComponent((StandaloneComponent) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.label("~3");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.collection("~3");
      // Undeclared exception!
      try { 
        dynamicSelectModel2.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Value attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("[] from ");
      dynamicSelectModel1.getObjects();
      dynamicSelectModel0.getObjects();
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.enumeration("[] from ");
      assertSame(dynamicSelectModel2, dynamicSelectModel1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("[] from ");
      dynamicSelectModel0.translateValue("[] from ");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.value("[] from ");
      assertSame(dynamicSelectModel1, dynamicSelectModel2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("[] from ");
      dynamicSelectModel1.validate();
      dynamicSelectModel1.value("[] from ");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel0.empty(dynamicSelectModel1);
      dynamicSelectModel1.translateValue("[] from ");
      dynamicSelectModel1.getObjects();
      dynamicSelectModel2.getComponent();
      dynamicSelectModel0.setComponent((Component) null);
      assertSame(dynamicSelectModel0, dynamicSelectModel2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("[] from ");
      dynamicSelectModel0.getObjects();
      dynamicSelectModel0.getComponent();
      dynamicSelectModel0.reset();
      LinkedHashSet<TemporalField> linkedHashSet0 = new LinkedHashSet<TemporalField>();
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel0.value("[] from ");
      dynamicSelectModel1.translateValue("[] from ");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.empty(linkedHashSet0);
      dynamicSelectModel1.translator("gc");
      ChronoField chronoField0 = ChronoField.MICRO_OF_SECOND;
      dynamicSelectModel3.setComponent((Component) null);
      linkedHashSet0.add(chronoField0);
      DynamicSelectModel dynamicSelectModel4 = dynamicSelectModel0.empty("[] from ");
      String string0 = XmlPullParser.FEATURE_VALIDATION;
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      dynamicSelectModel1.reset();
      dynamicSelectModel2.translateValue("[] from ");
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.entity("[] from ");
      dynamicSelectModel4.translateValue("org.mvel.util.FastList@0000000070");
      String string1 = "org.xmlpull.mxp1.MXParserCacingStrings";
      dynamicSelectModel4.collection(string1);
      String string2 = "org.mvel.util.FastList@0000000098";
      dynamicSelectModel0.label(string2);
      DynamicSelectModel dynamicSelectModel5 = dynamicSelectModel4.label(string1);
      dynamicSelectModel5.translateValue(string2);
      dynamicSelectModel5.reset();
      int int0 = XmlPullParser.ENTITY_REF;
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("[] from ");
      dynamicSelectModel0.getObjects();
      dynamicSelectModel0.getComponent();
      dynamicSelectModel0.reset();
      Collection collection0 = dynamicSelectModel0.getObjects();
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel0.value("[] from ");
      dynamicSelectModel1.translateValue("[] from ");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.empty(collection0);
      String string0 = XmlPullParser.FEATURE_VALIDATION;
      dynamicSelectModel2.translateValue("`");
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("http://xmlpull.org/v1/doc/features.html#validation");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      dynamicSelectModel1.reset();
      dynamicSelectModel2.translateValue("org.mvel.util.FastList@0000000076");
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.entity("[] from ");
      dynamicSelectModel3.translateValue("http://xmlpull.org/v1/doc/features.html#validation");
      DynamicSelectModel dynamicSelectModel4 = new DynamicSelectModel();
      dynamicSelectModel1.translateValue("org.mvel.util.FastList@0000000084");
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      try { 
        dynamicSelectModel0.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Label attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }
}
