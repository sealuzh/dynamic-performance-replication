/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 10:58:53 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.Edge;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.Label;
import wheel.asm.MethodWriter;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-486));
      classWriter0.version = 19;
      String string0 = "scF\"T:N*_2mat2%0";
      classWriter0.newClassItem("scF\"T:N*_2mat2%0");
      classWriter0.newClass("-0iPDbTstW9l(D?c3");
      classWriter0.newFloat((-486));
      classWriter0.visitAnnotation("scF\"T:N*_2mat2%0", false);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(4, 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      classWriter0.getCommonSuperClass("wheel.asm.ClassWriter", "wheel.asm.ClassWriter");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(684, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(24);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("\"ap?S09-", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(169);
      classWriter0.visitOuterClass("[]", (String) null, "JSR/RET are not supported with computeFrames option");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2465);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(25165824);
      classWriter0.newFloat(4373.57F);
      classWriter0.newFloat(25165824);
      classWriter0.cr = null;
      classWriter0.newInteger(19);
      classWriter0.visitEnd();
      classWriter0.newInteger(1915);
      classWriter0.toByteArray();
      classWriter0.addType("SourceDebugExtension");
      classWriter0.newDouble(1571.0);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("CXrl}bMjFS,f|B]#8kY", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(37);
      classWriter0.threshold = 37;
      classWriter0.visitEnd();
      int int0 = classWriter0.addUninitializedType("SourceFile", (-891));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3085));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = File.separator;
      int int0 = classWriter0.addType("/");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      classWriter0.newDouble(0.75);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass((String) null, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-5193));
      Item item0 = classWriter0.newLong((-5193));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(24);
      int int0 = classWriter0.newMethod(";6<5PV", ";6<5PV", ";6<5PV", true);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(31);
      classWriter0.newField("*V)", "*V)", "*V)");
      String string0 = Character.getName(31);
      assertEquals("INFORMATION SEPARATOR ONE", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.visit(4, 15, "G{s!exCy: k5!", (String) null, (String) null, (String[]) null);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(4, (-4856));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "value ";
      stringArray0[1] = "";
      stringArray0[2] = "wheel.asm.MethodWriter";
      stringArray0[3] = "";
      stringArray0[4] = "";
      classWriter0.newFieldItem("ZB78oZsy]", "", "wheel.asm.MethodWriter");
      stringArray0[5] = "value ";
      stringArray0[6] = "value ";
      stringArray0[7] = "value ";
      stringArray0[8] = "value ";
      classWriter0.visit(1689, (-1277), "", "value ", "", stringArray0);
      classWriter0.visitMethod(1689, "<init>", "", "", stringArray0);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(65535, 16777222);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      String string0 = "*K6VR:'\"[1li,)}5F";
      String[] stringArray0 = new String[3];
      stringArray0[1] = null;
      stringArray0[0] = "q";
      // Undeclared exception!
      try { 
        classWriter0.visit(32, 32, "q", (String) null, "q", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(34);
      String[] stringArray0 = new String[0];
      classWriter0.visit(4386, 4386, "org.apache.commons.io.filefilter.FalseFileFilter", "", (String) null, stringArray0);
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.FalseFileFilter", "org.apache.commons.io.filefilter.DirectoryFileFilter");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(65535, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1949);
      Item item0 = classWriter0.newInteger(1949);
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.Item@6
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newUTF8("U&u(g-[V<");
      Float float0 = new Float((double) 2);
      Float.min(998.9F, 1876.22F);
      Float.min(2, 0.0F);
      Float.sum(2, 1898.5552F);
      int int0 = classWriter0.newConst(float0);
      assertEquals(2, int0);
      
      Long long0 = new Long((-3176L));
      Long.min(1, 0L);
      Long.min(0L, 1L);
      Long.divideUnsigned(0L, 1);
      Long.toUnsignedString(3032L);
      Long.compare(1, 0);
      classWriter0.newConstItem(long0);
      classWriter0.newFloat((-1.0F));
      classWriter0.newConst("U&u(g-[V<");
      classWriter0.newDouble(0.0);
      String[] stringArray0 = new String[0];
      classWriter0.visit((-179), (-418), "U&u(g-[V<", "U&u(g-[V<", "U&u(g-[V<", stringArray0);
      classWriter0.toByteArray();
      int int1 = classWriter0.newNameType("", "U&u(g-[V<");
      assertEquals(13, int1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2427);
      int int0 = (-1062);
      String[] stringArray0 = new String[0];
      classWriter0.visit(2427, (-1062), "Z/5#,;O>,Q,Rrb", "Z/5#,;O>,Q,Rrb", "", stringArray0);
      classWriter0.visitAnnotation("EnclosingMethod", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.newConst(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value [B@7bd5064c
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(24);
      classWriter0.newConstItem(";6<5PV");
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass(";6<5PV", ";6<5PV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: ;6<5PV
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1349));
      String string0 = "n7>?X;t7-80D\\4sX~b";
      classWriter0.visitInnerClass("", "", "", 1448);
      classWriter0.newField("n7>?X;t7-80D\u0004sX~b", "5Prc9wYK&<W`V", "n7>?X;t7-80D\u0004sX~b");
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader((byte[]) null, (-1349), 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1322));
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, (-1322));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(139);
      classWriter0.newDouble(139);
      classWriter0.newClassItem("r U-C");
      classWriter0.newDouble(1102.3935202);
      classWriter0.newNameType("9724hzNT", "9724hzNT");
      classWriter0.index = 3309;
      int int0 = 0;
      String string0 = null;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "9724hzNT";
      stringArray0[1] = "";
      classWriter0.visit(8, 0, "9724hzNT", (String) null, "", stringArray0);
      classWriter0.index = 0;
      classWriter0.addType("");
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("", "e-?P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.EmptyFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, (-4213));
      int int0 = classWriter0.addUninitializedType("L@*8/^T@5&", 8);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String string0 = null;
      classWriter0.newLong(0L);
      classWriter0.visitSource("", "");
      classWriter0.newInteger(0);
      classWriter0.invalidFrames = false;
      classWriter0.index = 33;
      String string1 = "wheel.asm.ClassReader";
      classWriter0.newMethod("r--", "wheel.asm.ClassReader", "wheel.asm.ClassReader", false);
      // Undeclared exception!
      try { 
        classWriter0.newNameType((String) null, "-sguINN O&keP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-775));
      classWriter0.visitOuterClass("{", "{", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "";
      Short short0 = new Short((short) (-1748));
      ClassWriter classWriter0 = new ClassWriter(220);
      classWriter0.visitField((-1244), "Synthetic", "", "9|#*<I?jL%", short0);
      classWriter0.newLong(2074L);
      ClassWriter classWriter1 = new ClassWriter((short) (-1748));
      classWriter1.newMethodItem("%T%OucVi_,c(@z%", " rqE+x'v!LnLz%p[", "%T%OucVi_,c(@z%", true);
      classWriter0.visitInnerClass("lG6C)9r", " rqE+x'v!LnLz%p[", "", 12);
      classWriter0.visit(12, 47, "g", "?6bpKk9", "g", (String[]) null);
      // Undeclared exception!
      try { 
        classWriter0.visitAnnotation((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(25165824);
      classWriter0.newFloat(4373.57F);
      classWriter0.newFloat(25165824);
      Attribute attribute0 = new Attribute("curui");
      classWriter0.visitAttribute(attribute0);
      classWriter0.cr = null;
      classWriter0.newInteger(19);
      classWriter0.visitEnd();
      Item item0 = classWriter0.newInteger(1915);
      Item item1 = classWriter0.newLong(1915);
      assertFalse(item1.equals((Object)item0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-494));
      int int0 = classWriter0.addType("fZ&2/wfrx};5");
      classWriter0.newMethodItem(" ys[|vtKUPGjr", "", "", true);
      int int1 = classWriter0.addUninitializedType(" ys[|vtKUPGjr", (-494));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1949);
      Item item0 = classWriter0.newInteger(1949);
      Item item1 = classWriter0.newLong(0L);
      Item item2 = classWriter0.newInteger(1949);
      assertNotSame(item2, item1);
      assertSame(item2, item0);
      assertNotNull(item2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-494));
      Boolean boolean0 = Boolean.FALSE;
      classWriter0.newConstItem(boolean0);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("rb  F</0~_JCaSBT-", "|!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'rb  F</0~_JCaSBT-.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      Item item0 = classWriter0.key3;
      Boolean boolean0 = new Boolean(false);
      classWriter0.newConstItem(boolean0);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("SourceDebugExtension", "Fg&v*:Kd^LW$^h'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'SourceDebugExtension.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3085));
      Float float0 = new Float((double) 2);
      Type type0 = Type.VOID_TYPE;
      classWriter0.newConstItem(type0);
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "org.apache.commons.io.filefilter.FileFileFilter");
      assertEquals("org.apache.commons.io.filefilter.FileFileFilter", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(185);
      classWriter0.newDouble(185);
      classWriter0.newDouble(185);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(9, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2902);
      String string0 = File.separator;
      int int0 = classWriter0.addType("/");
      assertEquals(1, int0);
      
      int int1 = classWriter0.addType("/");
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2902);
      classWriter0.visitSource((String) null, "");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1314));
      classWriter0.visitOuterClass("1PZ", "", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Type type0 = Type.FLOAT_TYPE;
      Type.getObjectType("y3");
      classWriter0.newConstItem(type0);
      String string0 = "";
      classWriter0.newMethod("", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "yC&5O,=0~E^ap", false);
      classWriter0.newFloat(8);
      classWriter0.newClass("");
      classWriter0.visitInnerClass("", (String) null, "E3~ALb_'csEtvHvn", 0);
      String string1 = "";
      classWriter0.visitInnerClass("", "E3~ALb_'csEtvHvn", "", (-23));
      // Undeclared exception!
      try { 
        classWriter0.newMethod((String) null, "", "value ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-494));
      classWriter0.visitSource((String) null, (String) null);
      Attribute attribute0 = new Attribute("@");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte) (-9);
      byte byte0 = (byte) (-25);
      byteArray0[7] = (byte) (-25);
      int int0 = 12;
      int int1 = 24117248;
      int int2 = 4096;
      Attribute attribute1 = new Attribute("p");
      // Undeclared exception!
      try { 
        attribute1.write(classWriter0, byteArray0, (byte) (-109), (byte) (-109), (byte)46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1314));
      Float float0 = new Float((double) (-1314));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Pv$3");
      Float.sum(0.0F, 0.0F);
      Item item0 = classWriter0.newConstItem(float0);
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "org.apache.commons.io.filefilter.FileFileFilter");
      classWriter0.newFloat((-1314));
      Item item1 = classWriter0.newFloat((-1314));
      assertSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-364));
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "org.apache.commons.io.filefilter.FalseFileFilter");
      assertEquals("java/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassWriter classWriter0 = new ClassWriter(1032);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Synthetic";
      stringArray0[1] = "SourceFile";
      stringArray0[2] = "";
      stringArray0[3] = "L^|";
      stringArray0[4] = "SourceFile";
      stringArray0[5] = "SourceFile";
      stringArray0[6] = "SourceFile";
      stringArray0[7] = "SourceFile";
      classWriter0.visit(13, 13, "SourceFile", "SourceFile", "L^|", stringArray0);
      classWriter0.newFieldItem("", "", "");
      int int0 = classWriter0.newField("", "", "");
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      Item item0 = classWriter0.newLong((-1L));
      classWriter0.newConstItem("O,wH5s*x)!R^:Qv5");
      classWriter0.addUninitializedType("O,wH5s*x)!R^:Qv5", 32);
      classWriter0.newDouble(0.0);
      Item item1 = classWriter0.newConstItem("O,wH5s*x)!R^:Qv5");
      assertFalse(item1.equals((Object)item0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ClassWriter classWriter0 = new ClassWriter(242);
      classWriter0.newDouble((-939.765));
      classWriter0.newLong(242);
      classWriter0.visitSource("/6)pLz9}jwyxV[`\"", "/6)pLz9}jwyxV[`\"");
      classWriter0.newLong(242);
      classWriter0.newLong(242);
      classWriter0.newMethodItem("RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", true);
      classWriter0.visitInnerClass("/6)pLz9}jwyxV[`\"", "org.apache.commons.io.filefilter.CanWriteFileFilter", "/6)pLz9}jwyxV[`\"", 30);
      classWriter0.newClassItem("EnclosingMethod");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.io.filefilter.CanWriteFileFilter";
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(242, "org.apache.commons.io.filefilter.CanWriteFileFilter", "RuntimeVisibleAnnotations", "", stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-494));
      int int0 = classWriter0.newNameType("Kbxu]JvjXJPl", "Kbxu]JvjXJPl");
      assertEquals(2, int0);
      
      classWriter0.newFloat(2);
      int int1 = classWriter0.newMethod("Kbxu]JvjXJPl", "Kbxu]JvjXJPl", "Kbxu]JvjXJPl", true);
      assertEquals(5, int1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(406);
      classWriter0.addUninitializedType("double", 24);
      classWriter0.addUninitializedType("double", 24);
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem("", "I>! Nvu=/%#sfMc/;", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      int int0 = classWriter0.newMethod("InsenNitive", "InsenNitive", "InsenNitive", false);
      assertEquals(4, int0);
      
      int int1 = classWriter0.newMethod("InsenNitive", "InsenNitive", "InsenNitive", false);
      assertEquals(4, int1);
  }
}
