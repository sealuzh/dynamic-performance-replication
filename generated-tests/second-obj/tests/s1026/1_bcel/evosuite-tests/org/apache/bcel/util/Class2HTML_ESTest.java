/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:45:04 GMT 2018
 */

package org.apache.bcel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.util.Class2HTML;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.apache.bcel.util.MemorySensitiveClassPathRepository;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Class2HTML_ESTest extends Class2HTML_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class2HTML.toHTML("Done.");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassPath classPath0 = new ClassPath("Done.");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class2HTML.toHTML("-d");
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance(classPath0);
      JavaClass javaClass0 = syntheticRepository0.loadClass("java.lang.reflect.AnnotatedType");
      classPathRepository0.removeClass(javaClass0);
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoaderRepository0.getClassPath();
      classLoaderRepository0.storeClass(javaClass0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      javaClass0.isVolatile(true);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      javaClass0.setInterfaceNames((String[]) null);
      javaClass0.setInterfaceNames((String[]) null);
      Class2HTML class2HTML0 = new Class2HTML(javaClass0, "Done.");
      Class2HTML.toHTML("-d");
      // Undeclared exception!
      try { 
        Class2HTML.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Class2HTML.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class2HTML.toHTML("</TITLE></HEAD>\n<FRAMESET BORDER=1 cols=\"30%,*\">\n<FRAMESET BORDER=1 rows=\"80%,*\">\n<FRAME NAME=\"ConstantPool\" SRC=\"");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/</TITLE><");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "java.util.Formatter");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository((java.lang.ClassLoader) null);
      classLoaderRepository0.getClassPath();
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository((ClassPath) null);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass(class0);
      classLoaderRepository0.storeClass(javaClass0);
      String[] stringArray0 = new String[1];
      javaClass0.isVolatile(false);
      stringArray0[0] = ".html";
      javaClass0.setInterfaceNames(stringArray0);
      Class2HTML class2HTML0 = null;
      try {
        class2HTML0 = new Class2HTML(javaClass0, "</TITLE></HEAD>\n<FRAMESET BORDER=1 cols=\"30%,*\">\n<FRAMESET BORDER=1 rows=\"80%,*\">\n<FRAME NAME=\"ConstantPool\" SRC=\"");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class2HTML.referenceType("#Z(J9gm@5\"[W|z<}i[67");
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class2HTML.toHTML("</TITLE></HEAD>\n<FRAMESET BORDER=1 cols=\"30%,*\">\n<FRAMESET BORDER=1 rows=\"80%,*\">\n<FRAME NAME=\"ConstantPool\" SRC=\"");
      Class2HTML.referenceType("</TITLE></HEAD>\n<FRAMESET BORDER=1 cols=\"30%,*\">\n<FRAMESET BORDER=1 rows=\"80%,*\">\n<FRAME NAME=\"ConstantPool\" SRC=\"");
      // Undeclared exception!
      try { 
        Class2HTML.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-";
      // Undeclared exception!
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-d";
      stringArray0[1] = "R.J3\ni]A1";
      classLoader0.getParent();
      // Undeclared exception!
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class2HTML.toHTML("</TITLE></HEAD>\n<FRAMESET BORDER=1 cols=\"30%,*\">\n<FRAMESET BORDER=1 rows=\"80%,*\">\n<FRAME NAME=\"ConstantPool\" SRC=\"");
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository((java.lang.ClassLoader) null);
      classLoaderRepository0.getClassPath();
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository((ClassPath) null);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass(class0);
      javaClass0.setClassName("&lt;/TITLE&gt;&lt;/HEAD&gt;\n&lt;FRAMESET BORDER=1 cols=\"30%,*\"&gt;\n&lt;FRAMESET BORDER=1 rows=\"80%,*\"&gt;\n&lt;FRAME NAME=\"ConstantPool\" SRC=\"");
      String[] stringArray0 = new String[1];
      javaClass0.setInterfaceNames(stringArray0);
      JavaClass javaClass1 = javaClass0.copy();
      Class2HTML class2HTML0 = new Class2HTML(javaClass1, "&lt;/TITLE&gt;&lt;/HEAD&gt;\n&lt;FRAMESET BORDER=1 cols=\"30%,*\"&gt;\n&lt;FRAMESET BORDER=1 rows=\"80%,*\"&gt;\n&lt;FRAME NAME=\"ConstantPool\" SRC=\"");
      // Undeclared exception!
      try { 
        Signature.translate("&lt;/TITLE&gt;&lt;/HEAD&gt;\n&lt;FRAMESET BORDER=1 cols=\"30%,*\"&gt;\n&lt;FRAMESET BORDER=1 rows=\"80%,*\"&gt;\n&lt;FRAME NAME=\"ConstantPool\" SRC=\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal signature: &lt;/TITLE&gt;&lt;/HEAD&gt;
         // &lt;FRAMESET BORDER=1 cols=\"30%,*\"&gt;
         // &lt;FRAMESET BORDER=1 rows=\"80%,*\"&gt;
         // &lt;FRAME NAME=\"ConstantPool\" SRC=\" read &
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      java.lang.ClassLoader.getSystemClassLoader();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-d";
      stringArray0[1] = "R.J3\ni]A1";
      stringArray0[2] = "-d";
      stringArray0[3] = "R.J3\ni]A1";
      ClassPath classPath0 = new ClassPath("-d");
      // Undeclared exception!
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "java.time.temporal.TemporalAccessor";
      stringArray0[1] = "-zip";
      stringArray0[2] = "J@p<";
      stringArray0[3] = "-zip";
      stringArray0[4] = "dup2_x1";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // dup2_x1 (No such file or directory)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-d";
      stringArray0[1] = "R.J3\ni]A1/";
      stringArray0[2] = "R.J3\ni]A1/";
      stringArray0[3] = "-d";
      // Undeclared exception!
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository((java.lang.ClassLoader) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      classLoaderRepository0.getClassPath();
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository((ClassPath) null);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass(class0);
      memorySensitiveClassPathRepository0.findClass("java.time.temporal.TemporalAccessor");
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".html";
      JavaClass javaClass1 = javaClass0.copy();
      Class2HTML class2HTML0 = new Class2HTML(javaClass1, "java.time.chrono.MinguoDate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".html", false);
      javaClass1.dump((OutputStream) mockFileOutputStream0);
      Class2HTML.main(stringArray0);
      Class2HTML.toHTML(" B6H\"P<sRKs");
      // Undeclared exception!
      try { 
        Class2HTML.referenceClass((-2015));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -2015. Constant pool size is: 62
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
}
