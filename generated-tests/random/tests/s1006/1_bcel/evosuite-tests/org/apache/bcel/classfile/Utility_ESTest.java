/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 10:48:34 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Enumeration;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.LocalVariableTypeTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.replace(".qr;Bbxc[32tM!cOI", ".qr;Bbxc[32tM!cOI", "getfield");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("astore_0", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[]");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-65);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)86, (-1681));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Only element values of type annotation can be built with this ctor - type specified: ");
      Utility.compactClassName("char", "char", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 35, (int) (byte) (-66));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte) (-2);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-916), (int) (byte) (-81));
      Utility.classOrInterface((byte)6);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "class";
      stringArray0[1] = "class";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.fillup("newarray", 1976, true, '!');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte) (-1);
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)102);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readByte();
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (-1140), 794, true);
      Utility.compactClassName("Q5", "newarray", true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "=j";
      try { 
        Utility.typeOfSignature("=j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = Utility.replace("jsr", "$6jGB?7%oj{W6", "+r");
      assertEquals("jsr", string0);
      
      String string1 = Utility.accessToString((-1690), true);
      assertEquals("private protected volatile native strictfp synthetic annotation enum", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)84;
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-116), (int) (byte) (-50), true);
      assertEquals("0:    <illegal opcode>\n1:    f2l\n2:    <illegal opcode>\n3:    bastore\n", string2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte0 = (byte)110;
      byteArray0[3] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.convertString("nop");
      Utility.accessToString((int) (byte)0, false);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-989), (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)30;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)30, 6510);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utility.searchOpcode("aCa9K");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-103);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "aCa9K");
      byteArray0[2] = (byte)47;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte)124;
      Constant[] constantArray0 = new Constant[2];
      String string0 = "NJ6rqw";
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("NJ6rqw");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInteger constantInteger0 = new ConstantInteger((-717));
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 190, (int) (byte) (-103));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i2f");
      Utility.compactClassName("i2f", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte) (-44);
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte)87;
      byteArray0[8] = (byte)122;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1939, 2153);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)92;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[7] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-68), (int) (byte) (-68));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    <illegal opcode>
         // 2:    dreturn
         // 3:    <illegal opcode>
         // 4:    astore_3
         // 5:    ior
         // 6:    dup2
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("<illegal opcode>");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte)100;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)24, 50, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utility.classOrInterface((-1));
      Utility.compactClassName("interface");
      Utility.clearBit(237, 2686);
      Utility.convertString("interface");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-49);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UXJ5xIl2/4ZOup");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1), 34, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 12101. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = Utility.classOrInterface((-1934548291));
      Utility.clearBit(235, (-1580));
      Utility.isSet(235, (-1580));
      Utility.getSignature("interface");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "interface";
      stringArray0[1] = "Linterface;";
      stringArray0[2] = "\t";
      stringArray0[3] = "interface";
      stringArray0[4] = "interface";
      Utility.methodTypeToSignature("interface", stringArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-102);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 197, 125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = (-742);
      Utility.format(215, (-742), false, '[');
      try { 
        Utility.typeOfSignature("+Wy<{,HE{c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Wy<{,HE{c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("java.lang.Object@289134bb, java.lang.Object@aaf3365, java.lang.Object@6e319f7c, java.lang.Object@1660e1a7");
      Utility.classOrInterface(45);
      Utility.getSignature("#j^@Ke!");
      Utility.replace("#j^@Ke!", "java.lang.Object@289134bb, java.lang.Object@aaf3365, java.lang.Object@6e319f7c, java.lang.Object@1660e1a7", "invokestatic");
      try { 
        Utility.methodSignatureArgumentTypes("invokestatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokestatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" is not a Java .class file", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 122, 122, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.clearBit(5575, 5575);
      Utility.clearBit(5575, (-545));
      Utility.clearBit(573, 573);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte) (-106);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 573, (int) (byte)24, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Utility.searchOpcode(")\t");
      Utility.format((-99), 165, true, 'w');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)122;
      byteArray0[7] = (byte)122;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)53, (int) (byte) (-61), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte) (-113);
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      byteSequence0.readChar();
      byteSequence0.skip(0L);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.getSignature("jsr_w");
      Utility.fillup("jsr_w", (byte)119, false, '1');
      Utility.setBit(159, (byte)18);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)79, 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte)9;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)9, (int) (byte) (-78), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "7`W%=:";
      try { 
        Utility.typeOfSignature("7`W%=:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7`W%=:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)29;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)123;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)123, 103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)3;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 437, 3488);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte) (-94);
      byteArray0[7] = (byte)18;
      byteArray0[8] = (byte) (-103);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)18, (-2133));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-101);
      byteArray0[0] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dreturn", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)74;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 20, 20, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)76;
      byteArray0[5] = (byte)63;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-115), 171);
      assertEquals("0:    f2d\n1:    f2d\n2:    <illegal opcode>\n3:    astore_1\n4:    nop\n5:    lstore_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false);
      Utility.accessToString(10);
      Utility.compactClassName("'", "private static", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)52;
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)58, (byte)58);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 90, (int) (byte)58, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "invokedynamic";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "invokevirtual";
      stringArray0[1] = "invokedynamic";
      stringArray0[2] = "invokedynamic";
      stringArray0[3] = "invokedynamic";
      stringArray0[4] = "invokedynamic";
      stringArray0[5] = "invokedynamic";
      stringArray0[6] = "invokedynamic";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[7] = "invokedynamic";
      Utility.methodTypeToSignature("invokedynamic", stringArray0);
      Utility.methodTypeToSignature("impdep1", stringArray0);
      try { 
        Utility.typeOfSignature("R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.classOrInterface((-1));
      Utility.compactClassName("interface");
      Utility.clearBit(237, 2686);
      Utility.convertString("interface");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-49);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1), 34, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    l2i
         // 1:    laload
         // 2:    fstore_2
         // 3:    iadd
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.convertString(".#VCnbElCNOm)x");
      Utility.isSet((-1253), (-1253));
      Utility.compactClassName("bipush", true);
      try { 
        Utility.typeOfSignature(".#VCnbElCNOm)x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .#VCnbElCNOm)x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)126;
      Utility.encode(byteArray0, true);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 72, (int) (byte)126);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.bcel.classfile.InnerClass";
      Utility.methodTypeToSignature("org.apache.bcel.classfile.InnerClass", stringArray0);
      Utility.searchOpcode("w");
      Utility.isJavaIdentifierPart('T');
      Utility.compactClassName("w");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-55);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-15), (int) (short) (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dup_x2
         // 1:    fneg
         // 2:    <illegal opcode>
         // 3:    <illegal opcode>
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-99);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("-,;1\"cMt{U)7");
      ConstantUtf8.getInstance("Im}hrNZbw!'[c");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-99), (int) (byte) (-99));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ldiv
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "{E7%I\"EWTmll";
      String string1 = "\n\t\tthrows ";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("{E7%I\"EWTmll", "\n\t\tthrows ", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-57);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 319, 3110, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Utility.clearBit((-1640), (-1640));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"");
      Utility.format(181, (-16778856), true, '~');
      try { 
        Utility.typeOfSignature("9p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte)120;
      byteArray0[8] = (byte) (-16);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3127, (-927), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "1W\"\\kVsdNO%U7|v/|?G";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("1W\"kVsdNO%U7|v/|?G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1W\"kVsdNO%U7|v/|?G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("if_icmple", "if_icmple", "if_icmple");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 103, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.readBoolean();
      byteSequence0.markSupported();
      byteSequence0.mark((byte) (-11));
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("dstore_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dstore_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)31;
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)47;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 70, (int) (byte)31);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Utility.compactClassName(">z_A4 ZNp\u001Ek[9sY", "[]", true);
      Utility.convertString("getfield");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      int int0 = 41;
      Utility.codeToString(byteArray0, constantPool0, (-372), 41);
      int int1 = 189;
      // Undeclared exception!
      try { 
        constantPool0.constantToString((int) (byte)27, (byte) (-39));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = Utility.setBit(32, 32);
      assertEquals(33, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)69;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-66), 87, true);
      assertEquals("0:    arraylength\n1:    fstore_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)41, 62);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("dadd", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = Utility.format(51, 65, false, 'w');
      assertEquals("wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww51", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1965, (-457));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("iload\t\t%104", string1);
      
      String string2 = Utility.replace("double", "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww51", "PzgZDv}WW{=52");
      assertEquals("double", string2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte) (-25);
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte)76;
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)57, (byte)78);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)3, 73, false);
      assertEquals("4:    fstore_1\n5:    istore_1\n6:    <illegal opcode>\n7:    iconst_3\n8:    astore_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.ConstantUtf8$CACHE_HOLDER");
      Utility.compactClassName("putstatic");
      Utility.compactClassName("o%?BT1@!wi=b[g [7");
      // Undeclared exception!
      try { 
        Utility.getSignature("o%?BT1@!wi=b[g [7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[g [7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.typeOfSignature("Z<}v7");
      boolean boolean0 = false;
      Utility.compactClassName("MZ\"yN", false);
      try { 
        Utility.typeOfMethodSignature("MZ\"yN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MZ\"yN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%l-Ql!Xx;&E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %l-Ql!Xx;&E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("JT]26ugsEDN340~[.g");
      assertEquals((byte)11, byte0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "new";
      String string0 = Utility.methodTypeToSignature("new", stringArray0);
      assertEquals("(Lnew;)Lnew;", string0);
      
      String string1 = Utility.printArray((Object[]) stringArray0, false, false);
      assertEquals("new", string1);
      assertNotNull(string1);
      
      boolean boolean0 = Utility.isSet((-1403), (byte)11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)13;
      Constant[] constantArray0 = new Constant[4];
      ConstantString constantString0 = new ConstantString(219);
      constantArray0[0] = (Constant) constantString0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)92, (byte) (-7));
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2085), (byte) (-119));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[3] = (Constant) constantMethodHandle2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-119), 239, true);
      assertEquals("0:    astore_2\n1:    lload_1\n2:    <illegal opcode>\n3:    dup2\n4:    l2f\n5:    lstore_3\n6:    fconst_2\n", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Invalid method signature: ";
      stringArray0[1] = "0:    astore_2\n1:    lload_1\n2:    <illegal opcode>\n3:    dup2\n4:    l2f\n5:    lstore_3\n6:    fconst_2\n";
      String string1 = Utility.methodTypeToSignature("Invalid method signature: ", stringArray0);
      assertEquals("(LInvalid;L0:;)LInvalid;", string1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)73;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)13, (int) (byte) (-65), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("G)YgS$]d7`V@x+i2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YgS$]d7`V@x+i2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-9);
      ConstantPool constantPool0 = null;
      int int0 = 180;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 180, (int) (byte) (-9), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("dload_3", false);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(57, (-2598));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantFloat constantFloat0 = new ConstantFloat(57);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(200, 5);
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 596, 596);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Utility.isSet(114, 114);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)70;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 114, (int) (byte)70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)76;
      byteArray0[5] = (byte)55;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-115), 171);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    f2d
         // 1:    f2d
         // 2:    <illegal opcode>
         // 3:    astore_1
         // 4:    nop
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-47);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)42, (byte) (-87));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-47));
      constantArray0[1] = (Constant) constantFloat0;
      ConstantLong constantLong0 = new ConstantLong((byte) (-87));
      constantArray0[2] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-56), 1029);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 51416. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte) (-113);
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 512, (int) (byte)79, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("f2i", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byte byte0 = (byte)114;
      byteArray0[1] = (byte)114;
      Constant[] constantArray0 = new Constant[1];
      int int0 = 4372;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(4372, (byte)114);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int1 = (-888);
      Utility.codeToString(byteArray0, constantPool0, (-888), (int) (byte)41);
      String string0 = "<2Zjv8wd<(B3";
      String string1 = "FE$U%>%<lsy";
      boolean boolean0 = true;
      LocalVariable[] localVariableArray0 = new LocalVariable[8];
      Enumeration<ByteSequence> enumeration0 = (Enumeration<ByteSequence>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream1);
      LocalVariableTypeTable localVariableTypeTable0 = null;
      try {
        localVariableTypeTable0 = new LocalVariableTypeTable(4372, (byte)41, dataInputStream0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)80, (-32768));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.accessToString(71);
      try { 
        Utility.methodSignatureReturnType("Qumss2(O6o<z=W7k^<", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qumss2(O6o<z=W7k^<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Utility.classOrInterface((-1235));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)115;
      byte byte0 = (byte)33;
      byteArray0[1] = (byte)33;
      byte byte1 = (byte)12;
      byteArray0[2] = (byte)12;
      byte byte2 = (byte) (-15);
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte) (-56);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[7] = (byte)120;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-223), (int) (byte)115);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet(170, 170);
      Utility.isSet(3957, (-3169));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)117, 170, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)7;
      byte byte0 = (byte)13;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)87;
      byteArray0[8] = (byte)40;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 27, 27, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.clearBit(316, (-450));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)77;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 16, 62, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-124);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Expected class `");
      byteArray0[2] = (byte)2;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Expected class `");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9%5P");
      Utility.encode(byteArray0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit(391, (byte) (-113));
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)2;
      Utility.printArray(objectArray0, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.printArray(objectArray0, true, true);
      Utility.setBit((byte)2, 5);
      String string0 = "W.j?;";
      try { 
        Utility.typeOfSignature("W.j?;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W.j?;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Utility.typeOfSignature("!Dp)q<y");
      // Undeclared exception!
      try { 
        Utility.signatureToString("!Dp)q<y", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `!Dp)q<y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Utility.searchOpcode("aCa9K");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-103);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "aCa9K");
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte)124;
      Constant[] constantArray0 = new Constant[2];
      String string0 = "NJ6rqw";
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("NJ6rqw");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInteger constantInteger0 = new ConstantInteger((-717));
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 170, (int) (byte) (-103));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("&Wq(\"H/38r", false);
      int int0 = 15;
      Utility.accessToString(15);
      try { 
        Utility.typeOfSignature("&Wq(\"H/38r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &Wq(\"H/38r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      try { 
        Utility.typeOfSignature("X5%N/]LW[v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X5%N/]LW[v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = true;
      Utility.format(39, 39, true, '`');
      String string0 = "<";
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("\nAttribute(s):\n");
      Utility.compactClassName("'", "\nAttribute(s):\n", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte)95;
      Constant[] constantArray0 = new Constant[8];
      DataInput dataInput0 = null;
      ConstantMethodref constantMethodref0 = null;
      try {
        constantMethodref0 = new ConstantMethodref((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantCP", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      try { 
        Utility.typeOfSignature("H~iiKQ$Y>;.O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H~iiKQ$Y>;.O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-)P7OSnL/\"3,Bt.OP(:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -)P7OSnL/\"3,Bt.OP(:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      try { 
        Utility.typeOfSignature("U`|qq1/lKWuPH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U`|qq1/lKWuPH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "Ky[;xx4'N-XR`p]}";
      String string1 = "%N{</q3=flV\\dk$Gd";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.replace("Ky[;xx4'N-XR`p]}", "%N{</q3=flVdk$Gd", "goto_w");
      try { 
        Utility.typeOfSignature("5,Om3WdA}g$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5,Om3WdA}g$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utility.signatureToString("Z9:61?Ek0KKz,k~");
      byte[] byteArray0 = null;
      Constant[] constantArray0 = new Constant[3];
      DataInput dataInput0 = null;
      ConstantInteger constantInteger0 = null;
      try {
        constantInteger0 = new ConstantInteger((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Utility.fillup("invokeinterface", 323, true, 'Q');
      Utility.compactClassName("invokeinterface");
      boolean boolean0 = Utility.isJavaIdentifierPart('#');
      String string0 = Utility.compactClassName("invokeinterface");
      assertEquals("invokeinterface", string0);
      
      String string1 = Utility.format(697, 215, false, '2');
      assertEquals("22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222697", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readBoolean();
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, constantPool0, false);
      boolean boolean1 = Utility.isSet((byte)105, (byte)85);
      assertTrue(boolean1 == boolean0);
      
      String string2 = Utility.accessToString((int) (byte)85);
      assertEquals("public protected final volatile", string2);
      
      int int0 = Utility.clearBit(95, (byte) (-89));
      assertEquals(95, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Utility.compactClassName("$v,M3d>", true);
      try { 
        Utility.typeOfSignature("$v,M3d>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $v,M3d>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("-e)gK>S$2.IZm", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        byteSequence0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Utility.convertString("d2l");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4096, (int) (byte)8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("E.8=//E>95.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E.8=//E>95.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Utility.printArray((Object[]) null, false, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-25);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)16;
      Utility.encode(byteArray0, false);
      Utility.isSet((byte)16, 60);
      Utility.decode("$e7$N$t$d3$Q", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("istore", false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, false);
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.classOrInterface((-1907));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "CONSTANT_Fieldref";
      stringArray0[1] = "M`Q9S5.fdy:TbN5A";
      stringArray0[2] = "CONSTANT_Fieldref";
      stringArray0[3] = "CONSTANT_Fieldref";
      Utility.methodTypeToSignature("CONSTANT_Fieldref", stringArray0);
      Utility.fillup("u[pe", (-2223), false, ':');
      Utility.methodSignatureArgumentTypes("(LCONSTANT_Fieldref;LM`Q9S5/fdy:TbN5A;LCONSTANT_Fieldref;LCONSTANT_Fieldref;)LCONSTANT_Fieldref;");
      Utility.clearBit(949, (-1907));
      try { 
        Utility.typeOfSignature("M`Q9S5.fdy:TbN5A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M`Q9S5.fdy:TbN5A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)55;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-115), 171);
      assertEquals("0:    f2d\n1:    astore_1\n2:    <illegal opcode>\n3:    dstore_0\n4:    bipush\t\t55\n", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "MTx4+=Cr|J({c;Y`~c.";
      try { 
        Utility.typeOfSignature("MTx4+=Cr|J({c;Y`~c.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MTx4+=Cr|J({c;Y`~c.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byte byte0 = (byte)43;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-106);
      ConstantPool constantPool0 = null;
      int int0 = 2604;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16384, 2604);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "M9X8";
      stringArray0[1] = "M9X8";
      stringArray0[2] = "M9X8";
      stringArray0[3] = "M9X8";
      stringArray0[4] = "M9X8";
      stringArray0[5] = "M9X8";
      Utility.methodTypeToSignature("M9X8", stringArray0);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "M9X8";
      stringArray1[1] = "(LM9X8;LM9X8;LM9X8;LM9X8;LM9X8;LM9X8;)LM9X8;";
      stringArray1[2] = "(LM9X8;LM9X8;LM9X8;LM9X8;LM9X8;LM9X8;)LM9X8;";
      stringArray1[3] = "M9X8";
      stringArray1[4] = "putstatic";
      stringArray1[5] = "(LM9X8;LM9X8;LM9X8;LM9X8;LM9X8;LM9X8;)LM9X8;";
      stringArray1[6] = "M9X8";
      stringArray1[7] = "M9X8";
      stringArray1[8] = "M9X8";
      Utility.methodTypeToSignature("M9X8", stringArray1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)66;
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong((byte)111);
      constantArray0[0] = (Constant) constantLong0;
      ConstantInteger constantInteger0 = new ConstantInteger(129);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)97, (int) (byte)13, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byte byte0 = (byte)41;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-106);
      ConstantPool constantPool0 = null;
      int int0 = 2604;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16384, 2604);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-64);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)4, 1257, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "D";
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "D";
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) "D";
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) "D";
      Utility.printArray(objectArray0, false);
      Utility.accessToString(2019);
      Utility.compactClassName("public private synchronized volatile transient native interface abstract", "ifnonnull", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 558, 2769, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.accessToString(1384, false);
      try { 
        Utility.methodSignatureReturnType("MFT:?qrLlKO<3J&X-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MFT:?qrLlKO<3J&X-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)77;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantFloat constantFloat0 = new ConstantFloat((-2272.194F));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantString constantString0 = new ConstantString(73);
      constantArray0[1] = (Constant) constantString0;
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-3539), (-2675));
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-8), (int) (byte)77, true);
      assertEquals("0:    nop\n1:    nop\n2:    ifle\t\t#23055\n5:    caload\n6:    astore_2\n", string1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-86);
      byte byte0 = (byte) (-76);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)0;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)42, 189);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "s#q&,";
      stringArray0[1] = "s#q&,";
      stringArray0[2] = "};S!IlB@?~gLV";
      stringArray0[3] = "s#q&,";
      stringArray0[4] = "s#q&,";
      stringArray0[5] = "s#q&,";
      stringArray0[6] = "s#q&,";
      stringArray0[7] = "s#q&,";
      stringArray0[8] = "s#q&,";
      String string0 = Utility.methodTypeToSignature("s#q&,", stringArray0);
      assertEquals("(Ls#q&,;Ls#q&,;L};S!IlB@?~gLV;Ls#q&,;Ls#q&,;Ls#q&,;Ls#q&,;Ls#q&,;Ls#q&,;)Ls#q&,;", string0);
      
      String string1 = Utility.convertString("invokeinterface");
      assertEquals("invokeinterface", string1);
      
      boolean boolean0 = Utility.isSet((-248), 16);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte)84;
      byteArray0[8] = (byte) (-104);
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), 26666);
      assertEquals("0:    <illegal opcode>\n1:    lshr\n2:    istore_3\n3:    dup_x1\n4:    dcmpl\n5:    isub\n6:    fstore_0\n7:    bastore\n8:    dcmpg\n", string2);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "#^d#wb";
      try { 
        Utility.typeOfSignature("#^d#wb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #^d#wb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = Utility.format(240, 240, false, 'F');
      assertEquals("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF240", string0);
      
      boolean boolean0 = Utility.isSet(240, 240);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)81;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("5f da 0c ee 5c 51", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)12, (-1322));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)92);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("swap", string2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "aconst_null");
      Utility.compactClassName("K]~<\"T|");
      Utility.replace("K]~<\"T|", "K]~<\"T|", "K]~<\"T|");
      // Undeclared exception!
      try { 
        Utility.signatureToString("K]~<\"T|", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K]~<\"T|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload_0", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)123;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)123, 103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "Exception while looking for class ";
      try { 
        Utility.methodSignatureReturnType("Exception while looking for class ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Exception while looking for class '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Utility.typeOfSignature("CONSTANT_MethodHandle");
      Utility.searchOpcode("CONSTANT_MethodHandle");
      Utility.compactClassName("CONSTANT_MethodHandle", "CONSTANT_MethodHandle", true);
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.convertString("*/k4W?%|1K'E");
      String string0 = "j([[k<)\\k$ol[";
      String string1 = "(1ye%2;";
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("*/k4W?%|1K'E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /k4W?%|1K'E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      try { 
        Utility.typeOfSignature("N<bV/(X.L(7T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N<bV/(X.L(7T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-66);
      byteArray0[0] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      OutputStream outputStream0 = null;
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Utility.accessToString(47);
      Utility.convertString("interface");
      Utility.isSet(47, (-3756));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-45);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1261), 2157, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 59286. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      int int0 = Utility.clearBit((-392), (-1499));
      assertEquals((-424), int0);
      
      String string1 = Utility.classOrInterface((-1));
      String string2 = Utility.replace("interface", "true", "{java.lang.Object@78b72d8a, java.lang.Object@2334a77b, java.lang.Object@4cd4d822}");
      assertTrue(string2.equals((Object)string1));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte) (-36);
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte) (-43);
      byteArray0[8] = (byte) (-35);
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2318), (-756), false);
      assertEquals("0:    iastore\n1:    nop\n2:    dload_0\n3:    imul\n4:    lneg\n5:    <illegal opcode>\n6:    <illegal opcode>\n7:    <illegal opcode>\n8:    <illegal opcode>\n", string3);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)97;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("caload", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "Jnow0'_mj$";
      try { 
        Utility.decode("Jnow0'_mj$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)61;
      Utility.equals(byteArray0, byteArray0);
      Utility.format((byte)61, (byte)4, true, 'f');
      try { 
        Utility.typeOfSignature("61ff");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 61ff
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      stringArray0[3] = "void";
      stringArray0[4] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "2";
      Utility.getSignature("2");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)67;
      byte byte0 = (byte) (-50);
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-112);
      byte byte1 = (byte) (-128);
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte)37;
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(841, (byte) (-70));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      constantFieldref1.clone();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-35), (int) (byte)67);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 17358. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, true, true);
      Utility.searchOpcode("{\"java.lang.Object@6763ec89\", \"java.lang.Object@5370a437\"}");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2709, (int) (byte)94);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.getSignature("instanceof");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-71);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-79), (int) (byte)65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lstore_2
         // 1:    lstore_2
         // 2:    lushr
         // 3:    return
         // 4:    dload_3
         // 5:    fconst_2
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockFile mockFile0 = new MockFile("'Q");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = null;
      mockFile0.getAbsolutePath();
      mockFile0.deleteOnExit();
      PrintStream printStream0 = mockPrintStream0.printf("'Q", (Object[]) null);
      Utility.printArray(printStream0, (Object[]) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "'Q";
      stringArray0[1] = "RuntimeInvisibleAnnotations";
      stringArray0[2] = "RuntimeInvisibleAnnotations";
      stringArray0[3] = "RuntimeInvisibleAnnotations";
      stringArray0[4] = "'Q";
      Utility.methodTypeToSignature("RuntimeInvisibleAnnotations", stringArray0);
      Utility.classOrInterface(28);
      Utility.printArray((Object[]) null, true);
      Utility.classOrInterface(28);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)91;
      byteArray0[6] = (byte)39;
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)109;
      byteArray0[8] = (byte)39;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-21), (int) (byte) (-85));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    i2f
         // 1:    dup_x2
         // 2:    nop
         // 3:    i2f
         // 4:    fload_0
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Utility.printArray((Object[]) null, true, false);
      String string0 = "org.apache.bcel.classfile.BootstrapMethods";
      Utility.compactClassName("ifne", "org.apache.bcel.classfile.BootstrapMethods", false);
      Utility.accessToString((-2118));
      try { 
        Utility.typeOfSignature("4V/A2%j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4V/A2%j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Only element values of type annotation can be built with this ctor - type specified: ");
      String string0 = Utility.compactClassName("char", "char", false);
      assertEquals("char", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("pop2", string1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
      
      short short0 = Utility.searchOpcode("{\"java.lang.Object@4a15fa9b\", \"java.lang.Object@41767e85\"}");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("sastore", string1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) fileSystemHandling0;
      objectArray0[1] = (Object) fileSystemHandling0;
      objectArray0[2] = (Object) fileSystemHandling0;
      objectArray0[3] = (Object) fileSystemHandling0;
      objectArray0[4] = (Object) fileSystemHandling0;
      objectArray0[5] = (Object) fileSystemHandling0;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"org.evosuite.runtime.testdata.FileSystemHandling@6409f1b9\", \"org.evosuite.runtime.testdata.FileSystemHandling@6409f1b9\", \"org.evosuite.runtime.testdata.FileSystemHandling@6409f1b9\", \"org.evosuite.runtime.testdata.FileSystemHandling@6409f1b9\", \"org.evosuite.runtime.testdata.FileSystemHandling@6409f1b9\", \"org.evosuite.runtime.testdata.FileSystemHandling@6409f1b9\"");
      Utility.classOrInterface(1361);
      try { 
        Utility.typeOfSignature("GyW\"X];AW:zZrxs.^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GyW\"X];AW:zZrxs.^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Utility.convertString("a#$McG&p|5Y]n4-1");
      String string0 = "Z5pxEjEp";
      boolean boolean0 = true;
      Utility.compactClassName("Z5pxEjEp", "N:Gh%S1Y&GbB", true);
      Utility.compactClassName("Z5pxEjEp");
      Utility.replace("Z5pxEjEp", "a#$McG&p|5Y]n4-1", "");
      MockFile mockFile0 = new MockFile("9oN5K</Qq>G", "Invalid byte tag in constant pool: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
      try { 
        Utility.methodSignatureReturnType("Only element values of type annotation can be built with this ctor - type specified: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Only element values of type annotation can be built with this ctor - type specified: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Utility.signatureToString("S+2}\\1M-");
      Utility.classOrInterface(1702);
      Utility.isSet(1702, 2296);
      Utility.setBit(1702, 1702);
      Utility.compactClassName("short", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-98);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)111, (int) (byte) (-98));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Utility.decode("N,S[]=$q(GaAsGA|Z", false);
      int int0 = 1163;
      Utility.accessToString(1163, true);
      String string0 = "i/;/)fh=^";
      String string1 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("N,S[]=$q(GaAsGA|Z", "i/;/)fh=^", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString((-1206), true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-113), (int) (byte)74, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dstore_3
         // 1:    d2l
         // 2:    ishr
         // 3:    iconst_5
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.isJavaIdentifierPart('=');
      int int0 = 247;
      Utility.format(247, 248, true, 'y');
      try { 
        Utility.typeOfSignature("247yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 247yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)7;
      Utility.encode(byteArray0, true);
      int int0 = 36;
      Utility.classOrInterface(36);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 36, 36, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("CONSTANT_Utf8", false);
      Utility.signatureToString("CONSTANT_Utf8");
      String string0 = "wide";
      // Undeclared exception!
      try { 
        Utility.signatureToString("wide", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `wide'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)78;
      byte byte0 = (byte)36;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)7;
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteSequence0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(dataInputStream0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(dataInputStream0);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[2] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 78, (int) (byte)7, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte) (-113);
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      byteSequence0.skip(0L);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("if_icmpge\t\t#4729", string1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Utility.classOrInterface((-3670));
      String string0 = "RsniF3jEj?[=h7s0R";
      // Undeclared exception!
      try { 
        Utility.signatureToString("RsniF3jEj?[=h7s0R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RsniF3jEj?[=h7s0R'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)32;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, false);
      String string0 = ";";
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Utility.typeOfSignature("[]");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "[]";
      Object object1 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[2] = object1;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[3] = (Object) "[]";
      Object object2 = new Object();
      objectArray0[4] = object2;
      Utility.printArray(objectArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[8];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantMethodHandle constantMethodHandle1 = null;
      try {
        constantMethodHandle1 = new ConstantMethodHandle(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = ">";
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)77;
      Utility.encode(byteArray0, true);
      Constant[] constantArray0 = new Constant[4];
      ConstantFloat constantFloat0 = new ConstantFloat((-2272.194F));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantString constantString0 = new ConstantString(73);
      constantArray0[1] = (Constant) constantString0;
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-3539), (-2675));
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-8), (int) (byte)77, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 40538. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "Q=:DL6,t+IiR'";
      Utility.compactClassName("Q=:DL6,t+IiR'");
      try { 
        Utility.typeOfSignature("Q=:DL6,t+IiR'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q=:DL6,t+IiR'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)85;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(165, (byte)8);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 122, (int) (byte) (-65));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)22;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "int");
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte) (-53);
      byteArray0[8] = (byte)120;
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((byte)19);
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)103, (int) (byte) (-74), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 5707. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 127, 88);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      String string0 = Utility.printArray(objectArray0, true, false);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("drem", string1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = "lastore";
      try { 
        Utility.decode("lastore", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Utility.classOrInterface(97);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) "class";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[3] = (Object) "class";
      objectArray0[4] = (Object) "class";
      objectArray0[5] = (Object) "class";
      objectArray0[6] = (Object) "class";
      objectArray0[7] = (Object) "class";
      objectArray0[8] = (Object) "class";
      Utility.printArray(objectArray0, true, true);
      String string0 = "@bXw$Z";
      try { 
        Utility.typeOfSignature("@bXw$Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @bXw$Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Utility.compactClassName("TG", "TG", false);
      try { 
        Utility.methodSignatureArgumentTypes("(name_index = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `name_index = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.clearBit(88, 88);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte) (-91);
      byteArray0[8] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, (int) (byte)48, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":TTMrT1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :TTMrT1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = true;
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte) (-21);
      byteArray0[8] = (byte) (-6);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-21), (int) (byte) (-85));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    i2f
         // 1:    dup_x2
         // 2:    istore_1
         // 3:    <illegal opcode>
         // 4:    fload_0
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-85);
      byteArray0[8] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)125;
      byte byte0 = (byte)77;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-107);
      Utility.encode(byteArray0, true);
      Utility.classOrInterface((-3775));
      Utility.convertString("$l$8b$I$A$A$A$A$A$A$A");
      try { 
        Utility.decode("EKO><Cq-GP_eS$#Lw7z", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Utility.clearBit((-167), 1133);
      // Undeclared exception!
      try { 
        Utility.signatureToString("L9'e<QT\"?U7y+D1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L9'e<QT\"?U7y+D1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("land", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte) (-113);
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("irem", string1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.signatureToString("Byte code error: ", false);
      Utility.isSet(1415, 1415);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(16, 16);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantFloat constantFloat0 = null;
      try {
        constantFloat0 = new ConstantFloat(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      try { 
        Utility.typeOfSignature(",n<A8-sCz_RA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,n<A8-sCz_RA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("[]K8w~,8u(`0Nvi", true);
      Utility.compactClassName("[]K8w~,8u(`0Nvi");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "[]K8w~,8u(`0Nvi";
      stringArray0[1] = "[]K8w~,8u(`0Nvi";
      stringArray0[2] = "[]K8w~,8u(`0Nvi";
      stringArray0[3] = "[]K8w~,8u(`0Nvi";
      stringArray0[4] = "[]K8w~,8u(`0Nvi";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[5] = "[]K8w~,8u(`0Nvi";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[]K8w~,8u(`0Nvi", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []K8w~,8u(`0Nvi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = "getstatic";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("getstatic", "getstatic", "getstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: getstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = Utility.fillup("V", 9, false, ',');
      assertEquals(",,,,,,,,V", string0);
      
      int int0 = Utility.clearBit(37, 37);
      assertEquals(5, int0);
      
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ",,,,,,,,V";
      objectArray0[1] = (Object) "V";
      objectArray0[2] = (Object) "V";
      objectArray0[3] = (Object) "V";
      objectArray0[4] = (Object) ",,,,,,,,V";
      objectArray0[5] = (Object) "V";
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{,,,,,,,,V, V, V, V, ,,,,,,,,V, V}", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = Utility.decode("d@/$]L>Y", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-323));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertArrayEquals(new byte[] {(byte)100, (byte)64, (byte)47, (byte)0, (byte)76, (byte)62, (byte)89}, byteArray0);
      assertEquals("nop", string2);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Utility.isJavaIdentifierPart('_');
      Utility.classOrInterface((-781));
      Utility.accessToString((-2269), true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-87);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfMethodSignature("('0zfq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ('0zfq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-970), 66);
      assertTrue(boolean0);
      
      String string0 = Utility.format(80, 66, true, 'S');
      assertEquals("80SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("Illegally nested brackets:");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantFloat constantFloat0 = new ConstantFloat((-970));
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dastore", string1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)39;
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      Utility.searchOpcode("$hx$8c$d5$e8$40$t");
      Utility.searchOpcode("$hx$8c$d5$e8$40$t");
      Utility.clearBit(183, (byte)120);
      Utility.compactClassName("~-sj", "$hx$8c$d5$e8$40$t", false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "~-sj";
      objectArray0[1] = (Object) "$hx$8c$d5$e8$40$t";
      objectArray0[2] = (Object) (byte) (-24);
      objectArray0[3] = (Object) "~-sj";
      objectArray0[4] = (Object) (byte) (-116);
      objectArray0[5] = (Object) (byte) (-116);
      Utility.printArray(objectArray0, false, true);
      try { 
        Utility.typeOfSignature("\"~-sj\", \"$hx$8c$d5$e8$40$t\", \"-24\", \"~-sj\", \"-116\", \"-116\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"~-sj\", \"$hx$8c$d5$e8$40$t\", \"-24\", \"~-sj\", \"-116\", \"-116\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      try { 
        Utility.typeOfSignature("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-59);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("LY>@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LY>@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Utility.classOrInterface((-3620));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-109), (byte) (-6));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      String string0 = null;
      String string1 = "";
      boolean boolean0 = true;
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable(154, (-1316), byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "SU";
      boolean boolean0 = false;
      Utility.signatureToString("SU", false);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = ")G<-&6Sso+_";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType(")G<-&6Sso+_", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G<-&6Sso+_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int int0 = (-2632);
      Utility.accessToString((-2632), false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.signatureToString("Df|uM0", true);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string0 = "f$Bk:t'Z}{n";
      try { 
        Utility.decode("f$Bk:t'Z}{n", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)59;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)59;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.searchOpcode("goto_w");
      Utility.fillup("goto_w", (byte)59, false, '>');
      Utility.typeOfSignature("Illegally nested brackets:");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "goto_w";
      stringArray0[1] = "goto_w";
      stringArray0[2] = "goto_w";
      Utility.methodTypeToSignature("goto_w", stringArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>goto_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>goto_w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)78;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)76;
      byteArray1[2] = (byte)78;
      byteArray1[3] = (byte)16;
      byteArray1[4] = (byte)16;
      byteArray1[5] = (byte)78;
      byteArray1[6] = (byte)12;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "UW";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("UW", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UW'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      try { 
        Utility.typeOfSignature("K}8ixKosdzR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K}8ixKosdzR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = Utility.getSignature("instanceof");
      assertEquals("Linstanceof;", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(279, (byte)37);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("faload", string1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)16;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 62, 191, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Utility.compactClassName("%t)I9${ ", "caload", false);
      Utility.accessToString((-1407), false);
      Utility.format((-1420), (-1420), false, '\\');
      Utility.searchOpcode("-^Z=/?YQfT%+");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)92;
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((-1407));
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 39, (int) (byte)64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String[] stringArray0 = new String[6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[0] = "zbju:mbNul>-hn@2F4";
      stringArray0[1] = "{kZ[]";
      stringArray0[2] = "{kZ[]";
      stringArray0[3] = "{kZ[]";
      stringArray0[4] = "{kZ[]";
      stringArray0[5] = "{kZ[]";
      Utility.methodTypeToSignature("{kZ[]", stringArray0);
      Utility.methodSignatureToString("(Lzbju:mbNul>-hn@2F4;[L{kZ;[L{kZ;[L{kZ;[L{kZ;[L{kZ;)[L{kZ;", "interface", "QJr", true);
      Utility.isSet(3454, 3454);
      Utility.compactClassName("{kZ[]");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      try { 
        Utility.methodSignatureArgumentTypes("QJr {kZ[] interface(zbju:mbNul>-hn@2F4 arg1, {kZ[] arg2, {kZ[] arg3, {kZ[] arg4, {kZ[] arg5, {kZ[] arg6)", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QJr {kZ[] interface(zbju:mbNul>-hn@2F4 arg1, {kZ[] arg2, {kZ[] arg3, {kZ[] arg4, {kZ[] arg5, {kZ[] arg6)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = "Sensitive";
      Utility.typeOfSignature("Sensitive");
      int int0 = (-1655);
      Utility.setBit((-1655), (-1655));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)9;
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.convertString("nop");
      Utility.accessToString((int) (byte)0, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-989), (int) (byte)123, false);
      Utility.fillup("nop", (byte)110, false, 'g');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggnop", "DITkE+xpr]>", "nop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggnop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Utility.accessToString(95, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-23);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)45;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 193, (int) (byte)45, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<4AyZ'ARCU+qh!Y o8");
      String string0 = Utility.format(1423, 1423, false, 'B');
      Utility.isJavaIdentifierPart('B');
      Utility.clearBit(137, 137);
      Utility.typeOfSignature(string0);
      try { 
        Utility.methodSignatureArgumentTypes(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = ")";
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature(")", stringArray0);
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      byte byte0 = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-96), (int) (byte) (-96));
      String string0 = "b-#Eo^+5FU~06";
      String string1 = "%(PN";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("b-#Eo^+5FU~06", "%(PN", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: b-#Eo^+5FU~06
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Utility.signatureToString("V");
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".qND8[3{<%qbv_fc&";
      stringArray0[1] = ".qND8[3{<%qbv_fc&";
      stringArray0[2] = ".qND8[3{<%qbv_fc&";
      stringArray0[3] = ".qND8[3{<%qbv_fc&";
      stringArray0[4] = ".qND8[3{<%qbv_fc&";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(".qND8[3{<%qbv_fc&", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[3{<%qbv_fc&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      short short0 = Utility.searchOpcode("if_icmple");
      assertEquals((short)164, short0);
      
      Utility.convertString("");
      String string0 = Utility.getSignature("Nlt;3Se$1E^SgjCP");
      assertEquals("LNlt;3Se$1E^SgjCP;", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = "XQFW-6;a:E";
      try { 
        Utility.methodSignatureReturnType("XQFW-6;a:E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XQFW-6;a:E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      Utility.methodTypeToSignature("{java.lang.Object@7adbb9cc}", (String[]) null);
      Utility.typeOfMethodSignature("()L{java/lang/Object@7adbb9cc};");
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("{java.lang.Object@7adbb9cc}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {java.lang.Object@7adbb9cc}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("UEXmt([V@2Ju8");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UEXmt([V@2Ju8");
      Utility.accessToString((-302));
      Utility.clearBit((-302), 727);
      Utility.isSet(1856, 44);
      try { 
        Utility.typeOfSignature("O}iyGmkon39m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O}iyGmkon39m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "areturn";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "areturn");
      String string1 = "FVT+";
      Utility.signatureToString("FVT+", false);
      Utility.decode("org.apache.bcel.classfile.ConstantValue", false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = "A=Brn$B";
      try { 
        Utility.typeOfSignature("A=Brn$B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A=Brn$B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Utility.compactClassName("java.lang.");
      try { 
        Utility.typeOfSignature("8>Lv}t{f*F/~C}- ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8>Lv}t{f*F/~C}- 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("fload_0", string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = "H~iiKQ$Y>;.O";
      // Undeclared exception!
      try { 
        Utility.signatureToString("H~iiKQ$Y>;.O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H~iiKQ$Y>;.O'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Utility.searchOpcode("SC'HX*XS^`Q`");
      Utility.setBit((short) (-1), (short) (-1));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)37;
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, true);
      Utility.clearBit(10, (-1040));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 136, 202, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Utility.typeOfSignature("LH;V");
      Utility.accessToString((int) (byte)14);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureArgumentTypes("short", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = Utility.convertString("z @PL$6|MQ\";?#");
      assertEquals("z @PL$6|MQ\\\";?#", string0);
      
      String string1 = Utility.format((-1043), (-1043), true, 'n');
      assertEquals("-1043", string1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)100;
      Utility.toHexString(byteArray0);
      Utility.classOrInterface((byte)100);
      boolean boolean0 = false;
      Utility.accessToString((int) (byte)100, false);
      Utility.decode("class", false);
      Utility.replace("class", "class", "1f 64");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)31;
      objectArray0[1] = (Object) "1f 64";
      objectArray0[2] = (Object) (byte)100;
      objectArray0[3] = (Object) (byte)31;
      objectArray0[4] = (Object) null;
      Object object0 = new Object();
      objectArray0[5] = object0;
      Utility.printArray(objectArray0);
      Utility.compactClassName("1f 64", false);
      try { 
        Utility.methodSignatureArgumentTypes("protected synchronized volatile", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: protected synchronized volatile
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Utility.compactClassName("dup2");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-15);
      byteArray0[0] = (byte) (-15);
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString((int) (byte) (-15), true);
      // Undeclared exception!
      try { 
        Utility.signatureToString(", reference_index = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `, reference_index = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-81);
      byte byte0 = (byte) (-56);
      byteArray0[4] = (byte) (-56);
      byte byte1 = (byte)99;
      byteArray0[5] = (byte)99;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte) (-56);
      objectArray0[2] = (Object) (byte) (-56);
      objectArray0[3] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Utility.isSet((-1517), 83);
      String string0 = "m$T[BBi>H4Ao";
      try { 
        Utility.methodSignatureReturnType("m$T[BBi>H4Ao", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `m$T[BBi>H4Ao'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)54;
      byteArray0[0] = (byte)54;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "T]drdm.SYCZ v/");
      int int0 = 7;
      Utility.setBit(7, 59);
      Utility.typeOfSignature("T]drdm.SYCZ v/");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("T]drdm.SYCZ v/", "byte", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)85;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("ret");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 91, (int) (byte)40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = "D";
      Utility.typeOfSignature("D");
      String string1 = "c0hot}?zalF,W!F%";
      String string2 = "N0lr";
      String string3 = null;
      try { 
        MockURI.URI("D", "c0hot}?zalF,W!F%", "N0lr", (String) null, "c0hot}?zalF,W!F%");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: D://c0hot%7D%3FzalF,W!F%25N0lr#c0hot%7D?zalF,W!F%25
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = "%4);4K";
      boolean boolean0 = true;
      try { 
        Utility.decode("%4);4K", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "WY_<ME");
      String[] stringArray0 = null;
      Utility.methodTypeToSignature(",+X;OJ)Gf/q;e", (String[]) null);
      String string0 = "NH$;uo?RF[<";
      try { 
        Utility.methodSignatureReturnType("NH$;uo?RF[<", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NH$;uo?RF[<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      boolean boolean0 = true;
      Utility.printArray((Object[]) null, true);
      Utility.compactClassName("}Ol$\"qt_c~4", "}Ol$\"qt_c~4", true);
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, "}Ol$\"qt_c~4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "SyntheticRepository could not load ";
      Utility.methodSignatureReturnType("SyntheticRepository could not load ");
      try { 
        Utility.methodSignatureReturnType("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `short'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "*/k4W?%|1K'E";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.convertString("*/k4W?%|1K'E");
      String string1 = "j([[k<)\\k$ol[";
      String string2 = "(1ye%2;";
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("j([[k<)k$ol[", "(1ye%2;", "(1ye%2;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: j([[k<)k$ol[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("W?JuJ,o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W?JuJ,o'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)72;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("H", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "H";
      stringArray0[1] = "double";
      stringArray0[2] = "+sCC";
      stringArray0[3] = "+sCC";
      String string1 = Utility.methodTypeToSignature("+sCC", stringArray0);
      assertEquals("(LH;DL+sCC;L+sCC;)L+sCC;", string1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "annotation";
      stringArray0[1] = "annotation";
      Utility.methodTypeToSignature("annotation", stringArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.signatureToString("Invalid StackMap frame_type: ");
      String string0 = "address";
      String string1 = "";
      String string2 = null;
      boolean boolean0 = false;
      int int0 = (-761);
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("Invalid StackMap frame_type: ", "int");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"int\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      short short0 = Utility.searchOpcode("r%+1%U=qtt1Ez^*Wu");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-30);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("07 07 3a e2", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Utility.compactClassName(":0^<< 28K,<", ":0^<< 28K,<", false);
      Utility.classOrInterface((-1));
      try { 
        Utility.methodSignatureArgumentTypes("interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "\\'";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "'";
      Utility.methodTypeToSignature("'", stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-86);
      byte byte0 = (byte) (-30);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-59);
      byte byte1 = (byte)86;
      byteArray0[4] = (byte)86;
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.methodSignatureReturnType("JLS`KjmN\"=h|j09f");
      assertEquals("long", string0);
      
      String string1 = Utility.getSignature("JLS`KjmN\"=h|j09f");
      String string2 = Utility.compactClassName("LJLS`KjmN\"=h|j09f;", "JLS`KjmN\"=h|j09f", false);
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.isJavaIdentifierPart('x');
      Utility.accessToString((-1096509449));
      PipedInputStream pipedInputStream0 = new PipedInputStream(141);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.accessToString((-1), false);
      Utility.printArray((Object[]) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.compactClassName("double", true);
      Utility.compactClassName("double");
      Utility.accessToString((-833), true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) "public private protected static final transient abstract strictfp synthetic annotation enum";
      objectArray0[2] = (Object) byteArrayOutputStream0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "double";
      objectArray0[5] = (Object) byteArrayOutputStream0;
      objectArray0[6] = (Object) "double";
      Object object1 = new Object();
      objectArray0[7] = object1;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "double", objectArray0);
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) mockPrintStream0;
      objectArray1[1] = (Object) locale0;
      objectArray1[2] = (Object) "public private protected static final transient abstract strictfp synthetic annotation enum";
      objectArray1[3] = (Object) locale0;
      objectArray1[4] = (Object) mockPrintStream0;
      objectArray1[5] = (Object) "double";
      Utility.printArray(printStream0, objectArray1);
      assertEquals(242, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = Utility.classOrInterface(255);
      String string1 = Utility.compactClassName("class", true);
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte) (-10);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-2);
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte)92;
      byteArray1[3] = (byte) (-84);
      byteArray1[4] = (byte)19;
      byteArray1[5] = (byte)60;
      byteArray1[6] = (byte) (-10);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "class";
      stringArray0[1] = "class";
      stringArray0[2] = "class";
      stringArray0[3] = "class";
      stringArray0[4] = "class";
      stringArray0[5] = "class";
      String string2 = Utility.methodTypeToSignature("class", stringArray0);
      assertEquals("(Lclass;Lclass;Lclass;Lclass;Lclass;Lclass;)Lclass;", string2);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("LSimpleElementValue;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LSimpleElementValue;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = Utility.format((-2412), (-2412), true, 'w');
      String string1 = Utility.compactClassName("-2412", false);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = Utility.setBit(877, 3762);
      assertEquals(263021, int0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = "PBVGf!e7VdFwRRyH=";
      try { 
        Utility.typeOfSignature("PBVGf!e7VdFwRRyH=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PBVGf!e7VdFwRRyH=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = "\\\\";
      String string1 = "double";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\\", "double", "\\");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \\
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("=xTPV02>ow-0p~4", false);
      int int0 = 3786;
      Utility.fillup("<", 3786, false, 'K');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("long", ">", "short", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "aload_0";
      stringArray0[1] = "aload_0";
      stringArray0[2] = "aload_0";
      stringArray0[3] = "SimpleElementValue doesnt know how to write out type ";
      stringArray0[4] = "aload_0";
      stringArray0[5] = "\"";
      stringArray0[6] = "aload_0";
      Utility.methodTypeToSignature("aload_0", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("SimpleElementValue doesnt know how to write out type ", "<", "q", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: SimpleElementValue doesnt know how to write out type 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = Utility.classOrInterface(1992);
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.isSet((-1372), (-1372));
      Utility.convertString("\t\t<");
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("\t\t<", stringArray0);
      String string0 = "\tdefault = ";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("\t\t<", "\tdefault = ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // \tdefault = 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte)82;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      int int0 = (-409);
      Utility.accessToString((-409));
      Utility.replace("(liHhdEpM3H?", "public private protected synchronized volatile interface abstract strictfp synthetic annotation enum", "");
      String string0 = "m+KYBu";
      try { 
        Utility.methodSignatureReturnType("m+KYBu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `m+KYBu'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Utility.clearBit(60, (-1135));
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Utility.accessToString(1504);
      Utility.setBit(1504, 73);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "synchronized volatile transient native abstract";
      objectArray0[1] = (Object) "synchronized volatile transient native abstract";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = "s! 3";
      // Undeclared exception!
      try { 
        Utility.signatureToString("s! 3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `s! 3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "lshr";
      try { 
        Utility.methodSignatureReturnType("lshr", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lshr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = ":=p\\G%=$4I";
      Utility.compactClassName(":=pG%=$4I", ":=pG%=$4I", false);
      String string1 = "oX!";
      try { 
        Utility.typeOfSignature("oX!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: oX!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Utility.decode(".1\"_jI<QD", false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".1\"_jI<QD";
      stringArray0[1] = ".1\"_jI<QD";
      stringArray0[2] = ".1\"_jI<QD";
      stringArray0[3] = ".1\"_jI<QD";
      stringArray0[4] = ".1\"_jI<QD";
      Utility.methodTypeToSignature(".1\"_jI<QD", stringArray0);
      Utility.methodTypeToSignature(",iWW20&<'Zv", stringArray0);
      int int0 = 3;
      Utility.accessToString(3, false);
      Utility.printArray((Object[]) stringArray0, false, false);
      int int1 = (-2021);
      Utility.clearBit((-1717986916), (-2021));
      try { 
        Utility.methodSignatureReturnType("mTc{kg]X>t).y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `.y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.setBit((-1942), 113);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)1;
      byte byte0 = (byte)12;
      byteArray0[3] = (byte)12;
      byte byte1 = (byte)125;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)5;
      byte[] byteArray1 = new byte[0];
      Utility.equals(byteArray0, byteArray1);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-86);
      byteArray2[1] = (byte)11;
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte)11;
      byteArray2[4] = (byte) (-86);
      byteArray2[5] = (byte) (-86);
      byteArray2[6] = (byte)125;
      Constant[] constantArray0 = new Constant[7];
      int int0 = 899;
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("'");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Utility.isJavaIdentifierPart('4');
      String string0 = "3yNYPN`";
      try { 
        Utility.typeOfSignature("3yNYPN`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3yNYPN`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      int int0 = 252;
      Utility.classOrInterface(252);
      try { 
        Utility.methodSignatureReturnType("The wildcard array must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The wildcard array must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = "istore";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("istore");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "istore";
      objectArray0[1] = (Object) mockPrintWriter0;
      int int0 = (-521);
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = 'H';
      charArray0[2] = '(';
      charArray0[3] = 'k';
      charArray0[4] = '^';
      // Undeclared exception!
      try { 
        mockPrintWriter0.write(charArray0, (-620), (-620));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Utility.isJavaIdentifierPart('-');
      String string0 = "int";
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Constant[] constantArray0 = new Constant[8];
      int int0 = 99;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Utility.compactClassName("P+Y92", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)79;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("P+Y92");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P+Y92'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("!{]bb\u0003t?", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `!{]bb\u0003t?'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)55;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-115), 171);
      Utility.toHexString(byteArray0);
      Utility.encode(byteArray0, false);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ConstantPool constantPool0 = null;
      int int0 = 6;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6, 256, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
