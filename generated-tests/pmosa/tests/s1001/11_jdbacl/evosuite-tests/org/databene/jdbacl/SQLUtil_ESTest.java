/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 17:29:33 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.engine.Mode;
import org.hsqldb.jdbc.jdbcClob;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "WIEr#0?KmNe4v{'";
      SQLUtil.substituteMarkers("WIEr#0?KmNe4v{'", "-- checkpoint", "-- checkpoint");
      SQLUtil sQLUtil0 = new SQLUtil();
      String string1 = ", bytes);";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(", bytes);");
      // Undeclared exception!
      try { 
        defaultDBTable0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Character character0 = new Character('=');
      SQLUtil.renderValue(character0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("]<\"M),>txZTs");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, "Ajk*F`awH", "", stringArray0);
      assertEquals("Ajk*F`awH as  on null.null = .null and null.null = .null and null.null = .null and null.null = .null and null.null = .null and null.null = .null and null.null = .null and null.null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "selectalter tablegep ? rt 'fr'";
      String string0 = SQLUtil.leftJoin("selectalter tablegep ? rt 'fr'", stringArray0, "selectalter tablegep ? rt 'fr'", "selectalter tablegep ? rt 'fr'", stringArray0);
      assertEquals("left join selectalter tablegep ? rt 'fr' as selectalter tablegep ? rt 'fr' on selectalter tablegep ? rt 'fr'.selectalter tablegep ? rt 'fr' = selectalter tablegep ? rt 'fr'.selectalter tablegep ? rt 'fr'", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("%Lyed`m\"");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "%Lyed`m\"", false, (String[]) null);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT %Lyed`m\" ", string0);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil.removeComments("s");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("s", false, ">v-%CW9.pTi|}kz", "s");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT s CHECK s", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "SELECT";
      stringArray0[1] = "}Dr5+C'?:_";
      stringArray0[2] = "~9";
      stringArray0[3] = "";
      stringArray0[4] = "R^['LNBXY";
      stringArray0[5] = "r8x;`8";
      SQLUtil.renderColumnNames(stringArray0);
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      dBSchema0.setDoc("SELECT");
      String[] stringArray1 = new String[3];
      stringArray1[0] = "~9";
      stringArray1[1] = "(SELECT, }Dr5+C'?:_, ~9, , R^['LNBXY, r8x;`8)";
      stringArray1[2] = "~9";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT  UNIQUE (~9, (SELECT, }Dr5+C'?:_, ~9, , R^['LNBXY, r8x;`8), ~9)", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("i9F^IOTv?TofD");
      assertFalse(boolean0);
      
      String string1 = SQLUtil.join("~9", "e%W(Ld[iHR", stringArray1, ",`i6mZF&v+", "", stringArray0);
      assertEquals("~9 join ,`i6mZF&v+ as  on e%W(Ld[iHR.~9 = .SELECT and e%W(Ld[iHR.(SELECT, }Dr5+C'?:_, ~9, , R^['LNBXY, r8x;`8) = .}Dr5+C'?:_ and e%W(Ld[iHR.~9 = .~9", string1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("RDbH");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("RDbH");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("RDbH", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil.isProcedureCall("@");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("alter indexexe'>c");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(42);
      SQLUtil.addRequiredCondition("select", stringBuilder0);
      SQLUtil.isQuery("select");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("_Yl\"O4fg3L");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "23503";
      String[] stringArray0 = null;
      String string1 = "E>778:l";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("23503", (String[]) null, "E>778:l", "E>778:l", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("insert");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "";
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "";
      stringArray0[4] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      int int0 = (-7042);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-7042), (CharSequence) "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -7042
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, (-2425), "");
      defaultDBColumn0.isEquivalent((DBObject) null);
      defaultDBColumn0.setDefaultValue((String) null);
      defaultDBColumn0.setDefaultValue("");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumn(defaultDBColumn0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "  DEFAULT  NULL";
      stringArray0[2] = null;
      stringArray0[3] = "a'~E[?Nc+$?$6$c+RK}";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil.removeComments(" i]");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(46, " i]");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" i]", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" i]  I](3) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("@/{$Td?^z!#!OZ'bt7");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jM$S.v/@";
      stringArray0[1] = "U";
      stringArray0[2] = "LINKED";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("jM$S.v/@ = 'jM$S.v/@' AND U = 'U' AND LINKED = 'LINKED'", string0);
      
      String string1 = SQLUtil.normalize("//", true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("%Lyedm\"");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "%Lyedm\"", false, (String[]) null);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT %Lyedm\" ", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("rename");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = SQLUtil.normalize("LAST_INSERT_ID", false);
      assertEquals("LAST_INSERT_ID", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("]Q5|{W|?M]@adT?.WB");
      assertNull(boolean0);
      
      String string1 = SQLUtil.substituteMarkers("\rXM=+!", "LAST_INSERT_ID", (Object) null);
      assertEquals("\rXM=+!", string1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.mutatesStructure("callexec-\"`");
      String string0 = SQLUtil.removeComments("jM$S.v/@");
      assertEquals("jM$S.v/@", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getReferrers();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "^st5K";
      DBSchema dBSchema0 = new DBSchema("^st5K");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("ism9`(aw%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: ism9`(aw%
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("!xEYF*GW`r`)v}");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      String string0 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("null.null, null.null, null.null, null.null, null.null, null.null, null.null", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "select count(*) from ";
      String string0 = SQLUtil.renderColumnListWithTableName("select count(*) from ", stringArray0);
      assertEquals("select count(*) from .select count(*) from ", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLUtil.normalize("y\"T7", false);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("y\"T7");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("TODAY");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("^VFxr!ZY[<is\"", dBSchema0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "^VFxr!ZY[<is\"";
      SQLUtil.join("^VFxr!ZY[<is\"", "^VFxr!ZY[<is\"", stringArray0, (String) null, "^VFxr!ZY[<is\"", stringArray0);
      SQLUtil.mutatesDataOrStructure("-\"`");
      String string0 = Mode.REGULAR;
      SQLUtil.normalize("^VFxr!ZY[<is\"", false);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema1 = new DBSchema("", dBCatalog0);
      DBSchema dBSchema2 = new DBSchema("$wF8fyB]Zw.A=8");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("urzfPT-MM$X8(SvLpUK", dBSchema2);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("PSEUDO_COLUMN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'PSEUDO_COLUMN' not found in table '^VFxr!ZY[<is\"'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("F<:QC8H;!JiziB");
      String string0 = "constraint";
      SQLUtil.ownerDotComponent(defaultDBTable0);
      String string1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jM$S.v/@";
      stringArray0[1] = "U";
      stringArray0[2] = "LINKED";
      StringBuilder stringBuilder0 = new StringBuilder(0);
      SQLUtil.addRequiredCondition("LINKED", stringBuilder0);
      SQLUtil.isQuery("jM$S.v/@");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("F<:QC8H;!JiziB");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "F<:QC8H;!JiziB";
      stringArray0[1] = "F<:QC8H;!JiziB";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ClS//-oEi^`6WDYQ", defaultDBTable0, 41, "exec@");
      defaultDBColumn0.setDefaultValue("Unknown constraint type: ");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("EXEC@", string0);
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(")~DcHB", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (F<:QC8H;!JiziB, F<:QC8H;!JiziB, , , ) REFERENCES F<:QC8H;!JiziB(F<:QC8H;!JiziB, F<:QC8H;!JiziB, , , )", string1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = SQLUtil.normalize("//", false);
      assertEquals("/ /", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "w(iqY<CuIQ";
      stringArray0[1] = "U";
      stringArray0[2] = "U";
      stringArray0[3] = "jM$S.v/@";
      stringArray0[4] = "update$~9h'g&dm\"t#";
      stringArray0[5] = "/ /";
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(w(iqY<CuIQ, U, U, jM$S.v/@, update$~9h'g&dm\"t#, / /)", string1);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("//");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-852), "CLOB");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("U", defaultDBTable0, dBDataType0, integer0);
      String string2 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("U CLOB NULL", string2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jM$S.vFG/@";
      String string0 = SQLUtil.normalize("jM$S.vFG/@", true);
      assertEquals("jM $ S.vFG / @", string0);
      
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(jM$S.vFG/@, , )", string1);
      
      boolean boolean0 = SQLUtil.isDML("exec@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = SQLUtil.normalize("*gE", true);
      assertEquals("* gE", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = SQLUtil.normalize("-W'>(_G^m+P", false);
      assertEquals("- W '>(_G^m+P'", string0);
      
      String[] stringArray0 = new String[1];
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("I%V id|*.Fv}g");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(":WRV8&[HqPSGE");
      String[] stringArray0 = new String[6];
      stringArray0[0] = ":WRV8&[HqPSGE";
      stringArray0[1] = "I%V id|*.Fv}g";
      stringArray0[2] = "I%V id|*.Fv}g";
      stringArray0[3] = "I%V id|*.Fv}g";
      stringArray0[4] = ":WRV8&[HqPSGE";
      stringArray0[5] = "I%V id|*.Fv}g";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ":WRV8&[HqPSGE", false, stringArray0);
      String string0 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertNotNull(string0);
      assertEquals("unique constraint :WRV8&[HqPSGE", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "setRef(int,Ref)";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setRef(int,Ref)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLUtil.normalize("+:-'] nlw,-}A", false);
      boolean boolean0 = new Boolean("+:-'] nlw,-}A");
      String string0 = TypeId.BIT_NAME;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("CHAR () FOR BIT DATA");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      StringBuilder stringBuilder0 = new StringBuilder("selectl hmhw<itp/s");
      SQLUtil.addOptionalCondition("CREATE SEQUENCE", stringBuilder0);
      SQLUtil.addRequiredCondition("CREATE SEQUENCE", stringBuilder0);
      assertEquals("selectl hmhw<itp/s or CREATE SEQUENCE and CREATE SEQUENCE", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLUtil.removeComments("~");
      SQLUtil.parseColumnTypeAndSize("jM$S.vFG/@");
      StringBuilder stringBuilder0 = new StringBuilder(439);
      SQLUtil.addOptionalCondition("create materialized viewu", stringBuilder0);
      assertEquals("create materialized viewu", stringBuilder0.toString());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "create materialized viewu";
      stringArray0[1] = "create materialized viewu";
      stringArray0[2] = "create materialized viewu";
      stringArray0[3] = "~";
      stringArray0[4] = "create materialized viewu";
      stringArray0[5] = "~";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("create materialized viewu = 'create materialized viewu' AND create materialized viewu = 'create materialized viewu' AND create materialized viewu = 'create materialized viewu' AND ~ = '~' AND create materialized viewu = 'create materialized viewu' AND ~ = '~'", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("BB[7~");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("T: ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("XYj(E");
      String string0 = SQLUtil.normalize("XYj(E", false);
      assertEquals("XYj (E", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DBDataType dBDataType0 = DBDataType.getInstance((-3013), " ADD ");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" ADD ", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("^", defaultDBTable0, dBDataType0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(" ADD , ^", string1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("DScUu&n&mOX");
      String string0 = SQLUtil.normalize("alter materialized view(%kj7jhw)f,u", false);
      assertEquals("alter materialized view (% kj7jhw) f, u", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("//");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-852), "update$~9h'g&dm\"t#");
      dBDataType0.isAlpha();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("jM$S.v/@", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.isEquivalent(defaultDBTable0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("jM$S.v/@ UPDATE$~9H'G&DM\"T#(2) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema(" (");
      dBSchema0.setDoc(" (");
      DBPackage dBPackage0 = new DBPackage((String) null, dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("-W'>(G^m+P", dBPackage0);
      dBProcedure0.setObjectId("registerOutParameter(int,int,String)");
      String string0 = SQLUtil.typeAndName(dBPackage0);
      assertEquals("null null", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("U");
      String[] stringArray0 = new String[17];
      stringArray0[0] = "7Dki:?#}OxRgRUy^Ac";
      stringArray0[1] = "U";
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("", "exec");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.FRENCH;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "U", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("7Dki:?#}OxRgRUy^Ac");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&Z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (-2710.560381);
      streamTokenizer0.pushBack();
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 2710.560381", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("U");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7Dki:?#}OxRgRUy^Ac";
      stringArray0[1] = "U";
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFile mockFile0 = new MockFile("8JTK+$29g-t$1;*Yyv", "exec");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.FRENCH;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "U", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("+:-'] nl", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      assertEquals(38L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null);
      assertTrue(dBForeignKeyConstraint0.isNameDeterministic());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("m>jq'&0kOJ");
      DBDataType dBDataType0 = DBDataType.getInstance((-1212), "a*'\"-UQtriW%,");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = Integer.getInteger("updateString(", 38);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("hMYVcWoy*K", defaultDBTable0, dBDataType0, integer0, integer1);
      arrayList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      String string0 = SchemaDescriptor.SA_USER_NAME;
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("hMYVcWoy*K");
      DBDataType dBDataType0 = DBDataType.getInstance((-1212), "a*'\"-UQtriW%,");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = Integer.getInteger("updateString(", 38);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("hMYVcWoy*K", defaultDBTable0, dBDataType0, integer0, integer1);
      arrayList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertEquals("hMYVcWoy*K", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(":/&r,O1k|on(h");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SQLUtil.removeComments("wm*&_H2");
      boolean boolean0 = SQLUtil.isDML("wm*&_H2");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("wm*&_H2", false);
      assertEquals("wm * & _H2", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "wm * & _H2";
      stringArray0[1] = "wm * & _H2";
      String string1 = SQLUtil.normalize("*/", false);
      assertEquals("*/", string1);
  }
}
