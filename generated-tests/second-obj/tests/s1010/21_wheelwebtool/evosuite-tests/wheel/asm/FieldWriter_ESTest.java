/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:56:06 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.Edge;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;
import wheel.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3127);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "h?ukAZ)smGWs@", "", "LocalVariableTypeTable", "LocalVariableTypeTable");
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putUTF8("h?ukAZ)smGWs@");
      ByteVector byteVector2 = byteVector1.put11(0, 1);
      byteVector2.put11(257, 2558);
      fieldWriter0.put(byteVector2);
      assertSame(byteVector1, byteVector2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3127);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "h?ukAZ)smGWs@", "", "LocalVariableTypeTable", "LocalVariableTypeTable");
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.putUTF8("h?ukAZ)smGWs@");
      int int0 = Frame.SHORT;
      fieldWriter0.visitAnnotation("aC.xy9Y.Dj", true);
      fieldWriter0.getSize();
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3127);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "h?ukAZ)smGWs@", "", "LocalVariableTypeTable", "LocalVariableTypeTable");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2706), "PiZ'/,Uw~M!`]", "PiZ'/,Uw~M!`]", "PiZ'/,Uw~M!`]", "PiZ'/,Uw~M!`]");
      Object object0 = new Object();
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, (-2706), "Deprecated", "]dNDer D", "]dNDer D", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@454da035
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2706), "PiZ'/,Uw~M!`]", "PiZ'/,Uw~M!`]", "cg\"V'u\"P_6~+>29", "PiZ'/,Uw~M!`]");
      fieldWriter0.getSize();
      fieldWriter0.getSize();
      fieldWriter0.next = fieldWriter0;
      classWriter0.newField("PiZ'/,Uw~M!`]", "", "");
      fieldWriter0.visitAnnotation("]dNDer D", false);
      fieldWriter0.getSize();
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2706), "iZ'/,Uw~M!`]", "iZ'/,Uw~M!`]", "iZ'/,Uw~M!`]", "iZ'/,Uw~M!`]");
      fieldWriter0.getSize();
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.put11(0, 0);
      ByteVector byteVector2 = byteVector1.put11(5652, 0);
      fieldWriter0.visitAnnotation("The array of prefixes must not be null", false);
      fieldWriter0.put(byteVector0);
      assertSame(byteVector0, byteVector2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2706), "PiZ'/,Uw~M!`]", "PiZ'/,Uw~M!`]", "PiZ'/,Uw~M!`]", "PiZ'/,Uw~M!`]");
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.visitAnnotation("", true);
      ByteVector byteVector1 = byteVector0.putInt((-35));
      fieldWriter0.put(byteVector1);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      ClassWriter classWriter1 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1994, "\"zeRtm", "\"zeRtm", "PiZ'/,Uw~M!`]", (Object) null);
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector();
      byteVector0.putInt(533);
      fieldWriter0.put(byteVector0);
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-21));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1025), "LcalVariableTypeTble", "<init>", "LcalVariableTypeTble", (Object) null);
      Attribute attribute0 = new Attribute("LcalVariableTypeTble");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2706), "PiZ'/,Uw~M!`]", "PiZ'/,Uw~M!`]", "cg\"V'u\"P_6~+>29", "PiZ'/,Uw~M!`]");
      classWriter0.newNameType("cg\"V'u\"P_6~+>29", "PiZ'/,Uw~M!`]");
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      classWriter0.newField("PiZ'/,Uw~M!`]", "", "");
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putShort(4);
      byteVector1.put11(12, 12);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-21));
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putShort(257);
      ByteVector byteVector2 = byteVector1.put12(257, (-21));
      byteVector2.put11((-830), (-21));
      ClassWriter classWriter1 = new ClassWriter(257);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter1, 2, "A1F3Ov>TrE;LtVQ ", "", (String) null, "A1F3Ov>TrE;LtVQ ");
      fieldWriter0.put(byteVector2);
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      byteVector0.putShort(9);
      Attribute attribute0 = new Attribute("wheel.asm.Type");
      ClassWriter classWriter0 = new ClassWriter(9);
      Label label0 = new Label();
      Edge edge0 = label0.successors;
      label0.successors = null;
      Object object0 = label0.info;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1316), "", "RuntimeInvisibleAnnotations", (String) null, (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2706), "PiZ'/,Uw~M!`]", "PiZ'/,Uw~M!`]", "PiZ'/,Uw~M!`]", "PiZ'/,Uw~M!`]");
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector(5652);
      ByteVector byteVector1 = new ByteVector(36);
      ByteVector byteVector2 = byteVector1.put11(257, 1264);
      fieldWriter0.put(byteVector2);
      fieldWriter0.visitEnd();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "%NEtF.";
      stringArray0[1] = "%NEtF.";
      stringArray0[2] = "%NEtF.";
      classWriter0.visit((-2706), 62830, "PiZ'/,Uw~M!`]", "sv&", "%NEtF.", stringArray0);
      ByteVector byteVector3 = new ByteVector();
      ByteVector byteVector4 = byteVector3.putInt(36);
      fieldWriter0.put(byteVector0);
      FieldWriter fieldWriter1 = classWriter0.lastField;
      fieldWriter1.visitAnnotation("sv&", true);
      fieldWriter1.put(byteVector4);
      fieldWriter0.visitEnd();
      assertSame(fieldWriter0, fieldWriter1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2706), "PiZ'/,Uw~M!`]", "PiZ'/,Uw~M!`]", "PiZ'/,Uw~M!`]", "PiZ'/,Uw~M!`]");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-6";
      stringArray0[1] = "PiZ'/,Uw~M!`]";
      stringArray0[2] = "vf-AJ)u-V";
      stringArray0[3] = "PiZ'/,Uw~M!`]";
      stringArray0[4] = "Qge@7Wg=Lm\"KbmeJ,t";
      stringArray0[5] = "PiZ'/,Uw~M!`]";
      stringArray0[6] = "vf-AJ)u-V";
      stringArray0[7] = "PiZ'/,Uw~M!`]";
      stringArray0[8] = "vf-AJ)u-V";
      classWriter0.visit(2553, (-902), "Qge@7Wg=Lm\"KbmeJ,t", "vf-AJ)u-V", "vf-AJ)u-V", stringArray0);
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putShort(5652);
      ByteVector byteVector2 = byteVector1.putLong((-2706));
      ByteVector byteVector3 = byteVector2.putUTF8("Hx@~iw&rWkUn7SRJ-#");
      byteVector2.putShort(2);
      fieldWriter0.visitAnnotation("Hx@~iw&rWkUn7SRJ-#", false);
      byteVector0.putInt(759);
      byteVector2.put11((-635), 5652);
      byteVector0.putUTF8("PiZ'/,Uw~M!`]");
      FieldWriter fieldWriter1 = classWriter0.lastField;
      fieldWriter1.put(byteVector3);
      FieldWriter fieldWriter2 = classWriter0.lastField;
      ByteVector byteVector4 = byteVector3.putByte(0);
      fieldWriter2.put(byteVector4);
      int int1 = fieldWriter0.getSize();
      assertEquals(42, int1);
  }
}
