/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:51:20 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.zip.Deflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      byteString0.EMPTY.hex();
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("Unexpected hex digit: ", charset0);
      ByteString byteString1 = byteString0.EMPTY.md5();
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = new ByteString((byte[]) null);
      ByteString byteString1 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf(byteString1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("Unbalanced enter/exit");
      byteString0.base64Url();
      int int0 = byteString0.size();
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[text=']", string0);
      
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.toAsciiUppercase();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteString.decodeHex("");
      int int0 = ByteString.codePointIndexToCharIndex("", (-1236));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)55;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)55);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      int int0 = byteString1.indexOf(byteString0, 48);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3L");
      Charset charset0 = Charset.defaultCharset();
      String string0 = "data == null";
      ByteString byteString0 = ByteString.encodeString("data == null", charset0);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      HashingSink hashingSink0 = HashingSink.sha1(pipe_PipeSink0);
      ByteString byteString0 = hashingSink0.hash();
      Buffer buffer0 = new Buffer();
      ByteString byteString1 = byteString0.EMPTY.toAsciiLowercase();
      byteString1.write(buffer0);
      byteString0.toString();
      String string0 = byteString1.utf8();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-48);
      byteArray0[5] = (byte) (-37);
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.EMPTY.hex();
      assertEquals("", string0);
      
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      HashingSink hashingSink0 = HashingSink.sha1(pipe_PipeSink0);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      ByteString byteString0 = hashingSink1.hash();
      byte[] byteArray0 = new byte[1];
      HashingSink.sha512(pipe_PipeSink0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-90);
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = ByteString.decodeBase64("Unbalanced enter/exit");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      boolean boolean0 = byteString0.rangeEquals(15, byteArray0, 1368, (int) (byte)74);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Charset.defaultCharset();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1759);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8 = "e.Oz[1] 7";
      byteString0.endsWith(byteArray0);
      int int0 = 1207;
      // Undeclared exception!
      try { 
        byteString0.substring(1207);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)13, (int) (byte)11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(5)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Charset charset1 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset1.encode("?SSE]TKZKNF`");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      charset0.decode(byteBuffer1);
      ByteString byteString0 = ByteString.encodeString("?SSE]TKZKNF`", charset0);
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((ByteString) null, (-4170));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)51;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byteArray0[2] = (byte)20;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1759);
      ByteString.codePointIndexToCharIndex("\r", 996);
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      buffer0.writeLong(0L);
      ByteString byteString0 = hashingSink1.hash();
      byteString0.internalArray();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      ByteString byteString2 = byteString1.toAsciiLowercase();
      int int0 = byteString0.indexOf(byteString1, (int) (byte)46);
      assertEquals((-1), int0);
      assertNotSame(byteString1, byteString2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-109);
      byteArray0[2] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-37);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.toString();
      byteString0.rangeEquals((int) (byte)0, byteArray0, 67, (int) (byte)124);
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      HashingSink hashingSink0 = HashingSink.md5(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      // Undeclared exception!
      try { 
        byteString0.substring((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        ByteString.decodeHex("<i@7Zv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: <
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Pipe pipe0 = new Pipe(1851L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.EMPTY.substring(0, 0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = hashingSink0.hash();
      ByteString byteString2 = byteString0.hmacSha256(byteString1);
      int int0 = byteString2.size();
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeLong(2958L);
      realBufferedSource0.buffer();
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = byteString0.substring(0, 0);
      realBufferedSource0.readByteString((long) 0);
      byteString0.startsWith(byteString1);
      // Undeclared exception!
      try { 
        ByteString.encodeString("R QR;DG_:<(wh", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      byteString1.hashCode();
      byteString0.EMPTY.rangeEquals(25, byteString1, 2943, 2943);
      String string0 = byteString0.toString();
      assertEquals("[hex=bb]", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("", (-92));
      // Undeclared exception!
      try { 
        ByteString.decodeHex("b.fYaj2n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: .
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString.codePointIndexToCharIndex("size > Integer.MAX_VALUE: ", 14);
      Pipe pipe0 = new Pipe(698L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)13;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("size > Integer.MAX_VALUE: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: s
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-68);
      byteArray0[0] = (byte) (-68);
      byteString0.lastIndexOf(byteArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream(enumeration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        ByteString.read(pipedInputStream0, (byte) (-46));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -46
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeLong(508L);
      realBufferedSource0.buffer();
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.substring(0, 0);
      String string0 = " 'Zxp ]XZ";
      // Undeclared exception!
      try { 
        ByteString.decodeHex(" 'Zxp ]XZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string:  'Zxp ]XZ
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "limit < 0: ");
      ByteString.codePointIndexToCharIndex("", 9);
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      Charset charset0 = Charset.defaultCharset();
      String string0 = byteString0.string(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Pipe pipe0 = new Pipe(1851L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = byteString0.EMPTY.substring(0, 0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)37;
      int int0 = byteString0.lastIndexOf(byteString1, 55);
      int int1 = byteString0.indexOf(byteString1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("82x}T6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: x
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      buffer0.toString();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      GzipSink gzipSink0 = new GzipSink(deflaterSink0);
      HashingSink hashingSink0 = HashingSink.sha512(gzipSink0);
      gzipSink0.close();
      ByteString byteString0 = hashingSink0.hash();
      byteString0.size();
      deflater0.end();
      ByteString byteString1 = byteString0.EMPTY.toAsciiLowercase();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString2 = realBufferedSource0.readByteString((long) 12);
      byteString1.EMPTY.startsWith(byteString2);
      byteString0.getByte(12);
      byteString0.asByteBuffer();
      byteString0.write(buffer0);
      // Undeclared exception!
      try { 
        byteString0.substring(64, 26);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 124;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 124, 124);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Pipe pipe0 = new Pipe(60L);
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLongLe((byte)39);
      HashingSink hashingSink0 = HashingSink.sha1(bufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Pipe pipe0 = new Pipe(60L);
      Buffer buffer0 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      
      Buffer buffer1 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString2 = new ByteString(byteArray0);
      byteString2.write(buffer0);
      String string0 = byteString2.toString();
      assertEquals("[text=']", string0);
      
      boolean boolean0 = byteString2.endsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Pipe pipe0 = new Pipe(1851L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = byteString0.EMPTY.substring(0, 0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteString1.base64Url();
      int int0 = ObjectStreamConstants.baseWireHandle;
      int int1 = byteString1.lastIndexOf(byteArray0);
      assertEquals((-1), int1);
      
      byteString1.toAsciiUppercase();
      int int2 = byteString0.indexOf(byteString1, (-718));
      assertFalse(int2 == int1);
      
      boolean boolean0 = byteString1.equals(byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("data == null");
      charset0.encode("data == null");
      ByteString byteString0 = ByteString.encodeString("data == null", charset0);
      byteString0.asByteBuffer();
      byteString0.hashCode();
      String string0 = byteString0.toString();
      assertEquals("[text=data == null]", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      HashingSink hashingSink0 = HashingSink.sha1(pipe_PipeSink0);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      ByteString byteString0 = hashingSink1.hash();
      byte[] byteArray0 = new byte[1];
      HashingSink hashingSink2 = HashingSink.sha512(pipe_PipeSink0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)0;
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      ByteString byteString1 = hashingSink2.hash();
      ByteString byteString2 = byteString0.substring((int) (byte)0);
      assertSame(byteString2, byteString0);
      
      ByteString byteString3 = byteString1.toAsciiUppercase();
      assertNotSame(byteString3, byteString1);
      assertFalse(byteString3.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Pipe pipe0 = new Pipe(60L);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      byteString0.indexOf(byteArray0);
      ByteString byteString1 = ByteString.of(byteArray0);
      byteString0.EMPTY.endsWith(byteString1);
      byteString0.EMPTY.toAsciiLowercase();
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)39, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Object object0 = new Object();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      byteString0.toString();
      ByteString byteString1 = byteString0.sha256();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString2 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      gzipSink0.flush();
      realBufferedSink0.buffer();
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString2;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString2;
      Options options0 = Options.of(byteStringArray0);
      options0.get((byte)0);
      byteString2.write(realBufferedSink0.buffer);
      options0.indexOf(byteString1);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = byteString2.asByteBuffer();
      charset0.decode(byteBuffer0);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-2160));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte byte0 = (byte) (-68);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-68);
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 76);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.asByteBuffer();
      byteString0.compareTo(byteString0);
      // Undeclared exception!
      try { 
        Charset.forName("?SSE]TKZKNF`");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ?SSE]TKZKNF`
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Pipe pipe0 = new Pipe(60L);
      Buffer buffer0 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      Buffer buffer1 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.write(buffer0);
      byteString1.toString();
      byteString0.compareTo(byteString1);
      int int0 = (-222);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (-12), (int) (byte)39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=-12 byteCount=39
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Pipe pipe0 = new Pipe(60L);
      Buffer buffer0 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      Buffer buffer1 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.write(buffer0);
      byteString0.lastIndexOf(byteString1, (-1026));
      byteString1.toString();
      byteString0.compareTo(byteString1);
      byteString1.base64Url();
      byteString1.compareTo(byteString0);
      byteString1.indexOf(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)39, 2046);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(32)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)70;
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.EMPTY.lastIndexOf(byteString0, (int) (byte)5);
      byteString1.EMPTY.hashCode = 38;
      byteString0.EMPTY.toString();
      byteString0.compareTo(byteString1);
      ByteString byteString2 = byteString0.toAsciiUppercase();
      byteString2.compareTo(byteString0);
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      byteString0.toString();
      ByteString byteString1 = byteString0.sha256();
      ByteString byteString2 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      ByteString byteString3 = byteString0.toAsciiLowercase();
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString1;
      byteStringArray0[0] = byteString1;
      byteStringArray0[2] = byteString3;
      byteStringArray0[3] = byteString3;
      Options options0 = Options.of(byteStringArray0);
      options0.get((byte)0);
      options0.indexOf(byteString0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("[hex=0b]");
      charset0.decode(byteBuffer0);
      byteString3.asByteBuffer();
      charset0.decode(byteBuffer0);
      ByteString.encodeString("[hex=0b]", charset0);
      byteString2.base64();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("Cw==");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: w
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-107);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-107);
      String string0 = "\n";
      ByteString.codePointIndexToCharIndex("\n", (byte) (-107));
      // Undeclared exception!
      try { 
        ByteString.decodeHex("b.fYaGj2n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: b.fYaGj2n
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Pipe pipe0 = new Pipe(1848L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.base64();
      byteString0.EMPTY.substring(0, 0);
      byteString0.toString();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)101;
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.sha256();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteString.read(pipedInputStream0, 0);
      String string0 = null;
      boolean boolean0 = pipe0.sourceClosed;
      realBufferedSource0.readByteString();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.mark(134);
      sequenceInputStream0.mark(29);
      try { 
        ByteString.read(sequenceInputStream0, 31);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Pipe pipe0 = new Pipe(1848L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = byteString0.EMPTY.substring(0, 0);
      byteString0.toString();
      byte[] byteArray0 = new byte[2];
      ByteString byteString2 = new ByteString(byteArray0);
      Buffer buffer1 = new Buffer();
      byteString0.toAsciiLowercase();
      byteString1.write(buffer0);
      ByteString byteString3 = byteString1.sha256();
      byteString1.endsWith(byteArray0);
      // Undeclared exception!
      try { 
        byteString3.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ByteString.decodeHex("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte) (-121);
      ByteString.of(byteArray1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        ByteString.read(byteArrayInputStream0, 305);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Pipe pipe0 = new Pipe(60L);
      Buffer buffer0 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      Buffer buffer1 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.write(buffer0);
      byteString1.toString();
      byteString0.compareTo(byteString1);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      Options.of(byteStringArray0);
      ByteString byteString2 = hashingSource0.hash();
      ByteString byteString3 = byteString1.sha1();
      ByteString byteString4 = byteString2.hmacSha1(byteString0);
      byteString3.equals(byteString4);
      byteString0.lastIndexOf(byteArray0);
      HashingSink hashingSink0 = HashingSink.md5(buffer1);
      ByteString byteString5 = hashingSink0.hash();
      byteString5.hashCode();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream(enumeration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Charset.defaultCharset();
      ByteString byteString0 = new ByteString(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1759);
      byteString0.write(byteArrayOutputStream0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      // Undeclared exception!
      try { 
        ByteString.encodeString("[hex=00]", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[3] = (byte)5;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)70;
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.EMPTY.lastIndexOf(byteString0, (int) (byte)5);
      byteString1.compareTo(byteString0);
      byteString1.lastIndexOf(byteArray0, (int) (byte)105);
      byteString0.equals((Object) null);
      byte byte0 = ObjectStreamConstants.TC_EXCEPTION;
      Charset.defaultCharset();
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: 0
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Pipe pipe0 = new Pipe(60L);
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      hashingSink0.hash();
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)64;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.substring((int) (byte)64);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((-2136L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2136
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 124;
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Pipe pipe0 = new Pipe(60L);
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      ByteBuffer byteBuffer0 = byteString1.asByteBuffer();
      Charset charset0 = Charset.defaultCharset();
      ByteString.of(byteBuffer0);
      byteString1.lastIndexOf(byteArray0, (int) (byte)39);
      byteString1.indexOf(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLongLe((-1));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      ByteString byteString2 = hashingSink0.hash();
      byteString2.toString();
      byteString2.indexOf(byteArray0);
      HashingSink hashingSink1 = HashingSink.md5(bufferedSink0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(hashingSink1);
      ByteString byteString3 = ByteString.encodeString("[hex=cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e]", charset0);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.readByteString();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)39;
      byteArray1[1] = (byte)39;
      byteString3.lastIndexOf(byteArray1, 80);
      byteString3.toString();
      byteString1.lastIndexOf(byteArray1, (-625));
      ByteString byteString4 = realBufferedSource0.readByteString();
      byteString4.rangeEquals(10, byteString0, 10, (int) (byte)39);
  }
}
