/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 03:43:25 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.store.raw.xact.GlobalXactId;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.constraint.Constraint;
import org.h2.tools.Recover;
import org.h2.value.ValueDecimal;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "sR[QLPzeIQ3}x*Si";
      DBSchema dBSchema0 = new DBSchema("Z4");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("sR[QLPzeIQ3}x*Si", dBSchema0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@'^XUc1&DL}T~?u";
      stringArray0[1] = "@'^XUc1&DL}T~?u";
      stringArray0[2] = "SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE";
      stringArray0[3] = "@'^XUc1&DL}T~?u";
      stringArray0[4] = "@'^XUc1&DL}T~?u";
      stringArray0[5] = "-";
      stringArray0[6] = "@'^XUc1&DL}T~?u";
      stringArray0[7] = "Z4";
      stringArray0[8] = "@'^XUc1&DL}T~?u";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "@'^XUc1&DL}T~?u", true, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("@'^XUc1&DL}T~?u");
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Illegal column type format: ");
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM Illegal column type format:  WHERE ", string0);
      
      String string1 = SQLUtil.renderValue(defaultDBTable0);
      assertEquals("Illegal column type format: ", string1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.removeComments("_SYSTEM");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "_SYSTEM";
      stringArray0[1] = "_SYSTEM";
      stringArray0[2] = "_SYSTEM";
      stringArray0[3] = "_SYSTEM";
      stringArray0[4] = "_SYSTEM";
      stringArray0[5] = "_SYSTEM";
      stringArray0[6] = "_SYSTEM";
      stringArray0[7] = "_SYSTEM";
      stringArray0[8] = "_SYSTEM";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.isQuery("GJ^#K)s|Y)U-FvC");
      TableContainer tableContainer0 = new TableContainer("_SYSTEM");
      tableContainer0.getTable("uT^jI\"");
      boolean boolean0 = false;
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("_SYSTEM");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "@7");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // @7
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("Z4");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      String string0 = Constraint.PRIMARY_KEY;
      String string1 = SQLUtil.substituteMarkers("PRIMARY KEY", "PRIMARY KEY", dBSchema0);
      assertEquals("Z4", string1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.normalize("", false);
      CompositeDBObject<DefaultDBColumn> compositeDBObject0 = (CompositeDBObject<DefaultDBColumn>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("", compositeDBObject0);
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertEquals("container ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ZI");
      defaultDBTable0.getColumnNames();
      String string0 = SQLUtil.normalize("JCY[&-H\"SYFx}N", false);
      assertEquals("JCY [ & - H \"SYFx}N\"", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("rb:gkTM!Z%c");
      SQLUtil.addOptionalCondition("K,do jZHH-", stringBuilder0);
      assertEquals("rb:gkTM!Z%c or K,do jZHH-", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DBConstraint dBConstraint0 = null;
      String string0 = "C4w[$vsD1}#V7`";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("C4w[$vsD1}#V7`", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder1, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil.removeComments("~;jyaXGh=%U)gNn");
      SQLUtil.renderValue("~;jyaXGh=%U)gNn");
      // Undeclared exception!
      try { 
        SQLUtil.join("~;jyaXGh=%U)gNn", "~;jyaXGh=%U)gNn", (String[]) null, "executeztc", "~;jyaXGh=%U)gNn", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "select into";
      stringArray0[1] = "select into";
      stringArray0[2] = "select into";
      SQLUtil.leftJoin("select into", stringArray0, (String) null, "select into", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.typeAndName((DBObject) null);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(2057, "Z4");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Z4", defaultDBTable0, dBDataType0, integer0, (Integer) null);
      String string0 = SQLUtil.renderValue(defaultDBColumn0);
      assertEquals("Z4 : Z4(3)", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("l?uN<`**k:", defaultDBTable0, 331, "drop indexl?un<`**k:");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("DROP INDEXL?UN<`**K:", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("7XS4R#W3Wy");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("7XS4R#W3Wy", dBSchema0);
      int int0 = 0;
      DBDataType dBDataType0 = DBDataType.getInstance(0, "alter session");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("truncate", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.removeComments("|#OeJL");
      TableContainer tableContainer0 = new TableContainer("|#OeJL");
      String string0 = SQLUtil.ownerDotComponent(tableContainer0);
      assertEquals("|#OeJL", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "42X13";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "42X13";
      SQLUtil.leftJoin("42X13", stringArray0, "42X13", "Ot1A)&_Xh\"`=}&q", stringArray0);
      SQLUtil.mutatesStructure("left join 42X13 as Ot1A)&_Xh\"`=}&q on 42X13.42X13 = Ot1A)&_Xh\"`=}&q.42X13");
      DBSchema dBSchema0 = new DBSchema("Ot1A)&_Xh\"`=}&q");
      dBSchema0.getTable("42X13");
      DBDataType dBDataType0 = DBDataType.getInstance(0, "Ot1A)&_Xh\"`=}&q");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("42X13", (DBTable) null, dBDataType0);
      SQLUtil.ownerDotComponent(defaultDBColumn0);
      String string1 = "create materialized view";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Lock mode set to ");
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil.removeComments("create materialized viewm<-8/!:[bnecm");
      SQLUtil.mutatesStructure("renamehlq>$altary");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("create materialized viewm<-8/!:[bnecm");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLUtil.mutatesStructure("WhKca");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("e&kS8@Mh;");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("");
      DBCatalog dBCatalog0 = new DBCatalog("')");
      dBCatalog0.toString();
      dBCatalog0.getTable("", false);
      dBCatalog0.getSequences();
      dBCatalog0.toString();
      SQLUtil.ownerDotComponent(dBCatalog0);
      SQLUtil.mutatesStructure("");
      SQLUtil.removeComments("')");
      String string0 = "COMMENT ON ";
      SQLUtil.mutatesDataOrStructure("COMMENT ON ");
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = "s";
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 's' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize(">[Zdh,#Qw~+TE}sB");
      SQLUtil.isDML("?y{Wf)yAU");
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("21474836", false, "21474836", "21474836");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT 21474836 ", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = SQLUtil.normalize("LONGBLOB", true);
      assertEquals("LONGBLOB", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("truncate");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLUtil.removeComments("c)E!n?OB!I=irO69");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectobject");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("create unique index");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("create unique index");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("kFD`Yec5");
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "kFD`Yec5";
      stringArray0[1] = "kFD`Yec5";
      stringArray0[2] = "kFD`Yec5";
      stringArray0[3] = "kFD`Yec5";
      stringArray0[4] = "kFD`Yec5";
      stringArray0[5] = "kFD`Yec5";
      stringArray0[6] = "kFD`Yec5";
      stringArray0[7] = "kFD`Yec5";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(kFD`Yec5, kFD`Yec5, kFD`Yec5, kFD`Yec5, kFD`Yec5, kFD`Yec5, kFD`Yec5, kFD`Yec5)", string0);
      
      Boolean boolean1 = SQLUtil.mutatesStructure("V6");
      assertTrue(boolean1.equals((Object)boolean0));
      
      String[] stringArray1 = new String[6];
      stringArray1[0] = "V6";
      stringArray1[1] = "R~";
      stringArray1[2] = "V6";
      stringArray1[3] = "kFD`Yec5";
      stringArray1[4] = "kFD`Yec5";
      stringArray1[5] = ")";
      String string1 = SQLUtil.join("V6", ")", stringArray1, "zxq", "Can't set fetch direction", stringArray1);
      assertEquals("V6 join zxq as Can't set fetch direction on ).V6 = Can't set fetch direction.V6 and ).R~ = Can't set fetch direction.R~ and ).V6 = Can't set fetch direction.V6 and ).kFD`Yec5 = Can't set fetch direction.kFD`Yec5 and ).kFD`Yec5 = Can't set fetch direction.kFD`Yec5 and ).) = Can't set fetch direction.)", string1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String string0 = SQLUtil.innerJoin("", stringArray0, "", "", stringArray0);
      assertEquals(" as  on . = . and . = . and . = . and . = . and . = . and . = .", string0);
      
      SQLUtil.removeComments("");
      TableContainer tableContainer0 = new TableContainer("");
      tableContainer0.toString();
      DBSchema dBSchema0 = new DBSchema(" as  on . = . and . = . and . = . and . = . and . = . and . = .");
      dBSchema0.getPackages();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      tableContainer0.getSequences(false, (List<DBSequence>) constraintDescriptorList0);
      tableContainer0.isIdentical(dBSchema0);
      tableContainer0.getComponents();
      String string1 = SQLUtil.substituteMarkers("", "", tableContainer0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("isVarArgs");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("isVarArgs", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("}W");
      DBCatalog dBCatalog0 = new DBCatalog();
      DBPackage dBPackage0 = new DBPackage("}W", (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure((String) null, dBPackage0);
      dBCatalog0.equals(dBProcedure0);
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
      assertNotNull(string0);
      
      boolean boolean1 = SQLUtil.isQuery("FT{5$zqLSi");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      DBSchema dBSchema0 = new DBSchema("org.databene.jdbacl.SQLUtil");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String string0 = SQLUtil.typeAndName(dBTable0);
      assertNotNull(string0);
      assertEquals("table null", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("Z4");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("sR[QLPzeIQ3}x*Si", dBSchema0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@'^XUc1&DL}T~?u";
      stringArray0[1] = "@'^XUc1&DL}T~?u";
      stringArray0[2] = "SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE";
      stringArray0[3] = "@'^XUc1&DL}T~?u";
      stringArray0[4] = "@'^XUc1&DL}T~?u";
      stringArray0[5] = "-";
      stringArray0[6] = "@'^XUc1&DL}T~?u";
      stringArray0[7] = "Z4";
      stringArray0[8] = "@'^XUc1&DL}T~?u";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "@'^XUc1&DL}T~?u", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (@'^XUc1&DL}T~?u, @'^XUc1&DL}T~?u, SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE, @'^XUc1&DL}T~?u, @'^XUc1&DL}T~?u, -, @'^XUc1&DL}T~?u, Z4, @'^XUc1&DL}T~?u)", string0);
      
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("@'^XUc1&DL}T~?u", false, dBPrimaryKeyConstraint0);
      String string1 = SQLUtil.renderValue(dBUniqueIndex0);
      assertEquals("@'^XUc1&DL}T~?u (@'^XUc1&DL}T~?u, @'^XUc1&DL}T~?u, SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE, @'^XUc1&DL}T~?u, @'^XUc1&DL}T~?u, -, @'^XUc1&DL}T~?u, Z4, @'^XUc1&DL}T~?u) unique", string1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("");
      DBCatalog dBCatalog0 = new DBCatalog("");
      dBCatalog0.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      try { 
        Recover.readClob("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[!O";
      String string0 = SQLUtil.renderColumnListWithTableName("[!O", stringArray0);
      assertEquals("[!O.[!O", string0);
      
      String string1 = SQLUtil.renderValue("[!O.[!O");
      assertEquals("'[!O.[!O'", string1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "sR[QLPzeIQ3}x*Si";
      DBSchema dBSchema0 = new DBSchema("Z4");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("sR[QLPzeIQ3}x*Si", dBSchema0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@'^XUc1&DL}T~?u";
      stringArray0[1] = "@'^XUc1&DL}T~?u";
      stringArray0[2] = "SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE";
      stringArray0[3] = "@'^XUc1&DL}T~?u";
      stringArray0[4] = "@'^XUc1&DL}T~?u";
      stringArray0[5] = "-";
      stringArray0[6] = "@'^XUc1&DL}T~?u";
      stringArray0[7] = "Z4";
      stringArray0[8] = "@'^XUc1&DL}T~?u";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "@'^XUc1&DL}T~?u", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "@'^XUc1&DL}T~?u";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = SQLUtil.normalize("j)&Pyf]a", true);
      assertEquals("j) & Pyf ] a", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("alter index");
      assertFalse(boolean0);
      
      File file0 = FileUtil.canonicalFile("=ET");
      File file1 = MockFile.createTempFile("alter index", "j) & Pyf ] a", file0);
      MockFileReader mockFileReader0 = new MockFileReader(file1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(mockFileReader0);
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("Z4");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("sR[QLPzeIQ3}x*Si", dBSchema0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@'^XUc1&DL}T~?u";
      stringArray0[1] = "@'^XUc1&DL}T~?u";
      stringArray0[2] = "SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (@'^XUc1&DL}T~?u, @'^XUc1&DL}T~?u, SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE, , , , , , )", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("Z4");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("sR[QLPzeIQ3}x*Si", dBSchema0);
      String[] stringArray0 = new String[9];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "`Fs(D{", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT `Fs(D{ PRIMARY KEY (, , , , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("Z4");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("JcpC_ct^]-Cw,sh");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("JcpC_ct^]-Cw,sh", false, defaultDBTable0, "Z4");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      SQLUtil.join((String) null, (String) null, stringArray0, "'5y?1-j`!,Kk=B]J", stringArray0[5], stringArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(stringArray0[6], (DBTable) null, (DBDataType) null);
      defaultDBColumn0.getNotNullConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "delete?[1=m;v", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT delete?[1=m;v PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "pageNum", false, stringArray0);
      defaultDBTable0.removeUniqueConstraint(dBPrimaryKeyConstraint0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte)123;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint1, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("isVarArgs");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "isVarArgs";
      stringArray0[2] = "";
      stringArray0[3] = "alter tablesearchstr";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      SQLUtil.renderColumnNames(stringArray0);
      String string0 = SQLUtil.normalize("1YRh%,", true);
      assertEquals("1YRh %,", string0);
      
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, isVarArgs, , alter tablesearchstr, , , , )", string1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLUtil.mutatesStructure("l?uN<`**k:");
      SQLUtil.normalize("l?uN<`**k:", true);
      String string0 = "HCK ";
      TableContainer tableContainer0 = new TableContainer("HCK ");
      tableContainer0.getTable("HCK ");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("HCK ", stringBuilder0);
      int int0 = 1234;
      // Undeclared exception!
      try { 
        stringBuilder1.insert(1234, "drop materialized view");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1234
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLUtil.isQuery("");
      StringBuilder stringBuilder0 = new StringBuilder(1194);
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(1078);
      SQLUtil.addRequiredCondition("", stringBuilder1);
      assertEquals("\u0436 and ", stringBuilder1.toString());
      assertEquals("\u0436 and ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("l?uN<`**k:");
      assertFalse(boolean0);
      
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l?uN<`**k:");
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("FU[S", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(")4.93", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-3), "l?uN<`**k:");
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(")4.93", defaultDBTable0, dBDataType0, integer1, integer2);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("l?uN<`**k:", defaultDBTable0, dBDataType0);
      Integer integer3 = RawTransaction.LOCK_ESCALATE;
      defaultDBColumn0.setFractionDigits(integer3);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn(")4.93", defaultDBTable0, 39, "/fe-9 QwE^B!");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(")4.93", string0);
      
      System.setCurrentTimeMillis((-1268L));
      boolean boolean1 = SQLUtil.isDDL("8 I");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("j)&Pyf]a");
      String string0 = SQLUtil.normalize("alter indexrenameu{%bv{-]", true);
      assertEquals("alter indexrenameu { % bv { - ]", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("M<-8/!:[bneCm");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-666), "?[1=m;v");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.ABORT;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("?[1=m;v", defaultDBTable0, dBDataType0, integer1, integer2);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("?[1=M;V(1,3)", string1);
      
      String string2 = SQLUtil.normalize("?[1=M;V(1,3)", true);
      assertEquals("? [ 1 = M  ; V (1, 3)", string2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("Z8");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",fR", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLUtil.mutatesStructure("l?uN<`**k:");
      Boolean boolean0 = SQLUtil.mutatesStructure("l?uN<`**k:");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-666), "@ ru");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      TableContainer tableContainer0 = new TableContainer("?u");
      tableContainer0.getTable("?u");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("inner", (DBTable) null, dBDataType0, (Integer) null, (Integer) null);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("@ RU", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "('.rvzO";
      stringArray0[1] = "d?c%Ync Sr[p";
      stringArray0[2] = "('.rvzO";
      stringArray0[3] = "u{%Bv{-]";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.normalize("create materialized viewm<-8/!:[bnecm", false);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "d?c%Ync Sr[p";
      SQLUtil.normalize("E_L-A2z2+'F(/IC}", true);
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("create materialized viewm < - 8 / ! :  [ bnecm", compositeDBObject0);
      tableContainer0.getTable("E_L-A2z2+'F(/IC}");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("d?c%Ync Sr[p", (DBTable) null, (-1933623595), "Kmr<Uc4(dc}%qcR}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: Kmr<Uc4(dc}%qcR}
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("l?uN<`**k:");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("l?uN<`**k:", true);
      assertEquals("l ? uN < ` *  * k :", string0);
      
      String string1 = SQLUtil.normalize("org.firebirdsql.gds.impl.wire.XdrInputStream", false);
      assertEquals("org.firebirdsql.gds.impl.wire.XdrInputStream", string1);
      
      SQLUtil.isDDL("l ? uN < ` *  * k :");
      String string2 = SQLUtil.substituteMarkers("0A000.S", "l ? uN < ` *  * k :", "0A000.S");
      assertEquals("0A000.S", string2);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("org.firebirdsql.gds.impl.wire.XdrInputStream", false, "0A000.S", "JPtM");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string3 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK JPtM", string3);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("create materialized viewcomment on");
      tableContainer0.getTable("create materialized viewcomment on");
      DBDataType dBDataType0 = DBDataType.getInstance((-2258), "o${&\"9Z*eT9a.US");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create materialized viewcomment on", (DBTable) null, dBDataType0, integer0, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("SET_DEFAULT", true, (DBTable) null, "e48!>1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBCheckConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("Z4");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("---- Transaction log ----------", false);
      assertEquals("---- Transaction log ----------", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Q#H)WUp{'L:~i");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "X\"?%OM6";
      stringArray0[1] = "X\"?%OM6";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "X\"?%OM6", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("X\"?%OM6", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      MockFile mockFile0 = new MockFile("Q#H)WUp{'L:~i");
      File file0 = mockFile0.getAbsoluteFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append(':');
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, printWriter0);
      SQLUtil.parseColumnTypeAndSize("STRUCT");
      StringBuilder stringBuilder0 = new StringBuilder("X\"?%OM6");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-114);
      GlobalXactId globalXactId0 = new GlobalXactId((-1356), byteArray0, byteArray0);
      globalXactId0.toString();
      // Undeclared exception!
      try { 
        stringBuilder0.insert(3312, (CharSequence) "(-1356,8e,8e)");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3312
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ZI");
      defaultDBTable0.getColumnNames();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("ZI", false, "ZI", "ZI");
      MockFile mockFile0 = new MockFile("ZI", "4X7");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("4X7");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("&It^~\"Ggjd &A%3=*", defaultDBTable0, (-3203), "&It^~\"Ggjd &A%3=*");
      mockPrintWriter0.print((Object) defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.normalize("ZI", false);
      assertEquals("ZI", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(500, "DATE");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("DATE", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "jt0pc4\"((Wil", "Z4");
      dBCheckConstraint0.setDoc((String) null);
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SQLUtil.removeComments("ZI");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("ZI", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ZI");
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      dBForeignKeyConstraint0.setOwner(compositeDBObject0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "ZI");
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.databene.jdbacl.model.CompositeDBObject$$EnhancerByMockitoWithCGLIB$$9b1f5fab cannot be cast to org.databene.jdbacl.model.DBTable
         //
         verifyException("org.databene.jdbacl.model.DBConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Lt+K2\"E(P4%eGnpO");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Lt+K2\"E(P4%eGnpO";
      stringArray0[1] = "Lt+K2\"E(P4%eGnpO";
      stringArray0[2] = "Lt+K2\"E(P4%eGnpO";
      stringArray0[3] = "e0<%KNDaKe#";
      stringArray0[4] = "e0<%KNDaKe#";
      stringArray0[5] = "e0<%KNDaKe#";
      stringArray0[6] = "e0<%KNDaKe#";
      stringArray0[7] = "execztc";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "e0<%KNDaKe#", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("Lt+K2\"E(P4%eGnpO", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance(2657, "Lt+K2\"E(P4%eGnpO");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Lt+K2\"E(P4%eGnpO", dBTable0, dBDataType0, integer0);
      arrayList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertEquals("Lt+K2\"E(P4%eGnpO", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[3] = "KGxa*@|3_A[t";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.normalize("(, , , KGxa*@|3_A[t, , , , , )", false);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(, , , KGxa*@|3_A[t, , , , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("~Z");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("alter table(|, vtzl}f*dvw=t/t_, ), , alter session2147483647, geturl)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"|\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Ug59r");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Ug59r", true, defaultDBTable0, "Ug59r");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "derby.properties";
      stringArray0[1] = " failed predicate: {";
      stringArray0[2] = "";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      SQLUtil.leftJoin("", stringArray0, "create tablefree() was called on this lob previously", "Ug59r", stringArray0);
      dBCheckConstraint0.setName((String) null);
      dBCheckConstraint0.setDoc("vuK_KY6`");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null);
      assertNull(dBCheckConstraint0.getName());
  }
}
