/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 14:16:15 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.nio.ByteOrder;
import java.util.Locale;
import org.apache.commons.imaging.formats.tiff.TiffElement;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeFloat;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeRational;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffField_ESTest extends TiffField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[17];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeFloat0, 0, 0, byteArray0, byteOrder0, 0);
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [F cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[3];
      TiffField tiffField0 = new TiffField(65488, 65488, fieldTypeFloat0, 65488, 65488, byteArray0, byteOrder0, 65488);
      tiffField0.getValueDescription();
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(1234, "\r]osw");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-8);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1234, 1234, fieldTypeAscii0, 1L, 1234, byteArray0, byteOrder0, (-1332));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\r]osw");
      tiffField0.dump((PrintWriter) mockPrintWriter0, "\r]osw");
      assertEquals(1, tiffField0.getBytesLength());
      assertEquals((-1332), tiffField0.getSortHint());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(1234, tiffField0.getDirectoryType());
      assertEquals(1234, tiffField0.getTag());
      assertEquals(1234, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeFloat0, 0, 0, byteArray0, byteOrder0, 0);
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [F cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-100);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(38, 38, fieldTypeShort0, 38, 38, byteArray0, byteOrder0, 38);
      tiffField0.getFieldTypeName();
      assertEquals(38, tiffField0.getOffset());
      assertEquals(38, tiffField0.getDirectoryType());
      assertEquals(38, tiffField0.getTag());
      assertEquals(38, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(22, 22, fieldTypeFloat0.SLONG, 1753L, 22, byteArray0, byteOrder0, 22);
      tiffField0.getIntValueOrArraySum();
      int int0 = tiffField0.getDirectoryType();
      assertEquals(22, tiffField0.getOffset());
      assertEquals(22, int0);
      assertEquals(1753L, tiffField0.getCount());
      assertEquals(7012, tiffField0.getBytesLength());
      assertEquals(22, tiffField0.getTag());
      assertEquals(22, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble((-1907), "");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeDouble0, 523L, 306L, byteArray0, byteOrder0, (-1));
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [D@17f78e6a for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)127;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-1), (-1), fieldTypeFloat0, 1871L, (-1), byteArray0, byteOrder0, 0);
      int int0 = tiffField0.getSortHint();
      assertEquals((-1), tiffField0.getDirectoryType());
      assertEquals(0, int0);
      assertEquals((-1), tiffField0.getTag());
      assertEquals((-1), tiffField0.getOffset());
      assertEquals(1871L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(1234, "\r]osw");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-8);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((byte) (-8), 655, fieldTypeAscii0, 1L, 1L, byteArray0, byteOrder0, 1467);
      String string0 = tiffField0.getStringValue();
      assertEquals(655, tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getBytesLength());
      assertNotNull(string0);
      assertEquals(1, tiffField0.getOffset());
      assertEquals((-8), tiffField0.getTag());
      assertEquals(1467, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(0, 292, fieldTypeByte0, 0, 0L, byteArray0, byteOrder0, (byte)41);
      tiffField0.getSortHint();
      tiffField0.getOversizeValueElement();
      tiffField0.getValueDescription();
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement((byte)41, 292);
      tiffField_OversizeValueElement0.getElementDescription(true);
      tiffField_OversizeValueElement0.getElementDescription(true);
      tiffField_OversizeValueElement0.getElementDescription(false);
      tiffField0.getValueDescription();
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [B cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[17];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeFloat0, 0, 0, byteArray0, byteOrder0, 0);
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertNull(tiffElement0);
      
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[7];
      TiffField tiffField0 = new TiffField(50984, 50984, fieldTypeFloat0, 50984, 50984, byteArray0, byteOrder0, 50984);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(50984, 50984);
      String string1 = tiffField_OversizeValueElement0.getElementDescription(true);
      assertEquals(50984, tiffField0.getDirectoryType());
      assertEquals(50984, tiffField0.getSortHint());
      assertEquals(50984, tiffField0.getTag());
      assertEquals(203936, tiffField0.getBytesLength());
      assertNull(string1);
      assertEquals(50984, tiffField0.getOffset());
      assertEquals(50984L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[0];
      TiffField tiffField0 = new TiffField(18, 18, fieldTypeByte0, 18, 18, byteArray0, byteOrder0, 18);
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertNotNull(tiffElement0);
      
      String string0 = tiffField0.getValueDescription();
      assertEquals(18, tiffField0.getOffset());
      assertEquals(18, tiffField0.getSortHint());
      assertEquals(18, tiffField0.getBytesLength());
      assertEquals(18, tiffField0.getDirectoryType());
      assertNotNull(string0);
      assertEquals(18, tiffField0.getTag());
      assertEquals(18L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      TiffField tiffField0 = new TiffField(2411, 2411, fieldTypeByte0, 2411, 17L, byteArray0, (ByteOrder) null, 340);
      MockFile mockFile0 = new MockFile("O{");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      tiffField0.dump((PrintWriter) mockPrintWriter0, "O{");
      tiffField0.dump((PrintWriter) mockPrintWriter0, "O{");
      assertEquals(152L, mockFile0.length());
      
      tiffField0.getByteArrayValue();
      assertEquals(2411, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(3, 3, fieldTypeByte0, 3, 3, byteArray0, byteOrder0, 3);
      String string0 = tiffField0.getValueDescription();
      assertEquals(3, tiffField0.getSortHint());
      assertEquals(3, tiffField0.getDirectoryType());
      assertEquals(3, tiffField0.getTag());
      assertEquals(3, tiffField0.getBytesLength());
      assertNotNull(string0);
      assertEquals(3, tiffField0.getOffset());
      assertEquals(3L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble((-1907), "");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte)0;
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      TiffField tiffField0 = new TiffField((byte)21, 0, fieldTypeLong0, (byte)0, 0, byteArray0, (ByteOrder) null, (-1));
      tiffField0.dump();
      String string0 = tiffField0.getTagName();
      assertEquals("Unknown Tag (0x15)", string0);
      assertEquals((-1), tiffField0.getSortHint());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-9);
      TiffField tiffField0 = new TiffField((-1233), (byte)0, fieldTypeByte0, 642L, 1L, byteArray0, (ByteOrder) null, 2329);
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@48f63d61 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-9);
      TiffField tiffField0 = new TiffField(938, 50, fieldTypeByte0, 0L, (-1L), byteArray0, (ByteOrder) null, (byte)0);
      tiffField0.dump();
      String string0 = tiffField0.getTagName();
      assertEquals("Unknown Tag (0x3aa)", string0);
      
      int int0 = tiffField0.getDirectoryType();
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals((-1), tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(50, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[0];
      TiffField tiffField0 = new TiffField((byte) (-120), 3, fieldTypeRational0, (byte)20, (-1), byteArray0, byteOrder1, (-1102));
      tiffField0.getIntValueOrArraySum();
      tiffField0.toString();
      tiffField0.toString();
      TiffField tiffField1 = new TiffField((byte) (-120), (byte)20, fieldTypeRational0, (byte)1, 1L, byteArray0, byteOrder1, 0);
      tiffField1.getOversizeValueElement();
      // Undeclared exception!
      try { 
        tiffField1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.imaging.common.ByteConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(50, 5, fieldTypeRational0, 8L, 1288L, byteArray0, byteOrder1, 0);
      tiffField0.getIntArrayValue();
      String string0 = tiffField0.getDescriptionWithoutValue();
      assertEquals("50 (0x32: Unknown Tag): ", string0);
      assertEquals(8L, tiffField0.getCount());
      assertEquals(5, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(64, tiffField0.getBytesLength());
      assertEquals(1288, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble((-4716), "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      TiffField tiffField0 = new TiffField((byte) (-79), 9, fieldTypeDouble0, 0L, (-2096L), byteArray0, byteOrder0, (byte) (-50));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      fieldTypeDouble0.LONG.getValue(tiffField0);
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      TiffField tiffField1 = new TiffField(531, 50, fieldTypeDouble0, (byte)80, 1838L, byteArray0, byteOrder1, (byte)22);
      ByteOrder.nativeOrder();
      tiffField1.dump();
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [D@56b9a8fd
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[10];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(7, 7, fieldTypeFloat0.DOUBLE, 7, 1800L, byteArray0, byteOrder0, 7);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      assertEquals(7, tiffField0.getTag());
      assertEquals(1800, tiffField0.getOffset());
      assertEquals(7, tiffField0.getSortHint());
      assertEquals(7, tiffField0.getDirectoryType());
      assertEquals(56, tiffField0.getBytesLength());
      assertEquals(7L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = new byte[9];
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)105;
      byteArray0[6] = (byte) (-1);
      byteArray1[4] = (byte)105;
      byteArray1[5] = (byte) (-1);
      byteArray1[5] = (byte)105;
      byteArray1[7] = (byte)105;
      byteArray1[8] = (byte) (-1);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeShort fieldTypeShort0 = new FieldTypeShort((byte)105, "}L#U#=-hf");
      TiffField tiffField0 = new TiffField(51009, (byte) (-1), fieldTypeShort0, (byte)105, (-6210L), byteArray0, byteOrder0, (-2887));
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(510, int0);
      
      tiffField0.getValue();
      tiffField0.getByteOrder();
      TiffField tiffField1 = new TiffField(7, (-2887), fieldTypeLong0, (byte) (-1), 51009, byteArray0, byteOrder0, 34024);
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField1.new OversizeValueElement((byte) (-1), (-1855));
      String string0 = tiffField_OversizeValueElement0.getElementDescription(true);
      assertEquals((-4), tiffField1.getBytesLength());
      assertEquals(34024, tiffField1.getSortHint());
      assertEquals((-1L), tiffField1.getCount());
      assertEquals(51009, tiffField1.getOffset());
      assertEquals(7, tiffField1.getTag());
      assertEquals((-2887), tiffField1.getDirectoryType());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(13, 13, fieldTypeAscii0, 13, 13, byteArray0, byteOrder0, 13);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      boolean boolean0 = tiffField0.isLocalValue();
      assertEquals(13, tiffField0.getOffset());
      assertFalse(boolean0);
      assertEquals(13, tiffField0.getTag());
      assertEquals(13, tiffField0.getSortHint());
      assertEquals(13, tiffField0.getBytesLength());
      assertEquals(13, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)1;
      FieldType.getFieldType(3);
      byteArray0[8] = (byte)8;
      TiffField tiffField0 = new TiffField(65535, 3, fieldTypeRational0, 65535, (-1137L), byteArray0, byteOrder1, (byte)1);
      tiffField0.dump();
      String string0 = tiffField0.getTagName();
      assertEquals("Unknown Tag (0xffff)", string0);
      assertEquals(1, tiffField0.getSortHint());
      assertEquals((-1137), tiffField0.getOffset());
      assertEquals(524280, tiffField0.getBytesLength());
      assertEquals(65535L, tiffField0.getCount());
      assertEquals(3, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte) (-115);
      TiffField tiffField0 = new TiffField(1, 9, fieldTypeShort0, 4620L, (-1233), byteArray0, (ByteOrder) null, (-3496));
      int[] intArray0 = tiffField0.getIntArrayValue();
      assertArrayEquals(new int[] {141, 36237, 37773, 36127}, intArray0);
      
      String string0 = tiffField0.getDescriptionWithoutValue();
      assertEquals("1 (0x1: Unknown Tag): ", string0);
      assertEquals(9, tiffField0.getDirectoryType());
      assertEquals((-1233), tiffField0.getOffset());
      assertEquals((-3496), tiffField0.getSortHint());
      assertEquals(4620L, tiffField0.getCount());
      assertEquals(9240, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte)1;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(48258, 48258, fieldTypeLong0, 48258, 0L, byteArray0, byteOrder0, (-306));
      ByteOrder.nativeOrder();
      tiffField0.toString();
      ByteOrder.nativeOrder();
      tiffField0.dump();
      tiffField0.getOversizeValueElement();
      ByteOrder.nativeOrder();
      tiffField0.getDescriptionWithoutValue();
      tiffField0.getIntArrayValue();
      tiffField0.dump();
      tiffField0.getTagName();
      tiffField0.getDoubleArrayValue();
      tiffField0.isLocalValue();
      tiffField0.isLocalValue();
      String string0 = "org.apache.commons.io.filefilter.FalseFileFilter";
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.FalseFileFilter", "org.apache.commons.io.filefilter.FalseFileFilter");
      MockFile mockFile1 = new MockFile(mockFile0, "org.apache.commons.io.filefilter.FalseFileFilter");
      String string1 = "S.@NOTEGNm?bUN;+J&o";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "S.@NOTEGNm?bUN;+J&o");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // S.@NOTEGNm?bUN;+J&o
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(4, "... (");
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-50);
      TiffField tiffField0 = new TiffField((byte) (-79), (byte) (-50), fieldTypeShort0, 270L, (-2096L), byteArray0, byteOrder0, (byte) (-50));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SShort");
      fieldTypeShort0.SLONG.getValue(tiffField0);
      ByteOrder byteOrder2 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField1 = new TiffField(9, 3992, fieldTypeShort0, (byte)80, (-583L), byteArray0, byteOrder1, 0);
      ByteOrder.nativeOrder();
      tiffField1.dump();
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [S@4a5fee90
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte)1;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((byte)1, (byte) (-6), fieldTypeLong0, 2254L, (-3440L), byteArray0, byteOrder0, (byte)114);
      fieldTypeLong0.getValue(tiffField0);
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      TiffField tiffField1 = new TiffField((-58), 9, fieldTypeLong0, (byte)31, (byte)1, byteArray0, byteOrder1, 531);
      ByteOrder.nativeOrder();
      tiffField0.dump();
      int int0 = tiffField1.getIntValueOrArraySum();
      assertEquals(31L, tiffField1.getCount());
      assertEquals(9, tiffField1.getDirectoryType());
      assertEquals((-58), tiffField1.getTag());
      assertEquals(124, tiffField1.getBytesLength());
      assertEquals(1, tiffField1.getOffset());
      assertEquals(531, tiffField1.getSortHint());
      assertEquals(543964979, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble((-4716), "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte) (-79);
      byteArray0[8] = (byte) (-79);
      TiffField tiffField0 = new TiffField((byte) (-79), (byte)92, fieldTypeDouble0, 1243L, (-4716), byteArray0, byteOrder1, (-989));
      String string0 = tiffField0.getValueDescription();
      assertEquals(9944, tiffField0.getBytesLength());
      assertEquals(1243L, tiffField0.getCount());
      assertEquals((-4716), tiffField0.getOffset());
      assertEquals((-989), tiffField0.getSortHint());
      assertEquals((-79), tiffField0.getTag());
      assertEquals(92, tiffField0.getDirectoryType());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((byte)52, (byte)52, fieldTypeDouble0, (byte)52, (byte)52, byteArray0, byteOrder0, 60);
      tiffField0.getDoubleArrayValue();
      assertEquals(52, tiffField0.getTag());
      assertEquals(52L, tiffField0.getCount());
      assertEquals(52, tiffField0.getDirectoryType());
      assertEquals(52, tiffField0.getOffset());
      assertEquals(416, tiffField0.getBytesLength());
      assertEquals(60, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      int int0 = 9;
      int int1 = 0;
      TiffField tiffField0 = new TiffField(9, 1, fieldTypeByte0, 1202L, (-115L), byteArray0, (ByteOrder) null, 0);
      tiffField0.getTagName();
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@60936f35 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)0;
      TiffField tiffField0 = new TiffField((byte) (-115), 0, fieldTypeFloat0, 8L, (-2417L), byteArray0, (ByteOrder) null, 37522);
      fieldTypeFloat0.UNDEFINED.getValue(tiffField0);
      tiffField0.getValueDescription();
      tiffField0.getOversizeValueElement();
      tiffField0.dump();
      tiffField0.getTagName();
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [F@229843dc
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte)0;
      TiffField tiffField0 = new TiffField(3382, 3382, fieldTypeFloat0, 993L, 4L, byteArray0, byteOrder0, 0);
      String string0 = tiffField0.getValueDescription();
      assertEquals(3382, tiffField0.getTag());
      assertEquals(3972, tiffField0.getBytesLength());
      assertEquals(3382, tiffField0.getDirectoryType());
      assertNotNull(string0);
      assertEquals(993L, tiffField0.getCount());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(4, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Artist");
      TiffField tiffField0 = new TiffField((byte) (-115), 0, fieldTypeFloat0, 8L, (-2417L), byteArray0, (ByteOrder) null, 37522);
      fieldTypeFloat0.UNDEFINED.getValue(tiffField0);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertNotNull(tiffElement0);
      
      tiffField0.dump();
      String string1 = tiffField0.getTagName();
      assertEquals("Unknown Tag (0xffffff8d)", string1);
      
      tiffField0.getDoubleArrayValue();
      tiffField0.getFieldType();
      assertEquals(32, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(37522, tiffField0.getSortHint());
      assertEquals((-2417), tiffField0.getOffset());
      assertEquals(8L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(2214, "");
      TiffField tiffField0 = new TiffField(2214, 2214, fieldTypeRational0, 2214, (-2306L), byteArray0, byteOrder0, 131);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      assertEquals(2214, tiffField0.getTag());
      assertEquals(131, tiffField0.getSortHint());
      assertEquals("", string0);
      
      TiffField tiffField1 = new TiffField(2214, 254, fieldTypeRational0, 8L, (-11), byteArray0, byteOrder0, 2214);
      tiffField1.getDoubleArrayValue();
      assertEquals(8L, tiffField1.getCount());
      assertEquals(254, tiffField1.getDirectoryType());
      assertEquals(2214, tiffField1.getTag());
      assertEquals(64, tiffField1.getBytesLength());
      assertEquals((-11), tiffField1.getOffset());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-115);
      TiffField tiffField0 = new TiffField((byte) (-115), (-1459), fieldTypeAscii0, (byte)0, 3845L, byteArray0, (ByteOrder) null, (byte) (-115));
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-115);
      TiffField tiffField1 = new TiffField((byte) (-75), 1356, fieldTypeAscii0, 1542L, 2276L, byteArray1, (ByteOrder) null, (-2811));
      TiffElement tiffElement0 = tiffField1.getOversizeValueElement();
      assertNotNull(tiffElement0);
      assertEquals((-75), tiffField1.getTag());
      assertEquals(1542L, tiffField1.getCount());
      assertEquals((-2811), tiffField1.getSortHint());
      assertEquals(1542, tiffField1.getBytesLength());
      
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      tiffField0.getOversizeValueElement();
      tiffField0.dump();
      String string1 = tiffField0.getStringValue();
      assertNotNull(string1);
      
      tiffField0.getFieldType();
      assertTrue(tiffField0.isLocalValue());
      assertEquals((-1459), tiffField0.getDirectoryType());
      assertEquals(3845, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeShort fieldTypeShort0 = new FieldTypeShort(995, "mILK,[");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte)7;
      TiffField tiffField0 = new TiffField(65535, 65535, fieldTypeShort0, 3360L, 1L, byteArray0, byteOrder0, 4130);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertEquals(4130, tiffField0.getSortHint());
      assertEquals(65535, tiffField0.getTag());
      assertEquals(6720, tiffField0.getBytesLength());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(65535, tiffField0.getDirectoryType());
      assertArrayEquals(new double[] {12872.0, 9473.0, 7544.0, (-32505.0)}, doubleArray0, 0.01);
      assertEquals(3360L, tiffField0.getCount());
  }
}
