/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 21:29:15 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      int[] intArray0 = new int[2];
      intArray0[0] = 603;
      intArray0[1] = (-1619);
      charClass1.appendFoldedClass(intArray0);
      CharClass charClass2 = charClass0.cleanClass();
      assertSame(charClass0, charClass2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-70);
      int int0 = (-3075);
      intArray0[1] = (-3075);
      intArray0[2] = (-219);
      intArray0[3] = 65;
      int int1 = 0;
      intArray0[4] = 0;
      int int2 = 0;
      intArray0[5] = 0;
      intArray0[6] = 1;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      int[][] intArray1 = new int[7][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass2 = charClass1.appendTable(intArray1);
      CharClass charClass3 = charClass2.appendFoldedClass(intArray1[6]);
      CharClass charClass4 = charClass3.appendClassWithSign(intArray1[1], intArray0[5]);
      int int3 = (-2389);
      CharClass charClass5 = charClass4.appendLiteral(int3, int2);
      charClass5.appendClass(intArray1[4]);
      charClass5.appendClass(intArray1[6]);
      CharClass charClass6 = charClass0.appendRange(int0, int1);
      int[][] intArray2 = new int[5][2];
      intArray2[0] = intArray0;
      intArray2[1] = intArray0;
      intArray2[2] = intArray0;
      intArray2[3] = intArray0;
      intArray2[4] = intArray0;
      charClass6.appendTableWithSign(intArray2, int1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 950;
      intArray0[0] = 950;
      intArray0[1] = (-1);
      intArray0[2] = 272;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendClass(intArray0);
      CharClass charClass2 = charClass1.appendClass(intArray0);
      CharClass charClass3 = charClass2.cleanClass();
      charClass3.appendClass(intArray0);
      charClass0.appendFoldedClass(intArray0);
      charClass1.toString();
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        charClass3.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.negateClass();
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.toString();
      CharClass charClass1 = charClass0.appendFoldedRange(1547, 1547);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][9];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      charClass0.toString();
      CharClass charClass2 = charClass1.appendTableWithSign(intArray0, 173824);
      assertSame(charClass2, charClass0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      charClass0.appendClass(intArray0);
      CharClass charClass1 = charClass0.negateClass();
      int[][] intArray1 = new int[1][7];
      intArray1[0] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray1, (-2148));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 281;
      int int0 = 1114111;
      intArray0[2] = 1114111;
      int int1 = (-3404);
      intArray0[3] = (-3404);
      int int2 = 1862;
      intArray0[4] = 1862;
      int int3 = 1032;
      intArray0[5] = 1032;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      int[] intArray1 = new int[6];
      intArray1[0] = 281;
      intArray1[1] = 0;
      intArray1[2] = 1032;
      intArray1[3] = 0;
      intArray1[4] = (-3404);
      intArray1[5] = 1032;
      charClass2.appendClass(intArray1);
      int int4 = 1;
      charClass2.appendRange(1, 0);
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 489);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[2];
      intArray0[0] = 4808;
      intArray0[1] = 1114111;
      charClass0.appendNegatedClass(intArray0);
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1114111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      intArray0[2] = 5433;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass();
      int[][] intArray1 = new int[4][1];
      intArray1[0] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[7][7];
      int[] intArray1 = new int[3];
      intArray1[0] = 66639;
      intArray1[1] = 0;
      intArray1[2] = 4;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      intArray2[0] = 66639;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[2];
      intArray3[0] = 4;
      intArray3[1] = 66639;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[9];
      intArray4[0] = 66639;
      intArray4[1] = 0;
      intArray4[2] = 0;
      intArray4[3] = 66639;
      intArray4[4] = 4;
      intArray4[5] = 4;
      intArray4[6] = 66639;
      intArray4[7] = 66639;
      intArray4[8] = 66639;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[7];
      intArray5[0] = 66639;
      intArray5[1] = 0;
      intArray5[2] = 4;
      intArray5[3] = 0;
      intArray5[4] = 0;
      intArray5[5] = 4;
      intArray5[6] = 66639;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[3];
      intArray6[0] = 0;
      intArray6[1] = 4;
      intArray6[2] = 66639;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[0];
      intArray0[6] = intArray7;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[9];
      intArray0[0] = 3993;
      intArray0[1] = 2308;
      intArray0[2] = (-1711);
      intArray0[3] = (-1525);
      intArray0[4] = 12450;
      intArray0[5] = (-4145);
      int int0 = 2111;
      intArray0[6] = 2111;
      intArray0[7] = 64;
      intArray0[8] = 3148;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 3148);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][2];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      charClass0.negateClass();
      String string0 = charClass1.toString();
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = charClass1.appendRange((-463), 1148);
      int[] intArray0 = new int[6];
      intArray0[0] = 1148;
      intArray0[1] = (-463);
      intArray0[2] = (-463);
      intArray0[3] = (-463);
      intArray0[4] = 1148;
      intArray0[5] = 91;
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      CharClass charClass4 = charClass3.cleanClass();
      CharClass charClass5 = charClass4.appendFoldedClass(intArray0);
      CharClass charClass6 = charClass5.appendNegatedClass(intArray0);
      assertSame(charClass2, charClass6);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[1][4];
      int[] intArray1 = new int[8];
      intArray1[0] = (-1);
      intArray1[1] = 172;
      intArray1[2] = 78;
      intArray1[3] = 0;
      intArray1[4] = 5268;
      intArray1[5] = 3780;
      intArray1[6] = 6913;
      intArray1[7] = 0;
      intArray0[0] = intArray1;
      CharClass charClass1 = charClass0.appendTable(intArray0);
      CharClass charClass2 = charClass1.cleanClass();
      CharClass charClass3 = charClass2.appendNegatedClass(intArray1);
      CharClass charClass4 = charClass3.appendClassWithSign(intArray1, 6913);
      CharClass charClass5 = charClass4.negateClass();
      CharClass charClass6 = charClass5.cleanClass();
      assertSame(charClass4, charClass6);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[1][7];
      int[] intArray1 = new int[4];
      intArray1[0] = 220;
      intArray0[0] = intArray1;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1010);
      intArray0[1] = 0;
      intArray0[2] = 1662;
      intArray0[3] = 7074;
      int int0 = 0;
      intArray0[4] = 0;
      int int1 = 0;
      intArray0[5] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedRange(1662, (-1010));
      CharClass charClass2 = charClass1.negateClass();
      charClass2.toString();
      int int2 = 618;
      int[][] intArray1 = new int[4][4];
      int[] intArray2 = new int[6];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = (-1010);
      intArray2[3] = (-1010);
      intArray2[4] = 0;
      intArray2[5] = 0;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      charClass2.appendNegatedTable(intArray1);
      charClass2.appendFoldedClass(intArray0);
      int int3 = (-2039);
      charClass2.appendRange(int2, int3);
      CharClass charClass3 = charClass1.appendNegatedClass(intArray0);
      charClass3.toString();
      CharClass charClass4 = charClass1.appendClass(intArray0);
      charClass4.negateClass();
      charClass3.appendLiteral(int1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[4][8];
      int[] intArray1 = new int[7];
      intArray1[2] = 119152;
      intArray1[4] = 1729;
      int[][] intArray2 = new int[1][2];
      intArray2[0] = intArray1;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray2);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendFoldedRange((-223), 3993);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = (-635);
      intArray0[3] = (-1896);
      intArray0[4] = 64;
      intArray0[5] = (-1722);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass.charClassToString(intArray0, 1);
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass0.appendClass(intArray0);
      charClass1.appendLiteral((-1722), 64);
      charClass1.appendNegatedClass(intArray0);
      charClass2.toString();
      CharClass charClass3 = charClass2.appendLiteral((-635), 2);
      CharClass.charClassToString(intArray0, 0);
      CharClass charClass4 = charClass3.appendFoldedClass(intArray0);
      charClass3.appendClass(intArray0);
      charClass1.appendRange(1622, (-336));
      charClass4.cleanClass();
      charClass1.negateClass();
      assertArrayEquals(new int[] {(-635), (-1896), 2, 0, 64, (-1722)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(10815, 8139);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[0] = 2484;
      intArray0[1] = 324;
      intArray0[2] = (-7517);
      intArray0[3] = 91;
      intArray0[4] = 0;
      intArray0[5] = 38;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      CharClass charClass3 = charClass2.appendFoldedRange((-505), 528);
      CharClass charClass4 = charClass3.appendRange(1540, 38);
      CharClass charClass5 = charClass4.negateClass();
      int[] intArray1 = charClass5.toArray();
      assertArrayEquals(new int[] {0, 2483}, intArray1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][2];
      charClass0.appendNegatedTable(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[3][7];
      int[] intArray1 = new int[3];
      intArray1[0] = (-223);
      intArray1[1] = (-223);
      intArray1[2] = 3993;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[] intArray3 = new int[9];
      intArray3[0] = 3993;
      intArray3[1] = (-223);
      intArray3[2] = (-223);
      intArray3[3] = (-1);
      intArray3[4] = (-223);
      intArray3[5] = (-223);
      intArray3[6] = 3993;
      intArray3[7] = (-223);
      intArray3[8] = (-223);
      intArray0[2] = intArray3;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray0, (-223));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[6][0];
      int[] intArray1 = new int[9];
      intArray1[0] = 119141;
      intArray1[1] = (-836);
      intArray1[2] = 6662;
      intArray1[3] = 1726;
      intArray1[4] = 93;
      intArray1[5] = 2979;
      intArray1[6] = 2021;
      intArray1[7] = (-195);
      intArray1[8] = 220;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      intArray2[0] = 1671;
      intArray2[1] = 6662;
      intArray2[2] = 1726;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = 2021;
      intArray3[1] = (-836);
      intArray3[2] = 220;
      intArray3[3] = 1726;
      intArray3[4] = 119141;
      intArray3[5] = (-836);
      intArray3[6] = 2979;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = 1671;
      intArray4[1] = 220;
      intArray4[2] = 2021;
      intArray4[3] = 1671;
      intArray4[4] = 2979;
      intArray4[5] = 2979;
      intArray4[6] = (-195);
      intArray4[7] = 2979;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[9];
      intArray5[0] = 2979;
      intArray5[1] = 1671;
      intArray5[2] = (-836);
      intArray5[3] = 1726;
      intArray5[4] = 2021;
      intArray5[5] = 6662;
      intArray5[6] = 2979;
      intArray5[7] = 220;
      intArray5[8] = 93;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[9];
      intArray6[0] = 220;
      intArray6[1] = (-836);
      intArray6[2] = 220;
      intArray6[3] = (-2604);
      intArray6[4] = 6662;
      intArray6[5] = 1726;
      intArray6[6] = (-836);
      intArray6[7] = 1726;
      intArray6[8] = 2021;
      intArray0[5] = intArray6;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      int[][] intArray7 = new int[9][5];
      intArray7[0] = intArray4;
      intArray7[1] = intArray6;
      intArray7[2] = intArray6;
      intArray7[3] = intArray2;
      intArray7[4] = intArray4;
      intArray7[5] = intArray5;
      intArray7[6] = intArray6;
      intArray7[7] = intArray6;
      intArray7[8] = intArray4;
      CharClass charClass2 = charClass1.appendTableWithSign(intArray7, 4);
      CharClass charClass3 = charClass2.cleanClass();
      assertSame(charClass3, charClass1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange((-349), (-349));
      int[] intArray0 = charClass1.toArray();
      CharClass charClass2 = charClass0.cleanClass();
      charClass2.toString();
      CharClass charClass3 = charClass1.appendClassWithSign(intArray0, (-462));
      charClass1.appendNegatedClass(intArray0);
      charClass3.cleanClass();
      int[] intArray1 = new int[0];
      CharClass charClass4 = charClass1.appendFoldedClass(intArray1);
      CharClass charClass5 = charClass4.appendRange(4, (-462));
      assertSame(charClass1, charClass5);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[9][7];
      int[] intArray1 = new int[5];
      intArray1[0] = 650;
      intArray1[1] = 129;
      intArray1[2] = 1;
      intArray1[3] = 8;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      intArray2[0] = 1;
      intArray0[1] = intArray2;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[9][7];
      int[] intArray1 = new int[5];
      intArray1[1] = 129;
      intArray1[2] = 1;
      intArray1[3] = 8;
      intArray1[4] = 129;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      intArray2[0] = 1;
      int[] intArray3 = new int[6];
      intArray3[0] = 129;
      intArray3[1] = 66640;
      intArray3[2] = 0;
      intArray3[3] = 129;
      intArray3[4] = 129;
      intArray3[5] = 8;
      intArray0[2] = intArray3;
      intArray0[3] = intArray1;
      int[] intArray4 = new int[3];
      intArray4[0] = 8;
      intArray4[1] = 66640;
      intArray4[2] = 8;
      intArray0[4] = intArray4;
      intArray0[5] = intArray1;
      int[] intArray5 = new int[2];
      intArray5[0] = 66640;
      intArray5[1] = 5420;
      intArray0[6] = intArray5;
      int[] intArray6 = new int[6];
      intArray6[0] = 5420;
      intArray6[1] = 8;
      intArray6[2] = 1;
      intArray6[3] = 1;
      intArray6[4] = 650;
      intArray6[5] = 8;
      intArray0[7] = intArray6;
      int[] intArray7 = new int[6];
      intArray7[0] = 1;
      intArray7[1] = 8;
      intArray7[2] = 8;
      intArray7[3] = 1010;
      intArray7[4] = 1;
      intArray7[5] = 5420;
      intArray0[8] = intArray7;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray0);
  }
}
