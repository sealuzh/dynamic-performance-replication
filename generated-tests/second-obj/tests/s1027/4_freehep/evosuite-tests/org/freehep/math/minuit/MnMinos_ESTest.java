/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:18:43 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.FunctionMinimum;
import org.freehep.math.minuit.MinimumParameters;
import org.freehep.math.minuit.MinimumSeed;
import org.freehep.math.minuit.MinimumState;
import org.freehep.math.minuit.MnAlgebraicVector;
import org.freehep.math.minuit.MnMinos;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserTransformation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnMinos_ESTest extends MnMinos_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnMinos mnMinos0 = new MnMinos(fCNBase0, (FunctionMinimum) null);
      // Undeclared exception!
      try { 
        mnMinos0.minos(1, (double) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnMinos", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MinimumState minimumState0 = new MinimumState(5);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      FunctionMinimum.MnReachedCallLimit functionMinimum_MnReachedCallLimit0 = new FunctionMinimum.MnReachedCallLimit();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 616.054);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      // Undeclared exception!
      try { 
        mnMinos0.range(5);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnMinos mnMinos0 = new MnMinos(fCNBase0, (FunctionMinimum) null);
      int int0 = 515;
      // Undeclared exception!
      try { 
        mnMinos0.loval(515);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnMinos", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2521.672;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MinimumState minimumState0 = new MinimumState(100);
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 2521.672);
      MnMinos mnMinos0 = new MnMinos((FCNBase) null, functionMinimum0);
      // Undeclared exception!
      try { 
        mnMinos0.loval(100, (-1448.131564), 100);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnMinos mnMinos0 = new MnMinos(fCNBase0, (FunctionMinimum) null);
      // Undeclared exception!
      try { 
        mnMinos0.lower(1343, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnMinos", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      double double0 = 0.0;
      FunctionMinimum functionMinimum0 = new FunctionMinimum((MinimumSeed) null, linkedList0, 0.0, (FunctionMinimum.MnReachedCallLimit) null);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, (MnStrategy) null);
      // Undeclared exception!
      try { 
        mnMinos0.upval(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumState minimumState0 = new MinimumState(5);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 5);
      List<MinimumState> list0 = functionMinimum0.states();
      FunctionMinimum.MnReachedCallLimit functionMinimum_MnReachedCallLimit0 = new FunctionMinimum.MnReachedCallLimit();
      functionMinimum0.userState();
      FunctionMinimum functionMinimum1 = new FunctionMinimum(minimumSeed0, list0, 616.054, functionMinimum_MnReachedCallLimit0);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum1, 5);
      // Undeclared exception!
      try { 
        mnMinos0.upval(5, (double) 285, 285);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumState minimumState0 = new MinimumState(5);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 5);
      List<MinimumState> list0 = functionMinimum0.states();
      FunctionMinimum.MnReachedCallLimit functionMinimum_MnReachedCallLimit0 = new FunctionMinimum.MnReachedCallLimit();
      FunctionMinimum functionMinimum1 = new FunctionMinimum(minimumSeed0, list0, 616.054, functionMinimum_MnReachedCallLimit0);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum1, 5);
      // Undeclared exception!
      try { 
        mnMinos0.upper(5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, (-103.247818525038));
      MinimumState minimumState0 = new MinimumState(minimumParameters0, (-2121), 3);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      LinkedList<MinimumState> linkedList1 = new LinkedList<MinimumState>();
      FunctionMinimum.MnAboveMaxEdm functionMinimum_MnAboveMaxEdm0 = new FunctionMinimum.MnAboveMaxEdm();
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, (-103.247818525038));
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      // Undeclared exception!
      try { 
        mnMinos0.loval((-2121), (double) (-2121), (-2736));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 3);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 2610, 3);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      mnAlgebraicVector0.toString();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 2610);
      mnUserTransformation0.add("S^~@]??Te3O", (-2502.16232534867), 3, 3, 2610);
      MnStrategy mnStrategy0 = new MnStrategy();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnMinos mnMinos0 = new MnMinos(fCNBase1, functionMinimum0, 770);
      mnUserTransformation0.add("LAVector parameters:\n\n0.00000 0.00000 0.00000 \n", (-2502.16232534867));
      // Undeclared exception!
      try { 
        mnMinos0.loval(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double double0 = (-2502.16232534867);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, (-103.247818525038));
      MinimumState minimumState0 = new MinimumState(minimumParameters0, (-2121), 3);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, (-103.247818525038));
      MnStrategy mnStrategy0 = new MnStrategy();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 770;
      MnMinos mnMinos0 = new MnMinos(fCNBase1, functionMinimum0, 770);
      mnUserTransformation0.add("", (-2502.16232534867));
      // Undeclared exception!
      try { 
        mnMinos0.lower(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 0.0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, (-2108), 3);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 0.0);
      MnStrategy mnStrategy0 = new MnStrategy();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnMinos mnMinos0 = new MnMinos(fCNBase1, functionMinimum0, 770);
      // Undeclared exception!
      try { 
        mnMinos0.range(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(8);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 8);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 2610, 8);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, (-103.247818525038));
      mnUserTransformation0.add("S^~@]??Te3O", (-4553.830594901339), (-1945.60303632), 8, 2610);
      MnStrategy mnStrategy0 = new MnStrategy();
      int int0 = 0;
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, 2610);
      // Undeclared exception!
      try { 
        mnMinos0.minos(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 3);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 2610, 3);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, (-103.247818525038));
      mnUserTransformation0.add("S^~@]??Te3O", (-4552.872652237383), (-1945.60303632), 3, 2610);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserTransformation0.add("", (-2502.16232534867));
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, 0);
      // Undeclared exception!
      try { 
        mnMinos0.upper(0, 4.0, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(8);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 8);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 2610, 8);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, (-103.247818525038));
      mnUserTransformation0.add("S^~@]??Te3O", (-4552.872652237383), (-1945.60303632), 8, 2610);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserTransformation0.add("", (-2502.16232534867));
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, 0);
      // Undeclared exception!
      try { 
        mnMinos0.lower(0, 0.0, 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 2610;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 3);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 2610, 3);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, (-103.247818525038));
      double double0 = (-4552.872652237383);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserTransformation0.add("S^~@]??Te3O", (-2502.16232534867));
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, 0);
      int int1 = 100;
      // Undeclared exception!
      try { 
        mnMinos0.upper(0, (-2502.16232534867), 100);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 2610;
      int int1 = 14;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(14);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 14);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 2610, 14);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, (-103.247818525038));
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserTransformation0.add("", 2610);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, 0);
      // Undeclared exception!
      try { 
        mnMinos0.minos(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 3);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 2610, 3);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      mnAlgebraicVector0.toString();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      mnUserTransformation0.add("LAVector parameters:\n\n0.00000 0.00000 0.00000 \n", 0.1, 2610);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 2610);
      mnUserTransformation0.add("S^@@]??Te3O", (-2491.2), (-1945.60303632), 3, 2610);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserTransformation0.add("org.freehep.math.minuit.MnApplication", (-1945.60303632), (-1945.60303632), (-1945.60303632), (-2491.2));
      MnStrategy mnStrategy1 = new MnStrategy(2610);
      functionMinimum0.userState();
      functionMinimum0.userCovariance();
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy1);
      mnMinos0.minos(0);
      // Undeclared exception!
      try { 
        mnMinos0.upper(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 3);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 2610, 3);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      mnAlgebraicVector0.toString();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      mnUserTransformation0.add("LAVector parameters:\n\n0.00000 0.00000 0.00000 \n", 0.1, 2610);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 2610);
      mnUserTransformation0.add("S^@@]??Te3O", (-2491.2), (-1945.60303632), 3, 2610);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserTransformation0.add(".", 0.2778870055921154, (-1945.60303632), (-1945.60303632), 0.1);
      int int0 = 1;
      MnStrategy mnStrategy1 = new MnStrategy(1);
      functionMinimum0.userState();
      functionMinimum0.userCovariance();
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy1);
      mnMinos0.upper(1, (double) 1, 1089);
      // Undeclared exception!
      try { 
        mnMinos0.lower(328, (-1945.60303632), 328);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 328, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 3);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 2610, 3);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      mnAlgebraicVector0.toString();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      mnUserTransformation0.add("LAVector parameters:\n\n0.00000 0.00000 0.00000 \n", (-2491.2), 2610);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 2610);
      mnUserTransformation0.add("S^@@]??Te3O", (-2491.2), (-1945.60303632), 3, 2610);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserTransformation0.add(".", 0.2778870055921154, (-1945.60303632), (-1945.60303632), 3);
      MnStrategy mnStrategy1 = new MnStrategy(1);
      functionMinimum0.userState();
      functionMinimum0.userCovariance();
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy1);
      mnMinos0.lower(2);
      mnMinos0.upper(2, (double) 2610, 3);
      mnAlgebraicVector0.toString();
      // Undeclared exception!
      try { 
        mnMinos0.minos(1232, 0.0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1232, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 3);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 2610, 3);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      mnAlgebraicVector0.toString();
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      mnUserTransformation0.add("LAVector parameters:\n\n0.00000 0.00000 0.00000 \n", 0.1, 2610);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, 2610);
      mnUserTransformation0.add("S^@@]??Te3O", (-2491.2), 0.1, 3, 2610);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserTransformation0.add(".", 0.2778870055921154, (-2.0), (-2.0), 0.1);
      MnStrategy mnStrategy1 = new MnStrategy(1);
      functionMinimum0.userState();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, 25.47333012634003, (-27.61149421136961), 0.0, (-2.0)).when(fCNBase1).valueOf(any(double[].class));
      MnMinos mnMinos0 = new MnMinos(fCNBase1, functionMinimum0, mnStrategy0);
      // Undeclared exception!
      try { 
        mnMinos0.range(1, (double) 2610, 46);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
