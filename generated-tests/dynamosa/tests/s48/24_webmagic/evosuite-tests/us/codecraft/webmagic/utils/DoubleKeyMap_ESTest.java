/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 16:20:29 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Map<String, Integer>, String> hashMap1 = new HashMap<Map<String, Integer>, String>();
      DoubleKeyMap<HashMap<String, Integer>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, String, Integer>();
      HashMap<Object, Map<String, Integer>> hashMap2 = new HashMap<Object, Map<String, Integer>>(0);
      hashMap2.put(hashMap1, hashMap0);
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>(hashMap2);
      Map<Map<String, Integer>, Object> map0 = doubleKeyMap0.newMap();
      Map<String, Integer> map1 = doubleKeyMap1.remove((Object) map0);
      assertEquals(0, map1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<Object, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<Object, String>>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Map<String, Integer>, String> hashMap1 = new HashMap<Map<String, Integer>, String>();
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>(hashMap1);
      doubleKeyMap0.put((Object) hashMap0, "'.]", hashMap2);
      DoubleKeyMap<HashMap<String, Integer>, String, Integer> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, Integer>, String, Integer>();
      Map<Integer, Object> map0 = doubleKeyMap1.newMap();
      HashMap<Object, String> hashMap3 = doubleKeyMap0.put((Object) map0, "'.]", (HashMap<Object, String>) null);
      assertSame(hashMap3, hashMap2);
      assertNotNull(hashMap3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Object, Map<Object, Map<String, Integer>>> hashMap0 = new HashMap<Object, Map<Object, Map<String, Integer>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<String, Integer>, HashMap<String, Integer>, Map<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<Map<String, Integer>, HashMap<String, Integer>, Map<String, Integer>>();
      Map<Object, Map<String, Integer>> map0 = doubleKeyMap0.newMap();
      hashMap0.put(class0, map0);
      DoubleKeyMap<Object, Object, Map<String, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Map<String, Integer>>(hashMap0, class0);
      Map<Object, Map<String, Integer>> map1 = doubleKeyMap1.get((Object) class0);
      assertTrue(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Object, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<Object, String>>((Map<Object, Map<String, HashMap<Object, String>>>) null);
      HashMap<Object, String> hashMap0 = doubleKeyMap0.remove((Object) "'.]", (String) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(1525);
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.remove(integer0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<Object, String>>(class0);
      HashMap<Object, String> hashMap0 = doubleKeyMap0.remove((Object) null, "iaex");
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Map<Object, Map<String, HashMap<Object, String>>>, Map<String, Integer>>, String, String> doubleKeyMap0 = new DoubleKeyMap<Map<Map<Object, Map<String, HashMap<Object, String>>>, Map<String, Integer>>, String, String>();
      Map<Map<Object, Map<String, HashMap<Object, String>>>, Map<String, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Map<Object, Map<String, HashMap<Object, String>>>, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Map<Object, Map<String, HashMap<Object, String>>>, String, Integer>(map0);
      Map<Object, Map<String, HashMap<Object, String>>> map1 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, String, HashMap<Object, String>> doubleKeyMap2 = new DoubleKeyMap<Object, String, HashMap<Object, String>>(map1, class0);
      HashMap<Object, String> hashMap0 = doubleKeyMap2.remove((Object) doubleKeyMap1, "YUaBS|G(fij4(@");
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Map<String, Integer>, Integer, Map<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<Map<String, Integer>, Integer, Map<String, Integer>>();
      Map<Integer, Map<Map<Object, Object>, Map<String, Integer>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, Map<Object, Object>, Map<String, Integer>> doubleKeyMap1 = new DoubleKeyMap<Integer, Map<Object, Object>, Map<String, Integer>>(map0);
      Map<Map<Object, Object>, Map<String, Integer>> map1 = doubleKeyMap1.remove((Integer) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Map<Map<Integer, Integer>, String>> hashMap0 = new HashMap<Integer, Map<Map<Integer, Integer>, String>>();
      DoubleKeyMap<Integer, Map<Integer, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Integer, Integer>, String>(hashMap0);
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>();
      Map<Object, String> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(hashMap0);
      HashMap<Object, Map<Map<String, Integer>, Object>> hashMap1 = new HashMap<Object, Map<Map<String, Integer>, Object>>();
      DoubleKeyMap<Object, Map<String, Integer>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Map<String, Integer>, Object>(hashMap1);
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap1.put((Object) doubleKeyMap0, (Map<String, Integer>) hashMap2, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Object, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<Object, String>>();
      Integer integer0 = new Integer(3574);
      HashMap<Map<String, Integer>, String> hashMap0 = new HashMap<Map<String, Integer>, String>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>(hashMap0);
      HashMap<Object, String> hashMap2 = doubleKeyMap0.put((Object) integer0, (String) null, hashMap1);
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Map<Object, Object>, Map<Object, Integer>> hashMap0 = new HashMap<Map<Object, Object>, Map<Object, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Object, Integer>(hashMap0, class0);
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>();
      Map<Object, Map<Integer, String>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap2 = new DoubleKeyMap<Object, Integer, String>(map0, class0);
      String string0 = doubleKeyMap2.get((Object) doubleKeyMap0, (Integer) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Map<Object, Object>, Map<Object, Integer>> hashMap0 = new HashMap<Map<Object, Object>, Map<Object, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Object, Integer>(hashMap0, class0);
      HashMap<Object, Map<Object, String>> hashMap1 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(hashMap1);
      String string0 = doubleKeyMap1.get((Object) hashMap0, (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>();
      Map<Object, Integer> map0 = doubleKeyMap0.get((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Object, String, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<String, String>>();
      Object object0 = new Object();
      Map<String, HashMap<String, String>> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, Map<HashMap<String, Object>, Map<String, Integer>>> hashMap0 = new HashMap<Integer, Map<HashMap<String, Object>, Map<String, Integer>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, HashMap<String, Object>, Map<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<String, Object>, Map<String, Integer>>(hashMap0, class0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Integer) null, hashMap1, (Map<String, Integer>) hashMap2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>((Map<Object, Map<Object, Object>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Integer>, String, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, String, Integer>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<Object, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<Object, String>>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Map<String, Integer>, String> hashMap1 = new HashMap<Map<String, Integer>, String>();
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>(hashMap1);
      doubleKeyMap0.put((Object) hashMap0, "'.]", hashMap2);
      HashMap<Object, String> hashMap3 = doubleKeyMap0.remove((Object) hashMap0, "wrong proto type map ");
      assertNull(hashMap3);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Map<Object, Object>, Map<Object, Integer>> hashMap0 = new HashMap<Map<Object, Object>, Map<Object, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Object, Integer>(hashMap0, class0);
      DoubleKeyMap<Map<String, Integer>, Integer, Map<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<Map<String, Integer>, Integer, Map<Object, Object>>();
      Map<Object, Object> map0 = doubleKeyMap1.newMap();
      Object object0 = new Object();
      Integer integer0 = new Integer((-1));
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      hashMap0.put(map0, hashMap1);
      Integer integer1 = doubleKeyMap0.put(map0, object0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<String, HashMap<String, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, String>, Integer>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Integer integer0 = new Integer(1);
      doubleKeyMap0.put((String) null, hashMap0, integer0);
      Integer integer1 = doubleKeyMap0.get((String) null, hashMap0);
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleKeyMap<Object, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<Object, String>>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      doubleKeyMap0.put((Object) hashMap1, "'.]", hashMap1);
      HashMap<Object, String> hashMap2 = doubleKeyMap0.remove((Object) hashMap0, "'.]");
      assertSame(hashMap2, hashMap1);
      assertNotNull(hashMap2);
  }
}
