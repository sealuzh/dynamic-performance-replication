/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:41:29 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = byteString0.EMPTY.toAsciiUppercase();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString2 = ByteString.encodeString("", charset0);
      byteString2.internalArray();
      byteString0.hex();
      byteString1.startsWith(byteString0);
      byteString0.base64Url();
      Pipe pipe0 = new Pipe(477L);
      Buffer buffer1 = pipe0.buffer;
      // Undeclared exception!
      try { 
        HashingSource.hmacSha1(buffer1, byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      boolean boolean0 = byteString0.equals(")");
      boolean boolean1 = byteString0.rangeEquals(31, byteString1, (int) (byte)0, 112);
      assertTrue(boolean1 == boolean0);
      assertSame(byteString1, byteString0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      byteString1.EMPTY.base64();
      String string0 = ")I l";
      byteString0.EMPTY.hashCode();
      ByteString.decodeBase64(")I l");
      // Undeclared exception!
      try { 
        byteString1.EMPTY.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteString[] byteStringArray0 = new ByteString[1];
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString1.toAsciiUppercase();
      byteString1.EMPTY.hashCode = (int) (byte)0;
      byteString2.rangeEquals((int) (byte)0, byteArray0, 65533, (int) (byte)0);
      // Undeclared exception!
      try { 
        byteString1.substring((int) (byte)0, 3267);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(8)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)81;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteString1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)122;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)23;
      byteArray0[7] = (byte) (-81);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      byteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)73;
      byteArray0[5] = (byte) (-10);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      ByteString byteString2 = byteString0.md5();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteString byteString3 = byteString2.toAsciiLowercase();
      int int1 = byteString0.indexOf(byteString3);
      assertSame(byteString0, byteString1);
      assertSame(byteString3, byteString2);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      String string0 = byteString0.toString();
      assertEquals("[hex=000000]", string0);
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteString.encodeUtf8("Oef{Mh}O_X__]dt9b");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString.codePointIndexToCharIndex("Oef{Mh}O_X__]dt9b", (byte)0);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 84, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=84 byteCount=10
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("okio.Base64", true);
      byteString0.write(mockFileOutputStream0);
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)125;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      // Undeclared exception!
      try { 
        byteString1.substring((int) (byte) (-26));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)115;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      // Undeclared exception!
      try { 
        byteString1.substring((int) (byte) (-26));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)22;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      ByteString byteString2 = byteString1.substring(6);
      assertEquals(0, byteString2.size());
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      byteString0.base64();
      ByteString byteString1 = byteString0.md5();
      assertEquals(16, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString1.indexOf(byteString0, 48);
      // Undeclared exception!
      try { 
        HashingSink.sha512((Sink) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delegate == null
         //
         verifyException("okio.ForwardingSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)80;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 124);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(hashingSource0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      ByteString byteString1 = realBufferedSource0.readByteString((long) (byte)0);
      int int0 = byteString1.indexOf(byteString0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[18];
      byteArray1[1] = (byte)0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray1[2] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray1);
      // Undeclared exception!
      try { 
        byteString0.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.string(charset0);
      Inflater inflater0 = new Inflater();
      Inflater inflater1 = new Inflater();
      Object object0 = new Object();
      ByteString byteString1 = new ByteString(byteArray0);
      assertTrue(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.EMPTY.sha512();
      byteString0.lastIndexOf(byteArray0, (int) (byte)74);
      byteString0.size();
      ByteString byteString2 = byteString1.toAsciiLowercase();
      // Undeclared exception!
      try { 
        byteString2.write((Buffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("\\");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: \\
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("Oef{Mh}O_X__]dt9b");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      byteString0.endsWith(byteArray0);
      byteString0.base64Url();
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-8);
      byteArray0[5] = (byte) (-26);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      ByteString byteString2 = byteString0.md5();
      int int0 = byteString2.lastIndexOf(byteArray0, (-20));
      int int1 = byteString2.indexOf(byteArray0);
      assertTrue(int1 == int0);
      assertSame(byteString0, byteString1);
      
      ByteString byteString3 = ByteString.encodeUtf8("(/@N8sFvbVi-i^");
      assertEquals(15, byteString3.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = ByteString.decodeBase64("I l");
      Object object0 = new Object();
      byteString0.EMPTY.equals(object0);
      byteString0.toString();
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      ByteString byteString0 = ByteString.encodeString("f~;a`Efh3qn*g", charset0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)120;
      int int0 = byteString0.EMPTY.indexOf(byteArray0, 1093);
      assertEquals((-1), int0);
      
      ByteBuffer byteBuffer0 = charset0.encode("-Kf");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      charset0.decode(byteBuffer1);
      boolean boolean0 = byteString0.equals(charset0);
      assertFalse(boolean0);
      
      int int1 = ByteString.codePointIndexToCharIndex("f~;a`Efh3qn*g", 506);
      assertEquals(13, int1);
      
      byteString0.hashCode();
      int int2 = byteString0.hashCode();
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteString.decodeBase64("");
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSource.sha1(buffer0);
      byteString0.asByteBuffer();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      buffer0.select(options0);
      byteString0.base64();
      byteString1.toString();
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)37;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8 = null;
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString0.base64();
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("Oef{Mh}O_X__]dt9b");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = null;
      ByteString byteString1 = new ByteString((byte[]) null);
      byteString0.toAsciiUppercase();
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 38, 58);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)101;
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      Object object0 = new Object();
      byteString0.equals(object0);
      // Undeclared exception!
      try { 
        byteString0.substring(101, 101);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-8);
      byteArray0[5] = (byte) (-26);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      ByteString byteString2 = byteString0.md5();
      int int0 = byteString2.compareTo(byteString1);
      assertSame(byteString1, byteString0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("Oef{Mh}O_X__]dt9b");
      Charset.defaultCharset();
      ByteString byteString1 = byteString0.sha512();
      String string0 = "4vg:)yFO";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("4vg:)yFO");
      byteString0.write(mockFileOutputStream0);
      byteString0.equals("4vg:)yFO");
      byteString1.lastIndexOf(byteString0, 698);
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      byteString0.toAsciiLowercase();
      ByteString byteString1 = ByteString.decodeBase64("\u2026]");
      assertNull(byteString1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-119);
      byteArray0[7] = (byte) (-40);
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=113f95119bf199d9]", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ByteString.of(byteArray0, (int) (byte)0, (int) (byte)0);
      ByteString.decodeBase64("I l");
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("Oef{Mh}O_X__]dt9b");
      Charset.defaultCharset();
      byteString0.toString();
      byteString0.sha512();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)23;
      // Undeclared exception!
      try { 
        byteString0.getByte((byte)23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 23
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      ByteString byteString2 = byteString1.substring((int) (byte)0);
      byteString2.asByteBuffer();
      byteString0.equals(byteString2);
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray1 = new byte[3];
      byteArray1[1] = (byte)0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray1[2] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray1);
      ByteString byteString1 = new ByteString(byteArray1);
      ByteString byteString2 = byteString1.toAsciiUppercase();
      ByteString byteString3 = byteString1.substring((int) (byte)0);
      byteString0.equals(byteString1);
      byteString2.asByteBuffer();
      assertTrue(byteString2.equals((Object)byteString0));
      assertSame(byteString2, byteString3);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray1 = new byte[3];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray1[2] = (byte) (-1);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray1);
      ByteString byteString2 = byteString1.toAsciiUppercase();
      int int0 = byteString1.EMPTY.lastIndexOf(byteArray0);
      boolean boolean0 = byteString1.startsWith(byteArray0);
      assertTrue(boolean0);
      
      byteString2.EMPTY.hashCode();
      Buffer buffer0 = new Buffer();
      int int1 = byteString0.compareTo(byteString2);
      assertSame(byteString2, byteString1);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString1.toAsciiUppercase();
      ByteString byteString3 = byteString1.substring((int) (byte)0);
      boolean boolean0 = byteString3.equals(byteArray0);
      assertFalse(boolean0);
      
      int int0 = byteString3.compareTo(byteString1);
      assertEquals(0, int0);
      assertSame(byteString3, byteString2);
      
      ByteString byteString4 = ByteString.decodeHex("");
      ByteString byteString5 = byteString4.sha256();
      assertFalse(byteString5.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(88);
      // Undeclared exception!
      try { 
        ByteString.read(pipedInputStream0, (-6));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -6
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ByteString.decodeHex("");
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      try { 
        ByteString.read(pipedInputStream0, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = ByteString.encodeUtf8("Oef{Mh}O_X__]dt9b");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteString0.substring((int) (byte)0);
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 13);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      ByteString byteString1 = ByteString.read(bufferedInputStream0, (byte)0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(bufferedInputStream0, 13);
      byteString1.equals(pushbackInputStream1);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("Oef{Mh}O_X__]dt9b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: O
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString0 = ByteString.decodeHex("");
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertFalse(boolean0);
      
      int int0 = byteString0.size();
      int int1 = byteString0.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("Oef{Mh}O_X__]dt9b");
      byteString0.EMPTY.toString();
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-8);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      ByteString byteString2 = byteString1.md5();
      boolean boolean0 = byteString2.equals((Object) null);
      int int0 = byteString0.compareTo(byteString2);
      assertEquals((-1), int0);
      
      byteString2.asByteBuffer();
      boolean boolean1 = byteString0.endsWith(byteArray0);
      assertSame(byteString0, byteString1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        ByteString.decodeHex("|s~G>-bOl7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: |
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "eP-A~P";
      // Undeclared exception!
      try { 
        ByteString.decodeHex("eP-A~P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: P
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-78);
      byte byte0 = (byte) (-93);
      byteArray0[6] = (byte) (-93);
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.utf8();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        byteString1.startsWith((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-98);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toAsciiLowercase();
      ByteString byteString1 = byteString0.md5();
      ByteString.encodeUtf8("4-Ojx{>d8Y?^aF2");
      byteString0.endsWith(byteString1);
      byteString0.size();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-98);
      byteArray1[1] = (byte) (-98);
      byteArray1[2] = (byte) (-98);
      byteArray1[3] = (byte) (-98);
      byteArray1[4] = (byte) (-98);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray1, 14, 14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=5 offset=14 byteCount=14
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("Oef{Mh}O_X__]dt9b");
      Charset.defaultCharset();
      String string0 = "4vg:)yFO";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("4vg:)yFO");
      byteString0.write(mockFileOutputStream0);
      byteString0.equals("4vg:)yFO");
      byteString0.lastIndexOf(byteString0, 698);
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = ByteString.decodeHex("");
      ByteString byteString1 = new ByteString(byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1934);
      ByteString byteString2 = new ByteString(byteArray0);
      ByteString byteString3 = byteString1.toAsciiUppercase();
      ByteString byteString4 = byteString2.md5();
      Object object0 = new Object();
      boolean boolean0 = byteString1.equals(object0);
      assertFalse(boolean0);
      
      int int0 = byteString4.compareTo(byteString0);
      assertEquals(1, int0);
      assertTrue(byteString2.equals((Object)byteString3));
      
      byteString0.sha512();
      assertFalse(byteString0.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("Oef{Mh}O_X__]dt9b");
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)29;
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = new ByteString(byteArray0);
      ByteString byteString3 = byteString0.toAsciiUppercase();
      byteString0.substring((int) (byte)0);
      byteString3.equals(byteString0);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = null;
      try {
        realBufferedSink0 = new RealBufferedSink((Sink) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Charset.defaultCharset();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        ByteString.read(sequenceInputStream0, 1225);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeString("", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("Oef{Mh}O_X__]dt9b");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Oef{Mh}O_X__]dt9b");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString.decodeBase64("I l");
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ByteString.encodeUtf8("Oef{Mh}O_X__]dt9b");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.substring((int) (byte)0);
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 2500);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      try { 
        ByteString.read(pushbackInputStream0, 2500);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[6];
      String string0 = "8X";
      // Undeclared exception!
      try { 
        ByteString.decodeHex("8X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: X
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = ",0";
      // Undeclared exception!
      try { 
        ByteString.decodeHex(",0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: ,
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString1.substring((int) (byte)0);
      ByteString byteString3 = ByteString.decodeBase64("I l");
      ByteString.encodeUtf8("_r-F-]3OV#j#+lkL");
      ByteString byteString4 = byteString2.hmacSha512(byteString1);
      byteString4.hex();
      byteString1.hmacSha1(byteString4);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byteString0.indexOf(byteString4);
      byteString3.endsWith(byteArray0);
      byteString0.substring((int) (byte)0);
      byteString4.toByteArray();
      byteString4.startsWith(byteString3);
      byteString4.hmacSha1(byteString2);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("CMHvILM[Sskyy2]R1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: M
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString.decodeBase64("I l");
      ByteBuffer byteBuffer0 = null;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 2866, 3127);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString1.toAsciiUppercase();
      ByteString byteString3 = byteString1.substring((int) (byte)0);
      byteString1.EMPTY.hashCode = (int) (byte)0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteString2.rangeEquals(0, byteArray0, (int) (byte)0, (int) (byte)0);
      ByteString byteString4 = byteString2.substring((int) (byte)0, (int) (byte)0);
      byteString4.toByteArray();
      ByteBuffer byteBuffer0 = byteString2.asByteBuffer();
      ByteString.of(byteBuffer0);
      // Undeclared exception!
      try { 
        byteString3.substring(30);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }
}
