/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 14:39:33 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.lang.reflect.Member;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.Edge;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.Label;
import wheel.asm.MethodWriter;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1100));
      classWriter0.newLong(0L);
      Item item0 = classWriter0.newInteger((-2856));
      assertNotNull(item0);
      
      classWriter0.index = (-2856);
      String[] stringArray0 = new String[2];
      classWriter0.visitAnnotation("", false);
      stringArray0[0] = "";
      stringArray0[1] = "";
      classWriter0.visitMethod((-2856), "", "", "/vI`ewm7+GH", stringArray0);
      int int0 = classWriter0.newUTF8("W");
      assertEquals((-2854), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = (-1406);
      ClassWriter classWriter0 = new ClassWriter((-1406));
      String string0 = "wj(Kr~O6@*xS2*X[QL";
      classWriter0.addType("wj(Kr~O6@*xS2*X[QL");
      classWriter0.visitAnnotation("s6GWT`", true);
      classWriter0.toByteArray();
      String string1 = "P:I0j1QUq";
      FieldWriter fieldWriter0 = classWriter0.lastField;
      classWriter0.firstField = null;
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1, (-1406));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1406
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-162));
      classWriter0.addType("Deprecated");
      int int0 = Frame.BASE_VALUE;
      assertEquals(1048575, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitSource("Deprecated", "Deprecated");
      classWriter0.newNameType("Deprecated", "The strings must not be null");
      Item item0 = classWriter0.newDouble(0.0);
      classWriter0.addUninitializedType("Deprecated", 8);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Deprecated";
      Item[] itemArray0 = new Item[2];
      itemArray0[0] = item0;
      itemArray0[1] = item0;
      classWriter0.typeTable = itemArray0;
      stringArray0[1] = "The strings must not be null";
      stringArray0[2] = "Deprecated";
      stringArray0[3] = "The strings must not be null";
      stringArray0[4] = null;
      stringArray0[5] = "The strings must not be null";
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(0, "The strings must not be null", (String) null, "Deprecated", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3685));
      String string0 = "NzfdParX{^s]bVpV$sq";
      String string1 = null;
      classWriter0.visitSource("NzfdParX{^s]bVpV$sq", (String) null);
      classWriter0.index = 0;
      String string2 = "";
      classWriter0.newUTF8("");
      classWriter0.visitOuterClass("0qRxGwJ-AFq2Zbh,y5", "0qRxGwJ-AFq2Zbh,y5", "0qRxGwJ-AFq2Zbh,y5");
      String string3 = "x'X";
      boolean boolean0 = true;
      classWriter0.visitAnnotation("x'X", true);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("0qRxGwJ-AFq2Zbh,y5", true);
      classWriter0.newLong((-742L));
      classWriter0.newLong(4294967295L);
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(annotationVisitor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.AnnotationWriter@f
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(374);
      classWriter0.addType("~X8EFy}t%oXD]r_ X");
      classWriter0.newInteger(3661);
      Attribute attribute0 = new Attribute("The FileFilter must not be null");
      Attribute attribute1 = attribute0.next;
      // Undeclared exception!
      try { 
        classWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter((ClassReader) null, (-2202));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String string0 = "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII";
      classWriter0.visitInnerClass("", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "java/lang/Object", 0);
      classWriter0.newMethod("lk", "wPn(Z8", "", true);
      classWriter0.newFieldItem("=+G-{YnZ0kie", "lk", "=+G-{YnZ0kie");
      classWriter0.newConst("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
      classWriter0.newClass("value ");
      classWriter0.newDouble(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "=+G-{YnZ0kie";
      classWriter0.visit(10, 0, "The array of names must not be null", "", "C1DSvCJ2sgDDfIiE*o", stringArray0);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.addType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(36);
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, 36);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass((String) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(10);
      Float float0 = new Float((double) 2);
      Item item0 = classWriter0.newMethodItem("", "", "", false);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[2] = "yhzb\u0006MQhbK)VVs";
      stringArray0[3] = null;
      stringArray0[4] = "yhzb\u0006MQhbK)VVs";
      stringArray0[5] = "yhzb\u0006MQhbK)VVs";
      // Undeclared exception!
      try { 
        classWriter0.visit(0, 0, "yhzb\u0006MQhbK)VVs", "yhzb\u0006MQhbK)VVs", (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3928);
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem("", (String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-162));
      classWriter0.newField("", "", "");
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.newConst(classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-6234));
      classWriter0.newConst("");
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("", "org.apache.commons.io.IOCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2090));
      classWriter0.newClassItem("");
      String string0 = "EnclosingMethod";
      String string1 = "";
      classWriter0.newNameType("EnclosingMethod", "");
      classWriter0.newClassItem("EnclosingMethod");
      classWriter0.newInteger(Integer.MAX_VALUE);
      String string2 = "RuntimeInvisibleAnnotations";
      // Undeclared exception!
      try { 
        classWriter0.newField("B+YZPH?^Kx6[", (String) null, "RuntimeInvisibleAnnotations");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2273));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "%lR";
      stringArray0[1] = "%lR";
      stringArray0[2] = "%lR";
      stringArray0[3] = "%lR";
      stringArray0[4] = "%lR";
      stringArray0[5] = "%lR";
      classWriter0.visit(0, 0, "%lR", "%lR", "%lR", stringArray0);
      classWriter0.newUTF8("");
      classWriter0.visitInnerClass("SourceDebugExtension", "SourceDebugExtension", "SourceDebugExtension", 3);
      classWriter0.visitInnerClass("SourceDebugExtension", "/G]{;J&Xt_D\"5", "SourceDebugExtension", 0);
      classWriter0.visitEnd();
      classWriter0.newMethodItem("wheel.asm.Type", "/G]{;J&Xt_D\"5", "%lR", false);
      classWriter0.visitOuterClass("=*mgT;u^*]VY`0v", "u#", "/e@ ");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-162));
      classWriter0.threshold = (-162);
      classWriter0.invalidFrames = false;
      int int0 = classWriter0.newUTF8("");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(183);
      classWriter0.index = (-1113);
      classWriter0.threshold = (-1113);
      Item[] itemArray0 = new Item[2];
      Item item0 = classWriter0.key3;
      itemArray0[0] = item0;
      Item item1 = classWriter0.newFloat(265.46796F);
      itemArray0[1] = item1;
      classWriter0.typeTable = itemArray0;
      classWriter0.typeTable = itemArray0;
      classWriter0.newMethod("Deprecated", "", "", false);
      classWriter0.addType("5^z");
      classWriter0.addUninitializedType("5^z", (-768));
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@4c53e407
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.index = 0;
      Item item0 = classWriter0.newLong(0);
      classWriter0.visit(0, (-2821), "", "", "", (String[]) null);
      classWriter0.newField("", "", " k7");
      Item item1 = classWriter0.newMethodItem("", " k7", "", false);
      classWriter0.visitAnnotation("", false);
      Item item2 = classWriter0.newInteger(1117);
      classWriter0.newLong(1L);
      classWriter0.newFloat(1642.5747F);
      Item[] itemArray0 = new Item[5];
      itemArray0[0] = item0;
      itemArray0[1] = item1;
      itemArray0[2] = item2;
      itemArray0[3] = item0;
      itemArray0[4] = item2;
      classWriter0.typeTable = itemArray0;
      classWriter0.newField("RuntimeInvisibleAnnotations", " k7", "");
      Item item3 = classWriter0.newFieldItem("", "RuntimeInvisibleAnnotations", "");
      assertNotSame(item3, item0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.addType("Signature");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "The list of prefixes must not be null";
      stringArray0[2] = "";
      classWriter0.thisName = "";
      stringArray0[3] = "RuntimeInvisibleAnnotations";
      stringArray0[4] = "int";
      stringArray0[5] = "The list of prefixes must not be null";
      stringArray0[6] = "java/lang/Object";
      stringArray0[7] = "";
      stringArray0[8] = "";
      classWriter0.visit(0, (-1108), "java/lang/Object", "", "RuntimeInvisibleAnnotations", stringArray0);
      int int0 = classWriter0.addType("Signature");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-162));
      classWriter0.addUninitializedType("|)", (-2967));
      String[] stringArray0 = new String[0];
      classWriter0.visit((-2967), 29, "#Z#gUkrd,cEez", "Bo#kCv", "|)", stringArray0);
      classWriter0.toByteArray();
      String string0 = null;
      // Undeclared exception!
      try { 
        classWriter0.addType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Float float0 = new Float((double) 3948);
      ClassWriter classWriter0 = new ClassWriter(3948);
      Boolean boolean0 = Boolean.valueOf("&jJyS=(-~N{");
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(90);
      Boolean boolean0 = Boolean.valueOf(false);
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, 24);
      Boolean.compare(true, true);
      classWriter0.newConst(boolean0);
      Float float0 = new Float((double) 90);
      assertEquals(90.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-41));
      classWriter0.newConst("");
      classWriter0.newInteger(2647);
      Float float0 = new Float(185.0);
      int int0 = classWriter0.newConst("");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-162));
      classWriter0.newUTF8("yx<*[x%/Q0L\"=O");
      classWriter0.visitSource("yx<*[x%/Q0L\"=O", ",ck3:?lG5AE}J");
      classWriter0.visitOuterClass("yx<*[x%/Q0L\"=O", "", (String) null);
      classWriter0.visitInnerClass(",ck3:?lG5AE}J", ">!}`6ip*+g", "+RU~YY{", 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3948);
      classWriter0.newFieldItem("RuntimeInvisibleAnnotations", "w4nJu:", "RuntimeInvisibleAnnotations");
      classWriter0.newDouble(3948);
      classWriter0.newDouble(3948);
      Attribute attribute0 = new Attribute("w4nJu:");
      Attribute attribute1 = attribute0.next;
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("_P");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(10);
      Float float0 = new Float((double) 2);
      classWriter0.newConst(float0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "~]-8\"|oE:V'_\"X";
      stringArray0[1] = "~]-8\"|oE:V'_\"X";
      stringArray0[2] = "~]-8\"|oE:V'_\"X";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "Sensitive";
      stringArray0[6] = "~]-8\"|oE:V'_\"X";
      stringArray0[7] = "~]-8\"|oE:V'_\"X";
      // Undeclared exception!
      try { 
        classWriter0.visit(3192, 10, "~]-8\"|oE:V'_\"X", (String) null, (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(36);
      Type type0 = Type.getType("StackMap");
      int int0 = classWriter0.newConst(type0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-863));
      classWriter0.newFloat(0.0F);
      classWriter0.visitSource((String) null, "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(90);
      Float float0 = new Float(0.0);
      Float.isFinite(900.23F);
      ClassWriter classWriter1 = new ClassWriter(2);
      classWriter1.newConst(float0);
      classWriter1.newDouble(0.75);
      String[] stringArray0 = new String[4];
      classWriter0.visitOuterClass("", (String) null, "ys-BQK");
      stringArray0[0] = "wheel.asm.ClassWriter";
      stringArray0[1] = "_ H_c";
      stringArray0[2] = "wheel.asm.ClassWriter";
      stringArray0[3] = "_ H_c";
      classWriter1.visit(473, 559, "_ H_c", "wheel.asm.ClassWriter", (String) null, stringArray0);
      assertNotSame(classWriter1, classWriter0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5);
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.CanWriteFileFilter", "org.apache.commons.io.filefilter.CanWriteFileFilter");
      assertEquals("org.apache.commons.io.filefilter.CanWriteFileFilter", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(10);
      Float float0 = new Float((double) 2);
      classWriter0.newConst(float0);
      classWriter0.newField("The FilenameFilter must not be null", "q.6U;')n/l>=", "U:6M+z");
      FieldVisitor fieldVisitor0 = classWriter0.visitField(7, "838q{)YE", "q.6U;')n/l>=", "q.6U;')n/l>=", float0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1497));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      classWriter0.toByteArray();
      int int0 = classWriter0.addUninitializedType("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", (-1497));
      String string0 = classWriter0.getCommonSuperClass("wheel.asm.ClassWriter", "java/lang/String");
      assertEquals("java/lang/Object", string0);
      
      int int1 = classWriter0.newUTF8("");
      assertTrue(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3948);
      int int0 = Type.BOOLEAN;
      classWriter0.getCommonSuperClass("java/lang/String", "wheel.asm.ClassWriter");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(256);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".eesfH&CCmm.");
      Item item0 = classWriter0.newInteger((-2021));
      Item item1 = classWriter0.newClassItem("");
      assertNotNull(item1);
      
      Item item2 = classWriter0.newInteger(256);
      byte[] byteArray0 = ClassWriter.TYPE;
      Item item3 = classWriter0.newInteger((-2021));
      assertSame(item3, item0);
      assertNotSame(item3, item2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-162));
      classWriter0.newLong(1710L);
      Float float0 = new Float((-342.39F));
      classWriter0.newLong(1710L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)9;
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0, (-857), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -849
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3948);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "~b1<a8C=o.~x";
      stringArray0[1] = "~b1<a8C=o.~x";
      stringArray0[2] = "Deprecated";
      classWriter0.visit(3948, (-1894), "Deprecated", "Deprecated", "~b1<a8C=o.~x", stringArray0);
      classWriter0.index = 1737;
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      Item item0 = classWriter0.newFieldItem("", "wheel.asm.Frame", "");
      assertNotNull(item0);
      
      classWriter0.addUninitializedType("", 7);
      int int0 = classWriter0.addUninitializedType("", 7);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(6);
      classWriter0.firstMethod = null;
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      classWriter0.lastMethod = null;
      Item item0 = classWriter0.newFieldItem("*,M YjUg0?DD'T- q", "*,M YjUg0?DD'T- q", "*,M YjUg0?DD'T- q");
      Item item1 = classWriter0.newFieldItem("*,M YjUg0?DD'T- q", "*,M YjUg0?DD'T- q", "*,M YjUg0?DD'T- q");
      assertSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(33);
      Item item0 = classWriter0.newMethodItem("wheel.sm.MthodWriter", "wheel.sm.MthodWriter", "wheel.sm.MthodWriter", false);
      assertNotNull(item0);
      
      int int0 = classWriter0.newMethod("wheel.sm.MthodWriter", "wheel.sm.MthodWriter", "wheel.sm.MthodWriter", false);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "java/lang/String";
      ClassWriter classWriter0 = new ClassWriter(1653);
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "wheel.asm.ClassWriter");
      classWriter0.newMethod("wheel.asm.ClassWriter", "", "java/lang/String", false);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(890, Integer.MAX_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }
}
