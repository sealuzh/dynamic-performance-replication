/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:03:20 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(hashMap0);
      doubleKeyMap0.remove((Object) hashMap0, (Object) hashMap0);
      doubleKeyMap0.remove((Object) hashMap0);
      doubleKeyMap0.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, (Map<Object, String>) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put("\"]<L`Z+$Yb|fAy", "\"]<L`Z+$Yb|fAy", (Object) integer0);
      Object object0 = new Object();
      doubleKeyMap0.remove("\"]<L`Z+$Yb|fAy", "");
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = null;
      try {
        doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>();
      doubleKeyMap0.remove("My{$D5h(^%E?H", "");
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put("\"]<L`Z+$Yb|fAy", "wrong proto type map ", (Object) integer0);
      doubleKeyMap0.remove("+", "$rj,0FFtxYC;)@5\"n");
      doubleKeyMap0.put("\"]<L`Z+$Yb|fAy", "My{$D5h(^%E?H", (Object) "");
      doubleKeyMap0.remove("\"]<L`Z+$Yb|fAy", "");
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = null;
      try {
        doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>();
      Integer integer0 = new Integer(0);
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(hashMap0);
      Map<Object, String> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.put("$rj,0FFtxYC;)@5\"n", "", (Object) map0);
      doubleKeyMap0.remove("", "");
      doubleKeyMap0.remove("$rj,0FFtxYC;)@5\"n", "");
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap2 = null;
      try {
        doubleKeyMap2 = new DoubleKeyMap<Object, String, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      doubleKeyMap0.put((Object) "", (Object) "", "XJH5A}W/NT+Q");
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>();
      doubleKeyMap1.remove("0j@a9@QTu1GJx9KutPj");
      DoubleKeyMap<String, String, String> doubleKeyMap2 = new DoubleKeyMap<String, String, String>();
      Map<Integer, Map<Object, Object>> map0 = doubleKeyMap2.newMap();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap3 = new DoubleKeyMap<Integer, Object, Object>(map0);
      Integer integer0 = new Integer(249);
      doubleKeyMap3.remove(integer0);
      Integer integer1 = new Integer(249);
      doubleKeyMap3.remove(integer1);
      DoubleKeyMap<Integer, Object, String> doubleKeyMap4 = new DoubleKeyMap<Integer, Object, String>();
      doubleKeyMap4.get(integer0, (Object) "");
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap5 = new DoubleKeyMap<String, Object, Object>(class0);
      doubleKeyMap5.get("", (Object) doubleKeyMap4);
      HashMap<String, Map<Object, String>> hashMap0 = new HashMap<String, Map<Object, String>>();
      DoubleKeyMap<String, Object, String> doubleKeyMap6 = new DoubleKeyMap<String, Object, String>(hashMap0);
      Object object0 = new Object();
      doubleKeyMap6.put((String) null, object0, "0j@a9@QTu1GJx9KutPj");
      doubleKeyMap6.remove("Q_B0ZV(mQ<&%!", (Object) map0);
      doubleKeyMap2.get("=nwx/(h", "~{%2D");
      DoubleKeyMap<String, String, Object> doubleKeyMap7 = new DoubleKeyMap<String, String, Object>();
      doubleKeyMap7.get((String) null, "0j@a9@QTu1GJx9KutPj");
      Object object1 = new Object();
      String string0 = doubleKeyMap0.get((Object) "", (Object) null);
      assertNull(string0);
  }
}
