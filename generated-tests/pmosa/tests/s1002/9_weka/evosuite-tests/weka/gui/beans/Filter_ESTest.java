/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 19:25:38 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Checkbox;
import java.awt.Component;
import java.awt.Font;
import java.awt.ImageCapabilities;
import java.awt.Point;
import java.awt.event.ActionListener;
import java.awt.event.ContainerListener;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.beans.EventSetDescriptor;
import java.beans.IntrospectionException;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.text.CharacterIterator;
import java.time.chrono.JapaneseDate;
import java.time.chrono.JapaneseEra;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JRootPane;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.TransferHandler;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.plaf.synth.SynthTabbedPaneUI;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import weka.associations.Apriori;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.lazy.IBk;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ListOptions;
import weka.core.MinkowskiDistance;
import weka.core.OptionHandlerJavadoc;
import weka.core.SparseInstance;
import weka.core.converters.JSONLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.filters.AllFilter;
import weka.filters.supervised.attribute.ClassOrder;
import weka.filters.supervised.attribute.Discretize;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.SysErrLog;
import weka.gui.beans.Appender;
import weka.gui.beans.Associator;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Classifier;
import weka.gui.beans.Clusterer;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CostBenefitAnalysis;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.ImageSaver;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceStreamToBatchMaker;
import weka.gui.beans.Loader;
import weka.gui.beans.SerializedModelSaver;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetMaker;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetMaker;
import weka.gui.explorer.ClassifierErrorsPlotInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      Classifier classifier0 = new Classifier();
      filter0.removeTestSetListener(classifier0);
      filter0.stop();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      substringReplacer0.repaint(2L);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener2 = AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener1);
      HierarchyListener hierarchyListener3 = AWTEventMulticaster.add(hierarchyListener2, hierarchyListener2);
      substringReplacer0.grabFocus();
      substringReplacer0.addHierarchyListener(hierarchyListener3);
      BeanVisual beanVisual0 = substringReplacer0.getVisual();
      filter0.setVisual(beanVisual0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.repaint();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.setCustomName("weka/gui/beans/icons/");
      filter0.setCustomName("weka/gui/beans/icons/");
      MouseEvent mouseEvent0 = new MouseEvent(substringLabeler0, 3, 2, (-4656), 2, 0, 1, true);
      filter0.getToolTipLocation(mouseEvent0);
      filter0.connectionAllowed("weka/gui/beans/icons/");
      filter0.getVisual();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(substringLabeler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.SubstringLabeler : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      Associator associator0 = new Associator();
      associator0.getComponents();
      filter0.addDataSourceListener(associator0);
      Class<Filter> class0 = Filter.class;
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      filter0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      EventSetDescriptor eventSetDescriptor0 = null;
      try {
        eventSetDescriptor0 = new EventSetDescriptor(class0, "", class0, stringArray0, "gwUT\"-", "", (String) null);
        fail("Expecting exception: IntrospectionException");
      
      } catch(Throwable e) {
         //
         // Method not found:  on class weka.gui.beans.Filter
         //
         verifyException("java.beans.EventSetDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      Logger logger0 = classValuePicker0.m_logger;
      filter0.setLog((Logger) null);
      filter0.acceptDataSet((DataSetEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      KeyStroke.getKeyStroke(" is not an incremental filter");
      KeyStroke.getKeyStroke(" is not an incremental filter");
      filter0.getConditionForKeyStroke((KeyStroke) null);
      filter0.invalidate();
      filter0.connectionNotification("&3XijG8qA80", "&3XijG8qA80");
      filter0.revalidate();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("-mRp_,Iz=T5VjCbS", "-mRp_,Iz=T5VjCbS");
      filter0.stop();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      menuSelectionManager0.isComponentPartOfCurrentMenu(filter0);
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(filter0, 0, 504L, 0, 0, 0, 46, true, (MenuElement[]) null, menuSelectionManager0);
      Point point0 = menuDragMouseEvent0.getLocationOnScreen();
      point0.translate(0, 0);
      filter0.setLocation(point0);
      filter0.useDefaultVisual();
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      BeanVisual beanVisual0 = costBenefitAnalysis0.getVisual();
      beanVisual0.requestFocus();
      beanVisual0.add((Component) filter0);
      filter0.setVisual(beanVisual0);
      FlowByExpression.ExpressionClause.ExpressionType flowByExpression_ExpressionClause_ExpressionType0 = FlowByExpression.ExpressionClause.ExpressionType.NOTEQUAL;
      filter0.connectionNotification("lYgXy?-Xd", flowByExpression_ExpressionClause_ExpressionType0);
      assertEquals("CostBenefitAnalysis", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      instanceEvent0.setStatus((-1498));
      filter0.notifyInstanceListeners(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      imageCapabilities0.clone();
      imageCapabilities0.clone();
      filter0.createVolatileImage(30, 30, imageCapabilities0);
      filter0.getWrappedAlgorithm();
      weka.filters.Filter filter1 = filter0.getFilter();
      JMenu jMenu0 = new JMenu("<x=|`");
      jMenu0.requestFocus();
      JPopupMenu jPopupMenu0 = jMenu0.getPopupMenu();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      jPopupMenu0.addContainerListener((ContainerListener) null);
      filter0.setComponentPopupMenu(jPopupMenu0);
      Appender appender0 = new Appender();
      DefaultEditorKit.CutAction defaultEditorKit_CutAction0 = new DefaultEditorKit.CutAction();
      Character character0 = new Character('2');
      Character.isBmpCodePoint(30);
      Character.getName(30);
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(character0, 0);
      filter0.firePropertyChange("", '2', '(');
      KeyStroke.getKeyStroke(25, 0);
      appender0.registerKeyboardAction((ActionListener) defaultEditorKit_CutAction0, ")Hu0&(@P2AJ:Zmh|#>s", keyStroke0, 0);
      filter0.addInstanceListener(appender0);
      boolean boolean0 = filter0.eventGeneratable("S`XQfNG");
      assertFalse(boolean0);
      
      filter0.setFilter(filter1);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getWrappedAlgorithm();
      filter0.invalidate();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      instanceStreamToBatchMaker0.firePropertyChange("j%?F08oY\"O+a X>P[1m", 0, 0);
      instanceStreamToBatchMaker0.getHierarchyListeners();
      filter0.removeInstanceListener(instanceStreamToBatchMaker0);
      // Undeclared exception!
      try { 
        filter0.acceptTestSet((TestSetEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      Clusterer clusterer0 = new Clusterer();
      DataSetEvent dataSetEvent0 = new DataSetEvent(clusterer0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      ListOptions listOptions0 = new ListOptions();
      ListOptions.main((String[]) null);
      ListOptions.main((String[]) null);
      listOptions0.getRevision();
      filter0.getInputMethodListeners();
      listOptions0.getOptions();
      filter0.createImage((-100), (-2269));
      DataSetEvent dataSetEvent0 = new DataSetEvent(listOptions0, (Instances) null);
      listOptions0.generate();
      filter0.setAlignmentY(0.0F);
      filter0.acceptDataSet(dataSetEvent0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      filter0.globalInfo();
      filter0.getWrappedAlgorithm();
      filter0.acceptInstance((InstanceEvent) null);
      filter0.acceptInstance((InstanceEvent) null);
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      char char0 = '+';
      filter0.firePropertyChange("jh^^[tzvZ7S{lifS", '+', '+');
      // Undeclared exception!
      try { 
        filter0.performRequest("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OL");
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.performRequest("]UMYMMc;Txyh'pNOkEc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ]UMYMMc;Txyh'pNOkEc not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getMinimumSize();
      Font font0 = new Font("Center", 150, 150);
      filter0.setName("Number of all possible conditions = ");
      filter0.getDebugGraphicsOptions();
      AffineTransform affineTransform0 = new AffineTransform();
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, false);
      font0.getLineMetrics((CharacterIterator) null, 67, 150, fontRenderContext0);
      Font font1 = font0.deriveFont(0.0F);
      font1.getNumGlyphs();
      filter0.getFontMetrics(font1);
      filter0.removeConfigurationListener((ConfigurationListener) null);
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.removeTrainingSetListener(classAssigner0);
      filter0.isBusy();
      filter0.connectionNotification("*(", affineTransform0);
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      BeanVisual beanVisual0 = costBenefitAnalysis0.getVisual();
      filter0.setVisual(beanVisual0);
      filter0.getFilter();
      assertEquals("CostBenefitAnalysis", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getUIClassID();
      SysErrLog sysErrLog0 = new SysErrLog();
      filter0.getMaximumSize();
      sysErrLog0.logMessage("lV0YcLUd=-ET47ul$s");
      filter0.getInputContext();
      filter0.setLog(sysErrLog0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      Sorter sorter0 = new Sorter();
      filter0.enableInputMethods(true);
      filter0.addTrainingSetListener(sorter0);
      filter0.removeDataSourceListener(sorter0);
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.addTestSetListener(crossValidationFoldMaker0);
      filter0.setCustomName("I\u0003St~_,rm{");
      filter0.stop();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      Environment environment0 = substringReplacer0.m_env;
      environment0.getRevision();
      flowByExpression0.m_env = environment0;
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      IBk iBk0 = new IBk();
      JSONLoader jSONLoader0 = new JSONLoader();
      filter0.acceptInstance(instanceEvent0);
      try { 
        jSONLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.JSONLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      Filter filter1 = new Filter();
      Discretize discretize0 = new Discretize();
      filter1.setFilter(discretize0);
      assertEquals("Discretize", filter1.getCustomName());
      
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.eventGeneratable("2hJto {PCQCP");
      ClassOrder classOrder0 = new ClassOrder();
      filter0.setFilter(classOrder0);
      assertEquals("ClassOrder", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      ImageSaver imageSaver0 = new ImageSaver();
      BeanVisual beanVisual0 = imageSaver0.m_visual;
      filter0.setVisual(beanVisual0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      TestSetMaker testSetMaker0 = new TestSetMaker();
      TestSetEvent testSetEvent0 = new TestSetEvent(testSetMaker0, (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("ImageSaver", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "]l_l^");
      Filter filter0 = new Filter();
      filter0.enumerateRequests();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.meanOrMode(0);
      Instances instances1 = new Instances(instances0, 0, 0);
      DataSetEvent dataSetEvent0 = new DataSetEvent(optionHandlerJavadoc0, instances1);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      trainTestSplitMaker0.getStructure("");
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, (Instances) null);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.connectionAllowed("-tabs");
      assertTrue(boolean0);
      
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, (Instances) null, (-73), (-73), (-73), 30);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "<ZO'{W";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<ZO'{W");
      Filter filter0 = new Filter();
      Object object0 = filter0.getWrappedAlgorithm();
      filter0.setWrappedAlgorithm(object0);
      filter0.globalInfo();
      Appender appender0 = new Appender();
      filter0.addTestSetListener(appender0);
      filter0.repaint();
      filter0.stop();
      filter0.addTestSetListener(appender0);
      filter0.disconnectionNotification("<ZO'{W", object0);
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm("<ZO'{W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class java.lang.String : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      BeanVisual beanVisual0 = classValuePicker0.m_visual;
      filter0.setVisual(beanVisual0);
      filter0.getWrappedAlgorithm();
      Add add0 = new Add();
      weka.filters.Filter filter1 = weka.filters.Filter.makeCopy(add0);
      filter0.setFilter(filter1);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      TestSetEvent testSetEvent0 = new TestSetEvent(substringLabeler0, instances0, 0, 0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      TestSetEvent testSetEvent1 = new TestSetEvent(mockThaiBuddhistDate0, instances0, (-25), 0);
      filter0.acceptTestSet(testSetEvent1);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, instances0, 10000, 10000);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.eventGeneratable("configuration");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      filter0.connectionNotification("instance", sorter0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("U&ny7j8cF!fKqC;lW", "U&ny7j8cF!fKqC;lW");
      filter0.hasFocus();
      filter0.eventGeneratable("U&ny7j8cF!fKqC;lW");
      filter0.getFilter();
      filter0.isBusy();
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      filter0.connectionNotification("just", trainingSetMaker0);
      boolean boolean0 = filter0.eventGeneratable("just");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.acceptDataSet((DataSetEvent) null);
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      Loader loader0 = new Loader();
      filter0.connectionNotification("XjTO;", loader0);
      boolean boolean0 = filter0.eventGeneratable("XjTO;");
      assertTrue(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      Filter filter1 = new Filter();
      AllFilter allFilter0 = new AllFilter();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      classValuePicker0.getConnectedFormat();
      DataSetEvent dataSetEvent0 = new DataSetEvent(allFilter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      MenuElement[] menuElementArray0 = new MenuElement[8];
      JRootPane jRootPane0 = new JRootPane();
      jRootPane0.getJMenuBar();
      menuElementArray0[0] = (MenuElement) null;
      JMenu jMenu0 = new JMenu("CjmTXON");
      menuElementArray0[1] = (MenuElement) jMenu0;
      JMenu jMenu1 = new JMenu("CjmTXON");
      menuElementArray0[2] = (MenuElement) jMenu1;
      DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction0 = new DefaultEditorKit.InsertTabAction();
      JMenu jMenu2 = new JMenu(defaultEditorKit_InsertTabAction0);
      menuElementArray0[3] = (MenuElement) jMenu2;
      JMenuItem jMenuItem0 = jMenu2.add((JMenuItem) jMenu1);
      menuElementArray0[4] = (MenuElement) jMenuItem0;
      Action action0 = TransferHandler.getPasteAction();
      JMenuItem jMenuItem1 = new JMenuItem(action0);
      menuElementArray0[5] = (MenuElement) jMenuItem1;
      ImageIcon imageIcon0 = new ImageIcon("_vvD[%", "NULL\n");
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem(",>*i?ITD6C?*", imageIcon0);
      menuElementArray0[6] = (MenuElement) jCheckBoxMenuItem0;
      filter0.getComponentPopupMenu();
      menuElementArray0[7] = (MenuElement) null;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(filter0, (-3047), (-5055L), (-3047), (-2927), (-1), (-2927), (-3047), (-1), false, menuElementArray0, menuSelectionManager0);
      filter0.getToolTipText((MouseEvent) menuDragMouseEvent0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.firePropertyChange("weka.core.stemmers.SnowballStemmer", (short)305, (short)119);
      filter0.addConfigurationListener(configurationListener0);
      Filter filter1 = new Filter();
      assertEquals("AllFilter", filter1.getCustomName());
      
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      BeanVisual beanVisual0 = classValuePicker0.m_visual;
      filter1.m_visual = beanVisual0;
      filter1.getVerifyInputWhenFocusTarget();
      filter0.addInstanceListener(filter1);
      filter0.notifyInstanceListeners((InstanceEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }
}
