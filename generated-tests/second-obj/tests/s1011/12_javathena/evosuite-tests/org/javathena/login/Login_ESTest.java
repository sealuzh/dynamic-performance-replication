/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:53:05 GMT 2018
 */

package org.javathena.login;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Calendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.javathena.core.data.IParse;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.ACO;
import org.javathena.login.Login;
import org.javathena.login.UserManagement;
import org.javathena.login.parse.FromAdmin;
import org.javathena.login.parse.FromChar;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Login_ESTest extends Login_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Login login0 = new Login();
      ConfigurationManagement.lesslessAuth_before_save_file();
      ConfigurationManagement.setAccess_denynum(10);
      login0.getServer_fd();
      byte[] byteArray0 = new byte[1];
      Login.showTab(byteArray0);
      login0.getServer_fd();
      login0.getLog_fp();
      Login.mmo_auth_initTXT();
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("q7USUfR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Login.setPASSWORDENC(31032);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Login.display_title();
      // Undeclared exception!
      try { 
        Login.showTab((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      Login login0 = new Login();
      int int0 = login0.getAuth_max();
      assertEquals(0, int0);
      
      FromChar fromChar0 = new FromChar();
      int int1 = Login.getPASSWORDENC();
      assertEquals(2, int1);
      
      login0.do_initXML();
      assertEquals(2, login0.getPASSWORDENC());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Login login0 = new Login();
      login0.yesNoOnOffToBoolean("ON");
      ConfigurationManagement.setAuth_before_save_file((byte)56);
      // Undeclared exception!
      try { 
        login0.do_initXML();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.getSoLinger();
      mockSocket0.getSoLinger();
      Socket_data socket_data0 = new Socket_data(mockSocket0, (IParse) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockInetAddress.anyLocalAddress();
      int int0 = Calendar.SHORT;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Login.mmo_auth_initXML();
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      Login.mmo_auth_syncXML();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.close();
      login_ConnectionListener0.run();
      Login.getDbManagemtType();
      Login.mmo_auth_syncTXT();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)42;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Login login0 = new Login();
      login0.yesNoOnOffToBoolean("ON");
      ConfigurationManagement.setAuth_before_save_file((byte)42);
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      mockSocket0.getReuseAddress();
      Login.logUnknownPackets(socket_data0);
      mockSocket0.getPort();
      Login login0 = new Login();
      mockSocket0.getTrafficClass();
      String string0 = "";
      ConfigurationManagement.setAccess_allow("");
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      // Undeclared exception!
      try { 
        login_Timer_interval_check_auth_sync0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Login login0 = new Login();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("conf/subnet_athena.conf");
      login0.setOut(mockPrintWriter0);
      String string0 = "mDFZ=iN";
      int int0 = (-824);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)55;
      try { 
        MockInetAddress.getByAddress("conf/subnet_athena.conf", byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [-8, 55]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Login login0 = new Login();
      int int0 = login0.check_ipmask(474, "1c`#iT");
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login_ConnectionListener0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      login_ConnectionListener0.run();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      login_ConnectionListener0.run();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      login_ConnectionListener0.close();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      ConfigurationManagement.setSubnetmaski((int[]) null);
      ConfigurationManagement.setAccess_denynum(2000000);
      login_ConnectionListener0.run();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      Login.mmo_auth_syncXML();
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.utiles.ConfigurationManagement", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      Login.auth_num = (-591);
      Socket_data socket_data0 = new Socket_data((Socket) null);
      assertNotNull(socket_data0);
      assertNull(socket_data0.getMd5key());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertNull(socket_data0.getName());
      assertNull(socket_data0.getType());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0, socket_data0.getEof());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, socket_data0.getMaintenance());
      
      // Undeclared exception!
      try { 
        Login.codingKeyAdministration(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      ConfigurationManagement.setAccess_deny("conf/subnet_athena.conf");
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      
      boolean boolean0 = login0.check_ip(inetAddress0);
      assertTrue(boolean0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket((Proxy) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid Proxy
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      int[] intArray0 = new int[4];
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)74;
      ConfigurationManagement.setSubnetmaski(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      ConfigurationManagement.setAccess_denynum(10);
      Login.mmo_auth_syncXML();
      Login.showTab(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      login0.do_initTXT();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      MockSocket mockSocket0 = new MockSocket(proxy0);
      assertNotNull(mockSocket0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      
      InetAddress inetAddress0 = MockInetAddress.getByName("conf/subnet_athena.conf");
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("conf/subnet_athena.conf/200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      
      MockSocket mockSocket1 = null;
      try {
        mockSocket1 = new MockSocket(inetAddress0, 31052);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@91afb61c
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login_ConnectionListener0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      login0.setAuth_max((-2121337873));
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals((-2121337873), login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      assertFalse(mockSocket0.isBound());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      
      Socket_data socket_data0 = new Socket_data(mockSocket0, (IParse) null);
      assertNotNull(socket_data0);
      assertFalse(mockSocket0.isBound());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertNull(socket_data0.getName());
      assertNull(socket_data0.getMd5key());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0, socket_data0.getEof());
      assertNull(socket_data0.getType());
      assertEquals(0, socket_data0.getMaintenance());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals(0, socket_data0.getNew_());
      
      byte[] byteArray0 = Login.getMd5Data(socket_data0);
      assertNotNull(byteArray0);
      assertFalse(mockSocket0.isBound());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertNull(socket_data0.getName());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals("2345678910111213", socket_data0.getMd5key());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0, socket_data0.getEof());
      assertNull(socket_data0.getType());
      assertEquals(0, socket_data0.getMaintenance());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals(0, socket_data0.getNew_());
      
      Login login0 = new Login();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      MySQLConfig.setLogin_server_id("save/account.xml");
      Calendar calendar0 = socket_data0.getRdata_tick();
      assertNull(calendar0);
      assertFalse(mockSocket0.isBound());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertNull(socket_data0.getName());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals("2345678910111213", socket_data0.getMd5key());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0, socket_data0.getEof());
      assertNull(socket_data0.getType());
      assertEquals(0, socket_data0.getMaintenance());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals(0, socket_data0.getNew_());
      
      socket_data0.setRdata_tick((Calendar) null);
      assertFalse(mockSocket0.isBound());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertNull(socket_data0.getName());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals("2345678910111213", socket_data0.getMd5key());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0, socket_data0.getEof());
      assertNull(socket_data0.getType());
      assertEquals(0, socket_data0.getMaintenance());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals(0, socket_data0.getNew_());
      
      PrintWriter printWriter0 = login0.getOut();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNull(printWriter0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      // Undeclared exception!
      try { 
        Login.version(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Login.display_title();
      Login login0 = new Login();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      login0.do_initXML();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      int int0 = login0.parse_console("- with the IP security order: 'mutual-failture' (allow if in the allow list and not in the deny list).");
      assertEquals(0, int0);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      Login.mmo_auth_syncTXT();
      Login.mmo_auth_syncXML();
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Login.codingKey((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/12_javathena/save/account.txt");
      String string0 = ".{uOH-sd'6";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, ".{uOH-sd'6");
      assertTrue(boolean0);
      
      Login login0 = new Login();
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      ConfigurationManagement.setAccess_denynum(10);
      int[] intArray0 = login0.getServer_fd();
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(intArray0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-46);
      Login.showTab(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-46)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      int int0 = ConfigurationManagement.lesslessAuth_before_save_file();
      assertEquals((-1), int0);
      
      ConfigurationManagement.setAccess_denynum(10);
      int[] intArray0 = login0.getServer_fd();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(intArray0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      File file0 = login0.getLog_fp();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNull(file0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      Login.mmo_auth_syncTXT();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login_ConnectionListener0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      login_ConnectionListener0.close();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      login_ConnectionListener0.close();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      Login.mmo_auth_syncXML();
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotNull(login0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotNull(login_ConnectionListener0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      login_ConnectionListener0.close();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      login_ConnectionListener0.run();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)74;
      Login.mmo_auth_syncXML();
      int[] intArray0 = login0.getServer_fd();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotNull(intArray0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      // Undeclared exception!
      try { 
        login0.do_initXML();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         //  : Content is not allowed in prolog.
         //
         verifyException("com.thoughtworks.xstream.io.xml.DomDriver", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Login login0 = new Login();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      login0.do_final();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      ACO aCO0 = ACO.STRSIZE;
      ConfigurationManagement.setAccess_order(aCO0);
      int[] intArray0 = new int[8];
      intArray0[0] = 2000000;
      intArray0[3] = 10;
      intArray0[4] = 2000000;
      intArray0[7] = 10;
      login0.do_initTXT();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      int int0 = login0.parse_console("17:T!b");
      assertEquals(0, int0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      MySQLConfig.setLogin_server_db("17:T!b");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "warning_33");
      assertFalse(boolean0);
      
      Login login0 = new Login();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      int int0 = login0.getAuth_max();
      assertEquals(0, int0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      Socket_data socket_data0 = new Socket_data((Socket) null);
      assertNotNull(socket_data0);
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0, socket_data0.getEof());
      assertNull(socket_data0.getType());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, socket_data0.getMaintenance());
      assertNull(socket_data0.getName());
      assertNull(socket_data0.getMd5key());
      
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertNotNull(login1);
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      assertEquals(2, login1.getPASSWORDENC());
      
      // Undeclared exception!
      try { 
        login0.parse_admin(31024, socket_data0, login1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      int int0 = ConfigurationManagement.lesslessAuth_before_save_file();
      assertEquals((-1), int0);
      
      ConfigurationManagement.setAccess_denynum(10);
      int[] intArray0 = login0.getServer_fd();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(intArray0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      File file0 = login0.getLog_fp();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNull(file0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      Login.mmo_auth_syncTXT();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login_ConnectionListener0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      login_ConnectionListener0.close();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      login_ConnectionListener0.close();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      Login.mmo_auth_syncXML();
      int int1 = Calendar.JUNE;
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      
      int int2 = login0.getAuth_num();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      
      int int0 = mockSocket0.getSoLinger();
      assertEquals((-1), int0);
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      
      int int1 = mockSocket0.getSoLinger();
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      
      boolean boolean0 = mockSocket0.getReuseAddress();
      assertFalse(boolean0);
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      
      Login.login_log(":eQ#");
      Login login0 = new Login();
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      login0.do_initXML();
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      File file0 = login0.getLog_fp();
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertNull(file0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      
      boolean boolean1 = login0.check_ip(inetAddress0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      
      int int2 = login0.parse_console("\t%newid%");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      Login.mmo_auth_syncTXT();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)30;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)127, (byte)30}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertNotNull(login_ConnectionListener0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertNotNull(login_Timer_interval_check_auth_sync0);
      assertEquals(0L, login_Timer_interval_check_auth_sync0.scheduledExecutionTime());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      login_Timer_interval_check_auth_sync0.run();
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(0L, login_Timer_interval_check_auth_sync0.scheduledExecutionTime());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      login_ConnectionListener0.close();
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "defaults");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // defaults
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = Calendar.MILLISECOND;
      assertEquals(14, int0);
      
      FromClient fromClient0 = new FromClient();
      assertEquals(512, FromClient.ALIVE_PACKET);
      assertEquals(30000, FromClient.VERSION);
      assertEquals(475, FromClient.CODING_KEY);
      assertEquals(31000, FromClient.CONNECTION_OF_LOGIN_ADMINISTRATION);
      assertEquals(10000, FromClient.CONNECTION_OF_CHAR_SERVER);
      assertEquals((-257), FromClient.PACKAGE_TO_SMALL);
      assertEquals(631, FromClient.NEW_CONNECTION_OF_CLIENT);
      assertEquals(100, FromClient.CONNECTION_OF_CLIENT);
      assertEquals(31002, FromClient.CODING_KEY_ADMINISTRATION);
      assertEquals(30002, FromClient.END_OF_CONNECTION);
      assertEquals(516, FromClient.ALIVE_PACKET_ENCRYPTED);
      assertNotNull(fromClient0);
      
      Login login0 = new Login();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      String string0 = "NO";
      int[] intArray0 = new int[3];
      intArray0[0] = 10;
      intArray0[1] = 631;
      intArray0[2] = 100000000;
      login0.setServer_fd(intArray0);
      assertArrayEquals(new int[] {10, 631, 100000000}, intArray0);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      login0.do_final();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      boolean boolean0 = login0.yesNoOnOffToBoolean("NO");
      assertFalse(boolean0);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1813);
      intArray1[1] = 31000;
      intArray1[2] = 2000000;
      intArray1[3] = 631;
      intArray1[4] = 516;
      login0.setServer_fd(intArray1);
      assertArrayEquals(new int[] {(-1813), 31000, 2000000, 631, 516}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      login0.do_initTXT();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      int int1 = login0.parse_console("----End of login-server (normal end with closing of all files).");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("----End of login-server (normal end with closing of all files).", "----End of login-server (normal end with closing of all files).");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ----End of login-server (normal end with closing of all files).
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      
      int int0 = mockSocket0.getSoLinger();
      assertEquals((-1), int0);
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      
      int int1 = Calendar.MILLISECOND;
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      boolean boolean0 = mockSocket0.getReuseAddress();
      assertFalse(boolean0);
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      
      Login login0 = new Login();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      login0.do_initXML();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      File file0 = login0.getLog_fp();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNull(file0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      
      boolean boolean1 = login0.check_ip(inetAddress0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      
      int int2 = Calendar.AM_PM;
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(9, int2);
      
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      assertNotNull(socket_data0);
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, socket_data0.getMaintenance());
      assertNull(socket_data0.getMd5key());
      assertNull(socket_data0.getName());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0, socket_data0.getEof());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertNull(socket_data0.getType());
      
      mockSocket0.setTcpNoDelay(false);
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      
      // Undeclared exception!
      try { 
        login0.parse_console("exit");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      
      int int0 = mockSocket0.getSoLinger();
      assertEquals((-1), int0);
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      
      int int1 = Calendar.MILLISECOND;
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      Socket_data socket_data0 = new Socket_data(mockSocket0, (IParse) null);
      assertNotNull(socket_data0);
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertNull(socket_data0.getName());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0, socket_data0.getMaintenance());
      assertNull(socket_data0.getMd5key());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0, socket_data0.getEof());
      assertNull(socket_data0.getType());
      assertEquals(0, (int)socket_data0.getAccount_id());
      
      FromClient fromClient0 = new FromClient();
      assertEquals(100, FromClient.CONNECTION_OF_CLIENT);
      assertEquals(475, FromClient.CODING_KEY);
      assertEquals((-257), FromClient.PACKAGE_TO_SMALL);
      assertEquals(30000, FromClient.VERSION);
      assertEquals(516, FromClient.ALIVE_PACKET_ENCRYPTED);
      assertEquals(30002, FromClient.END_OF_CONNECTION);
      assertEquals(31002, FromClient.CODING_KEY_ADMINISTRATION);
      assertEquals(10000, FromClient.CONNECTION_OF_CHAR_SERVER);
      assertEquals(631, FromClient.NEW_CONNECTION_OF_CLIENT);
      assertEquals(31000, FromClient.CONNECTION_OF_LOGIN_ADMINISTRATION);
      assertEquals(512, FromClient.ALIVE_PACKET);
      assertNotNull(fromClient0);
      
      boolean boolean0 = mockSocket0.getReuseAddress();
      assertFalse(boolean0);
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      
      boolean boolean1 = mockSocket0.getReuseAddress();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      
      Login.login_log(":eQ#");
      Login login0 = new Login();
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      File file0 = login0.getLog_fp();
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNull(file0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      byte[] byteArray0 = Login.getMd5Data(socket_data0);
      assertNotNull(byteArray0);
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertNull(socket_data0.getName());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0, socket_data0.getMaintenance());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0, socket_data0.getEof());
      assertEquals("2345678910111213", socket_data0.getMd5key());
      assertNull(socket_data0.getType());
      assertEquals(0, (int)socket_data0.getAccount_id());
      
      byte[] byteArray1 = Login.getMd5Data(socket_data0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertNull(socket_data0.getName());
      assertEquals("15161718192021222324252627", socket_data0.getMd5key());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0, socket_data0.getMaintenance());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(1, socket_data0.getEof());
      assertEquals(0, socket_data0.getUsers());
      assertNull(socket_data0.getType());
      assertEquals(0, (int)socket_data0.getAccount_id());
      
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertNotNull(login1);
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      assertEquals(2, login1.getPASSWORDENC());
      
      Login login2 = new Login();
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login2);
      assertEquals(0, login2.getAuth_max());
      assertEquals(0, login2.getAuth_num());
      assertEquals(2, login2.getPASSWORDENC());
      
      int int2 = login0.getAuth_num();
      assertFalse(login0.equals((Object)login2));
      assertFalse(login0.equals((Object)login1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotSame(login0, login2);
      assertNotSame(login0, login1);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      int int3 = login2.getAuth_max();
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotSame(login2, login0);
      assertNotSame(login2, login1);
      assertEquals(0, login2.getAuth_max());
      assertEquals(0, login2.getAuth_num());
      assertEquals(2, login2.getPASSWORDENC());
      
      int int4 = Login.mmo_auth_initTXT();
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      
      int int0 = mockSocket0.getSoLinger();
      assertEquals((-1), int0);
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      
      int int1 = mockSocket0.getSoLinger();
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      
      boolean boolean0 = mockSocket0.getReuseAddress();
      assertFalse(boolean0);
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      
      Login.login_log(":eQ#");
      Login login0 = new Login();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      login0.do_initXML();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      File file0 = login0.getLog_fp();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNull(file0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      
      int int2 = Calendar.AM_PM;
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(9, int2);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 9;
      intArray0[3] = 50;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      login0.setServer_fd(intArray0);
      assertArrayEquals(new int[] {(-1), (-1), 9, 50, (-1), (-1)}, intArray0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      int int3 = login0.parse_console(":eQ#");
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      MySQLConfig.setLogin_server_ip("quit");
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login1);
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      assertEquals(2, login1.getPASSWORDENC());
      
      MySQLConfig.setLogin_server_db("YES");
      boolean boolean1 = login0.yesNoOnOffToBoolean("YES");
      assertFalse(login0.equals((Object)login1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotSame(login0, login1);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      
      int int0 = mockSocket0.getSoLinger();
      assertEquals((-1), int0);
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      
      int int1 = mockSocket0.getSoLinger();
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      
      boolean boolean0 = mockSocket0.getReuseAddress();
      assertFalse(boolean0);
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      
      Login login0 = new Login();
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      login0.do_initXML();
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      File file0 = login0.getLog_fp();
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNull(file0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isLoopbackAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      
      boolean boolean1 = login0.check_ip(inetAddress0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      
      login0.setServer_fd((int[]) null);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      int int2 = login0.parse_console("help");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      login0.setAuth_max((-487));
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals((-487), login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      MockSocket mockSocket1 = null;
      try {
        mockSocket1 = new MockSocket("shutdown", 3913, true);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@91a2dfbf
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = Calendar.MILLISECOND;
      assertEquals(14, int0);
      
      Login login0 = new Login();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      login0.do_initXML();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NO");
      assertFalse(boolean0);
      
      ConfigurationManagement.setAccess_deny("\n\n");
      File file0 = login0.getLog_fp();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNull(file0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      
      boolean boolean1 = login0.check_ip(inetAddress0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2000000;
      intArray0[1] = 2000000;
      intArray0[2] = 14;
      login0.setServer_fd(intArray0);
      assertArrayEquals(new int[] {2000000, 2000000, 14}, intArray0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login1);
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      
      // Undeclared exception!
      try { 
        login1.parse_console("end");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
}
