/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:53:26 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.PrintStream;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.ByteString;
import okio.HashingSource;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.enter();
      asyncTimeout0.exit(false);
      assertFalse(asyncTimeout0.hasDeadline());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)114;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      HashingSource hashingSource1 = HashingSource.hmacSha256(hashingSource0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      Buffer buffer1 = realBufferedSource0.buffer;
      Source source0 = asyncTimeout0.source(buffer1);
      assertNotNull(source0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      asyncTimeout0.exit();
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException0);
      mockIOException0.toString();
      asyncTimeout0.exit(iOException0);
      asyncTimeout0.timedOut();
      MockPrintStream mockPrintStream0 = new MockPrintStream("(");
      asyncTimeout0.exit();
      asyncTimeout0.deadlineNanoTime(9223372036854775807L);
      asyncTimeout0.enter();
      asyncTimeout0.exit(false);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      asyncTimeout0.exit();
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException0);
      MockIOException mockIOException1 = new MockIOException(iOException0);
      mockIOException1.toString();
      asyncTimeout0.exit((IOException) mockIOException1);
      asyncTimeout0.timedOut();
      String string0 = "Jh05On_&]\"a}5OtFrV/";
      MockPrintStream mockPrintStream0 = new MockPrintStream("Jh05On_&]\"a}5OtFrV/");
      mockPrintStream0.println('!');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "org.evosuite.runtime.mock.java.lang.MockThrowable: java.io.InterruptedIOException: timeout";
      objectArray0[1] = (Object) mockIOException0;
      mockPrintStream0.write(65536);
      Object object0 = new Object();
      Buffer buffer0 = new Buffer();
      asyncTimeout0.sink(buffer0);
      mockIOException1.getCause();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      asyncTimeout0.exit();
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException0);
      MockIOException mockIOException1 = new MockIOException(iOException0);
      mockIOException1.toString();
      asyncTimeout0.exit((IOException) mockIOException1);
      asyncTimeout0.timedOut();
      boolean boolean0 = false;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Jh05On_&]\"a}5OtFrV/");
      asyncTimeout0.exit();
      asyncTimeout0.deadlineNanoTime(9223372036854775807L);
      asyncTimeout0.enter();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      asyncTimeout0.exit();
      asyncTimeout0.newTimeoutException(mockIOException0);
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      mockIOException1.toString();
      asyncTimeout0.exit((IOException) mockIOException0);
      asyncTimeout0.timedOut();
      boolean boolean0 = false;
      String string0 = "tE:S7@T$N+C&Rm$AoQ";
      MockPrintStream mockPrintStream0 = new MockPrintStream("tE:S7@T$N+C&Rm$AoQ");
      asyncTimeout0.exit();
      asyncTimeout0.deadlineNanoTime(0L);
      AsyncTimeout asyncTimeout1 = new AsyncTimeout();
      asyncTimeout0.enter();
      asyncTimeout1.exit(false);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      asyncTimeout0.exit();
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException0);
      mockIOException0.toString();
      asyncTimeout0.exit(iOException0);
      boolean boolean0 = false;
      String string0 = "(";
      MockPrintStream mockPrintStream0 = new MockPrintStream("(");
      asyncTimeout0.exit();
      asyncTimeout0.deadlineNanoTime((long) 0);
      asyncTimeout0.enter();
      asyncTimeout0.exit(false);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      asyncTimeout0.exit();
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException0);
      mockIOException0.toString();
      asyncTimeout0.exit(iOException0);
      asyncTimeout0.timedOut();
      mockIOException0.initCause(iOException0);
      String string0 = "(";
      MockPrintStream mockPrintStream0 = new MockPrintStream("(");
      asyncTimeout0.exit();
      asyncTimeout0.deadlineNanoTime((long) 0);
      asyncTimeout0.enter();
      try { 
        asyncTimeout0.exit(true);
        fail("Expecting exception: InterruptedIOException");
      
      } catch(InterruptedIOException e) {
         //
         // timeout
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      asyncTimeout0.exit();
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException0);
      mockIOException0.toString();
      asyncTimeout0.exit(iOException0);
      asyncTimeout0.timedOut();
      MockPrintStream mockPrintStream0 = new MockPrintStream("(");
      asyncTimeout0.exit();
      asyncTimeout0.deadlineNanoTime((long) 0);
      asyncTimeout0.enter();
      asyncTimeout0.exit(false);
      AsyncTimeout asyncTimeout1 = AsyncTimeout.head;
      asyncTimeout1.timedOut();
      asyncTimeout0.enter();
      boolean boolean0 = false;
      boolean boolean1 = false;
      asyncTimeout1.exit(false);
      asyncTimeout0.exit(false);
      Object object0 = new Object();
      try { 
        asyncTimeout0.waitUntilNotified("(");
        fail("Expecting exception: InterruptedIOException");
      
      } catch(InterruptedIOException e) {
         //
         // timeout
         //
         verifyException("okio.Timeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      asyncTimeout0.exit();
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException0);
      mockIOException0.toString();
      asyncTimeout0.exit(iOException0);
      asyncTimeout0.timedOut();
      String string0 = "(";
      MockPrintStream mockPrintStream0 = new MockPrintStream("(");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/(");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "(");
      asyncTimeout0.exit();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime((long) 0);
      asyncTimeout0.enter();
      asyncTimeout1.exit((IOException) mockIOException0);
      asyncTimeout0.exit(false);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }
}
