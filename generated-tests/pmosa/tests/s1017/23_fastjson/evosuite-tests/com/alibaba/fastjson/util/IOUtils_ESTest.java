/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 11:52:10 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.util.IOUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedOutputStream;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackReader;
import java.io.StringReader;
import java.io.Writer;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.LongBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.getChars(0L, 0, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = new byte[0];
      char[] charArray0 = new char[8];
      int int0 = IOUtils.decodeUTF8(byteArray0, (-823), (-823), charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = null;
      char[] charArray0 = new char[0];
      IOUtils.decodeUTF8((byte[]) null, 0, 0, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 0, (-2254));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2255
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, (byte)0, 18, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IOUtils.getStringProperty("read string from reader error");
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)114, 119, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IOUtils.stringSize(1L);
      byte byte0 = (byte)82;
      char[] charArray0 = new char[5];
      charArray0[0] = 'Z';
      charArray0[1] = '+';
      charArray0[2] = 'e';
      charArray0[3] = '3';
      charArray0[4] = '%';
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)82, (int) (byte)82, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 81
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[12];
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 2, 2, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = '=';
      charArray0[0] = '=';
      char char1 = '';
      charArray0[1] = '';
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 0, 255, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('\u008A');
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[0];
      int int0 = IOUtils.encodeUTF8((char[]) null, (-2778), (-2778), byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.getChars(884, 4, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('v');
      assertTrue(boolean0);
      
      IOUtils.getStringProperty("fastjson.compatibleWithFieldName");
      IOUtils.getStringProperty("fastjson.compatibleWithFieldName");
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      charArray0[2] = 'f';
      IOUtils.getChars(3, 3, charArray0);
      IOUtils.firstIdentifier('3');
      int int0 = IOUtils.stringSize((long) 3);
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[0];
      int int1 = IOUtils.decodeUTF8(byteArray0, (-1791), (-150), charArray0);
      assertArrayEquals(new char[] {'v', 'v', '\u0000'}, charArray0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getStringProperty("C#e");
      IOUtils.getChars(1, 6, iOUtils0.DIGITS);
      IOUtils.getChars((long) 1, 6, iOUtils0.ASCII_CHARS);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils.stringSize(0);
      IOUtils.isValidJsonpQueryParam("!PW\"");
      String string0 = IOUtils.getStringProperty("YB{D|cDJ6rs");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils.stringSize(0);
      IOUtils.isValidJsonpQueryParam("!PW\"");
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = 'a';
      charArray0[2] = 'l';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-86);
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 723, 244, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 723
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IOUtils.firstIdentifier('I');
      IOUtils.loadPropertiesFromFile();
      IOUtils.isIdent('L');
      IOUtils.stringSize(30);
      MockFile mockFile0 = new MockFile("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      IOUtils.close(bufferedOutputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-128);
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      charArray0[3] = 'L';
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, (-2320), 2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2320
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte) (-72);
      IOUtils.encodeUTF8((char[]) null, (-1718), (-1718), byteArray0);
      IOUtils.firstIdentifier('\"');
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      IOUtils.getChars((byte)65, 36, iOUtils0.ASCII_CHARS);
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(iOUtils0.specicalFlags_singleQuotes, (byte)0, 1525, iOUtils0.ASCII_CHARS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 96
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = 2;
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      IOUtils.stringSize((long) 28);
      IOUtils.decodeUTF8(byteArray0, 2, 2, charArray0);
      IOUtils.stringSize((long) int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[12];
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-64), 2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IOUtils.getStringProperty("G2pn>b?7[vkpO");
      byte[] byteArray0 = IOUtils.decodeBase64("UTF-8");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("=7gM$Oh5A>J");
      assertArrayEquals(new byte[] {(byte)3, (byte) (-72), (byte)12, (byte) (-1), (byte) (-13), (byte) (-95), (byte) (-1), (byte) (-1), (byte) (-55)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IOUtils.getStringProperty("G2pn>b?7[vkpO");
      byte[] byteArray0 = IOUtils.decodeBase64("`rI1{QV");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte)65}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IOUtils.decodeBase64(",wBLc`;Dd-Za");
      char[] charArray0 = new char[9];
      charArray0[0] = 'E';
      charArray0[1] = 'L';
      charArray0[2] = '.';
      charArray0[3] = 'Y';
      charArray0[4] = 'n';
      charArray0[5] = 'z';
      charArray0[6] = ';';
      charArray0[7] = '}';
      charArray0[8] = 'd';
      // Undeclared exception!
      try { 
        IOUtils.getChars(0, 52, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Charset charset0 = IOUtils.UTF8;
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      IOUtils.decode(charsetDecoder0, byteBuffer0, charBuffer0);
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils iOUtils0 = new IOUtils();
      int int0 = 2016;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("-k03j7SG\"x");
      CharBuffer charBuffer0 = uTF8Decoder0.decode(byteBuffer0);
      uTF8Decoder0.decodeLoop(byteBuffer0, charBuffer0);
      uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      ByteBuffer byteBuffer1 = iOUtils0.UTF8.encode("fastjson.properties");
      iOUtils0.UTF8.decode(byteBuffer1);
      int int1 = 36;
      IOUtils.close((Closeable) null);
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)65, 92, iOUtils0.CA);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 91
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("g%r9M4i+yR");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte) (-86);
      IOUtils.getStringProperty("g%r9M4i+yR");
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = 'C';
      charArray0[2] = '$';
      charArray0[3] = 'R';
      charArray0[4] = '!';
      charArray0[5] = 'm';
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte) (-86), (byte) (-86), charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      String string0 = IOUtils.FASTJSON_COMPATIBLEWITHFIELDNAME;
      IOUtils.getStringProperty("com.alibaba.fastjson.util.IOUtils");
      IOUtils.isValidJsonpQueryParam("com.alibaba.fastjson.util.IOUtils");
      char[] charArray0 = new char[1];
      charArray0[0] = 'M';
      // Undeclared exception!
      try { 
        IOUtils.getChars(5, 5, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[8];
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-115);
      byteArray0[0] = (byte) (-115);
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 4, 2482, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.CA, 47, 47);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 93
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      byte[] byteArray1 = IOUtils.decodeBase64("s");
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = IOUtils.stringSize(0L);
      assertEquals(1, int0);
      
      IOUtils.decodeBase64("");
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = 'T';
      charArray0[2] = 'Z';
      charArray0[3] = 'I';
      charArray0[4] = 'F';
      charArray0[5] = 'Y';
      charArray0[6] = 'A';
      charArray0[7] = '_';
      charArray0[8] = 'U';
      byte[] byteArray0 = IOUtils.decodeBase64(charArray0, 1, 1);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[6];
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byte[] byteArray1 = IOUtils.decodeBase64(charArray0, 1, 1);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = IOUtils.FASTJSON_COMPATIBLEWITHJAVABEAN;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      IOUtils.decodeBase64("(,.38!~<3/-7MF", 1, 1);
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      IOUtils iOUtils0 = new IOUtils();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IOUtils.getStringProperty("(,.38!~<3/-7MF");
      IOUtils.stringSize(63);
      IOUtils.decodeBase64("(,.38!~<3/-7MF", 2, 2);
      IOUtils.isValidJsonpQueryParam("(,.38!~<3/-7MF");
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("encodeUTF8 error", 2, 63);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IOUtils.getStringProperty("(,.38!~<3/-7MF");
      int int0 = IOUtils.stringSize(63);
      assertEquals(2, int0);
      
      byte[] byteArray0 = IOUtils.decodeBase64("(,.38!~<3/-7MF", 2, 2);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("(,.38!~<3/-7MF");
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      charArray0[1] = 'U';
      charArray0[2] = 'N';
      charArray0[3] = '6';
      IOUtils.getChars((long) 2, 2, charArray0);
      assertArrayEquals(new char[] {'l', '2', 'N', '6'}, charArray0);
      
      boolean boolean1 = IOUtils.firstIdentifier('K');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'Y';
      byte[] byteArray0 = IOUtils.decodeBase64(charArray0, 2, 2);
      assertArrayEquals(new byte[] {(byte)97}, byteArray0);
      
      int int1 = IOUtils.stringSize((-2143L));
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IOUtils.stringSize(22L);
      byte[] byteArray0 = IOUtils.decodeBase64("");
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = 'T';
      charArray0[2] = 'Z';
      charArray0[3] = 'I';
      charArray0[4] = 'F';
      charArray0[5] = 'Y';
      charArray0[6] = 'A';
      charArray0[7] = '_';
      charArray0[8] = 'U';
      IOUtils.decodeBase64(charArray0, 2, 2);
      IOUtils.stringSize(2);
      MockFile mockFile0 = new MockFile("UTF-8", "j0HC9$#Zx&s~]'y!ISc");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) charArray0;
      PrintStream printStream0 = mockPrintStream0.format("TJZRSCTWII(qYB", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      IOUtils.close(mockPrintWriter0);
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 1276, 37, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1276
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IOUtils.getStringProperty("cUn|R[/");
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      String string0 = IOUtils.readAll(lineNumberReader0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IOUtils.firstIdentifier('v');
      IOUtils.getStringProperty("fastjson.compatibleWithFieldName");
      String string0 = IOUtils.FASTJSON_PROPERTIES;
      int int0 = 3;
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      // Undeclared exception!
      try { 
        IOUtils.getChars((-1711L), 3, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam((String) null);
      assertFalse(boolean0);
      
      IOUtils.getStringProperty(" hec2RC^K3^!u*'9at");
      int int0 = IOUtils.stringSize(2147483647L);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IOUtils.getStringProperty("(,38!~<3/7MF");
      IOUtils.stringSize(63);
      IOUtils.decodeBase64("(,38!~<3/7MF", 2, 2);
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars(1325, 6, iOUtils0.replaceChars);
      // Undeclared exception!
      try { 
        IOUtils.getChars((long) 6, 1325, iOUtils0.DIGITS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1324
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[8];
      charArray0[0] = 'S';
      charArray0[1] = 'V';
      charArray0[2] = 'J';
      charArray0[3] = '';
      charArray0[4] = 'T';
      charArray0[5] = 'N';
      charArray0[6] = ' ';
      charArray0[7] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtils.readAll(charArrayReader0);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 69, 69);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 69
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-32);
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = 'U';
      charArray0[2] = '\'';
      charArray0[3] = '-';
      charArray0[4] = 'T';
      charArray0[5] = 'z';
      charArray0[6] = '+';
      charArray0[7] = 'H';
      IOUtils.decodeUTF8(byteArray0, 0, 47, charArray0);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtils.readAll(charArrayReader0);
      // Undeclared exception!
      try { 
        IOUtils.getChars(1724, (int) (byte)18, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char char0 = 'q';
      IOUtils.firstIdentifier('q');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 5;
      IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder", 5, 5);
      char char1 = '\\';
      IOUtils.firstIdentifier('\\');
      char char2 = 'Q';
      IOUtils.firstIdentifier('Q');
      StringReader stringReader0 = new StringReader("com.alibaba.fastjson.util.UTF8Decoder");
      stringReader0.close();
      try { 
        stringReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-52);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 0, 12, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-36);
      byteArray0[5] = (byte) (-36);
      char[] charArray0 = new char[7];
      int int0 = IOUtils.decodeUTF8(byteArray0, 4, 4, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[4];
      charArray0[0] = '\u00A6';
      charArray0[1] = '\u00A6';
      charArray0[2] = '\u00A6';
      charArray0[3] = '\u00A6';
      byte[] byteArray0 = new byte[0];
      IOUtils.encodeUTF8(charArray0, 5, (byte) (-28), byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      IOUtils.firstIdentifier('U');
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-28);
      byteArray1[1] = (byte) (-28);
      byteArray1[2] = (byte) (-28);
      byteArray1[3] = (byte) (-28);
      byteArray1[4] = (byte) (-28);
      byteArray1[5] = (byte) (-28);
      byteArray1[6] = (byte) (-28);
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 2, 128, byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-31);
      byteArray0[5] = (byte) (-31);
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 4, 4, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte) (-64);
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      charArray0[4] = 'U';
      charArray0[5] = 'u';
      charArray0[6] = 'u';
      int int0 = IOUtils.decodeUTF8(byteArray0, 4, 4, charArray0);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = IOUtils.decodeBase64("a< M");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-52)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-31);
      char[] charArray0 = new char[12];
      int int0 = IOUtils.decodeUTF8(byteArray0, 4, 4, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[8];
      char char0 = '5';
      charArray0[0] = '5';
      charArray0[1] = 'x';
      charArray0[2] = '$';
      charArray0[3] = 'i';
      charArray0[4] = 'D';
      charArray0[5] = 'T';
      charArray0[6] = 'a';
      charArray0[7] = 'Y';
      IOUtils.decodeBase64(charArray0, 0, 4);
      int int0 = 63;
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 0, 63);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 62
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[4] = 'A';
      charArray0[7] = 'A';
      byte[] byteArray0 = IOUtils.decodeBase64(charArray0, 4, 4);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-64)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-31);
      byteArray0[2] = (byte) (-31);
      byteArray0[5] = (byte) (-31);
      byteArray0[6] = (byte) (-102);
      char[] charArray0 = new char[5];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      charArray0[4] = 'u';
      IOUtils.decodeUTF8(byteArray0, 3, 4, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 4, 18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 21
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-11);
      byteArray0[0] = (byte) (-11);
      char[] charArray0 = new char[0];
      IOUtils.decodeUTF8(byteArray0, 0, 18, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("UTF-8", (int) (byte) (-11), 2146151462);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = IOUtils.decodeBase64("Rl*w=}");
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 87, 4336, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-63);
      char[] charArray0 = new char[1];
      int int0 = IOUtils.decodeUTF8(byteArray0, 0, 34, charArray0);
      assertEquals((-1), int0);
      
      int int1 = IOUtils.decodeUTF8(byteArray0, (-1), (byte) (-63), charArray0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-52);
      byteArray0[7] = (byte) (-12);
      byteArray0[8] = (byte) (-1);
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = ')';
      IOUtils.decodeUTF8(byteArray0, (byte)6, (byte)3, charArray0);
      IOUtils.isIdent('N');
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, (-63), (int) (byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -65
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('\u0100');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-48);
      char[] charArray0 = new char[7];
      int int0 = IOUtils.decodeUTF8(byteArray0, 3, 3, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      char[] charArray0 = new char[6];
      charArray0[3] = '\u00B0';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-109);
      byteArray0[6] = (byte) (-109);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte) (-109);
      IOUtils.decodeUTF8(byteArray0, 2, 52429, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.getChars((long) (byte)28, 52429, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52428
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      char[] charArray0 = new char[6];
      charArray0[0] = '\u00B0';
      charArray0[3] = '\u00B0';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)54;
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 2, 52429, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte) (-67);
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = '{';
      charArray0[5] = '^';
      charArray0[3] = '^';
      charArray0[4] = 'p';
      charArray0[5] = '2';
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 4, 49, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      char[] charArray0 = new char[6];
      charArray0[3] = '\u00B0';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-109);
      byteArray0[6] = (byte) (-109);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)5;
      int int1 = 52429;
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 2, 52429, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      boolean boolean0 = IOUtils.isIdent('\u0101');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte) (-32);
      byteArray0[7] = (byte)0;
      char[] charArray0 = new char[8];
      charArray0[3] = '-';
      charArray0[4] = '-';
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)5, 9, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'G';
      charArray0[1] = 'p';
      charArray0[2] = '\'';
      charArray0[3] = '=';
      charArray0[4] = '8';
      charArray0[5] = 'H';
      charArray0[6] = 'T';
      charArray0[7] = '7';
      charArray0[8] = 'h';
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 2, 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }
}
