/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:13:05 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 1124;
      try { 
        Parser.parse("){7", 1124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      try { 
        Parser.parse("(?P<(>", 44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Regexp regexp0 = Parser.parse("$=]", 53);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Regexp regexp0 = Parser.parse("", 116);
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 11, 116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 81;
      try { 
        Parser.parse("(?P<(?(\">;Dm`\"", 81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<(?(\"`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 2177;
      Regexp[] regexpArray0 = new Regexp[1];
      try { 
        Parser.parse("+X/F'", 2177);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Parser.parse("pPt]", 8072);
      assertFalse(regexp2.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "^\\x00-\\x{10FFFF}";
      try { 
        Parser.parse("t(", 2509);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `t(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "(?i:";
      Regexp[] regexpArray0 = new Regexp[6];
      int int0 = (-2991);
      Parser.subarray(regexpArray0, (-2991), (-2991));
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      try { 
        Parser.parse("(6", (-2991));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(6`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = (-2807);
      String string0 = "[:-";
      try { 
        Parser.parse("[:-", (-2807));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = (-1084);
      String string0 = "\\";
      Regexp regexp0 = Parser.parse("", (-1084));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = null;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int0, int0);
      assertNotNull(regexpArray1);
      
      Regexp[] regexpArray2 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray2);
      assertFalse(regexpArray2.equals((Object)regexpArray1));
      assertNotSame(regexpArray2, regexpArray1);
      
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      int int1 = 437;
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: trailing backslash at end of expression
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d", (-1084));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = Parser.subarray((Regexp[]) null, (-1084), (-1084));
      assertNotNull(regexpArray0);
      
      Regexp[] regexpArray1 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray1, regexpArray0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p", 881);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 205;
      Regexp regexp0 = Parser.parse("C", 205);
      assertNotNull(regexp0);
      
      String string0 = "jXo:arEsgDeti_sw";
      int int1 = 81;
      Regexp regexp1 = Parser.parse(string0, int1);
      assertNotNull(regexp1);
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp1;
      regexpArray0[2] = regexp0;
      int int2 = 1814;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int2, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op1);
      assertNotNull(regexp0);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      
      String string0 = regexp0.toString();
      assertNotNull(string0);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertEquals("\\B", string0);
      assertNotSame(regexp_Op1, regexp_Op0);
      
      regexp0.min = (-3636);
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      Regexp regexp3 = Parser.parse("B", (-3636));
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pFzvjTL", (-3636));
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|", (-3636));
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      Regexp regexp3 = new Regexp(regexp2);
      assertNotNull(regexp3);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      
      regexpArray0[1] = regexp2;
      Regexp.Op regexp_Op1 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp3 = new Regexp(regexp_Op1);
      assertNotNull(regexp3);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp3);
      assertNotNull(regexp4);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      
      regexpArray0[3] = regexp4;
      Regexp regexp5 = new Regexp(regexp3);
      assertNotNull(regexp5);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp1));
      assertTrue(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      
      Regexp regexp6 = Parser.parse("^a", 125);
      assertNotNull(regexp6);
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp3));
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp3);
      
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-3091), (-3091));
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      try { 
        Parser.parse("c|)", (-2487));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D{", 56);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 124;
      String string0 = ".F?+";
      try { 
        Parser.parse(".F?+", 124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `?+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "my|{4}ePY~h";
      int int0 = 32;
      try { 
        Parser.parse("my|{4}ePY~h", 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `{4}`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      try { 
        Parser.parse("?PA9zB8/'>.7m_i8:", 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      try { 
        Parser.parse("*9", 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "[(";
      int int0 = (-2296);
      String string1 = "E/G#,#u|M9";
      int int1 = 2049;
      try { 
        Parser.parse("(", (-2296));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      try { 
        Parser.parse("J|){}0sMtba4iC&", 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "Ik_#3n&/P";
      int int0 = (-2712);
      String string1 = "c|)";
      try { 
        Parser.parse("c|)", (-2712));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Regexp regexp0 = Parser.parse("L!y|3", 8140);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp[] regexpArray1 = new Regexp[4];
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      
      regexpArray1[1] = regexp0;
      regexp0.max = (-1);
      regexpArray1[3] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, 33, (-172));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      try { 
        Parser.parse("r(*V^o", 43249);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "\\1";
      try { 
        Parser.parse("$)O4|$", (-947));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertNotNull(string0);
      assertEquals("(?-s:.)", string0);
      
      int int0 = 6025;
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("(?-s:.)", (-148));
      assertNotNull(regexp2);
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      int int1 = 66;
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-2252), 66);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2252
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 116;
      Regexp regexp0 = Parser.parse("(yGXKU#a)y", 116);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertNotNull(string0);
      assertEquals("(yGXKU#a)y", string0);
      
      String string1 = regexp0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("(yGXKU#a)y", string1);
      
      Parser parser0 = new Parser("(yGXKU#a)y", 116);
      assertNotNull(parser0);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 1885);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "?PA9zB8/'>.7m_i8:";
      try { 
        Parser.parse("?PA9zB8/'>.7m_i8:", 81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertNotNull(string0);
      assertEquals("(?-s:.)", string0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      int int0 = (-148);
      regexp1.op = regexp_Op0;
      Regexp regexp2 = Parser.parse(".!", (-148));
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp regexp3 = null;
      try {
        regexp3 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "\\1";
      try { 
        Parser.parse("$)O$", (-943));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      String string0 = ".F?+";
      Regexp regexp2 = Parser.parse(".F?+", 128);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp3 = new Regexp(regexp2);
      assertNotNull(regexp3);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      
      regexpArray0[0] = regexp3;
      Regexp regexp4 = new Regexp(regexp2);
      assertNotNull(regexp4);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp3));
      
      regexpArray0[1] = regexp4;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp2;
      regexpArray0[6] = regexp2;
      regexpArray0[7] = regexp0;
      int int0 = (-1026);
      int int1 = 46;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1026), 46);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1026
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp regexp0 = Parser.parse("", (-1736));
      assertNotNull(regexp0);
      
      Regexp regexp1 = null;
      try {
        regexp1 = new Regexp(regexpArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      try { 
        Parser.parse("(?P<(?P<(?OE", (-2704));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<(?P<(?OE`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PP:,K]s?|", (-20));
      assertNotNull(regexp0);
      
      String string0 = ",PSt!hD4'piT`l#%";
      int int0 = 64;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "[:";
      int int0 = 1;
      try { 
        Parser.parse("[:", 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "[:U-$_J+l'Jt:";
      int int0 = 784;
      try { 
        Parser.parse("[:U-$_J+l'Jt:", 784);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `U-$`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      try { 
        Parser.parse("[:", (-419));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      try { 
        Parser.parse("[:", 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      try { 
        Parser.parse("^)}dsX$v(e*VFgWB1]", (-951));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = (-20);
      try { 
        Parser.parse("|z=*J)^-s", (-20));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "Ik_#3n&/P";
      Regexp regexp0 = Parser.parse("c|O", (-2712));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[0];
      int int0 = 2920;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-2487), 2920);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2487
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "[::]";
      Regexp regexp0 = Parser.parse("[::]", (-1127));
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      
      int int0 = 5;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp2;
      regexp2.subs = regexpArray0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 43, 5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Parser parser0 = new Parser("pC", (-2591));
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("pC", (-2591));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      int int0 = (-1976);
      Regexp regexp0 = Parser.parse("%p", (-1976));
      assertNotNull(regexp0);
      
      Regexp regexp1 = null;
      try {
        regexp1 = new Regexp(regexpArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Regexp regexp0 = Parser.parse("=:{,x", 128);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp[] regexpArray0 = new Regexp[12];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp1;
      regexp1.max = 42863;
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-435), 54);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -435
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "Bunes[";
      int int0 = 100;
      try { 
        Parser.parse("Bunes[", 100);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      int int0 = (-1997);
      Regexp regexp1 = Parser.parse("\f", 1353);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 2254, 414);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "\\5I~P";
      int int0 = 61;
      Regexp regexp0 = Parser.parse("\u0005I~P", 61);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\5`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = (-3636);
      try { 
        Parser.parse("?", (-3636));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "(?OE";
      int int0 = (-2704);
      try { 
        Parser.parse("(?OE", (-2704));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?O`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{wY-'-5tS\t", 405);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = (-947);
      Regexp regexp0 = Parser.parse("[\u0001aeZ@2f#;]}>#", (-947));
      assertNotNull(regexp0);
      
      String string0 = "O.\\0JK;C&WQi!%";
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      String string1 = "&ZJBh?%U";
      int int1 = 119;
      Regexp regexp2 = Parser.parse(string1, int1);
      assertNotNull(regexp2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      String string2 = "PLUS";
      int int2 = (-321);
      Regexp regexp3 = Parser.parse(string2, int2);
      assertNotNull(regexp3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "V=:{4x";
      Regexp regexp0 = Parser.parse("V=:{4x", 128);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1955), 9472);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1955
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("1[E-CFTGGbSV08'Q", (-3646));
      assertNotNull(parser0);
      
      int int0 = 1068;
      try { 
        Parser.parse("1[E-CFTGGbSV08'Q", 1068);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `E-C`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "\\x";
      int int0 = 45;
      Regexp regexp0 = Parser.parse("x", 45);
      assertNotNull(regexp0);
      
      String string1 = "\\Pt]";
      int int1 = 43456;
      try { 
        Parser.parse(string1, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `\\Pt`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Parser parser0 = new Parser("[:^graph:]", (-256));
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("5*D@@DCnceV>{8", 40);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = (-1127);
      Regexp regexp0 = Parser.parse("\u0001", (-1127));
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertNotNull(string0);
      assertEquals("(?i:\\x01)", string0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      int int1 = 4057;
      Regexp regexp2 = Parser.parse(string0, int1);
      assertNotNull(regexp2);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(int1 == int0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 92, 92);
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = Parser.parse("1\b", (-560));
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      
      Regexp regexp4 = new Regexp(regexp_Op0);
      assertNotNull(regexp4);
      assertTrue(regexp4.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      
      Regexp regexp5 = new Regexp(regexp_Op0);
      assertNotNull(regexp5);
      assertTrue(regexp5.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp0));
      assertTrue(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp3));
      
      Regexp regexp6 = new Regexp(regexp5);
      assertNotNull(regexp6);
      assertFalse(regexp6.equals((Object)regexp3));
      assertTrue(regexp6.equals((Object)regexp5));
      assertTrue(regexp6.equals((Object)regexp1));
      assertTrue(regexp6.equals((Object)regexp2));
      assertTrue(regexp6.equals((Object)regexp4));
      assertTrue(regexp6.equals((Object)regexp0));
      assertTrue(regexp5.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp0));
      assertTrue(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp3));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, (-560), 3737);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      int int0 = 97;
      Regexp regexp0 = Parser.parse("d", 97);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp[] regexpArray1 = regexp0.subs;
      assertNull(regexpArray1);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 4817, 122);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "(?i:";
      try { 
        Parser.parse("(?i:", 7001);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "(?i+";
      int int0 = 7001;
      try { 
        Parser.parse("(?i+", 7001);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?i+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      try { 
        Parser.parse("^[]FIJ_+Sgk", (-1976));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[]FIJ_+Sgk`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertNotNull(string0);
      assertEquals("\\z", string0);
      
      boolean boolean0 = regexp0.equals("A");
      assertFalse(boolean0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("z", 2301);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      
      Regexp regexp4 = Parser.parse("@pkYu4[wQV+BQA.", 98);
      assertNotNull(regexp4);
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      
      Regexp regexp5 = new Regexp(regexp_Op0);
      assertNotNull(regexp5);
      assertFalse(regexp5.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp1));
      
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp1;
      Parser parser0 = new Parser("@pkYu4[wQV+BQA.", 1263);
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = (-1084);
      int int1 = (-1054);
      Regexp regexp0 = Parser.parse("\u0006", (-1054));
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexp0.reinit();
      assertFalse(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp1);
      
      String string0 = "6||!++{:Q/WO8e";
      int int2 = 1352;
      try { 
        Parser.parse("6||!++{:Q/WO8e", 1352);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `++`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Regexp regexp0 = Parser.parse("27L|J|\"", (-1084));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "(?i:";
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      int int0 = 92;
      Regexp regexp1 = Parser.parse("\u0006", 92);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = (-1976);
      int[] intArray0 = new int[1];
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp[] regexpArray1 = new Regexp[7];
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      
      try { 
        Parser.parse("5Y(?-{", (-1976));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-{`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 10809;
      String string0 = "^\\x00-\\x{10FFFF}";
      Regexp regexp0 = Parser.parse("^x00-x{10FFFF}", 10809);
      assertNotNull(regexp0);
      
      String string1 = regexp0.toString();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\A(?i:X00-X\\{10FFFF\\})", string1);
      
      int int1 = 97;
      Regexp regexp1 = null;
      try {
        regexp1 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "\\x3iV,s0Wy[O";
      int int0 = 43396;
      try { 
        Parser.parse("x3iV,s0Wy[O", 43396);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[O`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 45;
      Regexp regexp0 = Parser.parse("[:x00-x{1M0FFFF}]", 45);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp1;
      int int1 = 2917;
      int int2 = 81;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("[^x00-x{10FFFF}]", 1356);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = (-2704);
      Regexp regexp0 = Parser.parse("A", (-2704));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      regexpArray0[4] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-2704), 119859);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2704
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Regexp regexp0 = Parser.parse("V=:{4,x", 128);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[1];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 128, 102);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Regexp regexp0 = Parser.parse("#8L\u0001!|", 16);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = new Regexp(regexp1);
      assertNotNull(regexp3);
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "#8L\\01[|";
      int int0 = 8;
      try { 
        Parser.parse("#8L\u0001[|", 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[|`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      String string0 = null;
      try { 
        Parser.parse("'Vp:jP[-", 116);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 1000;
      Regexp regexp0 = Parser.parse("\r", 1000);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      int int1 = 41;
      int int2 = 800;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 41, 800);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 41
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 8653;
      Regexp regexp0 = Parser.parse(";6T#A%BL{e6YWjdt|:kA", 8653);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertNotNull(string0);
      assertEquals("(?i:;6T#A%BL\\{E6YWJDT)|(?i::KA)", string0);
      
      String string1 = regexp0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("(?i:;6T#A%BL\\{E6YWJDT)|(?i::KA)", string1);
      
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      
      try { 
        Parser.parse("(?-m", (-1343));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-m`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Regexp regexp0 = Parser.parse("7%<'A", 67);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("3MY(ZU)oz", 67);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      int int0 = 4;
      Regexp regexp2 = Parser.parse("2tFRH!~W/", 4);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp regexp3 = new Regexp(regexp2);
      assertNotNull(regexp3);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      
      Parser parser0 = new Parser("3MY(ZU)oz", 128);
      assertNotNull(parser0);
      
      Regexp regexp4 = Parser.parse("Mn", 1407);
      assertNotNull(regexp4);
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      
      Regexp regexp5 = new Regexp(regexp2);
      assertNotNull(regexp5);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp4));
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp0));
      assertTrue(regexp5.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp4));
      
      try { 
        Parser.parse("OhEH[s[\u0007\"J+ \"@5L?", (-2371));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[s[\u0007\"J+ \"@5L?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "\\5\"=P";
      int int0 = (-388);
      Parser parser0 = new Parser("PqRdy0O.':", (-388));
      assertNotNull(parser0);
      
      int int1 = (-306);
      Regexp regexp0 = Parser.parse("r){7", (-306));
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("\u0005\"=P", 53);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Parser parser1 = new Parser(string0, int1);
      assertNotNull(parser1);
      assertFalse(int1 == int0);
      assertFalse(parser1.equals((Object)parser0));
      
      String string1 = null;
      // Undeclared exception!
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 3648;
      try { 
        Parser.parse(".+*?()|[]{}^$", (-2084));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `+*?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 2177;
      int int1 = 8;
      try { 
        Parser.parse("'Vp:jP[-", 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int[] intArray0 = new int[0];
      Regexp regexp0 = Parser.parse("Hebrew", 129);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("\n", 129);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = (-2904);
      String string0 = "\\3";
      Regexp regexp0 = Parser.parse("\u0003", (-2904));
      assertNotNull(regexp0);
      
      int int1 = (-3135);
      Regexp[] regexpArray0 = regexp0.subs;
      assertNull(regexpArray0);
      
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\3`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "uRqA>9K";
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      int int0 = 2424;
      String string1 = "w{/4YiS!1";
      Regexp regexp0 = Parser.parse("w{/4YiS!1", 2424);
      assertNotNull(regexp0);
      
      int int1 = 65516;
      Regexp regexp1 = Parser.parse("c\u0004~E", 65516);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        Parser.parse(string2, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\"JFK[/]Xq`rIoU6&K%", 2177);
      assertNotNull(regexp0);
      
      regexp0.max = 12444;
      regexp0.cap = 2177;
      regexp0.reinit();
      String string0 = regexp0.toString();
      assertNotNull(string0);
      assertEquals("", string0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("", 12444);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Parser parser0 = new Parser("", 253);
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("[^x00-x{10FFFF}]", 40);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Parser parser0 = new Parser("[:cntrl:]", (-2678));
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp0 = Parser.parse("s)#jxs", (-262));
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("s)#jxs", 120067);
      assertNotNull(regexp2);
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      regexpArray0[1] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op0);
      assertNotNull(regexp4);
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      
      regexpArray0[3] = regexp4;
      Regexp regexp5 = Parser.parse("\u0000", (-19));
      assertNotNull(regexp5);
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp1));
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp1);
      
      regexpArray0[4] = regexp5;
      Regexp regexp6 = Parser.parse("'1U-j", (-2711));
      assertNotNull(regexp6);
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp1));
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp1);
      
      regexpArray0[5] = regexp6;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 114, 6000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 114
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = (-3636);
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertNotNull(string0);
      assertEquals("(?-s:.)", string0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp1 = new Regexp(regexp_Op1);
      assertNotNull(regexp1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("[:KQ]s?|", (-6761));
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = Parser.parse("pP", (-3636));
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      
      int int1 = 7;
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp3;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp3;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp3;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 7, 43232);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Regexp regexp0 = Parser.parse("v5= Of", 2068);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-1351), (-1351));
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      
      int int0 = 55;
      Regexp regexp3 = Parser.parse("3C^1:<YbO4P0", 55);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      
      Regexp regexp4 = Parser.parse("3C^1:<YbO4P0", 1);
      assertNotNull(regexp4);
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp0);
      
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 94);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = Parser.parse("L#t{c3'`W1-Dp|.", 97);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexp1.max = (-1182);
      int int0 = 35;
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp0;
      regexp1.subs = regexpArray0;
      Regexp regexp3 = Parser.parse("Pr%?\"M/R~{-Tl{7,\"", 35);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      
      Regexp regexp4 = new Regexp(regexp1);
      assertNotNull(regexp4);
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp3));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp5 = new Regexp(regexp_Op0);
      assertNotNull(regexp5);
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      
      Regexp regexp6 = new Regexp(regexp0);
      assertNotNull(regexp6);
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp4));
      assertTrue(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp1));
      assertTrue(regexp6.equals((Object)regexp2));
      assertTrue(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp5));
      
      int int1 = (-1499);
      Regexp regexp7 = Parser.parse("Pr%?\"M/R~{-Tl{7,\"", 781);
      assertNotNull(regexp7);
      assertFalse(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp0));
      assertNotSame(regexp7, regexp4);
      assertNotSame(regexp7, regexp5);
      assertNotSame(regexp7, regexp3);
      assertNotSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp1);
      assertNotSame(regexp7, regexp6);
      assertNotSame(regexp7, regexp0);
      
      Regexp[] regexpArray1 = regexp0.subs;
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray1, regexpArray0);
      
      int int2 = 130;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1499
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 45;
      Regexp regexp0 = Parser.parse("[:x00-x{10FFFF}]", 45);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[3];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2917, 81);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp_Op1);
      assertNotNull(regexp1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("A9H#__Ybx7", (-1275));
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      try { 
        Parser.parse("[:/", (-191));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:/`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      Regexp regexp3 = new Regexp(regexp0);
      assertNotNull(regexp3);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      
      regexpArray0[4] = regexp3;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexpArray0[8] = regexp0;
      regexp1.subs = regexpArray0;
      Regexp regexp4 = Parser.parse("aD4y5_r:>?Z^KW$xn", (-3636));
      assertNotNull(regexp4);
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
      
      String string0 = regexp0.toString();
      assertNotNull(string0);
      assertFalse(regexp0.equals((Object)regexp4));
      assertTrue(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertEquals("(?-s:.)", string0);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp1);
      
      regexp1.reinit();
      assertFalse(regexp0.equals((Object)regexp4));
      assertTrue(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp3));
      assertFalse(regexp1.equals((Object)regexp4));
      assertTrue(regexp1.equals((Object)regexp2));
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp3);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp4);
      
      Parser parser0 = new Parser("~$n/#mcT/Q]", (-1607));
      assertNotNull(parser0);
      
      Regexp regexp5 = Parser.parse("aD4y5_r:>?Z^KW$xn", 8);
      assertNotNull(regexp5);
      assertFalse(regexp5.equals((Object)regexp1));
      assertTrue(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp4);
      
      Regexp regexp6 = Parser.parse("$-t0nA@?", 8);
      assertNotNull(regexp6);
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp3));
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp3);
      
      Regexp regexp7 = new Regexp(regexp_Op0);
      assertNotNull(regexp7);
      assertTrue(regexp7.equals((Object)regexp1));
      assertTrue(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp6));
      assertTrue(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp5));
      assertTrue(regexp7.equals((Object)regexp3));
      
      Regexp regexp8 = Parser.parse(".X?1_Z/}q=", 10);
      assertNotNull(regexp8);
      assertFalse(regexp8.equals((Object)regexp1));
      assertFalse(regexp8.equals((Object)regexp4));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp0));
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp3));
      assertFalse(regexp8.equals((Object)regexp6));
      assertFalse(regexp8.equals((Object)regexp7));
      assertNotSame(regexp8, regexp1);
      assertNotSame(regexp8, regexp4);
      assertNotSame(regexp8, regexp2);
      assertNotSame(regexp8, regexp0);
      assertNotSame(regexp8, regexp5);
      assertNotSame(regexp8, regexp3);
      assertNotSame(regexp8, regexp6);
      assertNotSame(regexp8, regexp7);
      
      Regexp[] regexpArray1 = new Regexp[6];
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      
      regexpArray1[0] = regexp1;
      regexpArray1[5] = regexp6;
      regexpArray1[2] = regexp0;
      regexpArray1[3] = regexp0;
      regexpArray1[4] = regexp5;
      regexpArray1[5] = regexp4;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, (-1607), 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1607
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 81;
      String string0 = "(?)?(>mR";
      try { 
        Parser.parse("(?)?(>mR", 81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = (-2260);
      Parser parser0 = new Parser("g]$TY\u0002H6FD$c0*KT", (-2260));
      assertNotNull(parser0);
      
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      
      regexpArray0[1] = regexp2;
      Regexp regexp3 = Parser.parse("g]$TY\u0002H6FD$c0*KT", (-2260));
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexpArray0[2]);
      assertNotNull(regexp4);
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp3));
      
      regexpArray0[3] = regexp4;
      String string0 = "sX?uY 7Pjrk\"-Jl2+9V";
      Regexp regexp5 = Parser.parse(string0, int0);
      assertNotNull(regexp5);
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp1));
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp1);
      
      regexpArray0[4] = regexp5;
      String string1 = "llhecd\"XT<C8z";
      int int1 = 65103;
      Regexp regexp6 = Parser.parse(string1, int1);
      assertNotNull(regexp6);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp2));
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp2);
      
      regexpArray0[5] = regexp6;
      String string2 = "[:\\x{2060}-\\x{2064}\\x{206a}-\\x{206f}\\x{d800}-\\x{f8ff}\\x{feff}\\x{fff9}-\\x{fffb}\\x{110bd}\\x{1d173}-\\x{1d17a}\\x{e0001}\\x{e0020}-\\x{e007f}\\x{f0000}-\\x{ffffd}\\x{100000}-\\x{10fffd}]";
      int int2 = (-890);
      Regexp regexp7 = Parser.parse(string2, int2);
      assertNotNull(regexp7);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp5));
      assertNotSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp3);
      assertNotSame(regexp7, regexp4);
      assertNotSame(regexp7, regexp6);
      assertNotSame(regexp7, regexp1);
      assertNotSame(regexp7, regexp0);
      assertNotSame(regexp7, regexp5);
      
      regexpArray0[6] = regexp7;
      String string3 = "j";
      int int3 = 115;
      Regexp regexp8 = Parser.parse(string3, int3);
      assertNotNull(regexp8);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp1));
      assertFalse(regexp8.equals((Object)regexp0));
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp4));
      assertFalse(regexp8.equals((Object)regexp3));
      assertFalse(regexp8.equals((Object)regexp6));
      assertFalse(regexp8.equals((Object)regexp2));
      assertNotSame(regexp8, regexp7);
      assertNotSame(regexp8, regexp1);
      assertNotSame(regexp8, regexp0);
      assertNotSame(regexp8, regexp5);
      assertNotSame(regexp8, regexp4);
      assertNotSame(regexp8, regexp3);
      assertNotSame(regexp8, regexp6);
      assertNotSame(regexp8, regexp2);
      
      regexpArray0[7] = regexp8;
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      Regexp regexp9 = new Regexp(regexp_Op1);
      assertNotNull(regexp9);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp9.equals((Object)regexp7));
      assertFalse(regexp9.equals((Object)regexp5));
      assertFalse(regexp9.equals((Object)regexp0));
      assertFalse(regexp9.equals((Object)regexp2));
      assertFalse(regexp9.equals((Object)regexp4));
      assertFalse(regexp9.equals((Object)regexp1));
      assertFalse(regexp9.equals((Object)regexp6));
      assertFalse(regexp9.equals((Object)regexp8));
      assertFalse(regexp9.equals((Object)regexp3));
      
      regexpArray0[8] = regexp9;
      int int4 = 8;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int3, int4);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "(?P^>";
      int int0 = (-3);
      Parser parser0 = new Parser("(?P^>", (-3));
      assertNotNull(parser0);
      
      String string1 = "\\D";
      Regexp regexp0 = Parser.parse("D", (-3));
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("Pld@ZM", (-3));
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      try { 
        Parser.parse("(?P^>", (-3));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Regexp regexp0 = Parser.parse("={4,", 128);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      int int0 = (-2936);
      try { 
        Parser.parse("[:IogN&K%", 128);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:IogN&K%`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "\\xr\\";
      Regexp[] regexpArray0 = new Regexp[3];
      int int0 = (-1736);
      Regexp regexp0 = Parser.parse("xr", (-1736));
      assertNotNull(regexp0);
      
      Regexp regexp1 = null;
      try {
        regexp1 = new Regexp(regexpArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      try { 
        Parser.parse("[:x{100000}-x{10fffd}]", (-20));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `}-x`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Regexp regexp0 = Parser.parse("';%ytzF,_L@T.8tB=;=", (-1084));
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      String string0 = regexp1.toString();
      assertNotNull(string0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertEquals("';%ytzF,_L@T(?-s:.)8tB=;=", string0);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp1;
      regexpArray0[5] = regexp0;
      String string1 = "\\x{";
      Regexp regexp2 = Parser.parse("x{", (-1084));
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      int int0 = (-401);
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int0, int0);
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      
      Regexp regexp4 = new Regexp(regexp3);
      assertNotNull(regexp4);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      
      String string2 = regexp0.toString();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertEquals("';%ytzF,_L@T(?-s:.)8tB=;=", string2);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      
      int int1 = (-1564);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, int1, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1564
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Regexp regexp0 = new Regexp((Regexp.Op) null);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      String string0 = "\\P{f0000\\}-\\\\x\\{ffffd\\}\\\\x\\{100000\\}-\\\\x\\{10fffd\\}\\]";
      Regexp regexp2 = Parser.parse("P{f0000}-\\x{ffffd}\\x{100000}-\\x{10fffd}]", 240);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      int int0 = 7677;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `\\P{f0000\\}`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      String string0 = regexp0.toString();
      assertNotNull(string0);
      assertEquals("(?-s:.)", string0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 6052;
      intArray0[1] = 6052;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      
      String string1 = regexp2.toString();
      assertNotNull(string1);
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("(?-s:.)", string1);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      boolean boolean0 = regexp2.equals("SK-.EWXLZ6@TS7ZxAQ");
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertFalse(boolean0);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp regexp3 = Parser.parse("v{62|y", 6052);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[0];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2023, 6052);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2023
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 7687;
      Regexp regexp0 = Parser.parse("M|mJ$H]6", 7687);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp1 = Parser.parse("M|mJ$H]6", 1041);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      regexp1.reinit();
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
