/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 12:12:47 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)102;
      Utility.equals(byteArray0, byteArray0);
      Utility.classOrInterface((byte)93);
      try { 
        Utility.typeOfSignature("GEb7$671");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GEb7$671
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "Qu#LA";
      try { 
        Utility.typeOfSignature("Qu#LA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qu#LA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1592, (int) (byte) (-126));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)76;
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-96));
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantFloat constantFloat0 = new ConstantFloat(1073.483F);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 66, (int) (byte) (-80), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String string0 = "5ab&";
      try { 
        Utility.typeOfSignature("5ab&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5ab&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 216;
      Utility.setBit(216, 216);
      String string0 = "er{Sb#^@pI";
      Utility.convertString("er{Sb#^@pI");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString(216, false);
      String string1 = "3L)";
      try { 
        Utility.typeOfSignature("3L)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3L)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte) (-18);
      byteArray0[7] = (byte) (-8);
      byteArray0[8] = (byte) (-66);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 375, 39, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Utility.convertString(" methods:\n");
      int int0 = (-970);
      Utility.setBit((-970), (-970));
      Utility.compactClassName("compiler version\t");
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("compiler version\t", false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "compiler version\t";
      Utility.printArray(objectArray0, false, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 109
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byte byte0 = (byte)63;
      byteArray0[1] = (byte)63;
      byte byte1 = (byte) (-115);
      byteArray0[2] = (byte) (-115);
      byte byte2 = (byte) (-113);
      byteArray0[3] = (byte) (-113);
      byte byte3 = (byte) (-27);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte)68;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, (-522), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)33;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("The magic number must contain at least one byte");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-60), (int) (byte)33, true);
      assertEquals("0:    lcmp\n1:    jsr\t\t#-15310\n4:    lload_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Utility.isSet(256, 256);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)34, (byte)21);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("L{C#Uz4=6{5cCu,9!!,;V");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("L{C#Uz4=6{5cCu,9!!,;V");
      constantArray0[4] = (Constant) constantUtf8_1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(848, 256);
      constantArray0[5] = (Constant) constantMethodHandle0;
      ConstantLong constantLong0 = new ConstantLong(2218L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[6] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "&@W_H['&[bH<'lR";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("&@W_H['&[bH<'lR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &@W_H['&[bH<'lR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)84;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3246, (int) (byte)84);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)72;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("48");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 48
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)101;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "yxs<lDk/k065KSg";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yxs<lDk/k065KSg");
      Utility.getSignature("yxs<lDk/k065KSg");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Lyxs<lDk/k065KSg;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lyxs<lDk/k065KSg;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = Utility.accessToString(1828, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)57;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("10 83 85 48 38 39", string1);
      
      String string2 = Utility.compactClassName("protected native abstract", false);
      assertTrue(string2.equals((Object)string0));
      
      int int0 = Utility.clearBit(91, (byte) (-123));
      assertEquals(91, int0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string3 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fstore\t\t%57", string3);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.isSet(75, (-640));
      String string0 = Utility.classOrInterface(1092);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte)75;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantLong constantLong0 = new ConstantLong((byte)75);
      constantArray0[1] = (Constant) constantLong0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("class");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "1$5uL";
      // Undeclared exception!
      try { 
        Utility.decode("1$5uL", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"5u\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)115;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 897, 897);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.fillup("U}QY`-#", 547, false, '4');
      Utility.setBit(182, (-889275714));
      Utility.format(47, 9, true, 'Q');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 65, 61, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte)85;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-37), (int) (byte) (-48), false);
      assertEquals("0:    lconst_1\n1:    <illegal opcode>\n2:    nop\n3:    iconst_m1\n4:    <illegal opcode>\n5:    fload_2\n6:    <illegal opcode>\n7:    castore\n", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-44);
      byteArray0[7] = (byte) (-76);
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)39, (-2090));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.compactClassName("-]44H!=i_4I|", "class", true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) "-]44H!=i_4I|";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "-]44H!=i_4I|";
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1517, (int) (byte)63);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.signatureToString("Vl6<5m.{2");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-68);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)125, (byte)125);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-3), 197, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    bipush\t\t125
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)39, (-2090));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-1);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-32), (int) (byte) (-1));
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte) (-109);
      objectArray0[1] = (Object) (byte) (-109);
      objectArray0[2] = (Object) (byte) (-1);
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) (byte) (-109);
      objectArray0[5] = (Object) "0:    <illegal opcode>\n1:    i2s\n2:    impdep2\n";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "0:    <illegal opcode>\n1:    i2s\n2:    impdep2\n";
      Object object0 = new Object();
      objectArray0[8] = object0;
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("0:    <illegal opcode>\n1:    i2s\n2:    impdep2\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    <illegal opcode>
         // 1:    i2s
         // 2:    impdep2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Utility.isJavaIdentifierPart('Q');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)111;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)59, 77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.classOrInterface((-2111));
      String string0 = Utility.classOrInterface((-2111));
      assertEquals("interface", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("if_icmplt\t\t#2665", string1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 73;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String string0 = Utility.format(73, 2276, true, 'k');
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 73kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.searchOpcode("#M(");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)0;
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)124);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2052, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utility.isJavaIdentifierPart('<');
      String string0 = "Invalid type: ";
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byte[] byteArray1 = Utility.decode("Invalid type: ", false);
      Utility.toHexString(byteArray1);
      ConstantPool constantPool0 = null;
      int int0 = 233;
      int int1 = 34;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 233, 34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "goto";
      int int0 = (-1984);
      Utility.fillup("goto", (-1984), false, 'e');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('A');
      Utility.getSignature("goto");
      Utility.methodSignatureReturnType("Bogus", true);
      Utility.compactClassName("Bogus", false);
      boolean boolean0 = true;
      Utility.compactClassName("byte", true);
      Utility.typeOfSignature("Bogus");
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-9);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0);
      try { 
        Utility.typeOfMethodSignature("ishl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ishl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)13;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)92, 170, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Utility.fillup("", 183, false, 'B');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-325), 1772, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    f2d
         // 1:    return
         // 2:    f2i
         // 3:    ifnonnull\t\t#-5256
         // 6:    dload\t\t%48
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "VLpjD:";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "VLpjD:");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.clearBit(1214, 1214);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string1 = "6K3(H?+O/YhMCrA0G";
      try { 
        Utility.typeOfSignature("6K3(H?+O/YhMCrA0G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6K3(H?+O/YhMCrA0G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = Utility.classOrInterface((-440));
      assertEquals("interface", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantString constantString0 = new ConstantString((byte)76);
      constantArray0[0] = (Constant) constantString0;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[1] = constant0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("`@b$Ezb0");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(354, (byte) (-6));
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("if_acmpeq\t\t#5964", string1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-115);
      byteArray0[8] = (byte)53;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1437851314), (int) (byte)24, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.isSet((byte) (-19), 18);
      try { 
        Utility.methodSignatureReturnType("0:    <illegal opcode>\n1:    pop\n2:    dload\t\t%68\n4:    monitorenter\n5:    land\n6:    lconst_1\n7:    f2d\n8:    saload\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    <illegal opcode>
         // 1:    pop
         // 2:    dload\t\t%68
         // 4:    monitorenter
         // 5:    land
         // 6:    lconst_1
         // 7:    f2d
         // 8:    saload
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)45;
      byteArray0[1] = (byte)45;
      ConstantPool constantPool0 = null;
      int int0 = 46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 46, (int) (byte)45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-8);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong((byte)29);
      constantArray0[0] = (Constant) constantLong0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(")\t");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iload_3", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte) (-105);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), (-1448), true);
      assertEquals("0:    nop\n1:    fcmpl\n2:    impdep2\n3:    i2b\n4:    <illegal opcode>\n5:    dcmpl\n", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "MEPY\\y9pp{";
      Utility.getSignature("MEPYy9pp{");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1295), (int) (byte) (-85));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fmul
         // 1:    lconst_0
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = Utility.convertString("invokevirtual");
      assertEquals("invokevirtual", string0);
      
      boolean boolean0 = Utility.isSet(559, 559);
      String string1 = Utility.accessToString(103, false);
      assertEquals("public private protected synchronized volatile", string1);
      
      Utility.compactClassName("anewarray", true);
      int int0 = Utility.setBit(36, 814);
      assertEquals(16420, int0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "invokevirtual";
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)44;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      Utility.compactClassName("invokevirtual", "C", true);
      byte[] byteArray1 = Utility.decode("Cy5 ;*kn,}$5", false);
      assertArrayEquals(new byte[] {(byte)67, (byte)121, (byte)53, (byte)32, (byte)59, (byte)42, (byte)107, (byte)110, (byte)44, (byte)125}, byteArray1);
      assertEquals(10, byteArray1.length);
      
      String string2 = Utility.printArray(objectArray0, true, false);
      assertNotNull(string2);
      assertEquals("{invokevirtual}", string2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Utility.isSet(379, 1354);
      Utility.isJavaIdentifierPart('?');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), (int) (byte)95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    istore_3
         // 1:    lstore_3
         // 2:    swap
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Utility.decode("X|h!jB,>$|uq$", false);
      try { 
        Utility.methodSignatureArgumentTypes("X|h!jB,>$|uq$", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X|h!jB,>$|uq$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "goto_w");
      String string0 = Utility.fillup("f2d", 0, true, 't');
      assertEquals("f2d", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "f2d";
      stringArray0[1] = "f2d";
      stringArray0[2] = "f2d";
      stringArray0[3] = "goto_w";
      stringArray0[4] = "wC[fErEok]2";
      stringArray0[5] = "";
      String string1 = Utility.methodTypeToSignature("wC[fErEok]2", stringArray0);
      assertEquals("(Lf2d;Lf2d;Lf2d;Lgoto_w;[LwC;L;)[LwC;", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte) (-77);
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "EnclosingMethod";
      try { 
        Utility.typeOfSignature("EnclosingMethod");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EnclosingMethod
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)87;
      byte byte1 = (byte) (-57);
      byte byte2 = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      byte byte3 = (byte)99;
      byteArray0[3] = (byte)99;
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("l)RU_dA?@o,l");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInteger constantInteger0 = new ConstantInteger((-812));
      constantArray0[1] = (Constant) constantInteger0;
      ConstantString constantString0 = new ConstantString((byte)0);
      constantArray0[2] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2868, 90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.clearBit(1963, (-2047));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte) (-78);
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, (-1347), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Utility.isJavaIdentifierPart('>');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)99;
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("l)RU_dA?@o,l");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInteger constantInteger0 = new ConstantInteger((-812));
      constantArray0[1] = (Constant) constantInteger0;
      ConstantString constantString0 = new ConstantString((byte)76);
      constantArray0[2] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2868, 90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)86;
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte) (-119));
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2817, 48, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = Utility.accessToString((-2498));
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      File file0 = MockFile.createTempFile(")Ri", ")Ri", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) uRI0;
      Object object0 = new Object();
      mockFile0.setExecutable(false, true);
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) ")Ri";
      objectArray0[4] = (Object) "private protected static final synchronized interface abstract synthetic annotation enum";
      PrintWriter printWriter0 = mockPrintWriter0.printf("private protected static final synchronized interface abstract synthetic annotation enum", objectArray0);
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) "private protected static final synchronized interface abstract synthetic annotation enum";
      objectArray1[1] = object0;
      objectArray1[2] = (Object) mockPrintWriter0;
      objectArray1[3] = object0;
      objectArray1[4] = (Object) file0;
      Utility.printArray(printWriter0, objectArray1);
      String string1 = Utility.convertString("private protected static final synchronized interface abstract synthetic annotation enum");
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte) (-117);
      byteArray0[8] = (byte) (-62);
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), (int) (byte) (-85));
      assertEquals("0:    <illegal opcode>\n1:    pop2\n2:    jsr_w\t\t#-1425528001\n7:    f2i\n8:    monitorenter\n", string2);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.format(687, (byte)106, true, 'y');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("dmul", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)25;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 8, 8, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "FC\"\\$Z'sn^";
      Utility.typeOfSignature("FC\"$Z'sn^");
      Utility.accessToString((int) (byte)6);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("FC\"$Z'sn^");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("private protected");
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        constantPool0.getConstant((-1911));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -1911. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      short short0 = Utility.searchOpcode("`@}Zew_N_9.T-");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte) (-65);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-297), (int) (byte)65);
      assertEquals("0:    <illegal opcode>\n1:    lstore_2\n2:    faload\n3:    ifgt\t\t#21655\n6:    lshr\n7:    athrow\n", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)33;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2, (int) (byte)33, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 13429. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      byte byte0 = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)113;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 166, (-3030), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "d4y6rt#";
      Utility.replace("d4y6rt#", "d4y6rt#", "d4y6rt#");
      try { 
        Utility.typeOfSignature("!/H#^x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /H#^x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "$TH64XeG==8)";
      objectArray0[1] = (Object) "$TH64XeG==8)";
      PrintStream printStream0 = mockPrintStream0.printf("$TH64XeG==8)", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      Utility.compactClassName("pDFpDi~", "$TH64XeG==8)", false);
      Utility.compactClassName("pDFpDi~", "invokedynamic", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)16, (int) (byte)16, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Utility.clearBit(148, 148);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-62);
      Constant[] constantArray0 = new Constant[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[0] = (Constant) constantString0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)7, (byte) (-62));
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(460, 460);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[2] = (Constant) constantNameAndType1;
      ConstantDouble constantDouble0 = new ConstantDouble(148);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[3] = (Constant) constantDouble1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[4] = (Constant) constantMethodType0;
      ConstantInteger constantInteger0 = new ConstantInteger((-3014));
      constantArray0[5] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 116, 183, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "L}BO=t)Jfe};V";
      Utility.methodSignatureReturnType("L}BO=t)Jfe};V");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "L}BO=t)Jfe};V";
      objectArray0[1] = (Object) "long";
      objectArray0[2] = (Object) "L}BO=t)Jfe};V";
      objectArray0[3] = (Object) "L}BO=t)Jfe};V";
      objectArray0[4] = (Object) "L}BO=t)Jfe};V";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "long";
      objectArray0[7] = (Object) "L}BO=t)Jfe};V";
      Utility.printArray(objectArray0);
      Utility.accessToString((-1911372625));
      Utility.convertString("public private protected static synchronized transient abstract enum");
      Utility.accessToString(240, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-100);
      Utility.equals(byteArray0, byteArray0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-24);
      byteArray0[2] = (byte)104;
      byteArray0[6] = (byte)14;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 48, 212);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = false;
      char char0 = ':';
      Utility.format(836, 73, false, ':');
      Utility.compactClassName("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::836");
      try { 
        Utility.typeOfSignature("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::836");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::836
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)33;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)4, (-4056));
      assertEquals("4:    iconst_1\n5:    lload_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-92);
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble((-541.086578));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantClass constantClass0 = new ConstantClass((-2272));
      constantArray0[2] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)9, 5386);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-97);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)62, (int) (byte)69);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "#V!`9Yxea#L{mns?B";
      try { 
        Utility.typeOfSignature("#V!`9Yxea#L{mns?B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #V!`9Yxea#L{mns?B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.fillup("1ik)>cGSs3]sb:L", 83, true, 'q');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "1ik)>cGSs3]sb:L";
      objectArray0[1] = (Object) "1ik)>cGSs3]sb:L";
      objectArray0[2] = (Object) "1ik)>cGSs3]sb:Lqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq";
      objectArray0[3] = (Object) "1ik)>cGSs3]sb:Lqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq";
      objectArray0[4] = (Object) "1ik)>cGSs3]sb:Lqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq";
      objectArray0[5] = (Object) "1ik)>cGSs3]sb:L";
      objectArray0[6] = (Object) "1ik)>cGSs3]sb:Lqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq";
      objectArray0[7] = (Object) "1ik)>cGSs3]sb:L";
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)81;
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("\"1ik)>cGSs3]sb:L\", \"1ik)>cGSs3]sb:L\", \"1ik)>cGSs3]sb:Lqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\", \"1ik)>cGSs3]sb:Lqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\", \"1ik)>cGSs3]sb:Lqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\", \"1ik)>cGSs3]sb:L\", \"1ik)>cGSs3]sb:Lqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\", \"1ik)>cGSs3]sb:L\"");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantClass constantClass0 = new ConstantClass(86);
      constantArray0[1] = (Constant) constantClass0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)52);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)51, (int) (byte)73, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)14;
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((-856.39577));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)119, 1463);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-34);
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)27;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "double");
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-118);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)47, (int) (byte) (-118), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.compactClassName("'=", true);
      assertEquals("'=", string0);
      
      Utility.decode("'=", false);
      byte[] byteArray0 = Utility.decode("\t\t", false);
      assertArrayEquals(new byte[] {(byte)9, (byte)9}, byteArray0);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)23;
      byteArray1[1] = (byte) (-65);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2004782359), (byte) (-65));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray1, constantPool0, (-2004782359), (-2004782359));
      assertEquals("0:    fload\t\t%191\n", string1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)90;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-614), 176);
      assertEquals("0:    i2c\n1:    dup_x1\n", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodTypeToSignature("!TVMDU?pGH&,", (String[]) null);
      Utility.printArray((Object[]) null, true, true);
      Utility.compactClassName("java.lang.Float");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-87);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 49, (int) (byte)94);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 102;
      Utility.setBit((-1193), 102);
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("5D$FCn4F`KfmI'^d:", false);
      Utility.compactClassName("5D$FCn4F`KfmI'^d:");
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2164, 2164);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.accessToString((-2823), true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)81;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte) (-1);
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantDouble constantDouble0 = new ConstantDouble(3341.9268298763486);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 125, (-1794));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-42);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), (int) (byte)82);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("/f");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)73, (byte) (-80));
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)73, 192);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantLong constantLong0 = new ConstantLong((byte) (-66));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[3] = (Constant) constantLong1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[4] = (Constant) constantInterfaceMethodref1;
      ConstantInteger constantInteger0 = new ConstantInteger(2256);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[5] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = Utility.compactClassName(";Ze22=UK#");
      String string1 = Utility.replace(";Ze22=UK#", "2r09FV~&MxaPx5Nht", "2r09FV~&MxaPx5Nht");
      assertTrue(string1.equals((Object)string0));
      
      int int0 = Utility.setBit(1718, 2043);
      assertEquals(134219446, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)65;
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, 0, 134219446);
      assertEquals("0:    dstore\t\t%47\n2:    <illegal opcode>\n3:    lstore_2\n", string2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = ".Z{ 7";
      try { 
        Utility.typeOfSignature(".Z{ 7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .Z{ 7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utility.compactClassName("/ xJv*FEFZ", false);
      Utility.classOrInterface(341);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ". xJv*FEFZ";
      stringArray0[1] = ". xJv*FEFZ";
      stringArray0[2] = ". xJv*FEFZ";
      stringArray0[3] = "/ xJv*FEFZ";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[4] = "int";
      Utility.methodTypeToSignature("/ xJv*FEFZ", stringArray0);
      Utility.compactClassName("D!H`_7e");
      Utility.methodSignatureToString("(L/;L/;L/;L/;I)L/;", "D!H`_7e", ". xJv*FEFZ", false);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureReturnType("/ xJv*FEFZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `/ xJv*FEFZ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.accessToString(1684, true);
      Utility.setBit(1684, 8);
      Utility.searchOpcode("protected final transient abstract");
      Utility.convertString("8Z9/!_#o~o}<Y8");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte)118;
      byteArray0[8] = (byte) (-35);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Constant[] constantArray0 = new Constant[1];
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantFloat constantFloat0 = new ConstantFloat(dataInputStream0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"3cAPDJdJ;52[&[";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("\"3cAPDJdJ;52[&[", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[&[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Utility.methodSignatureReturnType(">,c?6)B\"#Id");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte) (-17);
      byteArray0[7] = (byte)100;
      byteArray0[8] = (byte)50;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 34, (-539));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.format(452, 465, false, '}');
      byte[] byteArray0 = Utility.decode("}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}452", false);
      assertEquals(465, byteArray0.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "V";
      stringArray0[1] = "V";
      stringArray0[2] = "V";
      stringArray0[3] = "V";
      stringArray0[4] = "V";
      stringArray0[5] = "V";
      stringArray0[6] = "V";
      String string0 = Utility.methodTypeToSignature("V", stringArray0);
      assertEquals("(LV;LV;LV;LV;LV;LV;LV;)LV;", string0);
      
      String string1 = Utility.convertString("Z[!");
      assertEquals("Z[!", string1);
      
      String string2 = Utility.format((-945), 465, false, '}');
      assertEquals("}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}-945", string2);
      
      Utility.methodSignatureArgumentTypes("(LV;LV;LV;LV;LV;LV;LV;)LV;");
      String string3 = Utility.accessToString(2950);
      assertEquals("private protected transient native interface strictfp", string3);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte) (-35);
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte) (-111);
      byteArray0[8] = (byte)83;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2062, (int) (byte) (-35));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Utility.classOrInterface(43);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-80);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)22, 35, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      String string1 = "N}/L.'HUQtX-+0:n]y";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("N}/L.'HUQtX-+0:n]y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N}/L.'HUQtX-+0:n]y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.methodTypeToSignature("{e1x", (String[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dreturn");
      Utility.compactClassName("{e1x");
      Utility.methodSignatureArgumentTypes("()L{e1x;", false);
      Utility.replace("()L{e1x;", "()L{e1x;", "()L{e1x;");
      Utility.methodSignatureReturnType("()L{e1x;", false);
      Utility.isSet((-501), (-501));
      Utility.searchOpcode("()L{e1x;");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte) (-110);
      byteArray0[7] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 72
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)85;
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)55;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)66, (-114));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "v{W53)";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "v{W53)");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)11;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 102, 98);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(":h1]gO/Y,s.B,", false);
      Utility.setBit(141, 141);
      Utility.setBit(48, 14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 16432, 8333, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-101);
      byteArray0[0] = (byte) (-120);
      byteArray0[0] = (byte)37;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 71, (int) (byte)37, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "#4Fw]a8";
      Utility.searchOpcode("#4Fw]a8");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-10);
      byte byte0 = (byte)126;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)90;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-10), (int) (short) (-1), true);
      try { 
        Utility.typeOfMethodSignature("}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: }
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-30);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("aaload", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(M)MjHBgHw", (String) null, "109llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M)MjHBgHw'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('@');
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string1 = Utility.encode(byteArray0, false);
      String string2 = Utility.convertString("$afa$c1$ff");
      assertTrue(string2.equals((Object)string1));
      
      Utility.signatureToString("Sensitive");
      String string3 = Utility.compactClassName("invokestatic", "getfield", true);
      assertEquals("invokestatic", string3);
      
      int int0 = Utility.clearBit((byte)97, (byte)97);
      assertEquals(97, int0);
      
      String string4 = Utility.replace("The FilenameFilter must not be null", "=i^_5roc", "lrem");
      assertEquals("The FilenameFilter must not be null", string4);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "MlmDezf;UnU3aU:r";
      try { 
        Utility.methodSignatureReturnType("MlmDezf;UnU3aU:r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MlmDezf;UnU3aU:r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)32;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)61;
      Utility.equals(byteArray0, byteArray0);
      Utility.clearBit((byte)73, (byte)89);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 123, (int) (byte)32, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "Unreachable default case reached!";
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte) (-98);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 9, (int) (byte)52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.accessToString((-2823), true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte) (-1);
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantDouble constantDouble0 = new ConstantDouble(3341.6777520562);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 125, (-1794));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte)95;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 48, 212);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.format((-2171), (-2171), false, '+');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)58;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2313, 2313, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ifle");
      String string0 = Utility.getSignature("_X%5L)MloeVx+d/u");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte) (-65);
      objectArray0[2] = (Object) (byte)42;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) (byte)13;
      objectArray0[5] = (Object) null;
      String string1 = Utility.printArray(objectArray0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, true);
      try { 
        Utility.typeOfSignature("O#wd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O#wd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Utility.isJavaIdentifierPart('-');
      Utility.replace("dstore_3", "void", "dstore_3");
      Utility.setBit(0, 85);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "void";
      stringArray0[1] = "iflt";
      stringArray0[2] = "dstore_3";
      stringArray0[3] = "iflt";
      stringArray0[4] = "iflt";
      stringArray0[5] = "dstore_3";
      stringArray0[6] = "'";
      stringArray0[7] = "dstore_3";
      stringArray0[8] = "dstore_3";
      try { 
        Utility.methodTypeToSignature("iflt", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-28);
      byte[] byteArray1 = new byte[0];
      Utility.equals(byteArray0, byteArray1);
      try { 
        Utility.methodSignatureArgumentTypes("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("drem", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%,");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("istore\t\t%158", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("W&U7,8x7");
      try { 
        Utility.typeOfSignature("W&U7,8x7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W&U7,8x7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)61;
      Utility.equals(byteArray0, byteArray0);
      Utility.clearBit((byte)72, (byte)85);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 123, (int) (byte)67, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = ", code_length = ";
      try { 
        Utility.typeOfSignature(", code_length = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , code_length = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-40);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.toHexString(byteArray0);
      Utility.clearBit((byte) (-40), (byte)79);
      try { 
        Utility.typeOfSignature("%ul%>G<,^3xMw}m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %ul%>G<,^3xMw}m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = Utility.getSignature("F)dO!x=");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte) (-46);
      byteArray0[7] = (byte)62;
      byteArray0[8] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fastore", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)37;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 89, (int) (byte) (-101), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = Utility.decode("HZ!~", false);
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("HZ!~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HZ!~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Utility.searchOpcode("goto_w");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte) (-107);
      byteArray0[8] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, false, false);
      Utility.setBit(5, (-1352));
      Utility.setBit((-1081), (-2326));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-19);
      byteArray0[7] = (byte) (-21);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, 0, 5);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "*Pkaa\"/%6(1]&f|tI";
      Utility.replace("putstatic", "*Pkaa\"/%6(1]&f|tI", "putstatic");
      String string1 = "gnRd%]5i$";
      String string2 = "K}R<";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "h7(I");
      Utility.replace("gnRd%]5i$", "K}R<", "*Pkaa\"/%6(1]&f|tI");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)112;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)112, 90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)21;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3094, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Utility.compactClassName("'| ", ";", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-120);
      byteArray0[7] = (byte) (-2);
      byteArray0[8] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 170, 198);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "H3w#DM96&JE,u)KM";
      Utility.compactClassName("H3w#DM96&JE,u)KM", true);
      String string1 = "<";
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "impdep1");
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false);
      Utility.isSet((-1), (-161));
      try { 
        Utility.typeOfSignature("REoeBE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: REoeBE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "Q%R(t@:41!uF%PRgy(";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q%R(t@:41!uF%PRgy(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q%R(t@:41!uF%PRgy('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "YkI;\"Yewi[X@d5<_w^1");
      boolean boolean0 = false;
      Utility.accessToString((-1254), false);
      Utility.searchOpcode("c884A");
      Utility.compactClassName("+UkJD", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.typeOfSignature("J{iZ>h*-/");
      Utility.accessToString(1347);
      Utility.setBit(2805, (-503));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Utility.classOrInterface(20);
      try { 
        Utility.typeOfMethodSignature("(Unknown attribute ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (Unknown attribute 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@CU/C$9Q2oaX4");
      try { 
        Utility.typeOfSignature("@CU/C$9Q2oaX4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @CU/C$9Q2oaX4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte) (-22);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-917), 187, true);
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    lload_0\n3:    aload\t\t%152\n5:    lshl\n6:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)6;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)89;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), 2267, true);
      assertEquals("0:    istore_3\n1:    iconst_3\n2:    impdep2\n3:    l2i\n4:    lconst_0\n5:    fdiv\n6:    dup\n", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertEquals("{null}", string1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("}'QY#a");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble(1998.40419327);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("ret\t\t%1", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)52;
      byteArray0[8] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "_/u2^y@'^";
      Utility.convertString("_/u2^y@'^");
      byte[] byteArray0 = Utility.decode("_/u2^y@'^", false);
      Utility.compactClassName("_/u2^y@'^", "_/u2^y@'^", false);
      Utility.equals(byteArray0, byteArray0);
      String string1 = "TbUJ\"O;-qM7.sOp";
      Utility.methodSignatureReturnType("TbUJ\"O;-qM7.sOp", false);
      Utility.format(17, 17, false, 'J');
      try { 
        Utility.typeOfSignature("_/u2^y@'^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _/u2^y@'^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)61;
      Utility.equals(byteArray0, byteArray0);
      Utility.clearBit((byte)72, (byte)85);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 123, (int) (byte)32, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)102;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)68, (int) (byte)102);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)87;
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("new");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)87, 0);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 62, 1292, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!)fY:{9#xc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )fY:{9#xc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Utility.signatureToString("S", false);
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)72;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("2lx-F#XZlzphK:m(TBO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2lx-F#XZlzphK:m(TBO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Utility.setBit(185, 176);
      Utility.classOrInterface(176);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-21);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("class", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 80;
      boolean boolean0 = true;
      char char0 = 'r';
      Utility.format(80, 80, true, 'r');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)101;
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1999, 128);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("80rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1999, 1966, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Utility.setBit(68, 120);
      Utility.signatureToString("F6C~:TB5HJX,");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = 18;
      Utility.isSet(18, 34);
      Utility.classOrInterface(18);
      Utility.typeOfSignature("CONSTANT_Integer");
      Utility.getSignature("AdwSQy5CLsuC!3Pnn");
      Utility.setBit((byte)5, 34);
      try { 
        Utility.typeOfSignature("AdwSQy5CLsuC!3Pnn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AdwSQy5CLsuC!3Pnn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = Utility.replace("Invalid method signature: ", "aV6J7uZZf;q,A7", "char");
      assertEquals("Invalid method signature: ", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte) (-55);
      byteArray0[8] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dstore_3", string1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      short short0 = Utility.searchOpcode("Invalid method signature: ");
      assertEquals((short) (-1), short0);
      
      byte byte0 = Utility.typeOfSignature("Invalid method signature: ");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "1,o$";
      try { 
        Utility.typeOfSignature("1,o$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1,o$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Hp:C)06I6i-", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hp:C)06I6i-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = "}";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}");
      String string1 = "\t";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\t");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(0L);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.mark(125);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureArgumentTypes("wide\t(wide)", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wide\t(wide)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.methodSignatureReturnType("L|_Khc", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L|_Khc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte)59;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-2733), (int) (byte)78);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmpgt\t\t#16974
         // 3:    dup2_x1
         // 4:    i2f
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureReturnType("N5", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "invokedynamic";
      Utility.compactClassName("invokedynamic", true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "invokedynamic";
      stringArray0[1] = "V";
      stringArray0[2] = "invokedynamic";
      stringArray0[3] = "V";
      stringArray0[4] = "V";
      stringArray0[5] = "V";
      stringArray0[6] = "invokedynamic";
      stringArray0[7] = "invokedynamic";
      stringArray0[8] = "V";
      Utility.methodTypeToSignature("V", stringArray0);
      Utility.convertString("invokedynamic");
      Utility.typeOfSignature("V");
      try { 
        Utility.methodSignatureArgumentTypes("<ZlwVFg`BmT7'ER");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <ZlwVFg`BmT7'ER
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      ConstantPool constantPool0 = null;
      int int0 = 172;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)105, 172, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte) (-98);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 9, (int) (byte)52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte)67;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)21;
      byteArray1[1] = (byte)67;
      byteArray1[2] = (byte)21;
      byteArray1[3] = (byte) (-124);
      byteArray1[4] = (byte)3;
      byteArray1[5] = (byte)34;
      byteArray1[6] = (byte)67;
      Utility.equals(byteArray0, byteArray1);
      Utility.accessToString((int) (byte)34);
      String string0 = Utility.convertString("dstore");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)100;
      objectArray0[1] = (Object) "dstore";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (byte)67;
      objectArray0[4] = (Object) (byte)34;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) (byte) (-55);
      objectArray0[7] = (Object) (byte)67;
      objectArray0[8] = (Object) (byte)21;
      String string1 = Utility.printArray(objectArray0, true, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-73);
      byteArray0[7] = (byte)110;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte) (-3);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 91, (int) (byte) (-3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Utility.fillup("RL I", (-862), false, 'S');
      // Undeclared exception!
      try { 
        Utility.signatureToString("RL I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RL I'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte) (-46);
      byteArray0[7] = (byte)100;
      byteArray0[8] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantDouble constantDouble0 = new ConstantDouble((-1155.378));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantLong constantLong0 = new ConstantLong((byte)91);
      constantArray0[1] = (Constant) constantLong0;
      ConstantLong constantLong1 = new ConstantLong((byte)100);
      constantArray0[2] = (Constant) constantLong1;
      ConstantClass constantClass0 = new ConstantClass((-3228));
      constantArray0[3] = (Constant) constantClass0;
      ConstantLong constantLong2 = new ConstantLong(constantLong0);
      constantArray0[4] = (Constant) constantLong2;
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[5] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("isub", string1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = Utility.clearBit(2907, (-1469));
      assertEquals(2899, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte)80;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("56 00 1e d2 1e 77 32 50", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "56 00 1e d2 1e 77 32 50";
      stringArray0[1] = "56 00 1e d2 1e 77 32 50";
      stringArray0[2] = "\nAnnotation(s):\n";
      stringArray0[3] = "56 00 1e d2 1e 77 32 50";
      String string1 = Utility.methodTypeToSignature("\nAnnotation(s):\n", stringArray0);
      assertEquals("(L56;L56;LAnnotation(s):;L56;)LAnnotation(s):;", string1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "[]Go%k7";
      try { 
        Utility.methodSignatureReturnType("[]Go%k7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]Go%k7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-88);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-103), (int) (byte) (-88));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = 92;
      boolean boolean0 = true;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "athrow");
      Utility.format(92, 92, true, 'b');
      try { 
        Utility.typeOfSignature("92bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 92bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)20;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)20, 70, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)86;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.replace("\t\t<", "@", "\t\t<");
      String string0 = Utility.replace("Unreachable default case reached!", "Unreachable default case reached!", "\t\t<");
      assertEquals("\t\t<", string0);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)92;
      byteArray1[1] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("iadd", string1);
      
      String string2 = Utility.format((-740), 38, true, 'b');
      assertEquals("-740bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb", string2);
      
      boolean boolean0 = Utility.equals(byteArray1, byteArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String[] stringArray0 = new String[2];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[0] = "(";
      stringArray0[1] = "(";
      Utility.methodTypeToSignature("(", stringArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      pipedOutputStream0.close();
      mockPrintStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      pipedOutputStream0.flush();
      mockPrintWriter0.println((-3746.068));
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) stringArray0);
      Utility.format((-2778), (-2778), false, '^');
      try { 
        Utility.methodSignatureReturnType("GvU'v-P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GvU'v-P'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      Utility.methodSignatureReturnType("FIlM}Qy++dbu;lc%");
      try { 
        Utility.methodSignatureArgumentTypes("return", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: return
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.methodSignatureReturnType("Invalid type: ");
      Utility.decode("int", false);
      try { 
        Utility.methodSignatureArgumentTypes("hs2VK>}y3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: hs2VK>}y3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte) (-3);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 91, (int) (byte) (-3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)90;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 238, 1663, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "Y3AhFwl6A?aDzj";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y3AhFwl6A?aDzj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y3AhFwl6A?aDzj'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString(1684, true);
      Utility.setBit(1684, 8);
      Utility.searchOpcode("protected final transient abstract");
      String string0 = "8Z9/!_#o~o}<\\Y8";
      Utility.convertString("8Z9/!_#o~o}<Y8");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte)118;
      byteArray0[8] = (byte) (-35);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantFloat constantFloat0 = new ConstantFloat(dataInputStream0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("protected final transient abstract", "8Z9/!_#o~o}<\\Y8");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 8Z9/!_#o~o}<\\Y8
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*0s-&M C9Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0s-&M C9Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte)88;
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString(86);
      // Undeclared exception!
      try { 
        Utility.signatureToString("E2Jq", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E2Jq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\t\t#";
      stringArray0[1] = "\t\t#";
      stringArray0[2] = "\t\t#";
      stringArray0[3] = "\t\t#";
      stringArray0[4] = "\t\t#";
      String string0 = Utility.methodTypeToSignature("\t\t#", stringArray0);
      assertEquals("(L#;L#;L#;L#;L#;)L#;", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = "%4ZdQuaH${4m";
      boolean boolean0 = true;
      try { 
        Utility.decode("%4ZdQuaH${4m", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Utility.replace("xym8p?z1%9CvEl?.", "xym8p?z1%9CvEl?.", "xym8p?z1%9CvEl?.");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)11;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.classOrInterface(9);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)44;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)43;
      byteArray1[3] = (byte) (-14);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)43, (int) (byte)44, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)116;
      byte byte0 = (byte)54;
      byteArray0[4] = (byte)54;
      Utility.encode(byteArray0, false);
      Utility.decode("$bf$d6Lt6", false);
      Utility.accessToString((int) (byte) (-65));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("t!qg-bUZx=D|~,xPz&", "tableswitch", "4b|bzT", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: t!qg-bUZx=D|~,xPz&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = Utility.convertString("\"");
      assertEquals("\\\"", string0);
      
      boolean boolean0 = Utility.isSet(623, 176);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(601);
      StringWriter stringWriter1 = stringWriter0.append('C');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-77);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)20, 70, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("The suffix must not be null", false);
      assertEquals(27, byteArray0.length);
      
      byte byte0 = Utility.typeOfSignature("CgQ");
      assertEquals((byte)5, byte0);
      
      boolean boolean0 = Utility.isSet(6, (-2275));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = "?.]bxRtmJ";
      try { 
        Utility.typeOfSignature("?.]bxRtmJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?.]bxRtmJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[7] = (byte) (-19);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte)90;
      Utility.encode(byteArray0, false);
      Utility.getSignature("$A$A$f3$d6Y$APZ");
      Utility.methodSignatureReturnType("L$A$A$f3$d6Y$APZ;", false);
      Utility.setBit(65, (byte)90);
      try { 
        Utility.typeOfSignature("$A$A$f3$d6Y$APZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $A$A$f3$d6Y$APZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("new", (String[]) null);
      assertEquals("()Lnew;", string0);
      
      String string1 = Utility.methodSignatureToString("()Lnew;", "[]", "?SU$o(#G?");
      assertEquals("?SU$o(#G? new []()", string1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = Utility.isJavaIdentifierPart('&');
      assertFalse(boolean0);
      
      Utility.fillup("new", 1146, true, '9');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte) (-77);
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("69 3a 4f 90 c1 58 b3", string2);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte) (-124);
      byteArray0[8] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[1] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iastore", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Utility.accessToString(20, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-17);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte)85;
      byteArray0[8] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("astore\t\t%239", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-121);
      Utility.encode(byteArray0, false);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)59;
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)4;
      byteArray3[1] = (byte) (-121);
      byteArray3[2] = (byte) (-121);
      byteArray3[3] = (byte) (-121);
      byteArray3[4] = (byte)59;
      byteArray3[5] = (byte)59;
      Utility.equals(byteArray2, byteArray3);
      Utility.equals(byteArray2, byteArray0);
      Utility.decode("$3b$87", false);
      Utility.toHexString(byteArray2);
      String string0 = ">;";
      // Undeclared exception!
      try { 
        Utility.signatureToString(">;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      try { 
        Utility.typeOfSignature("M,Q]7J??");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M,Q]7J??
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=L^N>Iax)cS12yQq)OY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =L^N>Iax)cS12yQq)OY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Utility.classOrInterface(116);
      Utility.replace("xth['\"qH;}E=y", "class", "class");
      MockPrintStream mockPrintStream0 = new MockPrintStream("pEE-A_=_H3s(");
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "xth['\"qH;}E=y";
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "pEE-A_=_H3s(";
      objectArray0[5] = (Object) "xth['\"qH;}E=y";
      objectArray0[6] = (Object) "class";
      Object object2 = new Object();
      objectArray0[7] = object2;
      Object object3 = new Object();
      objectArray0[8] = object3;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)42;
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat(1.0F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2170, 82);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 82, 65, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 7343. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      String string0 = "monitorexit";
      Utility.fillup("monitorexit", (-1141), true, 'X');
      Utility.fillup("monitorexit", 114, false, '(');
      try { 
        Utility.typeOfSignature("K2>/0L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K2>/0L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = "[]";
      Utility.typeOfSignature("[]");
      Utility.isSet(193, (byte)13);
      Utility.accessToString(186, false);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte)13;
      Utility.toHexString(byteArray0);
      Utility.clearBit(186, 26);
      try { 
        Utility.decode("private static final synchronized transient", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-88);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-103), (int) (byte) (-88));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      Utility.decode("short", false);
      Utility.clearBit(256, (-53786696));
      Utility.printArray(objectArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.signatureToString("Dont call getValueLong() on a non LONG ElementValue", true);
      try { 
        Utility.methodSignatureArgumentTypes("Dont call getValueLong() on a non LONG ElementValue", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Dont call getValueLong() on a non LONG ElementValue
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = Utility.signatureToString("Z=", true);
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "SVa";
      stringArray0[1] = "SVa";
      stringArray0[2] = "SVa";
      Utility.methodTypeToSignature("SVa", stringArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("W,Z0", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W,Z0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = "-[,zttv'IFzCf";
      Utility.convertString("-[,zttv'IFzCf");
      boolean boolean0 = false;
      Utility.decode("-[,zttv'IFzCf", false);
      try { 
        Utility.typeOfSignature("-[,zttv'IFzCf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -[,zttv'IFzCf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = "VrSl";
      Utility.getSignature("VrSl");
      boolean boolean0 = true;
      Utility.signatureToString("VrSl", true);
      String string1 = "\"\"fvt";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\"\"fvt", "VrSl", "ifle");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"\"fvt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)35;
      byteArray0[1] = (byte)35;
      byte byte2 = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)32;
      byte byte3 = (byte)103;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte)51;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("PSX!OTzQ9jC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PSX!OTzQ9jC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = Utility.accessToString(20, true);
      assertEquals("protected final", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("idiv", string1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ")]Z!6]?{fe[L";
      stringArray0[1] = "iand";
      stringArray0[2] = ")]Z!6]?{fe[L";
      stringArray0[3] = ")]Z!6]?{fe[L";
      stringArray0[4] = ")]Z!6]?{fe[L";
      stringArray0[5] = ")]Z!6]?{fe[L";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(")]Z!6]?{fe[L", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = "WgVa";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "WgVa");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)127;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1808473962), 1539, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.clearBit(222, 2983);
      String string1 = "+BEht^V";
      try { 
        Utility.methodSignatureReturnType("+BEht^V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `+BEht^V'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.accessToString(1684, true);
      assertEquals("protected final transient abstract", string0);
      
      int int0 = Utility.setBit(1684, 8);
      assertEquals(1940, int0);
      
      short short0 = Utility.searchOpcode("protected final transient abstract");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.convertString("8Z9/!_#o~o}<Y8");
      assertEquals("8Z9/!_#o~o}<Y8", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte)118;
      byteArray0[8] = (byte) (-35);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantFloat constantFloat0 = new ConstantFloat(dataInputStream0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("swap", string2);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte)90;
      Utility.encode(byteArray0, false);
      Utility.getSignature("$A$ed$f3$d6Y$APZ");
      Utility.methodSignatureReturnType("L$A$ed$f3$d6Y$APZ;", false);
      Utility.setBit(65, (byte)90);
      try { 
        Utility.typeOfMethodSignature("$A$ed$f3$d6Y$APZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $A$ed$f3$d6Y$APZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = " ";
      Utility.getSignature(" ");
      Utility.accessToString((-11));
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-4);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureReturnType("public protected final synchronized volatile transient native interface abstract strictfp synthetic annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public protected final synchronized volatile transient native interface abstract strictfp synthetic annotation enum'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Utility.setBit((-1621567946), (-1621567946));
      String string0 = "O3NLEv~mi'Mok0%C;";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      char char0 = '^';
      Utility.fillup("O3NLEv~mi'Mok0%C;", (-1621567946), true, '^');
      Utility.fillup("O3NLEv~mi'Mok0%C;", (-3227), true, '^');
      // Undeclared exception!
      try { 
        Utility.signatureToString("O3NLEv~mi'Mok0%C;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O3NLEv~mi'Mok0%C;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.accessToString(42, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("CONSTANT_Utf8");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append('/');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "CONSTANT_Utf8";
      objectArray0[1] = (Object) "CONSTANT_Utf8";
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) printStream0;
      mockPrintStream0.append('/');
      objectArray0[4] = (Object) mockFileOutputStream0;
      objectArray0[5] = (Object) "private static synchronized";
      objectArray0[6] = (Object) null;
      Utility.printArray(printStream0, objectArray0);
      try { 
        Utility.typeOfMethodSignature(">YT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >YT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("getstatic", "getstatic", "getstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: getstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("monitorexit", string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "monitorexit";
      objectArray0[1] = (Object) (byte) (-61);
      objectArray0[2] = (Object) "monitorexit";
      objectArray0[3] = (Object) (byte) (-61);
      objectArray0[4] = (Object) null;
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertEquals("{monitorexit, -61, monitorexit, -61, null}", string1);
      
      Utility.fillup("8fwA11ww", (-2809), true, ']');
      String string2 = Utility.compactClassName("", "pK", false);
      assertEquals("", string2);
      
      String string3 = Utility.format((byte) (-61), (byte) (-61), false, ']');
      assertEquals("-61", string3);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "C:>=h!U'";
      Utility.methodSignatureReturnType("C:>=h!U'");
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("XU%ryvK11B", (String) null, "z=15vg|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XU%ryvK11B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = Utility.classOrInterface((-440));
      assertEquals("interface", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[0] = (Constant) constantString0;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[1] = constant0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("`@b$Ezb0");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(354, (byte) (-6));
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("astore_1", string1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Utility.clearBit((-1232), (-1232));
      boolean boolean0 = true;
      Utility.format((-1232), (-66768), true, ':');
      Utility.clearBit(91, (-1232));
      try { 
        Utility.typeOfSignature("-1232");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -1232
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit(110, 2286);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)105);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = "anewarray";
      Utility.searchOpcode("anewarray");
      Utility.compactClassName("anewarray", "anewarray", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.classOrInterface((short)189);
      int int0 = 52;
      Utility.format(52, 52, false, '>');
      String string1 = "org.apache.bcel.classfile.Utility$1";
      String string2 = "dreturn";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.Utility$1", ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>52", "dreturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility$1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Utility.getSignature("if_icmpne");
      Utility.replace("Lif_icmpne;", "if_icmpne", "lookupswitch");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Pm", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pm'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("o>$+e\"a qXZ;/G9`+*", false);
      assertEquals(17, byteArray0.length);
      
      int int0 = Utility.clearBit(44, 85);
      assertEquals(44, int0);
      
      int int1 = Utility.setBit(254, 44);
      assertEquals(4350, int1);
      
      String string0 = Utility.getSignature("vF+^MiE");
      assertEquals("LvF+^MiE;", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fstore");
      byteArray0[0] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ladd", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      EvoSuiteFile evoSuiteFile1 = null;
      String string0 = "areturn";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "areturn");
      Utility.format(2143, (-1401), true, 's');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)115;
      Utility.encode(byteArray0, false);
      String string1 = "breakpoint";
      Utility.convertString("breakpoint");
      String string2 = null;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.methodTypeToSignature("Constant pool at index ", (String[]) null);
      String string0 = "fload_3";
      try { 
        Utility.methodSignatureArgumentTypes("fload_3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fload_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "class");
      Utility.format(72, 622, false, 'U');
      // Undeclared exception!
      try { 
        Utility.signatureToStringtrue);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = "rr";
      Utility.replace("rr", "org.apache.bcel.classfile.ConstantMethodref", "rr");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "rr";
      objectArray0[1] = (Object) "rr";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[2] = (Object) "org.apache.bcel.classfile.ConstantMethodref";
      objectArray0[3] = (Object) "rr";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "rr";
      objectArray0[6] = (Object) "org.apache.bcel.classfile.ConstantMethodref";
      objectArray0[7] = (Object) "rr";
      Utility.printArray(objectArray0, false, false);
      Utility.format((-2033), (-1), false, 'r');
      try { 
        Utility.methodSignatureReturnType("rr", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `rr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Utility.setBit(132, 132);
      Utility.accessToString(148);
      Utility.fillup("protected final transient", (-1371), true, '9');
      Utility.getSignature("protected final transient");
      String string0 = "org.apache.bcel.classfile.ConstantClass";
      Utility.compactClassName("org.apache.bcel.classfile.ConstantClass", "]~H=<y", true);
      Utility.convertString("]~H=<y");
      String string1 = "bytes must not be null!";
      Utility.compactClassName("KMUK9*?+~o9iwT@i", "bytes must not be null!", false);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = "XKy/kUG&i7J";
      try { 
        Utility.typeOfSignature("XKy/kUG&i7J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XKy/kUG&i7J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-91);
      byte byte0 = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-42);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)104;
      byteArray1[1] = (byte) (-42);
      byteArray1[2] = (byte) (-91);
      Utility.equals(byteArray0, byteArray1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "long";
      stringArray0[1] = "class";
      stringArray0[2] = "long";
      stringArray0[3] = "juff:^p0x";
      Utility.methodTypeToSignature("long", stringArray0);
      Utility.clearBit((-1831), (byte)6);
      try { 
        Utility.typeOfMethodSignature("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.typeOfSignature("D0Y%@");
      Utility.compactClassName("ret", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      int int0 = 578;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)65;
      byteArray0[0] = (byte)65;
      byte byte1 = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      byte byte2 = (byte) (-5);
      byteArray0[2] = (byte) (-5);
      byte byte3 = (byte)20;
      byteArray0[3] = (byte)20;
      byte byte4 = (byte)66;
      byteArray0[4] = (byte)66;
      Utility.toHexString(byteArray0);
      Utility.printArray((Object[]) null);
      Utility.setBit((byte)65, (byte)66);
      int int0 = 1768;
      Utility.isSet(7, 1768);
      String string0 = "ij~A'l3n;>JD\"sGG9pH";
      boolean boolean0 = false;
      int int1 = (-1);
      Attribute[] attributeArray0 = new Attribute[3];
      int int2 = 102;
      DataInput dataInput0 = null;
      Constant[] constantArray0 = new Constant[5];
      ConstantFieldref constantFieldref0 = null;
      try {
        constantFieldref0 = new ConstantFieldref((ConstantFieldref) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantFieldref", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.fillup("arraylength", 255, false, 'I');
      int int0 = (-3680);
      Utility.isSet(255, (-3680));
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        ConstantUtf8.getInstance((DataInput) byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.accessToString(34, true);
      Utility.convertString("private");
      String string0 = "B{W!8Ec0Vm|LV";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Rd*TcE3MUOrUtm9m,S", "w`<tA y:}uNe#z|Xki", "B{W!8Ec0Vm|LV", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Rd*TcE3MUOrUtm9m,S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ladd", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)32;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-90), (int) (byte) (-76));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 42528. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      int int0 = 191;
      Utility.fillup("ZSkqw-k?", 191, true, 'P');
      try { 
        Utility.typeOfSignature("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "Xd);bQZ;yef";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Xd);bQZ;yef");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Xd);bQZ;yef'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = "The wildcard list must not be null";
      // Undeclared exception!
      try { 
        Utility.signatureToString("The wildcard list must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The wildcard list must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "K7";
      // Undeclared exception!
      try { 
        Utility.signatureToString("K7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = "\"LfY]&\\UOF,p.GOBX\\";
      try { 
        Utility.typeOfSignature("\"LfY]&UOF,p.GOBX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"LfY]&UOF,p.GOBX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      int int0 = 256;
      boolean boolean0 = true;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Utility.fillup("", 256, true, 'B');
      Utility.setBit(92, 92);
      Utility.signatureToString("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ifnonnull", "new", "&N$ry");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnonnull
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "org.apache.commons.io.filefilter.DirectoryFileFilter";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.commons.io.filefilter.DirectoryFileFilter", "org.apache.commons.io.filefilter.DirectoryFileFilter", "org.apache.commons.io.filefilter.DirectoryFileFilter", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.commons.io.filefilter.DirectoryFileFilter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[\",GMx0SV'p";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[\",GMx0SV'p", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [\",GMx0SV'p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte) (-94);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.searchOpcode("$d7$3eR$ed$a2");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 82
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Utility.compactClassName("\"", true);
      Utility.format((-1295), (-1295), false, 'w');
      String[] stringArray0 = new String[6];
      stringArray0[0] = "^h0s9Fn>gOO-cAaZmh";
      stringArray0[1] = "-1295";
      stringArray0[2] = "-1295";
      stringArray0[3] = "\"";
      stringArray0[4] = "\"";
      stringArray0[5] = "\"";
      Utility.methodTypeToSignature("\"", stringArray0);
      Utility.convertString("-1295");
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Utility.isSet(1952, 16);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)104;
      byte byte0 = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)25;
      byteArray0[8] = (byte)0;
      Utility.encode(byteArray0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}5OtFrV/#");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\t<", "$5d$cak$Ssh$A$Z$A", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tCz]AU:T");
      Utility.typeOfSignature("T/`.==6I");
      Utility.compactClassName("T/`.==6I", "", true);
      Utility.clearBit((-3143), 1223);
      Utility.convertString("fadd");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)14;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 81, (int) (byte)14, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      Utility.decode("{java.lang.Object@3157154a, java.lang.Object@57933ffb, java.lang.Object@7ce86f0f, java.lang.Object@37854fd8, java.lang.Object@3e71e127}", false);
      Utility.printArray(objectArray0, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.convertString("boolean");
      Utility.convertString("Gcki_]m>s.J4p");
      try { 
        Utility.typeOfMethodSignature("Gcki_]m>s.J4p\\");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Gcki_]m>s.J4p\\
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = "`X4";
      try { 
        Utility.methodSignatureArgumentTypes("`X4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: `X4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Utility.compactClassName("wide");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.classOrInterface((-1809));
      String string0 = "S2\"";
      Utility.typeOfSignature("S2\"");
      try { 
        Utility.typeOfMethodSignature("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-114);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Utility.searchOpcode("Warning: Padding byte != 0 in ");
      Utility.getSignature("long");
      Utility.format((short) (-1), (short) (-1), false, 'F');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      Utility.toHexString(byteArray0);
      Utility.compactClassName("invokevirtual", false);
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = Utility.replace(":}!", ":}!", ":}!");
      assertEquals(":}!", string0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ":}!";
      objectArray0[1] = (Object) ":}!";
      objectArray0[2] = (Object) ":}!";
      objectArray0[3] = (Object) ":}!";
      objectArray0[4] = (Object) ":}!";
      objectArray0[5] = (Object) ":}!";
      objectArray0[6] = (Object) ":}!";
      objectArray0[7] = (Object) ":}!";
      objectArray0[8] = (Object) ":}!";
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{:}!, :}!, :}!, :}!, :}!, :}!, :}!, :}!, :}!}", string1);
      
      String string2 = Utility.fillup("6|", 6, false, 'O');
      assertEquals("OOOO6|", string2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)34;
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("5d 0a cc 45 22", string3);
      
      String string4 = Utility.compactClassName("+u63~]/|2", false);
      assertEquals("+u63~].|2", string4);
      
      short short0 = Utility.searchOpcode("sdu8S%u?op8rt('=K");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Utility.searchOpcode("\t\t#");
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      int int0 = 169;
      int int1 = 82;
      Utility.format(169, 82, true, 'E');
      String string0 = "";
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = "}isIG:32$C=";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("}isIG:32$C=", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `}isIG:32$C='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "ko";
      objectArray0[2] = (Object) "ko";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "ko";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "ko";
      PrintWriter printWriter0 = mockPrintWriter0.format("ko", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, 0, 0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = "]";
      Utility.compactClassName("]", "]", true);
      Utility.classOrInterface(402);
      String string1 = "";
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("Z=", true);
      Utility.typeOfSignature("Z=");
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)122;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("af 76 1c 7a", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("L?.5O\"z");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.getSignature("L?.5O\"z");
      assertEquals("LL?/5O\"z;", string0);
      
      String string1 = Utility.compactClassName("X<I4<&61A;");
      assertEquals("X<I4<&61A;", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)14;
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$O$O$O$O$O$O$O$O", string2);
      
      Utility.compactClassName("private", false);
      String string3 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string3);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "invokedynamic");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = "k-A";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("k-A", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `k-A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)84;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.accessToString(92);
      Utility.setBit(92, (-525));
      // Undeclared exception!
      try { 
        Utility.signatureToString("protected static final volatile", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `protected static final volatile'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(");0;=@", false);
      Utility.fillup(");0;=@", (-1177), false, '\"');
      String string0 = Utility.getSignature("transient");
      Utility.clearBit(187, 187);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1177), 187);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ");0;=@";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) ");0;=@";
      objectArray0[4] = (Object) "0:    dload_3\n1:    istore_0\n2:    faload\n3:    istore_0\n4:    istore_2\n5:    lstore_1\n";
      objectArray0[5] = (Object) "0:    dload_3\n1:    istore_0\n2:    faload\n3:    istore_0\n4:    istore_2\n5:    lstore_1\n";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = "R{{)7h";
      Utility.convertString("R{{)7h");
      try { 
        Utility.methodSignatureReturnType("R{{)7h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `7h'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false);
      try { 
        Utility.methodSignatureReturnType("int", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `int'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
