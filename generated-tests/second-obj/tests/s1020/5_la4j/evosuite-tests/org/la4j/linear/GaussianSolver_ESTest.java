/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:51:43 GMT 2018
 */

package org.la4j.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.linear.GaussianSolver;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GaussianSolver_ESTest extends GaussianSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DenseVector.constant(5, 383);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(5);
      SparseVector sparseVector0 = SparseVector.zero(2762);
      CompressedVector compressedVector0 = (CompressedVector)ooPlaceMatrixByVectorMultiplication0.apply(rowMajorSparseMatrix0, sparseVector0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GaussianSolver gaussianSolver0 = new GaussianSolver(rowMajorSparseMatrix0);
      CompressedVector compressedVector1 = (CompressedVector)gaussianSolver0.solve(compressedVector0);
      Random.setNextRandom(5);
      CCSMatrix cCSMatrix0 = (CCSMatrix)compressedVector1.toColumnMatrix();
      gaussianSolver0.applicableTo(cCSMatrix0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceOuterProduct0.apply((SparseVector) compressedVector0, (SparseVector) compressedVector1);
      GaussianSolver gaussianSolver1 = new GaussianSolver(cRSMatrix0);
      // Undeclared exception!
      try { 
        gaussianSolver1.solve(compressedVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This system can't be solved.
         //
         verifyException("org.la4j.linear.GaussianSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1, 1);
      GaussianSolver gaussianSolver0 = new GaussianSolver(sparseMatrix0);
      DenseVector denseVector0 = DenseVector.constant(1, 5);
      Vector vector0 = gaussianSolver0.solve(denseVector0);
      gaussianSolver0.solve(denseVector0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(1);
      SparseVector sparseVector0 = SparseVector.zero(2757);
      CompressedVector compressedVector0 = (CompressedVector)ooPlaceMatrixByVectorMultiplication0.apply(rowMajorSparseMatrix0, sparseVector0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GaussianSolver gaussianSolver1 = new GaussianSolver(rowMajorSparseMatrix0);
      CompressedVector compressedVector1 = (CompressedVector)gaussianSolver1.solve(compressedVector0);
      Random.setNextRandom(1);
      CCSMatrix cCSMatrix0 = (CCSMatrix)compressedVector1.toColumnMatrix();
      gaussianSolver1.applicableTo(cCSMatrix0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceOuterProduct0.apply((SparseVector) compressedVector0, (SparseVector) compressedVector1);
      GaussianSolver gaussianSolver2 = new GaussianSolver(cRSMatrix0);
      // Undeclared exception!
      try { 
        gaussianSolver2.solve(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This system is singular.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 30.0;
      doubleArray0[1] = 4026.345;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = (-361.02236);
      doubleArray0[7] = 2.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      mockRandom0.doubles((long) 1, (-2973.03347833064), (-646.005));
      Vector.random(1, mockRandom0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      GaussianSolver gaussianSolver0 = new GaussianSolver(matrix0);
      // Undeclared exception!
      try { 
        gaussianSolver0.solve(sparseVector0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
}
