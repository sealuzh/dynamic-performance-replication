/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 13:06:46 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;
import wheel.asm.Item;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      classWriter0.threshold = 12;
      classWriter0.newMethodItem("", "", "", true);
      int int0 = classWriter0.newMethod("", "][p<[6mZ`iF\"eJvy!", "Synthetic", true);
      assertEquals(8, int0);
      
      classWriter0.visitSource("Z", (String) null);
      classWriter0.visitAnnotation("Z", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(149, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(191);
      classWriter0.visitOuterClass("$p", "$p", "$p");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-440));
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        classWriter0.visitMethod((-2801), "", "", "", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1568);
      classWriter0.visitInnerClass("-^riv@", "R:9OZ&i3YqQUbi*f\"", "&1_%B|,-5J2!,h", 2791);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1669));
      FieldVisitor fieldVisitor0 = classWriter0.visitField(1983, "wheel.asm.Edge", "", "", (Object) null);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2064);
      int int0 = classWriter0.newUTF8("");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(191);
      Item item0 = classWriter0.newMethodItem("$p", "RuntimeVisibleAnnotations", "A.8^)Y\"UN&21Xfh\"}c", false);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-221));
      Item item0 = classWriter0.newLong((-1582L));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-114));
      Item item0 = classWriter0.newInteger(76);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1669));
      Item item0 = classWriter0.newInteger((-1669));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(191);
      Item item0 = classWriter0.newFloat(0.0F);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1568);
      Item item0 = classWriter0.newFloat(1568);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      Item item0 = classWriter0.newFloat((-1.0F));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1632));
      Item item0 = classWriter0.newFieldItem("Su0r_k", "c~<F.Y9|.;y(do", "Invalid IOCase name: ");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1146);
      // Undeclared exception!
      try { 
        classWriter0.newField((String) null, (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(18);
      Item item0 = classWriter0.newDouble(0.0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-114));
      Item item0 = classWriter0.newClassItem("WoT&;{gu0");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1669));
      Item item0 = classWriter0.newClassItem("");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2850));
      int int0 = classWriter0.newClass("nTl8/4WJ'sA#=I1p");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(18);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-3305), 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "*N-";
      stringArray0[2] = "";
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(5, "", "", "*N-", stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2850));
      // Undeclared exception!
      try { 
        classWriter0.newNameType((String) null, ".(KBg:bEo");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2061));
      // Undeclared exception!
      try { 
        classWriter0.newField("C1D*]S`ZU&*sUO^", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(220);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        classWriter0.newConst(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@40667391
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2325));
      classWriter0.addType("P#$_=D!VLSC9");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'P#$_=D!VLSC9.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2582));
      classWriter0.addUninitializedType("", (-1499));
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1716, (-1499));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1716
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-221));
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("", "LaP.$]ByyixS~I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      Item item0 = classWriter0.newLong(2);
      assertNotNull(item0);
      
      Item item1 = classWriter0.newDouble(1);
      assertNotNull(item1);
      assertNotSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-114));
      int int0 = classWriter0.newNameType("WoT&;{gu0", "WoT&;{gu0");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(220);
      classWriter0.newFieldItem("", "", "");
      int int0 = classWriter0.newNameType("", "");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-221));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-221), "plJ", "I;Yu59~i|G", "LaP.$]ByyixS~I", "I;Yu59~i|G");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(285212675);
      classWriter0.newMethod("tno|DPFy0NkEDp:5", "Le&YRm@", "tno|DPFy0NkEDp:5", true);
      classWriter0.threshold = 5;
      int int0 = classWriter0.newClass("");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1754);
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.DelegateFileFilter", "org.apache.commons.io.filefilter.DelegateFileFilter");
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(15);
      Item[] itemArray0 = new Item[1];
      classWriter0.typeTable = itemArray0;
      int int0 = classWriter0.addType("");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3441);
      int int0 = classWriter0.addUninitializedType("ntBDchI", 3441);
      assertEquals(1, int0);
      
      int int1 = classWriter0.addType("m?");
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-221));
      int int0 = classWriter0.addType("wp(!pX,'NV");
      assertEquals(1, int0);
      
      int int1 = classWriter0.addType("wp(!pX,'NV");
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-440));
      int int0 = classWriter0.newMethod("The array of names must not be null", "", "", true);
      assertEquals(5, int0);
      
      int int1 = classWriter0.newMethod("", "", "", true);
      assertEquals(7, int1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(32, "'01;;G'0D)a55L<u", "'01;;G'0D)a55L<u", "S:|zhj$Cls1Gi", "S:|zhj$Cls1Gi");
      FieldVisitor fieldVisitor1 = classWriter0.visitField(32, "S:|zhj$Cls1Gi", ",h", "S:|zhj$Cls1Gi", "S:|zhj$Cls1Gi");
      assertNotSame(fieldVisitor1, fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2325));
      Item item0 = classWriter0.newDouble((-2325));
      Item item1 = classWriter0.newDouble((-2325));
      assertNotNull(item1);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Item item0 = classWriter0.newLong(0);
      Item item1 = classWriter0.newLong(0);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-440));
      classWriter0.newMethod("", "", "", true);
      int int0 = classWriter0.newMethod("", "", "", true);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3441);
      classWriter0.newMethodItem("m?", "", "The wildcard list must not be null", false);
      int int0 = classWriter0.newUTF8("m?");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65);
      classWriter0.newField("", "", "");
      int int0 = classWriter0.newField("", "", "");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(220);
      Type type0 = Type.BOOLEAN_TYPE;
      int int0 = classWriter0.newConst(type0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", false);
      // Undeclared exception!
      try { 
        classWriter0.visitField(65, "", "org.apache.commons.io.filefilter.EmptyFileFilter", "O:63c6=|", annotationVisitor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.AnnotationWriter@8
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3815);
      Double double0 = new Double(1);
      int int0 = classWriter0.newConst(double0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(18);
      Long long0 = new Long(878L);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(227, "org.apache.commons.io.filefilter.AbstractFileFilter", "", "org.apache.commons.io.filefilter.AbstractFileFilter", long0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-222));
      Float float0 = new Float((-1266.226));
      Item item0 = classWriter0.newConstItem(float0);
      Item item1 = classWriter0.newConstItem(float0);
      assertNotNull(item1);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      Boolean boolean0 = Boolean.TRUE;
      Item item0 = classWriter0.newConstItem(boolean0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-221));
      Boolean boolean0 = Boolean.FALSE;
      Item item0 = classWriter0.newConstItem(boolean0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1669));
      Short short0 = new Short((short)30);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(187, "The filters must not be null", "aZQetvU8", "aZQetvU8", short0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(252);
      Character character0 = new Character('x');
      Item item0 = classWriter0.newConstItem(character0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3441);
      Byte byte0 = new Byte((byte) (-19));
      classWriter0.visitField((-2435), "bMJ51&W9K", "wheel.asm.Type", "bMJ51&W9K", byte0);
      int int0 = classWriter0.newConst(byte0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(13);
      int int0 = classWriter0.newConst(classWriter0.COMPUTE_MAXS);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(29);
      Attribute attribute0 = new Attribute("xJev1PN<_z_Dg<3UD");
      byte[] byteArray0 = new byte[7];
      attribute0.value = byteArray0;
      classWriter0.visitAttribute(attribute0);
      byte[] byteArray1 = classWriter0.toByteArray();
      assertEquals(57, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(29);
      Attribute attribute0 = new Attribute("xJev1PN<_z_Dg<3UD");
      classWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(6);
      classWriter0.visitAnnotation("The list of names must not be null", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(101, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      classWriter0.visitInnerClass("M.89QBvc)J2", "M.89QBvc)J2", "", 8);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(75, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1669));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "The filters must not be null";
      stringArray0[1] = "wheel.asm.Edge";
      stringArray0[2] = "The filters must not be null";
      stringArray0[3] = "The filters must not be null";
      stringArray0[4] = "The filters must not be null";
      stringArray0[5] = "The filters must not be null";
      stringArray0[6] = "The filters must not be null";
      stringArray0[7] = "The filters must not be null";
      stringArray0[8] = "wheel.asm.Edge";
      classWriter0.visit(Integer.MAX_VALUE, (-1669), "The filters must not be null", "The filters must not be null", "wheel.asm.Edge", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(135, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2325));
      classWriter0.visitSource("rm>/ut3 4@t8L", "rm>/ut3 4@t8L");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(103, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1816));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "`<[~u";
      stringArray0[2] = "'.pg@95{xE]H4iK;eEf";
      stringArray0[3] = "";
      stringArray0[4] = "'.pg@95{xE]H4iK;eEf";
      stringArray0[5] = "";
      stringArray0[6] = "";
      classWriter0.visitMethod(6, "'.pg@95{xE]H4iK;eEf", "", "", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(129, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2061));
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, (-2061));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitInnerClass("7[Al", "7[Al", "", 0);
      classWriter0.visitInnerClass("", "", "", 0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2850));
      classWriter0.visitOuterClass("", "", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1816));
      classWriter0.visitOuterClass("'.pg@95{xE]H4iK;eEf", "l !k4lBO(Z3*SK", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(102, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1568);
      classWriter0.visitOuterClass("&1_%B|,-5J2!,h", (String) null, "");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5);
      classWriter0.visitSource((String) null, "");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1816));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "`<[~u";
      stringArray0[2] = "'.pg@95{xE]H4iK;eEf";
      stringArray0[3] = "";
      stringArray0[4] = "'.pg@95{xE]H4iK;eEf";
      stringArray0[5] = "";
      stringArray0[6] = "";
      classWriter0.visit(2260, 6, "'.pg@95{xE]H4iK;eEf", "P+*eQi\"cFl<WlP,U*", "", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(120, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[0];
      classWriter0.visit(3584, 3584, "7[Al", "7[Al", "", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1645));
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        classWriter0.visit((-500), (-1098), "T\"", "T\"", (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1146);
      classWriter0.visit(192, (-154), "", (String) null, "fh,7R=9pd\"E%-g", (String[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter((ClassReader) null, (-734));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1816));
      classWriter0.visitField((-1225), "~bn0j", "sTz'm`", "", "~bn0j");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(136, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(191);
      // Undeclared exception!
      try { 
        classWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1816));
      int int0 = classWriter0.newField("sTz'm`", "P+*eQi\"cFl<WlP,U*", "~bn0j");
      assertEquals(6, int0);
  }
}
