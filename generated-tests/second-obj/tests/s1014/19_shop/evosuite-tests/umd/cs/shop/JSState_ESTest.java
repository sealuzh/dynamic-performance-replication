/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:39:59 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.StreamTokenizer;
import java.util.Comparator;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSListAxioms;
import umd.cs.shop.JSListLogicalAtoms;
import umd.cs.shop.JSListSubstitution;
import umd.cs.shop.JSOperator;
import umd.cs.shop.JSPlan;
import umd.cs.shop.JSPlanningDomain;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSState;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTaskAtom;
import umd.cs.shop.JSTasks;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSState_ESTest extends JSState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      JSState jSState0 = null;
      try {
        jSState0 = new JSState(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      JSListAxioms jSListAxioms0 = jSPlanningDomain0.axioms();
      // Undeclared exception!
      try { 
        jSState0.satisfies(jSState0, (JSSubstitution) null, jSListAxioms0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSState", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      JSState jSState1 = jSState0.apply(jSPlan0);
      assertNotSame(jSState1, jSState0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSListLogicalAtoms jSListLogicalAtoms0 = new JSListLogicalAtoms();
      jSListLogicalAtoms0.add((Object) jSState0);
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      jSPlanningDomain0.axioms();
      jSState0.addElementsToState(jSListLogicalAtoms0);
      jSState0.addElementsToState(jSListLogicalAtoms0);
      assertEquals("[[(this Collection)]]", jSListLogicalAtoms0.toString());
      assertFalse(jSState0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      JSListAxioms jSListAxioms0 = jSPlanningDomain0.axioms();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.flagLevel = 32;
      jSState0.removeAllElements();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSState0.satisfiesTAm(jSPredicateForm0, jSSubstitution0);
      JSTasks jSTasks0 = new JSTasks();
      System.setCurrentTimeMillis(32);
      JSOperator jSOperator0 = new JSOperator();
      jSOperator0.deleteList();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      System.setCurrentTimeMillis(32);
      JSListSubstitution jSListSubstitution0 = jSState0.satisfiesAll(jSTasks0, jSSubstitution0, jSListAxioms0);
      assertFalse(jSListSubstitution0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JSState jSState0 = new JSState();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      jSPlanningDomain0.print();
      jSPlanningDomain0.axioms();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSState0.removeAllElements();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.retainAll(jSSubstitution0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      jSState0.satisfiesTAm(jSPredicateForm0, jSSubstitution0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSState0.print();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "first");
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "first");
      FileSystemHandling.shouldAllThrowIOExceptions();
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply(jSSubstitution0);
      JSSubstitution jSSubstitution1 = unaryOperator0.apply(jSSubstitution0);
      jSState0.replaceAll(unaryOperator0);
      jSState0.addElement(jSPredicateForm0);
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      boolean boolean0 = jSTaskAtom0.isPrimitive;
      jSState0.satisfiesTAm(jSTaskAtom0, jSSubstitution0);
      jSState0.satisfiesTAm(jSPredicateForm0, jSSubstitution1);
      System.setCurrentTimeMillis((-2020L));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JSState jSState0 = new JSState();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      jSPlanningDomain0.print();
      JSListAxioms jSListAxioms0 = jSPlanningDomain0.axioms();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.flagLevel = 32;
      jSState0.removeAllElements();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSListAxioms0.stream();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.retainAll(jSSubstitution0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      jSState0.satisfiesTAm(jSPredicateForm0, jSSubstitution0);
      JSTasks jSTasks0 = new JSTasks();
      jSTasks0.retainAll(jSListAxioms0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTasks0.sort(comparator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "first");
      FileSystemHandling.shouldAllThrowIOExceptions();
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.ensureCapacity(32);
      unaryOperator0.apply(jSSubstitution0);
      JSSubstitution jSSubstitution1 = unaryOperator0.apply(jSSubstitution0);
      jSState0.replaceAll(unaryOperator0);
      System.setCurrentTimeMillis(32);
      jSState0.addElement(jSPredicateForm0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSState0.satisfiesTAm(jSPredicateForm0, jSSubstitution1);
      System.setCurrentTimeMillis(1164L);
      JSOperator jSOperator0 = new JSOperator();
      // Undeclared exception!
      try { 
        jSState0.applyOp(jSOperator0, jSSubstitution0, jSTasks0, jSTasks0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSState", e);
      }
  }
}
