/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 00:15:02 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Map<HashMap<String, Object>, Object>, Map<Map<Object, String>, String>> hashMap1 = new HashMap<Map<HashMap<String, Object>, Object>, Map<Map<Object, String>, String>>();
      DoubleKeyMap<Map<HashMap<String, Object>, Object>, Map<Object, String>, String> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<String, Object>, Object>, Map<Object, String>, String>(hashMap1);
      DoubleKeyMap<Integer, HashMap<String, String>, HashMap<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<Integer, HashMap<String, String>, HashMap<Object, Integer>>();
      Map<HashMap<String, Object>, Object> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.put(map0, (Map<Object, String>) hashMap0, "FSNz^2$q|>H4&8>s$");
      doubleKeyMap0.remove(map0, (Map<Object, String>) hashMap0);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0, class0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap0.put("us.codecraft.webmagic.utils.MultiKeyMapBase", hashMap1);
      Map<String, Object> map0 = doubleKeyMap0.remove("us.codecraft.webmagic.utils.MultiKeyMapBase");
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<HashMap<String, Object>, Object> hashMap0 = new HashMap<HashMap<String, Object>, Object>();
      DoubleKeyMap<Map<String, Object>, String, Map<HashMap<String, Object>, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<String, Object>, String, Map<HashMap<String, Object>, Object>>((Map<Map<String, Object>, Map<String, Map<HashMap<String, Object>, Object>>>) null);
      doubleKeyMap0.put((Map<String, Object>) null, "", (Map<HashMap<String, Object>, Object>) hashMap0);
      Map<String, Map<HashMap<String, Object>, Object>> map0 = doubleKeyMap0.remove((Map<String, Object>) null);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Map<HashMap<String, Object>, Object>, Map<String, HashMap<Object, String>>> hashMap0 = new HashMap<Map<HashMap<String, Object>, Object>, Map<String, HashMap<Object, String>>>();
      HashMap<HashMap<String, Object>, Object> hashMap1 = new HashMap<HashMap<String, Object>, Object>();
      HashMap<String, HashMap<Object, String>> hashMap2 = new HashMap<String, HashMap<Object, String>>();
      hashMap0.put(hashMap1, hashMap2);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<HashMap<String, Object>, Object>, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<String, Object>, Object>, String, HashMap<Object, String>>(hashMap0, class0);
      Map<String, HashMap<Object, String>> map0 = doubleKeyMap0.get((Map<HashMap<String, Object>, Object>) hashMap1);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, Map<HashMap<String, String>, HashMap<Object, Integer>>> hashMap0 = new HashMap<Integer, Map<HashMap<String, String>, HashMap<Object, Integer>>>();
      DoubleKeyMap<Integer, HashMap<String, String>, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<String, String>, HashMap<Object, Integer>>(hashMap0);
      Map<HashMap<String, Object>, Object> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Map<HashMap<String, Object>, Object>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Map<HashMap<String, Object>, Object>, Object, Object>();
      Integer integer0 = new Integer(0);
      doubleKeyMap1.put(map0, (Object) "", (Object) integer0);
      Map<Object, Object> map1 = doubleKeyMap1.get(map0);
      assertFalse(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<String, String>, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<String, String>, HashMap<Object, Integer>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>();
      String string0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Integer>, Map<HashMap<String, Object>, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Integer>, Map<HashMap<String, Object>, Object>, Object>((Map<HashMap<Object, Integer>, Map<Map<HashMap<String, Object>, Object>, Object>>) null);
      DoubleKeyMap<Object, HashMap<Integer, String>, String> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Integer, String>, String>();
      Map<HashMap<Integer, String>, String> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<String, Object>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Object, Object>(class0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = doubleKeyMap0.put(hashMap0, (Object) "us.codecraft.webmagic.utils.MultiKeyMapBase", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, HashMap<Integer, String>, String> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Integer, String>, String>();
      HashMap<HashMap<String, Object>, Object> hashMap0 = new HashMap<HashMap<String, Object>, Object>();
      Integer integer0 = new Integer(0);
      HashMap<Map<HashMap<String, Object>, Object>, Map<Integer, Object>> hashMap1 = new HashMap<Map<HashMap<String, Object>, Object>, Map<Integer, Object>>();
      DoubleKeyMap<Map<HashMap<String, Object>, Object>, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Map<HashMap<String, Object>, Object>, Integer, Object>(hashMap1, class0);
      Object object0 = doubleKeyMap1.put((Map<HashMap<String, Object>, Object>) hashMap0, integer0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<String, String>, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<String, String>, HashMap<Object, Integer>>();
      Integer integer0 = new Integer(0);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      HashMap<Object, Integer> hashMap1 = doubleKeyMap0.put(integer0, (HashMap<String, String>) null, hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Integer, HashMap<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, HashMap<Integer, String>>(class0);
      DoubleKeyMap<String, Object, HashMap<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<String, Object, HashMap<Object, Object>>(class0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      HashMap<Object, Object> hashMap1 = doubleKeyMap1.put((String) null, (Object) doubleKeyMap0, hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0, class0);
      HashMap<Object, Map<String, String>> hashMap1 = new HashMap<Object, Map<String, String>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(hashMap1);
      String string0 = doubleKeyMap1.put((Object) doubleKeyMap0, "-jZm?]{2D\"1>", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Object, String>();
      String string0 = doubleKeyMap0.get((HashMap<String, Object>) null, (Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      Map<Integer, Map<HashMap<Object, Object>, String>> map0 = doubleKeyMap0.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, HashMap<Object, Object>, String> doubleKeyMap1 = new DoubleKeyMap<Integer, HashMap<Object, Object>, String>(map0, class0);
      Integer integer0 = new Integer((-1));
      DoubleKeyMap<Object, Object, HashMap<Integer, Integer>> doubleKeyMap2 = new DoubleKeyMap<Object, Object, HashMap<Integer, Integer>>();
      HashMap<Integer, Integer> hashMap0 = doubleKeyMap2.get((Object) doubleKeyMap1, (Object) integer0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Object, Map<HashMap<String, Object>, String>> hashMap0 = new HashMap<Object, Map<HashMap<String, Object>, String>>();
      DoubleKeyMap<Object, HashMap<String, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, Object>, String>(hashMap0);
      Map<HashMap<String, Object>, String> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Integer, Map<HashMap<String, Object>, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<HashMap<String, Object>, Object>, String>();
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(hashMap0);
      Map<String, Object> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, HashMap<String, Object>, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Object>, Object>((Map<String, Map<HashMap<String, Object>, Object>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0, class0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap1.put("us.codecraft.webmagic.utils.DoubleKeyMap", hashMap0);
      hashMap0.put("us.codecraft.webmagic.utils.MultiKeyMapBase", hashMap1);
      doubleKeyMap0.remove("us.codecraft.webmagic.utils.MultiKeyMapBase", "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<HashMap<String, Object>, Object> hashMap0 = new HashMap<HashMap<String, Object>, Object>();
      DoubleKeyMap<Map<String, Object>, String, Map<HashMap<String, Object>, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<String, Object>, String, Map<HashMap<String, Object>, Object>>((Map<Map<String, Object>, Map<String, Map<HashMap<String, Object>, Object>>>) null);
      doubleKeyMap0.put((Map<String, Object>) null, "", (Map<HashMap<String, Object>, Object>) hashMap0);
      Map<HashMap<String, Object>, Object> map0 = doubleKeyMap0.put((Map<String, Object>) null, "", (Map<HashMap<String, Object>, Object>) hashMap0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Map<HashMap<Map<HashMap<String, Object>, Object>, Object>, Object>> hashMap0 = new HashMap<String, Map<HashMap<Map<HashMap<String, Object>, Object>, Object>, Object>>();
      HashMap<Object, Map<Map<HashMap<String, Object>, Object>, Integer>> hashMap1 = new HashMap<Object, Map<Map<HashMap<String, Object>, Object>, Integer>>();
      HashMap<Map<HashMap<String, Object>, Object>, Integer> hashMap2 = new HashMap<Map<HashMap<String, Object>, Object>, Integer>();
      hashMap1.put(hashMap0, hashMap2);
      DoubleKeyMap<Object, Map<HashMap<String, Object>, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Map<HashMap<String, Object>, Object>, Integer>(hashMap1);
      HashMap<HashMap<String, Object>, Object> hashMap3 = new HashMap<HashMap<String, Object>, Object>();
      Integer integer0 = doubleKeyMap0.get((Object) hashMap0, (Map<HashMap<String, Object>, Object>) hashMap3);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<String, Object, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<Object, Object>>();
      Object object0 = new Object();
      HashMap<Object, Object> hashMap0 = doubleKeyMap0.get("eymy<_-5Hwq&VtQQ", object0);
      assertNull(hashMap0);
  }
}
