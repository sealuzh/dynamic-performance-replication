/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 10:32:55 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(280375465082880L);
      buffer1.readInt();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      buffer_UnsafeCursor0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = buffer2.writeDecimalLong(2044L);
      buffer3.writeDecimalLong(0L);
      ByteString[] byteStringArray0 = new ByteString[3];
      ByteString byteString0 = ByteString.encodeUtf8("okio.RealBufferedSink");
      byteStringArray0[0] = byteString0;
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteStringArray0[1] = byteString1;
      // Undeclared exception!
      try { 
        ByteString.decodeHex("jY^sX&R+0/Nto}8g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: jY^sX&R+0/Nto}8g
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Unexpected code point: ");
      realBufferedSink0.buffer.require((-299L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer();
      buffer3.writeDecimalLong(0L);
      buffer2.request(0L);
      buffer2.writeIntLe(573);
      realBufferedSource0.buffer.readUtf8CodePoint();
      buffer2.request((-372L));
      // Undeclared exception!
      try { 
        buffer2.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 3
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      buffer0.request(1000000000000L);
      buffer_UnsafeCursor0.buffer.segmentSizes();
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong((-1074L));
      byte[] byteArray0 = new byte[2];
      buffer0.readFully(byteArray0);
      assertEquals(14L, buffer0.size());
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)102, (byte)102}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("");
      buffer1.writeHexadecimalUnsignedLong(280375465082880L);
      ByteString.encodeUtf8("jY^sX&R+0/Nto}8g");
      ByteString byteString0 = ByteString.EMPTY;
      ByteString.decodeBase64("");
      byte[] byteArray0 = new byte[2];
      ByteString.of(byteArray0);
      ByteString.decodeBase64("");
      ByteString byteString1 = new ByteString(byteArray0);
      ((RealBufferedSink) bufferedSink0).buffer.readHexadecimalUnsignedLong();
      String string0 = buffer1.readUtf8Line();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(2645L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeUtf8CodePoint(2817);
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString((String) null, 13, 65535, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Pipe pipe0 = new Pipe(65280L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeInt(612);
      Buffer buffer2 = buffer0.writeHexadecimalUnsignedLong((-318L));
      buffer0.md5();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.indexOfElement(byteString0);
      Buffer buffer3 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer3.readAndWriteUnsafe();
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      buffer4.readShort();
      buffer2.snapshot((int) (short)0);
      assertEquals(18L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(2063);
      // Undeclared exception!
      try { 
        buffer1.readAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((byte)0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        buffer1.read(buffer0, (-4431L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -4431
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      realBufferedSink0.buffer();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong((-296L));
      ByteString byteString0 = realBufferedSink0.buffer.md5();
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer2.select(options0);
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer1 = realBufferedSource0.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      realBufferedSink0.buffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      realBufferedSink0.buffer.writeTo((OutputStream) byteArrayOutputStream0);
      Buffer buffer2 = realBufferedSource0.buffer();
      Buffer buffer3 = buffer2.writeLongLe((-258L));
      String string0 = "duration <= 0: ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("duration <= 0: ");
      Buffer buffer4 = realBufferedSource0.buffer;
      mockFileOutputStream0.getChannel();
      Buffer buffer5 = realBufferedSource0.buffer;
      buffer5.readUtf8CodePoint();
      buffer3.copyTo((OutputStream) mockFileOutputStream0);
      // Undeclared exception!
      try { 
        Charset.forName("okio.ForwardingSource");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // okio.ForwardingSource
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Buffer buffer2 = realBufferedSource1.buffer();
      Buffer buffer3 = buffer2.writeHexadecimalUnsignedLong(2L);
      Buffer buffer4 = realBufferedSink0.buffer.writeUtf8CodePoint(56319);
      Buffer buffer5 = realBufferedSource0.buffer.writeDecimalLong(2L);
      Buffer buffer6 = buffer1.writeDecimalLong(10000L);
      ByteString byteString0 = buffer5.readByteString();
      buffer5.completeSegmentByteCount();
      realBufferedSource0.readByteArray();
      buffer3.writeAll(realBufferedSource0);
      buffer6.clear();
      boolean boolean0 = realBufferedSink0.buffer.rangeEquals(10000L, byteString0, 56319, 35);
      assertFalse(boolean0);
      
      buffer4.write((Source) realBufferedSource1, 93L);
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("", 5, 5, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 5 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      InputStream inputStream0 = buffer0.inputStream();
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer;
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer2.write(byteString0);
      buffer2.writeLongLe(2147483647L);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("size == 0");
      mockFileOutputStream0.getChannel();
      realBufferedSource0.buffer.readUtf8CodePoint();
      Buffer buffer3 = buffer1.copyTo((OutputStream) mockFileOutputStream0);
      // Undeclared exception!
      try { 
        buffer3.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.readUtf8LineStrict((long) 52);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.writeHexadecimalUnsignedLong(10000000000000000L);
      ByteString byteString0 = ByteString.EMPTY;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Buffer buffer2 = realBufferedSource0.buffer;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        buffer2.writeTo((OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      ByteString byteString0 = realBufferedSource0.buffer.sha1();
      buffer0.indexOf((byte)71, (long) (byte)71);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer1.inputStream();
      buffer2.indexOf((byte)45, (long) (byte)45, 2803754650L);
      buffer0.timeout();
      Buffer buffer3 = buffer0.write(byteString0);
      buffer1.hmacSha1(byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer3);
      Buffer buffer4 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer2.write(buffer4, 10000000000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=10000000000000000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Buffer buffer1 = new Buffer();
      hashingSource0.read(buffer0, 1579L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)38;
      Buffer buffer2 = buffer0.writeDecimalLong(8192L);
      buffer2.request(1579L);
      Charset.defaultCharset();
      String string0 = "";
      realBufferedSource0.exhausted();
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      realBufferedSink0.writeIntLe((-1));
      buffer_UnsafeCursor0.next();
      realBufferedSink0.buffer.writeLongLe(4);
      buffer0.readUtf8Line();
      try { 
        buffer0.readUtf8LineStrict((long) 0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(65536L);
      buffer0.clear();
      long long0 = buffer_UnsafeCursor0.resizeBuffer(5L);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(65536L, long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.buffer.readUtf8Line();
      realBufferedSink0.buffer.writeUtf8CodePoint(57394);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readFully(buffer0, (-934L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-934
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((byte)0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer1.readAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = buffer0.readUtf8();
      assertEquals("", string0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(26);
      Buffer buffer2 = buffer0.writeDecimalLong((-1152921504606846976L));
      ByteString byteString0 = buffer0.readByteString();
      long long0 = new Integer(26);
      buffer1.exhausted();
      buffer2.hmacSha256(byteString0);
      assertEquals(0L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)115;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      Buffer buffer1 = realBufferedSource0.buffer;
      MockPrintStream mockPrintStream0 = new MockPrintStream("N_");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      Buffer buffer2 = buffer1.copyTo((OutputStream) dataOutputStream0);
      assertTrue(buffer2.equals((Object)buffer0));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      int int0 = 2774;
      realBufferedSource0.buffer.writableSegment(2774);
      realBufferedSource0.inputStream();
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSink0.buffer();
      try { 
        realBufferedSource0.readUtf8LineStrict((long) 2774);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-41);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      realBufferedSink0.buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(3217L);
      buffer1.readFully(byteArray0);
      buffer0.writeUtf8CodePoint(278);
      buffer0.writeDecimalLong(495L);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer2 = buffer1.writeDecimalLong(278);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      Buffer buffer3 = realBufferedSource1.buffer;
      realBufferedSource1.buffer.md5();
      realBufferedSink1.buffer.clear();
      // Undeclared exception!
      try { 
        buffer2.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffffc4
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[2];
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      Buffer buffer1 = buffer0.readFrom(inputStream0);
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe((byte)0);
      try { 
        buffer0.readUtf8LineStrict(4L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=4 content=0000000000000000\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[3];
      ByteString byteString0 = ByteString.EMPTY;
      byteStringArray0[0] = byteString0;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      HashingSink.sha256(hashingSink0);
      ByteString byteString1 = hashingSink0.hash();
      byteStringArray0[1] = byteString1;
      byte[] byteArray0 = new byte[0];
      ByteString byteString2 = new ByteString(byteArray0);
      hashingSink0.flush();
      byteStringArray0[2] = byteString2;
      HashingSink.md5(buffer0);
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      buffer0.indexOfElement(byteString1);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)39;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-2205L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[3];
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = buffer1.writeLongLe((byte)0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("HaB'wp-hIgVkCt'+,");
      mockFileOutputStream0.getChannel();
      realBufferedSource0.buffer.readUtf8CodePoint();
      buffer2.copyTo((OutputStream) mockFileOutputStream0);
      boolean boolean0 = buffer1.rangeEquals((long) 0, byteString0);
      assertEquals(7L, buffer1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      Buffer buffer4 = buffer3.writeUtf8CodePoint((-1));
      buffer4.writeDecimalLong(1000000L);
      Buffer buffer5 = realBufferedSink0.buffer;
      buffer2.request(78);
      Charset.defaultCharset();
      ByteString.encodeUtf8("source is closed");
      Integer integer0 = new Integer(8230);
      // Undeclared exception!
      try { 
        buffer5.writableSegment(8230);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = realBufferedSink0.buffer.writeHexadecimalUnsignedLong(8192L);
      Buffer buffer3 = buffer2.writeLong(280375465082880L);
      // Undeclared exception!
      try { 
        buffer3.write(buffer1, 10000000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.segmentSizes();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(17L);
      Buffer buffer2 = realBufferedSource0.buffer.writeUtf8CodePoint(16);
      buffer2.writeDecimalLong(17);
      buffer0.writeDecimalLong(0L);
      Buffer buffer3 = realBufferedSource0.buffer();
      ByteString byteString0 = buffer3.readByteString();
      buffer2.completeSegmentByteCount();
      realBufferedSource0.readByteArray();
      realBufferedSource0.buffer.clear();
      buffer1.indexOfElement(byteString0, 117L);
      realBufferedSource0.buffer.exhausted();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer1.copyTo((OutputStream) null, 4L, (-1011L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSink0.writeUtf8("I;}S%T1B5");
      realBufferedSink0.buffer.writeUtf8CodePoint(57343);
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(57343);
      realBufferedSink0.buffer.writeUtf8CodePoint(55296);
      buffer1.writeDecimalLong(55296);
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer1.request((-530L));
      Charset.defaultCharset();
      ByteString.encodeUtf8("I;}S%T1B5");
      Integer integer0 = new Integer(78);
      buffer2.writableSegment(453);
      // Undeclared exception!
      try { 
        buffer2.read(buffer3, 612L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      MockFile mockFile0 = new MockFile("\\");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) buffer1;
      objectArray0[1] = (Object) realBufferedSink0;
      objectArray0[2] = (Object) buffer2;
      objectArray0[3] = (Object) realBufferedSink0;
      PrintStream printStream0 = mockPrintStream0.printf("\\", objectArray0);
      realBufferedSink0.buffer.writeTo((OutputStream) printStream0);
      realBufferedSink0.buffer.clone();
      ByteString.encodeUtf8("k");
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      buffer0.md5();
      realBufferedSource0.buffer.md5();
      realBufferedSink0.buffer.clear();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(127);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x7f
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.writeUtf8("jYosX&R+0MNto}8g");
      Pipe pipe0 = new Pipe(2044L);
      Buffer buffer2 = pipe0.buffer;
      Buffer buffer3 = buffer2.writeDecimalLong(2044L);
      ByteString byteString0 = ByteString.EMPTY;
      buffer3.rangeEquals(2044L, byteString0, (-2142700832), 909);
      Integer integer0 = new Integer(5);
      Pipe pipe1 = new Pipe(909);
      Buffer buffer4 = pipe1.buffer;
      buffer1.request(24L);
      // Undeclared exception!
      try { 
        buffer4.getByte((-72057594037927936L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-72057594037927936 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = buffer0.hmacSha256(byteString0);
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      pipe0.sourceClosed = false;
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeByte(0);
      buffer1.writeIntLe(0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer.writeLongLe(320L);
      buffer2.readByte();
      ByteString byteString0 = buffer2.sha512();
      buffer1.flush();
      buffer1.rangeEquals(100L, byteString0, 0, 0);
      buffer0.skip((-2121L));
      buffer2.sha1();
      assertEquals(5L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.exhausted();
      assertTrue(boolean0);
      
      buffer0.writeUtf8CodePoint(2050);
      buffer0.size = (long) 2050;
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=2050 content=e0a082e0a082e0a082e0a082e0a082e0a082e0a082e0a082e0a082e0a082e0a0\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteString byteString0 = buffer0.snapshot();
      ByteString.decodeHex("");
      long long0 = buffer0.indexOfElement(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      // Undeclared exception!
      try { 
        buffer0.writeTo(outputStream0, 221L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=221
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Pipe pipe0 = new Pipe(65280L);
      Buffer buffer0 = pipe0.buffer;
      int int0 = (-2109);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("", (-2109), (-2109), charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -2109
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeLongLe(9223372036773036031L);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      String string0 = realBufferedSink0.buffer.readUtf8Line();
      assertNull(string0);
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      boolean boolean0 = buffer_UnsafeCursor0.buffer.rangeEquals((long) (-1), byteString0, (-1), (-1));
      assertFalse(boolean0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = realBufferedSink0.buffer();
      realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        buffer2.readFrom((InputStream) byteArrayInputStream0, 757L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = (Buffer)buffer0.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink1.buffer;
      Buffer buffer3 = realBufferedSink0.buffer;
      Buffer buffer4 = realBufferedSink0.buffer;
      buffer4.writeUtf8CodePoint((byte)4);
      Buffer buffer5 = new Buffer();
      Buffer buffer6 = buffer1.writeDecimalLong((byte)4);
      ByteString byteString0 = ByteString.EMPTY;
      buffer2.request(2L);
      HashingSource hashingSource0 = HashingSource.md5(buffer3);
      ByteString byteString1 = hashingSource0.hash();
      buffer1.hmacSha256(byteString1);
      MockFile mockFile0 = new MockFile("byteCount < 0: ");
      MockFile mockFile1 = (MockFile)MockFile.createTempFile("nH>Eu`0Gd3 |z", "nH>Eu`0Gd3 |z", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      buffer6.readFrom((InputStream) bufferedInputStream0);
      buffer4.snapshot();
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = buffer1.readByteArray(0L);
      buffer0.writeAll(realBufferedSource0);
      buffer0.read(realBufferedSource0.buffer, 563L);
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSource0.buffer);
      BufferedSink bufferedSink0 = realBufferedSink1.writeShortLe((-2147459786));
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(bufferedSink0);
      Buffer buffer2 = realBufferedSink2.buffer();
      // Undeclared exception!
      try { 
        buffer2.readFully(realBufferedSink2.buffer, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer.writeHexadecimalUnsignedLong(100000000000000000L);
      long long0 = buffer1.readHexadecimalUnsignedLong();
      assertTrue(buffer1.exhausted());
      assertEquals(100000000000000000L, long0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer1.readByte();
      Buffer buffer3 = realBufferedSink0.buffer();
      buffer3.writeDecimalLong((-258L));
      buffer2.request((-258L));
      buffer2.writeIntLe(573);
      Charset.defaultCharset();
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSink0);
      hashingSink0.hash();
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.read(realBufferedSink0.buffer, (long) 573);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.buffer();
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      boolean boolean0 = buffer1.rangeEquals(1014L, byteString0, 3, 3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Pipe pipe0 = new Pipe(774L);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-2511L));
      Buffer buffer2 = buffer0.writeDecimalLong(446L);
      buffer0.readLong();
      buffer0.indexOf((byte)114, 6L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0, (byte)114);
      buffer2.readFrom((InputStream) bufferedInputStream0);
      buffer1.writeShortLe(104);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      boolean boolean0 = buffer_UnsafeCursor0.buffer.request((-1));
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      int int0 = 14;
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeString("okio.RealBufferedSink$1", 14, 56320, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 56320 > 23
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8LineStrict((long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.writeAll(buffer0);
      realBufferedSource0.buffer.readByteArray(0L);
      buffer1.writeAll(realBufferedSource0);
      buffer0.read(buffer1, 10L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeInt((-1423));
      buffer1.readIntLe();
      // Undeclared exception!
      try { 
        buffer1.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("jYosX&R+0MNto}8g");
      Buffer buffer1 = realBufferedSource0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink1.buffer();
      Buffer buffer2 = realBufferedSink1.buffer;
      buffer2.writeLong(2044L);
      ((RealBufferedSink) bufferedSink0).buffer.sha512();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-66);
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)112;
      ((RealBufferedSink) bufferedSink0).buffer.write(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSink1.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      HashingSink hashingSink1 = HashingSink.sha256(hashingSink0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)94;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink1);
      realBufferedSink0.writeShortLe((byte)94);
      Buffer buffer1 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer1.readFully(realBufferedSink0.buffer, (long) (byte)94);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      realBufferedSink0.buffer.writeByte(2547);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.indexOf(byteString0, 0L);
      buffer0.writeDecimalLong(1185L);
      Buffer buffer2 = realBufferedSink0.buffer;
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer1.selectPrefix(options0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      realBufferedSink0.buffer.writeByte(2547);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.indexOf(byteString0, 0L);
      buffer0.writeDecimalLong(1185L);
      Buffer buffer2 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xfffffff3
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.clone();
      assertNotSame(buffer1, buffer0);
      
      buffer1.emitCompleteSegments();
      buffer1.sha512();
      assertNotSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.readAndWriteUnsafe();
      realBufferedSink0.buffer.readUtf8();
      buffer0.emit();
      buffer1.sha512();
      buffer1.clear();
      // Undeclared exception!
      try { 
        buffer1.readUtf8((long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      Buffer buffer2 = realBufferedSource0.buffer;
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSink0.buffer.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.seek(10L);
      // Undeclared exception!
      try { 
        Charset.forName("jY^sX&R+0/Nto}8g");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // jY^sX&R+0/Nto}8g
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer2 = buffer1.writeByte(0);
      buffer2.hashCode();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      realBufferedSink0.buffer.readUnsafe(buffer_UnsafeCursor0);
      ByteString.decodeBase64("k&lO82c}h!'AEM^.j}");
      buffer1.rangeEquals(95L, (ByteString) null, (-1), (-1));
      Integer integer0 = new Integer((-1));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("S}#65}4{tsXIp");
      buffer_UnsafeCursor0.buffer.copyTo((OutputStream) mockFileOutputStream0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      try { 
        buffer0.readFrom((InputStream) sequenceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt((-2378));
      buffer1.readIntLe();
      Pipe pipe0 = new Pipe(4060L);
      Buffer buffer2 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer2.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.outputStream();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      try { 
        buffer0.readFully(buffer1, 10000000000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = buffer0.writeDecimalLong((-1L));
      buffer0.readUtf8CodePoint();
      Pipe pipe0 = new Pipe(11L);
      Pipe pipe1 = new Pipe(45);
      Buffer buffer3 = pipe1.buffer;
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      HashingSource.hmacSha256(buffer3, byteString0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)61;
      buffer0.request((-5506L));
      buffer3.hmacSha256(byteString0);
      int int0 = buffer2.read(byteArray0);
      assertEquals(0L, buffer2.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer();
      buffer3.writeDecimalLong(0L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte((-973));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource1.inputStream();
      // Undeclared exception!
      realBufferedSource1.buffer.readFrom(inputStream0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.segmentSizes();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSink0.buffer();
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSource0.buffer);
      // Undeclared exception!
      try { 
        buffer1.writeString("okio.RealBufferedSink$1", 18, 11, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 11 < 18
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      realBufferedSink0.writeDecimalLong(1882L);
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 54);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Pipe pipe0 = new Pipe(267L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("p)F4YK", false);
      // Undeclared exception!
      try { 
        buffer1.copyTo((OutputStream) mockFileOutputStream0, (-2431L), (-2431L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-2431 byteCount=-2431
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      realBufferedSink0.buffer.readUtf8();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      realBufferedSink0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor1);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)18;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.indexOf(byteString0, 1007L);
      Buffer buffer1 = realBufferedSource0.buffer.writeDecimalLong((byte) (-34));
      Buffer buffer2 = new Buffer();
      realBufferedSource0.buffer.readDecimalLong();
      buffer2.snapshot();
      assertTrue(buffer2.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer2.writeAll(realBufferedSink0.buffer);
      // Undeclared exception!
      try { 
        buffer0.read(buffer1, (-258L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -258
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong((byte) (-88));
      ByteString byteString0 = ByteString.encodeUtf8("jY^sX&R+0/Nto}8g");
      ByteString byteString1 = ByteString.EMPTY;
      ByteString.decodeBase64("?");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      ByteString.of(byteArray0);
      ByteString.decodeBase64("2xgj{I~\"x,2K");
      ByteString byteString2 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = null;
      byteStringArray0[1] = byteString2;
      byteStringArray0[2] = null;
      byteStringArray0[3] = null;
      byteStringArray0[4] = byteString2;
      byteStringArray0[5] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.buffer.select(options0);
      ((RealBufferedSink) bufferedSink0).buffer.readUtf8CodePoint();
      realBufferedSource0.buffer.indexOf((byte) (-88), (long) 0, 1579L);
      assertEquals(32L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource1.buffer();
      Pipe pipe0 = new Pipe(495L);
      Buffer buffer1 = pipe0.buffer;
      realBufferedSource1.buffer.writeUtf8CodePoint(192);
      Buffer buffer2 = realBufferedSink0.buffer.writeDecimalLong((-2105L));
      realBufferedSink0.buffer.writeDecimalLong(3281L);
      realBufferedSource0.buffer.readByteString();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)101;
      ByteString byteString1 = new ByteString(byteArray0);
      buffer0.indexOfElement(byteString1);
      buffer2.readShort();
      ByteString byteString2 = realBufferedSource1.buffer.snapshot((int) (byte)0);
      assertNotSame(byteString2, byteString0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = buffer2.writeLong(841L);
      Buffer buffer4 = realBufferedSource0.buffer();
      buffer4.writeUtf8CodePoint(56319);
      Buffer buffer5 = buffer3.writeDecimalLong(841L);
      buffer4.request(56319);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString(">6`[", charset0);
      realBufferedSink0.buffer.indexOf(byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer3.indexOf((byte)11, (long) 56319);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer5.select(options0);
      assertEquals(12L, buffer3.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      Buffer buffer4 = buffer3.writeUtf8CodePoint((-1));
      Buffer buffer5 = buffer4.writeDecimalLong(1000000L);
      ByteString byteString0 = ByteString.decodeBase64("");
      buffer5.write(byteString0);
      Buffer buffer6 = realBufferedSink0.buffer;
      realBufferedSink0.writeIntLe(2348);
      buffer_UnsafeCursor0.next();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      buffer4.writeLongLe(0L);
      realBufferedSink0.buffer.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      buffer_UnsafeCursor0.offset = (-2636L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-2636 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("size < 4: ");
      ByteString.decodeBase64(".outputStream()");
      BufferedSink bufferedSink1 = bufferedSink0.writeUtf8("resizeBuffer() only permitted for read/write buffers");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.hash();
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink1).buffer.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource1.buffer();
      Pipe pipe0 = new Pipe(495L);
      Buffer buffer1 = pipe0.buffer;
      buffer1.writeDecimalLong(495L);
      Buffer buffer2 = new Buffer();
      buffer1.readDecimalLong();
      assertEquals(0L, buffer1.size());
      
      realBufferedSource0.buffer.snapshot();
      assertTrue(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Buffer buffer1 = new Buffer();
      hashingSource0.read(buffer0, 6L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.buffer.writeDecimalLong(1579L);
      buffer0.request((-1L));
      Charset.defaultCharset();
      realBufferedSource0.exhausted();
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("resizeBuffer() only permitted for read/write buffers");
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.indexOf((byte)109, (-883L), (long) (-3300));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=52 fromIndex=-883 toIndex=-3300
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-814L));
      buffer0.readByte();
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=3 content=383134\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000L);
      pipe0.sinkClosed = true;
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        buffer0.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(4211L);
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = buffer0.writeByte(0);
      buffer1.hashCode();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.mark((-911));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      buffer0.readFrom((InputStream) bufferedInputStream0, (long) 0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Pipe pipe1 = new Pipe(4211L);
      Buffer buffer3 = pipe0.buffer;
      buffer2.snapshot(0);
      long long0 = buffer1.read(buffer2, (long) 0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = buffer1.writeDecimalLong((-3982L));
      try { 
        buffer2.require(394L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      buffer0.writeLong((-60L));
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(65536L);
      buffer0.clear();
      buffer0.writeInt((-1));
      buffer_UnsafeCursor0.resizeBuffer(5L);
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Buffer buffer1 = realBufferedSource1.buffer();
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(2L);
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer3 = pipe0.buffer;
      realBufferedSource0.buffer.writeDecimalLong(2L);
      ByteString byteString0 = ByteString.EMPTY;
      realBufferedSource1.buffer.rangeEquals(1L, byteString0, 909, (-2142700832));
      buffer2.readUtf8CodePoint();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)122;
      ByteString byteString1 = new ByteString(byteArray0);
      Buffer buffer4 = pipe0.buffer;
      buffer2.indexOfElement(byteString1);
      // Undeclared exception!
      try { 
        buffer1.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Pipe pipe0 = new Pipe(1736L);
      Buffer buffer0 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.hmacSha256(byteString0);
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)17, 1736L, 110L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=1736 toIndex=110
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(106L);
      Buffer buffer1 = pipe0.buffer;
      buffer1.writeDecimalLong(10L);
      Buffer buffer2 = pipe0.buffer;
      Buffer buffer3 = buffer2.writeDecimalLong(1332L);
      buffer3.readDecimalLong();
      buffer1.readUnsafe();
      Buffer buffer4 = pipe0.buffer;
      buffer1.sha1();
      // Undeclared exception!
      try { 
        buffer3.copyTo(buffer1, (-1L), (-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.skip(18L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      ((RealBufferedSink) bufferedSink0).buffer.writeUtf8CodePoint(57343);
      buffer1.writeUtf8CodePoint(57343);
      Buffer buffer2 = realBufferedSink0.buffer.writeDecimalLong(56319);
      buffer2.request(10000L);
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("jY^sX&R+0/Nto}8g", charset0);
      MockFile mockFile0 = new MockFile("jY^sX&R+0/Nto}8g");
      File file0 = MockFile.createTempFile("jY^sX&R+0/Nto}8g", "emG23R", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      buffer1.copyTo((OutputStream) mockPrintStream0, 2L, 2L);
      assertEquals(24L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = buffer0.writeUtf8CodePoint(3597);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer3 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      Charset.defaultCharset();
      buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      Buffer buffer5 = buffer_UnsafeCursor0.buffer;
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer2 = realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      realBufferedSink0.writeUtf8("endIndex > string.length: ");
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer();
      Buffer buffer3 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-106);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.write(buffer3);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.indexOf(byteString0, (long) (byte) (-104));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      long long0 = buffer0.readAll(realBufferedSink0);
      assertEquals(0L, long0);
      
      ByteString byteString0 = buffer0.readByteString(0L);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe(1297);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-56);
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("l-]vc/pTuYOR'b", charset0);
      Buffer buffer1 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink1.writeUtf8("ISIZE");
      realBufferedSink0.writeUtf8("");
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSink1.buffer;
      realBufferedSink0.close();
      Buffer buffer3 = realBufferedSource1.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      realBufferedSink1.buffer();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer3);
      Buffer buffer4 = realBufferedSource0.buffer;
      buffer3.writeLongLe(2711L);
      realBufferedSource1.buffer.readUtf8Line();
      realBufferedSource2.buffer.emitCompleteSegments();
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      HashingSink.sha256(buffer0);
      hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.read(buffer0, 538L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      byte byte0 = (byte)85;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor1.buffer.writeDecimalLong(100000000L);
      buffer_UnsafeCursor0.buffer.request((byte)85);
      Charset.defaultCharset();
      realBufferedSource0.exhausted();
      String string0 = "";
      // Undeclared exception!
      try { 
        Charset.forName("X=qm:z");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // X=qm:z
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.outputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer0.timeout();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeLongLe((-1));
      buffer1.readUtf8Line();
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      buffer0.writeInt((-3917));
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("HmacSHA256", Integer.MAX_VALUE, 2147483645, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 2147483645 < 2147483647
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.segmentSizes();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("", (-941), (-941));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -941
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSink0.writeUtf8("endIndex > string.length: ");
      realBufferedSink0.writeUtf8("endIndex > string.length: ");
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.writeHexadecimalUnsignedLong(2L);
      Buffer buffer2 = realBufferedSink0.buffer.writeUtf8CodePoint(56319);
      buffer2.readUtf8();
      Buffer buffer3 = realBufferedSource0.buffer.writeDecimalLong(2L);
      buffer3.request(10000L);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("endIndex > string.length: ", charset0);
      buffer2.indexOf(byteString0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Pipe pipe0 = new Pipe(774L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Segment segment0 = new Segment();
      Buffer buffer1 = realBufferedSource0.buffer.writeByte(4);
      buffer0.hashCode();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer1.writeTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer2.readUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer1.readAndWriteUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource(pipe_PipeSource0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      String string0 = "";
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("");
      ((RealBufferedSink) bufferedSink0).buffer.writeByte((-1));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)77;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      realBufferedSource0.buffer.hashCode();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readByteArray(100L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=100
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      pipe0.sourceClosed = true;
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      int int0 = 0;
      Buffer buffer1 = buffer0.writeByte(0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(100L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=100 > size=1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      Buffer buffer2 = ((RealBufferedSink) bufferedSink0).buffer.writeUtf8CodePoint(57394);
      assertEquals(20L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Buffer buffer3 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      long long0 = new Integer((-1));
      Buffer buffer4 = realBufferedSource0.buffer;
      assertTrue(buffer4.equals((Object)buffer0));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writeString("okio.RealBufferedSink$1", (-1), (-1), (Charset) null);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(15);
      Buffer buffer1 = pipe0.buffer;
      try { 
        buffer1.write((Source) buffer0, (long) 15);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writableSegment(2);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = buffer0.hmacSha256(byteString0);
      assertEquals(32, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      realBufferedSink0.buffer.writeByte(2547);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.indexOf(byteString0, 0L);
      Buffer buffer2 = buffer0.writeDecimalLong(1185L);
      buffer2.writeByte(2547);
      Buffer buffer3 = realBufferedSink0.buffer;
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      ByteString byteString1 = ByteString.EMPTY;
      byteString1.md5();
      byteStringArray0[4] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.selectPrefix(options0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clear();
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = (Buffer)buffer0.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeUtf8("resizeBuffer() only permitted for read/write buffers");
      Buffer buffer2 = realBufferedSource0.buffer();
      Buffer buffer3 = buffer2.writeDecimalLong(457L);
      ByteString byteString0 = ByteString.EMPTY;
      buffer3.request((-596L));
      HashingSource.md5(realBufferedSink1.buffer);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSource0);
      hashingSource0.toString();
      ByteString byteString1 = hashingSource0.hash();
      buffer1.hmacSha256(byteString1);
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile("_)8");
      MockFile mockFile2 = (MockFile)MockFile.createTempFile("_)8", "", (File) mockFile1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile2);
      realBufferedSource0.buffer.copyTo((OutputStream) mockPrintStream0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      // Undeclared exception!
      buffer_UnsafeCursor0.resizeBuffer(1000000000000000000L);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(8192L);
      buffer1.writeDecimalLong(10000000L);
      Buffer buffer2 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer2.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Pipe pipe0 = new Pipe(65280L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeInt(612);
      Buffer buffer2 = buffer0.writeHexadecimalUnsignedLong((-318L));
      buffer1.request(612);
      buffer2.readLong();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer1.inputStream();
      realBufferedSink0.buffer.writeIntLe(7);
      buffer3.readByteArray();
      assertEquals(12L, buffer1.size());
      assertTrue(buffer3.exhausted());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000000L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line(10000000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=9999999999999 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      HashingSink.sha256(hashingSink0);
      byte[] byteArray0 = new byte[2];
      Pipe pipe0 = new Pipe(1000000000000000000L);
      Buffer buffer1 = new Buffer();
      ByteString.decodeBase64("");
      // Undeclared exception!
      try { 
        buffer0.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.segmentSizes();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.buffer();
      buffer0.writeHexadecimalUnsignedLong(17L);
      Buffer buffer1 = realBufferedSource0.buffer.writeUtf8CodePoint(16);
      buffer1.writeDecimalLong(17);
      Buffer buffer2 = buffer0.writeDecimalLong(0L);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      realBufferedSink1.writeUtf8("HmacSHA256");
      realBufferedSink1.writeUtf8("Unexpected hex digit:");
      // Undeclared exception!
      try { 
        buffer1.readByteString((-7L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=0 byteCount=-7
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      realBufferedSink0.buffer.writeUtf8CodePoint(192);
      realBufferedSource0.buffer.writeDecimalLong(16711680L);
      Pipe pipe0 = new Pipe(10000L);
      Buffer buffer1 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer1.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      SegmentPool.byteCount = 255L;
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer();
      buffer3.writeDecimalLong(0L);
      buffer2.request(0L);
      Buffer buffer4 = buffer2.writeIntLe(573);
      List<Integer> list0 = new LinkedList<Integer>();
      realBufferedSource0.buffer.readUtf8CodePoint();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte)127;
      byteArray0[8] = (byte)7;
      realBufferedSource0.read(byteArray0);
      buffer4.request((-424L));
      buffer1.request(2044L);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer2.readString(100000L, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=100000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(42L);
      // Undeclared exception!
      try { 
        buffer1.writableSegment(8227);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.md5();
      assertEquals(16, byteString0.size());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("gBnfcVUCz", true);
      Buffer buffer1 = buffer0.writeTo((OutputStream) mockFileOutputStream0);
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      HashingSink.sha256(hashingSink0);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      hashingSource0.read(buffer1, 4L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer_UnsafeCursor0.buffer.readUnsafe(buffer_UnsafeCursor1);
      Buffer buffer2 = buffer_UnsafeCursor2.buffer;
      Buffer buffer3 = buffer1.writeDecimalLong((-663L));
      buffer3.writeUtf8CodePoint((-555));
      Buffer buffer4 = realBufferedSource0.buffer;
      buffer_UnsafeCursor1.buffer.writeDecimalLong(16711680L);
      Pipe pipe0 = new Pipe(100000000L);
      Pipe pipe1 = null;
      try {
        pipe1 = new Pipe((-555));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -555
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      HashingSink.sha256(hashingSink0);
      ByteString byteString1 = hashingSink0.hash();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(56319);
      Buffer buffer2 = buffer1.writeDecimalLong((-104L));
      Buffer buffer3 = buffer0.writeDecimalLong(143L);
      buffer3.readByteString();
      buffer1.completeSegmentByteCount();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteArray();
      buffer1.writeAll(buffer3);
      realBufferedSource0.buffer.clear();
      realBufferedSource0.buffer.rangeEquals(6309L, byteString1, 192, 192);
      BufferedSink bufferedSink0 = buffer0.write((Source) buffer2, (-1L));
      assertSame(buffer2, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.writeDecimalLong(27L);
      buffer1.indexOf((byte)10, (long) (byte)10);
      assertEquals(2L, buffer1.size());
      
      buffer1.readHexadecimalUnsignedLong();
      realBufferedSink0.buffer.equals(buffer0);
      realBufferedSink0.buffer.readUtf8Line();
      assertTrue(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.readAndWriteUnsafe();
      realBufferedSink0.buffer.readUtf8();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      buffer0.emit();
      buffer1.sha512();
      buffer1.clear();
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Pipe pipe0 = new Pipe(1L);
      // Undeclared exception!
      try { 
        buffer1.snapshot((-598));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-598
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      realBufferedSink0.buffer();
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.writeByte(15);
      buffer2.readByte();
      realBufferedSink0.buffer.sha512();
      realBufferedSink0.buffer();
      realBufferedSink0.buffer.request(3145L);
      realBufferedSink0.buffer.skip((-170L));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(127L);
      assertEquals(3L, buffer0.size());
      
      buffer1.readDecimalLong();
      MockFile mockFile0 = new MockFile("XvC");
      mockFile0.getAbsoluteFile();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      byte[] byteArray0 = new byte[2];
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString.encodeUtf8("k");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.close();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe((byte)0);
      Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(255);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      buffer0.indexOf(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(pipe_PipeSource0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.writeUtf8("");
      Buffer buffer0 = realBufferedSource0.buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(100L);
      Buffer buffer2 = realBufferedSource0.buffer;
      assertFalse(buffer2.exhausted());
      
      realBufferedSink0.buffer();
      realBufferedSource0.buffer.writeDecimalLong(0);
      Buffer buffer3 = realBufferedSource0.buffer;
      buffer3.request(32L);
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString(")", charset0);
      long long0 = buffer2.read(realBufferedSink0.buffer, 32L);
      assertEquals(3L, long0);
      
      buffer3.writeShortLe(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)87;
      // Undeclared exception!
      try { 
        buffer1.write(byteArray0, (-2147481371), 45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=-2147481371 byteCount=45
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)45;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.hmacSha256(byteString0);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer;
      int int0 = 15;
      try { 
        realBufferedSink0.buffer.write((Source) realBufferedSink0.buffer, (long) 15);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.exhausted();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(264L);
      buffer0.md5();
      buffer1.segmentSizes();
      assertEquals(3L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink1.writeUtf8("ISIZE");
      realBufferedSink0.writeUtf8("");
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSink1.buffer;
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong(255L);
      realBufferedSink0.close();
      Buffer buffer3 = realBufferedSource1.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      realBufferedSink1.buffer();
      buffer3.writeDecimalLong(790L);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer3);
      Buffer buffer4 = realBufferedSource0.buffer;
      buffer4.request(790L);
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("KB%ar$MBeyfxEOOu", charset0);
      realBufferedSink0.buffer.read(buffer2, 255L);
      buffer0.readShortLe();
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      pipe0.sourceClosed = true;
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeByte(0);
      pipe0.sinkClosed = true;
      buffer0.hashCode();
      // Undeclared exception!
      try { 
        buffer0.readByteArray(100L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=100
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        Options.of((ByteString[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSink0.writeUtf8("");
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(280375465082880L);
      ByteString.encodeUtf8("jY^sX&R+0/Nto}8g");
      ByteString byteString0 = ByteString.EMPTY;
      ByteString.decodeBase64(": ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-88);
      ByteString.of(byteArray0);
      ByteString.decodeBase64("");
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = null;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer2.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(1212L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = realBufferedSink0.buffer.writeByte(2547);
      buffer0.hashCode();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.offset = (-13L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.next();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-13 > size=1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource(pipe_PipeSource0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      String string0 = "";
      realBufferedSink0.writeUtf8("");
      byte byte0 = (byte) (-88);
      Buffer buffer0 = realBufferedSource0.buffer();
      buffer0.writeHexadecimalUnsignedLong(100L);
      int int0 = 0;
      String string1 = "mAb@&-D\"5u&/:M,f";
      String string2 = "";
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSink0.writeUtf8("endIndex > string.length: ");
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("endIndex > string.length: ");
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer2.writeHexadecimalUnsignedLong(2L);
      assertFalse(buffer0.equals((Object)buffer1));
      
      Buffer buffer3 = realBufferedSink0.buffer.writeUtf8CodePoint(56319);
      Buffer buffer4 = realBufferedSource0.buffer.writeDecimalLong(2L);
      buffer4.request(10000L);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("endIndex > string.length: ", charset0);
      long long0 = buffer3.indexOf(byteString0);
      assertEquals(0L, long0);
      
      ((RealBufferedSink) bufferedSink0).buffer.readByteArray(2L);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      HashingSink.sha256(hashingSink0);
      hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.read(buffer0, 1579L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer0.writeDecimalLong(41L);
      Charset.defaultCharset();
      realBufferedSource0.exhausted();
      String string0 = "";
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)18;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.writeUtf8CodePoint(1297);
      Buffer buffer1 = buffer0.writeDecimalLong(1000000000000L);
      // Undeclared exception!
      try { 
        buffer0.read(buffer1, (-976L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -976
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSink0.writeUtf8("");
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(280375465082880L);
      ByteString.encodeUtf8("jY^sX&R+0/Nto}8g");
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = ByteString.decodeBase64("");
      byte[] byteArray0 = new byte[2];
      ByteString.of(byteArray0);
      ByteString.decodeBase64("");
      ByteString byteString2 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString2;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer2.select(options0);
      try { 
        realBufferedSource0.buffer.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = realBufferedSource0.buffer;
      byte[] byteArray0 = buffer0.readByteArray(0L);
      buffer2.writeAll(realBufferedSource0);
      realBufferedSource0.buffer.read(buffer1, 0L);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64Url();
      ByteString byteString1 = ByteString.EMPTY;
      buffer2.rangeEquals(0L, byteString1);
      buffer2.writeHexadecimalUnsignedLong(0L);
      HashingSource.sha256(realBufferedSource0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        buffer1.readFrom((InputStream) byteArrayInputStream0, (-3003L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3003
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeUtf8("zJvY2laM@[!)[s");
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource1.buffer();
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer1.writeUtf8CodePoint(1309);
      Buffer buffer3 = buffer2.writeDecimalLong((-2L));
      ByteString.decodeBase64("zJvY2laM@[!)[s");
      realBufferedSink0.buffer.completeSegmentByteCount();
      realBufferedSink0.buffer.equals("zJvY2laM@[!)[s");
      realBufferedSource0.readByteArray();
      buffer3.writeAll(realBufferedSource0);
      assertTrue(buffer3.equals((Object)buffer0));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      try { 
        realBufferedSink0.buffer.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.readByteString();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.buffer();
      buffer0.outputStream();
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong(1704L);
      realBufferedSink0.close();
      realBufferedSource0.buffer();
      Buffer buffer1 = new Buffer();
      // Undeclared exception!
      try { 
        buffer1.writeUtf8("Gr19z[:o7{+B5<l S", (-2238), (-2238));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -2238
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      long long0 = 671L;
      try { 
        buffer0.readFrom((InputStream) sequenceInputStream0, 671L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = realBufferedSink0.buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)4;
      realBufferedSink0.buffer();
      Buffer buffer4 = buffer3.writeDecimalLong((-5402L));
      realBufferedSink0.buffer();
      realBufferedSink0.buffer.readDecimalLong();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer4.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Pipe pipe0 = new Pipe(255L);
      Buffer buffer0 = pipe0.buffer;
      InputStream inputStream0 = buffer0.inputStream();
      // Undeclared exception!
      buffer0.readFrom(inputStream0, 15L);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = new Buffer();
      byte[] byteArray1 = new byte[6];
      byteArray1[1] = (byte)4;
      buffer2.writeDecimalLong(127L);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writeTo((OutputStream) null, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Buffer buffer2 = realBufferedSource1.buffer();
      Buffer buffer3 = buffer2.writeHexadecimalUnsignedLong(2L);
      Buffer buffer4 = realBufferedSink0.buffer.writeUtf8CodePoint(56319);
      Buffer buffer5 = realBufferedSource0.buffer.writeDecimalLong(2L);
      buffer4.writeDecimalLong(0L);
      ByteString byteString0 = buffer2.readByteString();
      buffer1.completeSegmentByteCount();
      realBufferedSource0.readByteArray();
      realBufferedSource0.buffer.writeAll(hashingSource0);
      realBufferedSource1.buffer.clear();
      realBufferedSource0.buffer.rangeEquals(0L, byteString0, 3, 3);
      try { 
        buffer3.write((Source) buffer5, 2105L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      long long0 = (-299L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Unexpected code point: ");
      realBufferedSink0.buffer.require((-299L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeUtf8("Unexpected code point: ");
      Buffer buffer2 = new Buffer();
      Buffer buffer3 = realBufferedSink0.buffer();
      realBufferedSource0.buffer.write((Source) buffer3, (-299L));
      Buffer buffer4 = realBufferedSource0.buffer.writeByte(1451);
      // Undeclared exception!
      try { 
        buffer4.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = false;
      // Undeclared exception!
      try { 
        buffer0.write((Source) null, (long) 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      Buffer buffer1 = new Buffer();
      hashingSource0.read(buffer0, 1579L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-2);
      try { 
        buffer1.skip((byte)125);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-41);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      realBufferedSink0.buffer();
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      Buffer buffer4 = realBufferedSink0.buffer();
      buffer4.writeUtf8CodePoint(2124);
      buffer4.indexOf((byte)102);
      buffer4.writeDecimalLong((-1L));
      ByteString byteString0 = ByteString.decodeBase64("");
      buffer_UnsafeCursor0.buffer.write(byteString0);
      Buffer buffer5 = realBufferedSink0.buffer;
      realBufferedSink0.writeIntLe((-1));
      buffer_UnsafeCursor0.next();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      realBufferedSink0.buffer.writeLongLe((-3101L));
      buffer2.readUtf8Line();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.require((-258L));
      realBufferedSink0.outputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      boolean boolean0 = buffer_UnsafeCursor0.buffer.request((-1));
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink1.buffer);
      Buffer buffer1 = realBufferedSink1.buffer.writeUtf8CodePoint(13);
      Buffer buffer2 = buffer1.writeDecimalLong(1000000000000000L);
      realBufferedSource0.buffer.writeDecimalLong(0L);
      realBufferedSource0.buffer();
      buffer2.readByteString();
      buffer0.completeSegmentByteCount();
      realBufferedSource0.readByteArray();
      buffer2.clear();
      boolean boolean0 = buffer0.exhausted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = null;
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(32L);
      ByteString[] byteStringArray0 = new ByteString[6];
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString(" SicngQBf92[", charset0);
      byteStringArray0[0] = byteString0;
      ByteString byteString1 = ByteString.encodeString(" SicngQBf92[", charset0);
      byteStringArray0[1] = byteString1;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      try { 
        realBufferedSource0.readByteString(32L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      realBufferedSource1.buffer.writeUtf8CodePoint(192);
      buffer1.writeDecimalLong((-1180L));
      buffer1.readShortLe();
      assertEquals(3L, buffer1.size());
      
      ByteString[] byteStringArray0 = new ByteString[8];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      byteStringArray0[7] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = realBufferedSource1.buffer.selectPrefix(options0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer((byte)0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readFully(buffer0, (-3653L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.segmentSizes();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.buffer();
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = realBufferedSink0.buffer.writeHexadecimalUnsignedLong((-2093L));
      byte[] byteArray0 = new byte[0];
      realBufferedSource0.buffer.readFully(byteArray0);
      Buffer buffer3 = realBufferedSink0.buffer.writeUtf8CodePoint((-2836));
      realBufferedSource0.buffer.writeDecimalLong((-2836));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer3);
      realBufferedSink1.buffer.writeDecimalLong((-672L));
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      Buffer buffer4 = realBufferedSource0.buffer;
      buffer3.md5();
      buffer2.clear();
      assertEquals(0L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      String string0 = "qJ8[v.S]8dsP^}";
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("qJ8[v.S]8dsP^}", charset0);
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer2 = pipe0.buffer;
      buffer1.writeByte(0);
      buffer0.hashCode();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer2.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.seek((-1L));
      // Undeclared exception!
      try { 
        Charset.forName("_.n/");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // _.n/
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      buffer_UnsafeCursor0.next();
      boolean boolean0 = buffer_UnsafeCursor0.buffer.request(1848L);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = buffer0.readByteArray(0L);
      buffer1.writeAll(realBufferedSource0);
      realBufferedSource0.buffer.read(buffer1, 0L);
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.writeShortLe((-2147459786));
      Buffer buffer2 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readFully(buffer2, (-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer();
      buffer3.writeDecimalLong(0L);
      buffer2.request(0L);
      Buffer buffer4 = buffer2.writeIntLe(573);
      buffer4.segmentSizes();
      realBufferedSource0.buffer.readUtf8CodePoint();
      buffer4.request((-424L));
      buffer1.request(2044L);
      // Undeclared exception!
      try { 
        buffer1.readByteArray((long) 573);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=18 offset=0 byteCount=573
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.write(byteArray0);
      Buffer buffer2 = buffer1.writeLongLe((byte)0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("N_");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      buffer2.copyTo((OutputStream) dataOutputStream0);
      assertEquals(10L, buffer1.size());
      
      Buffer buffer3 = realBufferedSource0.buffer.emitCompleteSegments();
      assertEquals(0L, buffer3.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)94;
      byteArray0[5] = (byte)0;
      byteArray0[7] = (byte) (-31);
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("ogtfFJHG#;Ld>&~%o");
      buffer0.write(byteString0);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.copyTo((OutputStream) null, (-883L), 2420L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Charset charset0 = Charset.defaultCharset();
      buffer1.writeString("", charset0);
      realBufferedSink0.buffer.writeLong((-176L));
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      Buffer buffer1 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writableSegment((-715));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(923L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=923 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Buffer buffer1 = buffer0.readFrom((InputStream) byteArrayInputStream0, (long) (byte)0);
      assertEquals(0L, buffer1.size());
      
      ByteString.decodeBase64("T!J.H<ym:|HA:<-& ");
      // Undeclared exception!
      try { 
        buffer0.indexOfElement((ByteString) null, (-3747L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = (Buffer)buffer0.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink1.buffer;
      Buffer buffer3 = realBufferedSink0.buffer;
      Buffer buffer4 = buffer3.writeUtf8("byteCount < 0: ", (int) (byte)4, (int) (byte)4);
      buffer4.writeUtf8CodePoint((byte)4);
      Buffer buffer5 = new Buffer();
      buffer1.writeDecimalLong((byte)4);
      ByteString byteString0 = ByteString.EMPTY;
      buffer2.request(2L);
      HashingSource hashingSource0 = HashingSource.md5(buffer3);
      ByteString byteString1 = hashingSource0.hash();
      buffer1.hmacSha256(byteString1);
      MockFile mockFile0 = new MockFile("byteCount < 0: ");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong(92233720368L);
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      buffer1.readUtf8CodePoint();
      buffer0.readShort();
      long long0 = buffer1.size();
      assertFalse(buffer0.exhausted());
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(65536L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource1.buffer);
      realBufferedSink0.buffer();
      buffer0.read(realBufferedSource1.buffer, 10L);
      Pipe pipe0 = new Pipe(10L);
      Buffer buffer2 = pipe0.buffer;
      Buffer buffer3 = realBufferedSource0.buffer();
      assertNotSame(buffer3, buffer2);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("qJ8[v.S]8dsP^}", charset0);
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        Charset.forName(" < ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //  < 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.indexOf(byteString0, 440L);
      Buffer buffer1 = buffer0.writeDecimalLong(127L);
      assertEquals(3L, buffer0.size());
      
      buffer1.readDecimalLong();
      buffer0.indexOf((byte) (-2), 127L, 127L);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      HashingSink.sha256(buffer0);
      hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.read(buffer0, 538L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      long long0 = 100000000L;
      // Undeclared exception!
      try { 
        buffer1.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      realBufferedSink0.buffer.writeByte(2547);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      ByteString byteString0 = new ByteString(byteArray0);
      realBufferedSink0.buffer.indexOf(byteString0, 280375465082880L);
      Buffer buffer1 = new Buffer();
      buffer1.writeDecimalLong(280375465082880L);
      Buffer buffer2 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xfffffff3
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(10000000000000000L);
      ByteString byteString0 = ByteString.EMPTY;
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      buffer0.indexOfElement(byteString0);
      assertEquals(14L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      ((RealBufferedSink) bufferedSink0).buffer.writeUtf8CodePoint(57343);
      Buffer buffer2 = realBufferedSource0.buffer;
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSink0.buffer.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.seek(10L);
      // Undeclared exception!
      try { 
        Charset.forName("jY^sX&R+0/Nto}8g");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // jY^sX&R+0/Nto}8g
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)4;
      realBufferedSink0.buffer.writeDecimalLong(106L);
      Buffer buffer4 = buffer3.writeDecimalLong(106L);
      buffer4.readDecimalLong();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readUnsafe();
      Buffer buffer5 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.buffer.sha1();
      // Undeclared exception!
      try { 
        buffer5.copyTo(buffer1, (-1L), (-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.readAndWriteUnsafe();
      realBufferedSink0.buffer.readUtf8();
      realBufferedSink0.buffer.flush();
      buffer1.request(71776119061217280L);
      buffer1.skip((-1));
      assertTrue(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      buffer_UnsafeCursor0.buffer.writeLongLe(9223372036773036031L);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffffff
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeInt(63);
      buffer0.readInt();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)118;
      buffer1.write(byteArray0);
      // Undeclared exception!
      try { 
        buffer1.writeString("fgEQm", 63, (-314), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -314 < 63
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.readAll(realBufferedSink0);
      // Undeclared exception!
      try { 
        buffer0.readByteString(100000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=100000000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = buffer0.writeByte(0);
      buffer0.hashCode();
      Buffer buffer3 = buffer2.writeDecimalLong(65280L);
      buffer3.request(2484L);
      int int0 = 15;
      buffer2.request(1000000000000L);
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 6
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      realBufferedSink0.buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-1L));
      buffer0.readUtf8CodePoint();
      Pipe pipe0 = new Pipe(11L);
      Pipe pipe1 = new Pipe(45);
      Buffer buffer2 = pipe1.buffer;
      HashingSink.sha512(realBufferedSink0.buffer);
      Buffer buffer3 = buffer2.writeUtf8CodePoint(108);
      Buffer buffer4 = buffer2.writeDecimalLong(65536L);
      buffer4.read(buffer1, 2L);
      short short0 = buffer3.readShort();
      assertEquals(2L, buffer3.size());
      assertEquals((short)13621, short0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte(15);
      byte byte0 = buffer0.readByte();
      assertTrue(buffer0.exhausted());
      assertEquals((byte)15, byte0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer0.readByteArray(0L);
      buffer0.writeAll(realBufferedSource0);
      realBufferedSource0.buffer.read(buffer1, 0L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink1.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink1.buffer);
      Buffer buffer2 = realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      realBufferedSink1.writeUtf8("endIndex > string.length: ");
      realBufferedSink0.writeUtf8("endIndex > string.length: ");
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer1);
      Buffer buffer3 = realBufferedSink0.buffer;
      realBufferedSource2.buffer.writeHexadecimalUnsignedLong(255L);
      realBufferedSink0.close();
      Buffer buffer4 = realBufferedSource1.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      realBufferedSink1.buffer();
      buffer2.writeDecimalLong((-1670L));
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSource0);
      Buffer buffer5 = realBufferedSource3.buffer;
      buffer1.request(291L);
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("", charset0);
      realBufferedSource1.buffer.read(realBufferedSink1.buffer, 10000000000000000L);
      short short0 = buffer0.readShortLe();
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals((short)28261, short0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      String string0 = "qJ8[v.S]8dsP^}";
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("qJ8[v.S]8dsP^}", charset0);
      buffer1.readIntLe();
      long long0 = 8192L;
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer2 = pipe0.buffer;
      buffer0.writeByte(0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer2.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.seek((-1L));
      // Undeclared exception!
      try { 
        Charset.forName("_.n/");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // _.n/
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.exhausted();
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = new Buffer();
      Buffer buffer3 = buffer2.writeByte(119);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer3.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.offset = 65280L;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.next();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=65280 > size=1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer0.writeInt(35);
      // Undeclared exception!
      try { 
        buffer2.writeString("p(xAe z[yC+YJL.", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        buffer0.readFrom((InputStream) mockFileInputStream0, 928L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = buffer0.writeInt(70);
      // Undeclared exception!
      try { 
        buffer1.read((byte[]) null, 70, 70);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      realBufferedSink0.writeIntLe(12);
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.buffer.read(buffer_UnsafeCursor0.data, 2553, 4);
      buffer0.writeLongLe(0L);
      buffer_UnsafeCursor0.buffer.readUtf8Line();
      realBufferedSink0.buffer.sha512();
      try { 
        realBufferedSink0.buffer.readUtf8LineStrict(32763L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = buffer0.writeByte(0);
      // Undeclared exception!
      try { 
        buffer1.writeAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte) (-53), 100000000000000L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=100000000000000 toIndex=1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.outputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.buffer.request((-1));
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.selectPrefix((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer0.writeDecimalLong(1095216660480L);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: 0
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.sha512(buffer0);
      HashingSink.sha256(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor1.buffer.writeDecimalLong(100000000L);
      buffer_UnsafeCursor0.buffer.readLongLe();
      long long0 = (-552L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readUtf8Line((long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      hashingSource0.hash();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-116);
      try { 
        realBufferedSink0.buffer.readUtf8LineStrict(4517L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer2 = buffer_UnsafeCursor1.buffer;
      buffer2.writeUtf8CodePoint((-1));
      // Undeclared exception!
      try { 
        buffer2.read((byte[]) null, (-795), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer2 = buffer1.writeByte(0);
      buffer0.hashCode();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer2.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.next();
      Buffer buffer3 = new Buffer();
      buffer3.timeout();
      Pipe pipe0 = new Pipe(538L);
      Buffer buffer4 = pipe0.buffer;
      MockFile mockFile0 = new MockFile("XvC");
      File file0 = MockFile.createTempFile("XvC", "XvC", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      buffer_UnsafeCursor0.buffer.copyTo((OutputStream) mockPrintStream0);
      int int0 = buffer_UnsafeCursor1.next();
      assertEquals(1L, buffer_UnsafeCursor1.offset);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      buffer0.writeDecimalLong((-2105L));
      short short0 = buffer0.readShortLe();
      assertEquals(3L, buffer0.size());
      assertEquals((short)12845, short0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)57;
      buffer0.writeUtf8CodePoint(5);
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)60;
      ByteString byteString0 = ByteString.of(byteArray0);
      realBufferedSink0.buffer.hmacSha512(byteString0);
      Buffer buffer1 = realBufferedSink0.buffer;
      long long0 = (-258L);
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer.hashCode();
      long long1 = 15L;
      buffer1.writeDecimalLong(15L);
      try { 
        buffer1.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=2 content=3135\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.writeDecimalLong(0L);
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer0.writeDecimalLong((-1L));
      buffer0.readUtf8CodePoint();
      realBufferedSink0.buffer.request(352L);
      Pipe pipe0 = new Pipe(11L);
      Buffer buffer2 = pipe0.buffer;
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer2, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      buffer2.rangeEquals(11L, byteString1, (-2868), 100);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)5;
      ByteString byteString2 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        buffer1.indexOfElement(byteString0, (-1152921504606846976L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.sha512();
      realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.offset = 1000000000L;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(9L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=1000000000 > size=9
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      long long0 = buffer0.indexOf((byte)80, 6L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.sha512(buffer0);
      HashingSink.sha256(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor1.buffer.writeDecimalLong(100000000L);
      buffer_UnsafeCursor0.buffer.readLongLe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor1.buffer);
      realBufferedSink0.buffer();
      buffer1.readDecimalLong();
      realBufferedSink0.buffer.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(pipe_PipeSource0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      realBufferedSource0.buffer();
      Buffer buffer0 = realBufferedSource0.buffer.writeUtf8CodePoint(1114111);
      Buffer buffer1 = buffer0.writeDecimalLong(100L);
      Buffer buffer2 = buffer1.writeUtf8CodePoint((-336));
      // Undeclared exception!
      try { 
        buffer2.readUtf8Line((-2325L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=0 byteCount=-2325
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Pipe pipe0 = new Pipe(1736L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeByte((-3519));
      buffer1.indexOf((byte)26, (long) (byte)26);
      buffer0.readHexadecimalUnsignedLong();
      buffer1.sha256();
      buffer1.equals(buffer0);
      assertEquals(0L, buffer1.size());
      
      buffer1.readUtf8Line();
      String string0 = buffer1.readUtf8Line();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(92L);
      ByteString[] byteStringArray0 = new ByteString[4];
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer0.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.toString();
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-1788));
      Buffer buffer2 = buffer1.writeDecimalLong((-1788));
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("FHCRC", charset0);
      buffer2.indexOf(byteString0);
      assertEquals(6L, buffer1.size());
      assertEquals(6L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        buffer0.write(byteArray0, (int) (byte)0, (int) (byte)45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=9 offset=0 byteCount=45
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer2 = realBufferedSink1.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink1.buffer);
      Buffer buffer3 = realBufferedSource1.buffer();
      Buffer buffer4 = buffer3.writeHexadecimalUnsignedLong(255L);
      realBufferedSink1.close();
      realBufferedSource1.buffer();
      Buffer buffer5 = realBufferedSink0.buffer();
      Buffer buffer6 = buffer4.writeDecimalLong(100L);
      buffer2.completeSegmentByteCount();
      buffer5.equals(buffer3);
      realBufferedSource0.readByteArray();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer3);
      assertEquals(5L, buffer3.size());
      
      Buffer buffer7 = realBufferedSink2.buffer;
      Buffer buffer8 = new Buffer();
      assertFalse(buffer8.equals((Object)buffer6));
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.resizeBuffer((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer0.readByteArray(0L);
      buffer2.writeAll(realBufferedSource0);
      realBufferedSource0.buffer.read(buffer1, 0L);
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile(" }jaw+", "5qq/xyXhm:", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      // Undeclared exception!
      try { 
        buffer1.writeTo((OutputStream) mockFileOutputStream0, (-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeByte((-1));
      buffer1.hashCode();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.next();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffffff
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      BufferedSink bufferedSink0 = buffer0.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      realBufferedSink0.writeUtf8("");
      BufferedSink bufferedSink1 = realBufferedSink0.writeUtf8("resizeBuffer() only permitted for read/write buffers");
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(2L);
      Buffer buffer3 = buffer2.writeUtf8CodePoint(0);
      buffer3.writeDecimalLong((-930L));
      Buffer buffer4 = buffer3.writeDecimalLong(117L);
      buffer2.readByteString();
      buffer2.completeSegmentByteCount();
      realBufferedSource0.readByteArray();
      buffer0.writeAll(((RealBufferedSink) bufferedSink1).buffer);
      Buffer buffer5 = realBufferedSource0.buffer;
      buffer5.clear();
      HashingSource hashingSource0 = HashingSource.sha256(buffer5);
      ByteString byteString0 = hashingSource0.hash();
      boolean boolean0 = buffer4.rangeEquals(9223372036854775807L, byteString0, 1073741824, 0);
      assertEquals(52L, buffer0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l%G,tEs");
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((-3902L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-3902
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = realBufferedSink0.buffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      byteArrayOutputStream0.writeTo(outputStream0);
      realBufferedSink0.buffer.writeTo((OutputStream) byteArrayOutputStream0);
      buffer1.writeDecimalLong((-1025L));
      Buffer buffer2 = realBufferedSource0.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      ByteString.decodeBase64("D.3snA0>N@1D-S");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-46);
      ByteString.of(byteArray0);
      ByteString.decodeBase64(")");
      ByteString.encodeUtf8("");
      // Undeclared exception!
      try { 
        realBufferedSink1.buffer.indexOf((byte) (-57), (-258L), (-1171L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-258 toIndex=-1171
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer1 = buffer0.write(byteString0);
      assertEquals(0L, buffer1.size());
      
      buffer1.emit();
      // Undeclared exception!
      try { 
        buffer1.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink1.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer2 = realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      realBufferedSink0.writeUtf8("endIndex > string.length: ");
      realBufferedSink0.writeUtf8("endIndex > string.length: ");
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSink1.buffer);
      Buffer buffer3 = realBufferedSource2.buffer();
      Buffer buffer4 = buffer3.writeHexadecimalUnsignedLong(255L);
      realBufferedSink1.close();
      realBufferedSource0.buffer();
      Buffer buffer5 = realBufferedSink0.buffer();
      buffer4.writeDecimalLong(100L);
      ByteString.decodeBase64("endIndex > string.length: ");
      buffer2.completeSegmentByteCount();
      buffer5.equals(buffer3);
      realBufferedSource1.readByteArray();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer3);
      Buffer buffer6 = realBufferedSink2.buffer;
      long long0 = buffer4.writeAll(buffer1);
      assertEquals(5L, buffer4.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        buffer0.write(realBufferedSink0.buffer, 431L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=431
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("size < 4: ");
      ByteString.decodeBase64(".outputStream()");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)71;
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString.decodeBase64(".outputStream()");
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString1;
      ByteString byteString2 = ByteString.encodeUtf8("");
      byteStringArray0[1] = byteString2;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = null;
      Options.of(byteStringArray0);
      Pipe pipe0 = new Pipe((byte)71);
      Buffer buffer2 = pipe0.buffer;
      Options options0 = Options.of(byteStringArray0);
      buffer2.select(options0);
      realBufferedSink0.buffer.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.indexOf((byte) (-2), 1114111L, (long) (byte)71);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=9 fromIndex=1114111 toIndex=71
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource1.buffer();
      Pipe pipe0 = new Pipe(495L);
      Buffer buffer2 = pipe0.buffer;
      Buffer buffer3 = realBufferedSource1.buffer.writeUtf8CodePoint(192);
      Buffer buffer4 = realBufferedSink0.buffer.writeDecimalLong((-2105L));
      realBufferedSink0.buffer.writeDecimalLong(3281L);
      realBufferedSource0.buffer.readByteString();
      byte byte0 = (byte)5;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)5;
      buffer1.completeSegmentByteCount();
      realBufferedSource0.readByteArray();
      Buffer buffer5 = new Buffer();
      buffer5.clear();
      buffer3.indexOfElement(byteString0, 9223372036854775807L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer4.exhausted();
      // Undeclared exception!
      try { 
        realBufferedSource1.buffer.getByte(495L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=495 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.outputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeShortLe((-2146722937));
      Charset charset0 = Charset.defaultCharset();
      buffer1.writeString("v:Ri|5+LYA", charset0);
      SegmentPool.byteCount = (long) (-2146722937);
      buffer_UnsafeCursor0.next();
      assertEquals(12, buffer_UnsafeCursor0.end);
      
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer2 = new Buffer();
      buffer2.writeLongLe((-841L));
      String string0 = buffer2.readUtf8Line();
      assertEquals("\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = buffer2.writeDecimalLong(2044L);
      buffer3.writeDecimalLong(0L);
      buffer3.size = (-1427L);
      realBufferedSink0.buffer.readByteString();
      buffer1.completeSegmentByteCount();
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=-1427 offset=0 byteCount=-1427
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)94;
      byteArray0[2] = (byte)94;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer((byte)94);
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer3.readAll(realBufferedSink0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(2L);
      Buffer buffer1 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer2 = buffer0.writeLongLe(2L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      buffer0.readUtf8Line();
      Buffer buffer3 = realBufferedSource0.buffer;
      Buffer buffer4 = buffer3.writeShortLe(65533);
      buffer3.readByte();
      buffer3.sha512();
      assertEquals(1L, buffer3.size());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      buffer2.emit();
      buffer1.sha512();
      realBufferedSource0.buffer.clear();
      assertTrue(buffer1.equals((Object)buffer4));
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeDecimalLong((-1L));
      ByteString byteString0 = buffer_UnsafeCursor1.buffer.readByteString();
      buffer_UnsafeCursor1.buffer.completeSegmentByteCount();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.readByteArray();
      buffer1.writeAll(buffer_UnsafeCursor1.buffer);
      buffer1.clear();
      realBufferedSource0.buffer.rangeEquals((long) (-1), byteString0, (-1), (-1417));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.read(realBufferedSource0.buffer, 210L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.getByte(0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-43);
      byte byte0 = (byte)75;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)94;
      byteArray0[5] = (byte)0;
      byteArray0[7] = (byte) (-31);
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      realBufferedSink0.writeInt((-854));
      // Undeclared exception!
      try { 
        buffer0.writeTo(outputStream0, 221L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=221
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.readAll(realBufferedSink0);
      // Undeclared exception!
      try { 
        buffer0.readByteString(6553L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=6553
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.segmentSizes();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = buffer0.writeHexadecimalUnsignedLong(17);
      Buffer buffer3 = buffer0.writeUtf8CodePoint(11);
      buffer3.writeDecimalLong(1000000000000000000L);
      buffer1.writeDecimalLong(117L);
      ByteString byteString0 = buffer2.readByteString();
      buffer1.completeSegmentByteCount();
      realBufferedSource0.readByteArray();
      buffer0.clear();
      buffer1.indexOfElement(byteString0, 100000000000000L);
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      HashingSink hashingSink1 = HashingSink.sha256(hashingSink0);
      ByteString byteString1 = hashingSink0.hash();
      byte[] byteArray0 = new byte[2];
      ByteString byteString2 = new ByteString(byteArray0);
      HashingSink hashingSink2 = HashingSink.hmacSha512(buffer0, byteString1);
      hashingSink2.flush();
      HashingSink.md5(hashingSink1);
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options.of(byteStringArray0);
      ByteString byteString3 = buffer0.hmacSha1(byteString2);
      ByteString byteString4 = new ByteString(byteArray0);
      assertFalse(byteString4.equals((Object)byteString3));
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[2];
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = buffer1.writeLongLe((byte)0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        buffer2.readFrom((InputStream) null, 757L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.writeByte((-3706));
      assertFalse(buffer0.exhausted());
      
      buffer0.readAll(realBufferedSink0);
      Buffer buffer1 = realBufferedSink0.buffer.writeUtf8("");
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((-1906L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1906
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer();
      buffer3.writeDecimalLong(0L);
      buffer2.request(0L);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("jY^sX&R+0/Nto}8g", charset0);
      buffer3.indexOf(byteString0);
      assertFalse(buffer3.exhausted());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = buffer1.writeDecimalLong((-3982L));
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("&~Bd#lrEYwEaS}sp' +", "", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      Buffer buffer3 = buffer2.writeTo((OutputStream) mockFileOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer4 = buffer3.writeString("HmacSHA1", charset0);
      Buffer buffer5 = new Buffer();
      buffer4.buffer();
      // Undeclared exception!
      try { 
        buffer3.getByte((-3982L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=-3982 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = null;
      int int0 = (-1);
      int int1 = 17;
      buffer0.segmentSizes();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null, (-1), 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = realBufferedSink0.buffer.writeHexadecimalUnsignedLong(8192L);
      buffer2.md5();
      realBufferedSink0.buffer.segmentSizes();
      realBufferedSink0.buffer.md5();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        realBufferedSink0.buffer.copyTo((OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe((-55297));
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer2 = buffer1.writeByte(0);
      buffer0.hashCode();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer2.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.next();
      Buffer buffer3 = new Buffer();
      buffer3.timeout();
      Pipe pipe0 = new Pipe(538L);
      Buffer buffer4 = pipe0.buffer;
      MockFile mockFile0 = new MockFile("XvC");
      File file0 = MockFile.createTempFile("XvC", "XvC", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Buffer buffer5 = buffer_UnsafeCursor0.buffer.copyTo((OutputStream) mockPrintStream0, (long) 0, (long) 0);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertFalse(buffer5.equals((Object)buffer3));
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      buffer_UnsafeCursor0.offset = (-1452L);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.readUtf8();
      buffer0.inputStream();
      buffer0.emit();
      buffer_UnsafeCursor0.buffer.sha512();
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe((byte)0);
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeUtf8CodePoint((-2764));
      Buffer buffer1 = realBufferedSource0.buffer;
      Integer integer0 = new Integer((-2764));
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeUtf8("6:%Wx#.^R]", 793, (-2764));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -2764 < 793
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      Source source0 = hashingSource0.delegate();
      long long0 = 1579L;
      hashingSource0.read(buffer0, 1579L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer1 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer1.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = null;
      // Undeclared exception!
      try { 
        buffer0.indexOf((ByteString) null, 32L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe(1297);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-36);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      // Undeclared exception!
      try { 
        buffer1.readFrom(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong((byte) (-88));
      ByteString byteString0 = ByteString.encodeUtf8("jY^sX&R+0/Nto}8g");
      ByteString byteString1 = ByteString.EMPTY;
      ByteString.decodeBase64("?");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      ByteString byteString2 = ByteString.EMPTY;
      ByteString.decodeBase64("2xgj{I~\"x,2K");
      ByteString byteString3 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = null;
      byteStringArray0[1] = byteString3;
      byteStringArray0[2] = null;
      byteStringArray0[3] = null;
      byteStringArray0[4] = byteString3;
      byteStringArray0[5] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.buffer.select(options0);
      ((RealBufferedSink) bufferedSink0).buffer.readUtf8CodePoint();
      realBufferedSource0.buffer.indexOf((byte) (-88), (long) 0, 1579L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.copyTo((Buffer) null, 10000000000000000L, (long) (byte) (-88));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha1();
      assertEquals(20, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(pipe_PipeSource0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.writeUtf8("");
      Buffer buffer0 = realBufferedSource0.buffer();
      buffer0.writeHexadecimalUnsignedLong(100L);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSink0.buffer();
      realBufferedSource0.buffer.writeDecimalLong(0);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer2.request(32L);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString(")", charset0);
      long long0 = realBufferedSource0.buffer.indexOf(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSink0.writeUtf8("endIndex > string.length: ");
      realBufferedSink0.writeUtf8("endIndex > string.length: ");
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer2.writeHexadecimalUnsignedLong(2L);
      Buffer buffer3 = realBufferedSink0.buffer.writeUtf8CodePoint(56319);
      Buffer buffer4 = realBufferedSource0.buffer.writeDecimalLong(2L);
      buffer4.request(10000L);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("endIndex > string.length: ", charset0);
      buffer3.indexOf(byteString0);
      buffer1.writeShort(981);
      assertEquals(55L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe(3456);
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(3456);
      ByteString byteString0 = buffer2.md5();
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer3 = realBufferedSource0.buffer;
      buffer1.clone();
      // Undeclared exception!
      try { 
        buffer0.getByte(3456);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=5 offset=3456 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      realBufferedSink0.writeUtf8("]c'_");
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer2.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.seek((-1));
      Buffer buffer3 = realBufferedSink0.buffer;
      Buffer buffer4 = buffer3.writeDecimalLong(1000L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer4);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      Buffer buffer5 = realBufferedSource2.buffer;
      buffer_UnsafeCursor0.buffer.request(643L);
      buffer3.request((-1L));
      // Undeclared exception!
      try { 
        realBufferedSource1.buffer.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSink0.buffer();
      realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[0];
      Segment segment0 = new Segment(byteArray0, 54, 54, true, true);
      SegmentPool.next = segment0;
      Buffer buffer2 = realBufferedSource0.buffer;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      long long0 = 7L;
      // Undeclared exception!
      try { 
        buffer2.readFrom((InputStream) byteArrayInputStream0, 7L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("5NDWAN");
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      realBufferedSink0.writeUtf8("ISIZE");
      bufferedSink0.writeUtf8("]H/caw");
      Buffer buffer1 = realBufferedSink1.buffer.writeUtf8CodePoint(26);
      ((RealBufferedSink) bufferedSink0).buffer.writeDecimalLong((-1842L));
      realBufferedSink0.buffer.readByteString();
      ((RealBufferedSink) bufferedSink0).buffer.completeSegmentByteCount();
      buffer1.exhausted();
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.readUtf8Line(4L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=3 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink1.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink1.buffer);
      Buffer buffer2 = realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      realBufferedSink1.writeUtf8("endIndex > string.length: ");
      realBufferedSink0.writeUtf8("endIndex > string.length: ");
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer();
      realBufferedSource2.buffer.writeHexadecimalUnsignedLong(255L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink1.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer3 = new Buffer();
      realBufferedSource2.buffer.timeout();
      Pipe pipe0 = new Pipe(745L);
      Buffer buffer4 = pipe0.buffer;
      MockFile mockFile0 = new MockFile("\r");
      MockFile.createTempFile("endIndex > string.length: ", "endIndex > string.length: ", (File) mockFile0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.sha512(buffer0);
      HashingSink.sha256(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor1.buffer.writeDecimalLong(100000000L);
      Buffer buffer2 = buffer1.writeUtf8CodePoint(22);
      buffer2.readLongLe();
      long long0 = (-552L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readUtf8Line((long) 22);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=21 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.writeUtf8("zJvY2laM@[!)[s");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.buffer();
      realBufferedSource0.readByteArray();
      boolean boolean0 = realBufferedSource0.buffer.exhausted();
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong((byte) (-88));
      ByteString byteString0 = ByteString.encodeUtf8("jY^sX&R+0/Nto}8g");
      ByteString byteString1 = ByteString.EMPTY;
      ByteString.decodeBase64("?");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      ByteString.of(byteArray0);
      ByteString.decodeBase64("2xgj{I~\"x,2K");
      ByteString byteString2 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = null;
      byteStringArray0[1] = byteString2;
      byteStringArray0[2] = null;
      byteStringArray0[3] = null;
      byteStringArray0[4] = byteString2;
      byteStringArray0[5] = byteString0;
      Options.of(byteStringArray0);
      ByteString.encodeUtf8("");
      // Undeclared exception!
      try { 
        buffer0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(pipe_PipeSource0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSource0.buffer();
      int int0 = 1114125;
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeUtf8CodePoint(1114125);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 11000d
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer1.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      buffer0.indexOf((byte)71, (long) (byte)71);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.readUtf8Line();
      Charset charset0 = Charset.defaultCharset();
      String string0 = "";
      ByteString.encodeString("", charset0);
      Buffer buffer1 = new Buffer();
      // Undeclared exception!
      try { 
        buffer1.readFrom((InputStream) null, (-12L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -12
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      List<Integer> list0 = buffer0.segmentSizes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Pipe pipe0 = new Pipe(1736L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource1.buffer();
      Buffer buffer2 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readUnsafe();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      Buffer buffer4 = buffer3.writeDecimalLong(9223372036854775807L);
      Buffer buffer5 = realBufferedSource0.buffer;
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer4);
      realBufferedSource0.buffer.read(buffer1, 10000L);
      Pipe pipe1 = new Pipe(4278190080L);
      realBufferedSource2.buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer6 = realBufferedSource1.buffer;
      buffer6.readString(0L, charset0);
      // Undeclared exception!
      try { 
        buffer6.readString(592L, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=19 offset=0 byteCount=592
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      ByteString.encodeUtf8("jY^sX&R+0/Nto}8g");
      ByteString byteString0 = ByteString.EMPTY;
      ByteString.decodeBase64("p");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      ByteString byteString1 = ByteString.EMPTY;
      ByteString.decodeBase64("2xgj{I~\"x,2K");
      ByteString byteString2 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = null;
      byteStringArray0[2] = null;
      byteStringArray0[3] = null;
      byteStringArray0[4] = byteString2;
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.indexOf((byte) (-88), (long) (byte) (-88), (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=17 fromIndex=-88 toIndex=0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[2];
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = buffer1.writeLongLe((byte)0);
      HashingSource.sha1(buffer2);
      buffer0.write((Source) buffer2, 4L);
      assertTrue(buffer2.equals((Object)buffer0));
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeUtf8("2");
      Buffer buffer2 = realBufferedSource0.buffer;
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong(2085L);
      buffer1.writeUtf8CodePoint(122);
      buffer1.writeDecimalLong(122);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer3 = realBufferedSink1.buffer;
      buffer2.request(11L);
      buffer1.writeLongLe(10L);
      realBufferedSink0.buffer();
      String string0 = realBufferedSink0.buffer.readUtf8Line();
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals("2825z122", string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-102);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      buffer_UnsafeCursor0.next();
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      realBufferedSink0.buffer.writeLongLe((byte) (-102));
      buffer0.readUtf8Line();
      long long0 = realBufferedSink0.buffer.readLongLe();
      assertEquals((-102L), long0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = buffer2.writeDecimalLong(2044L);
      buffer3.writeDecimalLong(0L);
      try { 
        realBufferedSource0.readByteString(2044L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      ((RealBufferedSink) bufferedSink0).buffer.writeUtf8CodePoint(57343);
      Deflater deflater0 = new Deflater();
      assertEquals(0L, deflater0.getBytesWritten());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer2.writeLong(841L);
      SegmentPool.byteCount = 2L;
      buffer2.readInt();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeDecimalLong((-922337203685477580L));
      buffer1.readUtf8CodePoint();
      buffer1.request(808L);
      buffer0.skip(12L);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.toString();
      MockPrintStream mockPrintStream0 = new MockPrintStream("wvD");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(bufferedOutputStream0, true);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(78);
      buffer1.readIntLe();
      // Undeclared exception!
      try { 
        buffer1.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "not attached to a buffer");
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = new Buffer();
      buffer1.clear();
      ByteString byteString0 = ByteString.encodeUtf8("FR?7");
      buffer1.indexOfElement(byteString0, 1L);
      buffer0.exhausted();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((byte) (-98));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -98
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSource0.buffer);
      BufferedSink bufferedSink0 = realBufferedSink1.writeUtf8("ISIZE");
      BufferedSink bufferedSink1 = realBufferedSink0.writeUtf8("ISIZE");
      Buffer buffer2 = buffer0.writeHexadecimalUnsignedLong((-3902L));
      Buffer buffer3 = ((RealBufferedSink) bufferedSink1).buffer.writeUtf8CodePoint(16);
      realBufferedSink1.buffer.writeDecimalLong(65536L);
      Buffer buffer4 = buffer3.writeDecimalLong(117L);
      realBufferedSource0.buffer();
      ByteString byteString0 = realBufferedSink0.buffer.readByteString();
      buffer3.completeSegmentByteCount();
      realBufferedSource0.readByteArray();
      buffer0.clear();
      buffer2.indexOfElement(byteString0, 0L);
      buffer3.exhausted();
      ((RealBufferedSink) bufferedSink0).buffer.readUtf8Line(4L);
      assertTrue(buffer0.exhausted());
      assertTrue(buffer0.equals((Object)buffer4));
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      HashingSink hashingSink1 = HashingSink.sha256(hashingSink0);
      HashingSink hashingSink2 = HashingSink.sha256(hashingSink1);
      hashingSink2.hash();
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSink0.buffer);
      hashingSource0.read(realBufferedSink0.buffer, 538L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSource0.buffer.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      realBufferedSink0.buffer.writeDecimalLong((-1));
      realBufferedSink0.buffer.writeUtf8CodePoint(2838);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer2.writeDecimalLong(197L);
      Pipe pipe0 = new Pipe(197L);
      Buffer buffer3 = pipe0.buffer;
      buffer3.readByteString();
      Buffer buffer4 = new Buffer();
      buffer_UnsafeCursor0.buffer.completeSegmentByteCount();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writeAll(hashingSource0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeUtf8("resizeBuffer() only permitted for read/write buffers");
      int int0 = 0;
      realBufferedSink0.writeShort((-3300));
      // Undeclared exception!
      try { 
        buffer0.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[2];
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = buffer1.writeLongLe((byte)0);
      realBufferedSource0.buffer.indexOf((byte)5, (long) (byte)5, (long) (byte)5);
      buffer2.readAndWriteUnsafe();
      buffer1.readUtf8Line(4L);
      assertEquals(3L, buffer1.size());
      
      Buffer buffer3 = realBufferedSource0.buffer.clone();
      assertFalse(buffer3.equals((Object)buffer0));
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.readByteString();
      realBufferedSink0.writeUtf8("|d+'8){|H /Fqc!");
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource1.buffer();
      Buffer buffer2 = realBufferedSource0.buffer.writeHexadecimalUnsignedLong((-934L));
      Buffer buffer3 = buffer0.writeUtf8CodePoint((-3437));
      buffer3.writeDecimalLong(435L);
      buffer0.writeDecimalLong((-3437));
      realBufferedSink0.buffer.readByteString();
      realBufferedSource1.buffer.completeSegmentByteCount();
      realBufferedSource0.readByteArray();
      buffer2.writeAll(realBufferedSource1);
      buffer3.clear();
      assertTrue(buffer3.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = new Buffer();
      buffer1.indexOf((byte)0);
      buffer0.writeHexadecimalUnsignedLong((-296L));
      ByteString byteString0 = buffer1.md5();
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer1.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer2 = realBufferedSink0.buffer.writeByte(2547);
      buffer0.hashCode();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer2.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.next();
      Buffer buffer3 = buffer_UnsafeCursor1.buffer;
      Charset.defaultCharset();
      try { 
        buffer1.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // size < 4: 1 (to read code point prefixed 0xfffffff3)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      long long0 = (-258L);
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      ((RealBufferedSink) bufferedSink0).buffer.writeUtf8CodePoint(57343);
      Buffer buffer2 = realBufferedSource0.buffer;
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSink0.buffer.readUnsafe(buffer_UnsafeCursor0);
      long long1 = 10L;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.writeUtf8((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = (Buffer)buffer0.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeUtf8("a(e\"|");
      realBufferedSink0.writeUtf8("^P{89-");
      Buffer buffer2 = buffer0.writeHexadecimalUnsignedLong((-3902L));
      Buffer buffer3 = buffer0.writeUtf8CodePoint(16);
      buffer1.writeDecimalLong(1000000L);
      buffer2.writeDecimalLong(65536L);
      Buffer buffer4 = realBufferedSource0.buffer();
      buffer3.readByteString();
      realBufferedSource0.buffer.completeSegmentByteCount();
      realBufferedSource0.readByteArray();
      buffer4.clear();
      long long0 = new Integer(16);
      buffer1.exhausted();
      try { 
        buffer4.readUtf8Line(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.writeDecimalLong(4294967295L);
      ByteString byteString0 = ByteString.EMPTY;
      buffer1.request(2L);
      // Undeclared exception!
      try { 
        buffer1.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = realBufferedSource0.buffer.writeUtf8CodePoint(184);
      Buffer buffer3 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      Charset.defaultCharset();
      buffer4.readUtf8CodePoint();
      Buffer buffer5 = buffer_UnsafeCursor0.buffer;
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer5.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer();
      buffer3.writeDecimalLong(0L);
      buffer2.request(0L);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)62;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.copyTo(buffer3, 0L, (long) (byte) (-4));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=-4
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      byte byte0 = (byte) (-88);
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong((byte) (-88));
      int int0 = 0;
      String string0 = "";
      String string1 = "mAb@&-D\"5u&/:M,f";
      // Undeclared exception!
      try { 
        Charset.forName("mAb@&-D\"5u&/:M,f");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // mAb@&-D\"5u&/:M,f
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = buffer1.clone();
      Pipe pipe0 = new Pipe(3573L);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)3;
      ByteString byteString0 = new ByteString(byteArray0);
      realBufferedSource0.indexOf(byteString0, 8192L);
      Pipe pipe1 = new Pipe((byte)3);
      Buffer buffer3 = pipe0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      realBufferedSink1.buffer();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      long long0 = (-1379L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.read(buffer1, 1310L);
      Buffer buffer2 = realBufferedSource0.buffer;
      try { 
        buffer0.readFully(buffer2, 1000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer2.clone();
      ByteString byteString0 = ByteString.encodeUtf8("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)15;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)56;
      Segment segment0 = new Segment(byteArray0, 763, (-4439), false, false);
      realBufferedSource0.buffer.head = segment0;
      Pipe pipe0 = new Pipe(2344L);
      Pipe pipe1 = new Pipe(3L);
      Buffer buffer3 = pipe0.buffer;
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.indexOfElement(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(15);
      Buffer buffer1 = new Buffer();
      buffer1.sha256();
      boolean boolean0 = buffer0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer2.clone();
      ByteString.encodeUtf8("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)15;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)56;
      buffer2.emit();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readString((long) (byte) (-57), charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-57
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer0.writeDecimalLong((-72057594037927936L));
      buffer2.request(1L);
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      // Undeclared exception!
      try { 
        buffer0.write(buffer1, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = realBufferedSource0.buffer.writeUtf8CodePoint(184);
      Buffer buffer3 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      Charset.defaultCharset();
      buffer4.readUtf8CodePoint();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer5 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer3.copyTo(buffer5, 100L, 4294967295L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=100 byteCount=4294967295
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Charset.defaultCharset();
      String string0 = "#WqEf~~5 ";
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink0.buffer.writeString("#WqEf~~5 ", charset0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readUtf8LineStrict((-6788L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -6788
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      HashingSink.sha256(hashingSink0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)94;
      buffer0.clone();
      ByteString.encodeUtf8("G");
      Pipe pipe0 = new Pipe(3L);
      Buffer buffer1 = pipe0.buffer;
      buffer1.indexOfElement(byteString0);
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      HashingSink hashingSink1 = HashingSink.sha256(hashingSink0);
      ByteString byteString1 = hashingSink0.hash();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)84;
      ByteString byteString2 = new ByteString(byteArray0);
      HashingSink hashingSink2 = HashingSink.hmacSha512(buffer0, byteString1);
      hashingSink2.flush();
      HashingSink.md5(hashingSink1);
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      buffer0.indexOfElement(byteString0);
      buffer0.read(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.require(0);
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe((byte)0);
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.indexOf(byteString0, 40L);
      buffer0.writeDecimalLong(10L);
      Buffer buffer1 = new Buffer();
      // Undeclared exception!
      try { 
        buffer1.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer0.writeByte(2444);
      buffer2.hashCode();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Integer integer0 = new Integer(2404);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("charset == null");
      mockFileOutputStream0.release();
      buffer0.copyTo((OutputStream) mockFileOutputStream0);
      // Undeclared exception!
      try { 
        buffer0.write((Buffer) null, 6L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource1.buffer();
      Pipe pipe0 = new Pipe(495L);
      Buffer buffer2 = pipe0.buffer;
      Buffer buffer3 = realBufferedSource1.buffer.writeUtf8CodePoint(192);
      ByteString byteString0 = buffer1.snapshot();
      realBufferedSink0.buffer.writeDecimalLong((-2105L));
      realBufferedSink0.buffer.request((-2105L));
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString1 = ByteString.encodeString("KB%ar$MBeyfxEOOu", charset0);
      long long0 = new Integer(192);
      realBufferedSource1.buffer.readShortLe();
      buffer2.indexOfElement(byteString1);
      buffer3.indexOf(byteString0);
      realBufferedSink0.buffer.write(byteString0);
      // Undeclared exception!
      try { 
        buffer1.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      realBufferedSink0.buffer();
      realBufferedSink0.buffer();
      Buffer buffer1 = realBufferedSource0.buffer;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        buffer1.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.emitCompleteSegments();
      buffer1.writeShort((-16777216));
      assertFalse(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer();
      buffer3.writeDecimalLong(0L);
      buffer2.request(0L);
      buffer2.writeIntLe(573);
      buffer2.request(65L);
      // Undeclared exception!
      try { 
        buffer2.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 4
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.outputStream();
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer1.timeout();
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer2 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer1.snapshot(978);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=978
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = realBufferedSource0.buffer;
      byte[] byteArray0 = buffer0.readByteArray(0L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      buffer2.writeAll(realBufferedSource0);
      realBufferedSource0.buffer.read(buffer1, 0L);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64Url();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)56;
      byteArray1[1] = (byte) (-57);
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte) (-57);
      byteArray1[4] = (byte) (-57);
      byteArray1[6] = (byte)56;
      Segment segment0 = new Segment(byteArray1, (-1028), (-2187), false, false);
      Pipe pipe0 = new Pipe((byte)56);
      long long0 = 1254L;
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString0, (long) (byte)56);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(pipe_PipeSource0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("");
      realBufferedSource0.buffer();
      realBufferedSource0.buffer.writeUtf8CodePoint(1114111);
      pipe_PipeSource0.close();
      realBufferedSource0.buffer.writeDecimalLong(3281L);
      Buffer buffer0 = realBufferedSource0.buffer.writeDecimalLong(1114111);
      buffer0.readByteString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = ((RealBufferedSink) bufferedSink0).buffer.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.completeSegmentByteCount();
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      buffer0.writeByte(57343);
      buffer0.hashCode();
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(pipe_PipeSource0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      realBufferedSource0.buffer();
      realBufferedSource0.buffer.writeUtf8CodePoint(1114111);
      pipe_PipeSource0.close();
      pipe_PipeSource0.close();
      Buffer buffer0 = realBufferedSource0.buffer.writeDecimalLong(3281L);
      Buffer buffer1 = new Buffer();
      buffer0.timeout();
      Pipe pipe1 = new Pipe(538L);
      Buffer buffer2 = pipe1.buffer;
      MockFile mockFile0 = new MockFile("source == null");
      MockFile.createTempFile("oW(L]]CDbyj~y),@}(", "okio.RealBufferedSource", (File) mockFile0);
      File file0 = MockFile.createTempFile("okio.ByteString", "okio.RealBufferedSource");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      // Undeclared exception!
      try { 
        buffer1.copyTo((OutputStream) mockPrintStream0, 100L, 100L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=100 byteCount=100
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      BufferedSink bufferedSink0 = buffer0.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      realBufferedSink0.writeUtf8("");
      realBufferedSink0.writeUtf8("resizeBuffer() only permitted for read/write buffers");
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(2L);
      Buffer buffer3 = buffer2.writeUtf8CodePoint(0);
      Buffer buffer4 = buffer3.writeDecimalLong((-930L));
      Buffer buffer5 = buffer3.writeDecimalLong(117L);
      ByteString byteString0 = buffer2.readByteString();
      buffer2.completeSegmentByteCount();
      assertTrue(buffer2.equals((Object)bufferedSink0));
      
      realBufferedSource0.readByteArray();
      buffer1.writeAll(buffer5);
      realBufferedSink0.buffer.clear();
      buffer4.indexOfElement(byteString0, 707L);
      assertEquals(9, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe(2255);
      Buffer buffer1 = new Buffer();
      // Undeclared exception!
      try { 
        buffer1.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer2.snapshot((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      buffer0.writeLongLe(4L);
      buffer0.readByte();
      buffer0.sha512();
      buffer0.flush();
      buffer0.request((-3116L));
      buffer0.writeHexadecimalUnsignedLong(100L);
      assertEquals(9L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource1.buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource1.buffer);
      Buffer buffer1 = realBufferedSink0.buffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      byteArrayOutputStream0.writeTo(outputStream0);
      realBufferedSink0.buffer.writeTo((OutputStream) byteArrayOutputStream0);
      buffer1.clone();
      ByteString byteString0 = realBufferedSource1.buffer.snapshot();
      ByteString.decodeHex("");
      buffer0.indexOfElement(byteString0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readString((-787L), (Charset) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-787
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer.writeInt(224);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      int int0 = new Integer(224);
      Buffer buffer2 = realBufferedSource0.buffer.clone();
      assertEquals(4L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      ByteString byteString0 = realBufferedSource0.readByteString();
      realBufferedSource0.buffer.rangeEquals(5129L, byteString0, (-2146944484), (-2146944484));
      long long0 = buffer0.read(buffer1, (long) 3);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      deflater0.finished();
      Buffer buffer2 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer2.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.indexOf((byte)0, 1L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readUnsafe();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      byte byte0 = (byte) (-25);
      // Undeclared exception!
      try { 
        buffer1.indexOf((byte)0, 0L, (-1551L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=0 toIndex=-1551
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.writeDecimalLong((-7L));
      buffer0.request((-7L));
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      hashingSource0.hash();
      byte byte0 = (byte)5;
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.indexOfElement(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      HashingSink hashingSink1 = HashingSink.sha256(hashingSink0);
      ByteString byteString1 = hashingSink0.hash();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)94;
      ByteString byteString2 = new ByteString(byteArray0);
      HashingSink hashingSink2 = HashingSink.hmacSha512(buffer0, byteString1);
      hashingSink2.close();
      hashingSink2.flush();
      HashingSink.md5(hashingSink1);
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      buffer0.indexOfElement(byteString0);
      buffer0.read(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.require(0);
      // Undeclared exception!
      try { 
        buffer1.indexOf((byte) (-109), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-1 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha256();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(65536L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.writeUtf8CodePoint((-1));
      // Undeclared exception!
      try { 
        buffer3.indexOfElement((ByteString) null, 1000000000000000000L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((byte)0);
      buffer1.writableSegment(4);
      // Undeclared exception!
      try { 
        buffer1.write((Source) buffer0, 553L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)63;
      Buffer buffer1 = buffer0.write(byteArray0);
      buffer1.writeUtf8("");
      buffer0.emit();
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte((-973));
      buffer0.hashCode();
      Charset.defaultCharset();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(2L);
      Buffer buffer1 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      buffer0.writeLongLe(2L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      buffer0.readUtf8Line();
      Buffer buffer2 = realBufferedSource0.buffer;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)62;
      realBufferedSource0.buffer.read(byteArray0);
      Buffer buffer3 = buffer2.writeShortLe(65533);
      buffer3.readAndWriteUnsafe();
      realBufferedSource0.buffer.readByte();
      buffer2.sha512();
      realBufferedSource0.buffer();
      buffer0.writeUtf8("08,q|}=dq}y");
      assertEquals(11L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = (Buffer)buffer0.write((Source) realBufferedSource0, (-2248L));
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      int int0 = 3;
      // Undeclared exception!
      try { 
        buffer1.snapshot(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=3
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer2.readUnsafe(buffer_UnsafeCursor0);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe();
      Buffer buffer3 = buffer_UnsafeCursor1.buffer;
      buffer0.timeout();
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer4 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer2.snapshot((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Pipe pipe0 = new Pipe(956L);
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.rangeEquals(1231L, byteString0);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer2.getByte(956L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=956 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Pipe pipe0 = new Pipe(10000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.md5();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        buffer0.readFrom((InputStream) byteArrayInputStream0, (long) (byte)10);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8(".");
      long long0 = buffer0.indexOf(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      int int0 = (-1423);
      realBufferedSink0.buffer.writeInt((-1423));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSink0.closed = false;
      realBufferedSink0.writeUtf8("");
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        buffer0.write(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.writeUtf8("");
      realBufferedSink0.writeShort((-3300));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.writeHexadecimalUnsignedLong((-318L));
      Buffer buffer2 = buffer0.writeDecimalLong((-318L));
      realBufferedSink0.buffer.completeSegmentByteCount();
      realBufferedSink0.buffer.equals(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      assertEquals(4L, buffer0.size());
      
      realBufferedSource0.readByteArray();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer3 = realBufferedSink1.buffer;
      Buffer buffer4 = new Buffer();
      assertFalse(buffer4.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString.decodeBase64(".outputStream()");
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("resizeBuffer() only permitted for read/write buffers");
      buffer0.flush();
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x72
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(127);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      buffer0.readByteString();
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[6];
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeLongLe((byte)0);
      buffer0.write(byteArray0);
      assertEquals(14L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      Pipe pipe0 = new Pipe(1000000000000L);
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = buffer0.writeHexadecimalUnsignedLong(1021L);
      Buffer buffer3 = buffer2.writeUtf8CodePoint(65536);
      Buffer buffer4 = buffer1.writeDecimalLong(1021L);
      Buffer buffer5 = buffer3.writeDecimalLong(1000000000000L);
      ByteString byteString0 = buffer3.readByteString();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer6 = realBufferedSink0.buffer();
      Integer integer0 = new Integer(2147396252);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer4);
      realBufferedSource0.readByteArray();
      buffer5.clear();
      buffer5.indexOfElement(byteString0, 1021L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer6.readUnsafe();
      Buffer buffer7 = buffer_UnsafeCursor0.buffer;
      buffer7.writeByte(65);
      assertEquals(1L, buffer6.size());
      assertFalse(buffer0.equals((Object)buffer6));
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.segmentSizes();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.buffer();
      buffer0.md5();
      Charset.defaultCharset();
      realBufferedSink0.flush();
      Buffer buffer1 = realBufferedSink0.buffer.writeByte((-2438));
      realBufferedSink0.buffer.hashCode();
      Buffer buffer2 = realBufferedSink0.buffer.writeDecimalLong(847L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Buffer buffer3 = realBufferedSource0.buffer;
      Charset.defaultCharset();
      buffer1.indexOf((byte) (-124));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      // Undeclared exception!
      try { 
        buffer2.read(byteArray0, 13, (int) (byte) (-124));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=13 byteCount=-124
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer1 = new Buffer();
      int int0 = 0;
      Buffer buffer2 = pipe0.buffer;
      buffer2.hashCode();
      buffer0.readByteArray((long) 0);
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.close();
      // Undeclared exception!
      try { 
        ByteBuffer.wrap((byte[]) null, 56, 1257);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.resizeBuffer((-1083L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      buffer_UnsafeCursor0.end = 13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null, 25, 118);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)125;
      ByteString[] byteStringArray0 = new ByteString[4];
      ByteString byteString0 = hashingSource0.hash();
      byteStringArray0[0] = byteString0;
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteStringArray0[1] = byteString1;
      ByteString byteString2 = ByteString.of(byteArray0);
      byteStringArray0[2] = byteString2;
      ByteString byteString3 = ByteString.EMPTY;
      byteStringArray0[3] = byteString3;
      Options options0 = Options.of(byteStringArray0);
      ByteString byteString4 = options0.get(0);
      HashingSource.hmacSha1(hashingSource0, byteString4);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)0;
      HashingSource.sha1(realBufferedSource0);
      byteArray0[7] = (byte)58;
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.read(byteArray0, (int) (byte)5, (int) (byte)58);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=5 byteCount=58
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte((-973));
      buffer0.hashCode();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Integer integer0 = new Integer((-1));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("S}#65}4{tsXIp");
      buffer1.copyTo((OutputStream) mockFileOutputStream0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Pipe pipe0 = new Pipe(2580L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer0.write(buffer1, 2580L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=2580
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      String string0 = buffer0.readString(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      realBufferedSink0.buffer();
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writeString("okio.RealBufferedSink$1", 14, 14, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer();
      buffer3.writeLong(2044L);
      buffer3.writeDecimalLong(0L);
      buffer2.request(0L);
      buffer2.writeIntLe(573);
      realBufferedSource0.buffer.readUtf8CodePoint();
      buffer2.request((-372L));
      // Undeclared exception!
      try { 
        buffer2.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 3
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(42L);
      buffer0.request(42L);
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      hashingSource0.hash();
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeByte(2487);
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.seek((-1L));
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.buffer.writeDecimalLong((-1));
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.indexOf(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((byte)0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.read(byteArray0);
      buffer0.request(2);
      buffer0.request(8L);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readString(1989L, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=6 offset=0 byteCount=1989
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = buffer0.writeByte(0);
      buffer0.hashCode();
      Buffer buffer3 = buffer2.writeDecimalLong(65280L);
      Buffer buffer4 = buffer3.writeByte(31);
      buffer4.readByte();
      Pipe pipe1 = new Pipe(813L);
      // Undeclared exception!
      try { 
        buffer2.snapshot(20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=6 offset=0 byteCount=20
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("qJ8[v.S]8dsP^}", charset0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeUtf8("qJ8[v.S]8dsP^}");
      realBufferedSink0.writeUtf8("Ou2(J,Fc(pZ`izzF");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      long long0 = 255L;
      buffer2.writeHexadecimalUnsignedLong(0L);
      realBufferedSink0.close();
      Buffer buffer3 = realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer3);
      realBufferedSource1.buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer4 = realBufferedSink0.buffer();
      realBufferedSink0.buffer.writeDecimalLong(0L);
      Buffer buffer5 = realBufferedSource1.buffer;
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer3);
      Buffer buffer6 = realBufferedSink0.buffer();
      buffer6.request(1000L);
      Charset charset1 = Charset.defaultCharset();
      ByteString.encodeString("&O;fgp{/", charset1);
      buffer4.read(realBufferedSource2.buffer, 255L);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: 0
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("5NDWAN");
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      realBufferedSink0.writeUtf8("ISIZE");
      Buffer buffer1 = ((RealBufferedSink) bufferedSink0).buffer.writeLongLe(100000000000000000L);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      ByteString byteString0 = ByteString.encodeUtf8("ISIZE");
      long long0 = realBufferedSink0.buffer.indexOf(byteString0);
      assertEquals(7L, long0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer();
      buffer3.writeLong(2044L);
      buffer3.writeDecimalLong(0L);
      buffer0.exhausted();
      buffer2.writeIntLe(569);
      realBufferedSource0.buffer.readUtf8CodePoint();
      Pipe pipe0 = new Pipe(100000000000000L);
      Buffer buffer4 = pipe0.buffer;
      // Undeclared exception!
      try { 
        ByteString.encodeString("jY^sX&R+0/Nto}8g", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8(13L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=13
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      pipe0.sinkClosed = true;
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer();
      realBufferedSource0.buffer.writeShort(40);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.offset = 986L;
      ByteString.decodeBase64("v qu(`As8HcMU^{oMB7");
      // Undeclared exception!
      try { 
        buffer0.rangeEquals(32L, (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = realBufferedSink0.buffer.writeByte(2547);
      int int0 = new Integer(2547);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.next();
      buffer_UnsafeCursor0.readWrite = false;
      realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer1.writeString("not acquired", 55, 0, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 0 < 55
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSink0.buffer.writeUtf8CodePoint(57394);
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      ((RealBufferedSink) bufferedSink0).buffer.writeUtf8CodePoint(57343);
      realBufferedSource0.buffer();
      Buffer buffer2 = realBufferedSink0.buffer();
      Buffer buffer3 = realBufferedSink0.buffer();
      ByteString.decodeBase64("jY^sX&R+0/Nto}8g");
      buffer1.completeSegmentByteCount();
      ((RealBufferedSink) bufferedSink0).buffer.equals(buffer2);
      realBufferedSource0.readByteArray();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer3);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(bufferedSink0);
      Buffer buffer4 = realBufferedSink2.buffer;
      realBufferedSource0.buffer.clone();
      assertTrue(buffer1.exhausted());
      assertTrue(buffer0.equals((Object)buffer3));
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      HashingSink hashingSink1 = HashingSink.sha256(hashingSink0);
      HashingSink hashingSink2 = HashingSink.sha256(hashingSink1);
      ByteString byteString0 = hashingSink2.hash();
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = realBufferedSource0.buffer.writeHexadecimalUnsignedLong(1095216660480L);
      Buffer buffer3 = buffer1.writeUtf8CodePoint(41);
      Buffer buffer4 = realBufferedSink0.buffer.writeDecimalLong((-72057594037927936L));
      Buffer buffer5 = realBufferedSource0.buffer;
      buffer5.writeDecimalLong((-72057594037927936L));
      buffer5.readByteString();
      buffer4.completeSegmentByteCount();
      realBufferedSource0.readByteArray();
      buffer1.writeAll(realBufferedSink0.buffer);
      buffer1.clear();
      buffer3.rangeEquals((-1726L), byteString0, 41, (-1429));
      BufferedSink bufferedSink0 = buffer2.write((Source) buffer1, 0L);
      assertTrue(bufferedSink0.equals((Object)buffer0));
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = (-318L);
      // Undeclared exception!
      try { 
        buffer0.readByteArray((-318L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-318
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.close();
      assertTrue(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("endIndex > string.length: ");
      ((RealBufferedSink) bufferedSink0).buffer.writeHexadecimalUnsignedLong((-22L));
      realBufferedSink0.writeUtf8("endIndex > string.length: ");
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer2.readHexadecimalUnsignedLong();
      buffer0.readUtf8Line();
      ByteString byteString0 = ByteString.EMPTY;
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(4L);
      buffer0.writableSegment(6);
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.buffer();
      buffer0.writeInt((-994));
      buffer0.readByte();
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=3 content=fffc1e\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.writeDecimalLong((-1L));
      buffer0.readUtf8CodePoint();
      Pipe pipe0 = new Pipe(45);
      Pipe pipe1 = new Pipe(45);
      Buffer buffer1 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(realBufferedSink0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer1, byteString0);
      hashingSource0.hash();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)57;
      ByteString byteString1 = new ByteString(byteArray0);
      buffer1.indexOfElement(byteString1);
      buffer1.clone();
      realBufferedSink0.buffer.write(byteArray0);
      long long0 = realBufferedSink0.buffer.readHexadecimalUnsignedLong();
      assertFalse(buffer0.exhausted());
      assertEquals(153L, long0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("size < 4: ");
      ByteString.decodeBase64(".outputStream()");
      BufferedSink bufferedSink1 = bufferedSink0.writeUtf8("resizeBuffer() only permitted for read/write buffers");
      bufferedSink0.writeShort((-2786));
      buffer0.flush();
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink1).buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x73
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong(8192L);
      buffer0.md5();
      buffer1.segmentSizes();
      realBufferedSink0.buffer.md5();
      boolean boolean0 = buffer1.exhausted();
      assertEquals(4L, buffer1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.writeAll(buffer0);
      realBufferedSource0.buffer.readByteArray(0L);
      buffer1.writeAll(realBufferedSource0);
      buffer0.read(buffer1, 10L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer2.readByteString();
      realBufferedSource0.buffer.completeSegmentByteCount();
      realBufferedSource0.readByteArray();
      Buffer buffer3 = realBufferedSink0.buffer();
      buffer3.writeAll(buffer2);
      realBufferedSink0.buffer.size();
      // Undeclared exception!
      try { 
        buffer2.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-5);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)38;
      // Undeclared exception!
      try { 
        buffer0.write(byteArray0, 950, (int) (byte)45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=9 offset=950 byteCount=45
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.segmentSizes();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer0.md5();
      Charset charset0 = Charset.defaultCharset();
      buffer1.readString(charset0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        buffer1.readFrom((InputStream) byteArrayInputStream0, 60L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      realBufferedSink0.buffer();
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      // Undeclared exception!
      try { 
        buffer0.writeString((String) null, 1056, 20, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[2];
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.writeLongLe((byte)0);
      buffer1.readUtf8Line(4L);
      assertEquals(3L, buffer1.size());
      
      Buffer buffer2 = realBufferedSource0.buffer.clone();
      assertEquals(3L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("resizeBuffer() only permitted for read/write buffers");
      realBufferedSource0.buffer();
      realBufferedSink0.writeShort((-3300));
      buffer0.flush();
      boolean boolean0 = buffer0.request(0);
      assertTrue(boolean0);
      
      long long0 = ((RealBufferedSink) bufferedSink0).buffer.size();
      assertEquals(54L, long0);
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      Buffer buffer1 = new Buffer();
      hashingSource0.read(buffer0, 1579L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      String string0 = "";
      buffer2.writeHexadecimalUnsignedLong(1579L);
      int int0 = 0;
      HashingSource.sha256(buffer2);
      String string1 = "";
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      HashingSink.sha256(hashingSink0);
      hashingSink0.hash();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = new Buffer();
      Buffer buffer3 = new Buffer();
      Buffer buffer4 = new Buffer();
      Buffer buffer5 = buffer0.writeUtf8CodePoint(11);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer6 = realBufferedSink0.buffer;
      Buffer buffer7 = buffer_UnsafeCursor0.buffer;
      Buffer buffer8 = buffer7.writeDecimalLong(2147483647L);
      assertEquals(11L, buffer7.size());
      
      buffer8.readByteString();
      Buffer buffer9 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer10 = realBufferedSource0.buffer;
      realBufferedSink0.buffer.completeSegmentByteCount();
      realBufferedSource0.readByteArray();
      buffer7.writeAll(buffer4);
      buffer5.clear();
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeByte((-1));
      buffer1.hashCode();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer0.readUnsafe(buffer_UnsafeCursor1);
      buffer_UnsafeCursor2.next();
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor2.data);
      buffer_UnsafeCursor0.buffer.write(buffer_UnsafeCursor2.data);
      assertEquals(8193L, buffer0.size());
      assertFalse(buffer_UnsafeCursor1.readWrite);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer2 = buffer1.writeByte(0);
      buffer0.hashCode();
      realBufferedSink0.buffer.writeDecimalLong(32L);
      try { 
        buffer2.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=3 content=003332\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      buffer0.outputStream();
      buffer0.clear();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.outputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString.decodeBase64("T*^U");
      // Undeclared exception!
      try { 
        buffer0.indexOf((ByteString) null, 65536L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("v[ZjfM[g$.i;>$mm");
      buffer0.hmacSha512(byteString0);
      try { 
        buffer0.readUtf8LineStrict(2311L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer2 = buffer1.writeByte(0);
      buffer0.hashCode();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer2.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer3 = buffer1.writeUtf8("k8$B``}M6kG=\"b),{j", 0, 5);
      buffer3.readShortLe();
      Buffer buffer4 = new Buffer();
      Buffer buffer5 = realBufferedSink0.buffer();
      buffer5.writeDecimalLong(5);
      ByteString byteString0 = ByteString.EMPTY;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe();
      Buffer buffer6 = buffer_UnsafeCursor1.buffer;
      buffer6.request(9223372036854775807L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer7 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer7.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer2 = realBufferedSink0.buffer.writeByte(2547);
      buffer0.hashCode();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer2.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.next();
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      
      Buffer buffer3 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer3);
      ByteString byteString0 = hashingSink0.hash();
      buffer3.rangeEquals(2487L, byteString0, 2547, 1);
      realBufferedSink0.buffer.read(buffer3, (long) 0);
      realBufferedSink0.buffer.emit();
      assertFalse(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      Buffer buffer1 = realBufferedSource0.buffer.readFrom(inputStream0);
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer2 = realBufferedSource0.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer3 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      Buffer buffer4 = realBufferedSource0.buffer;
      realBufferedSink0.buffer.writeLongLe(2711L);
      String string0 = buffer2.readUtf8Line();
      assertNull(string0);
      
      realBufferedSink0.buffer.emitCompleteSegments();
      buffer3.timeout();
      assertEquals(0L, buffer3.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = realBufferedSource0.readByteArray();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.readAll(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer0.writeDecimalLong(10000000000000L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer3 = realBufferedSource0.buffer;
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer();
      buffer0.writeDecimalLong(0L);
      ByteString.decodeBase64("jY^sX&R+0/Nto}8g");
      realBufferedSink0.buffer.completeSegmentByteCount();
      buffer2.equals((Object) null);
      realBufferedSource0.readByteArray();
      Buffer buffer4 = realBufferedSink0.buffer;
      long long0 = buffer4.writeAll(buffer3);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Pipe pipe0 = new Pipe(10000000000000L);
      Buffer buffer2 = pipe0.buffer;
      Buffer buffer3 = buffer2.writeHexadecimalUnsignedLong(0L);
      realBufferedSink0.buffer.md5();
      Buffer buffer4 = new Buffer();
      buffer4.segmentSizes();
      buffer3.md5();
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.equals((Object)buffer0));
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer1.indexOf((byte)45, 590L, (-332L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=590 toIndex=-332
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink1.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink1.buffer);
      Buffer buffer2 = realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      realBufferedSink1.writeUtf8("endIndex > string.length: ");
      realBufferedSink0.writeUtf8("endIndex > string.length: ");
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer();
      long long0 = 255L;
      realBufferedSource2.buffer.writeHexadecimalUnsignedLong(255L);
      realBufferedSink0.close();
      Buffer buffer3 = realBufferedSource2.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      realBufferedSink1.buffer();
      long long1 = 10000000000000000L;
      realBufferedSource1.buffer.writeDecimalLong(10000000000000000L);
      RealBufferedSource realBufferedSource3 = null;
      try {
        realBufferedSource3 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("okio.Buffer$2", charset0);
      buffer0.indexOf(byteString0);
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Pipe pipe0 = new Pipe(774L);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong((-14L));
      buffer0.readInt();
      buffer1.readAndWriteUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer2.write((byte[]) null, (-1), (-2582));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      HashingSink hashingSink1 = HashingSink.sha256(hashingSink0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)94;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink1);
      realBufferedSink0.buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(897L);
      buffer0.request((-2303L));
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString1 = ByteString.encodeString("", charset0);
      // Undeclared exception!
      try { 
        buffer1.indexOf(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.readByteString();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSink0.buffer.writeUtf8CodePoint(128);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-570L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -570
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writeTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource1.buffer();
      Pipe pipe0 = new Pipe(495L);
      Buffer buffer1 = pipe0.buffer;
      realBufferedSource1.buffer.writeUtf8CodePoint(192);
      Buffer buffer2 = realBufferedSink0.buffer.writeDecimalLong((-2105L));
      realBufferedSink0.buffer.writeDecimalLong(3281L);
      realBufferedSource0.buffer.readByteString();
      Integer integer0 = new Integer(192);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Buffer buffer3 = realBufferedSink0.buffer.writeLongLe(483L);
      realBufferedSink0.buffer.readUtf8Line();
      realBufferedSource1.buffer.indexOfElement(byteString0, 3281L);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.segmentSizes();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = buffer0.writeHexadecimalUnsignedLong(17L);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Buffer buffer3 = realBufferedSource0.buffer.writeUtf8CodePoint(16);
      buffer3.writeDecimalLong(17);
      Buffer buffer4 = buffer0.writeDecimalLong(0L);
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      buffer4.rangeEquals((long) 17, byteString0);
      Buffer buffer5 = realBufferedSource0.buffer();
      ByteString byteString1 = buffer5.readByteString();
      buffer3.completeSegmentByteCount();
      realBufferedSource0.readByteArray();
      realBufferedSource0.buffer.clear();
      buffer2.indexOfElement(byteString1, 117L);
      realBufferedSource0.buffer.exhausted();
      realBufferedSink0.buffer.readByteArray();
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(27L);
      buffer0.indexOf((byte)10, (long) (byte)10);
      buffer0.readHexadecimalUnsignedLong();
      buffer1.equals(buffer0);
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      Pipe pipe0 = new Pipe(4211L);
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = buffer0.writeByte(0);
      buffer0.skip(0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      Buffer buffer3 = realBufferedSink2.buffer;
      realBufferedSink0.buffer.readUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer3.readUnsafe();
      // Undeclared exception!
      try { 
        buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      Buffer buffer2 = realBufferedSink0.buffer.writeHexadecimalUnsignedLong((byte) (-88));
      ByteString.encodeUtf8("jY^sX&R+0/Nto}8g");
      ByteString byteString0 = ByteString.EMPTY;
      ByteString.decodeBase64("?");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      ByteString.of(byteArray0);
      ByteString.decodeBase64("2xgj{I~\"x,2K");
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = null;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = null;
      byteStringArray0[3] = null;
      Integer integer0 = new Integer((byte) (-88));
      Pipe pipe0 = new Pipe(1557L);
      Buffer buffer3 = pipe0.buffer;
      ((RealBufferedSink) bufferedSink0).buffer.readLong();
      buffer1.request(1484L);
      buffer2.clone();
      assertEquals(25L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer0.readByteArray(0L);
      buffer2.writeAll(realBufferedSource0);
      realBufferedSource0.buffer.read(buffer1, 0L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.close();
      // Undeclared exception!
      try { 
        buffer2.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong(92233720368L);
      buffer0.indexOf((byte) (-98), 8192L);
      buffer0.readHexadecimalUnsignedLong();
      buffer0.writeAll(buffer1);
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("", charset0);
      Buffer buffer1 = new Buffer();
      assertTrue(buffer1.equals((Object)buffer0));
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer2 = buffer_UnsafeCursor1.buffer;
      Buffer buffer3 = buffer2.writeUtf8CodePoint((-1));
      // Undeclared exception!
      try { 
        buffer3.select((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = realBufferedSink0.buffer.writeDecimalLong(1000000L);
      assertEquals(7L, buffer2.size());
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.hmacSha256(byteString0);
      Buffer buffer3 = buffer1.writeLong(435L);
      assertEquals(0L, buffer3.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("endIndex > string.length: ");
      BufferedSink bufferedSink1 = realBufferedSink0.writeUtf8("endIndex > string.length: ");
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.buffer();
      realBufferedSource1.buffer.writeHexadecimalUnsignedLong(255L);
      ((RealBufferedSink) bufferedSink1).close();
      Buffer buffer1 = realBufferedSource1.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      bufferedSink1.buffer();
      Buffer buffer2 = ((RealBufferedSink) bufferedSink0).buffer.writeDecimalLong(255L);
      Buffer buffer3 = realBufferedSource0.buffer;
      buffer1.request(3394L);
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("", charset0);
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink1).buffer.read(buffer2, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      Buffer buffer2 = realBufferedSink0.buffer.writeHexadecimalUnsignedLong((byte) (-88));
      ByteString.encodeUtf8("jY^sX&R+0/Nto}8g");
      ByteString byteString0 = ByteString.EMPTY;
      ByteString.decodeBase64("?");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      ByteString.of(byteArray0);
      ByteString.decodeBase64("2xgj{I~\"x,2K");
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = null;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = null;
      byteStringArray0[3] = null;
      Integer integer0 = new Integer((byte) (-88));
      Pipe pipe0 = new Pipe(1557L);
      Buffer buffer3 = pipe0.buffer;
      ((RealBufferedSink) bufferedSink0).buffer.readLong();
      try { 
        buffer2.skip(8215L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[3];
      ByteString byteString0 = ByteString.EMPTY;
      byteStringArray0[0] = byteString0;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      HashingSink.sha256(hashingSink0);
      ByteString byteString1 = hashingSink0.hash();
      byteStringArray0[1] = byteString1;
      byte[] byteArray0 = new byte[0];
      ByteString byteString2 = new ByteString(byteArray0);
      hashingSink0.flush();
      byteStringArray0[2] = byteString2;
      HashingSink.md5(buffer0);
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      int int0 = (-795);
      // Undeclared exception!
      try { 
        buffer0.read(byteArray0, (-2440), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-2440 byteCount=0
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = buffer1.readByteArray(0L);
      buffer1.writeAll(buffer0);
      buffer0.read(buffer1, 1000000000000L);
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeLong(0L);
      realBufferedSink0.writeShortLe(100);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink1.buffer();
      realBufferedSource0.buffer.readFully(buffer0, 0L);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.copyTo(buffer2, 1L, 0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=1 byteCount=0
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      long long0 = 32L;
      Pipe pipe0 = new Pipe(32L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readByteString(32L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=32
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSink0.writeUtf8("jYosX&R+0MNto}8g");
      Buffer buffer1 = realBufferedSource0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink1.buffer();
      Buffer buffer2 = realBufferedSink1.buffer;
      buffer2.writeLong(2044L);
      Pipe pipe0 = new Pipe(2044L);
      Buffer buffer3 = pipe0.buffer;
      buffer3.writeDecimalLong(2044L);
      buffer0.writeIntLe(573);
      buffer2.readUtf8CodePoint();
      buffer0.request(9L);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      ((RealBufferedSink) bufferedSink0).buffer.writeUtf8CodePoint(57343);
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong(92233720368L);
      buffer1.writeUtf8CodePoint(57343);
      Buffer buffer2 = realBufferedSink0.buffer.writeDecimalLong(56319);
      Pipe pipe0 = new Pipe(56319);
      Buffer buffer3 = pipe0.buffer;
      buffer2.snapshot(17);
      Buffer buffer4 = pipe0.buffer;
      long long0 = buffer4.read(((RealBufferedSink) bufferedSink0).buffer, 100000000000000000L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = realBufferedSource1.buffer.writeUtf8CodePoint(192);
      buffer1.writeDecimalLong((-1180L));
      buffer1.readShortLe();
      ByteString[] byteStringArray0 = new ByteString[8];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[6] = byteString0;
      byteStringArray0[7] = byteString0;
      realBufferedSource1.readUtf8CodePoint();
      Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer2.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.outputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.readByteArray();
      buffer_UnsafeCursor0.resizeBuffer(334L);
      buffer_UnsafeCursor0.buffer.readShortLe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.buffer.request(332);
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.exhausted();
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = new Buffer();
      realBufferedSink0.timeout();
      Buffer buffer3 = buffer2.writeHexadecimalUnsignedLong((-296L));
      ByteString byteString0 = ByteString.EMPTY;
      ByteString[] byteStringArray0 = new ByteString[19];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer3.select(options0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      buffer0.indexOfElement(byteString0);
      Charset charset0 = Charset.defaultCharset();
      buffer3.writeString("", 0, 0, charset0);
      // Undeclared exception!
      try { 
        buffer0.indexOfElement(byteString0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-103);
      // Undeclared exception!
      try { 
        buffer1.read(byteArray0, (int) (byte) (-103), 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=-103 byteCount=48
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(143);
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xffffffc2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.writeHexadecimalUnsignedLong((-318L));
      realBufferedSink0.buffer.md5();
      buffer1.segmentSizes();
      realBufferedSink0.buffer.md5();
      buffer1.readLongLe();
      assertEquals(8L, buffer1.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertFalse(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = realBufferedSource0.buffer;
      byte[] byteArray0 = buffer0.readByteArray(0L);
      buffer2.writeAll(realBufferedSource0);
      int int0 = (-2643);
      Buffer buffer3 = new Buffer();
      buffer1.sha512();
      buffer0.write(byteArray0);
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSink0.buffer();
      Buffer buffer2 = realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[0];
      buffer2.read(byteArray0);
      Buffer buffer3 = realBufferedSource0.buffer;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      buffer2.buffer();
      buffer2.writeUtf8CodePoint((byte)0);
      long long0 = 7L;
      try { 
        buffer3.readFrom((InputStream) byteArrayInputStream0, 7L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Unexpected code point: ");
      realBufferedSink0.buffer.require((-299L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer();
      buffer3.writeDecimalLong(0L);
      buffer2.request(0L);
      realBufferedSource0.buffer.readAndWriteUnsafe();
      ByteString byteString0 = ByteString.encodeUtf8("beginIndex < 0: ");
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer3);
      realBufferedSource1.readByteString();
      buffer3.indexOfElement(byteString0);
      // Undeclared exception!
      try { 
        realBufferedSource1.buffer.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer();
      buffer3.writeDecimalLong(0L);
      buffer2.request(0L);
      Buffer buffer4 = buffer2.writeIntLe(573);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer4.indexOfElement(byteString0);
      buffer1.rangeEquals(0L, byteString0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-43);
      byteArray0[7] = (byte) (-1);
      buffer0.read(byteArray0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      bufferedSink0.buffer();
      realBufferedSink1.buffer.require((-1));
      // Undeclared exception!
      try { 
        buffer2.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      realBufferedSink0.buffer();
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong((-296L));
      ByteString byteString0 = realBufferedSink0.buffer.md5();
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer2.select(options0);
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.read(buffer0, 17L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)88;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64Url();
      realBufferedSource0.buffer.rangeEquals((long) (byte) (-88), byteString0);
      buffer0.writeHexadecimalUnsignedLong((byte)53);
      HashingSource.sha256(realBufferedSource0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer2 = buffer1.writeByte(0);
      realBufferedSink0.buffer.md5();
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink0.buffer.readString(charset0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        buffer2.readFrom((InputStream) byteArrayInputStream0, (-1928L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1928
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer2.readUnsafe(buffer_UnsafeCursor0);
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer1.readAndWriteUnsafe();
      Buffer buffer3 = buffer_UnsafeCursor2.buffer;
      buffer_UnsafeCursor2.offset = 0L;
      buffer3.writeUtf8CodePoint((-1));
      Buffer buffer4 = buffer1.writeDecimalLong((-1));
      buffer1.writeDecimalLong(218L);
      buffer_UnsafeCursor1.buffer.readByteString();
      buffer1.completeSegmentByteCount();
      realBufferedSource0.readByteArray();
      buffer_UnsafeCursor1.buffer.writeAll(buffer4);
      buffer4.size();
      // Undeclared exception!
      try { 
        buffer2.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      realBufferedSink0.buffer();
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink1.buffer;
      int int0 = 15;
      try { 
        realBufferedSink1.buffer.write((Source) realBufferedSink0.buffer, (long) 15);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.writeUtf8CodePoint(1114111);
      Pipe pipe0 = new Pipe(254L);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSink0.writeUtf8("endIndex > string.length: ");
      realBufferedSink0.writeUtf8("endIndex > string.length: ");
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Buffer buffer2 = realBufferedSource1.buffer();
      Buffer buffer3 = buffer2.writeHexadecimalUnsignedLong(2L);
      realBufferedSink0.buffer.writeUtf8CodePoint(56319);
      Buffer buffer4 = realBufferedSource0.buffer.writeDecimalLong(2L);
      Buffer buffer5 = buffer1.writeDecimalLong(10000L);
      buffer4.readByteString();
      buffer4.completeSegmentByteCount();
      realBufferedSource0.readByteArray();
      buffer3.writeAll(realBufferedSource0);
      buffer5.clear();
      assertTrue(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer1 = realBufferedSink1.buffer;
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = buffer2.writeHexadecimalUnsignedLong((byte)4);
      ByteString byteString0 = buffer2.md5();
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSink0.buffer.select(options0);
      buffer3.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte) (-2), (-3465L), 10L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-3465 toIndex=10
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.segmentSizes();
      Buffer buffer1 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)103;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.writeByte(17);
      realBufferedSink0.buffer.hashCode();
      // Undeclared exception!
      try { 
        buffer1.readByteArray((-1276L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1276
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = buffer0.writeLongLe(4L);
      buffer0.readByte();
      buffer0.sha512();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      buffer1.emit();
      buffer1.sha512();
      buffer0.clear();
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("", charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer1.readString(925L, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=925
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.timeout();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Unexpected code point: ");
      realBufferedSink0.buffer.require((-299L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      ((RealBufferedSink) bufferedSink0).buffer.readByteString();
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer();
      buffer3.writeDecimalLong(0L);
      buffer2.request(0L);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-299L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -299
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[3];
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.select(options0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(3597);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Charset.defaultCharset();
      buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer1.readUtf8Line((long) 3597);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=3596 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(92233720368L);
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      buffer0.clone();
      assertEquals(11L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer1 = realBufferedSource0.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer2 = realBufferedSink0.buffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      realBufferedSink0.buffer.writeTo((OutputStream) byteArrayOutputStream0);
      Buffer buffer3 = buffer2.writeDecimalLong((-1025L));
      Buffer buffer4 = realBufferedSource0.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer5 = realBufferedSink0.buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) buffer2;
      objectArray0[1] = (Object) buffer5;
      objectArray0[2] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) buffer5;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "@]:Q|?QQB", objectArray0);
      buffer5.writeTo((OutputStream) printStream0);
      buffer3.request((-258L));
      buffer1.read(buffer4, 1078L);
      Pipe pipe0 = new Pipe(10L);
      Buffer buffer6 = pipe0.buffer;
      buffer4.write((Source) buffer1, (-258L));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)110;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink1.buffer.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((byte) (-85));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -85
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.exhausted();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = realBufferedSink0.buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer2);
      ByteString byteString0 = hashingSink0.hash();
      realBufferedSink0.buffer.rangeEquals(0L, byteString0, 6, (-14));
      Buffer buffer3 = realBufferedSink0.buffer.writeHexadecimalUnsignedLong(1000L);
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals(3L, buffer3.size());
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)4;
      buffer2.writeDecimalLong(106L);
      Buffer buffer4 = buffer3.writeDecimalLong((-5402L));
      realBufferedSink0.buffer();
      realBufferedSink0.buffer.readDecimalLong();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer4.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      Segment segment0 = new Segment();
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("endIndex > string.length: ");
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      realBufferedSink1.writeUtf8("endIndex > string.length: ");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      long long0 = 255L;
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong(39L);
      realBufferedSink1.close();
      realBufferedSource0.buffer();
      realBufferedSink1.buffer();
      realBufferedSource0.buffer.writeDecimalLong(21L);
      Buffer buffer1 = realBufferedSource0.buffer;
      try { 
        realBufferedSource0.readUtf8LineStrict(255L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=56 content=3231656e64496e646578203e20737472696e672e6c656e6774683a203237656e\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSink hashingSink0 = HashingSink.sha512(realBufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      Buffer buffer1 = realBufferedSink0.buffer.writeByte((-2146463949));
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      long long0 = buffer1.indexOfElement(byteString0);
      assertEquals(1L, buffer1.size());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      buffer0.writeUtf8CodePoint((-2764));
      // Undeclared exception!
      try { 
        buffer0.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.clone();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer0.copyTo(buffer2, 118L, 118L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=118 byteCount=118
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      int int0 = (-1423);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSink0.writeUtf8("endIndex > string.length: ");
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource3.readAll(buffer0);
      Buffer buffer1 = realBufferedSource3.buffer();
      // Undeclared exception!
      try { 
        buffer1.write((Source) null, 26L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = realBufferedSource0.buffer.writeLongLe((-1L));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("HaB'wp-hIgVkCt'+,");
      File file0 = MockFile.createTempFile("<C.o8469#dnRd?u", "<C.o8469#dnRd?u");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(file0);
      mockFileOutputStream1.getChannel();
      buffer2.readUtf8CodePoint();
      buffer1.copyTo((OutputStream) mockFileOutputStream1);
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer3 = realBufferedSink0.buffer.writeString("[size=", 5, 5, charset0);
      assertNotSame(buffer3, buffer0);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer2 = buffer1.writeByte(0);
      buffer0.hashCode();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer2.readAndWriteUnsafe();
      Buffer buffer3 = buffer_UnsafeCursor1.buffer;
      buffer3.inputStream();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.indexOf((byte)45, (long) (-1), (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=1 fromIndex=-1 toIndex=-1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink1.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink1.buffer);
      Buffer buffer2 = realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      BufferedSink bufferedSink0 = realBufferedSink1.writeUtf8("endIndex > string.length: ");
      realBufferedSink0.writeUtf8("endIndex > string.length: ");
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer();
      Buffer buffer3 = realBufferedSource2.buffer.writeHexadecimalUnsignedLong(255L);
      realBufferedSink0.close();
      realBufferedSource2.buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      realBufferedSink0.buffer();
      realBufferedSource0.buffer.writeDecimalLong(255L);
      Buffer buffer4 = realBufferedSource1.buffer;
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(buffer4);
      bufferedSink0.buffer();
      buffer0.request(255L);
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("okio.DeflaterSink", charset0);
      buffer1.read(buffer3, 10L);
      Pipe pipe0 = new Pipe(10L);
      Buffer buffer5 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer5.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("fromIndex=%s toIndex=%s", charset0);
      Buffer buffer1 = new Buffer();
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.toString();
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.flush();
      buffer0.clear();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = new Buffer();
      hashingSource0.read(buffer0, 1579L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)88;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)19;
      Buffer buffer2 = buffer0.writeDecimalLong(8192L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      buffer2.writeIntLe(84);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer4 = realBufferedSink0.buffer();
      buffer4.writeUtf8("");
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink1.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        realBufferedSink1.buffer.writeUtf8("byteCount < 0: ", (int) (byte)4, (-482));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -482 < 4
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeInt((-1423));
      buffer1.readShortLe();
      realBufferedSink0.buffer.exhausted();
      buffer1.readUnsafe();
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeUtf8CodePoint(1114131);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 110013
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(65536L);
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer2 = buffer0.writeByte((-262));
      buffer1.hashCode();
      buffer2.indexOfElement(byteString0, 1072L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer2.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.next();
      long long0 = buffer1.readDecimalLong();
      assertEquals(1L, buffer1.size());
      assertEquals(10000L, long0);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.writeByte(15);
      buffer0.hashCode();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Integer integer0 = new Integer((-1218));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("%mu");
      Buffer buffer1 = buffer0.copyTo((OutputStream) mockFileOutputStream0);
      // Undeclared exception!
      try { 
        buffer1.copyTo((Buffer) null, (long) 15, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink1.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink1.buffer);
      Buffer buffer2 = realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      BufferedSink bufferedSink0 = realBufferedSink1.writeUtf8("endIndex > string.length: ");
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer();
      Buffer buffer3 = new Buffer();
      realBufferedSink0.close();
      realBufferedSink0.buffer();
      realBufferedSource0.buffer.writeDecimalLong(255L);
      Buffer buffer4 = realBufferedSource1.buffer;
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(buffer4);
      bufferedSink0.buffer();
      buffer1.read(buffer3, 10L);
      Pipe pipe0 = new Pipe(10L);
      Buffer buffer5 = pipe0.buffer;
      realBufferedSource0.buffer();
      assertFalse(buffer0.equals((Object)buffer1));
      
      Charset charset0 = Charset.defaultCharset();
      String string0 = ((RealBufferedSink) bufferedSink0).buffer.readString(10L, charset0);
      assertEquals(" string.le", string0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      ((RealBufferedSink) bufferedSink0).buffer.writeUtf8CodePoint(57343);
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong((-258L));
      Buffer buffer2 = buffer0.writeUtf8CodePoint(57343);
      buffer0.writeDecimalLong(57343);
      realBufferedSource0.buffer.request(1L);
      Charset.defaultCharset();
      ByteString.encodeUtf8("jY^sX&R+0/Nto}8g");
      long long0 = new Integer(57343);
      buffer0.writableSegment(638);
      // Undeclared exception!
      try { 
        buffer2.selectPrefix((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Segment segment0 = new Segment();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.seek((-1));
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.resizeBuffer((-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer();
      byte byte0 = (byte)4;
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)4;
      buffer2.writeDecimalLong(106L);
      Buffer buffer4 = buffer3.writeDecimalLong((-5402L));
      realBufferedSink0.buffer();
      realBufferedSink0.buffer.readDecimalLong();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer4.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Pipe pipe0 = new Pipe(12L);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[7] = (byte) (-1);
      Buffer buffer0 = new Buffer();
      ByteString.decodeBase64("Mz(\"g-cj");
      // Undeclared exception!
      try { 
        buffer0.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Pipe pipe0 = new Pipe(3917L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-120);
      // Undeclared exception!
      try { 
        buffer0.write(byteArray0, 39, 39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=39 byteCount=39
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      buffer_UnsafeCursor0.resizeBuffer(65536L);
      buffer0.clear();
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeInt(5);
      HashingSink hashingSink0 = HashingSink.sha1(bufferedSink0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(hashingSink0);
      Pipe pipe0 = new Pipe(1660L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer0);
      realBufferedSink2.buffer();
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(hashingSink0);
      realBufferedSink3.buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)109;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertTrue(buffer0.exhausted());
      
      buffer_UnsafeCursor0.resizeBuffer(60L);
      long long0 = buffer0.readLongLe();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      int int0 = (-1);
      int int1 = 17;
      realBufferedSink0.buffer.segmentSizes();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writeUtf8("byteCount < 0: ", (-1), 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.segmentSizes();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = buffer0.writeHexadecimalUnsignedLong(17L);
      Buffer buffer3 = realBufferedSource0.buffer.writeUtf8CodePoint(16);
      buffer3.writeDecimalLong(17);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.writeDecimalLong(0L);
      Buffer buffer4 = realBufferedSource0.buffer();
      ByteString byteString0 = buffer4.readByteString();
      buffer3.completeSegmentByteCount();
      realBufferedSource0.readByteArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      realBufferedSource0.buffer.clear();
      buffer2.indexOfElement(byteString0, 117L);
      realBufferedSource0.buffer.exhausted();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer3.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(859L);
      // Undeclared exception!
      try { 
        buffer2.copyTo((OutputStream) null, 4L, (-1011L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.writeUtf8((String) null, 149, 88);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.buffer.selectPrefix(options0);
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      HashingSink.sha256(hashingSink0);
      hashingSink0.hash();
      Buffer buffer1 = buffer0.writeByte(9);
      buffer1.hashCode();
      buffer0.writeDecimalLong(10000000000000L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer;
      Charset charset0 = Charset.defaultCharset();
      String string0 = "KB%ar$MBeyfxEOOu";
      ByteString.encodeString("KB%ar$MBeyfxEOOu", charset0);
      // Undeclared exception!
      try { 
        buffer2.read(realBufferedSource0.buffer, (-610L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -610
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)94;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer2 = realBufferedSink1.buffer;
      Buffer buffer3 = realBufferedSink0.buffer;
      Buffer buffer4 = realBufferedSink1.buffer();
      buffer2.writeUtf8CodePoint((byte)94);
      buffer4.indexOf((byte)94);
      FileSystemHandling.shouldAllThrowIOExceptions();
      realBufferedSource0.buffer.writeDecimalLong((byte)102);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteString.decodeBase64("Uy{xXTj[S");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        buffer1.readFrom((InputStream) byteArrayInputStream0, (long) (byte)94);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      realBufferedSink0.writeIntLe(9);
      buffer_UnsafeCursor0.next();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      realBufferedSink0.buffer.writeLongLe(4);
      buffer0.readUtf8Line();
      try { 
        buffer0.readUtf8LineStrict((long) 0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      BufferedSink bufferedSink1 = realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      Buffer buffer2 = realBufferedSource0.buffer();
      Buffer buffer3 = buffer0.writeHexadecimalUnsignedLong(2L);
      Buffer buffer4 = ((RealBufferedSink) bufferedSink1).buffer.writeUtf8CodePoint(0);
      ((RealBufferedSink) bufferedSink0).buffer.writeDecimalLong(3L);
      buffer3.writeDecimalLong(2327L);
      buffer3.readByteString();
      buffer4.completeSegmentByteCount();
      realBufferedSource0.readByteArray();
      buffer2.writeAll(buffer1);
      Buffer buffer5 = buffer0.writeIntLe((-453));
      boolean boolean0 = buffer5.request(0L);
      assertFalse(buffer0.exhausted());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(65536L);
      ByteString byteString0 = ByteString.EMPTY;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      buffer1.writeTo((OutputStream) byteArrayOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      String string0 = buffer1.readString(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      hashingSink0.hash();
      long long0 = 1579L;
      HashingSource.md5(buffer0);
      // Undeclared exception!
      try { 
        buffer0.writeString("okio.RealBufferedSink$1", 14, 19, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      HashingSink.sha256(hashingSink0);
      hashingSink0.hash();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)94;
      // Undeclared exception!
      try { 
        buffer0.readUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      Buffer buffer1 = buffer0.writeInt(110);
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      buffer0.readShortLe();
      buffer1.exhausted();
      buffer1.readUnsafe();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";");
      realBufferedSink0.buffer.flush();
      boolean boolean0 = buffer1.request(1017L);
      assertEquals(2L, buffer1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater(0, true);
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte) (-117);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      deflater0.setDictionary(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.writeByte(0);
      assertEquals(1L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = buffer0.writeDecimalLong((-1L));
      buffer0.readUtf8CodePoint();
      Pipe pipe0 = new Pipe(11L);
      Pipe pipe1 = new Pipe(45);
      Buffer buffer3 = pipe1.buffer;
      HashingSink.sha512(buffer1);
      Buffer buffer4 = buffer3.writeUtf8CodePoint(108);
      Buffer buffer5 = buffer3.writeDecimalLong(65536L);
      buffer5.read(buffer2, 2L);
      buffer4.readShortLe();
      buffer4.readShort();
      // Undeclared exception!
      try { 
        buffer0.snapshot((int) (short)13621);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=0 byteCount=13621
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      buffer0.clone();
      ByteString byteString0 = ByteString.encodeUtf8("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)15;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)56;
      Segment segment0 = new Segment(byteArray0, 740, (-4439), false, false);
      realBufferedSource0.buffer.head = segment0;
      Pipe pipe0 = new Pipe(2344L);
      Pipe pipe1 = new Pipe(3L);
      Buffer buffer2 = pipe0.buffer;
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.indexOfElement(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      HashingSink.sha256(hashingSink0);
      hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.read(buffer0, 1579L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSource0.buffer.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.rangeEquals((long) (-1), byteString0, (-1), (int) (byte)85);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer();
      Buffer buffer3 = buffer2.writeDecimalLong((-1));
      buffer3.request((byte)85);
      Charset.defaultCharset();
      realBufferedSource0.exhausted();
      String string0 = "";
      // Undeclared exception!
      try { 
        Charset.forName("<AF(!1ov(");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // <AF(!1ov(
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer1.getByte((-1654L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1654 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.segmentSizes();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(17L);
      Buffer buffer2 = realBufferedSource0.buffer.writeUtf8CodePoint(16);
      buffer2.writeDecimalLong(17);
      realBufferedSink0.buffer.writeUtf8CodePoint(17);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      buffer1.writeDecimalLong(1824L);
      ByteString.decodeBase64("");
      buffer1.completeSegmentByteCount();
      Buffer buffer3 = new Buffer();
      buffer3.equals(realBufferedSink0);
      realBufferedSource0.readByteArray();
      buffer0.writeAll(realBufferedSink0.buffer);
      realBufferedSink0.buffer.readUtf8Line();
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.writableSegment(2774);
      realBufferedSource0.inputStream();
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = realBufferedSink0.buffer();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      realBufferedSink0.buffer();
      ByteString byteString0 = hashingSink0.hash();
      buffer0.rangeEquals(0L, byteString0, 3, 3);
      buffer0.read(buffer2, 0L);
      String string0 = buffer1.readUtf8(0L);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.size = (-1278L);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("endIndex > string.length: ");
      BufferedSink bufferedSink1 = realBufferedSink0.writeUtf8("endIndex > string.length: ");
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.buffer();
      realBufferedSource1.buffer.writeHexadecimalUnsignedLong(255L);
      ((RealBufferedSink) bufferedSink1).close();
      Buffer buffer1 = realBufferedSource1.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      bufferedSink1.buffer();
      Buffer buffer2 = ((RealBufferedSink) bufferedSink0).buffer.writeDecimalLong(255L);
      Buffer buffer3 = realBufferedSource0.buffer;
      buffer1.request(3394L);
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("", charset0);
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink1).buffer.read(buffer2, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeInt((-1436));
      buffer1.readIntLe();
      try { 
        buffer0.readUtf8Line(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("jYosX&R+0MNto}8g");
      Buffer buffer1 = realBufferedSource0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink1.buffer();
      Buffer buffer2 = realBufferedSink1.buffer;
      buffer2.writeLong(2044L);
      Pipe pipe0 = new Pipe(2044L);
      Buffer buffer3 = pipe0.buffer;
      Buffer buffer4 = buffer3.writeDecimalLong(2044L);
      ByteString byteString0 = ByteString.EMPTY;
      buffer4.rangeEquals(2044L, byteString0, (-2142700832), 909);
      buffer2.readUtf8CodePoint();
      assertFalse(buffer2.exhausted());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)46;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      byteBuffer0.putInt(102);
      ByteString byteString1 = ByteString.of(byteBuffer0);
      realBufferedSink1.buffer.indexOf(byteString1);
      realBufferedSink0.buffer.outputStream();
      long long0 = ((RealBufferedSink) bufferedSink0).buffer.readLong();
      assertEquals(7663278782138449746L, long0);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Pipe pipe0 = new Pipe(774L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = buffer0.snapshot(0);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 3456;
      buffer0.writeShortLe(3456);
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      // Undeclared exception!
      try { 
        buffer0.writeString((String) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("qJ8[v.S]8dsP^}", charset0);
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer1 = pipe0.buffer;
      ByteString byteString0 = ByteString.encodeUtf8("size < ");
      HashingSink.hmacSha512(buffer0, byteString0);
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer2.selectPrefix(options0);
      buffer1.request((-92L));
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(42L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-2182L));
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Number too large: 42fffffffffffff77
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      Buffer buffer1 = new Buffer();
      long long0 = 1579L;
      hashingSource0.read(buffer0, 1579L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      String string0 = "";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte)53;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.rangeEquals(1579L, byteString0);
      buffer2.writeHexadecimalUnsignedLong(1579L);
      int int0 = 0;
      HashingSource.sha256(buffer2);
      String string1 = "";
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      pipe0.sourceClosed = false;
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeByte(0);
      buffer1.writeIntLe(0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer.writeLongLe(320L);
      buffer2.readByte();
      buffer2.sha512();
      buffer1.flush();
      buffer1.request(15L);
      buffer0.skip((-2121L));
      buffer2.sha1();
      assertEquals(5L, buffer1.size());
      assertEquals(5L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.toString();
      String string0 = "wvD";
      MockPrintStream mockPrintStream0 = new MockPrintStream("wvD");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(bufferedOutputStream0, true);
      int int0 = 56319;
      // Undeclared exception!
      try { 
        mockPrintStream1.append((CharSequence) "wvD", 56319, 56319);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("jYosX&R+0MNto}8g");
      Buffer buffer1 = realBufferedSource0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink1.buffer();
      Buffer buffer2 = realBufferedSink1.buffer;
      buffer2.writeLong(2044L);
      Pipe pipe0 = new Pipe(2044L);
      Buffer buffer3 = pipe0.buffer;
      buffer3.writeDecimalLong(2044L);
      buffer1.writeDecimalLong(2044L);
      buffer3.writeDecimalLong(2044L);
      Buffer buffer4 = bufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer4.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x6a
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      buffer0.require((-3465L));
      Buffer buffer1 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer();
      buffer3.writeDecimalLong((-3465L));
      buffer3.request((-258L));
      assertEquals(5L, buffer3.size());
      
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("newSize < 0: ", charset0);
      long long0 = buffer1.indexOf(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(406);
      buffer0.readIntLe();
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      Pipe pipe0 = new Pipe(774L);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(22L);
      buffer0.readInt();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = ByteString.decodeHex("");
      realBufferedSink0.write(byteString0);
      realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readFrom((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = realBufferedSink0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      Buffer buffer3 = realBufferedSink1.buffer;
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)76;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)17;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        buffer0.copyTo(buffer1, 9223372036854775807L, 34L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=9223372036854775807 byteCount=34
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("endIndex < beginIndex: ", 1104, 1104);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 1104 > 23
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(42L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-2182L));
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Number too large: 42fffffffffffff77
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      buffer0.inputStream();
      BufferedSink bufferedSink0 = buffer0.emit();
      assertSame(bufferedSink0, buffer0);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)94;
      byteArray0[5] = (byte)0;
      byteArray0[7] = (byte) (-31);
      Buffer buffer0 = new Buffer();
      buffer0.snapshot();
      ByteString byteString0 = ByteString.encodeUtf8("ogtfFJHG#;Ld>&~%o");
      buffer0.write(byteString0);
      assertEquals(17L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[3];
      ByteString byteString0 = ByteString.EMPTY;
      byteStringArray0[0] = byteString0;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      HashingSink.sha256(hashingSink0);
      ByteString byteString1 = hashingSink0.hash();
      byteStringArray0[1] = byteString1;
      byte[] byteArray0 = new byte[0];
      ByteString byteString2 = new ByteString(byteArray0);
      hashingSink0.flush();
      byteStringArray0[2] = byteString2;
      HashingSink.md5(buffer0);
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      buffer0.indexOfElement(byteString1);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)39;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-86);
      byteArray1[3] = (byte)38;
      byteArray1[4] = (byte)79;
      byteArray1[5] = (byte)94;
      byteArray1[6] = (byte) (-87);
      byteArray1[7] = (byte)0;
      buffer0.read(byteArray1);
      buffer0.require((byte) (-87));
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.sha512(buffer0);
      HashingSink.sha256(buffer0);
      Buffer buffer1 = new Buffer();
      long long0 = buffer1.indexOfElement((ByteString) null);
      assertEquals((-1L), long0);
      
      long long1 = buffer1.completeSegmentByteCount();
      assertEquals(0L, long1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      buffer0.copyTo((OutputStream) byteArrayOutputStream0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      Pipe pipe0 = new Pipe(4211L);
      Buffer buffer1 = pipe0.buffer;
      buffer0.writeByte(0);
      buffer1.hashCode();
      buffer1.readAndWriteUnsafe();
      buffer1.readUtf8();
      buffer0.flush();
      buffer0.request(71776119061217280L);
      buffer0.writeHexadecimalUnsignedLong(0);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer1.writeLong((-2273L));
      int int0 = buffer2.readInt();
      assertEquals((-1), int0);
      assertEquals(0L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.writeUtf8("byteCount < 0: ", (int) (byte)4, (int) (byte)4);
      Buffer buffer3 = new Buffer();
      Buffer buffer4 = new Buffer();
      buffer4.writeDecimalLong((byte)4);
      assertEquals(1L, buffer4.size());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)4;
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Pipe pipe0 = new Pipe(129L);
      Buffer buffer5 = pipe0.buffer;
      buffer5.request((byte)4);
      boolean boolean0 = buffer3.rangeEquals(1000000000L, byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeInt((-1423));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSink0.writeUtf8("");
      int int0 = 57343;
      buffer1.writeUtf8CodePoint(585);
      buffer1.writeDecimalLong(92233720368L);
      realBufferedSource0.buffer.request(65280L);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("9sxjc(s", charset0);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        options0.get(585);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 585
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource1.buffer);
      realBufferedSink0.buffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      byteArrayOutputStream0.writeTo(outputStream0);
      realBufferedSource1.buffer.writeTo(outputStream0);
      long long0 = (-1025L);
      Buffer buffer2 = buffer1.writeDecimalLong((-1025L));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)52;
      byteArray0[8] = (byte)52;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer2.indexOf(byteString0, 1038L);
      buffer0.writeDecimalLong((-911L));
      Buffer buffer3 = new Buffer();
      // Undeclared exception!
      try { 
        buffer3.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = (Buffer)buffer0.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink1.buffer;
      Buffer buffer3 = realBufferedSink0.buffer;
      String string0 = "byteCount < 0: ";
      Buffer buffer4 = buffer3.writeUtf8("byteCount < 0: ", (int) (byte)4, (int) (byte)4);
      buffer4.writeUtf8CodePoint((byte)4);
      Buffer buffer5 = new Buffer();
      buffer1.writeDecimalLong((byte)4);
      ByteString byteString0 = ByteString.EMPTY;
      buffer2.request(2L);
      HashingSource hashingSource0 = HashingSource.md5(buffer3);
      ByteString byteString1 = hashingSource0.hash();
      buffer1.hmacSha256(byteString1);
      ByteString byteString2 = ByteString.encodeUtf8("byteCount < 0: ");
      buffer4.read(buffer0, 1004L);
      // Undeclared exception!
      try { 
        realBufferedSink1.buffer.indexOf(byteString2, (-1882L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer1 = realBufferedSource0.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer2 = realBufferedSink0.buffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      realBufferedSink0.buffer.writeTo((OutputStream) byteArrayOutputStream0);
      Buffer buffer3 = buffer2.writeDecimalLong((-1025L));
      Buffer buffer4 = realBufferedSource0.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      buffer3.request((-258L));
      buffer1.read(buffer4, 1078L);
      Pipe pipe0 = new Pipe(10L);
      Buffer buffer5 = pipe0.buffer;
      buffer4.write((Source) buffer1, (-258L));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)118;
      try { 
        realBufferedSource1.buffer.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      realBufferedSink0.buffer();
      Buffer buffer1 = realBufferedSink0.buffer;
      byte byte0 = (byte)39;
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writeUtf8("byteCount < 0: ", (int) (byte)39, (int) (byte)39);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 39 > 15
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer2.readUnsafe(buffer_UnsafeCursor0);
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer1.readAndWriteUnsafe();
      Buffer buffer3 = buffer_UnsafeCursor2.buffer;
      buffer_UnsafeCursor2.offset = 0L;
      buffer3.writeUtf8CodePoint((-1));
      Buffer buffer4 = buffer1.writeDecimalLong((-1));
      Buffer buffer5 = buffer1.writeDecimalLong(218L);
      buffer_UnsafeCursor1.buffer.readByteString();
      buffer1.completeSegmentByteCount();
      realBufferedSource0.readByteArray();
      buffer_UnsafeCursor1.buffer.writeAll(buffer4);
      buffer0.writeIntLe((-1));
      buffer5.request(2147483647L);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      // Undeclared exception!
      try { 
        buffer1.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      ByteString byteString0 = buffer0.snapshot();
      assertEquals(0, byteString0.size());
      
      Timeout timeout0 = buffer0.timeout();
      assertNotNull(timeout0);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = buffer2.writeLong(834L);
      Buffer buffer4 = realBufferedSource0.buffer();
      buffer4.writeUtf8CodePoint(56319);
      Buffer buffer5 = buffer3.writeDecimalLong((-964L));
      buffer4.request(56319);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString(">6`[", charset0);
      realBufferedSink0.buffer.indexOf(byteString0);
      buffer4.readUtf8CodePoint();
      buffer5.indexOf((byte) (-1), 834L, 1579L);
      int int0 = buffer2.readUtf8CodePoint();
      assertEquals(11L, buffer2.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong((-296L));
      ByteString byteString0 = realBufferedSink0.buffer.md5();
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer2.select(options0);
      assertFalse(buffer1.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer3 = realBufferedSource0.buffer;
      long long0 = realBufferedSink0.buffer.indexOf(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=PT @ *XL;Uz7%4+");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.readAll((Sink) null);
      String string0 = buffer0.readUtf8(0L);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(2L);
      Buffer buffer1 = new Buffer();
      buffer0.timeout();
      // Undeclared exception!
      try { 
        buffer1.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      realBufferedSink0.buffer();
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = buffer1.writeByte(15);
      buffer1.readByte();
      Pipe pipe0 = new Pipe(15);
      Buffer buffer3 = pipe0.buffer;
      buffer2.indexOf((byte)15, 330L);
      assertEquals(0L, buffer2.size());
      
      buffer2.readByteString();
      buffer3.readUnsafe();
      Buffer buffer4 = new Buffer();
      buffer1.completeSegmentByteCount();
      buffer3.writeAll(buffer2);
      realBufferedSink0.buffer.clear();
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer1.writeLong((-2273L));
      // Undeclared exception!
      try { 
        buffer2.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink1.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink1.buffer);
      Buffer buffer2 = realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      realBufferedSink1.writeUtf8("endIndex > string.length: ");
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer();
      realBufferedSource2.buffer.writeHexadecimalUnsignedLong(255L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink1.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer3 = new Buffer();
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor0.data);
      buffer_UnsafeCursor0.buffer.indexOfElement(byteString0);
      buffer1.readShort();
      // Undeclared exception!
      try { 
        buffer0.snapshot((-1229));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1229
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = buffer1.writeUtf8CodePoint((-1623));
      Buffer buffer3 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      Charset.defaultCharset();
      buffer2.readUtf8CodePoint();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      Buffer buffer5 = buffer_UnsafeCursor0.buffer;
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer5.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      Pipe pipe0 = new Pipe(1736L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeByte((-3519));
      buffer1.indexOf((byte)26, (long) (byte)26);
      buffer0.readHexadecimalUnsignedLong();
      buffer1.sha256();
      buffer1.equals(buffer0);
      buffer0.writeInt(0);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line(4L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=3 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-3982L));
      buffer0.indexOf((byte)80, (long) (byte)80);
      assertEquals(5L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong((-318L));
      realBufferedSink0.buffer.md5();
      realBufferedSink0.buffer.segmentSizes();
      // Undeclared exception!
      try { 
        buffer2.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.sha256();
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha256();
      Buffer buffer1 = (Buffer)buffer0.emit();
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      int int0 = buffer1.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      String string0 = "jOq+^\\%";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jOq+^%");
      long long0 = 10L;
      try { 
        buffer0.require(10L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      HashingSink.sha256(buffer0);
      hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.read(buffer0, 3535L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSource0.buffer.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      Buffer buffer2 = new Buffer();
      buffer2.writeDecimalLong((-2315L));
      Buffer buffer3 = new Buffer();
      Buffer buffer4 = buffer3.writeUtf8CodePoint(814);
      Buffer buffer5 = buffer4.writeDecimalLong(1295L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer6 = realBufferedSink0.buffer;
      buffer6.writeDecimalLong((-922337203685477580L));
      buffer_UnsafeCursor0.start = 814;
      buffer4.readByteString();
      Buffer buffer7 = new Buffer();
      Buffer buffer8 = realBufferedSource0.buffer;
      buffer8.completeSegmentByteCount();
      realBufferedSource0.readByteArray();
      buffer5.writeAll(buffer_UnsafeCursor1.buffer);
      buffer1.clear();
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.toString();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        buffer0.copyTo(buffer1, 1199L, (-2780L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=1199 byteCount=-2780
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-102);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSink0.buffer();
      realBufferedSource0.buffer.writeDecimalLong((byte) (-102));
      realBufferedSink0.buffer.request(12L);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.write(realBufferedSource0.buffer, 523L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=0 byteCount=523
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[15];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte) (-22), (-3111L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-3111 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource1.buffer();
      realBufferedSource1.buffer.writeUtf8CodePoint(192);
      realBufferedSink0.buffer.writeDecimalLong((-2105L));
      short short0 = realBufferedSource1.buffer.readShortLe();
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals((short) (-32573), short0);
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Buffer buffer1 = buffer0.copyTo((OutputStream) byteArrayOutputStream0);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)38;
      // Undeclared exception!
      try { 
        buffer0.write(byteArray0, 950, (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=9 offset=950 byteCount=0
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeUtf8("zJvY2laM@[!)[s");
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer2 = realBufferedSource1.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.resizeBuffer(1831L);
      buffer_UnsafeCursor1.seek((-1));
      buffer2.writeDecimalLong((-1));
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer3 = realBufferedSource2.buffer;
      buffer3.request((-1L));
      buffer2.request((-1407L));
      assertEquals(2L, buffer2.size());
      
      buffer_UnsafeCursor0.buffer.readLong();
      buffer3.writeUtf8("limit < 0: ");
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.readByteString();
      realBufferedSink0.writeUtf8("|d+'8){|H /Fqc!");
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource1.buffer();
      Buffer buffer2 = realBufferedSource0.buffer.writeHexadecimalUnsignedLong((-934L));
      Buffer buffer3 = buffer0.writeUtf8CodePoint((-3437));
      byte[] byteArray0 = new byte[0];
      buffer2.write(byteArray0);
      buffer3.writeDecimalLong(435L);
      buffer0.writeDecimalLong((-3437));
      realBufferedSink0.buffer.readByteString();
      realBufferedSource1.buffer.completeSegmentByteCount();
      assertEquals(9L, buffer0.size());
      
      buffer2.writeAll(realBufferedSource1);
      buffer3.clear();
      buffer1.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeLongLe(9223372036773036031L);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      String string0 = realBufferedSink0.buffer.readUtf8Line();
      assertNull(string0);
      
      long long0 = buffer_UnsafeCursor0.buffer.readLongLe();
      assertEquals(9223372036773036031L, long0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeUtf8("jY^sX&R+0/Nto}8g");
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer();
      buffer3.writeDecimalLong(0L);
      buffer2.request(0L);
      Buffer buffer4 = buffer2.writeIntLe(573);
      buffer4.segmentSizes();
      realBufferedSource0.buffer.readUtf8CodePoint();
      buffer4.request((-424L));
      buffer1.request(2044L);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer2.readString(100000L, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=0 byteCount=100000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      long long0 = 2749L;
      Buffer buffer1 = new Buffer();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = buffer2.writeLong(841L);
      Buffer buffer4 = realBufferedSource0.buffer();
      buffer4.writeUtf8CodePoint(56319);
      buffer3.writeDecimalLong((-964L));
      buffer4.request(56319);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString(">6`[", charset0);
      realBufferedSink0.buffer.indexOf(byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer5 = buffer_UnsafeCursor0.buffer;
      realBufferedSource0.buffer.indexOfElement(byteString0);
      // Undeclared exception!
      try { 
        buffer0.snapshot((-2231));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-2231
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)94;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = buffer1.writeLongLe((byte)94);
      MockPrintStream mockPrintStream0 = new MockPrintStream("N_");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      Buffer buffer3 = buffer2.copyTo((OutputStream) dataOutputStream0);
      assertEquals(0L, buffer3.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer1 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink1.buffer);
      realBufferedSink1.writeUtf8("endIndex > string.length: ");
      realBufferedSink0.writeUtf8("endIndex > string.length: ");
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer();
      Buffer buffer2 = realBufferedSource1.buffer;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      realBufferedSource0.buffer.readFrom((InputStream) byteArrayInputStream0, (long) (byte)0);
      buffer1.writeDecimalLong((byte)0);
      assertFalse(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer0.writeDecimalLong((-1L));
      buffer0.readUtf8CodePoint();
      realBufferedSink0.buffer.request(352L);
      Pipe pipe0 = new Pipe(11L);
      Pipe pipe1 = new Pipe(45);
      Buffer buffer2 = pipe1.buffer;
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer2, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      int int0 = (-2868);
      buffer2.rangeEquals(11L, byteString1, (-2868), 100);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)5;
      ByteString byteString2 = new ByteString(byteArray0);
      buffer0.indexOfElement(byteString2);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink1.writeUtf8("resizeBuffer() only permitted for read/write buffers");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.writeUtf8CodePoint((-1354));
      Buffer buffer2 = realBufferedSink1.buffer.writeDecimalLong(0);
      Buffer buffer3 = buffer1.writeDecimalLong((-1354));
      ByteString byteString0 = realBufferedSink0.buffer.readByteString();
      buffer0.completeSegmentByteCount();
      realBufferedSource0.readByteArray();
      buffer3.writeAll(buffer2);
      assertEquals(53L, buffer1.size());
      
      Buffer buffer4 = realBufferedSink1.buffer();
      buffer4.clear();
      long long0 = buffer0.indexOfElement(byteString0, 2113L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Pipe pipe0 = new Pipe(682L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writableSegment((-1516));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.require((-258L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer1 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer1.rangeEquals(1000000L, (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink1.buffer);
      Buffer buffer2 = realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      BufferedSink bufferedSink0 = realBufferedSink1.writeUtf8("endIndex > string.length: ");
      realBufferedSink0.writeUtf8("endIndex > string.length: ");
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer();
      ((RealBufferedSink) bufferedSink0).timeout();
      realBufferedSource2.buffer.writeHexadecimalUnsignedLong(255L);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("x6^*zjMG*aZrSVOP({V", charset0);
      ((RealBufferedSink) bufferedSink0).buffer.indexOf(byteString0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      int int0 = (-795);
      buffer0.md5();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLongLe(1L);
      buffer1.indexOf((byte) (-98), 8192L);
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeHexadecimalUnsignedLong(280375465082880L);
      buffer0.writeUtf8CodePoint(16);
      Buffer buffer2 = buffer1.writeDecimalLong(280375465082880L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer3 = buffer1.writeDecimalLong(280375465082880L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.buffer();
      ByteString byteString0 = ByteString.EMPTY;
      buffer3.completeSegmentByteCount();
      realBufferedSource0.readByteArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      realBufferedSink0.buffer.clear();
      realBufferedSink0.buffer.indexOfElement(byteString0, 0L);
      buffer2.exhausted();
      Buffer buffer4 = realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer4.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(117L);
      assertEquals(1L, buffer0.size());
      
      Buffer buffer5 = realBufferedSource0.buffer;
      assertTrue(buffer5.exhausted());
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      Pipe pipe0 = new Pipe(1736L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeByte((-3519));
      buffer1.writeLong((-1443L));
      buffer1.indexOf((byte)26, (long) (byte)26);
      buffer0.readHexadecimalUnsignedLong();
      buffer1.sha256();
      boolean boolean0 = buffer1.equals(buffer0);
      assertEquals(8L, buffer0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer2 = buffer0.writeLongLe(3219L);
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      String string0 = buffer0.readUtf8Line();
      assertEquals("\uFFFD\f\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink1.writeUtf8("ISIZE");
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("");
      Buffer buffer2 = buffer0.writeHexadecimalUnsignedLong((-3902L));
      Buffer buffer3 = ((RealBufferedSink) bufferedSink0).buffer.writeUtf8CodePoint(16);
      realBufferedSink1.buffer.writeDecimalLong(65536L);
      buffer3.writeDecimalLong(117L);
      realBufferedSource0.buffer();
      ByteString byteString0 = realBufferedSink0.buffer.readByteString();
      buffer3.completeSegmentByteCount();
      realBufferedSource0.readByteArray();
      assertEquals(16L, buffer0.size());
      
      buffer0.clear();
      buffer2.indexOfElement(byteString0, 0L);
      boolean boolean0 = buffer3.exhausted();
      assertTrue(boolean0);
  }
}
