/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 17:50:13 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(3.0463634539046325E-4);
      int int0 = rationalNumber0.intValue();
      assertEquals(0, int0);
      assertEquals(2, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(3, 3);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      rationalNumber0.negate();
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      rationalNumber2.toString();
      RationalNumber rationalNumber3 = RationalNumber.valueOf((-1.0));
      RationalNumber rationalNumber4 = rationalNumber3.negate();
      RationalNumber.valueOf(265.3104);
      rationalNumber4.toString();
      rationalNumber3.toString();
      rationalNumber3.toDisplayString();
      rationalNumber0.floatValue();
      rationalNumber3.longValue();
      rationalNumber3.toDisplayString();
      rationalNumber3.toString();
      rationalNumber2.intValue();
      rationalNumber0.negate();
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(0L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483627363038E9);
      String string0 = rationalNumber0.toString();
      assertEquals(2.147483627E9, rationalNumber0.doubleValue(), 0.01);
      assertEquals("2,147,483,627", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0E-8);
      long long0 = rationalNumber0.longValue();
      assertEquals(0L, long0);
      assertEquals(1.0E-8, rationalNumber0.doubleValue(), 0.01);
      assertEquals(100000000, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(424.5);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("424.5", string0);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(424L, long0);
      assertEquals(849, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-206L), (-1781L));
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(1065L, 691L);
      assertEquals(691, rationalNumber2.divisor);
      assertEquals((short)1, rationalNumber2.shortValue());
      
      rationalNumber0.toDisplayString();
      int int0 = rationalNumber0.intValue();
      assertEquals(0, int0);
      
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("0.116", string0);
      
      rationalNumber0.toString();
      String string1 = rationalNumber0.toString();
      assertEquals("206/1781 (0.116)", string1);
      
      String string2 = rationalNumber1.toString();
      assertEquals("-206/1781 (-0.116)", string2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(1218, 1218);
      rationalNumber0.toString();
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = RationalNumber.valueOf((-903.66423783));
      assertEquals((-903.66425F), rationalNumber2.floatValue(), 0.01F);
      
      RationalNumber rationalNumber3 = rationalNumber0.negate();
      RationalNumber.factoryMethod(1606L, (-681L));
      RationalNumber rationalNumber4 = new RationalNumber(Integer.MAX_VALUE, Integer.MAX_VALUE);
      String string0 = rationalNumber4.toString();
      assertEquals("1", string0);
      
      RationalNumber rationalNumber5 = RationalNumber.valueOf(0.0);
      assertEquals(0.0F, rationalNumber5.floatValue(), 0.01F);
      
      rationalNumber1.negate();
      RationalNumber rationalNumber6 = RationalNumber.valueOf((-1.0));
      assertEquals((-1), rationalNumber6.intValue());
      assertEquals((-1), rationalNumber6.numerator);
      
      RationalNumber rationalNumber7 = RationalNumber.factoryMethod(1218, 63L);
      rationalNumber7.floatValue();
      assertEquals(19, rationalNumber7.intValue());
      
      RationalNumber.factoryMethod(2147483647L, (-3100472));
      rationalNumber1.floatValue();
      RationalNumber.factoryMethod((-1L), 1218);
      rationalNumber3.doubleValue();
      RationalNumber rationalNumber8 = RationalNumber.valueOf(2.2285860268311808E-8);
      double double0 = rationalNumber8.doubleValue();
      assertEquals(2.2285860238996686E-8, double0, 0.01);
      
      RationalNumber.factoryMethod(2084L, Integer.MAX_VALUE);
      int int0 = rationalNumber3.intValue();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(3, 3);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertEquals(1, rationalNumber0.intValue());
      assertEquals((byte) (-1), rationalNumber1.byteValue());
      
      RationalNumber rationalNumber2 = new RationalNumber(2886, 748);
      String string0 = rationalNumber2.toString();
      assertEquals("2886/748 (3.858)", string0);
      
      rationalNumber2.intValue();
      RationalNumber rationalNumber3 = RationalNumber.valueOf((-3183.32608849));
      assertEquals((-3183.3262F), rationalNumber3.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483679L), (-2147483679L));
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod((-2147483679L), 1);
      String string0 = rationalNumber1.toString();
      assertEquals("2,147,483,617", string0);
      
      rationalNumber0.floatValue();
      RationalNumber.factoryMethod(2147483617, 1);
      RationalNumber rationalNumber2 = RationalNumber.valueOf((-2599.8));
      rationalNumber2.doubleValue();
      assertEquals((-2599.8F), rationalNumber2.floatValue(), 0.01F);
      
      RationalNumber rationalNumber3 = RationalNumber.valueOf(2.2285860268311808E-8);
      RationalNumber.factoryMethod(5, (-460L));
      String string1 = rationalNumber3.toDisplayString();
      assertEquals(44871501, rationalNumber3.divisor);
      assertEquals("0", string1);
      
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod((-2147483679L), 244L);
      assertEquals((-8801162.62295082), rationalNumber4.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483647L, 2147483647L);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber.valueOf(8.993956384983903E-6);
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod((-218L), 0L);
      String string0 = rationalNumber0.toString();
      assertEquals("1", string0);
      
      float float0 = rationalNumber1.floatValue();
      assertEquals((-1.0F), float0, 0.01F);
      
      RationalNumber.factoryMethod(1, 590L);
      rationalNumber2.floatValue();
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(2147483664L, (-2617L));
      double double0 = rationalNumber3.doubleValue();
      assertEquals((-820276.4186401834), double0, 0.01);
      
      RationalNumber rationalNumber4 = RationalNumber.valueOf(903.6641791044776);
      assertEquals(903.6642F, rationalNumber4.floatValue(), 0.01F);
      
      RationalNumber rationalNumber5 = RationalNumber.factoryMethod((-1885L), 590L);
      assertEquals((-3), rationalNumber5.intValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-1L), (-2147483679L));
      assertEquals(1, rationalNumber0.numerator);
      assertEquals((-4.656612940297928E-10), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483647L, 2147483647L);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = RationalNumber.valueOf(8.993956384983903E-6);
      assertEquals(8.9939385E-6F, rationalNumber2.floatValue(), 0.01F);
      
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod((-218L), 0L);
      String string0 = rationalNumber0.toString();
      assertEquals("1", string0);
      
      rationalNumber1.floatValue();
      RationalNumber.factoryMethod(1, 590L);
      float float0 = rationalNumber3.floatValue();
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod(2147483664L, (-2617L));
      double double0 = rationalNumber4.doubleValue();
      assertEquals((-820276.4186401834), double0, 0.01);
      
      RationalNumber.factoryMethod(590, 597L);
      RationalNumber rationalNumber5 = RationalNumber.factoryMethod(237L, 2147483664L);
      RationalNumber rationalNumber6 = rationalNumber5.negate();
      assertEquals((-1.0989606298583698E-7), rationalNumber6.doubleValue(), 0.01);
  }
}
