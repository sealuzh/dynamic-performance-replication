/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:43:22 GMT 2018
 */

package org.objectweb.asm.jip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.ObjectStreamConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.objectweb.asm.jip.AnnotationVisitor;
import org.objectweb.asm.jip.Attribute;
import org.objectweb.asm.jip.ByteVector;
import org.objectweb.asm.jip.ClassReader;
import org.objectweb.asm.jip.ClassWriter;
import org.objectweb.asm.jip.Edge;
import org.objectweb.asm.jip.FieldWriter;
import org.objectweb.asm.jip.Frame;
import org.objectweb.asm.jip.Item;
import org.objectweb.asm.jip.Label;
import org.objectweb.asm.jip.MethodWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodWriter_ESTest extends MethodWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 742;
      ClassWriter classWriter0 = new ClassWriter(742);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]5nTF0X";
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, 2, "]5nTF0X", "rUc%*(", "rUc%*(", stringArray0, false, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2300));
      String string0 = "B0\\?v3";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "double";
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, 0, "double", "double", "B0?v3", stringArray0, true, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(93);
      String[] stringArray0 = new String[6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[0] = stringArray0[4];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "", "", stringArray0[5], (String[]) null, false, false);
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      methodWriter0.next = methodWriter1;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        MethodWriter.readUnsignedShort(byteArray0, 93);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 93
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "char";
      stringArray0[1] = "char";
      stringArray0[2] = "char";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "char", "char", "", stringArray0, false, false);
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      MethodWriter methodWriter2 = classWriter0.lastMethod;
      MethodWriter methodWriter3 = classWriter0.lastMethod;
      methodWriter2.visitMethodInsn(201, "char", "3y0Ara=N;$oWkyA1|", "3y0Ara=N;$oWkyA1|");
      assertSame(methodWriter2, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(742);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]5nTF0X";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "]5nTF0X", "rUc%*(", "rUc%*(", stringArray0, false, false);
      methodWriter0.visitFrame(2, 2, stringArray0, 179, stringArray0);
      methodWriter0.visitIntInsn(2, 742);
      methodWriter0.visitCode();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2998));
      String[] stringArray0 = new String[0];
      boolean boolean0 = true;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-2346), "/6N(|Vl[EF5BZ~hO)ei", "/6N(|Vl[EF5BZ~hO)ei", "(8 TUgo", stringArray0, true, true);
      MethodWriter methodWriter1 = null;
      try {
        methodWriter1 = new MethodWriter(classWriter0, 1, "/6N(|Vl[EF5BZ~hO)ei", "[]", "uFVq|=#HB}R>x:U@>B8", stringArray0, true, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(742);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]5nTF0X";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "]5nTF0X", "rUc%*(", "rUc%*(", stringArray0, false, false);
      methodWriter0.visitIntInsn(2, 742);
      Label label0 = new Label();
      label0.position = 742;
      methodWriter0.visitLabel(label0);
      methodWriter0.visitMaxs(1, 2);
      methodWriter0.visitFrame((-3109), 2, stringArray0, (-3335), stringArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "char";
      stringArray0[1] = "char";
      stringArray0[2] = "char";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "char", "char", "", stringArray0, false, false);
      Label label0 = new Label();
      methodWriter0.visitJumpInsn((-712), label0);
      Label label1 = new Label();
      Label label2 = label1.successor;
      methodWriter0.visitTryCatchBlock(label1, label1, (Label) null, "char");
      assertFalse(label1.equals((Object)label0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1003);
      boolean boolean0 = ClassReader.WRITER;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-118), "FD#N]se&BsUb+;c_#%", "FD#N]se&BsUb+;c_#%", "FD#N]se&BsUb+;c_#%", (String[]) null, false, false);
      methodWriter0.getSize();
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      methodWriter0.classReaderLength = (-1787);
      methodWriter1.visitParameterAnnotation(1003, "Ljava/lang/Synthetic;", false);
      methodWriter1.visitVarInsn(3, 2);
      assertSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = ClassReader.RESIZE;
      ClassWriter classWriter0 = new ClassWriter(1000);
      boolean boolean1 = ClassReader.WRITER;
      String string0 = "FD#N]se&BsUb+;c_#%";
      String string1 = "UPT";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]se&BsUb+;c_#%", "n$)Y", "UPT", (String[]) null, true, true);
      int int0 = 0;
      methodWriter0.visitVarInsn(193, 2);
      // Undeclared exception!
      try { 
        methodWriter0.visitInsn((-2703));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(77);
      String[] stringArray0 = new String[12];
      stringArray0[2] = "G";
      stringArray0[4] = "G";
      stringArray0[1] = "G";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "G", "G", stringArray0[5], (String[]) null, false, false);
      methodWriter0.next = methodWriter0;
      methodWriter0.signature = "G";
      int int0 = Frame.ARRAY_OF;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G");
      methodWriter0.visitAnnotationDefault();
      methodWriter0.visitVarInsn(268435456, (-24));
      int int1 = Frame.ARRAY_OF;
      Label label0 = new Label();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3735);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]5nTF0X";
      Frame frame0 = new Frame();
      Label label0 = frame0.owner;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "]5nTF0X", "]5nTF0X", "Ma|;HQ:U..deC", stringArray0, false, false);
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(1, 40, stringArray0, 1, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(93);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]sqosUb+;]_%%", "n$Il)Y", "StackMapTable", (String[]) null, false, false);
      Object[] objectArray0 = new Object[1];
      methodWriter0.visitFrame((byte) (-11), 2, (Object[]) null, 2, objectArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(742);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]5nTF0X";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "]5nTF0X", "rUc%*(", "rUc%*(", stringArray0, false, false);
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation(742, "]5nTF0X", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "char";
      stringArray0[1] = "char";
      stringArray0[2] = "char";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "char", "char", "char", stringArray0, false, false);
      methodWriter0.getSize();
      methodWriter0.visitCode();
      methodWriter0.visitFieldInsn((-1943), "mjW:}h@c5k}YS\"4'^", "char", "char");
      methodWriter0.visitVarInsn((-1722), 6);
      methodWriter0.visitVarInsn(6, 1);
      methodWriter0.visitIntInsn(1690, 1);
      methodWriter0.visitAnnotation("qGpDBU!+", false);
      methodWriter0.visitVarInsn(55, 55);
      int int0 = methodWriter0.getSize();
      assertEquals(70, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)0;
      boolean boolean0 = ClassReader.RESIZE;
      ClassWriter classWriter0 = new ClassWriter(1000);
      boolean boolean1 = ClassReader.WRITER;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "UPT";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]se&BsUb+;c_#%", "n$)Y", "UPT", (String[]) null, true, false);
      methodWriter0.visitVarInsn(2, 2571);
      methodWriter0.visitFrame((-2), 1, (Object[]) null, 314, (Object[]) null);
      methodWriter0.visitIincInsn((-68), (-2415));
      // Undeclared exception!
      try { 
        MethodWriter.readUnsignedShort(byteArray0, (-68));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -68
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(93);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]sqosUb+;]_%%", "n$Il)Y", "StackMapTable", (String[]) null, false, false);
      methodWriter0.visitAnnotation("StackMapTable", false);
      methodWriter0.visitInsn(1);
      methodWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 50;
      intArray0[2] = 497;
      intArray0[3] = 2361;
      intArray0[4] = 87;
      intArray0[5] = 108;
      int int0 = MethodWriter.getNewOffset(intArray0, intArray0, 892, 87);
      assertEquals((-1410), int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3387));
      String[] stringArray0 = new String[6];
      stringArray0[0] = stringArray0[4];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "05o[8_2EA)`n", "05o[8_2EA)`n", stringArray0[5], (String[]) null, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      methodWriter0.next = methodWriter0;
      methodWriter0.visitInsn(2);
      // Undeclared exception!
      try { 
        methodWriter0.next.visitParameterAnnotation(161, "<init>", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2317));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Ljava/lang/Synthetic;";
      stringArray0[1] = "Signature";
      stringArray0[2] = ")V";
      stringArray0[3] = "Signature";
      stringArray0[4] = "";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Signature", "Ljava/lang/Synthetic;", "Signature", stringArray0, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Label label0 = new Label();
      Label label1 = label0.next;
      Label[] labelArray0 = new Label[4];
      labelArray0[0] = label0;
      labelArray0[1] = null;
      labelArray0[2] = null;
      labelArray0[3] = label0;
      // Undeclared exception!
      try { 
        methodWriter0.visitTableSwitchInsn(730, 1, label0, labelArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2317));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "double";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-1840700267), "BY?v3", "BY?v3", "R9YKa3a", stringArray0, false, false);
      methodWriter0.getSize();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      Label label0 = new Label();
      int[] intArray0 = new int[7];
      label0.outputStackMax = (-2317);
      intArray0[0] = 26;
      intArray0[1] = 26;
      intArray0[2] = (int) (byte)10;
      intArray0[3] = (-2317);
      intArray0[4] = (-2317);
      intArray0[5] = 1;
      intArray0[6] = 26;
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, (-1840700267), "BY?v3", "BY?v3", "RuntimeInvisibleAnnotations", stringArray0, false, false);
      methodWriter1.visitTryCatchBlock(label0, label0, label0, "double");
      Label label1 = new Label();
      Label label2 = label0.successor;
      methodWriter1.visitTryCatchBlock(label0, label1, (Label) null, "double");
      methodWriter0.visitTypeInsn((-2190), "double");
      assertFalse(methodWriter0.equals((Object)methodWriter1));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = ClassReader.ANNOTATIONS;
      ClassWriter classWriter0 = new ClassWriter(1065);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#Nva]se&BsUb+;c_#%", "($)[", "FD#Nva]se&BsUb+;c_#%", (String[]) null, true, false);
      int int0 = Frame.BASE;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Label[] labelArray0 = new Label[3];
      Frame frame0 = new Frame();
      frame0.inputLocals = null;
      String string0 = classWriter0.thisName;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean1 = ClassReader.ANNOTATIONS;
      classWriter0.newUTF8(">M");
      methodWriter0.visitMultiANewArrayInsn("FD#Nva]se&BsUb+;c_#%", 2);
      methodWriter0.visitFrame(3, 16777216, (Object[]) null, 50, (Object[]) null);
      // Undeclared exception!
      try { 
        methodWriter0.visitFieldInsn(2, "C", (String) null, ">M");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = ClassReader.RESIZE;
      ClassWriter classWriter0 = new ClassWriter(1000);
      boolean boolean1 = ClassReader.WRITER;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]se&BsUb+;c_#%", "n$)Y", "UPT", (String[]) null, true, false);
      Label label0 = new Label();
      Label label1 = new Label();
      label1.toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      methodWriter0.visitJumpInsn(177, label0);
      methodWriter0.visitTypeInsn(2, "5Qt|jF(pk6PQdx-&");
      methodWriter0.visitMaxs(1000, 191);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-65);
      byteArray0[3] = (byte)0;
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (byte) (-65), "1aHz", "char", "1aHz", (String[]) null, false, false);
      methodWriter0.visitMaxs((byte) (-65), 2585);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Integer integer0 = new Integer(17);
      classWriter0.newConstItem("1aHz");
      methodWriter0.visitIincInsn(3268, 1854);
      Attribute attribute0 = new Attribute(",OwSl");
      methodWriter0.visitAttribute(attribute0);
      methodWriter0.visitCode();
      Label label0 = new Label();
      Label label1 = label0.getFirst();
      label0.position = 1854;
      Label[] labelArray0 = new Label[2];
      labelArray0[0] = label1;
      labelArray0[1] = label0;
      methodWriter0.visitTableSwitchInsn(1854, 3268, label1, labelArray0);
      assertSame(label1, label0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)0;
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "!onstantV1alue";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      int int0 = Edge.NORMAL;
      stringArray0[4] = "char";
      stringArray0[5] = "char";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-1447783297), "!onstantV1alue", "#n$)Y", "#n$)Y", stringArray0, true, false);
      int int1 = Edge.NORMAL;
      methodWriter0.visitMultiANewArrayInsn("", (-2317));
      classWriter0.newMethodItem("char", "!onstantV1alue", "", true);
      Label label0 = new Label();
      methodWriter0.visitMaxs((-32768), 0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = 6;
      intArray0[3] = 1;
      intArray0[4] = (-2317);
      intArray0[5] = (int) (byte)0;
      Label[] labelArray0 = new Label[0];
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      methodWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = ClassReader.RESIZE;
      ClassWriter classWriter0 = new ClassWriter(982);
      classWriter0.newInteger(982);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N6_e&BsUb+;c_#%", "n$)Y", "java/+lang/Throwable", (String[]) null, true, false);
      methodWriter0.getSize();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Lr/oH");
      methodWriter0.visitIincInsn((-3026), (-4488));
      Attribute attribute0 = new Attribute("java/+lang/Throwable");
      methodWriter0.visitAttribute(attribute0);
      methodWriter0.visitCode();
      methodWriter0.visitVarInsn(169, 325);
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      // Undeclared exception!
      try { 
        methodWriter1.visitParameterAnnotation((byte)74, "FD#N6_e&BsUb+;c_#%", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      byte[] byteArray1 = new byte[4];
      byteArray1[2] = (byte)0;
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Y~1fL.3'7N]tkBv[}8!", "Y~1fL.3'7N]tkBv[}8!", "Y~1fL.3'7N]tkBv[}8!", stringArray0, false, false);
      methodWriter0.visitFrame(2, (byte)0, stringArray0, (byte)0, stringArray0);
      methodWriter0.getSize();
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(2, 1, stringArray0, 1, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      Item[] itemArray0 = new Item[4];
      Item item0 = classWriter0.newFloat(1);
      item0.strVal1 = "Y~1fL.3'7N]tkBv[}8!";
      itemArray0[0] = item0;
      Item item1 = new Item(2);
      classWriter0.newFloat(2);
      itemArray0[0] = itemArray0[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      itemArray0[0] = item0;
      byte[] byteArray1 = new byte[7];
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Y~1fL.3'7N]tkBv[}8!", "Y~1fL.3'7N]tkBv[}8!", "Y~1fL.3'7N]tkBv[}8!", stringArray0, false, false);
      methodWriter0.visitFrame(2, (byte)0, stringArray0, (byte)0, stringArray0);
      int int0 = Frame.ARRAY_OF;
      methodWriter0.visitIntInsn(1, 2);
      methodWriter0.visitFrame(2, 1, stringArray0, 1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1340));
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ljava/lang/Synthetic;", "px", "Ljava/lang/Synthetic;", (String[]) null, false, false);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.put11(292552704, 9);
      methodWriter0.put(byteVector1);
      assertSame(byteVector1, byteVector0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(93);
      String[] stringArray0 = new String[6];
      stringArray0[0] = stringArray0[4];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "", "", stringArray0[5], (String[]) null, false, false);
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      methodWriter0.next = methodWriter1;
      methodWriter1.visitInsn((-3005));
      methodWriter0.next.visitAnnotation("StkMapTable", true);
      ByteVector byteVector0 = classWriter0.pool;
      methodWriter1.put(byteVector0);
      // Undeclared exception!
      try { 
        methodWriter0.next.visitFrame(1, 5403, (Object[]) null, 93, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3735);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\u0006nTFX";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, ":1S", "W$#rkkS&I`/I|", "W$#rkkS&I`/I|", stringArray0, false, false);
      classWriter0.toByteArray();
      methodWriter0.visitFrame(2, (-65), stringArray0, 3735, stringArray0);
      Object[] objectArray0 = new Object[0];
      methodWriter0.visitMultiANewArrayInsn(":1S", 267386880);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(93);
      String string0 = "J.Hsu#1";
      classWriter0.visitSource("", "J.Hsu#1");
      int int0 = Frame.LONG;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<init>";
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, 172, "<init>", "^q1]Or6I9", "", stringArray0, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-388));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "x};{zn)QFL";
      stringArray0[1] = "FD#N]se&BsUb+;c_#%";
      stringArray0[3] = "FD#N]se&BsUb+;c_#%";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-2945), "s*N", "n$Il)Y", "LocalVariableTable", (String[]) null, true, true);
      methodWriter0.visitFrame(68, 68, stringArray0, (-3608), stringArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(93);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]sqosUb+;]_%%", "FD#N]sqosUb+;]_%%", "FD#N]sqosUb+;]_%%", (String[]) null, false, false);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame((byte) (-1), 2, (Object[]) null, 2, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      Item[] itemArray0 = new Item[2];
      Item item0 = classWriter0.newFloat(1);
      classWriter0.newFloat(2);
      item0.set(1);
      itemArray0[0] = item0;
      itemArray0[0] = item0;
      byte[] byteArray1 = new byte[7];
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Y~1fL.3'7N]tkBv[}8!", "Y~1fL.3'7N]tkBv[}8!", "Y~1fL.3'7N]tkBv[}8!", stringArray0, false, false);
      methodWriter0.visitFrame(1, (-727), stringArray0, 1074, itemArray0);
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(2, (byte)0, stringArray0, (byte)0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(77);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "char";
      stringArray0[1] = "char";
      stringArray0[2] = "char";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "char", "char", "char", stringArray0, false, false);
      methodWriter0.getSize();
      methodWriter0.visitFrame(3083, 2, stringArray0, 30, stringArray0);
      methodWriter0.visitCode();
      methodWriter0.visitIntInsn(1690, 77);
      Label label0 = new Label();
      methodWriter0.visitLabel(label0);
      ByteVector byteVector0 = new ByteVector();
      byteVector0.put11(1690, 127);
      byteVector0.put12(77, 3086);
      methodWriter0.put(byteVector0);
      methodWriter0.visitLabel(label0);
      Attribute attribute0 = new Attribute("char");
      methodWriter0.visitMultiANewArrayInsn("char", 1600);
      methodWriter0.visitTypeInsn(1690, "char");
      methodWriter0.visitVarInsn(17, 17);
      methodWriter0.visitLineNumber(77, label0);
      methodWriter0.visitLineNumber(77, label0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)84;
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassWriter classWriter0 = new ClassWriter(73);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "YtSpZR7EX|A";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (byte)84, "hn&", "hn&", ":1S", stringArray0, false, false);
      methodWriter0.visitFrame((-8), 1, stringArray0, (byte)84, stringArray0);
      ByteVector byteVector0 = new ByteVector(200);
      methodWriter0.visitAnnotationDefault();
      methodWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)0;
      boolean boolean0 = ClassReader.SIGNATURES;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "08F");
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "java/lang/String", "n$Il)Y", "java/lang/String", (String[]) null, true, false);
      methodWriter0.visitFrame((byte)0, (byte)0, (Object[]) null, (-622), (Object[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean1 = ClassReader.SIGNATURES;
      methodWriter0.visitCode();
      methodWriter0.visitIntInsn(177, 16777218);
      methodWriter0.classReaderLength = 1;
      ByteVector byteVector0 = new ByteVector();
      methodWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-66);
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "char";
      stringArray0[1] = "char";
      stringArray0[2] = "char";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "char", "char", "char", stringArray0, false, false);
      methodWriter0.visitFrame((byte) (-66), 2, stringArray0, 2, stringArray0);
      methodWriter0.visitCode();
      Label label0 = new Label();
      label0.next = label0;
      methodWriter0.visitLabel(label0);
      Frame frame0 = label0.next.frame;
      label0.frame = null;
      methodWriter0.visitIincInsn(2, 272);
      methodWriter0.getSize();
      Label label1 = new Label();
      label0.position = (int) (byte) (-66);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = ClassReader.RESIZE;
      ClassWriter classWriter0 = new ClassWriter(2226);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = null;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]se&BsUb+-c_o%", "n$)Y", "n$)Y", (String[]) null, true, false);
      Label label0 = new Label();
      byte[] byteArray0 = new byte[16];
      byte byte0 = (byte) (-114);
      Attribute attribute0 = new Attribute("FD#N]se&BsUb+-c_o%");
      methodWriter0.visitAttribute(attribute0);
      label0.visitSubroutine(label0, 1, 2);
      byteArray0[2] = (byte) (-114);
      label0.resolve(methodWriter0, (byte) (-114), byteArray0);
      methodWriter0.visitMultiANewArrayInsn("n$)Y", (-3418));
      boolean boolean1 = classWriter0.invalidFrames;
      boolean boolean2 = ClassReader.SIGNATURES;
      methodWriter0.visitJumpInsn(146, label0);
      // Undeclared exception!
      try { 
        methodWriter0.visitFieldInsn(607, "n$)Y", "FD#N]se&BsUb+-c_o%", "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(93);
      String[] stringArray0 = new String[6];
      stringArray0[0] = stringArray0[4];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "05o[8_2EA)`n", "05o[8_2EA)`n", stringArray0[5], (String[]) null, false, false);
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      methodWriter0.next = methodWriter1;
      methodWriter0.next.visitInsn((-3418));
      methodWriter0.visitAnnotation("RuntimeVisibleParameterAnnotations", false);
      ByteVector byteVector0 = classWriter0.pool;
      methodWriter0.next.put(byteVector0);
      methodWriter1.visitFrame(1, (byte) (-1), (Object[]) null, 23, (Object[]) null);
      MethodWriter methodWriter2 = methodWriter0.next.next;
      methodWriter2.visitIincInsn(2218, 23);
      assertSame(methodWriter2, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "char";
      stringArray0[1] = "char";
      stringArray0[2] = "char";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 54, "char", "WKW(", "char", stringArray0, false, false);
      methodWriter0.getSize();
      Label label0 = new Label();
      label0.addToSubroutine(1, Integer.MAX_VALUE);
      int[] intArray0 = new int[4];
      intArray0[0] = 30;
      intArray0[1] = 1;
      intArray0[2] = 185;
      intArray0[3] = 187;
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      methodWriter0.classReaderOffset = 74;
      methodWriter0.visitVarInsn(185, (-1284));
      methodWriter0.visitAnnotationDefault();
      ByteVector byteVector0 = new ByteVector();
      byteVector0.putByte(1327);
      // Undeclared exception!
      try { 
        methodWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-65);
      byteArray0[3] = (byte)0;
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (byte) (-65), "1aHz", "char", "1aHz", (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitMaxs((byte) (-65), 2585);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIincInsn(2585, (byte)0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      methodWriter0.visitIntInsn(2585, (byte) (-65));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("java/lang/Throwable");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      ClassReader classReader0 = new ClassReader("java/lang/Throwable");
      assertEquals(33, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4463, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2998));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Label offset position has not been resolved yet", "/6N(|Vl[EF5BZ~hO)ei", "(8 TUgo", stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitIincInsn(248, (-2998));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("uFVq|=#HB}R>x:U@>B8", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFieldInsn((-1996045738), ":", "AnnotationDefault", "/6N(|Vl[EF5BZ~hO)ei");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 25165824;
      intArray0[1] = (-3336);
      intArray0[2] = 640;
      intArray0[3] = (-491);
      intArray0[4] = 805;
      int int0 = MethodWriter.getNewOffset(intArray0, intArray0, (-1204), 1281);
      assertEquals(3439, int0);
      assertArrayEquals(new int[] {25165824, (-3336), 640, (-491), 805}, intArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = ClassReader.ANNOTATIONS;
      assertTrue(boolean0);
      
      int int0 = 1065;
      ClassWriter classWriter0 = new ClassWriter(1065);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#Nva]se&BsUb+;c_#%", "($)[", "FD#Nva]se&BsUb+;c_#%", (String[]) null, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      int int1 = Frame.BASE;
      assertFalse(int1 == int0);
      assertEquals(16777216, int1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int2 = Frame.ELEMENT_OF;
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-268435456), int2);
      
      MethodWriter methodWriter1 = methodWriter0.next;
      assertNull(methodWriter1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int3 = Frame.INTEGER;
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(16777217, int3);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      methodWriter0.visitLocalVariable("n$)Y", "&vKN [ZVvN3E+E`q_%", " vxk/fG", label1, label0, (-268435456));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      boolean boolean2 = ClassReader.WRITER;
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      methodWriter0.visitLabel(label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(label0.equals((Object)label1));
      assertNotSame(label0, label1);
      
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("($)[");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "char";
      stringArray0[1] = "char";
      stringArray0[2] = "char";
      stringArray0[3] = "#n$)Y";
      stringArray0[4] = "char";
      stringArray0[5] = "#n$)Y";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-1447783354), "char", "#n$)Y", "#n$)Y", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      int[] intArray0 = new int[7];
      intArray0[3] = (-1447783354);
      intArray0[2] = (-1447783354);
      intArray0[4] = 2;
      intArray0[6] = 192;
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitMultiANewArrayInsn("#n$)Y", 192);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector(1);
      assertNotNull(byteVector0);
      
      methodWriter0.put(byteVector0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassReader classReader0 = new ClassReader(byteArray0, (byte)1, 889);
      assertEquals(0, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(11, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = ClassReader.SIGNATURES;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-2317));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      classWriter0.threshold = 168;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "o>ble";
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "o>ble", "o>ble", "o>ble", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      int int0 = methodWriter0.getSize();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(26, int0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitJumpInsn(1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      Label label2 = label1.successor;
      assertNull(label2);
      
      String string0 = null;
      methodWriter0.visitTryCatchBlock(label1, label0, label1, (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      methodWriter0.visitInsn(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMultiANewArrayInsn("void", (-2624));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        MethodWriter.readUnsignedShort(byteArray0, (-1603));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1603
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(731);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Ljava/lang/Synthetic;";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      classWriter0.visitInnerClass("0$", " ", "Ljava/lang/Synthetic;", 731);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("'nWi^RO:=KIg(");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      methodWriter0.visitAttribute(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) methodWriter0;
      boolean boolean0 = ClassReader.WRITER;
      assertTrue(boolean0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLabel(label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("'nWi^RO:=KIg(");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((byte)15);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "AnnotationDefault";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 3893, "car", "car", "AnnotationDefault", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.visitTypeInsn((-247), "car");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      methodWriter0.exceptionCount = 128;
      methodWriter1.visitIincInsn(187, 128);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[3] = (byte)0;
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(982);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]se&BsUb+;c_#%", "n$)Y", "UPT", (String[]) null, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      int int0 = methodWriter0.getSize();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(16, int0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitVarInsn((-1), 1124075009);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(1000);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]se&BsUb+;c_#%", "n$)Y", "UPT", (String[]) null, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      String string0 = label0.toString();
      assertFalse(label0.equals((Object)label1));
      assertEquals("L12", string0);
      assertNotNull(string0);
      assertNotSame(label0, label1);
      
      int int0 = classWriter0.newField("n$)Y", "UPT", "FD#N]se&BsUb+;c_#%");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(6, int0);
      
      boolean boolean1 = ClassReader.RESIZE;
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      label1.outputStackMax = 6;
      ByteVector byteVector0 = new ByteVector(2);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putUTF8("n$)Y");
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      ByteVector byteVector2 = byteVector0.putLong(2);
      assertNotNull(byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
      
      ByteVector byteVector3 = classWriter0.pool;
      assertFalse(byteVector3.equals((Object)byteVector2));
      assertFalse(byteVector3.equals((Object)byteVector1));
      assertFalse(byteVector3.equals((Object)byteVector0));
      assertNotNull(byteVector3);
      assertNotSame(byteVector3, byteVector2);
      assertNotSame(byteVector3, byteVector1);
      assertNotSame(byteVector3, byteVector0);
      
      label1.addToSubroutine(6, 1);
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label1, label0);
      
      methodWriter0.visitTypeInsn(194, "UPT");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitTryCatchBlock(label0, label1, label1, "UPT");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      label0.outputStackMax = 1;
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs(0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(1000);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean1 = ClassReader.WRITER;
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1000, "UPT", "n$)Y", "n$)Y", (String[]) null, false, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Integer integer0 = new Integer(276);
      assertEquals(276, (int)integer0);
      assertNotNull(integer0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      methodWriter0.visitLabel(label1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label1, label0);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.visitFrame(69, 1402, (Object[]) null, (-241), (Object[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter1.visitLdcInsn("<init>");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(1009);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean1 = ClassReader.ANNOTATIONS;
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "FD#N]se&BsUb+;c_#%", "n$)Y", "FD#N]se&BsUb+;c_#%", (String[]) null, false, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      int int0 = methodWriter0.getSize();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(16, int0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      String string0 = label0.toString();
      assertEquals("L14", string0);
      assertNotNull(string0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      methodWriter0.visitJumpInsn(79, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int[] intArray0 = new int[0];
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-388));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "FD#N]se&Bs@+;c_#%";
      stringArray0[1] = "FD#N]se&Bs@+;c_#%";
      stringArray0[2] = "FD#N]se&Bs@+;c_#%";
      stringArray0[3] = "FD#N]se&Bs@+;c_#%";
      stringArray0[4] = "FD#N]se&Bs@+;c_#%";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 7, "FD#N]se&Bs@+;c_#%", "x};{zn)QFL", "FD#N]se&Bs@+;c_#%", stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Item item0 = classWriter0.newDouble(0.0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      int int0 = methodWriter0.getSize();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(34, int0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "FD#N]se&Bs@+;c_#%");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitJumpInsn((-1447783354), label0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(1000);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean1 = ClassReader.WRITER;
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]se&BsUb+;c_#%", "n$)Y", "UPT", (String[]) null, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      int int0 = methodWriter0.getSize();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(16, int0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      String string0 = label0.toString();
      assertEquals("L13", string0);
      assertNotNull(string0);
      
      methodWriter0.visitJumpInsn(168, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMaxs(168, 168);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(50);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      int int0 = classWriter0.addUninitializedType("rCCY", 185);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "9JaTR+%@0`k2TP";
      stringArray0[1] = "9JaTR+%@0`k2TP";
      stringArray0[2] = "`c[6?7a";
      stringArray0[3] = "`c[6?7a";
      stringArray0[4] = "`c[6?7a";
      stringArray0[5] = "9JaTR+%@0`k2TP";
      stringArray0[6] = "`c[6?7a";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-2601), "9JaTR+%@0`k2TP", "9JaTR+%@0`k2TP", "`c[6?7a", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      methodWriter0.visitInsn(167);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn(50);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame(2, (-2601), stringArray0, (-610), stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-2998));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Label offset position has not been resolved yet", "/6N(|Vl[EF5BZ~hO)ei", "(8 TUgo", stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("uFVq|=#HB}R>x:U@>B8", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitFieldInsn(2622, "java/lang/Object", "AnnotationDefault", "/6N(|Vl[EF5BZ~hO)ei");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLineNumber(2, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMultiANewArrayInsn("AnnotationDefault", 165);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs((-1526), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(982);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = classWriter0.newUTF8("n$)Y");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, int0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]se&BsUb+;c_#%", "n$)Y", "java/lang/Throwable", (String[]) null, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitIntInsn(995, 995);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = methodWriter0.getSize();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(int1 == int0);
      assertEquals(36, int1);
      
      methodWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMethodInsn((-4488), "n$)Y", "java/lang/Throwable", "n$)Y");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.next;
      assertNull(label1);
      
      methodWriter0.visitMultiANewArrayInsn("FD#N]se&BsUb+;c_#%", 36);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitLocalVariable("/", "/", (String) null, label0, (Label) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2998));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Label offset position has not been resolved yet", "/6N(|Vl[EF5BZ~hO)ei", "(8 TUgo", stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("uFVq|=#HB}R>x:U@>B8", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitFrame(1, 2, stringArray0, (-2998), stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1003);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean0 = ClassReader.WRITER;
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-118), "FD#N]se&BsUb+;c_#%", "FD#N]se&BsUb+;c_#%", "FD#N]se&BsUb+;c_#%", (String[]) null, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      int int0 = methodWriter0.getSize();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(28, int0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.classReaderLength = (-1787);
      methodWriter0.visitMethodInsn((-1787), "s*N", "I)L(Qu^2X0=$1Sk", "s*N");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter1.visitLocalVariable("Synthetic", "FD#N]se&BsUb+;c_#%", "I)L(Qu^2X0=$1Sk", label0, label0, (-1582));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2998));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Label offset position has not been resolved yet", "/6N(|Vl[EF5BZ~hO)ei", "(8 TUgo", stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Item item0 = classWriter0.key3;
      assertNotNull(item0);
      
      methodWriter0.visitIntInsn(2, 2622);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitInsn((-2998));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(1003);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      classWriter0.visitSource("FD#N]se&BsUb+;c_#%", "FD#N]se&BsUb+;c_#%");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]se&BsUb+;c_#%", "n$)Y", "FD#N]se&BsUb+;c_#%", (String[]) null, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      String string0 = classWriter0.thisName;
      assertNull(string0);
      
      methodWriter0.visitIntInsn(292552674, 5894);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIincInsn(5894, 292552674);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMethodInsn(186, "E:P`3>!{ANxncLu", "Signature", "RuntimeInvisibleAnnotations");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(1000);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean1 = ClassReader.WRITER;
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "o}5V#:47|J", "n$)Y", "UPT", (String[]) null, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs(168, 168);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(1000);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean1 = ClassReader.WRITER;
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]se&BsUb+;c_#%", "n$)Y", "UPT", (String[]) null, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      label1.line = 1;
      String string0 = label1.toString();
      assertFalse(label1.equals((Object)label0));
      assertEquals("L12", string0);
      assertNotNull(string0);
      assertNotSame(label1, label0);
      
      methodWriter0.visitMultiANewArrayInsn("UPT", (-3418));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UPT");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      methodWriter0.visitJumpInsn(134, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(label0.equals((Object)label1));
      assertNotSame(label0, label1);
      
      String string1 = label0.toString();
      assertFalse(label0.equals((Object)label1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("L11", string1);
      assertNotNull(string1);
      assertNotSame(label0, label1);
      
      methodWriter0.visitTypeInsn(2, "5Qt|jF(pk6PQdx-&");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMaxs(1000, 134);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLineNumber((-2158), label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(label0.equals((Object)label1));
      assertNotSame(label0, label1);
      
      methodWriter0.visitMaxs(2706, 2706);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFrame((-2158), 3, (Object[]) null, (-2158), (Object[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[2] = (byte)10;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)10, (byte)0}, byteArray0);
      
      ClassWriter classWriter0 = new ClassWriter(641);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "car";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 3887, "car", "car", "AnnotationDefault", stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame((byte)0, 1, stringArray0, 1736, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((byte)9);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "short", "Ty&Ueg4F7", "short", stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      int int0 = methodWriter0.getSize();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(34, int0);
      
      methodWriter0.visitFrame(276, 1968, stringArray0, 268435437, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(641);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "car";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 3887, "car", "car", "AnnotationDefault", stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitMaxs(1, 256);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-4);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)4, (byte)1, (byte) (-4)}, byteArray0);
      
      Integer integer0 = new Integer((-507));
      assertEquals((-507), (int)integer0);
      assertNotNull(integer0);
      
      Item item0 = classWriter0.newConstItem(integer0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      methodWriter0.visitIincInsn(252, (-595));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("car", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      Attribute attribute0 = new Attribute("car");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      methodWriter0.visitAttribute(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitCode();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFieldInsn(1, "AnnotationDefault", "car", "LocalVariableTypeTable");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-65);
      byteArray0[3] = (byte)0;
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (byte) (-65), "1aHz", "char", "1aHz", (String[]) null, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitMaxs((byte) (-65), 2585);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-65), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Item item0 = classWriter0.newConstItem("1aHz");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      methodWriter0.visitIincInsn(3268, 1854);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Attribute attribute0 = new Attribute(",OwSl");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      methodWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitCode();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFieldInsn((-1162), ",OwSl", ">:60o31", "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(93);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newInteger(93);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      String[] stringArray0 = new String[6];
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[1] = "";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "", "", stringArray0[5], (String[]) null, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Item item1 = classWriter0.key3;
      assertFalse(item1.equals((Object)item0));
      assertNotNull(item1);
      assertNotSame(item1, item0);
      
      methodWriter0.visitTypeInsn(93, "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLocalVariable("", "TN1N&k/jop", "", label0, label0, 388);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = methodWriter0.getSize();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(65, int0);
      
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      assertEquals((short)5, short0);
      
      short short1 = ObjectStreamConstants.STREAM_MAGIC;
      assertFalse(short1 == short0);
      assertEquals((short) (-21267), short1);
      
      Label label1 = label0.next;
      assertNull(label1);
      
      int int1 = methodWriter0.getSize();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertTrue(int1 == int0);
      assertEquals(65, int1);
      
      // Undeclared exception!
      try { 
        MethodWriter.getNewOffset((int[]) null, (int[]) null, label0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(93);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newInteger(93);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      String[] stringArray0 = new String[6];
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "", "", "", (String[]) null, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.next = methodWriter1;
      methodWriter0.signature = ")Qqu&\".qja^5$(";
      Label label0 = new Label();
      assertNotNull(label0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 93;
      Label[] labelArray0 = new Label[0];
      methodWriter1.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertArrayEquals(new int[] {1, 93}, intArray0);
      assertSame(methodWriter1, methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.next.visitAnnotation("Uu1xjBH_:dz.g#", false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      assertSame(methodWriter0, methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      assertSame(methodWriter0.next, methodWriter1);
      assertSame(methodWriter0.next, methodWriter0);
      
      methodWriter1.visitJumpInsn(32, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.visitTypeInsn(187, "5ysfsc{6]%2=\"',<");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter0.next.visitJumpInsn(1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      assertSame(methodWriter0.next, methodWriter1);
      assertSame(methodWriter0.next, methodWriter0);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitParameterAnnotation(255, "RuntimeVisibleParameterAnnotations", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classWriter0.visitSource("!onstaHtV1aue", "I)L(Qu^J0=$1Sk");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "char";
      stringArray0[1] = "char";
      stringArray0[2] = "char";
      stringArray0[3] = "char";
      int int0 = classWriter0.newConst("#n$)Y");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(3, int0);
      
      stringArray0[4] = "char";
      stringArray0[5] = "char";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "char", "#n$)Y", "#n$)Y", stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      int int1 = Frame.INTEGER;
      assertFalse(int1 == int0);
      assertEquals(16777217, int1);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLocalVariable("#n$)Y", "I)L(Qu^J0=$1Sk", "char", label0, label0, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIincInsn(642, 16777217);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 1;
      Label[] labelArray0 = new Label[26];
      labelArray0[0] = label0;
      labelArray0[1] = label0;
      labelArray0[2] = label0;
      labelArray0[3] = label0;
      labelArray0[4] = label0;
      labelArray0[6] = label0;
      labelArray0[7] = label0;
      // Undeclared exception!
      try { 
        methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(1046);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#Nva]se&BsUb+;c_#%", "($)[", "FD#Nva]se&BsUb+;c_#%", (String[]) null, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      int int0 = Frame.BASE_KIND;
      assertEquals(267386880, int0);
      
      methodWriter0.visitLocalVariable("*H(5+BnI\"y", "*H(5+BnI\"y", "org.objectweb.asm.jip.MethodWriter", label0, label0, 225);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      label1.addToSubroutine(1046, 267386880);
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label1, label0);
      
      label0.position = 2;
      String string0 = label0.toString();
      assertFalse(label0.equals((Object)label1));
      assertEquals("L11", string0);
      assertNotNull(string0);
      assertNotSame(label0, label1);
      
      boolean boolean2 = ClassReader.ANNOTATIONS;
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      methodWriter0.visitJumpInsn(1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(label0.equals((Object)label1));
      assertNotSame(label0, label1);
      
      int int1 = classWriter0.newUTF8("org.objectweb.asm.jip.MethodWriter");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      methodWriter0.visitInsn(2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(4, 267386880, (Object[]) null, (-919), (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(1000);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean1 = ClassReader.WRITER;
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]se&BsUb+;c_#%", "n$)Y", "UPT", (String[]) null, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("[z", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitIincInsn((-554), (-112));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn(183);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      FieldWriter fieldWriter0 = classWriter0.firstField;
      assertNull(fieldWriter0);
      
      classWriter0.firstField = null;
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertNotNull(annotationVisitor1);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      
      methodWriter0.visitVarInsn((byte)0, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn((byte)0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "char";
      stringArray0[1] = "";
      stringArray0[2] = "char";
      stringArray0[3] = "";
      stringArray0[4] = "char";
      stringArray0[5] = "char";
      classWriter0.invalidFrames = true;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-1447783354), "", "#n$)Y", "#n$)Y", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      int int0 = Frame.INTEGER;
      assertEquals(16777217, int0);
      
      methodWriter0.visitMultiANewArrayInsn("", 569);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIntInsn((-1447783354), 154);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = new ByteVector(1);
      assertNotNull(byteVector0);
      
      methodWriter0.visitMaxs(22, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(82);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "car";
      stringArray0[1] = "car";
      stringArray0[2] = "car";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 54, "car", "nK<`Wt", "car", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      int int0 = methodWriter0.getSize();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(30, int0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      label0.addToSubroutine(1, Integer.MAX_VALUE);
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 30;
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      assertArrayEquals(new int[] {2, 30, 0, 0}, intArray0);
      
      methodWriter0.classReaderOffset = 82;
      methodWriter0.visitVarInsn(185, (-1284));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      byte[] byteArray0 = new byte[27];
      label0.addToSubroutine(0L, (-1552464044));
      label0.outputStackMax = 90;
      byteArray0[9] = (byte) (-53);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-54);
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      assertArrayEquals(new int[] {2, 30, 0, 0}, intArray0);
      
      methodWriter0.visitFieldInsn(191, "car", "double", "car");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(1000);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]se&BsUb+;c_#%", "n$)Y", "UPT", (String[]) null, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("[z", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitIincInsn((-554), 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn(183);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      FieldWriter fieldWriter0 = classWriter0.firstField;
      assertNull(fieldWriter0);
      
      classWriter0.firstField = null;
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertNotNull(annotationVisitor1);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      
      methodWriter0.visitFrame((-1584), 2, (Object[]) null, 2124, (Object[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLdcInsn("UPT");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(93);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "", "", "", (String[]) null, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.next = methodWriter1;
      methodWriter0.signature = "";
      methodWriter0.next.visitIntInsn(1, 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter0.next.visitInsn(187);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      AnnotationVisitor annotationVisitor0 = methodWriter1.visitAnnotation("", false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      assertSame(methodWriter1, methodWriter0);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      methodWriter0.visitLdcInsn("");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(1000);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean1 = false;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]se&BsUb+;c_#%", "n$)Y", "UPT", (String[]) null, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      int int0 = Frame.BASE_KIND;
      assertEquals(267386880, int0);
      
      methodWriter0.visitLocalVariable("*H(5+BnI\"y", "*H(5+BnI\"y", "org.objectweb.asm.jip.MethodWriter", label0, label0, 267);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      label1.inputStackTop = 1188;
      String string0 = label1.toString();
      assertFalse(label1.equals((Object)label0));
      assertEquals("L16", string0);
      assertNotNull(string0);
      assertNotSame(label1, label0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitMultiANewArrayInsn("org.objectweb.asm.jip.MethodWriter", 267386880);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector(609);
      assertNotNull(byteVector0);
      
      methodWriter0.put(byteVector0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = 1792;
      // Undeclared exception!
      try { 
        methodWriter0.visitInsn(1792);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1792
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[2] = (byte)0;
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean0 = ClassReader.WRITER;
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]se&BsUb+;c_#%", "FD#N]se&BsUb+;c_#%", "UPT", (String[]) null, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      String string0 = label0.toString();
      assertEquals("L9", string0);
      assertNotNull(string0);
      
      methodWriter0.visitJumpInsn((byte)0, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.visitFieldInsn(2, "L9", "8c3( 8 oh", "n$)Y");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter1.visitLineNumber(213, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.visitFrame(213, (-1267), (Object[]) null, 167, (Object[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      int int0 = methodWriter1.getSize();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(60, int0);
      assertSame(methodWriter1, methodWriter0);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitTableSwitchInsn(7, (-2015), label0, (Label[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]se&BsUb+;c_#%", "n$)Y", "rqL#-cT>", (String[]) null, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      boolean boolean4 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      String string0 = label0.toString();
      assertEquals("L11", string0);
      assertNotNull(string0);
      
      boolean boolean5 = ClassReader.RESIZE;
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5);
      
      methodWriter0.visitFieldInsn((byte)0, "n$)Y", "FD#N]se&BsUb+;c_#%", "L11");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        label0.addToSubroutine((-1180L), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.objectweb.asm.jip.Label", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-388));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = classWriter0.newNameType("FD#N]se&BsUb+;c_#%", "FD#N]se&BsUb+;c_#%");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "FD#N]se&BsUb+;c_#%";
      stringArray0[1] = "FD#N]se&BsUb+;c_#%";
      stringArray0[2] = "FD#N]se&BsUb+;c_#%";
      stringArray0[3] = "FD#N]se&BsUb+;c_#%";
      stringArray0[4] = "FD#N]se&BsUb+;c_#%";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 7, "FD#N]se&BsUb+;c_#%", "x};{zn)QFL", "FD#N]se&BsUb+;c_#%", stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitMethodInsn(7, "FD#N]se&BsUb+;c_#%", "FD#N]se&BsUb+;c_#%", "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter1.visitLocalVariable("hW-KDXFy$2.dGS@i_\"", "L", "L", label0, label0, 7);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1000);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotNull(classWriter1);
      
      boolean boolean0 = ClassReader.WRITER;
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter1, 2, "FD#N]se&BsUb+;c_#%", "java/lang/Class", "n$)Y", (String[]) null, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotNull(methodWriter0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      methodWriter0.visitIincInsn(1, 1000);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotSame(classWriter1, classWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Edge edge1 = edge0.next;
      assertNull(edge1);
      
      methodWriter0.visitIntInsn(17, 4319);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotSame(classWriter1, classWriter0);
      
      // Undeclared exception!
      try { 
        MethodWriter.getNewOffset((int[]) null, (int[]) null, 20, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-286));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-118), "n$)Y", "n$)Y", "n$)Y", (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitCode();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.firstMethod = methodWriter0;
      methodWriter0.classReaderOffset = 192;
      int int0 = methodWriter0.getSize();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(6, int0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitMultiANewArrayInsn("n$)Y", (-118));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitIntInsn((byte)37, (-286));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      MethodWriter methodWriter2 = classWriter0.firstMethod;
      assertNotNull(methodWriter2);
      assertSame(methodWriter2, methodWriter1);
      assertSame(methodWriter2, methodWriter0);
      
      // Undeclared exception!
      try { 
        methodWriter2.visitParameterAnnotation((-286), "n$)Y", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(1000);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean1 = ClassReader.WRITER;
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "UPT";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]se&BsUb+;c_#%", "n$)Y", "UPT", (String[]) null, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UPT");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      methodWriter0.visitJumpInsn(168, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitJumpInsn(12, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitMaxs((-129), 1000);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      String string1 = "RXl$ cX";
      methodWriter1.visitFieldInsn(1, "FD#N]se&BsUb+;c_#%", ".s.IFJDCS", "RXl$ cX");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitLineNumber(168, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitVarInsn((-365), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -365
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "char";
      stringArray0[1] = "char";
      stringArray0[2] = "char";
      stringArray0[3] = "#n$)Y";
      stringArray0[4] = "char";
      stringArray0[5] = "#n$)Y";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-1447783354), "char", "#n$)Y", "#n$)Y", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      int[] intArray0 = new int[7];
      intArray0[2] = 2;
      intArray0[2] = 2;
      intArray0[5] = 192;
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitMultiANewArrayInsn("#n$)Y", 192);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame(2, (-1447783354), stringArray0, 268435471, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLdcInsn("char");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      methodWriter0.visitLdcInsn(integer0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Label label0 = edge0.successor;
      assertNull(label0);
      
      short short0 = MethodWriter.readShort(byteArray0, 0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1009);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      boolean boolean0 = true;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "FD#N]se&BsUb+;c_#%", "n$)Y", "FD#N]se&BsUb+;c_#%", (String[]) null, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      String string0 = label0.toString();
      assertEquals("L13", string0);
      assertNotNull(string0);
      
      label0.status = 1;
      String string1 = label0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals("L13", string1);
      assertNotNull(string1);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "FD#N]se&BsUb+;c_#%");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      label0.line = 1;
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs(92, 92);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "char";
      stringArray0[1] = "char";
      stringArray0[2] = "char";
      stringArray0[3] = "#n$)Y";
      stringArray0[4] = "char";
      stringArray0[5] = "#n$)Y";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-1447783354), "char", "#n$)Y", "#n$)Y", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      int[] intArray0 = new int[7];
      intArray0[2] = 2;
      intArray0[2] = 2;
      intArray0[6] = 192;
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitMultiANewArrayInsn("#n$)Y", 192);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLdcInsn("char");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Integer integer0 = new Integer(192);
      assertEquals(192, (int)integer0);
      assertNotNull(integer0);
      
      methodWriter0.visitLdcInsn(integer0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMultiANewArrayInsn("RuntimeVisibleAnnotations", (-1447783354));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFieldInsn(2, "#n$)Y", "#n$)Y", "*#{-o / \"EWa,");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(1000);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean1 = ClassReader.WRITER;
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]se&BsUb+;c_#%", "n$)Y", "UPT", (String[]) null, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitMaxs(168, 168);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIincInsn((-554), (-112));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = classWriter0.newNameType("UPT", "n$)Y");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(4, int0);
      
      methodWriter0.visitInsn(183);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitVarInsn(197, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitVarInsn(82, 2585);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMultiANewArrayInsn("j 5zVSx}^ ZM~3Ich^:", (-112));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      methodWriter0.put(byteVector0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitVarInsn(22, (-1908));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(1005);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "[;NrI";
      stringArray0[1] = "#n$)Y";
      stringArray0[2] = "4FksejGF8GHWM";
      stringArray0[3] = "#n$)Y";
      stringArray0[4] = "#n$)Y";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "#n$)Y", "#n$)Y", "[;NrI", stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitMultiANewArrayInsn("dC&oXPg", 4773);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector(2);
      assertNotNull(byteVector0);
      
      methodWriter0.put(byteVector0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitInsn(167);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitVarInsn(169, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Attribute attribute0 = new Attribute("#n$)Y");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      methodWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Frame.DIM;
      assertEquals((-268435456), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 167;
      int int1 = MethodWriter.getNewOffset(intArray0, intArray0, (-1515), 987);
      assertFalse(int1 == int0);
      assertEquals(2669, int1);
      assertArrayEquals(new int[] {167, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(1046);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#Nva]se&BsUb;c_#%", "($)[", "FD#Nva]se&BsUb;c_#%", (String[]) null, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      int int0 = Frame.BASE_KIND;
      assertEquals(267386880, int0);
      
      methodWriter0.visitLocalVariable("*H(5+BnI\"y", "*H(5+BnI\"y", "org.objectweb.asm.jip.MethodWritr", label0, label0, 225);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      label0.position = 2;
      Label label2 = new Label();
      assertFalse(label2.equals((Object)label0));
      assertFalse(label2.equals((Object)label1));
      assertNotNull(label2);
      
      label1.info = (Object) 267386880;
      Label[] labelArray0 = new Label[3];
      labelArray0[0] = label1;
      labelArray0[1] = label0;
      Frame frame0 = new Frame();
      assertNotNull(frame0);
      
      frame0.inputLocals = null;
      labelArray0[2] = label2;
      methodWriter0.visitTableSwitchInsn(54, 68, label2, labelArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(label2.equals((Object)label0));
      assertFalse(label2.equals((Object)label1));
      assertNotSame(label2, label0);
      assertNotSame(label2, label1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(1000);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (byte)0, "#n$)Y", "#n$)Y", "9DQzm$", (String[]) null, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      int int0 = Frame.INTEGER;
      assertEquals(16777217, int0);
      
      ByteVector byteVector0 = new ByteVector(1000);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put12(2, 1000);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      int int1 = 191;
      methodWriter0.visitInsn(191);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitVarInsn((byte)0, (byte)0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      // Undeclared exception!
      try { 
        label0.getOffset();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Label offset position has not been resolved yet
         //
         verifyException("org.objectweb.asm.jip.Label", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(641);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "car";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 3887, "car", "car", "car", stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitMaxs(1, 256);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = 251;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "car");
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(3887);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(3887, (int)integer0);
      assertNotNull(integer0);
      
      Item item0 = classWriter0.newConstItem(integer0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(item0);
      
      methodWriter0.visitIincInsn(251, (-595));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Attribute attribute0 = new Attribute("car");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      methodWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitCode();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMultiANewArrayInsn("v%oicfXfU4_~+.&vM", 642);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector(22);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put11(197, (-842));
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      // Undeclared exception!
      try { 
        methodWriter0.put(byteVector1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(1000);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String string0 = "UPT";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]se&BsUb+;c_#%", "n$)Y", "UPT", (String[]) null, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      int int0 = Frame.BASE_KIND;
      assertEquals(267386880, int0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "ODXS 0I(}/*V7");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(label0.equals((Object)label1));
      assertNotSame(label0, label1);
      
      methodWriter0.visitJumpInsn(2, label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label1, label0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      methodWriter0.visitMaxs(1, 1961);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string1 = null;
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitParameterAnnotation(267386880, "n$)Y", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("char", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "char";
      stringArray0[1] = "char";
      classWriter0.thisName = "char";
      stringArray0[2] = "char";
      stringArray0[3] = "char";
      int int0 = classWriter0.newConst("char");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(2, int0);
      
      stringArray0[4] = "char";
      stringArray0[5] = "I)L(Qu^J0=$1Sk";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 3129, "char", "I)L(Qu^J0=$1Sk", "I)L(Qu^J0=$1Sk", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitVarInsn(52, (-4244));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMultiANewArrayInsn("char", 642);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIincInsn(2625, 642);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn(176);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      FieldWriter fieldWriter0 = classWriter0.firstField;
      assertNull(fieldWriter0);
      
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertNotNull(annotationVisitor1);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        MethodWriter.readShort(byteArray1, 52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(1000);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String string0 = "n$)Y";
      boolean boolean1 = false;
      String[] stringArray0 = null;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]se&BsUb+;c_#%", "n$)Y", "UPT", (String[]) null, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      String string1 = label0.toString();
      assertFalse(label0.equals((Object)label1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("L11", string1);
      assertNotNull(string1);
      assertNotSame(label0, label1);
      
      boolean boolean2 = ClassReader.RESIZE;
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      label1.outputStackMax = 1;
      methodWriter0.visitJumpInsn(1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(label0.equals((Object)label1));
      assertNotSame(label0, label1);
      
      label0.line = 1;
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("4C?UEMMIM", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      ByteVector byteVector0 = new ByteVector(2);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putLong(1000);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      Label label2 = label0.getFirst();
      assertFalse(label2.equals((Object)label1));
      assertFalse(label0.equals((Object)label1));
      assertNotNull(label2);
      assertSame(label2, label0);
      assertNotSame(label2, label1);
      assertNotSame(label0, label1);
      assertSame(label0, label2);
      
      methodWriter0.visitTryCatchBlock(label0, label1, label2, ".jar");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(label2.equals((Object)label1));
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label2));
      assertFalse(label1.equals((Object)label0));
      assertSame(label2, label0);
      assertNotSame(label2, label1);
      assertNotSame(label0, label1);
      assertSame(label0, label2);
      assertNotSame(label1, label2);
      assertNotSame(label1, label0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs(183, 2312);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ClassWriter classWriter0 = new ClassWriter(1000);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      classWriter0.visitInnerClass("n$)Y", "UPT", "org.objectweb.asm.jip.MethodWriter", 933);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]se&BsUb+;c_#%", "n$)Y", "UPT", (String[]) null, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      int int0 = Frame.BASE_KIND;
      assertEquals(267386880, int0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Item item0 = classWriter0.key3;
      assertNotNull(item0);
      
      methodWriter0.visitTypeInsn(2, "E*l_,@");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMaxs(54, 267386880);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.thisName = "UPT";
      methodWriter0.visitLocalVariable("E*l_,@", "E*l_,@", "?IP?yqnc#]Sp=V)Q.", label0, label0, 1000);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int1 = methodWriter0.getSize();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(int1 == int0);
      assertEquals(73, int1);
      
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      assertEquals((short)5, short0);
      
      short short1 = ObjectStreamConstants.STREAM_MAGIC;
      assertFalse(short1 == short0);
      assertEquals((short) (-21267), short1);
      
      Label label1 = label0.next;
      assertNull(label1);
      
      methodWriter0.visitFieldInsn((short) (-21267), "UPT", "Ljava/lang/Synthetic;", "UPT");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLocalVariable("Ljava/lang/Synthetic;", "?IP?yqnc#]Sp=V)Q.", "n$)Y", label0, label0, (short) (-21267));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(1005);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean1 = ClassReader.WRITER;
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]se&BsUb+;c_#%", "n$Il)Y", "FD#N]se&BsUb+;c_#%", (String[]) null, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitFrame(1660, (byte)0, (Object[]) null, (-115), (Object[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = methodWriter0.getSize();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(16, int0);
      
      Item item0 = classWriter0.newDouble(1005);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      methodWriter0.visitIincInsn((-115), (-112));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.exceptionCount = 1005;
      classWriter0.version = 1660;
      Object object0 = new Object();
      assertNotNull(object0);
      
      methodWriter0.visitFrame(1005, 49, (Object[]) null, 1, (Object[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int1 = methodWriter0.getSize();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(int1 == int0);
      assertEquals(2063, int1);
      
      // Undeclared exception!
      try { 
        MethodWriter.writeShort(byteArray0, (-605), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -605
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(93);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[20];
      stringArray0[0] = stringArray0[4];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "05o[8_2EA)`n", "05o[8_2EA)`n", stringArray0[5], (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.next = methodWriter0;
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      methodWriter0.put(byteVector0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(93);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = stringArray0[4];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "05o[8_2EA)`n", "05o[8_2EA)`n", stringArray0[5], (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.next = methodWriter0;
      AnnotationVisitor annotationVisitor0 = methodWriter0.next.visitAnnotation("StkMapTable", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      methodWriter0.put(byteVector0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(93);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = stringArray0[4];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "", "", stringArray0[5], (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.next = methodWriter1;
      methodWriter1.visitInsn(2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.next.visitAnnotation("StkMapTable", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      assertSame(methodWriter0, methodWriter1);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      methodWriter1.put(byteVector0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame((byte) (-1), (byte)44, stringArray0, 187, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(1046);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#Nva]se&BsUb+;c_#%", "($)[", "FD#Nva]se&BsUb+;c_#%", (String[]) null, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      int int0 = Frame.BASE_KIND;
      assertEquals(267386880, int0);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("($)[", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitLocalVariable("*H(5+BnI\"y", "*H(5+BnI\"y", "org.objectweb.asm.jip.MethodWriter", label0, label0, 225);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      label1.status = 92;
      label1.addToSubroutine(1046, 267386880);
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label1, label0);
      
      label1.info = (Object) 1046;
      label1.info = (Object) (-1773);
      label0.position = 2;
      String string0 = label0.toString();
      assertFalse(label0.equals((Object)label1));
      assertEquals("L11", string0);
      assertNotNull(string0);
      assertNotSame(label0, label1);
      
      boolean boolean1 = ClassReader.ANNOTATIONS;
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.objectweb.asm.jip.MethodWriter");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      methodWriter0.visitJumpInsn(1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(label0.equals((Object)label1));
      assertNotSame(label0, label1);
      
      int int1 = classWriter0.newUTF8("org.objectweb.asm.jip.MethodWriter");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      methodWriter0.visitFieldInsn(2, "`j|y>?]L7o={SN,=", ")Qqu&\".qja^5$(", "J96@,]\"UgiBk='kV");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitTypeInsn(16777228, "($)[");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(77);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[20];
      stringArray0[2] = "";
      stringArray0[4] = "";
      stringArray0[1] = "";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "", "", stringArray0[5], (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.next = methodWriter1;
      methodWriter0.signature = "";
      int int0 = Frame.ARRAY_OF;
      assertEquals(268435456, int0);
      
      methodWriter0.next.visitIntInsn(1, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
      
      // Undeclared exception!
      try { 
        methodWriter0.next.visitFrame(1, 191, stringArray0, 191, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("char", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "char";
      stringArray0[1] = "char";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      stringArray0[2] = "char";
      stringArray0[3] = "char";
      int int0 = classWriter0.newConst("char");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(2, int0);
      
      stringArray0[4] = "char";
      stringArray0[5] = "char";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 3115, "char", "I)L(Qu^X0=$1Sk", "I)L(Qu^X0=$1Sk", stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitVarInsn(52, (-4212));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.lastMethod = methodWriter0;
      methodWriter0.visitMaxs(14, (-4212));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "char";
      stringArray0[1] = "I)L(Qu^X0=$1Sk";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      stringArray0[2] = "I)L(Qu^X0=$1Sk";
      stringArray0[3] = "I)L(Qu^X0=$1Sk";
      int int0 = classWriter0.newConst("char");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, int0);
      
      stringArray0[4] = "char";
      stringArray0[5] = "char";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 3115, "char", "I)L(Qu^X0=$1Sk", "I)L(Qu^X0=$1Sk", stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      ByteVector byteVector0 = new ByteVector(1);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putLong(2);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      label0.put(methodWriter0, byteVector1, (-1880), false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      label0.addToSubroutine(Integer.MAX_VALUE, Integer.MAX_VALUE);
      ByteVector byteVector2 = classWriter0.pool;
      assertFalse(byteVector2.equals((Object)byteVector0));
      assertFalse(byteVector2.equals((Object)byteVector1));
      assertNotNull(byteVector2);
      assertNotSame(byteVector2, byteVector0);
      assertNotSame(byteVector2, byteVector1);
      
      ByteVector byteVector3 = byteVector0.putByte(1);
      assertFalse(byteVector3.equals((Object)byteVector2));
      assertFalse(byteVector0.equals((Object)byteVector2));
      assertNotNull(byteVector3);
      assertSame(byteVector3, byteVector1);
      assertNotSame(byteVector3, byteVector2);
      assertSame(byteVector3, byteVector0);
      assertSame(byteVector0, byteVector3);
      assertNotSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      
      methodWriter0.visitTypeInsn((-1880), "char");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "c");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMaxs(131072, (-1509));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitIntInsn((-1509), 1425);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = (-388);
      ClassWriter classWriter0 = new ClassWriter((-388));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "x};{zn)QFL";
      stringArray0[1] = "n$)Y";
      stringArray0[2] = "n$)Y";
      stringArray0[3] = "FD#N]se&BsUb+;c_#%";
      stringArray0[4] = "n$)Y";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 19, "FD#N]se&BsUb+;c_#%", "x};{zn)QFL", "FD#N]se&BsUb+;c_#%", stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("n$)Y", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      int int1 = (-112);
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      methodWriter0.visitLocalVariable("StackMapTable", "D\"u|rUAw8-", (String) null, label0, label1, 19);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      boolean boolean0 = ClassReader.WRITER;
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      Edge edge0 = label0.successors;
      assertNull(edge0);
      
      Label label2 = label1.next;
      assertNull(label2);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitVarInsn(1241579778, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(1000);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String string0 = "UPT";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]se&BsUb+;c_#%", "n$)Y", "UPT", (String[]) null, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      String string1 = label0.toString();
      assertFalse(label0.equals((Object)label1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("L12", string1);
      assertNotNull(string1);
      assertNotSame(label0, label1);
      
      int int0 = classWriter0.newField("n$)Y", "UPT", "FD#N]se&BsUb+;c_#%");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(6, int0);
      
      boolean boolean1 = ClassReader.RESIZE;
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      label1.outputStackMax = 6;
      ByteVector byteVector0 = new ByteVector(2);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putUTF8("n$)Y");
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      ByteVector byteVector2 = byteVector0.putLong(2);
      assertNotNull(byteVector2);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
      
      ByteVector byteVector3 = classWriter0.pool;
      assertFalse(byteVector3.equals((Object)byteVector0));
      assertFalse(byteVector3.equals((Object)byteVector2));
      assertFalse(byteVector3.equals((Object)byteVector1));
      assertNotNull(byteVector3);
      assertNotSame(byteVector3, byteVector0);
      assertNotSame(byteVector3, byteVector2);
      assertNotSame(byteVector3, byteVector1);
      
      label1.addToSubroutine(6, 1);
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label1, label0);
      
      methodWriter0.visitIincInsn(256, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector4 = byteVector2.putByte(247);
      assertFalse(byteVector4.equals((Object)byteVector3));
      assertFalse(byteVector0.equals((Object)byteVector3));
      assertFalse(byteVector2.equals((Object)byteVector3));
      assertNotNull(byteVector4);
      assertSame(byteVector4, byteVector2);
      assertNotSame(byteVector4, byteVector3);
      assertSame(byteVector4, byteVector1);
      assertSame(byteVector4, byteVector0);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector4);
      assertSame(byteVector0, byteVector1);
      assertNotSame(byteVector0, byteVector3);
      assertSame(byteVector2, byteVector1);
      assertNotSame(byteVector2, byteVector3);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector4);
      
      methodWriter0.visitTypeInsn(2507, "UPT");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitTryCatchBlock(label1, label0, label0, (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      int int1 = 210;
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs(210, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(41);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[3];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      stringArray0[0] = "Zp`NPS$-m>?arP(5eI";
      stringArray0[1] = "Zp`NPS$-m>?arP(5eI";
      stringArray0[2] = "Zp`NPS$-m>?arP(5eI";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Zp`NPS$-m>?arP(5eI", "Zp`NPS$-m>?arP(5eI", "Zp`NPS$-m>?arP(5eI", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      byte[] byteArray0 = ClassWriter.TYPE;
      assertNotNull(byteArray0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Attribute attribute0 = new Attribute("M:0IXK%/v/$^");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      classWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitTypeInsn(41, "f[(^/XLwnOvsQ@");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFieldInsn((-3022), "Zp`NPS$-m>?arP(5eI", "Zp`NPS$-m>?arP(5eI", "Zp`NPS$-m>?arP(5eI");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIntInsn(1, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitIincInsn((-2316), 66);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIntInsn(3, 66);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame((-1), 1, stringArray0, 255, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(1003);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean1 = ClassReader.WRITER;
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]se&BsUb+;c_#%", "n$)Y", "FD#N]se&BsUb+;c_#%", (String[]) null, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      String string0 = classWriter0.thisName;
      assertNull(string0);
      
      label0.addToSubroutine(1, 292552674);
      methodWriter0.visitTypeInsn(186, "ArH&");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Frame frame0 = new Frame();
      assertNotNull(frame0);
      
      methodWriter0.visitJumpInsn(1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLineNumber(179, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "n$)Y");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIntInsn(65280, (byte)69);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      methodWriter0.put(byteVector0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Label label1 = edge0.successor;
      assertNull(label1);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitJumpInsn(1003, (Label) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1003
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ClassWriter classWriter0 = new ClassWriter((byte)0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean0 = classWriter0.invalidFrames;
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "char";
      stringArray0[1] = "char";
      stringArray0[2] = "char";
      stringArray0[3] = "char";
      stringArray0[4] = "char";
      stringArray0[5] = "!o)sta{n]V|-Je";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "!o)sta{n]V|-Je", "#n$)Y", "#n$)Y", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      methodWriter0.visitMultiANewArrayInsn("char", 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      methodWriter0.visitMultiANewArrayInsn("!o)sta{n]V|-Je", 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.newField("char", "!o)sta{n]V|-Je", "Y");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(8, int0);
      
      methodWriter0.visitFieldInsn(1, "!o)sta{n]V|-Je", " Fv_", "Code");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newNameTypeItem("Code", "char");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      int int1 = Frame.SHORT;
      assertFalse(int1 == int0);
      assertEquals(16777228, int1);
      
      AnnotationVisitor annotationVisitor1 = classWriter0.visitAnnotation("Code", false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertNotNull(annotationVisitor1);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      
      int int2 = methodWriter0.getSize();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(71, int2);
      
      methodWriter0.visitLocalVariable("char", "Code", "char", label0, label0, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int3 = MethodWriter.readInt(byteArray0, 2);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int4 = MethodWriter.readInt(byteArray0, 0);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals(0, int4);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label1, label0);
      assertSame(label0, label1);
      
      methodWriter0.visitInsn(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMethodInsn(185, (String) null, "#n$)Y", "Signature");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(2226);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "FD#N]se&BsUb+-c_o%", "n$)Y", "n$)Y", (String[]) null, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      String string0 = label0.toString();
      assertEquals("L11", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[16];
      label0.visitSubroutine(label0, 1, 2);
      byteArray0[2] = (byte) (-114);
      classWriter0.thisName = "L11";
      boolean boolean1 = label0.resolve(methodWriter0, (byte) (-114), byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      methodWriter0.visitMultiANewArrayInsn("n$)Y", (-3418));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean2 = classWriter0.invalidFrames;
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = ClassReader.SIGNATURES;
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "L11");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitJumpInsn(146, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMaxs(2226, 146);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFrame(1064, 1, (Object[]) null, (-182), (Object[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = methodWriter0.getSize();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(57, int0);
      
      methodWriter0.visitJumpInsn(2, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMethodInsn(54, "L11", "n$)Y", "n$)Y");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation((-76), "FD#N]se&BsUb+-c_o%", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(77);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[31];
      stringArray0[2] = "G";
      stringArray0[4] = "G";
      stringArray0[1] = "G";
      Item item0 = new Item(77);
      assertNotNull(item0);
      
      item0.set(0L);
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "G", "LfI_)2=I[7(vlF=Ffu<", "G", stringArray1, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(methodWriter0);
      
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "Ki /}JE|", "", "LfI_)2=I[7(vlF=Ffu<", (Object) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(fieldWriter0);
      
      classWriter0.firstField = fieldWriter0;
      methodWriter0.visitFrame(1074, 1, stringArray1, (-1360), (Object[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) item0;
      objectArray0[1] = (Object) "G";
      objectArray0[2] = (Object) classWriter0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "G";
      objectArray0[5] = (Object) "LfI_)2=I[7(vlF=Ffu<";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) item0;
      methodWriter0.visitFrame(3, 1, (Object[]) null, (-857), objectArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = Frame.ARRAY_OF;
      assertEquals(268435456, int0);
      
      methodWriter0.visitCode();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(731);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "FD#N]se&Bs@;c_#%";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      classWriter0.visitInnerClass("0$", " ", "Ljava/lang/Synthetic;", 731);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("'nWi^RO:=KIg(");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      methodWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) methodWriter0;
      objectArray0[2] = (Object) "FD#N]se&Bs@;c_#%";
      boolean boolean0 = ClassReader.WRITER;
      assertTrue(boolean0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      label1.status = 1;
      methodWriter0.visitLabel(label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label1, label0);
      
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("'nWi^RO:=KIg(");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }
}
