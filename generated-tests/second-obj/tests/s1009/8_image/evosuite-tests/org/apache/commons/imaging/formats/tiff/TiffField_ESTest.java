/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:33:10 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.util.regex.Pattern;
import org.apache.commons.imaging.formats.tiff.TiffElement;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeFloat;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeRational;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffField_ESTest extends TiffField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(17, (-1), fieldTypeByte0, 17, 17, (byte[]) null, byteOrder0, 17);
      int int0 = tiffField0.getDirectoryType();
      assertEquals((-1), int0);
      assertEquals(17, tiffField0.getBytesLength());
      assertEquals(17, tiffField0.getOffset());
      assertEquals(17, tiffField0.getTag());
      assertEquals(17, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1, 65535, fieldTypeByte0, 1685L, 1, byteArray0, byteOrder0, 65535);
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [B cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((byte)18, (byte)18, (FieldType) null, (byte)18, (-520L), byteArray0, byteOrder0, 3208);
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null, "93c{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte) (-45);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(41, 41, fieldTypeAscii0, 41, 41, byteArray0, byteOrder0, (-778));
      String string0 = tiffField0.getValueDescription();
      assertEquals(41, tiffField0.getBytesLength());
      assertEquals(41, tiffField0.getTag());
      assertNotNull(string0);
      assertEquals(41, tiffField0.getDirectoryType());
      assertEquals(41, tiffField0.getOffset());
      assertEquals((-778), tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[277];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(357, (byte) (-40), fieldTypeDouble0, 2788, (byte) (-1), byteArray0, byteOrder0, 20);
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [D cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-2128), (-808), fieldTypeDouble0, (-808), (-2128), byteArray0, byteOrder0, (-2128));
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement((-808), (-2128));
      tiffField0.getFieldTypeName();
      assertEquals((-2128), tiffField0.getOffset());
      assertEquals((-808), tiffField0.getDirectoryType());
      assertEquals((-2128), tiffField0.getTag());
      assertEquals((-2128), tiffField0.getSortHint());
      assertEquals((-6464), tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(1487, "b@$=qLkga*~9?uT&R");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(279, 1487, fieldTypeDouble0, 279, 682752L, byteArray0, byteOrder0, 279);
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [D@78de93c9 for: 279 (0x117: PreviewImageLength): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-3748), (-3748), fieldTypeByte0, (-3748), (-3748), byteArray0, byteOrder0, (-3748));
      String string0 = tiffField0.getTagName();
      assertEquals((-3748), tiffField0.getOffset());
      assertEquals((-3748), tiffField0.getSortHint());
      assertEquals((-3748), tiffField0.getDirectoryType());
      assertEquals("Unknown Tag (0xfffff15c)", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeByte0, 1, 1, byteArray0, byteOrder0, 279);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      Pattern.quote("java.lang.Byte@0000000002");
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertNull(tiffElement0);
      
      long long0 = tiffField0.getCount();
      assertEquals(1, tiffField0.getBytesLength());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(279, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(1L, long0);
      assertEquals(1, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-1934), 99, fieldTypeByte0, 99, (-2723L), byteArray0, byteOrder0, (-1934));
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [B@34b95545
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-2128), (-808), fieldTypeDouble0, (-808), (-2128), byteArray0, byteOrder0, (-2128));
      ByteOrder.nativeOrder();
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement((-808), (-2128));
      String string0 = tiffField_OversizeValueElement0.getElementDescription();
      assertEquals((-2128), tiffField0.getSortHint());
      assertEquals((-2128), tiffField0.getTag());
      assertEquals((-808), tiffField0.getDirectoryType());
      assertEquals("OversizeValueElement, tag: Unknown Tag, fieldType: Double", string0);
      assertEquals((-2128), tiffField0.getOffset());
      assertEquals((-808L), tiffField0.getCount());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[159];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      TiffField tiffField0 = new TiffField(40, (byte)62, fieldTypeByte0, 32L, (byte)62, byteArray0, byteOrder0, 40);
      String string0 = tiffField0.getValueDescription();
      assertEquals(62, tiffField0.getDirectoryType());
      assertNotNull(string0);
      assertEquals("0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0", string0);
      assertEquals(62, tiffField0.getOffset());
      assertEquals(40, tiffField0.getSortHint());
      assertEquals(40, tiffField0.getTag());
      assertEquals(32L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = new FieldTypeLong(519, "JPEGDCTables");
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-2694), (-2694), fieldTypeLong0, 0L, 1L, byteArray0, byteOrder0, (-2694));
      tiffField0.getIntArrayValue();
      assertEquals((-2694), tiffField0.getTag());
      assertEquals((-2694), tiffField0.getSortHint());
      assertEquals((-2694), tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(0, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[219];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(73, 73, fieldTypeDouble0, 73, (-1292L), byteArray0, byteOrder0, 73);
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [D@2df5c3d2 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[225];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder.nativeOrder();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(227, 227, fieldTypeDouble0.SSHORT, 227, (-2147483648L), byteArray0, byteOrder0, (-2327));
      String string0 = tiffField0.getValueDescription();
      assertEquals((-2327), tiffField0.getSortHint());
      assertEquals(Integer.MIN_VALUE, tiffField0.getOffset());
      assertEquals(454, tiffField0.getBytesLength());
      assertEquals(227, tiffField0.getTag());
      assertEquals(227L, tiffField0.getCount());
      assertNotNull(string0);
      assertEquals(227, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeShort fieldTypeShort0 = new FieldTypeShort((-1133), "IFD1");
      TiffField tiffField0 = new TiffField(47, 2513, fieldTypeShort0, (-2147483648L), 47, byteArray0, byteOrder0, (-1133));
      assertEquals(0, tiffField0.getBytesLength());
      
      String string0 = tiffField0.getValueDescription();
      assertEquals((-2147483648L), tiffField0.getCount());
      assertNotNull(string0);
      assertEquals(47, tiffField0.getTag());
      assertEquals(47, tiffField0.getOffset());
      assertEquals(2513, tiffField0.getDirectoryType());
      assertEquals((-1133), tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[159];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      int int0 = 3;
      int int1 = 51009;
      TiffField tiffField0 = new TiffField(51009, (-2515), fieldTypeRational0, 51009, 476L, byteArray0, byteOrder0, 3);
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      TiffField tiffField0 = new TiffField((byte)0, (byte)0, fieldTypeRational0, (byte)0, 17L, byteArray0, byteOrder0, (byte)0);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = tiffField0.getSortHint();
      assertEquals(0, int0);
      
      tiffField0.getIntArrayValue();
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(17, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)40;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(4307, 1282, fieldTypeByte0, 1282, 1282, byteArray0, byteOrder0, 50);
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertNotNull(tiffElement0);
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(1282, tiffField0.getDirectoryType());
      assertEquals(1282L, tiffElement0.offset);
      assertEquals(4307, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(18, 42, fieldTypeLong0, (byte)88, (-252L), byteArray0, byteOrder0, (byte)88);
      String string0 = tiffField0.getValueDescription();
      assertEquals(18, tiffField0.getTag());
      assertEquals(88, tiffField0.getSortHint());
      assertEquals((-252), tiffField0.getOffset());
      assertEquals(42, tiffField0.getDirectoryType());
      assertNotNull(string0);
      assertEquals(88L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)20;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(10, 4725, fieldTypeShort0, 4725, 4725, byteArray0, byteOrder0, (byte)20);
      int[] intArray0 = tiffField0.getIntArrayValue();
      assertEquals(4725, tiffField0.getOffset());
      assertEquals(10, tiffField0.getTag());
      assertEquals(20, tiffField0.getSortHint());
      assertEquals(4725L, tiffField0.getCount());
      assertArrayEquals(new int[] {28430, 5263}, intArray0);
      assertEquals(4725, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[4];
      TiffField tiffField0 = new TiffField(1733, 0, fieldTypeLong0, 408L, 2559L, byteArray0, byteOrder0, (byte)0);
      tiffField0.getIntValueOrArraySum();
      tiffField0.getFieldTypeName();
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(1733, tiffField0.getTag());
      assertEquals(2559, tiffField0.getOffset());
      assertEquals(408L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((byte)1, 1451, fieldTypeRational0, (byte)1, (-2489L), byteArray0, byteOrder0, (byte)0);
      tiffField0.getIntValueOrArraySum();
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(1, tiffField0.getTag());
      assertEquals((-2489), tiffField0.getOffset());
      assertEquals(1451, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)34;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(925, 925, fieldTypeFloat0, 925, (-4671L), byteArray0, byteOrder0, (byte)34);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      int int0 = tiffField0.getOffset();
      assertEquals(925, tiffField0.getDirectoryType());
      assertEquals(34, tiffField0.getSortHint());
      assertEquals(925, tiffField0.getTag());
      assertEquals(925L, tiffField0.getCount());
      assertEquals((-4671), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((byte)21, (byte) (-1), fieldTypeLong0.FLOAT, 2513, (byte)21, byteArray0, byteOrder0, 1308);
      tiffField0.getValueDescription();
      try { 
        FieldType.getFieldType((byte)0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Field type 0 is unsupported
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[11];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(100, 100, fieldTypeByte0, 100, 100, byteArray0, byteOrder0, (-2440));
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@55025330 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)25;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-30);
      TiffField tiffField0 = new TiffField((-137), 31, fieldTypeFloat0, 33744L, (-867L), byteArray0, (ByteOrder) null, (byte) (-30));
      tiffField0.getDoubleArrayValue();
      assertEquals((-30), tiffField0.getSortHint());
      assertEquals((-867), tiffField0.getOffset());
      assertEquals((-137), tiffField0.getTag());
      assertEquals(33744L, tiffField0.getCount());
      assertEquals(31, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[277];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(27, 27, fieldTypeDouble0, 4218, 1118, byteArray0, byteOrder0, 1118);
      ByteOrder.nativeOrder();
      Object object0 = new Object();
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      String string0 = File.pathSeparator;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":");
      mockPrintWriter0.append('c');
      tiffField0.getDoubleArrayValue();
      assertEquals(27, tiffField0.getDirectoryType());
      assertEquals(4218L, tiffField0.getCount());
      assertEquals(1118, tiffField0.getSortHint());
      assertEquals(27, tiffField0.getTag());
      assertEquals(1118, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      byte[] byteArray0 = new byte[0];
      TiffField tiffField0 = new TiffField(318, 318, fieldTypeAscii0, 318, 318, byteArray0, (ByteOrder) null, 318);
      String string0 = tiffField0.getTagName();
      assertEquals(318, tiffField0.getTag());
      assertEquals("WhitePoint", string0);
      assertEquals(318, tiffField0.getOffset());
      assertEquals(318, tiffField0.getSortHint());
      assertEquals(318, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[219];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(4237, 73, fieldTypeDouble0, 73, (-1315L), byteArray0, byteOrder0, 73);
      tiffField0.getValueDescription();
      int int0 = Pattern.DOTALL;
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)46;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte) (-103);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(22, 22, fieldTypeByte0, 1L, 22, byteArray0, byteOrder0, 18);
      assertEquals(1L, tiffField0.getCount());
      
      tiffField0.getIntArrayValue();
      assertEquals(22, tiffField0.getDirectoryType());
      assertEquals(22, tiffField0.getTag());
      assertEquals(22, tiffField0.getOffset());
      assertEquals(18, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-85);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((byte)0, 1451, fieldTypeRational0, (byte)0, (-2489L), byteArray0, byteOrder0, (byte)0);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(0, tiffField0.getTag());
      assertEquals(1451, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-2489), tiffField0.getOffset());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[330];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1103, 33, fieldTypeRational0, 334L, 2748L, byteArray0, byteOrder1, 2994);
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-70);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(27, 27, fieldTypeLong0, 27, 8L, byteArray0, byteOrder0, (-37));
      tiffField0.getDoubleArrayValue();
      assertEquals(8, tiffField0.getOffset());
      assertEquals(27, tiffField0.getDirectoryType());
      assertEquals((-37), tiffField0.getSortHint());
      assertEquals(27, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[115];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      ByteOrder byteOrder2 = ByteOrder.BIG_ENDIAN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(12, 9, fieldTypeShort0, 3457, 9, byteArray0, byteOrder2, 9);
      String string0 = tiffField0.getDescriptionWithoutValue();
      assertEquals("12 (0xc: Unknown Tag): ", string0);
      
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(9, tiffField0.getDirectoryType());
      assertEquals(9, tiffField0.getSortHint());
      assertEquals(9, tiffField0.getOffset());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      int int0 = Short.SIZE;
      TiffField tiffField0 = new TiffField(4069, 16, fieldTypeShort0, 4069, 4069, byteArray0, byteOrder0, (-1232));
      tiffField0.getByteArrayValue();
      byteOrder0.toString();
      tiffField0.getDoubleArrayValue();
      assertEquals(4069, tiffField0.getOffset());
      assertEquals(16, tiffField0.getDirectoryType());
      assertEquals(4069, tiffField0.getTag());
      assertEquals((-1232), tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = new FieldTypeFloat(1, "");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)24;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)38;
      byteArray1[1] = (byte) (-26);
      byteArray1[2] = (byte)19;
      byteArray1[3] = (byte)24;
      byteArray1[4] = (byte)24;
      byteArray1[5] = (byte)7;
      byteArray1[6] = (byte)24;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)116;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeFloat0, 1, 1, byteArray0, byteOrder0, (byte)5);
      tiffField0.getDoubleArrayValue();
      boolean boolean0 = tiffField0.isLocalValue();
      assertEquals(5, tiffField0.getSortHint());
      assertTrue(boolean0);
      assertEquals(1, tiffField0.getOffset());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-62);
      byteArray0[3] = (byte)27;
      byteArray0[6] = (byte)11;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(589, 50, fieldTypeRational0, (byte)11, (-1L), byteArray0, byteOrder0, (byte)11);
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement((byte)15, 1615);
      String string0 = tiffField_OversizeValueElement0.getElementDescription(true);
      assertNull(string0);
      
      tiffField0.getFieldType();
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertEquals(11, tiffField0.getSortHint());
      assertEquals(589, tiffField0.getTag());
      assertArrayEquals(new double[] {628.4325284090909}, doubleArray0, 0.01);
      assertEquals((-1), tiffField0.getOffset());
      assertEquals(50, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[315];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      TiffField tiffField0 = new TiffField(1103, 2739, fieldTypeRational0, 4L, 334L, byteArray0, byteOrder0, 2739);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      tiffField0.getCount();
      assertEquals(2739, tiffField0.getDirectoryType());
      assertEquals(2739, tiffField0.getSortHint());
      assertEquals(1103, tiffField0.getTag());
      assertEquals(334, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(32932, 32932, fieldTypeAscii0, 32932, 32932, byteArray0, byteOrder0, 32932);
      tiffField0.getStringValue();
      ByteOrder.nativeOrder();
      tiffField0.getByteOrder();
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: \" for: 32932 (0x80a4: WangAnnotation): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[159];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      TiffField tiffField0 = new TiffField(40, (byte)62, fieldTypeByte0, (byte)62, (byte)62, byteArray0, byteOrder0, 40);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      tiffField0.getFieldType();
      assertEquals(62, tiffField0.getOffset());
      assertEquals(40, tiffField0.getTag());
      assertEquals(40, tiffField0.getSortHint());
      assertEquals(62, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[169];
      ByteOrder.nativeOrder();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      TiffField tiffField0 = new TiffField(12, 37121, fieldTypeAscii0, 255L, 12, byteArray0, byteOrder0, 1712);
      int int0 = Pattern.DOTALL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      Object object0 = new Object();
      tiffField0.getValueDescription();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [Ljava.lang.String;@6e877175 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[235];
      FieldTypeLong fieldTypeLong0 = new FieldTypeLong(29, "uUjH #d");
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(1612, 2546, fieldTypeLong0, 2546, 264L, byteArray0, byteOrder0, 1);
      tiffField0.dump();
      String string0 = ", fieldType: ";
      MockFile mockFile0 = new MockFile(", fieldType: ");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "uUjH #d");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // uUjH #d
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[315];
      FieldTypeFloat fieldTypeFloat0 = new FieldTypeFloat(881, "3)[VD");
      CharBuffer charBuffer0 = CharBuffer.allocate(881);
      charBuffer0.duplicate();
      ByteOrder byteOrder0 = charBuffer0.order();
      charBuffer0.chars();
      TiffField tiffField0 = new TiffField(881, 881, fieldTypeFloat0, 558L, 881, byteArray0, byteOrder0, 881);
      tiffField0.isLocalValue();
      tiffField0.getValueDescription();
      String string0 = " (0x";
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "";
      try { 
        fieldTypeFloat0.writeData(byteOrder0, byteOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid data: LITTLE_ENDIAN (java.nio.ByteOrder)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeFloat", e);
      }
  }
}
