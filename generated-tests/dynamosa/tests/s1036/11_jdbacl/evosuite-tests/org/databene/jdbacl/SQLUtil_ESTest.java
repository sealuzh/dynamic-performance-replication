/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 05 10:44:34 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("executecreatestatement");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("executecreatestatement", defaultDBTable0, 90088, "update UPDATE(2,2) NULL");
      assertEquals("column", defaultDBColumn0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema(")>7D~h^T");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SW(X)H1 ", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-2285), "");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-1048), "drop materialized viewpoint");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(",", defaultDBTable0, (-1048), "org.databene.jdbacl.SQLUtil");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.push(defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals(",", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("");
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insert");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create tabledrop ndex[_nm^tgvzk@&!j", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ", ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers(">xyge%Z.gmx/~;'!", ">xyge%Z.gmx/~;'!", (Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "", "]>&.A");
      assertEquals("']>&.A'", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("alter tablebdt  cu : / ! m6 {");
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, jMXPrincipal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "y$ya7t?U0hdO`X", "y$ya7t?U0hdO`X");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object object0 = new Object();
      String string0 = SQLUtil.renderValue(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = defaultDBTable0.getColumnNames();
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("_&\"+a+");
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
      assertEquals("SELECT * FROM null WHERE ", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<t`0DF vT5^wg:`73", "^\"k6zWo^f#wSt");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals(".null, .null, .null, .null, .null", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT * FROM ");
      String[] stringArray0 = new String[2];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop materialized viewdeleteas best for table", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "_&\"+a+", false, stringArray0);
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, (NameSpec) null);
      assertEquals("PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[8];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("deleterenamenon_uniqu");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " NOT NULL", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" NOT NULL\" PRIMARY KEY (, , , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "_&\"+a+", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT _&\"+a+ PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.leftJoin(">:?veA4S%/mWcg}D", stringArray0, (String) null, (String) null, stringArray0);
      assertEquals("left join null as null on >:?veA4S%/mWcg}D.null = null.null and >:?veA4S%/mWcg}D.null = null.null and >:?veA4S%/mWcg}D.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("SELECT * FROM ", stringArray0, "", "", stringArray0);
      assertEquals("left join  as  on ", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.leftJoin((String) null, stringArray0, (String) null, "selecttruncat|e", stringArray0);
      assertEquals("left join null as selecttruncat|e on null.null = selecttruncat|e.null and null.null = selecttruncat|e.null and null.null = selecttruncat|e.null and null.null = selecttruncat|e.null and null.null = selecttruncat|e.null and null.null = selecttruncat|e.null and null.null = selecttruncat|e.null", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("", stringArray0, " join ", "", stringArray0);
      assertEquals("left join  join  as  on ", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.join("point", "DV{rzT)q]uw!2[^}&P", stringArray0, "DV{rzT)q]uw!2[^}&P", "", stringArray0);
      assertEquals("point join DV{rzT)q]uw!2[^}&P as  on DV{rzT)q]uw!2[^}&P.null = .null and DV{rzT)q]uw!2[^}&P.null = .null and DV{rzT)q]uw!2[^}&P.null = .null and DV{rzT)q]uw!2[^}&P.null = .null and DV{rzT)q]uw!2[^}&P.null = .null and DV{rzT)q]uw!2[^}&P.null = .null and DV{rzT)q]uw!2[^}&P.null = .null and DV{rzT)q]uw!2[^}&P.null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.join("*j?`Jl}1<HGZ3J", "]3.t%_,( 6", stringArray0, "", " = '' AND  = ''", stringArray0);
      assertEquals("*j?`Jl}1<HGZ3J join  as  = '' AND  = '' on ]3.t%_,( 6.null =  = '' AND  = ''.null and ]3.t%_,( 6.null =  = '' AND  = ''.null", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("execcreate tabledrop ndex[_nm^tgvzk@&!j", "execcreate tabledrop ndex[_nm^tgvzk@&!j", stringArray0, "execcreate tabledrop ndex[_nm^tgvzk@&!j", "execcreate tabledrop ndex[_nm^tgvzk@&!j", stringArray0);
      assertEquals("execcreate tabledrop ndex[_nm^tgvzk@&!j join execcreate tabledrop ndex[_nm^tgvzk@&!j as execcreate tabledrop ndex[_nm^tgvzk@&!j on ", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("3", "", (String[]) null, "}?#{6lrXiK", "3", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.join("", "pE!P&'7OM", stringArray0, "pE!P&'7OM", "alter session", stringArray0);
      assertEquals("pE!P&'7OM as alter session on pE!P&'7OM.null = alter session.null and pE!P&'7OM.null = alter session.null and pE!P&'7OM.null = alter session.null and pE!P&'7OM.null = alter session.null and pE!P&'7OM.null = alter session.null", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.innerJoin((String) null, stringArray0, "drop tableverifyoldkey.dat", (String) null, stringArray0);
      assertEquals("drop tableverifyoldkey.dat as null on null.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.innerJoin("j%+p", stringArray0, "xpected bu", "", stringArray0);
      assertEquals("xpected bu as  on j%+p.null = .null and j%+p.null = .null and j%+p.null = .null and j%+p.null = .null and j%+p.null = .null and j%+p.null = .null and j%+p.null = .null and j%+p.null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.innerJoin((String) null, stringArray0, (String) null, "/TS53D[_", stringArray0);
      assertEquals("null as /TS53D[_ on null.null = /TS53D[_.null", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.innerJoin("BdtcU:/ !M6{", stringArray0, "", "SH4ankG)<[9jy)Tf", stringArray0);
      assertEquals(" as SH4ankG)<[9jy)Tf on BdtcU:/ !M6{.null = SH4ankG)<[9jy)Tf.null and BdtcU:/ !M6{.null = SH4ankG)<[9jy)Tf.null and BdtcU:/ !M6{.null = SH4ankG)<[9jy)Tf.null", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("", stringArray0, "'<Sd$ZNZbNeyh)m~", "LANGUAGE JAVA", stringArray0);
      assertEquals("'<Sd$ZNZbNeyh)m~ as LANGUAGE JAVA on ", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("fh5?e n6d`oZHM89tK", dBSchema0);
      String[] stringArray0 = new String[9];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(": ", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , , , , , , ) REFERENCES fh5?e n6d`oZHM89tK(, , , , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT * FROM ");
      String[] stringArray0 = new String[2];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("SELECT * FROM ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, ) REFERENCES SELECT * FROM (, )", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Infinite value found for timestamp/date. This cannot be represented as time.");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" empty: ", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" empty: \" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("ied5", false, "ied5", "ied5");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "nz:", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT nz: ", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(25);
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("drop indexunknown constraint tyve:");
      SQLUtil.addOptionalCondition("", stringBuilder0);
      assertEquals("drop indexunknown constraint tyve: or ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[14];
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[2];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray1, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      byte[] byteArray0 = new byte[0];
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, true);
      // Undeclared exception!
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      columnDescriptorList0.add((Object) "drop indeinsetont");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName(" (", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("op_reconnect ", (String[]) null, "rOYE=yaa<A6,qD", "op_reconnect ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String[] stringArray1 = new String[2];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("executexpected but di not reci|ve a=rsw update pount", stringArray0, "H/Fg(?SP~RC6T7(pLo", "O_", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.join("point", (String) null, stringArray0, (String) null, "J7\"S'n5", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("rOYE=yaa<A6,qD", (String[]) null, "rOYE=yaa<A6,qD", "op_reconnect ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("}GY+zoN%lUmDf", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("update", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "&XZ^H.`jD; '^X", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("drop index");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      String[] stringArray0 = new String[6];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "minRecSize", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(25);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT * FROM ");
      String[] stringArray0 = new String[2];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ",=IrpMl7Tum\"@px2^c", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT ,=IrpMl7Tum\"@px2^c ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(25);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT * FROM ");
      String[] stringArray0 = new String[2];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ",=IrpMl7Tum\"@px2^c", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.join("inner", " NOT NULL", stringArray0, "create table", "execinsert", stringArray0);
      assertEquals("create table as execinsert on  NOT NULL.null = execinsert.null and  NOT NULL.null = execinsert.null and  NOT NULL.null = execinsert.null and  NOT NULL.null = execinsert.null and  NOT NULL.null = execinsert.null", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("calljd&,");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("truncatealter index");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("rename");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("ALTER TABLE ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = SQLUtil.renderValue("{");
      assertEquals("'{'", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("u{");
      DBDataType dBDataType0 = DBDataType.getInstance(954, "");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder("\u0001\u00E9");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("\u0001\u00E9(2,2)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("u{");
      DBDataType dBDataType0 = DBDataType.getInstance(954, "");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder("\u0001\u00E9");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("\u0001\u00E9(2)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(25);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT * FROM ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELECT * FROM ", defaultDBTable0, (-1169), "create table");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("CREATE TABLE", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("ied5", false, "ied5", "ied5");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT ied5 ", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = SQLUtil.normalize("drop materialized viewselect * from", true);
      assertEquals("drop materialized viewselect * from", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = SQLUtil.normalize("t9fm$i-Lc}\"LBELJ:(", true);
      assertEquals("t9fm $ i - Lc } \"LBELJ:(\"", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = SQLUtil.normalize("bKsK.sC0!@.WMQ#&'", true);
      assertEquals("bKsK.sC0 ! @.WMQ # & ''", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = SQLUtil.normalize("PsHc,w;\"d!M7", true);
      assertEquals("PsHc, w ; \"d!M7\"", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = SQLUtil.normalize(" prepared tateme`(s)", false);
      assertEquals("prepared tateme ` (s)", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/lx3`Ey1'*C<!9[e", false);
      assertEquals("*/ lx3 ` Ey1 '*C<!9[e'", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = SQLUtil.removeComments("null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null");
      assertEquals("null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("alter table8f<m)}p+.qcc");
      String string0 = SQLUtil.typeAndName(dBSchema0);
      assertEquals("schema alter table8f<m)}p+.qcc", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("callselect * frum");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("point", dBSchema0);
      String[] stringArray0 = new String[5];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string0 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertEquals("unique constraint constraint", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, (String) null, "SET_NULL");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("drop indexxpected but di not reci|ve a=rsw update pount", true, "&9m=R#_1<y00E", " expecting ");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("drop index");
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("drop index", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockFile mockFile0 = new MockFile("selecttruncat|e", "selecttruncat|e");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      String[] stringArray0 = new String[8];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("'read committed' AS DEFAULT_TRANSACTION_ISOLATION FROM DUAL", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals(22L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("ALIASINFO");
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(compositeDBObject0).toString();
      dBCatalog0.setOwner(compositeDBObject0);
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("null.ALIASINFO", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("caselect * frm", stringBuilder0);
      assertEquals("caselect * frm", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("cred5aDt>abce");
      SQLUtil.addRequiredCondition("cred5aDt>abce", stringBuilder0);
      assertEquals("cred5aDt>abce and cred5aDt>abce", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, (String) null, (String[]) null, "update", (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Infinite value found for timestamp/date. This cannot be represented as time.");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("bKsK.sC0!@.WMQ#&'", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , ) REFERENCES Infinite value found for timestamp/date. This cannot be represented as time.(, , , )", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "xpected but did not reci|ve a=rsw update Pount", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter tablewjhs8ujfd; z)85a", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"alter tablewjhs8ujfd; z)85a\" PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("call");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("rename");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessioncreate table");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Character character0 = Character.valueOf('l');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'l'", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-769), "@)`'");
      Integer integer0 = new Integer((-769));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("@)G`'zt", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("@)`'(-769)", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("truncate", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("truncate BLOB NULL", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(",", defaultDBTable0, (-1048), "drop materialized viewpoint");
      defaultDBColumn0.setNullable(false);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(", DROP MATERIALIZED VIEWPOINT NOT NULL", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-288694442), "update");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("update", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.setDefaultValue("update");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("update UPDATE(2,2) DEFAULT update NULL", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("credate able");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("credate able", defaultDBTable0, 453, "credate able");
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("credate able, credate able", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("AA+ >JY_j!6nu#]S.null", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals(91, charArrayWriter0.size());
      assertEquals("create table null (,\n\tCONSTRAINT \"AA+ >JY_j!6nu#]S.null\" FOREIGN KEY () REFERENCES null()\n)", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String[] stringArray0 = new String[14];
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("LHKAF");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "9==eo3%", false, stringArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("create table LHKAF (,\n\tPRIMARY KEY (, , , , , , , , , , , , , )\n)", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("insert", defaultDBTable0, 41, "insert");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("insert");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(" prepared tateme`(s)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"s\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-1048), "org.databene.jdbacl.SQLUtil");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.push(defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "point", "point");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK point", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[2];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin((String) null, stringArray1, "callvddloappqa{", "select", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(229, "Z");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("+5=*V`%tC|hX]zY(nrU", defaultDBTable0, dBDataType0);
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "Z", false, "+5=*V`%tC|hX]zY(nrU");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("+5=*V`%tC|hX]zY(nrU NOT NULL", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String[] stringArray0 = new String[2];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7,f:~9bm~(m{wQq");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "exec", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }
}
