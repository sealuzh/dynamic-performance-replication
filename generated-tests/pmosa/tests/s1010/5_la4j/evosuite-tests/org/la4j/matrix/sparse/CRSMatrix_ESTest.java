/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 16:34:59 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.RowMajorMatrixIterator;
import org.la4j.iterator.VectorIterator;
import org.la4j.linear.LinearSystemSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceKroneckerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[6][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1278.0205;
      doubleArray1[1] = 2.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = (-3423.0);
      doubleArray2[2] = 2.0;
      doubleArray2[3] = 2.0;
      doubleArray2[4] = 1278.0205;
      doubleArray2[5] = 1278.0205;
      doubleArray2[6] = 1278.0205;
      doubleArray2[7] = 2.0;
      doubleArray2[8] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 478.7425829842;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = Double.NEGATIVE_INFINITY;
      doubleArray5[1] = 1278.0205;
      doubleArray5[2] = Double.NEGATIVE_INFINITY;
      doubleArray5[3] = 1278.0205;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = Double.NEGATIVE_INFINITY;
      doubleArray6[1] = 1278.0205;
      doubleArray6[2] = 478.7425829842;
      doubleArray6[3] = (-3423.0);
      doubleArray6[4] = 0.0;
      doubleArray6[5] = 2.0;
      doubleArray6[6] = 0.0;
      doubleArray6[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(34, 34, 34);
      double double0 = cRSMatrix0.minInRow(8);
      assertEquals(0.0, double0, 0.01);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(0, 1441, matrixFunction0);
      assertEquals(0, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(37, 0);
      cRSMatrix0.nonZeroAt(0, 702);
      // Undeclared exception!
      try { 
        cRSMatrix0.set(13, 13, 13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '13' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1313, 2, 2);
      // Undeclared exception!
      try { 
        CRSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(5);
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape(13, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(725);
      Matrix matrix0 = cRSMatrix0.copy();
      CRSMatrix cRSMatrix1 = CRSMatrix.block(matrix0, matrix0, cRSMatrix0, cRSMatrix0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      matrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      int int0 = (-1082);
      cRSMatrix1.getColumn(int0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)7;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      CRSMatrix.fromBinary(byteArray0);
      CRSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(36);
      cRSMatrix0.isZeroAt(13, 13);
      CRSMatrix.zero(13, 13);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("s:>lAX_\"L^kz{>B");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      Matrix matrix0 = sparseVector0.toRowMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      assertEquals(2, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.shuffle();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SQUARE_ROOT;
      cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow((-561));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -561
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(1);
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertEquals(1, cRSMatrix1.columns());
      
      cRSMatrix0.iteratorOfNonZeroRows();
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      int int1 = 1867;
      // Undeclared exception!
      try { 
        CRSMatrix.zero(0, 0, 1867);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("D|bWynf^Nu.m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(4, 4, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2210;
      doubleArray0[1] = (double) 2210;
      doubleArray0[2] = (double) 2210;
      doubleArray0[3] = 100.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 2210;
      CRSMatrix.from1DArray(2210, 2210, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1, 1100.9193179738438);
      CCSMatrix cCSMatrix0 = (CCSMatrix)cRSMatrix0.rotate();
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getColumn(1);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[0];
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(0, 0, doubleArray0);
      cRSMatrix0.setAll(0);
      cRSMatrix0.copyOfShape(0, 0);
      int int1 = 0;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformColumn(0, vectorFunction0);
      cRSMatrix0.nonZeroIterator();
      cRSMatrix0.blankOfRows(0);
      cRSMatrix0.eachInColumn(0, vectorProcedure0);
      cRSMatrix0.nonZeroRowMajorIterator();
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double double0 = cRSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      
      cRSMatrix0.setAll((-966.0));
      assertEquals(0, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      CRSMatrix cRSMatrix1 = cRSMatrix0.to(matrixFactory0);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 10;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(2221, 10, 0.0, (java.util.Random) mockRandom0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      int int1 = 0;
      cRSMatrix0.removeRow(int1);
      cRSMatrix0.subtract(double0);
      CRSMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix0.nonZeroRowMajorIterator();
      double double1 = 1.0;
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(int0, double1);
      NumberFormat numberFormat0 = null;
      cRSMatrix1.toMatrixMarket(numberFormat0);
      int int2 = 13;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(int2, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(574L);
      mockRandom0.doubles((double) 1, (double) 574L);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(1, 1, (double) 1, (java.util.Random) mockRandom0);
      double double0 = cRSMatrix0.min();
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      int int0 = 24;
      MockRandom mockRandom0 = new MockRandom(699L);
      // Undeclared exception!
      try { 
        CRSMatrix.random(725, (int) (byte)7, (double) 24, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 3929;
      int int1 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(3929, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      int int2 = 2;
      Matrix.zero(2, 0);
      cRSMatrix0.foldNonZeroInRow(0, vectorAccumulator0);
      cRSMatrix0.toBinary();
      int int3 = 0;
      int int4 = 9;
      RowMajorSparseMatrix.diagonal(9, 0);
      // Undeclared exception!
      try { 
        CRSMatrix.zero(0, 9, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1, 1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(0, vectorProcedure0);
      Matrix matrix0 = cRSMatrix0.blankOfShape(0, 6);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, matrix0.rows());
      assertEquals(6, matrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.rotate();
      int[] intArray0 = new int[2];
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.rotate();
      int[] intArray0 = new int[2];
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1401;
      doubleArray0[1] = (double) 1401;
      doubleArray0[2] = (double) 1401;
      doubleArray0[3] = 1850.62904;
      doubleArray0[4] = (double) 4;
      CRSMatrix.from1DArray(1401, 4, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow(893);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 893
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(37, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRow(0, vectorAccumulator0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 6;
      intArray0[3] = 0;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 43;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(13, 43);
      cRSMatrix0.add((double) 43);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = (-501);
      MockRandom mockRandom0 = new MockRandom((-501));
      // Undeclared exception!
      try { 
        CRSMatrix.random((-501), (-501), (double) (-501), (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)103;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric((int) (byte)45, 0.0, (java.util.Random) mockRandom0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(13, vectorProcedure0);
      assertEquals(45, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(37, 6);
      cRSMatrix0.nonZeroAt(6, 6);
      cRSMatrix0.maxInRow(6);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRow(5, vectorAccumulator0);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 38
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.randomSymmetric(1, (double) 1, (java.util.Random) mockRandom0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 2221;
      int int1 = 10;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = new CRSMatrix(10, 2221, 10);
      cRSMatrix0.removeRow(0);
      cRSMatrix0.subtract(double0);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(int0, int1);
      cRSMatrix0.nonZeroRowMajorIterator();
      int int2 = 692;
      CRSMatrix.diagonal(int2, int1);
      NumberFormat numberFormat0 = null;
      cRSMatrix1.toMatrixMarket(numberFormat0);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-72);
      byteArray0[0] = byte0;
      byte byte1 = (byte)62;
      byteArray0[1] = byte1;
      byte byte2 = (byte)100;
      byteArray0[2] = byte2;
      byte byte3 = (byte)3;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-69);
      byteArray0[4] = byte4;
      byte byte5 = (byte)95;
      byteArray0[5] = byte5;
      CRSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(34);
      cRSMatrix0.minInRow(1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(1, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(37, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRow(0, vectorAccumulator0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-20);
      intArray0[3] = 0;
      double double0 = cRSMatrix0.minInRow(0);
      assertEquals(0.0, double0, 0.01);
      
      cRSMatrix0.setAll(17.0);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2, 2);
      cRSMatrix0.setAll(2);
      // Undeclared exception!
      try { 
        cRSMatrix0.set(2, 2, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("0");
      cRSMatrix0.trace();
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow(1124);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1124
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte byte0 = (byte)45;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero((int) (byte)45, (int) (byte)45);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.forEach(consumer0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.foldRow(1058, vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1058
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity((byte)2);
      assertNotNull(cRSMatrix0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.5, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.forEach(consumer0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.5, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      
      cRSMatrix0.swapRows(12, 12);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.5, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity((byte)3);
      assertNotNull(cRSMatrix0);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      
      double double0 = cRSMatrix0.minInRow(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.to((MatrixFactory<Matrix>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(37, 0);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(37, cRSMatrix0.rows());
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(vectorAccumulator0).accumulate();
      double double0 = cRSMatrix0.foldRow(0, vectorAccumulator0);
      assertEquals(0.0, double0, 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(37, cRSMatrix0.rows());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfRows(13);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(37, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(13, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 6;
      double double1 = cRSMatrix0.minInRow(0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(37, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(37, 5);
      assertNotNull(cRSMatrix0);
      assertEquals(37, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      
      boolean boolean0 = cRSMatrix0.nonZeroAt(5, 702);
      assertFalse(boolean0);
      assertEquals(37, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(5, 702);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(37, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(702, cRSMatrix1.columns());
      assertEquals(5, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(8, cRSMatrix0.columns());
      
      int int0 = cRSMatrix0.rank();
      assertEquals(0, int0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(8, cRSMatrix0.columns());
      
      int[] intArray0 = new int[2];
      intArray0[0] = 32;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)60;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity((byte)3);
      assertNotNull(cRSMatrix0);
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.JACOBI;
      LinearSystemSolver linearSystemSolver0 = cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      assertNotNull(linearSystemSolver0);
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertEquals(3, linearSystemSolver0.unknowns());
      assertEquals(3, linearSystemSolver0.equations());
      
      cRSMatrix0.swapRows(1, 0);
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      
      VectorIterator vectorIterator0 = cRSMatrix0.nonZeroIteratorOfRow(0);
      assertNotNull(vectorIterator0);
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertNotNull(cRSMatrix0);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.toColumnVector();
      assertNotNull(compressedVector0);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      
      int int0 = cRSMatrix0.rank();
      assertEquals(0, int0);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      
      double double0 = cRSMatrix0.maxInRow(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2346, 2346);
      cRSMatrix0.set(32, 32, (-2960.971537298538));
      cRSMatrix0.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 8;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(8);
      assertNotNull(cRSMatrix0);
      assertEquals(8, cRSMatrix0.rows());
      assertEquals(0.125, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(8, cRSMatrix0.columns());
      assertEquals(8, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      int int1 = (-34);
      int int2 = 1889;
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.multiplyByItsTranspose();
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(8, cRSMatrix0.rows());
      assertEquals(0.125, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(8, cRSMatrix0.columns());
      assertEquals(8, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.125, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(8, cRSMatrix1.rows());
      assertEquals(8, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(8, cRSMatrix1.cardinality());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.swapColumns(1889, (-34));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1889' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity((byte)3);
      assertNotNull(cRSMatrix0);
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.rows());
      
      SparseMatrix sparseMatrix0 = SparseMatrix.zero((int) (byte)3, 2);
      assertNotNull(sparseMatrix0);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(3, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(2, sparseMatrix0.columns());
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getColumn((-4847));
      assertNotNull(compressedVector0);
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 11.0;
      doubleArray0[0] = doubleArray1;
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      assertNotNull(ooPlaceOuterProduct0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertNotNull(cRSMatrix0);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(11.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      assertNotNull(sparseVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.rows());
      
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)cRSMatrix0.toColumnMajorSparseMatrix();
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotNull(cCSMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(11.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(3, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(11.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.3333333333333333, cCSMatrix0.density(), 0.01);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)ooPlaceMatricesMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(11.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(3, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(11.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.3333333333333333, cCSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0.3333333333333333, cRSMatrix2.density(), 0.01);
      assertEquals(3, cRSMatrix2.rows());
      assertEquals(121.0, cRSMatrix2.max(), 0.01);
      assertEquals(1, cRSMatrix2.columns());
      assertEquals(1, cRSMatrix2.cardinality());
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(11.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(3, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(11.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.3333333333333333, cCSMatrix0.density(), 0.01);
      assertEquals(1, cCSMatrix1.columns());
      assertEquals(0.3333333333333333, cCSMatrix1.density(), 0.01);
      assertEquals(121.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(3, cCSMatrix1.rows());
      assertEquals(1, cCSMatrix1.cardinality());
      
      // Undeclared exception!
      try { 
        SparseMatrix.block(cRSMatrix1, cRSMatrix1, cCSMatrix1, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix1.nonZeroRowMajorIterator();
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(rowMajorMatrixIterator0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(5, (-660.075146));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertEquals((-660.075146), cRSMatrix2.min(), 0.01);
      assertEquals(5, cRSMatrix2.cardinality());
      assertEquals(0.2, cRSMatrix2.density(), 0.01);
      assertEquals(5, cRSMatrix2.columns());
      assertEquals(5, cRSMatrix2.rows());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)38;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(37, 6);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(37, cRSMatrix0.rows());
      assertEquals(6, cRSMatrix0.columns());
      
      boolean boolean0 = cRSMatrix0.nonZeroAt(6, 6);
      assertFalse(boolean0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(37, cRSMatrix0.rows());
      assertEquals(6, cRSMatrix0.columns());
      
      double double0 = cRSMatrix0.maxInRow(6);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(37, cRSMatrix0.rows());
      assertEquals(6, cRSMatrix0.columns());
      
      Random.setNextRandom(37);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(37, cRSMatrix0.rows());
      assertEquals(6, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.each(matrixProcedure0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      double double0 = cRSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(667, (-1556.2239));
      CRSMatrix.identity((byte)103);
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(8, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      
      int int0 = cRSMatrix0.rank();
      assertEquals(0, int0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(8, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      
      int[] intArray0 = new int[1];
      Matrix matrix0 = Matrix.constant(1192, 0, 0.0);
      assertNotNull(matrix0);
      assertEquals(1192, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      intArray0[0] = 0;
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.select(intArray0, intArray0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(8, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(1, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.random(1, 0, (double) 0, (java.util.Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity((byte)4);
      assertNotNull(cRSMatrix0);
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(0.25, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(4, cRSMatrix0.columns());
      
      SparseMatrix sparseMatrix0 = SparseMatrix.zero((int) (byte)4, (int) (byte)4);
      assertNotNull(sparseMatrix0);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(4, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(4, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.select(intArray0, intArray0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(0.25, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(4, cRSMatrix0.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(1, cRSMatrix1.cardinality());
      assertEquals(1, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(1, cRSMatrix1.columns());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertEquals(1.0, cRSMatrix1.density(), 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.swapRows((byte)4, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 37.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 37.0;
      doubleArray2[1] = 37.0;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 37.0;
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = 37.0;
      doubleArray2[6] = (-1.0);
      doubleArray2[7] = 37.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 37.0;
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = 37.0;
      doubleArray3[3] = 37.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = 1984.227677;
      doubleArray4[4] = (-1.0);
      doubleArray4[5] = (-1.0);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(13, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.07692307692307693, cRSMatrix0.density(), 0.01);
      
      double double0 = cRSMatrix0.product();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(13, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.07692307692307693, cRSMatrix0.density(), 0.01);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(13, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.07692307692307693, cRSMatrix0.density(), 0.01);
      
      double double1 = cRSMatrix0.max();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(13, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.07692307692307693, cRSMatrix0.density(), 0.01);
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
      assertNotNull(rowMajorMatrixIterator0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(13, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.07692307692307693, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      assertNotNull(cRSMatrix0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      
      double double0 = cRSMatrix0.norm();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.swapRows(1, (-10));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(37);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(2165.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRow(0, vectorAccumulator0);
      cRSMatrix0.minInRow(0);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(37);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRow(0, vectorAccumulator0);
      cRSMatrix0.minInRow(37);
      int[] intArray0 = null;
      cRSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 12, 1);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(12, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(12, 1);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(12, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(12, cRSMatrix1.rows());
      assertEquals(1, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      
      int int1 = 1;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(1, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 7;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(7);
      assertNotNull(cRSMatrix0);
      assertEquals(7, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.14285714285714285, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(7, cRSMatrix0.rows());
      assertEquals(7, cRSMatrix0.columns());
      
      int int1 = (-2368);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cRSMatrix0.foldRows(vectorAccumulator0);
      assertNotNull(doubleArray0);
      assertEquals(7, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.14285714285714285, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(7, cRSMatrix0.rows());
      assertEquals(7, cRSMatrix0.columns());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int2 = 15;
      double double0 = (-3927.57358);
      // Undeclared exception!
      try { 
        cRSMatrix0.set((-2368), 15, (-3927.57358));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2368' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(1, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(37);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInColumn(4, vectorProcedure0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)37).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRow(0, vectorAccumulator0);
      cRSMatrix0.minInRow(0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(37);
      cRSMatrix0.copyOfShape(13, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Random.setNextRandom((-1));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 37;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(37);
      int int1 = cRSMatrix0.rank();
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) int1;
      doubleArray1[1] = (double) int0;
      doubleArray1[2] = (double) int0;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldNonZeroInColumn(int0, vectorAccumulator0);
      doubleArray1[3] = (double) int1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(columnMajorSparseMatrix0, cRSMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      cRSMatrix0.iteratorOfRow(int0);
      cRSMatrix1.nonZeroIteratorOfRow(int1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)28;
      int int0 = 13;
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(2758, 13);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(2758, 1);
      CRSMatrix cRSMatrix2 = CRSMatrix.block(cRSMatrix1, cRSMatrix0, cRSMatrix0, denseMatrix0);
      cRSMatrix2.nonZeroAt(int0, byteArray0[0]);
      int int1 = 23;
      cRSMatrix2.copyOfShape(int1, int1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(37);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix1, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(37);
      cRSMatrix0.copyOfShape(13, 37);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Random.setNextRandom((-1));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 11.0;
      doubleArray0[1] = doubleArray2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertNotNull(cRSMatrix0);
      assertEquals(2, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(11.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.25, cRSMatrix0.density(), 0.01);
      
      int int0 = cRSMatrix0.rank();
      assertEquals(1, int0);
      assertEquals(2, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(11.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.25, cRSMatrix0.density(), 0.01);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(11.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.25, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(1, columnMajorSparseMatrix0.cardinality());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(2, columnMajorSparseMatrix0.columns());
      assertEquals(2, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(columnMajorSparseMatrix0, cRSMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 11.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 11.0;
      doubleArray2[1] = 11.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 11.0;
      doubleArray3[1] = 1962.1184269073;
      doubleArray3[2] = 11.0;
      doubleArray3[3] = 11.0;
      doubleArray3[4] = 11.0;
      doubleArray3[5] = (-52.0);
      doubleArray3[6] = 11.0;
      doubleArray3[7] = 0.2849702680829619;
      doubleArray3[8] = 11.0;
      doubleArray0[2] = doubleArray3;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertNotNull(cRSMatrix0);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(11.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.cardinality());
      
      int int0 = cRSMatrix0.rank();
      assertEquals(1, int0);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(11.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.cardinality());
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(1.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.cardinality());
      assertEquals(11.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(1, columnMajorSparseMatrix0.columns());
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(columnMajorSparseMatrix0, cRSMatrix0, cRSMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      assertNotNull(ooPlaceOuterProduct0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertNotNull(cRSMatrix0);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(35);
      cRSMatrix0.maxInRow(4);
      cRSMatrix0.getRow(35);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1634, 2697.205169537244);
      cRSMatrix0.set(7, 13, 7);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(37);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.minInRow(0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      OoPlaceOuterProduct ooPlaceOuterProduct1 = new OoPlaceOuterProduct();
      double[][] doubleArray1 = new double[4][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      CRSMatrix.from2DArray(doubleArray1);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) cRSMatrix0, (SparseMatrix) cRSMatrix0);
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      
      Spliterator<Double> spliterator0 = cRSMatrix0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      
      CRSMatrix cRSMatrix1 = CRSMatrix.fromBinary(byteArray0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      
      int int0 = 9;
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix1.getColumn(9);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(compressedVector0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      
      double double0 = cRSMatrix1.trace();
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.sliceBottomRight(2032, 2032);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [2032..0][2032..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(5736);
      cRSMatrix0.setRow(1, (double) 5736);
      int int0 = (-1);
      cRSMatrix0.minInRow(int0);
      cRSMatrix0.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(70);
      assertNotNull(cRSMatrix1);
      
      cRSMatrix0.copyOfRows(10);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(32, vectorFunction0);
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(305, 10);
      cRSMatrix0.maxInRow(32);
      cRSMatrix0.set(13, 10, 0.0);
      cRSMatrix2.set(305, 13, 1791.4289496489007);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(70);
      assertNotNull(cRSMatrix1);
      
      cRSMatrix0.copyOfRows(10);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)70, (-2220.7322474651446), (double)70, (-1.0), (double)70).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(32, vectorFunction0);
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(305, 10);
      cRSMatrix0.maxInRow(32);
      cRSMatrix0.set(13, 10, 70.0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix2.updateAt(51, 67, matrixFunction0);
      cRSMatrix2.set(305, 13, 1791.4289496489007);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      int int0 = 221;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(221, 221);
      cRSMatrix0.rowMajorIterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      int int1 = 10;
      double double0 = (-966.0);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix1 = CRSMatrix.random(int1, int1, double0, (java.util.Random) mockRandom0);
      int[] intArray0 = new int[5];
      intArray0[0] = int1;
      int int2 = 32;
      mockRandom0.nextBoolean();
      intArray0[1] = int2;
      intArray0[2] = int0;
      intArray0[3] = int1;
      intArray0[4] = int0;
      cRSMatrix1.select(intArray0, intArray0);
      cRSMatrix0.toBinary();
      long long0 = (-411L);
      double double1 = 9.904948680947491;
      double double2 = 35.4;
      mockRandom0.doubles(long0, double1, double2);
      int int3 = 19;
      cRSMatrix0.nonZeroIteratorOfRow(int3);
      int int4 = 65075262;
      int int5 = 22;
      CRSMatrix.random(int4, int5, (double) intArray0[4], (java.util.Random) mockRandom0);
      int int6 = (-1);
      int int7 = 2409;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      Matrix.from1DArray(int6, int7, doubleArray0);
      cRSMatrix1.nonZeroAt(intArray0[2], int0);
      CRSMatrix cRSMatrix2 = CRSMatrix.random(intArray0[2], intArray0[3], (double) int3, (java.util.Random) mockRandom0);
      cRSMatrix2.max();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity((byte)3);
      assertNotNull(cRSMatrix0);
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      assertEquals(0.2222222222222222, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.columns());
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(vectorAccumulator0).accumulate();
      double double0 = cRSMatrix0.foldNonZeroInRow(1, vectorAccumulator0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.2222222222222222, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.columns());
      
      cRSMatrix0.swapRows(1, 0);
      assertEquals(0.2222222222222222, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.columns());
      
      double double1 = cRSMatrix0.max();
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      assertEquals(0.2222222222222222, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity((byte)3);
      assertNotNull(cRSMatrix0);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.2222222222222222, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
      
      cRSMatrix0.swapRows(1, 0);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.2222222222222222, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
      
      Iterator<Integer> iterator0 = cRSMatrix0.iteratorOfNonZeroRows();
      assertNotNull(iterator0);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.2222222222222222, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.rowMajorIterator();
      assertNotNull(rowMajorMatrixIterator0);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.2222222222222222, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      int int0 = 34;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(34);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(422.0, 422.0, 422.0, 422.0, 422.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom();
      int int1 = (-1357);
      cRSMatrix0.removeRow(int0);
      cRSMatrix0.transpose();
      cRSMatrix0.minInRow(int1);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      double[][] doubleArray0 = new double[6][4];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(6, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      assertNotNull(ooPlaceKroneckerProduct0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)ooPlaceKroneckerProduct0.applyCommon(cRSMatrix0, cRSMatrix0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(6, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(36, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix1, cRSMatrix1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '36' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity((byte)13);
      assertNotNull(cRSMatrix0);
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(13, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.07692307692307693, cRSMatrix0.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.setRow((int) (byte)10, (-1.0));
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(13, cRSMatrix0.rows());
      assertEquals((-1.0), cRSMatrix0.min(), 0.01);
      assertEquals(0.14792899408284024, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(25, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      
      cRSMatrix0.eachNonZeroInColumn((byte)13, vectorProcedure0);
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(13, cRSMatrix0.rows());
      assertEquals((-1.0), cRSMatrix0.min(), 0.01);
      assertEquals(0.14792899408284024, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(25, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      
      cRSMatrix0.swapRows(2, 0);
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(13, cRSMatrix0.rows());
      assertEquals((-1.0), cRSMatrix0.min(), 0.01);
      assertEquals(0.14792899408284024, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(25, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      
      double double0 = cRSMatrix0.minInRow((byte)10);
      assertEquals((-1.0), double0, 0.01);
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(13, cRSMatrix0.rows());
      assertEquals((-1.0), cRSMatrix0.min(), 0.01);
      assertEquals(0.14792899408284024, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(25, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt((byte)13, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }
}
