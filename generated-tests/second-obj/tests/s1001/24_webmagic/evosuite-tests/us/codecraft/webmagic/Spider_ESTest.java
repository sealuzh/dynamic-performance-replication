/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:25:42 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.AndSelector;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.Selector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(" stop fail!");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider1 = spider0.setScheduler(duplicateRemovedScheduler0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = " stop fail!";
      stringArray0[1] = " stop fail!";
      stringArray0[2] = " stop fail!";
      stringArray0[3] = " stop fail!";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = " error";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setUUID(" error");
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.setPipelines((List<Pipeline>) null);
      Json json0 = new Json((String) null);
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = mock(ForkJoinPool.ForkJoinWorkerThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadGroup threadGroup0 = new ThreadGroup("1");
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(30000, forkJoinPool_ForkJoinWorkerThreadFactory0, threadGroup0, true);
      Spider spider4 = spider3.setExecutorService(forkJoinPool0);
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("-");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("xs[U*OJm`Xh-5s", "");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider3 = spider2.startRequest(linkedList0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("xs[U*OJm`Xh-5s");
      spider3.scheduler(fileCacheQueueScheduler0);
      AndSelector andSelector0 = new AndSelector((List<Selector>) null);
      // Undeclared exception!
      try { 
        andSelector0.selectList("xs[U*OJm`Xh-5s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.AndSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Spider.Status.fromValue((-565));
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("~JTm~VKB_)FLWNiDxj/");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.checkIfRunning();
      spider0.getScheduler();
      spider0.runAsync();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("n)'.An*ii7pX}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      spider1.setExitWhenComplete(true);
      String[] stringArray0 = new String[0];
      Spider spider2 = spider0.setSpawnUrl(true);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider3 = spider2.setExitWhenComplete(true);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(":");
      Spider spider4 = spider3.scheduler(fileCacheQueueScheduler0);
      spider4.runAsync();
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("n)'.An*ii7pX}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      // Undeclared exception!
      try { 
        spider1.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = false;
      String[] stringArray0 = new String[0];
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("#>");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#>");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("#>");
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider2 = spider1.setPipelines(linkedList0);
      int int0 = (-111);
      // Undeclared exception!
      try { 
        spider2.thread((-111));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("n)'.An*ii7pX}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.setExitWhenComplete(true);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider2.pipeline(multiPagePipeline0);
      spider0.checkIfRunning();
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider1.scheduler = (Scheduler) priorityScheduler0;
      // Undeclared exception!
      try { 
        spider1.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.Running;
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[t:9^kb");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("[t:9^kb");
      fileCacheQueueScheduler0.poll(spider0);
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("s+");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.addPipeline(resultItemsCollectorPipeline0);
      Site site0 = simplePageProcessor0.getSite();
      Site site1 = site0.setTimeOut(0);
      Site site2 = site1.setDisableCookieManagement(true);
      site2.setUseGzip(true);
      Site site3 = site2.addCookie("I8l6>nry", (String) null, "I8l6>nry");
      spider1.site = site3;
      site1.addCookie("J'AE)xVgj?&SM", "file.separator");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(", statusCode=");
      Spider spider2 = spider0.setScheduler(fileCacheQueueScheduler0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider2.setPipelines(linkedList0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "s+";
      stringArray0[1] = "J'AE)xVgj?&SM";
      stringArray0[2] = "file.separator";
      spider0.stop();
      Spider.Status.values();
      spider0.setEmptySleepTime((-1));
      spider0.getScheduler();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("s+");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.addPipeline(resultItemsCollectorPipeline0);
      Site site0 = simplePageProcessor0.getSite();
      Site site1 = site0.setTimeOut(0);
      Site site2 = site1.setDisableCookieManagement(true);
      Site site3 = site2.addCookie("I8l6>nry", (String) null, "I8l6>nry");
      spider1.site = site3;
      site1.addCookie("J'AE)xVgj?&SM", "s+");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Request request0 = new Request();
      Request[] requestArray0 = new Request[8];
      request0.setMethod("Spider {} closed! {} pages downloaded.");
      requestArray0[1] = request0;
      requestArray0[2] = request0;
      requestArray0[3] = request0;
      requestArray0[4] = request0;
      requestArray0[5] = request0;
      requestArray0[6] = request0;
      requestArray0[7] = request0;
      // Undeclared exception!
      try { 
        spider1.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      spider0.getStatus();
      stringArray0[1] = "";
      spider0.getThreadAlive();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader(">36Zl0$*+4Y[<og,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("58?\"UBo0ljb");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread(195);
      Spider spider2 = spider1.setExitWhenComplete(true);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      spider2.setScheduler(fileCacheQueueScheduler0);
      List<String> list0 = null;
      Json json0 = new Json((List<String>) null);
      // Undeclared exception!
      try { 
        json0.removePadding("us.codecraft.webmagic.scheduler.PriorityScheduler");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // us/codecraft/xsoup/XTokenQueue
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("n)'.An*ii7pX}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      spider1.runAsync();
      Spider spider2 = spider1.setExitWhenComplete(true);
      String[] stringArray0 = new String[0];
      Spider spider3 = spider2.addUrl(stringArray0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      // Undeclared exception!
      try { 
        spider3.thread((ExecutorService) forkJoinPool0, 30000);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("n)'.An*ii7pX}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.setExitWhenComplete(true);
      String[] stringArray0 = new String[0];
      Spider spider3 = spider2.addUrl(stringArray0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider4 = spider3.thread((ExecutorService) forkJoinPool0, 30000);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("y>");
      Spider spider5 = spider4.scheduler(fileCacheQueueScheduler0);
      spider5.runAsync();
      spider0.getUUID();
      spider2.getStartTime();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("s+");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.addPipeline(resultItemsCollectorPipeline0);
      Site site0 = simplePageProcessor0.getSite();
      Site site1 = site0.setTimeOut(0);
      site1.setDisableCookieManagement(true);
      site1.addCookie((String) null, (String) null, (String) null);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("page status code error, page {} , code: {}");
      Request request0 = new Request();
      Spider spider2 = spider1.setScheduler(fileCacheQueueScheduler0);
      // Undeclared exception!
      try { 
        spider2.get("J'AE)xVgj?&SM");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "n)'.An*ii7pX}";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("n)'.An*ii7pX}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, (-206));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider0.pipelines = (List<Pipeline>) linkedList0;
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider0.getPageCount();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      Request[] requestArray0 = new Request[3];
      Request request0 = new Request("text");
      requestArray0[0] = request0;
      request0.setUrl("text");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_cycle_tried_times");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      spider0.scheduler(fileCacheQueueScheduler0);
      Request request1 = new Request();
      // Undeclared exception!
      try { 
        spider2.get("_cycle_tried_times");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Wrb=-8#gr)8Nw&");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("s+");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.addPipeline(resultItemsCollectorPipeline0);
      Site site0 = simplePageProcessor0.getSite();
      Site site1 = site0.setTimeOut(0);
      Site site2 = site1.setDisableCookieManagement(true);
      String string0 = "I8l6>nry";
      Site site3 = site2.addCookie("I8l6>nry", (String) null, "I8l6>nry");
      spider1.site = site3;
      String string1 = "J'AE)xVgj\\?&SM";
      String string2 = "file.separator";
      site1.addCookie("J'AE)xVgj?&SM", "file.separator");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[2] = "Thread interrupted when sleep";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "Thread interrupted when sleep";
      stringArray0[7] = "Thread interrupted when sleep";
      spider0.getSpiderListeners();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("s+");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider0.addPipeline(resultItemsCollectorPipeline0);
      Site site0 = simplePageProcessor0.getSite();
      site0.setTimeOut(0);
      Site site1 = site0.setDisableCookieManagement(false);
      spider0.start();
      site1.addCookie("us.codecraft.webmagic.Spider$Status", "s+", "");
      site1.addCookie("Spider {} closed! {} pages downloaded.", "");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = null;
      try {
        fileCacheQueueScheduler0 = new FileCacheQueueScheduler((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("s+");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.addPipeline(resultItemsCollectorPipeline0);
      Site site0 = simplePageProcessor0.getSite();
      Site site1 = site0.setTimeOut(0);
      Site site2 = site1.setDisableCookieManagement(true);
      Site site3 = site2.addCookie("I8l6>nry", (String) null, "I8l6>nry");
      spider1.site = site3;
      site1.addCookie("J'AE)xVgj?&SM", "file.separator");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Request request0 = new Request();
      Request[] requestArray0 = new Request[8];
      Request request1 = request0.setMethod("Spider {} closed! {} pages downloaded.");
      requestArray0[0] = request1;
      requestArray0[1] = request0;
      requestArray0[2] = request0;
      requestArray0[3] = request0;
      requestArray0[4] = request0;
      requestArray0[5] = request0;
      requestArray0[6] = request0;
      requestArray0[7] = request0;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("B>P");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Site site0 = simplePageProcessor0.getSite();
      site0.setTimeOut(0);
      Site site1 = site0.addCookie("B>P", "Wrb=-8#gr)8Nw&", "B>P");
      Site site2 = spider0.getSite();
      Site site3 = site2.setDisableCookieManagement(false);
      site3.addCookie("75[ mOe._7HD/QPMRS", "us.codecraft.webmagic.utils.MultiKeyMapBase", "us.codecraft.webmagic.utils.MultiKeyMapBase");
      site1.addCookie("Spider {} started!", "Spider {} closed! {} pages downloaded.");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("threadNum should be more than one!");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider1.setPipelines(linkedList0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Spider {} closed! {} pages downloaded.";
      stringArray0[1] = "Spider {} started!";
      stringArray0[2] = ";Od^*";
      stringArray0[3] = "threadNum should be more than one!";
      stringArray0[4] = ";Od^*";
      stringArray0[5] = "Spider {} started!";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }
}
