/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 08:06:45 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Integer integer0 = new Integer((-28));
      Object object0 = doubleKeyMap0.remove((Object) null, (Object) integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(class0);
      String string0 = doubleKeyMap0.put("@~uzay-]<=w{", (Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>((Map<Object, Map<Object, Object>>) null);
      Object object0 = doubleKeyMap0.get((Object) null, (Object) "us.codecraft.webmagic.utils.DoubleKeyMap");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Map<String, String>, Map<HashMap<String, Object>, String>> hashMap0 = new HashMap<Map<String, String>, Map<HashMap<String, Object>, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<String, String>, HashMap<String, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, HashMap<String, Object>, String>(hashMap0, class0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Map<String, String>) hashMap1, hashMap2, "=Q_A`/G`xa!ym1-$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<String, Object>, Map<Map<String, Object>, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, Object>, Map<Map<String, Object>, String>>((Map<Object, Map<Map<String, Object>, Map<Map<String, Object>, String>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Integer, Object>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, String, String>((Map<HashMap<Integer, Object>, Map<String, String>>) null, class0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Map<String, String> map0 = doubleKeyMap0.get(hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Map<String, String>, Map<HashMap<String, Object>, String>> hashMap0 = new HashMap<Map<String, String>, Map<HashMap<String, Object>, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<String, String>, HashMap<String, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, HashMap<String, Object>, String>(hashMap0, class0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<HashMap<String, Object>, String> hashMap2 = new HashMap<HashMap<String, Object>, String>();
      hashMap0.put(hashMap1, hashMap2);
      HashMap<String, Object> hashMap3 = new HashMap<String, Object>();
      doubleKeyMap0.remove((Map<String, String>) hashMap1, hashMap3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<Map<String, Object>, Map<Object, String>> hashMap1 = new HashMap<Map<String, Object>, Map<Object, String>>();
      DoubleKeyMap<Map<String, Object>, Object, String> doubleKeyMap0 = new DoubleKeyMap<Map<String, Object>, Object, String>(hashMap1);
      doubleKeyMap0.put((Map<String, Object>) hashMap0, (Object) "3P<a^+9SC6ZBzPs>e", "h[ Nrkp\",j[lRspQM:9");
      doubleKeyMap0.remove((Map<String, Object>) hashMap0, (Object) null);
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>(621, 621);
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(hashMap0);
      Map<String, Map<Integer, String>> map0 = doubleKeyMap0.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, String> doubleKeyMap1 = new DoubleKeyMap<String, Integer, String>(map0, class0);
      Integer integer0 = new Integer(621);
      doubleKeyMap1.put((String) null, integer0, "us.codecraft.webmagic.utils.DoubleKeyMap");
      String string0 = doubleKeyMap1.put((String) null, integer0, "");
      assertEquals("us.codecraft.webmagic.utils.DoubleKeyMap", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-28));
      HashMap<HashMap<Integer, Integer>, Map<Object, Integer>> hashMap0 = new HashMap<HashMap<Integer, Integer>, Map<Object, Integer>>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      HashMap<Object, Integer> hashMap2 = new HashMap<Object, Integer>();
      hashMap0.put(hashMap1, hashMap2);
      DoubleKeyMap<HashMap<Integer, Integer>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Integer>, Object, Integer>(hashMap0);
      Integer integer1 = doubleKeyMap0.get(hashMap1, (Object) integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<String, Object>, Integer, HashMap<String, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<String, Object>, Integer, HashMap<String, String>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>();
      Map<Integer, Object> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }
}
