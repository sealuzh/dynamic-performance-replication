/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:16:39 GMT 2018
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.FieldNamingPolicy;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.internal.ConstructorConstructor;
import com.google.gson.internal.Excluder;
import com.google.gson.internal.ObjectConstructor;
import com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory;
import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import java.io.InputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.util.Enumeration;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReflectiveTypeAdapterFactory_ESTest extends ReflectiveTypeAdapterFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ObjectConstructor<Object> objectConstructor0 = null;
      Map<String, ReflectiveTypeAdapterFactory.BoundField> map0 = null;
      ReflectiveTypeAdapterFactory.Adapter<Object> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<Object>((ObjectConstructor<Object>) null, (Map<String, ReflectiveTypeAdapterFactory.BoundField>) null);
      reflectiveTypeAdapterFactory_Adapter0.nullSafe();
      JsonElement jsonElement0 = reflectiveTypeAdapterFactory_Adapter0.toJsonTree((Object) null);
      reflectiveTypeAdapterFactory_Adapter0.fromJsonTree(jsonElement0);
      // Undeclared exception!
      try { 
        reflectiveTypeAdapterFactory_Adapter0.read((JsonReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FieldNamingPolicy fieldNamingPolicy0 = FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
      Excluder excluder0 = Excluder.DEFAULT;
      byte byte0 = (byte)39;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      StringReader stringReader0 = new StringReader(string0);
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      try { 
        gson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Unterminated array at line 1 column 42 path $.factories[0]
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FieldNamingPolicy fieldNamingPolicy0 = FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
      Excluder excluder0 = Excluder.DEFAULT;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Gson gson0 = new Gson();
      gson0.toJson((Object) sequenceInputStream0);
      StringReader stringReader0 = new StringReader("{\"e\":{}}");
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for java.util.Enumeration<com.google.gson.internal.$Gson$Types$WildcardTypeImpl@0000000034>. Register an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FieldNamingPolicy fieldNamingPolicy0 = FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
      Excluder excluder0 = Excluder.DEFAULT;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Gson gson0 = new Gson();
      Object object0 = new Object();
      gson0.toJson(object0);
      StringReader stringReader0 = new StringReader("{}");
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      SequenceInputStream sequenceInputStream1 = gson0.fromJson((Reader) stringReader0, class0);
      sequenceInputStream1.mark(92);
      int int0 = Short.BYTES;
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration1);
      // Undeclared exception!
      try { 
        FieldNamingPolicy.valueOf("{}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.gson.FieldNamingPolicy.{}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FieldNamingPolicy fieldNamingPolicy0 = FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
      Excluder excluder0 = Excluder.DEFAULT;
      int[] intArray0 = new int[9];
      intArray0[2] = 38;
      excluder0.withModifiers(intArray0);
      Gson gson0 = new Gson();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Integer.toOctalString(38);
      StringReader stringReader0 = new StringReader("46");
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = 'S';
      charArray0[2] = 'X';
      stringReader0.read(charArray0);
      gson0.toJson((Object) stringReader0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      // Undeclared exception!
      try { 
        FieldNamingPolicy.valueOf("{\"length\":java.lang.Integer@0000000060,\"mark\":java.lang.Integer@0000000063,\"next\":java.lang.Integer@0000000066,\"str\":\"46\"}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.gson.FieldNamingPolicy.{\"length\":java.lang.Integer@0000000060,\"mark\":java.lang.Integer@0000000063,\"next\":java.lang.Integer@0000000066,\"str\":\"46\"}
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
