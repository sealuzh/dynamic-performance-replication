/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 20:10:24 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DoubleKeyMap<HashMap<Object, Integer>, Map<String, HashMap<Object, String>>, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Integer>, Map<String, HashMap<Object, String>>, Integer>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      HashMap<String, HashMap<Object, String>> hashMap1 = new HashMap<String, HashMap<Object, String>>();
      doubleKeyMap0.put(hashMap0, (Map<String, HashMap<Object, String>>) hashMap1, integer0);
      Map<Map<String, HashMap<Object, String>>, Integer> map0 = doubleKeyMap0.remove(hashMap0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Object, Map<Map<String, HashMap<Object, String>>, Object>> hashMap0 = new HashMap<Object, Map<Map<String, HashMap<Object, String>>, Object>>();
      DoubleKeyMap<Object, Map<String, HashMap<Object, String>>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, HashMap<Object, String>>, Object>(hashMap0);
      doubleKeyMap0.put((Object) null, (Map<String, HashMap<Object, String>>) null, (Object) hashMap0);
      Map<Map<String, HashMap<Object, String>>, Object> map0 = doubleKeyMap0.get((Object) null);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<String, HashMap<Integer, String>, String> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Integer, String>, String>();
      String string0 = doubleKeyMap0.remove("A", (HashMap<Integer, String>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      HashMap<Object, Map<HashMap<Object, Object>, Integer>> hashMap0 = new HashMap<Object, Map<HashMap<Object, Object>, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<Object, Object>, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, Object>, Integer>(hashMap0, class0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      Integer integer0 = doubleKeyMap1.remove((Object) doubleKeyMap0, hashMap1);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Map<String, HashMap<Object, String>>, String, Map<String, HashMap<Object, String>>> doubleKeyMap0 = new DoubleKeyMap<Map<String, HashMap<Object, String>>, String, Map<String, HashMap<Object, String>>>();
      Map<String, Map<String, HashMap<Object, String>>> map0 = doubleKeyMap0.remove((Map<String, HashMap<Object, String>>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Object, Object, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<Object, Object>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>();
      Map<String, String> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, Object, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<Object, Object>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      HashMap<Object, Object> hashMap1 = doubleKeyMap0.put((Object) doubleKeyMap1, (Object) doubleKeyMap1, hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Integer, Map<String, HashMap<Object, String>>, Map<String, HashMap<Object, String>>> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<String, HashMap<Object, String>>, Map<String, HashMap<Object, String>>>();
      Integer integer0 = new Integer((-671));
      Map<String, HashMap<Object, String>> map0 = doubleKeyMap0.get(integer0, (Map<String, HashMap<Object, String>>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      DoubleKeyMap<String, String, Map<Object, Map<Map<Map<String, HashMap<Object, String>>, Integer>, Integer>>> doubleKeyMap1 = new DoubleKeyMap<String, String, Map<Object, Map<Map<Map<String, HashMap<Object, String>>, Integer>, Integer>>>();
      Map<Object, Map<Map<Map<String, HashMap<Object, String>>, Integer>, Integer>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, Map<Map<String, HashMap<Object, String>>, Integer>, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, Map<Map<String, HashMap<Object, String>>, Integer>, Integer>(map0, class0);
      HashMap<Map<String, HashMap<Object, String>>, Map<Map<Map<String, HashMap<Object, String>>, Integer>, HashMap<String, Map<String, HashMap<Object, String>>>>> hashMap0 = new HashMap<Map<String, HashMap<Object, String>>, Map<Map<Map<String, HashMap<Object, String>>, Integer>, HashMap<String, Map<String, HashMap<Object, String>>>>>();
      DoubleKeyMap<Map<String, HashMap<Object, String>>, Map<Map<String, HashMap<Object, String>>, Integer>, HashMap<String, Map<String, HashMap<Object, String>>>> doubleKeyMap3 = new DoubleKeyMap<Map<String, HashMap<Object, String>>, Map<Map<String, HashMap<Object, String>>, Integer>, HashMap<String, Map<String, HashMap<Object, String>>>>(hashMap0);
      Map<Map<String, HashMap<Object, String>>, Integer> map1 = doubleKeyMap3.newMap();
      Integer integer0 = doubleKeyMap2.get((Object) doubleKeyMap0, map1);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, HashMap<Object, String>> hashMap0 = new HashMap<String, HashMap<Object, String>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      Map<Object, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(map0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) hashMap0, (Object) null, "2b59\"EXYz*}plxhcP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>((Map<Integer, Map<Integer, String>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, String>, HashMap<Map<String, HashMap<Object, String>>, String>, Map<String, HashMap<Object, String>>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, HashMap<Map<String, HashMap<Object, String>>, String>, Map<String, HashMap<Object, String>>>();
      HashMap<Object, Map<Map<String, HashMap<Object, String>>, Object>> hashMap0 = new HashMap<Object, Map<Map<String, HashMap<Object, String>>, Object>>();
      DoubleKeyMap<Object, Map<String, HashMap<Object, String>>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Map<String, HashMap<Object, String>>, Object>(hashMap0);
      Object object0 = doubleKeyMap1.put((Object) doubleKeyMap0, (Map<String, HashMap<Object, String>>) null, (Object) null);
      Map<Map<String, HashMap<Object, String>>, Object> map0 = doubleKeyMap1.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(2215);
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>();
      doubleKeyMap0.put(integer0, ";%tFZU5\"8,#z1lSi7Y", (Object) integer0);
      Object object0 = doubleKeyMap0.remove(integer0, "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Map<String, HashMap<Object, String>>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Map<String, HashMap<Object, String>>, Object, Object>((Map<Map<String, HashMap<Object, String>>, Map<Object, Object>>) null);
      HashMap<String, HashMap<Object, String>> hashMap0 = new HashMap<String, HashMap<Object, String>>();
      Object object0 = new Object();
      doubleKeyMap0.put((Map<String, HashMap<Object, String>>) hashMap0, (Object) "", object0);
      Integer integer0 = new Integer(0);
      Object object1 = doubleKeyMap0.put((Map<String, HashMap<Object, String>>) hashMap0, (Object) null, (Object) integer0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<Integer, String>, HashMap<Object, Map<String, HashMap<Object, String>>>> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Integer, String>, HashMap<Object, Map<String, HashMap<Object, String>>>>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      HashMap<Object, Map<String, HashMap<Object, String>>> hashMap1 = doubleKeyMap0.get((Object) null, hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<HashMap<Object, Map<String, HashMap<Object, String>>>, Map<String, String>> hashMap0 = new HashMap<HashMap<Object, Map<String, HashMap<Object, String>>>, Map<String, String>>();
      DoubleKeyMap<HashMap<Object, Map<String, HashMap<Object, String>>>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Map<String, HashMap<Object, String>>>, String, String>(hashMap0);
      HashMap<Object, Map<String, HashMap<Object, String>>> hashMap1 = new HashMap<Object, Map<String, HashMap<Object, String>>>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap0.put(hashMap1, hashMap2);
      String string0 = doubleKeyMap0.get(hashMap1, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, HashMap<Object, Map<String, HashMap<Object, String>>>, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, Map<String, HashMap<Object, String>>>, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>();
      doubleKeyMap0.put((Integer) null, "8v", (Object) ";%tFZU5\"8,#z1lSi7Y");
      Object object0 = doubleKeyMap0.remove((Integer) null, "8v");
      assertEquals(";%tFZU5\"8,#z1lSi7Y", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Object, Map<Map<String, HashMap<Object, String>>, Object>> hashMap0 = new HashMap<Object, Map<Map<String, HashMap<Object, String>>, Object>>();
      DoubleKeyMap<Object, Map<String, HashMap<Object, String>>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, HashMap<Object, String>>, Object>(hashMap0);
      Object object0 = new Object();
      Map<Map<String, HashMap<Object, String>>, Object> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      DoubleKeyMap<HashMap<String, String>, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, String>, Object, Integer>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Integer integer0 = doubleKeyMap1.get(hashMap0, (Object) doubleKeyMap0);
      assertNull(integer0);
  }
}
