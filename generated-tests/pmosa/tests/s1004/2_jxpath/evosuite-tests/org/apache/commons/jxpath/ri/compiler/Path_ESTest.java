/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 01:11:19 GMT 2018
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.function.Consumer;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperation;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Path_ESTest extends Path_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[14];
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1086));
      Step step0 = new Step((-1086), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      // Undeclared exception!
      try { 
        locationPath0.getSingleNodePointerForSteps((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = true;
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      locationPath0.computeContextDependent();
      int int0 = 0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      locationPath0.isSimpleStep(step0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate0, expressionArray0, (Step[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        expressionPath0.expressionPath((EvalContext) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.LocationPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("M.E#@1p\"kwaKv? )h}|");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray0 = new Expression[1];
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      Step step0 = new Step(3590, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      boolean boolean0 = locationPath0.computeContextDependent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant constant0 = new Constant("");
      Step[] stepArray0 = new Step[8];
      Step step0 = new Step(0, (NodeTest) null, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(0, (NodeTest) null, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(0, (NodeTest) null, (Expression[]) null);
      stepArray0[2] = step2;
      constant0.toString();
      Step step3 = new Step(25, (NodeTest) null, (Expression[]) null);
      stepArray0[3] = step3;
      step0.isContextDependent();
      Step step4 = new Step(25, (NodeTest) null, (Expression[]) null);
      stepArray0[4] = step4;
      Step step5 = new Step((-861), (NodeTest) null, (Expression[]) null);
      stepArray0[5] = step5;
      step5.toString();
      Step step6 = new Step(32, (NodeTest) null, (Expression[]) null);
      stepArray0[6] = step6;
      Step step7 = new Step((-861), (NodeTest) null, (Expression[]) null);
      stepArray0[7] = step7;
      step7.toString();
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, (Expression[]) null, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, 25, (NodeTest) null);
      expressionPath0.evalSteps((EvalContext) null);
      expressionPath0.toString();
      expressionPath0.isSimpleStep(step0);
      Step step8 = new Step((-3149), (NodeTest) null, (Expression[]) null);
      boolean boolean0 = expressionPath0.isSimpleStep(step8);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1086));
      Step step0 = new Step((-1086), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      // Undeclared exception!
      try { 
        locationPath0.evalSteps((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QName qName0 = new QName("TK`iN0n-rU@Q=", "TK`iN0n-rU@Q=");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, variableReference0);
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      Constant constant0 = new Constant("TK`iN0n-rU@Q=");
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      expressionArray0[6] = (Expression) coreOperationGreaterThan0;
      Step[] stepArray0 = new Step[9];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2993));
      Step step0 = new Step((-1974), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-2993), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(5, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-1974), nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(11, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-2993), nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(5, nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(11, nodeTypeTest0, expressionArray0);
      stepArray0[7] = step7;
      Step step8 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray0, stepArray0);
      expressionPath0.isSimplePath();
      boolean boolean0 = expressionPath0.isSimplePath();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("`");
      Step step0 = new Step(1067, processingInstructionTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(1067, processingInstructionTest0, (Expression[]) null);
      step1.toString();
      step1.isContextDependent();
      step0.isContextDependent();
      step1.isContextDependent();
      stepArray0[1] = step1;
      Expression[] expressionArray0 = null;
      Step step2 = new Step(1067, processingInstructionTest0, (Expression[]) null);
      step0.toString();
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      EvalContext evalContext0 = null;
      locationPath0.isSimpleStep(step0);
      locationPath0.areBasicPredicates((Expression[]) null);
      // Undeclared exception!
      try { 
        locationPath0.buildContextChain((EvalContext) null, 1067, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant constant0 = new Constant("");
      Step[] stepArray0 = new Step[8];
      NodeTest nodeTest0 = null;
      Step step0 = new Step(0, (NodeTest) null, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(0, (NodeTest) null, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(0, (NodeTest) null, (Expression[]) null);
      stepArray0[2] = step2;
      constant0.toString();
      Step step3 = new Step(25, (NodeTest) null, (Expression[]) null);
      stepArray0[3] = step3;
      step0.isContextDependent();
      Step step4 = new Step(25, (NodeTest) null, (Expression[]) null);
      stepArray0[4] = step4;
      Step step5 = new Step((-861), (NodeTest) null, (Expression[]) null);
      stepArray0[5] = step5;
      step5.toString();
      int int0 = 32;
      Step step6 = new Step(32, (NodeTest) null, (Expression[]) null);
      stepArray0[6] = step6;
      Step step7 = new Step((-861), (NodeTest) null, (Expression[]) null);
      stepArray0[7] = step7;
      step7.toString();
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, (Expression[]) null, stepArray0);
      EvalContext evalContext0 = null;
      expressionPath0.createContextForStep((EvalContext) null, 25, (NodeTest) null);
      expressionPath0.toString();
      expressionPath0.isSimpleStep(step0);
      Step step8 = new Step((-3149), (NodeTest) null, (Expression[]) null);
      expressionPath0.isSimpleStep(step8);
      // Undeclared exception!
      try { 
        expressionPath0.getSingleNodePointerForSteps((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant constant0 = new Constant("");
      Step[] stepArray0 = new Step[8];
      Step step0 = new Step(0, (NodeTest) null, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(0, (NodeTest) null, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(0, (NodeTest) null, (Expression[]) null);
      stepArray0[2] = step2;
      constant0.toString();
      Step step3 = new Step(25, (NodeTest) null, (Expression[]) null);
      stepArray0[3] = step3;
      step0.isContextDependent();
      Step step4 = new Step(25, (NodeTest) null, (Expression[]) null);
      stepArray0[4] = step4;
      Step step5 = new Step((-861), (NodeTest) null, (Expression[]) null);
      step1.toString();
      Step step6 = new Step(5, (NodeTest) null, (Expression[]) null);
      Step step7 = new Step(14, (NodeTest) null, (Expression[]) null);
      step3.toString();
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 5, (NodeTest) null);
      assertNotNull(evalContext0);
      
      expressionPath0.toString();
      expressionPath0.isSimpleStep(step2);
      Step step8 = new Step(25, (NodeTest) null, (Expression[]) null);
      boolean boolean0 = expressionPath0.isSimpleStep(step1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      Step[] stepArray0 = new Step[8];
      Step step0 = new Step(2922, (NodeTest) null, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(2922, (NodeTest) null, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(2922, (NodeTest) null, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step(2922, (NodeTest) null, (Expression[]) null);
      stepArray0[3] = step3;
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = null;
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      expressionArray0[5] = (Expression) coreOperationSubtract0;
      expressionArray0[6] = null;
      expressionArray0[7] = null;
      QName qName0 = new QName("9@3(L{(It", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[8] = (Expression) variableReference0;
      Step step4 = new Step(2922, (NodeTest) null, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(61, (NodeTest) null, (Expression[]) null);
      stepArray0[5] = step5;
      Step step6 = new Step(1201, (NodeTest) null, (Expression[]) null);
      stepArray0[6] = step6;
      Step step7 = new Step(1201, (NodeTest) null, (Expression[]) null);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationSubtract0, (Expression[]) null, stepArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      expressionPath0.evalSteps(nodeSetContext0);
      expressionPath0.createContextForStep((EvalContext) null, 15, (NodeTest) null);
      // Undeclared exception!
      try { 
        expressionPath0.expressionPath((EvalContext) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      Step[] stepArray0 = new Step[5];
      NodeTest nodeTest0 = null;
      Step step0 = new Step(2, (NodeTest) null, expressionArray0);
      stepArray0[1] = step0;
      Expression[] expressionArray1 = new Expression[4];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreFunction0);
      expressionArray1[0] = (Expression) coreOperationDivide0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationGreaterThanOrEqual0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      expressionPath0.createContextForStep((EvalContext) null, (-401), (NodeTest) null);
      expressionPath0.toString();
      Step step1 = new Step(1335, (NodeTest) null, expressionArray1);
      expressionPath0.isSimpleStep(step1);
      Step step2 = new Step(14, (NodeTest) null, expressionArray0);
      expressionPath0.isSimpleStep(step0);
      // Undeclared exception!
      try { 
        expressionPath0.getSingleNodePointerForSteps((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction((-3555), expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[2] = expression0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, coreOperationLessThan0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, coreOperationAdd0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationGreaterThan0, coreOperationGreaterThan0);
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName((String) null, "^");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-3555), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-3555), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMultiply0, expressionArray0, stepArray0);
      expressionPath0.isSimpleExpressionPath();
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      coreOperationMultiply0.args = expressionArray0;
      EvalContext evalContext0 = expressionPath0.buildContextChain(attributeContext0, (-817), false);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(evalContext0, processingInstructionTest0, true);
      EvalContext evalContext1 = expressionPath0.evalSteps(precedingOrFollowingContext0);
      assertEquals(0, evalContext1.getPosition());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant constant0 = new Constant("");
      Step[] stepArray0 = new Step[8];
      Step step0 = new Step(0, (NodeTest) null, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(0, (NodeTest) null, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(0, (NodeTest) null, (Expression[]) null);
      stepArray0[2] = step2;
      constant0.toString();
      Step step3 = new Step(25, (NodeTest) null, (Expression[]) null);
      stepArray0[3] = step3;
      step0.isContextDependent();
      Step step4 = new Step(25, (NodeTest) null, (Expression[]) null);
      stepArray0[4] = step4;
      Step step5 = new Step((-861), (NodeTest) null, (Expression[]) null);
      stepArray0[5] = step5;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationDivide0, expressionArray0, stepArray0);
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      locationPath0.toString();
      boolean boolean0 = locationPath0.areBasicPredicates(expressionArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant constant0 = new Constant("");
      Step[] stepArray0 = new Step[8];
      Step step0 = new Step(0, (NodeTest) null, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(0, (NodeTest) null, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(0, (NodeTest) null, (Expression[]) null);
      stepArray0[2] = step2;
      constant0.toString();
      Step step3 = new Step(25, (NodeTest) null, (Expression[]) null);
      stepArray0[3] = step3;
      step0.isContextDependent();
      Step step4 = new Step(25, (NodeTest) null, (Expression[]) null);
      stepArray0[4] = step4;
      Step step5 = new Step((-861), (NodeTest) null, (Expression[]) null);
      stepArray0[5] = step5;
      Expression[] expressionArray0 = new Expression[0];
      Step step6 = new Step(25, (NodeTest) null, expressionArray0);
      Step step7 = new Step(0, (NodeTest) null, expressionArray0);
      Step step8 = new Step((-1566), (NodeTest) null, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, (Expression[]) null, stepArray0);
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      locationPath0.toString();
      locationPath0.areBasicPredicates(expressionArray0);
      // Undeclared exception!
      try { 
        locationPath0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      Step[] stepArray0 = new Step[5];
      NodeTest nodeTest0 = null;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, coreOperationAdd0);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = expressionPath0.createContextForStep((EvalContext) null, 2, (NodeTest) null);
      expressionPath0.toString();
      Step step0 = new Step((-403), (NodeTest) null, expressionArray0);
      expressionPath0.isSimpleStep(step0);
      int int0 = 2;
      Step step1 = new Step(2, (NodeTest) null, expressionArray0);
      expressionPath0.isSimpleStep(step1);
      Step[] stepArray1 = new Step[2];
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray1);
      // Undeclared exception!
      try { 
        expressionPath1.getSingleNodePointerForSteps(evalContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      locationPath0.computeContextDependent();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      Step step1 = new Step(0, nodeTypeTest0, expressionArray0);
      Step step2 = new Step((-1621), nodeTypeTest0, expressionArray0);
      step2.toString();
      int int0 = 32;
      Step step3 = new Step((-4611), nodeTypeTest0, expressionArray0);
      Step step4 = new Step((-1621), nodeTypeTest0, expressionArray0);
      step3.toString();
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, (Step[]) null);
      EvalContext evalContext0 = null;
      ExpressionPath expressionPath1 = new ExpressionPath(locationPath0, expressionArray0, (Step[]) null);
      expressionPath1.createContextForStep((EvalContext) null, 6, nodeTypeTest0);
      expressionPath1.toString();
      expressionPath1.isSimpleStep(step3);
      Step step5 = new Step(2, nodeTypeTest0, expressionArray0);
      boolean boolean0 = JXPathContextReferenceImpl.USE_SOFT_CACHE;
      // Undeclared exception!
      try { 
        expressionPath1.getSingleNodePointerForSteps((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      Step[] stepArray0 = new Step[5];
      NodeTest nodeTest0 = null;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, coreOperationAdd0);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = expressionPath0.createContextForStep((EvalContext) null, 7, (NodeTest) null);
      expressionPath0.toString();
      Step step0 = new Step((-403), (NodeTest) null, expressionArray0);
      int int0 = 2;
      Step step1 = new Step(2, (NodeTest) null, expressionArray0);
      expressionPath0.isSimpleStep(step1);
      Step[] stepArray1 = new Step[2];
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray1);
      // Undeclared exception!
      try { 
        expressionPath1.getSingleNodePointerForSteps(evalContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant constant0 = new Constant("");
      Step[] stepArray0 = new Step[8];
      NodeTest nodeTest0 = null;
      Step step0 = new Step(0, (NodeTest) null, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(0, (NodeTest) null, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(0, (NodeTest) null, (Expression[]) null);
      stepArray0[2] = step2;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      int int0 = Float.BYTES;
      Constant constant1 = new Constant(4);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant1);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMultiply0, (Expression[]) null, stepArray0);
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = expressionPath0.createContextForStep((EvalContext) null, 4, (NodeTest) null);
      expressionPath0.toString();
      Step step3 = new Step(25, (NodeTest) null, (Expression[]) null);
      Step step4 = new Step(3031, (NodeTest) null, (Expression[]) null);
      expressionPath0.isSimpleStep(step1);
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationMultiply0, (Expression[]) null, stepArray0);
      // Undeclared exception!
      try { 
        expressionPath1.getSingleNodePointerForSteps(evalContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction((-3555), expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[2] = expression0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, coreOperationLessThan0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, coreOperationAdd0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationGreaterThan0, coreOperationGreaterThan0);
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName((String) null, "^");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-3555), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-3555), nodeNameTest0, expressionArray0);
      Step step2 = new Step(8, nodeNameTest0, expressionArray0);
      Step step3 = new Step(14, nodeNameTest0, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray0, stepArray0);
      boolean boolean0 = expressionPath0.isSimpleExpressionPath();
      expressionPath0.createContextForStep((EvalContext) null, 8, nodeNameTest0);
      expressionPath0.toString();
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      expressionArray1[1] = (Expression) expressionPath0;
      expressionArray1[2] = (Expression) coreOperationDivide0;
      expressionArray1[3] = (Expression) expressionPath0;
      expressionArray1[4] = (Expression) expressionPath0;
      Step step4 = new Step(200, nodeNameTest0, expressionArray1);
      boolean boolean1 = expressionPath0.isSimpleStep(step0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) locationPath0;
      expressionArray0[1] = (Expression) locationPath0;
      locationPath0.areBasicPredicates(expressionArray0);
      locationPath0.computeContextDependent();
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      expressionPath0.isSimpleExpressionPath();
      QName qName0 = new QName("org.apache.commons.jxpath.util.ValueUtils");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.BasicVariables");
      expressionPath0.createContextForStep((EvalContext) null, 1, nodeNameTest0);
      expressionPath0.toString();
      Step step0 = new Step(1, nodeNameTest0, expressionArray0);
      // Undeclared exception!
      try { 
        expressionPath0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.LocationPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = (-1269);
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      coreFunction0.getArg2();
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, (Expression) null);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMod0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMod0, coreOperationMod0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction1 = new CoreFunction((-1269), expressionArray0);
      NodeTest nodeTest0 = null;
      Step[] stepArray0 = new Step[4];
      Step step0 = new Step((-1269), (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(7, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-1269), (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(153, (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      expressionPath0.createContextForStep((EvalContext) null, (-1794), (NodeTest) null);
      expressionPath0.toString();
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, (String) null);
      Step step4 = new Step(5, nodeNameTest0, expressionArray0);
      // Undeclared exception!
      try { 
        expressionPath0.isSimpleStep(step4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.NodeNameTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Constant constant0 = new Constant("");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2993));
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      NodeTest nodeTest0 = null;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      Step[] stepArray0 = new Step[4];
      Step step0 = new Step(1, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-2993), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(377, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(377, (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationDivide0, expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, (-2993), (NodeTest) null);
      Step step4 = new Step(615, nodeTypeTest0, expressionArray0);
      Step step5 = new Step(1, nodeTypeTest0, expressionArray0);
      Step step6 = new Step(2, nodeTypeTest0, expressionArray0);
      expressionPath0.isSimpleStep(step6);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[3]);
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray0);
      // Undeclared exception!
      try { 
        expressionPath1.getSingleNodePointerForSteps((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[19];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      QName qName0 = new QName("ZOBctW;+0R");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(2, nodeNameTest0, expressionArray0);
      // Undeclared exception!
      try { 
        locationPath0.isSimpleStep(step0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) locationPath0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("!OxJm+X|");
      Step step0 = new Step((-861), processingInstructionTest0, expressionArray0);
      step0.toString();
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      int int0 = (-2337);
      expressionPath0.createContextForStep((EvalContext) null, (-2337), processingInstructionTest0);
      expressionPath0.toString();
      Step step1 = new Step(5, processingInstructionTest0, expressionArray0);
      ExpressionPath expressionPath1 = new ExpressionPath(expressionPath0, expressionArray0, stepArray0);
      QName qName0 = new QName("p[]y+>k7I<8|=2CJO3O");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "wX`2L");
      Step step2 = new Step(5, nodeNameTest0, expressionArray0);
      // Undeclared exception!
      try { 
        expressionPath1.isSimpleStep(step2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction((-3555), expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[2] = expression0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, coreOperationLessThan0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, coreOperationAdd0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationGreaterThan0, coreOperationGreaterThan0);
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName((String) null, "^");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-3555), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-3555), nodeNameTest0, expressionArray0);
      Step step2 = new Step(1, nodeNameTest0, expressionArray0);
      Step step3 = new Step(1, nodeNameTest0, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray0);
      expressionPath0.isSimpleExpressionPath();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(" 5;=Kj48g}!5ZR");
      expressionPath0.createContextForStep((EvalContext) null, 13, processingInstructionTest0);
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      // Undeclared exception!
      try { 
        expressionPath1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2993));
      Step step0 = new Step((-2993), (NodeTest) null, expressionArray0);
      Step step1 = new Step((-2993), nodeTypeTest0, expressionArray0);
      nodeTypeTest0.toString();
      Step step2 = new Step(377, nodeTypeTest0, expressionArray0);
      Step step3 = new Step(0, (NodeTest) null, expressionArray0);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(890);
      Step step4 = new Step((-2993), nodeTypeTest1, expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, coreOperationUnion0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationUnion0, coreOperationLessThan0);
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray1);
      expressionArray1[1] = (Expression) coreOperationUnion1;
      Step step5 = new Step(0, nodeTypeTest0, expressionArray1);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationUnion1, expressionArray1[1]);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationEqual0, expressionArray1[1]);
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      ParentContext parentContext0 = new ParentContext(unionContext0, nodeTypeTest0);
      AttributeContext attributeContext0 = new AttributeContext(parentContext0, nodeTypeTest1);
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, expressionArray1[0]);
      EvalContext evalContext0 = locationPath0.createContextForStep(predicateContext0, 11, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreOperationGreaterThan0.compute(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationUnion", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction((-2993), expressionArray0);
      coreFunction0.getArg1();
      expressionArray0[0] = null;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, (Expression) null);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      Expression expression0 = coreFunction1.getArg2();
      expressionArray0[2] = expression0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, coreOperationMultiply0);
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[5] = (Expression) locationPath0;
      CoreFunction coreFunction2 = new CoreFunction(2, expressionArray0);
      NodeTest nodeTest0 = null;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[3], expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      expressionPath0.createContextForStep((EvalContext) null, 9, (NodeTest) null);
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Step[] stepArray0 = new Step[14];
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("/}");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], constant0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-386), expressionArray0);
      NodeTest nodeTest0 = null;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      expressionPath0.createContextForStep((EvalContext) null, 12, (NodeTest) null);
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Step[] stepArray0 = null;
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(locationPath0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, coreOperationLessThan0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      // Undeclared exception!
      try { 
        locationPath0.areBasicPredicates(expressionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Step[] stepArray0 = new Step[14];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = new Step(1, nodeTypeTest0, expressionArray0);
      locationPath0.isSimpleStep(step0);
      // Undeclared exception!
      try { 
        locationPath0.searchForPath((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      int int0 = CoreOperation.RELATIONAL_EXPR_PRECEDENCE;
      Constant constant0 = new Constant(3);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationNegate0, expressionArray0[1]);
      expressionArray0[3] = (Expression) nameAttributeTest1;
      constant0.toString();
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationNegate0, nameAttributeTest1);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest1, expressionArray0, (Step[]) null);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[1], coreOperationEqual0);
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationGreaterThan0, expressionArray0, (Step[]) null);
      LocationPath locationPath1 = new LocationPath(true, (Step[]) null);
      ExpressionPath expressionPath2 = new ExpressionPath(locationPath1, expressionArray0, (Step[]) null);
      EvalContext evalContext0 = expressionPath2.createContextForStep((EvalContext) null, 3, (NodeTest) null);
      DescendantContext descendantContext0 = new DescendantContext(evalContext0, true, (NodeTest) null);
      assertEquals(1, descendantContext0.getDocumentOrder());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      ExpressionPath expressionPath0 = new ExpressionPath(expression0, expressionArray0, (Step[]) null);
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 10, (NodeTest) null);
      assertEquals(0, evalContext0.getPosition());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step(2, nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(2, nodeNameTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(2, nodeNameTest0, (Expression[]) null);
      step2.toString();
      step2.toString();
      stepArray0[2] = step2;
      step1.toString();
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      locationPath0.computeContextDependent();
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, (Expression[]) null, stepArray0);
      expressionPath0.isSimpleExpressionPath();
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      step2.toString();
      unionContext0.getValue();
      // Undeclared exception!
      try { 
        locationPath0.buildContextChain(unionContext0, 215, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, rootContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      BeanPointer beanPointer0 = (BeanPointer)locationPath0.searchForPath(evalContext0);
      assertEquals(1, beanPointer0.getLength());
  }
}
