/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 06 03:11:42 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, (-359), (-359));
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("y%=BT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(stringWriter0);
      JSONObject jSONObject2 = jSONObject1.append("istoString", jSONObject0);
      jSONObject2.append("istoString", "istoString");
      assertEquals(3, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = JSONObject.quote("V\"_");
      assertEquals("\"V\\\"_\"", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "OnrKBB8G[z[5De~:");
      jSONObject0.optBoolean("");
      jSONObject0.toJSONArray((JSONArray) null);
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      JSONObject.quote("");
      jSONObject1.remove("CW|Uduo");
      jSONObject0.put("", false);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("]rJ`Bv#$i", 4123.0);
      jSONObject0.append("AONeMJQ\"xV>Y<<,", "AONeMJQ\"xV>Y<<,");
      boolean boolean0 = jSONObject0.optBoolean("AONeMJQ\"xV>Y<<,", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(1);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", jSONArray0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JS^NObject$1", (Object) boolean0);
      Object object0 = new Object();
      boolean boolean1 = jSONObject1.getBoolean("wheel.json.JS^NObject$1");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("fo", (Collection) null);
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject1.getJSONArray("Hs,fc>jZ 6|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Hs,fc>jZ 6|\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("xM", 1L);
      jSONObject0.getLong("xM");
      String string0 = "Unterminated sring";
      jSONObject0.put("Unterminated sring", 1L);
      JSONObject jSONObject2 = jSONObject1.put("Unterminated sring", true);
      jSONObject2.optBoolean("\">x9eS");
      jSONObject2.isNull("y^");
      JSONObject jSONObject3 = jSONObject1.put("toU", 2283);
      Object object0 = new Object();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.getInt("xM");
      jSONObject3.length();
      try { 
        jSONObject1.getBoolean("y^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"y^\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "(,g: l^P9V2~V");
      jSONObject0.toString(12);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Cm/$b";
      stringArray0[1] = "[]";
      stringArray0[2] = "(T4h#SIRmhX";
      stringArray0[3] = "8@\u0004z1|(";
      int int0 = jSONObject0.optInt("Cm/$b", 47);
      assertEquals(47, int0);
      
      stringArray0[4] = "{}";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optString("Cm/$b", "{}");
      JSONObject jSONObject2 = jSONObject0.put("Cm/$b", (Object) null);
      JSONObject jSONObject3 = new JSONObject();
      jSONObject2.append("000", jSONObject3);
      jSONObject2.toString(79, 40);
      String[] stringArray1 = JSONObject.getNames(jSONObject1);
      assertNull(stringArray1);
      
      jSONObject1.optLong("]^GqXRBQ0+/AN'T", 2479L);
      jSONObject1.remove((String) null);
      JSONObject jSONObject4 = jSONObject0.put("lo", false);
      jSONObject4.length();
      jSONObject1.optString((String) null);
      String string0 = jSONObject1.optString("lo");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-1.0F));
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject.doubleToString((-1.0F));
      Short short0 = new Short((short) (-1228));
      Integer integer0 = new Integer((short)2904);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "-1";
      JSONObject jSONObject2 = new JSONObject(integer0, stringArray0);
      Object object0 = new Object();
      jSONObject2.accumulate("z!Q$-bi!`0/Q", object0);
      assertEquals(1, jSONObject2.length());
      
      JSONObject.getNames(jSONObject1);
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      jSONObject3.optString("getappend", "[XHav(QY");
      String string0 = jSONObject1.toString(2636);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray1 = jSONArray0.put((Collection) linkedList0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertNotNull(jSONArray2);
      assertNotSame(jSONArray2, jSONArray0);
      assertEquals(1, jSONArray2.length());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("aMCMD:ND?J-)m= $JXV");
      JSONObject.quote("aMCMD:ND?J-)m= $JXV");
      Boolean boolean0 = new Boolean("dKV<nV_J`(!c.!");
      try { 
        jSONObject0.getJSONObject("\"aMCMD:ND?J-)m= $JXV\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"aMCMD:ND?J-)m= $JXV\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "{/";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{/");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Byte byte0 = new Byte((byte)126);
      JSONObject.getNames((Object) byte0);
      JSONObject jSONObject0 = new JSONObject();
      Byte.compare((byte)126, (byte)55);
      Byte.toUnsignedInt((byte)55);
      byte byte1 = (byte)97;
      Byte.toUnsignedInt((byte)97);
      String string0 = ",A_de5$;";
      jSONObject0.optLong(",A_de5$;");
      JSONObject.valueToString(byte0);
      jSONObject0.has("Z/y_osR$F");
      try { 
        jSONObject0.getString(",A_de5$;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",A_de5$;\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1";
      stringArray0[1] = "1";
      JSONObject jSONObject0 = new JSONObject("1", stringArray0);
      jSONObject0.keys();
      String string1 = null;
      jSONObject0.optBoolean("1", false);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-152.66892682242));
      assertEquals("-152.66892682242", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = JSONObject.quote("=VBSPb_7']</D{7s*");
      assertEquals("\"=VBSPb_7']<\\/D{7s*\"", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.accumulate("`hQCO", jSONArray0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject.quote("{}");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optDouble("\"{}\"");
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Map) null);
      jSONObject1.optJSONObject("{}");
      JSONObject jSONObject2 = jSONObject0.put("", (Object) "{}");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "pA6*F";
      stringArray0[1] = "pA6*F";
      stringArray0[2] = "pA6*F";
      stringArray0[3] = "\"{}\"";
      stringArray0[4] = "Unterminated string";
      stringArray0[5] = "\"{}\"";
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      Boolean boolean0 = new Boolean("\"{}\"");
      Boolean boolean1 = new Boolean("pA6*F");
      jSONObject0.accumulate("Unterminated string", boolean1);
      JSONObject jSONObject4 = new JSONObject();
      String[] stringArray1 = JSONObject.getNames(jSONObject4);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Unterminated string", 0L);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONObject", "wheel.json.JSONObject");
      JSONObject.doubleToString((-152.66892682242));
      jSONObject0.optJSONArray("wheel.json.JSONObject");
      Short short0 = new Short((short) (-1726));
      jSONObject1.accumulate("wa", (Object) null);
      JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("aMCMD:ND?J-)m= $JXV");
      JSONObject.quote("aMCMD:ND?J-)m= $JXV");
      Boolean boolean0 = new Boolean("dKV<nV_J`(!c.!");
      hashMap0.put((Byte) null, boolean0);
      jSONObject0.remove("W 3%,p.'Q2+qu");
      JSONObject jSONObject1 = jSONObject0.put("ha", (-1062.641579));
      JSONObject.getNames(jSONObject0);
      jSONObject1.optDouble("(0ULj#gxk9s]xU7^", 0.0);
      try { 
        jSONObject1.append("ha", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[ha] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "_]yi=U";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.remove((String) null);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      long long0 = jSONObject0.optLong("", (-2256L));
      assertEquals((-2256L), long0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Float float0 = new Float(568.76835034892);
      String[] stringArray0 = new String[3];
      Float.sum(2485.0305F, 1.0F);
      stringArray0[0] = "wheel.json.JSONException";
      stringArray0[1] = "false";
      stringArray0[2] = "}UyS-GK-nOAj3K";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.optBoolean((String) null);
      jSONObject0.keys();
      try { 
        jSONObject0.getJSONObject("(2;l5F5xH%H1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(2;l5F5xH%H1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("+YJkP*`ptx05+c!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"+YJkP*`ptx05+c!\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Float float0 = new Float(1186.3F);
      String[] stringArray0 = new String[2];
      Float.max(1186.3F, 1186.3F);
      stringArray0[0] = "";
      stringArray0[1] = ",\n";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.min(2849.0F, (-1534.796F));
      Float.min((-1534.796F), 2849.0F);
      JSONObject jSONObject1 = jSONObject0.put("", 2088);
      jSONObject1.toString((-390), 10);
      JSONObject jSONObject2 = jSONObject1.put(",\n", (-2064L));
      jSONObject0.optInt(",\n", (-390));
      jSONObject0.optJSONArray("");
      JSONObject.quote("JSONArray initial value should be a string or collection or array.");
      jSONObject0.put(",\n", 2088);
      jSONObject2.toJSONArray((JSONArray) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject3 = jSONObject2.put("JSONArray initial value should be a string or collection or array.", (Collection) linkedList0);
      try { 
        jSONObject3.append("", "{\"java.lang.String@0000000002\": java.lang.Integer@0000000003}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("isdoubleToLongBits");
      assertNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject0.accumulate("isdoubleToLongBits", (Object) null);
      assertEquals(0, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("[", 14);
      jSONObject1.optInt("[");
      try { 
        jSONObject1.getJSONArray("' and instead saw '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"' and instead saw '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("xM", 1L);
      jSONObject0.getLong("xM");
      jSONObject0.toString();
      String string0 = "isfloatToIntBits";
      jSONObject0.put("{}", (-1195));
      jSONObject0.optDouble("Unterminated string", 1173.3);
      try { 
        jSONObject1.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("isfloatValue", (Collection) linkedList0);
      jSONObject1.names();
      String string0 = JSONObject.doubleToString(39.9860500269);
      String string1 = jSONObject1.optString("isfloatValue");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "aMCMD:ND?J-)m= $JXV";
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      short short0 = (short)805;
      Short.toUnsignedLong((short)805);
      String string1 = "isfloatToIntBits";
      JSONObject jSONObject1 = jSONObject0.put("{}", 97);
      double double0 = new Long(805L);
      try { 
        jSONObject1.getJSONArray(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("0", "0");
      JSONObject jSONObject1 = jSONObject0.put("QrL", (Object) "QrL");
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      JSONObject.quote("CP!duq6N}");
      JSONArray jSONArray0 = jSONObject1.getJSONArray("0");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      JSONObject jSONObject1 = new JSONObject("{}");
      jSONObject0.accumulate("{}", jSONObject1);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.optInt((String) null);
      int int1 = 4;
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("]rJ`Bv#$i", 4123.0);
      Byte byte0 = new Byte((byte) (-54));
      jSONObject0.append("H2[:LdzutEX", byte0);
      JSONObject jSONObject1 = jSONObject0.append("AONeMJQ\"xV>Y<<,", "AONeMJQ\"xV>Y<<,");
      Boolean boolean0 = Boolean.valueOf("]rJ`Bv#$i");
      jSONObject1.accumulate("AONeMJQ\"xV>Y<<,", boolean0);
      JSONObject jSONObject2 = new JSONObject();
      try { 
        jSONObject1.getBoolean("000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"000\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Short short0 = new Short((short)1447);
      JSONObject jSONObject0 = new JSONObject(short0);
      Short.compare((short)46, (short)92);
      try { 
        jSONObject0.put("issum", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Integer integer0 = new Integer((-1872));
      JSONObject jSONObject0 = new JSONObject(integer0);
      try { 
        jSONObject0.getJSONObject("Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null key.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Map) hashMap0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      Float float0 = new Float((-2853.799860806454));
      JSONObject jSONObject1 = jSONObject0.putOpt("/", float0);
      jSONObject1.optString("/", "");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Short short0 = new Short((short) (-1915));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.keys();
      Short.compare((short) (-1468), (short) (-1468));
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put("isfloatToIntBits", (int) (short) (-1915));
      jSONObject1.put("put", (long) (short) (-1915));
      jSONObject1.optDouble("isfloatToIntBits", (double) (short)1);
      JSONObject.valueToString(short0, 2310, (short) (-1468));
      jSONObject1.toString(34, 84);
      try { 
        jSONObject1.getJSONArray("isfloatToIntBits");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isfloatToIntBits\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "wheel.json.JSONTokener";
      stringArray0[1] = "wheel.json.JSONTokener";
      stringArray0[2] = "wheel.json.JSONTokener";
      stringArray0[3] = "wheel.json.JSONTokener";
      stringArray0[4] = "wheel.json.JSONTokener";
      JSONObject jSONObject0 = new JSONObject("wheel.json.JSONTokener", stringArray0);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      jSONObject0.optInt("", (-611));
      JSONObject jSONObject1 = jSONObject0.put(" of ", (Map) hashMap0);
      jSONObject0.put("wheel.json.JSONTokener", 5300.899333746578);
      jSONObject1.optDouble("796.9962284710", 5300.899333746578);
      JSONObject jSONObject2 = jSONObject1.put("d/'A_ =t05h`n", (Map) hashMap0);
      JSONObject jSONObject3 = jSONObject2.put("0", (Map) hashMap0);
      jSONObject0.opt("wheel.json.JSONTokener");
      jSONObject1.getString(" of ");
      jSONObject2.optDouble("0");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      Float float0 = new Float((double) (-611));
      jSONObject3.putOpt("false", float0);
      jSONObject1.length();
      try { 
        jSONObject1.getLong("OB^{aJVMAe9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"OB^{aJVMAe9\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "OnrKBB8G[z[5De~:");
      String string0 = "";
      jSONObject0.optBoolean("");
      String string1 = "";
      jSONObject0.toJSONArray((JSONArray) null);
      try { 
        jSONObject0.get("(q5zm^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(q5zm^\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      JSONObject jSONObject0 = new JSONObject(byte0);
      Integer integer0 = new Integer((byte) (-81));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, (byte) (-81), 1396);
      Boolean boolean0 = Boolean.FALSE;
      Short short0 = new Short((short)8);
      JSONObject jSONObject1 = new JSONObject(short0);
      Integer integer1 = new Integer(47);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ">uNn";
      String string0 = "A+Y";
      stringArray0[1] = "A+Y";
      stringArray0[2] = "";
      stringArray0[3] = "8G&FOl4~";
      stringArray0[4] = "N!DRaXiV1";
      JSONObject jSONObject0 = new JSONObject(byte1, stringArray0);
      jSONObject0.put("", (int) (byte)0);
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONTokener");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of wheel.json.JSONTokener
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("wheel.json.JSONObject", "wheel.json.JSONObject");
      jSONObject0.optInt("wheel.json.JSONObject", 32);
      Float.min(32, 32);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = new JSONObject(boolean0);
      JSONObject jSONObject2 = jSONObject1.put("gettoUnsignedInt", 11);
      jSONObject0.toString(14, 10);
      JSONObject jSONObject3 = jSONObject1.put("wheel.json.JSONObject", 0L);
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject4 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(1.0);
      hashMap0.put(float0, "gettoUnsignedInt");
      jSONObject0.optJSONArray("{\"java.lang.String@0000000002\": \"java.lang.String@0000000002\"}");
      JSONObject.quote("gettoUnsignedInt");
      jSONObject4.put("{\"java.lang.String@0000000002\": \"java.lang.String@0000000002\"}", 78);
      Integer integer0 = new Integer(101);
      jSONObject2.getInt("wheel.json.JSONObject");
      jSONObject3.length();
      jSONObject2.optLong("oEA?HM*O{N4WMj{fZ=", 0L);
      assertEquals(3, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+Afmv oiN{o~+j}Q");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      jSONObject0.toString(1355);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject.doubleToString(1.0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1";
      stringArray0[1] = "1";
      JSONObject jSONObject0 = new JSONObject("1", stringArray0);
      jSONObject0.keys();
      String string0 = null;
      jSONObject0.names();
      jSONObject0.optBoolean("1", false);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+Afmv oiN{o~+jTQ");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, jSONObject0.length());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("D", false);
      try { 
        jSONObject1.getDouble("D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"D\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      JSONObject.doubleToString((byte) (-81));
      Float float0 = new Float(0.0F);
      JSONObject.numberToString(float0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("aMCMD:ND?J-)m= $JXV");
      JSONObject.quote("aMCMD:ND?J-)m= $JXV");
      Boolean boolean0 = new Boolean("dKV<nV_J`(!c.!");
      hashMap0.put((Byte) null, boolean0);
      jSONObject0.remove("W 3%,p.'Q2+qu");
      jSONObject0.optString("4.UhmzqyRCTXp");
      String string0 = "j7N5J`Z%JPJ/o||J";
      try { 
        jSONObject0.getJSONObject("j7N5J`Z%JPJ/o||J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"j7N5J`Z%JPJ/o||J\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject.valueToString((Object) null, 2310, 12);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      try { 
        jSONObject1.getDouble("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      jSONObject0.put("&YcW0@/x,xoW/DU", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("for", (Map) hashMap0);
      jSONObject1.getJSONObject("for");
      String string0 = JSONObject.valueToString(jSONObject0, (-1879), (-1879));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = JSONObject.quote("+Afmv oiN{o~+jTQ");
      assertEquals("\"+Afmv oiN{o~+jTQ\"", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Double double0 = new Double((-4099.0));
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Short short0 = new Short((short)32);
      JSONObject jSONObject0 = new JSONObject(short0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "j_oJTBpk";
      stringArray0[1] = "u'so<US* Y=j&";
      stringArray0[2] = "isreplace";
      stringArray0[3] = "{xs";
      stringArray0[4] = "|pp'3Rp";
      stringArray0[5] = "A JSONArray text must start with '['";
      stringArray0[6] = "";
      stringArray0[7] = "|;l`g/S";
      Double double0 = new Double((-1.0));
      jSONObject0.append("j_oJTBpk", double0);
      jSONObject0.length();
      JSONObject jSONObject1 = new JSONObject();
      Iterator iterator0 = jSONObject1.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "xM";
      JSONObject jSONObject1 = jSONObject0.put("xM", 1L);
      jSONObject0.getLong("xM");
      jSONObject1.put("Unterminated string", true);
      String string1 = "CWhIwKs^!";
      try { 
        jSONObject1.getJSONArray("CWhIwKs^!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"CWhIwKs^!\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Integer integer0 = new Integer(125);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.put("~-XN", true);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject.quote("{}");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optDouble("\"{}\"");
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Map) null);
      jSONObject1.optJSONObject("{}");
      JSONObject jSONObject2 = jSONObject0.put("", (Object) "{}");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "pA6*F";
      stringArray0[1] = "pA6*F";
      stringArray0[2] = "pA6*F";
      stringArray0[3] = "\"{}\"";
      stringArray0[4] = "Unterminated string";
      stringArray0[5] = "\"{}\"";
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      boolean boolean0 = new Boolean("\"{}\"");
      Boolean boolean1 = new Boolean("pA6*F");
      jSONObject0.accumulate("Unterminated string", boolean1);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wheel.json.JSONObject", 1L);
      String string0 = "";
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("get", (Collection) linkedList0);
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject2 = jSONObject1.accumulate("get", linkedList0);
      assertEquals(1, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject1 = jSONObject0.put("&YcW0@/x,xoW/DU", (Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject3 = jSONObject1.optJSONObject("&YcW0@/x,xoW/DU");
      assertNotSame(jSONObject0, jSONObject3);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      jSONObject0.put("\f", (Map) hashMap0);
      JSONObject.quote("wGJ[xj");
      JSONObject jSONObject1 = jSONObject0.put("#e.iC#]9", (Map) hashMap0);
      jSONObject1.toString((-1867));
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject2 = (JSONObject)jSONObject1.remove("\f");
      assertEquals(0, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Double double0 = new Double(0.0);
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "A JSONArray text must start with '['";
      JSONTokener jSONTokener0 = new JSONTokener("A JSONArray text must start with '['");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of A JSONArray text must start with '['
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Float float0 = new Float(0.0F);
      hashMap0.put((Integer) null, float0);
      jSONObject0.put("&YcW0@/x,xoW/DU", (Map) hashMap0);
      jSONObject0.put("for", (Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(jSONObject0, (-1879), (-1879));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      String string0 = jSONObject0.optString(".4&Y[2Rsah", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Short short0 = new Short((short) (-3438));
      Short.toUnsignedInt((short) (-3438));
      JSONObject.getNames((Object) short0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = hashMap0.clone();
      int int0 = 1402;
      JSONObject.valueToString(object0);
      jSONObject0.put(" R1O*o4", (long) (short) (-3438));
      try { 
        jSONObject0.getString("_[8m/]/56MdEy^5=k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_[8m/]/56MdEy^5=k\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0, 3769, (-1955));
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 2218L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "$VfhCf&3q";
      int int0 = (-1154);
      Integer integer0 = new Integer((-1154));
      String string1 = "";
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      StringWriter stringWriter0 = new StringWriter(78);
      jSONObject0.write(stringWriter0);
      JSONObject jSONObject1 = jSONObject0.put("*", 2373.5446);
      JSONObject jSONObject2 = new JSONObject((Object) "*");
      JSONObject.valueToString(jSONObject2);
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      Byte byte0 = Byte.valueOf((byte)32);
      Integer integer0 = new Integer((-498));
      Integer.getInteger("wheel.json.JSONObject@0000000006", 78);
      hashMap0.put(byte0, integer0);
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      jSONObject0.put("wheel.json.JSONObject@0000000006", (Object) jSONObject3);
      jSONObject1.optLong("*");
      assertEquals(3, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("zp C~h", 1465);
      jSONObject1.optDouble("zp C~h");
      try { 
        jSONObject1.getJSONArray("zp C~h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"zp C~h\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("\r", (Collection) linkedList0);
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Rgzp C~h", 1547);
      jSONObject1.optInt("Rgzp C~h", 1547);
      try { 
        jSONObject0.getJSONArray("Rgzp C~h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Rgzp C~h\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("xM", 1L);
      jSONObject0.getLong("xM");
      JSONObject jSONObject2 = jSONObject1.put("Unterminated string", true);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('b');
      stringWriter0.append('b');
      stringWriter0.append('}');
      StringWriter stringWriter1 = new StringWriter();
      boolean boolean0 = jSONObject2.has("Unterminated string");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean0, (-1027), (-1027));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(59, 59);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      String string0 = JSONObject.valueToString(hashMap0, (-1271), (-1271));
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("aMCMD:ND?J-)m= $JXV", (-1L));
      jSONObject0.remove("aMCMD:ND?J-)m= $JXV");
      JSONObject.quote("aMCMD:ND?J-)m= $JXV");
      String string0 = "dKV<nV_J`(!c.!";
      Boolean boolean0 = new Boolean("dKV<nV_J`(!c.!");
      hashMap0.put((Byte) null, boolean0);
      jSONObject0.remove("\"aMCMD:ND?J-)m= $JXV\"");
      String string1 = "j7N5J`Z%JPJ/o||J";
      try { 
        Long.valueOf("b2d$Qkr%pzZyUQGE*Nx");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"b2d$Qkr%pzZyUQGE*Nx\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("27AQ5dO$#*X7uy/");
      jSONObject0.optDouble("isput", 0.0);
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject1.names();
      JSONObject jSONObject2 = jSONObject1.putOpt("dM;)=", (Object) null);
      assertSame(jSONObject0, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("m)`%I2ymGUw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"m)`%I2ymGUw\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("getwrite");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getwrite\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
      
      double double0 = jSONObject0.optDouble(",:]}/\"[{;=#");
      assertEquals(Double.NaN, double0, 0.01);
      
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "";
      jSONObject0.optBoolean(".7G<NBK&;x9<yRPJD");
      Float.isFinite(1717.0F);
      String string1 = "";
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.isNull("");
      try { 
        jSONObject0.get("Expected a ':' after a key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ':' after a key\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)1737);
      try { 
        jSONObject0.accumulate((String) null, short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "");
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      Object object0 = new Object();
      try { 
        jSONObject1.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      jSONObject0.put("", (Map) hashMap0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("pv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of pv
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 13, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Boolean boolean0 = new Boolean(".7G<NBK&;x9<yRPJD");
      JSONObject jSONObject1 = jSONObject0.put("Unterminated sring", true);
      jSONObject1.isNull(".7G<NBK&;x9<yRPJD");
      jSONObject1.keys();
      jSONObject0.isNull(".7G<NBK&;x9<yRPJD");
      jSONObject1.optJSONArray((String) null);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("");
      Boolean boolean0 = new Boolean("");
      JSONObject.quote("ha");
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString(": ", "P?&B<-");
      assertEquals("P?&B<-", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Short short0 = new Short((short) (-1915));
      Short.compare((short) (-1468), (short) (-1468));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Expected a ':' after a key";
      stringArray0[2] = "Expected a ':' after a key";
      stringArray0[3] = "Expected a ':' after a key";
      stringArray0[4] = "Expected a ':' after a key";
      stringArray0[5] = "Expected a ':' after a key";
      stringArray0[6] = "ap";
      JSONObject jSONObject0 = new JSONObject("Expected a ':' after a key", stringArray0);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      Short.toUnsignedLong((short)32);
      String string0 = "is";
      JSONObject jSONObject1 = jSONObject0.put("is", 1266);
      jSONObject1.optDouble("", (double) (short)32);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ap", (Object) "ap");
      boolean boolean0 = jSONObject1.isNull("ap");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("~5qm8nc.i1)t8P*Q", 947L);
      double double0 = jSONObject1.getDouble("~5qm8nc.i1)t8P*Q");
      assertEquals(947.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      short short0 = (short) (-3438);
      Short short1 = new Short((short) (-3438));
      String[] stringArray0 = JSONObject.getNames((Object) short1);
      JSONObject jSONObject0 = new JSONObject(short1, stringArray0);
      jSONObject0.put(",:]}/\"[{;=#", (long) (short) (-3438));
      try { 
        jSONObject0.getLong("a:I/C.Ofywt<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"a:I/C.Ofywt<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(object0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(2, jSONObject0.length());
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("getjoin", (Collection) linkedList1);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("getjoin");
      JSONArray jSONArray1 = jSONObject0.names();
      assertNotSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-4006));
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(8192, 8192);
      JSONObject.getNames((Object) jSONArray0);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 8192, 8192);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("RyO,95JGh");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, (-5412L));
      assertEquals((-5412L), long0);
      
      jSONObject0.optJSONArray((String) null);
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject.valueToString(jSONObject0);
      int int0 = jSONObject0.optInt("TjQtu>x<3", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.optDouble("", 2016.907);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      Long long0 = new Long(0L);
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Float float0 = new Float((float) (-359));
      String string0 = JSONObject.valueToString(float0, 0, 0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "null";
      stringArray0[1] = "null";
      stringArray0[2] = "null";
      stringArray0[3] = "false";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.optJSONArray("false");
      String string1 = jSONObject0.optString((String) null, "null");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(2687);
      String string0 = JSONObject.quote("A JSONObject text must begin with '{'");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\"A JSONObject text must begin with '{'\"");
      stringWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter1 = stringWriter0.append('D');
      stringWriter1.append('D');
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.write("sho");
      jSONObject0.write(stringWriter2);
      jSONObject0.optInt("MQc_A1Ly.");
      jSONObject0.optInt("M", 864);
      Long long0 = new Long(0);
      String string1 = JSONObject.numberToString(long0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(";L,Q", 1L);
      try { 
        jSONObject1.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.optDouble("?kA[!`n`I.>j<8");
      jSONObject0.keys();
      jSONObject0.names();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('}');
      stringWriter1.append('d');
      StringWriter stringWriter2 = stringWriter0.append('Q');
      StringWriter stringWriter3 = new StringWriter();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.toString(2610);
      jSONObject1.write(stringWriter2);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Float float0 = new Float(0.0);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "A JS_NArray text must start with '['";
      String string0 = jSONObject0.toString(0);
      stringArray0[1] = "A JS_NArray text must start with '['";
      stringArray0[2] = "A JS_NArray text must start with '['";
      stringArray0[3] = "A JS_NArray text must start with '['";
      stringArray0[4] = "A JS_NArray text must start with '['";
      stringArray0[5] = "A JS_NArray text must start with '['";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      String string1 = JSONObject.valueToString("A JS_NArray text must start with '['");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("xM", 1L);
      jSONObject0.getLong("xM");
      JSONObject jSONObject2 = jSONObject1.put("Unterminated sring", true);
      jSONObject2.isNull("y^");
      jSONObject2.keys();
      jSONObject1.isNull("xM");
      JSONArray jSONArray0 = jSONObject2.optJSONArray("Substring bounds error");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optBoolean(".7G<NBK&;x9<yRPJD");
      jSONObject0.toJSONArray((JSONArray) null);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("getnumberToString", (Object) ".7G<NBK&;x9<yRPJD");
      int int0 = new Integer((-210));
      try { 
        jSONObject1.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Short short0 = new Short((short) (-1124));
      Short.toUnsignedInt((short)1738);
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashMap<Byte, JSONArray> hashMap1 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONObject", "wheel.json.JSONObject");
      Short.compare((short)99, (short)26);
      jSONObject1.toString();
      JSONObject jSONObject2 = jSONObject0.put("isfloatToIntBits", 73);
      double double0 = new Short((short)26);
      jSONObject1.accumulate("wheel.json.JSONObject", jSONObject2);
      try { 
        jSONObject0.getDouble("aKy#AUF?4h4)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"aKy#AUF?4h4)\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("A JS_NArray text must start with '['", false);
      boolean boolean0 = jSONObject0.isNull("A JS_NArray text must start with '['");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Float float0 = new Float(1.0F);
      JSONObject.valueToString(float0, 2023, (-3665));
      JSONTokener jSONTokener0 = new JSONTokener("g..y(;.vG:vz\"Kz9");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of g..y(;.vG:vz\"Kz9
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONArray jSONArray1 = jSONObject0.names();
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("tre", (Object) "tre");
      jSONObject1.optInt("tre");
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      try { 
        jSONObject0.getBoolean("tre");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"tre\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("toJ", (-2684));
      jSONObject1.isNull("toJ");
      try { 
        jSONObject0.append("toJ", "toJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[toJ] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optBoolean(".7G<NBK&;x9<yRPJD");
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.remove("");
      jSONObject0.put("ha", 0.0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.optDouble("(0ULj#gxk9s]xU7^", 1833.094);
      try { 
        jSONObject0.append("ha", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[ha] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(784);
      Integer.remainderUnsigned(32, 69);
      BiFunction<Integer, String, String> biFunction0 = (BiFunction<Integer, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyInt() , anyString());
      hashMap0.compute(integer0, biFunction0);
      BiFunction<String, Object, String> biFunction1 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(integer0, "xP>=~PMa", biFunction1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.entrySet();
      jSONObject0.optInt("j+BoK");
      BiConsumer<Object, String> biConsumer0 = (BiConsumer<Object, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      hashMap0.put(integer0, "@(r0s#R8n2CmR#");
      String string0 = "";
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("] is not a JSONArray.", "] is not a JSONArray.");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "null";
      stringArray0[1] = "null";
      stringArray0[2] = "null";
      stringArray0[3] = "null";
      stringArray0[4] = "null";
      JSONObject jSONObject0 = new JSONObject("null", stringArray0);
      jSONObject0.toString();
      jSONObject0.optInt("E,B", (-1));
      jSONObject0.optBoolean("]Tt##ougf'NRCiv%^i<");
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put("null", (-889));
      jSONObject1.put("`o51nSfh2G|0QZ8>", (-1));
      jSONObject0.toString();
      JSONObject jSONObject2 = jSONObject0.optJSONObject("null");
      assertNull(jSONObject2);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Float float0 = new Float(1186.3F);
      String[] stringArray0 = new String[2];
      Float.max(1186.3F, 1186.3F);
      stringArray0[0] = "";
      stringArray0[1] = ",\n";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.min(2849.0F, (-1534.796F));
      Float.min((-1534.796F), 2849.0F);
      JSONObject jSONObject1 = jSONObject0.put("", 2088);
      jSONObject1.toString((-390), 10);
      JSONObject jSONObject2 = jSONObject1.put(",\n", (-2064L));
      jSONObject0.optInt(",\n", (-390));
      jSONObject0.optJSONArray("");
      jSONObject0.optJSONArray("to");
      Short short0 = new Short((short) (-2273));
      Double double0 = new Double((-66.7344453381));
      jSONObject2.accumulate("getintValue", double0);
      JSONObject.getNames(jSONObject1);
      jSONObject2.optInt("to", (-2064));
      Byte byte0 = new Byte((byte) (-37));
      try { 
        jSONObject2.append((String) null, byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Double double0 = new Double(4977.965);
      JSONObject.numberToString(double0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.Double@0000000001";
      stringArray0[1] = "java.lang.Double@0000000001";
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Double@0000000001");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.valueToString(jSONObject1);
      JSONTokener jSONTokener0 = new JSONTokener("java.lang.Double@0000000001");
      JSONObject jSONObject2 = new JSONObject(object0);
      Boolean boolean0 = Boolean.valueOf("");
      JSONObject jSONObject3 = jSONObject2.put("", (Object) boolean0);
      jSONObject0.toString();
      Integer integer0 = new Integer(2);
      try { 
        jSONObject3.getInt("java.lang.Double@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Double@0000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt((String) null, 12);
      try { 
        jSONObject0.getJSONArray("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject.doubleToString(796.996228471);
      Double double0 = new Double(5899.0359547491);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.max(0.0, 796.996228471);
      try { 
        jSONObject0.getLong("\"3.</Yl$DAs-].");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"3.<\\/Yl$DAs-].\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("[", true);
      boolean boolean0 = jSONObject1.getBoolean("[");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "ap";
      JSONObject jSONObject1 = jSONObject0.put("ap", (Object) "ap");
      try { 
        jSONObject1.getLong("ap");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ap\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Short short0 = new Short((short)32);
      JSONObject jSONObject0 = new JSONObject(short0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "j_oJTBpk";
      stringArray0[1] = "u'so<US* Y=j&";
      stringArray0[2] = "isreplace";
      stringArray0[3] = "{xs";
      stringArray0[4] = "|pp'3Rp";
      stringArray0[5] = "A JSONArray text must start with '['";
      stringArray0[6] = "";
      stringArray0[7] = "|;l`g/S";
      String string0 = JSONObject.doubleToString(574.065);
      Float float0 = new Float((float) (short)32);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject.getNames((Object) null);
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("] is not a Boolean.");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONObject", "wheel.json.JSONObject");
      Integer integer0 = new Integer(0);
      JSONObject jSONObject2 = new JSONObject(integer0);
      jSONObject2.optBoolean(".7G<NBK&;x9<yRPJD");
      jSONObject1.toJSONArray((JSONArray) null);
      Object object0 = new Object();
      JSONObject jSONObject3 = jSONObject0.put("getnumberToString", (Object) "Y6JWk\"HJB");
      Integer integer1 = new Integer(0);
      try { 
        jSONObject3.getInt("getnumberToString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getnumberToString\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Short short0 = new Short((short) (-1915));
      JSONObject jSONObject0 = new JSONObject(short0);
      Short.compare((short) (-1468), (short) (-1468));
      jSONObject0.toString();
      Short.toUnsignedLong((short)1);
      JSONObject jSONObject1 = jSONObject0.put("isfloatToIntBits", (int) (short) (-1915));
      jSONObject1.optDouble("isfloatToIntBits", (double) (short)1);
      try { 
        jSONObject1.getJSONArray("isfloatToIntBits");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isfloatToIntBits\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = JSONObject.quote("\n");
      assertEquals("\"\\n\"", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONObject", "wheel.json.JSONObject");
      jSONObject0.optInt("wheel.json.JSONObject", 32);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('m');
      jSONObject1.toString(32);
      JSONTokener jSONTokener0 = new JSONTokener("3#1vm/I'NAW");
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000002\": \"java.lang.String@0000000002\"}");
      jSONObject1.put("wheel.json.JSONObject", (Object) jSONObject2);
      try { 
        jSONObject2.getInt("sh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sh\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", 0L);
      try { 
        jSONObject0.getBoolean("4S+L=)^BBR}d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4S+L=)^BBR}d\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(41L);
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean.logicalOr(false, true);
      Boolean.logicalXor(true, false);
      Boolean.logicalOr(false, true);
      hashMap0.put(long0, boolean0);
      JSONObject.getNames((Object) hashMap0);
      String string0 = null;
      jSONObject0.optLong((String) null);
      Integer integer0 = new Integer(35);
      String string1 = "ce\"^d;k";
      Integer.getInteger("ce\"^d;k", 117);
      Integer.getInteger("to", integer0);
      try { 
        Integer.parseUnsignedInt("wheel.json.JSONArray");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"wheel.json.JSONArray\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.remove((String) null);
      stringWriter0.write((int) (byte) (-81));
      stringWriter0.append('m');
      stringWriter0.append(',');
      StringWriter stringWriter1 = new StringWriter();
      jSONObject0.write(stringWriter1);
      boolean boolean0 = jSONObject0.optBoolean("p%F6/Iw", false);
      assertFalse(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalXor(false, false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject.getNames((Object) boolean0);
      Boolean.getBoolean("");
      jSONObject0.optInt("] is not a JSONObject.", 0);
      String string0 = "5<3}3We'";
      try { 
        jSONObject0.getInt("5<3}3We'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"5<3}3We'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("D", true);
      assertSame(jSONObject0, jSONObject1);
      
      JSONObject.valueToString((Object) null);
      jSONObject0.isNull("D");
      jSONObject1.getBoolean("D");
      try { 
        jSONObject1.getJSONArray("AL)*Zk{W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"AL)*Zk{W\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Short short0 = new Short((short)1447);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = new JSONObject((Map) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "' and instead saw '";
      stringArray0[1] = "&Bi`7NE(HvQy4{";
      stringArray0[2] = ";OD'PBQ79AV*}t6V";
      stringArray0[3] = "1.3372654649363462.";
      stringArray0[4] = "d*c)_4-:uMu')~0:9d";
      stringArray0[5] = "";
      stringArray0[6] = "";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toString();
      Iterator iterator0 = jSONObject1.keys();
      JSONObject.testValidity(iterator0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = jSONObject0.put("ts*", (-933L));
      jSONObject0.toString(109, 23);
      jSONObject0.optBoolean("", true);
      jSONObject1.optString("P?&B<-", "Substring bounds error");
      jSONObject1.optInt("D1;?L/?}S2C){", 545);
      try { 
        jSONObject1.get("X%/<I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"X%/<I\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+Afmv oiN{o~+j}Q");
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray0.put((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      // Undeclared exception!
      jSONObject0.toString(1355);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HashMap<Long, Short> hashMap0 = new HashMap<Long, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("getlongValue", true);
      Object object0 = new Object();
      Long long0 = new Long(0L);
      Short short0 = new Short((short)3752);
      Short.toUnsignedInt((short)16);
      hashMap0.put(long0, short0);
      jSONObject2.accumulate("getlongValue", object0);
      long long1 = jSONObject1.optLong("getlongValue", 204L);
      assertEquals(204L, long1);
      
      jSONObject2.toString();
      String string0 = jSONObject0.toString((int) (short)3752, 17);
      assertEquals("{}", string0);
      
      Long long2 = new Long(204L);
      jSONObject0.append("{", long2);
      assertTrue(long2.equals((Object)long1));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("h~{y=gQmvby");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte byte0 = (byte) (-128);
      Byte byte1 = new Byte((byte) (-128));
      JSONObject jSONObject0 = new JSONObject(byte1);
      String string0 = "^h.-W,/_q=3O\\EN1";
      JSONObject jSONObject1 = jSONObject0.put("^h.-W,/_q=3OEN1", (double) (byte) (-128));
      int int0 = (-2158);
      jSONObject1.optDouble("^h.-W,/_q=3OEN1");
      jSONObject1.put("^h.-W,/_q=3OEN1", false);
      jSONObject1.put("^h.-W,/_q=3OEN1", (long) (byte) (-128));
      JSONObject.getNames((Object) "^h.-W,/_q=3OEN1");
      jSONObject0.toString((-2158));
      try { 
        jSONObject1.getBoolean("^h.-W,/_q=3OEN1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^h.-W,/_q=3OEN1\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("`Vuc{)^5cVMPbPV9jn", (-443));
      long long0 = jSONObject1.optLong("`Vuc{)^5cVMPbPV9jn");
      assertEquals((-443L), long0);
      
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('G');
      jSONObject1.write(stringWriter0);
      String string0 = JSONObject.quote("isclose");
      assertEquals("\"isclose\"", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getparseBoolean", 3128);
      JSONObject jSONObject1 = new JSONObject();
      boolean boolean0 = jSONObject1.isNull("");
      assertTrue(boolean0);
      
      jSONObject0.optJSONArray("");
      double double0 = jSONObject0.optDouble("getparseBoolean");
      assertEquals(3128.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      Integer integer0 = new Integer(70);
      Boolean boolean0 = Boolean.valueOf(true);
      hashMap0.put(integer0, boolean0);
      JSONObject jSONObject1 = jSONObject0.put("", 0.0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("14>LjYW=>I!msbLt.", "14>LjYW=>I!msbLt.");
      JSONObject.getNames(jSONObject0);
      jSONObject1.accumulate("14>LjYW=>I!msbLt.", "14>LjYW=>I!msbLt.");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.doubleToString((-108916131));
      assertEquals("-1.08916131E8", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append(';');
      JSONObject.valueToString(jSONObject0, 0, 70);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("istoString");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Double double0 = new Double(4977.965);
      JSONObject.numberToString(double0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.Double@0000000001";
      stringArray0[1] = "java.lang.Double@0000000001";
      stringArray0[2] = "";
      stringArray0[3] = "java.lang.Double@0000000001";
      stringArray0[4] = "java.lang.Double@0000000001";
      stringArray0[5] = "pA6*F";
      stringArray0[6] = "java.lang.Double@0000000001";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("G`</p-2^V=].6qz");
      assertEquals("\"G`<\\/p-2^V=].6qz\"", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(65);
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = new JSONObject(long0);
      jSONObject1.put("{}", (-1883));
      JSONObject.getNames(jSONObject1);
      long long1 = jSONObject1.getLong("{}");
      assertEquals(2, jSONObject1.length());
      assertEquals((-1883L), long1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONObject", "wheel.json.JSONObject");
      String string0 = "lo";
      int int0 = 32;
      jSONObject1.keys();
      jSONObject0.names();
      jSONObject0.get("wheel.json.JSONObject");
      jSONObject1.put("lo", (Object) "wheel.json.JSONObject");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("qT/0\"%;(><ygf)|M@.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of qT/0\"%;(><ygf)|M@.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(": ", 0L);
      try { 
        jSONObject1.getBoolean(": ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\": \"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.testValidity((Object) null);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.remove("^ qK]_0}?{:7gT=]{\"\"");
      JSONObject.quote("k$q87fFcI0'GLBj(");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("k$q87fFcI0'GLBj(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of k$q87fFcI0'GLBj(
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONArray0.put(true);
      String string0 = "}b>k>g>";
      JSONObject jSONObject1 = jSONObject0.put("}b>k>g>", 1L);
      jSONObject1.toJSONArray(jSONArray0);
      try { 
        jSONArray0.put((-379), (-379));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-379] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Short short0 = new Short((short) (-2923));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "true";
      stringArray0[1] = " r80";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      jSONObject0.toString((int) (short) (-2923));
      String string0 = "p/L";
      Boolean boolean0 = new Boolean("p/L");
      boolean boolean1 = true;
      short short1 = (short)160;
      Short.toUnsignedInt((short)160);
      Boolean.compare(false, true);
      JSONObject jSONObject1 = jSONObject0.accumulate("p/L", boolean0);
      JSONObject.valueToString(jSONObject1);
      jSONObject1.keys();
      JSONObject.valueToString((Object) null, (short) (-2923), (short) (-2923));
      Float float0 = new Float((float) (short) (-2923));
      JSONObject.getNames((Object) float0);
      jSONObject0.toString((int) (short) (-2923), (int) (short) (-2923));
      try { 
        jSONObject0.getJSONArray("&YKwA<O#Oy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&YKwA<O#Oy\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
      
      jSONObject1.toString();
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double((-2615.0));
      JSONObject.getNames((Object) null);
      String string0 = "v=i>*]ij@G7_;";
      Long long0 = new Long(918L);
      Long long1 = Long.getLong("v=i>*]ij@G7_;", long0);
      JSONObject jSONObject1 = jSONObject0.put("v=i>*]ij@G7_;", (Object) long1);
      Integer integer0 = new Integer(1);
      JSONObject.quote("EVD,~3Kj$1gOS");
      try { 
        jSONObject1.getInt("sn0a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sn0a\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0, 59, 59);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(1417);
      JSONObject jSONObject1 = jSONObject0.put("true", (Object) "true");
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      Object object0 = new Object();
      jSONObject1.toString(1417);
      boolean boolean0 = jSONObject0.getBoolean("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("~!aj?Q@.i7#VYA", (Collection) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wheel.json.JSONObject";
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONObject", "wheel.json.JSONObject");
      try { 
        jSONObject1.getDouble("wheel.json.JSONObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("wheel.json.JSONObject", "wheel.json.JSONObject");
      String string0 = JSONObject.doubleToString((-152.66892682242));
      Float float0 = new Float((-3541.2917F));
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = JSONObject.valueToString("istoHexString");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.put("isspliterator", (Collection) linkedList0);
      jSONObject0.getJSONArray("isspliterator");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = "ATn:*nr9~aYzf";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("ATn:*nr9~aYzf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ATn:*nr9~aYzf
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("true", (Object) "true");
      jSONObject1.optBoolean("true");
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      boolean boolean0 = jSONObject0.getBoolean("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.testValidity((Object) null);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.remove("^ qK]_0}?{:7gT=]{\"\"");
      JSONObject.quote("k$q87fFcI0'GLBj(");
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONObject1.put("", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "^ qK]_0}?{:7gT=]{\"\"");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "k$q87fFcI0'GLBj(", 0, 0);
      StringWriter stringWriter3 = stringWriter2.append('L');
      jSONObject1.write(stringWriter3);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("k$q87fFcI0'GLBj(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of k$q87fFcI0'GLBj(
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("wheel.json.JSONObject", "wheel.json.JSONObject");
      jSONObject0.optInt("wheel.json.JSONObject", 32);
      Float.min(32, 32);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = new JSONObject(boolean0);
      JSONObject jSONObject2 = jSONObject1.put("gettoUnsignedInt", 32);
      jSONObject0.toString(14, 10);
      jSONObject1.put("wheel.json.JSONObject", 0L);
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      jSONObject3.optInt("lo", 78);
      jSONObject0.optJSONArray("{\"java.lang.String@0000000002\": \"java.lang.String@0000000002\"}");
      JSONObject.quote("gettoUnsignedInt");
      jSONObject3.put("{\"java.lang.String@0000000002\": \"java.lang.String@0000000002\"}", 78);
      Object object0 = new Object();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject2.toJSONArray(jSONArray0);
      try { 
        jSONObject2.getJSONObject("wheel.json.JSONObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = new JSONObject();
      Byte byte0 = new Byte((byte) (-20));
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^gU>cp+}tS-mXA|(";
      stringArray0[1] = "^gU>cp+}tS-mXA|(";
      stringArray0[2] = "^gU>cp+}tS-mXA|(";
      JSONObject jSONObject2 = new JSONObject(object0, stringArray0);
      Object object1 = new Object();
      jSONObject2.accumulate("", object1);
      assertEquals(1, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double((byte) (-81));
      JSONObject.getNames((Object) jSONArray0);
      Byte.toUnsignedLong((byte) (-1));
      Double double1 = new Double((byte) (-81));
      JSONObject jSONObject1 = jSONObject0.put("Q@jeD&L9K", (Object) double1);
      jSONObject1.optInt("[;+84%|-]W");
      Integer integer0 = new Integer((byte) (-81));
      String string0 = null;
      try { 
        jSONObject1.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("/S+S&P<5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of /S+S&P<5
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ": ";
      JSONObject jSONObject1 = jSONObject0.put(": ", (-2048L));
      try { 
        jSONObject1.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("wheel.json.JSONObject", "wheel.json.JSONObject");
      String string0 = "lo";
      jSONObject0.optInt("wheel.json.JSONObject", 32);
      Float.min(32, 32);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = new JSONObject(boolean0);
      String string1 = "gettoUnsignedInt";
      JSONObject jSONObject2 = jSONObject1.put("gettoUnsignedInt", 32);
      jSONObject0.toString(14, 10);
      jSONObject1.put("wheel.json.JSONObject", 0L);
      JSONObject.valueToString("lo", 32, 32);
      jSONObject2.toString((-1235), 32);
      try { 
        jSONObject1.getJSONArray("lo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"lo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.put("eX?JpVyKt8x{wzKi", (int) (byte) (-81));
      JSONObject.quote((String) null);
      jSONObject1.remove(",:]}/\"[{;=#");
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte byte0 = (byte)91;
      Byte byte1 = new Byte((byte)91);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Unclosed comment";
      stringArray0[1] = "#9SWmPi:J[E+?";
      JSONObject jSONObject0 = new JSONObject(byte1, stringArray0);
      try { 
        jSONObject0.getLong("#9SWmPi:J[E+?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#9SWmPi:J[E+?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.sum(0.0F, 2806.2F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      jSONObject0.put("000", (Map) hashMap0);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.sum((-535.165), (-535.165));
      Double.min(0.0, 651.987599594);
      Double.max(1.0, 0.0);
      String string0 = "=E<r$S_;xF1 2:(2";
      jSONObject0.isNull("=E<r$S_;xF1 2:(2");
      jSONObject0.optInt("=E<r$S_;xF1 2:(2", 1812);
      jSONObject0.keys();
      StringWriter stringWriter0 = new StringWriter(4372);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "=E<r$S_;xF1 2:(2", 1812, 4372);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("#hl");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Double double0 = new Double((-1433.055));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "IGgs#~awo0G";
      stringArray0[2] = "";
      stringArray0[3] = "N*O4z\"+\\}A";
      stringArray0[4] = "yq8kY4@Iy1HW7F#=5t";
      stringArray0[5] = "k3td %'D$";
      stringArray0[6] = "Expected a ':' after a key";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(2687);
      StringWriter stringWriter1 = stringWriter0.append('D');
      stringWriter1.append('D');
      StringWriter stringWriter2 = new StringWriter();
      jSONObject0.write(stringWriter2);
      assertEquals("{}", stringWriter2.toString());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = JSONObject.doubleToString(796.996228471);
      assertEquals("796.996228471", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.stream();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      hashMap0.put(jSONArray0, "] not found.");
      JSONObject jSONObject1 = jSONObject0.put("796.996228471", (Map) hashMap0);
      jSONObject1.optJSONObject("796.996228471");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      JSONObject jSONObject0 = new JSONObject(byte0);
      Short.toUnsignedInt((short) (-3317));
      JSONObject.getNames((Object) jSONObject0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((-62353088));
      Integer integer1 = new Integer((-30710023));
      hashMap0.put(integer0, integer1);
      jSONObject1.put("istoString", (Map) hashMap0);
      hashMap0.clone();
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject.quote("S");
      JSONObject.testValidity("\"S\"");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("\"S\"");
      JSONObject.quote("S");
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Float float0 = new Float((-0.0992511F));
      JSONObject jSONObject0 = new JSONObject(float0);
      boolean boolean0 = jSONObject0.optBoolean(".7G<NBK&;x9<yRPJD");
      assertFalse(boolean0);
      
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('K');
      StringWriter stringWriter2 = stringWriter1.append('u');
      StringWriter stringWriter3 = new StringWriter();
      jSONObject0.write(stringWriter2);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "";
      jSONObject0.optBoolean(".7G<NBK&;x9<yRPJD");
      String string1 = "";
      jSONObject0.toJSONArray((JSONArray) null);
      try { 
        jSONObject0.get("Expected a ':' after a key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ':' after a key\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONObject", "wheel.json.JSONObject");
      String string0 = "&Wjc<,K*5<1)";
      try { 
        jSONObject1.getDouble("&Wjc<,K*5<1)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&Wjc<,K*5<1)\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble((String) null, 721.18318);
      assertEquals(721.18318, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.put("}k", (Object) jSONArray0);
      JSONObject.valueToString((Object) null);
      jSONObject0.put("[]", (-340));
      JSONArray jSONArray1 = jSONObject0.optJSONArray("}k");
      assertEquals(0, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("wheel.json.JSONObject", "wheel.json.JSONObject");
      int int0 = 32;
      jSONObject0.optInt("wheel.json.JSONObject", 32);
      Float.min(32, 32);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = new JSONObject(boolean0);
      String string0 = "gettoUnsignedInt";
      jSONObject1.put("gettoUnsignedInt", 11);
      jSONObject0.toString(14, 10);
      JSONObject jSONObject2 = jSONObject1.put("wheel.json.JSONObject", 0L);
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      String string1 = null;
      try { 
        jSONObject3.accumulate((String) null, jSONObject2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{ sCn#\r=^JBvUJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 14 of { sCn#\r=^JBvUJ
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put(jSONObject0, jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.toJSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // wheel.json.JSONObject cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-604), (-604));
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "!^";
      stringArray0[1] = "\u0003I:*IBe.Ox";
      stringArray0[2] = "\u0003I:*IBe.Ox";
      stringArray0[3] = "\u0003I:*IBe.Ox";
      stringArray0[4] = "\u0003I:*IBe.Ox";
      stringArray0[5] = "\u0003I:*IBe.Ox";
      stringArray0[6] = "\u0003I:*IBe.Ox";
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("xM", 8L);
      long long0 = jSONObject0.getLong("xM");
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Short short0 = new Short((short) (-3438));
      Short.toUnsignedInt((short) (-3438));
      JSONObject.getNames((Object) short0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.clone();
      int int0 = 1402;
      JSONObject.valueToString(jSONObject0, 173, 1402);
      jSONObject0.put(" R1O*o4", (long) (short) (-3438));
      try { 
        jSONObject0.getString("_[8m/]/56MdEy^5=k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_[8m/]/56MdEy^5=k\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("", "");
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "");
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(0, 0);
      String string0 = "oy;MmT^\"M;tD`]^U";
      try { 
        jSONObject0.getBoolean("oy;MmT^\"M;tD`]^U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"oy;MmT^\\\"M;tD`]^U\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.putOpt("{}", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double((byte) (-81));
      JSONObject.getNames((Object) jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("Q@jeD&L9K", (Object) byte0);
      Integer integer0 = new Integer(8);
      jSONObject1.isNull("r6tSML8j");
      jSONObject1.isNull((String) null);
      jSONObject1.optJSONArray("sho");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Expected a ':' after a key";
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject1, stringArray0);
      try { 
        jSONObject2.getBoolean("Expected a ':' after a key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ':' after a key\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Collection) linkedList0);
      String string0 = jSONObject1.optString("{}");
      assertFalse(linkedList0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Short short0 = new Short((short)32);
      JSONObject jSONObject0 = new JSONObject(short0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "j_oJTBpk";
      stringArray0[1] = "u'so<US* Y=j&";
      stringArray0[2] = "Y}33aQ23H<l,";
      stringArray0[3] = "{xs";
      stringArray0[4] = "|pp'3Rp";
      stringArray0[5] = "A JSONArray text must start with '['";
      stringArray0[6] = "";
      stringArray0[7] = "|;l`g/S";
      stringArray0[8] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONObject", "wheel.json.JSONObject");
      String string0 = "lo";
      jSONObject0.optInt("wheel.json.JSONObject", 32);
      Float.min(32, 32);
      Boolean boolean0 = Boolean.FALSE;
      Short.compare((short)8192, (short)8192);
      jSONObject1.toString();
      String string1 = null;
      try { 
        jSONObject0.put((String) null, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "getmin");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(",NZdX,ZM|b_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ,NZdX,ZM|b_
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(": ", (-2048L));
      jSONObject0.optBoolean("", true);
      String string0 = jSONObject0.optString(": ", "P?&B<-");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONObject.doubleToString(1.0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1";
      stringArray0[1] = "1";
      JSONObject jSONObject0 = new JSONObject("1", stringArray0);
      jSONObject0.optDouble("par");
      Iterator iterator0 = jSONObject0.keys();
      jSONObject0.names();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('}');
      stringWriter0.append('}');
      stringWriter0.append('}');
      StringWriter stringWriter1 = new StringWriter();
      jSONObject0.optDouble("[:nzAH/d][=7z", 3365.93638533679);
      jSONObject0.append("(0ULj#gxk9s]xU7^", "[:nzAH/d][=7z");
      Short short0 = new Short((short)42);
      JSONObject jSONObject1 = new JSONObject(short0, stringArray0);
      jSONObject1.length();
      Iterator iterator1 = jSONObject0.keys();
      assertNotSame(iterator1, iterator0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("true", (Object) "true");
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      boolean boolean0 = jSONObject0.getBoolean("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Double double0 = new Double((-3578.0));
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.putOpt("false", object0);
      jSONObject1.put("false", (-2042));
      jSONObject1.optInt("false");
      JSONObject.valueToString(jSONObject0);
      jSONObject0.putOpt("", "");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(0, 92);
      try { 
        jSONObject0.get("getnumberToString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getnumberToString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Short short0 = new Short((short) (-3438));
      Short.toUnsignedInt((short) (-3438));
      JSONObject.getNames((Object) short0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.isNull((String) null);
      try { 
        jSONObject0.put((String) null, (long) 62098);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("cC@<D ?SOBNYntq[8X", (-548));
      jSONObject1.getString("cC@<D ?SOBNYntq[8X");
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Short short0 = new Short((short)8);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.optString("");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = JSONObject.doubleToString(796.996228471);
      assertEquals("796.996228471", string0);
      
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = JSONObject.valueToString(hashMap0, (-809), 1060);
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("A JSONArray text must start with '['", 14);
      try { 
        jSONObject0.getJSONArray("A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArray text must start with '['\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Short short0 = new Short((short) (-1915));
      JSONObject jSONObject0 = new JSONObject(short0);
      short short1 = (short) (-1468);
      Short.compare((short) (-1468), (short) (-1468));
      jSONObject0.remove("QgIW/^leIsOn^z");
      JSONObject.quote("QgIW/^leIsOn^z");
      Boolean boolean0 = new Boolean("\"QgIW/^le\\IsOn^z\"");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      hashMap0.put((Byte) null, (Boolean) null);
      hashMap0.put((Byte) null, boolean0);
      jSONObject0.remove("\"QgIW/^le\\IsOn^z\"");
      jSONObject0.optString("QgIW/^leIsOn^z");
      try { 
        jSONObject0.getJSONObject("4.UhmzqyRCTXp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4.UhmzqyRCTXp\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short.compare((short)99, (short)99);
      JSONObject jSONObject1 = jSONObject0.put("isfloatToIntBits", 0);
      jSONObject1.getDouble("isfloatToIntBits");
      String string0 = ":/";
      try { 
        jSONObject0.getJSONArray(":/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\":/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append(" >P@d=s0veNC:jl{", " >P@d=s0veNC:jl{");
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONObject", object0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject2.optInt("T_:IB2", 32);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('M');
      stringWriter0.append(';');
      StringWriter stringWriter1 = new StringWriter();
      jSONObject0.write(stringWriter0);
      try { 
        jSONObject1.getJSONArray("T_:IB2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"T_:IB2\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("wheel.json.JSONObject", "wheel.json.JSONObject");
      jSONObject0.optInt("wheel.json.JSONObject", 32);
      Float.min(32, 32);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = new JSONObject(boolean0);
      jSONObject1.put("gettoUnsignedInt", 11);
      jSONObject0.toString(14, 10);
      jSONObject1.put("wheel.json.JSONObject", 0L);
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject2.optInt("lo", 78);
      jSONObject0.optJSONArray("{\"java.lang.String@0000000002\": \"java.lang.String@0000000002\"}");
      JSONObject.quote("gettoUnsignedInt");
      jSONObject2.put("{\"java.lang.String@0000000002\": \"java.lang.String@0000000002\"}", 78);
      Object object0 = new Object();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      JSONObject.valueToString(jSONObject0, (-646), (-646));
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONObject.quote("{}");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      double double0 = jSONObject0.optDouble("\"{}\"");
      assertEquals(Double.NaN, double0, 0.01);
      
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Map) null);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("{}");
      JSONObject jSONObject3 = jSONObject0.put("", (Object) "{}");
      jSONObject2.has("\"{}\"");
      Object object0 = new Object();
      jSONObject1.toString((-116));
      StringWriter stringWriter0 = new StringWriter(13);
      StringWriter stringWriter1 = stringWriter0.append('{');
      StringWriter stringWriter2 = new StringWriter();
      jSONObject3.write(stringWriter1);
      String string0 = JSONObject.quote("sMT@");
      assertEquals("\"sMT@\"", string0);
      
      int int0 = jSONObject2.optInt("sMT@", (-2434));
      assertEquals((-2434), int0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(": ", 0L);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject.quote(": ");
      Float float0 = new Float((-4005.644165894));
      JSONObject jSONObject2 = jSONObject1.putOpt("dec", float0);
      assertEquals(2, jSONObject1.length());
      
      jSONObject2.put("dec", 58);
      boolean boolean0 = jSONObject0.optBoolean((String) null, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("aMCMD:ND?J-)m= $JXV");
      JSONObject.valueToString((Object) null);
      Short short0 = new Short((short)416);
      Integer integer0 = new Integer(0);
      jSONObject0.accumulate("[EI<", integer0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (-38758282));
      boolean boolean0 = jSONObject1.isNull("wheel.json.JSONArray");
      assertFalse(boolean0);
      
      String string0 = JSONObject.doubleToString((-38758282));
      assertEquals("-3.8758282E7", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt(",", 120);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('S');
      jSONObject0.toString(120);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject("{}");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",";
      stringArray0[1] = "3#1vm/I'NAW";
      stringArray0[2] = "{}";
      stringArray0[3] = ",";
      stringArray0[4] = ",";
      JSONObject jSONObject2 = new JSONObject(",", stringArray0);
      Double double0 = new Double(120);
      jSONObject2.put("{}", (Object) double0);
      jSONObject2.getInt("{}");
      int int1 = jSONObject1.length();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("aMCMD:ND?J-)m= $JXV");
      JSONObject.quote("aMCMD:ND?J-)m= $JXV");
      Boolean boolean0 = new Boolean("dKV<nV_J`(!c.!");
      hashMap0.put((Byte) null, boolean0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("aMCMD:ND?J-)m= $JXV", object0);
      Integer integer0 = new Integer((-210));
      try { 
        jSONObject1.getInt("W 3%,p.'Q2+qu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"W 3%,p.'Q2+qu\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("aMCMD:ND?J-)m= $JXV");
      JSONObject.quote("aMCMD:ND?J-)m= $JXV");
      Boolean boolean0 = new Boolean("dKV<nV_J`(!c.!");
      hashMap0.put((Byte) null, boolean0);
      jSONObject0.remove("W 3%,p.'Q2+qu");
      JSONObject jSONObject1 = jSONObject0.put("ha", (-1062.641579));
      JSONObject.getNames(jSONObject0);
      jSONObject1.optDouble("(0ULj#gxk9s]xU7^", 0.0);
      JSONObject.doubleToString(574.065);
      Float float0 = new Float(0.0F);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("xM");
      JSONObject jSONObject1 = jSONObject0.put("", false);
      boolean boolean1 = jSONObject1.isNull("");
      boolean boolean2 = jSONObject1.getBoolean("");
      assertTrue(boolean2 == boolean1);
      
      String string0 = jSONObject1.optString("xM");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-1879), (-1879));
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONObject.quote("{}");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.remove("c0");
      JSONObject.quote("N9cMM=V&M-uA:u`0>c");
      Boolean boolean0 = new Boolean("\"N9cMM=V&M-uA:u`0>c\"");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>(87);
      hashMap0.put((Byte) null, boolean0);
      jSONObject0.remove("iscompare");
      JSONObject jSONObject1 = jSONObject0.put("N9cMM=V&M-uA:u`0>c", 3194.274);
      JSONObject.getNames(jSONObject1);
      jSONObject1.optDouble("\"N9cMM=V&M-uA:u`0>c\"", 3194.274);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("hwnXkp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of hwnXkp
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = "DMCMD:ND?J-)m= $JXV";
      JSONObject.testValidity("DMCMD:ND?J-)m= $JXV");
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String string1 = "/A";
      JSONObject jSONObject2 = jSONObject1.put("/A", 2283);
      Object object0 = new Object();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject2.getDouble("/A");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject("a0pzMZ=GF4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of a0pzMZ=GF4
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Long long0 = new Long(0L);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray1);
      
      Long.getLong(" $3o]5])SQ5vhL", 0L);
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      float float0 = 0.0F;
      Float float1 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float1);
      jSONObject0.toJSONArray((JSONArray) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".7G<NBK&;x9<yRPJD";
      stringArray0[1] = "isfloatToIntBits";
      stringArray0[2] = "isfloatToIntBits";
      stringArray0[3] = ".7G<NBK&;x9<yRPJD";
      stringArray0[4] = ".7G<NBK&;x9<yRPJD";
      stringArray0[5] = ".7G<NBK&;x9<yRPJD";
      stringArray0[6] = "isfloatToIntBits";
      stringArray0[7] = "isfloatToIntBits";
      stringArray0[8] = "isfloatToIntBits";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      int int0 = 102;
      jSONObject1.toString(20, 20);
      try { 
        jSONObject1.put((String) null, 102);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = JSONObject.valueToString("~Rso)UX}6", (-1867), (-1867));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.values();
      jSONObject0.put("ke", 2570.989);
      jSONObject0.remove("cd");
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("va", (-1315L));
      jSONObject1.optBoolean((String) null, false);
      jSONObject0.names();
      hashMap0.keySet();
      jSONObject0.put("cd", 0L);
      Short short0 = new Short((short)88);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "xM";
      JSONObject jSONObject1 = jSONObject0.put("xM", 0L);
      jSONObject0.getLong("xM");
      JSONObject jSONObject2 = jSONObject0.put("xM", false);
      Object object0 = new Object();
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject3 = new JSONObject(jSONObject1, stringArray0);
      jSONObject3.toJSONArray(jSONArray0);
      try { 
        jSONObject2.getJSONObject("xM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"xM\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(40);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      hashMap0.entrySet();
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONObject.doubleToString(1.0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1";
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(1.0);
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      jSONArray0.toJSONObject(jSONArray0);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONObject.doubleToString(796.996228471);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject1 = jSONObject0.put("796.996228471", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("796.996228471");
      Integer integer0 = new Integer(1410);
      JSONObject jSONObject3 = jSONObject1.put("c", (Object) integer0);
      JSONObject jSONObject4 = jSONObject3.put("c", (Map) hashMap0);
      jSONObject2.has("796.996228471");
      Object object0 = new Object();
      jSONObject1.toString((-2086));
      JSONObject jSONObject5 = jSONObject4.getJSONObject("c");
      assertNotSame(jSONObject5, jSONObject4);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt((String) null, "wheel.json.JSONObject");
      String string0 = JSONObject.quote("+Afmv oiN{o~+jTQ");
      assertEquals("\"+Afmv oiN{o~+jTQ\"", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = JSONObject.quote("pnE1?fQ@PG|[}Y/");
      assertEquals("\"pnE1?fQ@PG|[}Y/\"", string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      String string0 = null;
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      try { 
        jSONObject1.put((String) null, (Map) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 14);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 711;
      JSONObject jSONObject1 = jSONObject0.put("zp C~h", 711);
      try { 
        jSONObject1.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(2984);
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (Object) "] is not a JSONObject.");
      jSONObject0.toString();
      try { 
        jSONObject1.getJSONObject("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONObject", "wheel.json.JSONObject");
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject2.optDouble("wheel.json.JSONObject");
      jSONObject0.keys();
      jSONObject1.put("=/mR18cO^LvD|f`|b@L", (Map) hashMap0);
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      jSONObject3.optJSONObject((String) null);
      jSONObject2.put("=/mR18cO^LvD|f`|b@L", (Object) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "wheel.json.JSONObject";
      stringArray0[2] = "wheel.json.JSONObject";
      stringArray0[3] = "wheel.json.JSONObject";
      JSONObject jSONObject4 = new JSONObject(jSONObject3, stringArray0);
      jSONObject0.has("");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double((byte) (-81));
      JSONObject.getNames((Object) jSONArray0);
      jSONObject0.optLong("Q@jeD&L9K", 0L);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ,:]}/\"[{;=#
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "s'c\"{Q;PV8/E.<-cm/E";
      stringArray0[1] = "istoUnsignedInt";
      stringArray0[2] = "iscompareTo";
      stringArray0[3] = "vBp67c> R";
      stringArray0[4] = ".XoUc?,zLA;+STPi";
      stringArray0[5] = "yW9mMZ";
      stringArray0[6] = "istoUnsignedInt";
      stringArray0[7] = "";
      stringArray0[8] = "lJ|[2.B5E!C>jKc7[1Q";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optJSONObject("");
      Integer integer0 = new Integer((-8));
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wheel.json.JSONObject";
      jSONObject0.putOpt("wheel.json.JSONObject", "wheel.json.JSONObject");
      jSONObject0.optInt("wheel.json.JSONObject", 32);
      float float0 = new Integer(32);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.valueToString(jSONArray0, 32, 32);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = new JSONObject(boolean0);
      Integer integer0 = new Integer(32);
      JSONObject jSONObject2 = new JSONObject(integer0);
      JSONObject.getNames(jSONObject0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject3 = new JSONObject(boolean0, stringArray0);
      jSONObject3.optBoolean("Expected a ':' after a key");
      try { 
        jSONObject1.getBoolean("Expected a ':' after a key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ':' after a key\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("gettoHexString");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of gettoHexString
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer((-2511));
      hashMap0.put(integer0, "is");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "_XM_jo$(Pq&Sl G^]7";
      stringArray0[1] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.toString();
      Integer integer1 = new Integer((-2439));
      hashMap0.put(integer1, "");
      jSONObject1.toString((-1407), (-1068));
      jSONObject1.names();
      JSONObject jSONObject2 = jSONObject1.accumulate("_XM_jo$(Pq&Sl G^]7", (Object) null);
      jSONObject1.length();
      try { 
        jSONObject2.getJSONArray("_XM_jo$(Pq&Sl G^]7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_XM_jo$(Pq&Sl G^]7\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Float float0 = new Float(0.0F);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
      
      Short short0 = new Short((short)2904);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(hashMap0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.accumulate("1", "1");
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray1);
      
      jSONObject2.optString("wheel.json.JSONException", "wheel.json.JSONException");
      String string1 = JSONObject.quote("5m`kVpHHzb(\"1");
      assertEquals("\"5m`kVpHHzb(\\\"1\"", string1);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONObject", "wheel.json.JSONObject");
      try { 
        jSONObject1.getLong("wheel.json.JSONObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Double double0 = new Double(0.0);
      Byte byte0 = new Byte((byte)10);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      Double double1 = new Double(0.0);
      Object object0 = new Object();
      JSONObject.getNames(object0);
      Object object1 = JSONObject.NULL;
      jSONObject0.put("lo", object1);
      Integer integer0 = new Integer(8);
      try { 
        jSONObject0.getInt("8xY_]>?X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"8xY_]>?X\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("int", "int");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("ha", (Object) "ha");
      try { 
        jSONObject0.getBoolean("ha");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ha\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      JSONObject.quote("{}");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optDouble("\"{}\"");
      Iterator iterator0 = jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Map) null);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("{}");
      JSONObject jSONObject3 = jSONObject0.put("", (Object) "{}");
      JSONObject jSONObject4 = new JSONObject();
      JSONObject.getNames(jSONObject2);
      jSONObject3.optDouble((String) null, 0.0);
      JSONObject jSONObject5 = jSONObject4.append("", iterator0);
      jSONObject5.length();
      boolean boolean0 = jSONObject5.has("\"{}\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0, (-359), 21);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      Integer integer0 = new Integer(2101);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("._(@", (Object) byte0);
      Object object0 = new Object();
      jSONObject0.toString((-828));
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      try { 
        jSONObject0.put((String) null, (Object) byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Short short0 = new Short((short) (-3438));
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double((-1903.9484363803335));
      JSONObject.getNames((Object) double0);
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject.getNames(jSONObject0);
      Float float0 = new Float((-1401.34F));
      JSONObject jSONObject1 = jSONObject0.put("Q@jeD&L9K", (Object) float0);
      Integer integer0 = new Integer((short) (-3438));
      jSONObject1.getInt("Q@jeD&L9K");
      int int0 = jSONObject1.length();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      JSONObject.doubleToString(1.0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1";
      stringArray0[1] = "1";
      JSONObject jSONObject0 = new JSONObject("1", stringArray0);
      jSONObject0.optDouble("par");
      jSONObject0.keys();
      jSONObject0.names();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('}');
      stringWriter0.append('}');
      stringWriter0.append('}');
      StringWriter stringWriter1 = new StringWriter();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.toString(1756);
      jSONObject1.write(stringWriter0);
      JSONArray jSONArray0 = jSONObject1.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONArray0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("=ek1zk^v_i=0SC/um");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString((-2346), (-2346));
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      JSONObject.doubleToString(796.996228471);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject1 = jSONObject0.put("796.996228471", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("796.996228471");
      String string0 = "c";
      Integer integer0 = new Integer(1410);
      Boolean boolean0 = Boolean.valueOf((String) null);
      Boolean.logicalOr(true, true);
      JSONObject.valueToString(boolean0, 471, 0);
      jSONObject1.put("c", (Object) integer0);
      jSONObject2.has("796.996228471");
      Object object0 = new Object();
      try { 
        jSONObject1.getBoolean("c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"c\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((byte) (-81));
      jSONObject0.append("] is not a Boolean.", integer0);
      jSONObject0.opt("] is not a Boolean.");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(1410);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "");
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      JSONObject jSONObject2 = new JSONObject((Object) "");
      jSONObject1.has("Vq");
      Object object0 = new Object();
      jSONObject1.toString(1410);
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Short short0 = new Short((short) (-1915));
      JSONObject jSONObject0 = new JSONObject(short0);
      Short.compare((short) (-1468), (short) (-1468));
      jSONObject0.toString();
      Short.toUnsignedLong((short) (-1915));
      JSONObject jSONObject1 = jSONObject0.put("isfloatToIntBits", (int) (short) (-1915));
      jSONObject1.optDouble("isfloatToIntBits", (double) (short) (-1915));
      try { 
        jSONObject1.getJSONArray("isfloatToIntBits");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isfloatToIntBits\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject1 = jSONObject0.put("isparseShort", (Collection) linkedList0);
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject1.putOpt("is", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("nC`J(", 4078.050858811);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("{}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(3292.45306);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 253, 253);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      jSONObject0.optDouble("#C:k", 0.0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("Expected '", (Collection) linkedList0);
      Boolean boolean1 = new Boolean(true);
      jSONObject0.append("Expected '", boolean1);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = "B!P4";
      JSONObject jSONObject0 = new JSONObject((Object) "B!P4");
      // Undeclared exception!
      jSONObject0.toString(47, 3920);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("va");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0, 253, 253);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      JSONObject.quote("{}");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optDouble("\"{}\"");
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Map) null);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("{}");
      jSONObject0.put("", (Object) "{}");
      jSONObject2.has("\"{}\"");
      try { 
        jSONObject2.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Object object0 = JSONObject.NULL;
      jSONObject0.put("", object0);
      boolean boolean0 = jSONObject0.isNull("");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }
}
