/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 19:15:15 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("type");
      jSONScanner0.scanString(':');
      char[] charArray0 = new char[2];
      charArray0[0] = ':';
      charArray0[1] = ':';
      jSONScanner0.scanFieldString(charArray0);
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONScanner0.config(feature0, true);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6");
      boolean boolean0 = jSONReaderScanner0.isEnabled(1255, (-1992));
      assertTrue(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", property ", 0);
      char[] charArray0 = new char[5];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      charArray0[0] = '#';
      jSONReaderScanner0.scanUUID('|');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 2136);
      jSONReaderScanner0.intValue();
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      int int0 = 792;
      int int1 = (-3214);
      int int2 = 68;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.nextToken((-1));
      long long0 = jSONReaderScanner0.longValue();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8X");
      jSONReaderScanner0.nextToken();
      assertEquals(2, jSONReaderScanner0.token());
      
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(1210);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'Y');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'Y');
      assertEquals('X', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 433);
      char[] charArray0 = new char[8];
      charArray0[0] = 'J';
      charArray0[1] = '/';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      charArray0[2] = 'f';
      charArray0[3] = ',';
      charArray0[4] = 'b';
      charArray0[5] = 'P';
      charArray0[6] = 'K';
      charArray0[7] = 'm';
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.bytesValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("D2fyr");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.putChar('a');
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+9-?Yc)gN8<", 1833);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Aww", 110);
      jSONReaderScanner1.bytesValue();
      jSONReaderScanner0.longValue();
      SymbolTable symbolTable0 = new SymbolTable(110);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanSymbol(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.ZoneOffset");
      int int0 = 26;
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.np = 26;
      jSONReaderScanner0.close();
      SymbolTable symbolTable0 = new SymbolTable(32);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("WriteNullListAsEmpty", (-1992), (-14), 250, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("lpo", 47);
      jSONReaderScanner0.scanDate('r');
      char[] charArray0 = new char[1];
      SymbolTable symbolTable0 = new SymbolTable(647);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2. ct=y-F>bR5H8jQ2");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanIdent();
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=Y,A\"");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2315));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~]EsgTy@");
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.nextIdent();
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(32);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '2');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.close();
      jSONReaderScanner0.getLocale();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1");
      jSONReaderScanner0.next();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanString('N');
      assertEquals('m', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2. t=y-F>bR5H8jQ2");
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-2420));
      jSONScanner0.scanDate('f');
      jSONScanner0.token = (-2420);
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      jSONScanner0.scanFieldIntArray(charArray0);
      Class<String> class0 = String.class;
      jSONScanner0.token = (-2420);
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanBoolean('?');
      jSONScanner0.isEnabled(70);
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("s_", 0);
      jSONReaderScanner0.scanStringArray((Collection<String>) null, 'd');
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[3] = 'd';
      charArray0[4] = 'd';
      charArray0[5] = 'd';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 87);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-1008));
      int int0 = (-382);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-382));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("LpO");
      jSONReaderScanner0.getLocale();
      jSONReaderScanner0.scanIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 433);
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.scanType("com.alibaba.fastjson.util.IOUtils$1");
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = ':';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 357);
      SymbolTable symbolTable0 = new SymbolTable(128);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      jSONReaderScanner0.close();
      jSONReaderScanner0.getLocale();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Unknown");
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = 'i';
      char char0 = '6';
      charArray0[2] = '6';
      charArray0[3] = '2';
      charArray0[4] = '@';
      charArray0[5] = '1';
      jSONScanner0.scanFieldBigInteger(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(4506);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'P');
      jSONScanner0.scanString('X');
      char char1 = 'Y';
      jSONScanner0.scanDouble('Y');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"Unknown\", pos 7, json : Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AllowUnQuotedFieldNames");
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "AllowUnQuotedFieldNames";
      objectArray0[1] = (Object) jSONReaderScanner0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "AllowUnQuotedFieldNames";
      jSONReaderScanner0.lexError("xQp=]i&|b", objectArray0);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.indexOf('g', (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("VGB%I2_umO");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("VGB%I2_umO");
      SymbolTable symbolTable0 = new SymbolTable(9);
      jSONReaderScanner1.scanSymbolUnQuoted(symbolTable0);
      jSONReaderScanner1.getLocale();
      assertEquals('%', jSONReaderScanner1.getCurrent());
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" 5xHS>[Q/j0I$N");
      Locale locale0 = Locale.ROOT;
      jSONReaderScanner0.locale = locale0;
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanLong('g');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. H
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '7';
      charArray0[1] = '/';
      charArray0[2] = '7';
      charArray0[3] = '^';
      charArray0[4] = 'N';
      charArray0[5] = 'S';
      charArray0[6] = ')';
      charArray0[7] = 'B';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 47);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.isBlankInput();
      assertEquals('/', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 433);
      char[] charArray0 = null;
      jSONReaderScanner0.scanString('B');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!~]ERs0jsTT8@");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanBoolean('p');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("!~]ERs0jsTT8@");
      jSONReaderScanner0.getLocale();
      jSONReaderScanner1.getCalendar();
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "null";
      objectArray0[1] = (Object) "null";
      objectArray0[2] = (Object) "null";
      jSONReaderScanner0.lexError("YKp}x#7>E,Pl'7", objectArray0);
      jSONReaderScanner0.scanUUID('[');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.nextToken();
      assertEquals(8, jSONReaderScanner0.token());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2.=t=y-F?bR5H8j2");
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = '=';
      charArray0[2] = '`';
      charArray0[3] = ';';
      charArray0[4] = 'R';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.doubleValue();
      assertEquals('=', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AllowUnQuotedFieldNames");
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      charArray0[1] = 'd';
      charArray0[2] = 'C';
      charArray0[3] = 's';
      charArray0[4] = '8';
      charArray0[5] = '+';
      char char0 = 'X';
      charArray0[6] = 'X';
      charArray0[7] = 'P';
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanFieldFloat(charArray0);
      int int0 = 1957;
      char[] charArray1 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo((-2693), 1957, charArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", (-2));
      jSONReaderScanner0.token = (-552);
      jSONReaderScanner0.isEnabled((-2622), 3);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString(271, (-373));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -373
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 65);
      jSONReaderScanner0.isEnabled(59, 451);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol(74, 74, (-1), (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse false", 103);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.nextToken();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8X");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", property ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      float float0 = jSONReaderScanner0.scanFloat('v');
      assertEquals(0.0F, float0, 0.01F);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONLexerBase.isWhitespace('Y');
      JSONScanner jSONScanner0 = new JSONScanner("\":\"", 42);
      jSONScanner0.isBlankInput();
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanLong('O');
      assertEquals(42, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Z_Y@R");
      SymbolTable symbolTable0 = new SymbolTable(161);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'w');
      jSONReaderScanner0.close();
      jSONReaderScanner0.getLocale();
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '7';
      charArray0[1] = '/';
      charArray0[2] = 'X';
      charArray0[3] = '^';
      charArray0[4] = 'N';
      charArray0[5] = 'S';
      charArray0[6] = ')';
      charArray0[7] = 'M';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 47);
      jSONReaderScanner0.isBlankInput();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9!IunLmYihPUne");
      jSONReaderScanner0.nextToken();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nul|<l");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.nextIdent();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanLong('2');
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TQAERm|K'r7ie", 123);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.close();
      jSONReaderScanner0.getLocale();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(123, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 433);
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.scanType("");
      jSONReaderScanner0.token();
      jSONReaderScanner0.setToken(541);
      assertEquals(541, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'm';
      charArray0[1] = 'X';
      charArray0[2] = 'W';
      charArray0[3] = '2';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1342);
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "false";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      char char0 = 'E';
      jSONReaderScanner0.scanBoolean('E');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!~]ERsjTT8@");
      jSONReaderScanner0.nextIdent();
      assertEquals('~', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2.=t=y-F?bR5H8jQ2");
      jSONReaderScanner0.putChar('#');
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = '#';
      charArray0[3] = '#';
      charArray0[4] = '#';
      charArray0[5] = '#';
      jSONReaderScanner0.scanFieldString(charArray0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-3994), "Type", (-2), (-2), (-3994), (-3994), (-3994), (-2), (-2), (-2), 25, (-2), (-339));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -2
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", property ");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ,, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("dalvik");
      jSONReaderScanner0.getLocale();
      JSONScanner jSONScanner0 = new JSONScanner("j7h^4>Ul':[{/X[", 820);
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = 'e';
      jSONScanner0.scanString('|');
      charArray0[2] = 'P';
      Class<Integer> class0 = Integer.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanStringArray((Collection<String>) null, 'D');
      jSONReaderScanner0.getCurrent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("o^gQ", 92);
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = 'd';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner1.close();
      jSONReaderScanner0.getLocale();
      jSONReaderScanner0.close();
      assertEquals(92, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("r^v{^H<j&Lp&3aV[");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.nextToken();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("J?}-}j");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".time.Lo");
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) jSONReaderScanner0;
      objectArray0[2] = (Object) jSONReaderScanner0;
      objectArray0[3] = (Object) ".time.Lo";
      objectArray0[4] = (Object) ".time.Lo";
      objectArray0[5] = (Object) ".time.Lo";
      objectArray0[6] = (Object) ".time.Lo";
      jSONReaderScanner0.lexError(".time.Lo", objectArray0);
      jSONReaderScanner0.setLocale((Locale) null);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanString('Y');
      jSONReaderScanner0.getLocale();
      jSONReaderScanner0.info();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("};/&X]=f<F1,zU'H.!", (-553));
      jSONReaderScanner0.stringDefaultValue = "};/&X]=f<F1,zU'H.!";
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.getFeatures();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldUUID((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = 'm';
      charArray0[0] = 'm';
      char char1 = 'X';
      charArray0[1] = 'X';
      char char2 = 'W';
      charArray0[2] = 'W';
      charArray0[3] = '2';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1342);
      Feature feature0 = Feature.UseBigDecimal;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.intValue();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 1342, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(X");
      jSONReaderScanner0.nextToken();
      assertEquals('X', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("x/Jj>30*lJgs");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((-4445));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. /
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^KrVu#*\"_B2.MnUb(M");
      jSONReaderScanner0.nextIdent();
      assertEquals('K', jSONReaderScanner0.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloatArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!~]ERs0jsTT8@");
      int int0 = jSONReaderScanner0.scanType((String) null);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-2), int0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.util.IOUtils$1";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", (-2));
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.pos = (-958);
      jSONReaderScanner0.scanString('l');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 433);
      jSONReaderScanner0.bytesValue();
      Feature feature0 = Feature.IgnoreNotMatch;
      boolean boolean0 = jSONReaderScanner0.isEnabled(feature0);
      assertTrue(boolean0);
      assertEquals(433, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!~]ERs0jsTT8@");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Locale locale0 = Locale.ENGLISH;
      jSONReaderScanner0.scanUUID(',');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "java.time.ZonedDateTime";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.ZonedDateTime", 1001);
      jSONReaderScanner0.info();
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) '>';
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) '>';
      objectArray0[3] = (Object) "java.time.ZonedDateTime";
      objectArray0[4] = (Object) '>';
      jSONReaderScanner0.lexError("", objectArray0);
      charArray0[1] = '9';
      jSONReaderScanner0.longValue();
      charArray0[2] = '!';
      charArray0[3] = '`';
      charArray0[4] = '=';
      charArray0[5] = '.';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2. t=y-F?bR5H8jQ2");
      jSONReaderScanner0.hasSpecial = false;
      jSONReaderScanner0.bytesValue();
      int int0 = jSONReaderScanner0.scanType("new");
      assertEquals((-2), int0);
      
      String string0 = jSONReaderScanner0.stringDefaultValue();
      assertNull(string0);
      
      jSONReaderScanner0.getCalendar();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("H4Z>_*pWc\"", (-1987));
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanInt('6');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-24));
      Locale locale0 = Locale.GERMANY;
      jSONScanner0.locale = locale0;
      jSONScanner0.lexError("IHl", (Object[]) null);
      jSONScanner0.scanISO8601DateIfMatch(true);
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new", 0);
      jSONReaderScanner1.nextIdent();
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, 'E');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("org.springframework.aop.");
      jSONReaderScanner0.getLocale();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('N');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("I8^25 9");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.setTimeZone((TimeZone) null);
      assertEquals('8', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fEb\"NjBX58C/U8R7B4[");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.nextToken();
      assertEquals(7, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 433);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(433);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - c, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=Y,A\"");
      jSONReaderScanner0.hasSpecial = false;
      jSONReaderScanner0.scanString();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("LpO");
      char[] charArray0 = new char[4];
      charArray0[0] = '7';
      charArray0[1] = 'K';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      charArray0[2] = '2';
      charArray0[3] = 'Z';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("LpO");
      jSONReaderScanner0.getLocale();
      SymbolTable symbolTable0 = new SymbolTable(323);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray((char[]) null, 323, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^KrVu#*\"_B2.MnUb(M");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("LpO");
      jSONReaderScanner0.nextToken();
      assertEquals(1, jSONReaderScanner0.token());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AllowUnQuotedFieldNames");
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.tokenName();
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("H4Z>_*pWc\"", (-1987));
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.close();
      char char0 = '6';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TQAERm|K'r7ie", 123);
      Locale locale0 = Locale.PRC;
      StringReader stringReader0 = new StringReader("TQAERm|K'r7ie");
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      String string0 = jSONReaderScanner0.stringDefaultValue();
      assertNull(string0);
      
      jSONReaderScanner0.setLocale(locale0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(123, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("can not cast to JSONObject.");
      JSONLexerBase.readString((char[]) null, 0);
      jSONReaderScanner0.getLocale();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}rx]j$");
      jSONReaderScanner0.nextToken();
      assertEquals('r', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!~]ERsjTT8@");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58, 58);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(58);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'Q');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1");
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.bytesValue();
      boolean boolean0 = jSONReaderScanner0.isEnabled(102, 2623);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2. t=y-F?bR5H8jQ2");
      jSONReaderScanner0.scanString('1');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("iY+c?kz(+{EUGhR");
      jSONScanner0.putChar('1');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('6');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 6 - i, info : pos 0, json : iY+c?kz(+{EUGhR
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("true");
      jSONReaderScanner1.getLocale();
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = 'W';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.indexOf('*', 758);
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals(0, int0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanString('Z');
      jSONReaderScanner0.scanDouble('$');
      jSONReaderScanner0.getLocale();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      charArray0[1] = '_';
      charArray0[2] = '3';
      charArray0[3] = ',';
      charArray0[4] = '{';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 48);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(1747);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '3');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2. t=y-F>bR5H8jQ2");
      jSONReaderScanner0.nextToken();
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = (-1105);
      JSONScanner jSONScanner0 = new JSONScanner("Set", (-1105));
      char char0 = '_';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('_');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match _ - S, info : pos 0, json : Set
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = 'J';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 127, 172);
      SymbolTable symbolTable0 = new SymbolTable(127);
      jSONReaderScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : &
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("NxWYSexe/xPQJ7,-$p");
      jSONReaderScanner0.nextToken();
      assertEquals('/', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1");
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDate('\"');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'Bf4w");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AllowUnQuotedFieldNames");
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.matchStat();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2.=t=y-F?bR8jQ2");
      SymbolTable symbolTable0 = new SymbolTable(45);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 2
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".time.Lo");
      jSONReaderScanner0.scanDate('Z');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = ')';
      charArray0[5] = 'h';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2222, (-267));
      jSONReaderScanner0.nextToken();
      assertEquals(11, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2.=t=y-F?bR5H8jQ2");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.getLocale();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanNullOrNew();
      jSONReaderScanner0.info();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("gJ-dj1:f@Q%q{^;");
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanDecimal('U');
      assertEquals(0, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 433);
      boolean boolean0 = jSONReaderScanner0.isEnabled(88, 0);
      assertFalse(boolean0);
      assertEquals(433, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('\u0016');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~J=", 34);
      char[] charArray0 = new char[5];
      charArray0[0] = 'h';
      charArray0[1] = 'x';
      charArray0[2] = '#';
      charArray0[3] = '*';
      charArray0[4] = 'w';
      jSONScanner0.scanFieldSymbol(charArray0);
      char[] charArray1 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("treeset");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2. t=y-F?bR5H8jQ2");
      jSONReaderScanner0.getLocale();
      boolean boolean0 = JSONLexerBase.isWhitespace('3');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WriteNonStringKeyAsString", (-942));
      char char0 = 'I';
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2. t=y-F?bR5H8jQ2");
      jSONReaderScanner0.getLocale();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('N');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("vck1Dr~HLy1sRT [", 230);
      jSONReaderScanner0.scanFloat('Y');
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.getCurrent();
      JSONScanner jSONScanner0 = new JSONScanner("vck1Dr~HLy1sRT [");
      jSONScanner0.indexOf('v', (-1));
      int int0 = 42;
      int int1 = (-1553);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2686));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6");
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = '$';
      jSONScanner0.scanInt('');
      charArray0[2] = 'Q';
      jSONScanner0.longValue();
      charArray0[3] = 'W';
      charArray0[4] = 'r';
      charArray0[5] = '-';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "2. t=\\y-F>bR5H8jQ2";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2. t=y-F>bR5H8jQ2");
      jSONReaderScanner0.scanInt('b');
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((Reader) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      jSONReaderScanner0.getFeatures();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 433);
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = 'y';
      charArray0[2] = '/';
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(433);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - c, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 433);
      jSONReaderScanner0.bytesValue();
      int int0 = jSONReaderScanner0.scanInt('@');
      assertEquals(0, int0);
      assertEquals(433, jSONReaderScanner0.getFeatures());
      
      JSONScanner jSONScanner0 = new JSONScanner("3Xmph;", 0);
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WriteBigDecimalAsPlain", (-3778));
      char[] charArray0 = new char[5];
      charArray0[0] = 'I';
      charArray0[1] = '1';
      charArray0[2] = '';
      charArray0[3] = 'M';
      charArray0[4] = '|';
      jSONScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2.=t=y-F?bR5H8jQ2");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      float float0 = jSONReaderScanner0.scanFloat('{');
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8X");
      jSONReaderScanner0.scanLong('~');
      jSONReaderScanner0.nextToken();
      assertEquals('X', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".class", 49);
      jSONReaderScanner0.bytesValue();
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      charArray0[1] = '[';
      charArray0[2] = 'W';
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 49);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONLexerBase.isWhitespace('O');
      JSONScanner jSONScanner0 = new JSONScanner("true", (-3857));
      Feature feature0 = Feature.SupportAutoType;
      jSONScanner0.config(feature0, false);
      boolean boolean0 = jSONScanner0.isEnabled((-2453), 14);
      assertEquals((-1052433), jSONScanner0.getFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 433);
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = 'i';
      charArray0[2] = '3';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.bytesValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanType("");
      jSONReaderScanner0.next();
      assertEquals(433, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2.=t=y-F?bR5H8jQ2");
      jSONReaderScanner0.nextToken(78);
      jSONReaderScanner0.putChar('?');
      jSONReaderScanner0.scanDouble('m');
      jSONReaderScanner0.scanNumber();
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(1993L, long0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.close();
      jSONReaderScanner0.getLocale();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("co.alibaba.fastjson.util.IOUtils1");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(X");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanDecimal('X');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      double double0 = jSONReaderScanner0.scanDouble('$');
      assertEquals(0.0, double0, 0.01);
      
      jSONReaderScanner0.getLocale();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("org.springframework.aop.");
      jSONReaderScanner0.getLocale();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloatArray2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 433);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      Feature feature0 = Feature.SupportNonPublicField;
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.close();
      jSONReaderScanner0.getLocale();
      boolean boolean0 = JSONLexerBase.isWhitespace('Z');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("zn''Rq2:Tyn7X");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nW ;ZVcZm]kY:~,!8");
      char[] charArray0 = new char[9];
      jSONReaderScanner0.scanDouble('|');
      charArray0[0] = '?';
      charArray0[1] = 'g';
      jSONReaderScanner0.isRef();
      charArray0[2] = '`';
      charArray0[3] = '#';
      charArray0[4] = 'W';
      charArray0[5] = 'd';
      charArray0[6] = 'H';
      charArray0[7] = 'W';
      charArray0[8] = 'n';
      jSONReaderScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AllowUnQuotedFieldNames");
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      jSONReaderScanner0.scanInt('g');
      jSONReaderScanner0.next();
      jSONReaderScanner0.getLocale();
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = "2. t=\\y-F>bR5H8jQ2";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2. t=y-F>bR5H8jQ2");
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = null;
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, 'S');
      jSONReaderScanner0.np = (-338);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      char[] charArray0 = null;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("LpO+gmaBg}bu");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.np = 241;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("PeJM2VYJJ(");
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      jSONReaderScanner0.scanStringArray(set0, '0');
      jSONReaderScanner0.nextIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("PeJM2VYJJ(");
      jSONReaderScanner0.nextToken();
      char char0 = 'a';
      jSONReaderScanner0.scanString('a');
      jSONReaderScanner0.scanBoolean('a');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Z_Y@R");
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFloat('}');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanIdent();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.getCalendar();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibab'.fastjson.util.IOUtilsf1", 401);
      char[] charArray0 = new char[1];
      charArray0[0] = 't';
      char[] charArray1 = new char[5];
      charArray1[0] = 't';
      charArray1[1] = 't';
      charArray1[2] = 't';
      jSONReaderScanner0.scanFieldDate(charArray1);
      charArray1[3] = 't';
      charArray1[4] = 't';
      jSONReaderScanner0.scanFieldFloat(charArray1);
      jSONReaderScanner0.matchStat = (-142);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.bytesValue();
      int int0 = JSONLexer.UNKNOWN;
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AllowUnQuotedFieldNames");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8X");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2((char[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2.=t=y-F?bR5H8jQ2");
      jSONReaderScanner0.nextToken();
      assertEquals(3, jSONReaderScanner0.token());
      
      long long0 = jSONReaderScanner0.scanLong('h');
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" t=");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("D2fyr");
      jSONReaderScanner0.nextToken();
      float float0 = jSONReaderScanner0.scanFloat('=');
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(2.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanInt('/');
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-2420));
      jSONScanner0.scanDate('f');
      jSONScanner0.token = (-2420);
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      jSONScanner0.scanFieldIntArray(charArray0);
      Class<String> class0 = String.class;
      jSONScanner0.token = (-2420);
      assertEquals((-2), jSONScanner0.matchStat());
      
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanBoolean('?');
      jSONScanner0.scanInt('z');
      assertEquals((-2420), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.getLocale();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('6');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~]EsgTy@");
      char[] charArray0 = new char[7];
      charArray0[0] = 'I';
      charArray0[1] = '\\';
      charArray0[2] = '/';
      charArray0[3] = 'O';
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 'O';
      objectArray0[1] = (Object) jSONReaderScanner0;
      objectArray0[2] = (Object) '/';
      jSONReaderScanner0.lexError("~]EsgTy@", objectArray0);
      charArray0[4] = 'c';
      charArray0[5] = '^';
      jSONReaderScanner0.nextToken(188);
      charArray0[6] = '1';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.nextIdent();
      assertEquals('E', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":\"", 11);
      char char0 = '7';
      jSONScanner0.scanDate('7');
      char char1 = '[';
      char char2 = '&';
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('7', '\'', '[', '&', '&');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scA");
      Locale locale0 = Locale.JAPANESE;
      float float0 = jSONReaderScanner0.scanFloat('');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-2420));
      jSONScanner0.scanDate('f');
      jSONScanner0.token = (-2420);
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      jSONScanner0.scanType("");
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.token = (-2420);
      PipedReader pipedReader0 = new PipedReader(2487);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.util.IOUtils$1";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 433);
      jSONReaderScanner0.nextToken(433);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('&');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match & - o, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nul");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AllowUnQuotedFieldNames");
      char[] charArray0 = new char[8];
      JSONScanner jSONScanner0 = new JSONScanner("AllowUnQuotedFieldNames", 0);
      int[] intArray0 = JSONLexerBase.digits;
      Class<Object> class0 = Object.class;
      jSONScanner0.sbuf = charArray0;
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanBoolean('t');
      jSONScanner0.isEnabled(2147);
      jSONReaderScanner0.bytesValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Type: ");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanDate('x');
      assertEquals(':', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanNullOrNew();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 357);
      Locale locale0 = Locale.PRC;
      Class<Object> class0 = Object.class;
      long long0 = jSONReaderScanner0.scanLong('k');
      assertEquals(0L, long0);
      
      jSONReaderScanner0.newCollectionByType(class0);
      String string0 = jSONReaderScanner0.stringDefaultValue();
      assertNull(string0);
      assertEquals(357, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = 433;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 433);
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      char char0 = '8';
      charArray0[1] = '8';
      int int1 = 4083;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 4083);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      SymbolTable symbolTable0 = new SymbolTable(51068);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '~');
      JSONLexerBase.isWhitespace('V');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Z_Y@R");
      char[] charArray0 = new char[2];
      charArray0[0] = 'H';
      charArray0[1] = '\\';
      jSONReaderScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("dalvik");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanBoolean('{');
      assertEquals('a', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("D2fy@~OTI{1Vp/u");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanIdent();
      Feature feature0 = Feature.UseObjectArray;
      jSONReaderScanner0.isEnabled(feature0);
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("lpo");
      char[] charArray0 = new char[8];
      charArray0[0] = 'U';
      charArray0[1] = ']';
      charArray0[2] = ':';
      charArray0[3] = '+';
      charArray0[4] = 'y';
      charArray0[5] = 'v';
      charArray0[6] = '`';
      charArray0[7] = '0';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 433);
      SymbolTable symbolTable0 = new SymbolTable(84);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'P');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nW ;ZVcZm]kY:~,!8");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fals~");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("encodeUTF8 error");
      jSONReaderScanner0.nextToken();
      int int0 = jSONReaderScanner0.token();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2. t=y-F>bR5H8jQ2");
      jSONReaderScanner0.getLocale();
      Feature feature0 = Feature.OrderedField;
      boolean boolean0 = jSONReaderScanner0.isEnabled(feature0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONLexerBase.isWhitespace(' ');
      JSONScanner jSONScanner0 = new JSONScanner("tudl", 23);
      assertEquals(0, jSONScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(23);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, ']');
      assertEquals(23, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Lc.78ST_F'#9 {Y=KJG", 5);
      jSONReaderScanner0.scanDecimal('|');
      jSONReaderScanner0.hasSpecial = false;
      jSONReaderScanner0.scanType("Lc.78ST_F'#9 {Y=KJG");
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(5);
      char char0 = 'o';
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'o');
      jSONReaderScanner0.charAt(48);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("gb<9W<r&j");
      jSONReaderScanner0.nextToken();
      assertEquals('b', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("uefined");
      jSONReaderScanner0.nextToken();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("org.springframework.aop.");
      char[] charArray0 = new char[8];
      charArray0[0] = 'y';
      charArray0[1] = 'a';
      charArray0[2] = 'T';
      charArray0[3] = '{';
      charArray0[4] = '7';
      charArray0[5] = '}';
      charArray0[6] = '\'';
      charArray0[7] = '\'';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 70, 46);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. y
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.scanDate('6');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("g_<l!GrDKSHxr+S");
      jSONReaderScanner0.nextIdent();
      assertEquals('_', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 84, (-141));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Feature.AllowSingleQuotes is false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1");
      jSONReaderScanner0.getLocale();
      SymbolTable symbolTable0 = new SymbolTable(58);
      jSONReaderScanner0.scanSymbol(symbolTable0, 'O');
      assertEquals('U', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 433);
      jSONReaderScanner0.scanLong('E');
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((char[]) null, (-2180));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nxwysexe");
      int int0 = 92;
      jSONReaderScanner0.features = 92;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2.=t=y-F?bR5H8jQ2");
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = 'v';
      charArray0[3] = '7';
      charArray0[4] = '7';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.stringDefaultValue = "";
      jSONReaderScanner0.scanLong('7');
      jSONReaderScanner0.nextToken();
      assertEquals('=', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse null");
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(94);
      jSONReaderScanner0.scanSymbol(symbolTable0, 'a');
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-j");
      jSONReaderScanner0.nextToken();
      assertEquals(2, jSONReaderScanner0.token());
      
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("FJnbG{<", 2475);
      jSONScanner0.scanDate('N');
      assertEquals(2475, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'_)r&VO");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("qfR]w6G,PcHBi");
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.timeZone = timeZone0;
      jSONReaderScanner0.nextIdent();
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(7074, int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"7/B`;+ /.ak{]H_LP");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[|a6tU~0hnq>S*");
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("[|a6tU~0hnq>S*", objectArray0);
      jSONReaderScanner0.nextToken();
      assertEquals('|', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanType("");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 433);
      jSONReaderScanner0.scanUUID('d');
      jSONReaderScanner0.bytesValue();
      int int0 = jSONReaderScanner0.scanType("");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      jSONReaderScanner0.scanFloat('j');
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. u
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("tudl");
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = '+';
      charArray0[2] = 'P';
      jSONReaderScanner0.sbuf = charArray0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal getter");
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(67);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'M');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.setToken((-1613937202));
      jSONReaderScanner0.scanType("null");
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = '`';
      charArray0[2] = ':';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 2184);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TX");
      jSONReaderScanner0.scanNumber();
      int int0 = JSONLexer.NOT_MATCH;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 433);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-1255));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - c, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'_)rl&O");
      char char0 = ' ';
      JSONLexerBase.isWhitespace(' ');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2. t=y-F?bR5H8jQ2");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("m_");
      jSONReaderScanner0.scanNumber();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONReaderScanner0.scanStringArray(linkedHashSet0, '?');
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xrezwu");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. r
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~ww");
      jSONReaderScanner0.scanFloat('-');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!~]ERs0jsTT8@");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('g');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      charArray0[1] = ']';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanFieldDate(charArray0);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#kRBkY`8igO!c6pb;");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.getLocale();
      jSONReaderScanner0.bytesValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 433);
      jSONReaderScanner0.getLocale();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2.=t=y-F?bR5H8jQ2");
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.decimalValue(false);
      assertEquals('=', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.nextToken(8);
      jSONReaderScanner0.charAt(5690);
      jSONReaderScanner0.scanNumber();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner0.setTimeZone(timeZone0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2.=t=y-F?bR5H8jQ2");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("LpO");
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      double double0 = jSONReaderScanner1.scanDouble('\\');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", 3473);
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[3] = 'd';
      charArray0[4] = 'd';
      charArray0[5] = 'V';
      charArray0[6] = 'd';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 466, 2754);
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanUUID('z');
      jSONReaderScanner0.bytesValue();
      int int0 = jSONReaderScanner0.scanType("");
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".time.Lo");
      jSONReaderScanner0.scanBoolean('5');
      jSONReaderScanner0.nextToken();
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-882));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.timeZone = null;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new", 0);
      jSONReaderScanner1.nextToken();
      jSONReaderScanner1.nextIdent();
      jSONReaderScanner1.stringDefaultValue();
      boolean boolean0 = JSONLexerBase.isWhitespace('P');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$VALUES");
      jSONReaderScanner0.nextIdent();
      JSONScanner jSONScanner0 = new JSONScanner("$VALUES");
      // Undeclared exception!
      try { 
        jSONScanner0.subString(101, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      jSONReaderScanner0.nextToken();
      assertEquals(4, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.nextIdent();
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(7, jSONReaderScanner0.token());
      assertEquals(595723L, long0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.scanFalse();
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2. t=y-F>bR5H8jQ2");
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanDouble('L');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AllowUnQuotedFieldNames");
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      JSONScanner jSONScanner0 = new JSONScanner("AllowUnQuotedFieldNames");
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".k");
      Locale locale0 = new Locale("EI']n_A'IY][X=E0", "EI']n_A'IY][X=E0");
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.nextToken();
      assertEquals(25, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2.=t=y-F?bR5H8jQ2");
      SymbolTable symbolTable0 = new SymbolTable(678);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '6');
      jSONReaderScanner0.nextToken();
      assertEquals('=', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char[] charArray0 = new char[6];
      jSONReaderScanner0.info();
      charArray0[0] = '?';
      charArray0[1] = 'x';
      charArray0[2] = '4';
      charArray0[3] = 'A';
      charArray0[4] = 's';
      charArray0[5] = 'O';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.nextToken();
      assertEquals(8, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanNullOrNew();
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("J?}-}j");
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibab.fastjson.parser.ymbolTable");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("com.alibab.fastjson.parser.ymbolTable");
      jSONReaderScanner1.nextIdent();
      boolean boolean0 = jSONReaderScanner1.isEnabled(0);
      assertEquals(18, jSONReaderScanner1.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2fy");
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 433);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 0);
      jSONReaderScanner1.bytesValue();
      jSONReaderScanner0.longValue();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3333), "com.alibaba.fastjson.util.IOUtils$1");
      jSONReaderScanner0.setTimeZone(simpleTimeZone0);
      char[] charArray0 = null;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 2104, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      int int0 = 4602;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 4602);
      SymbolTable symbolTable0 = new SymbolTable(4602);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", (-2));
      jSONReaderScanner0.bytesValue();
      char[] charArray0 = new char[5];
      charArray0[0] = '{';
      charArray0[1] = '+';
      charArray0[2] = '2';
      charArray0[3] = 'B';
      charArray0[4] = 'I';
      jSONReaderScanner0.scanFieldString(charArray0);
      boolean boolean0 = jSONReaderScanner0.isEnabled(2126, (-346));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xrEZWU<m`N\"gA");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. r
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+~");
      jSONReaderScanner0.nextToken();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = '^';
      char char1 = '}';
      charArray0[1] = '}';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '\u0000', '\u0000');
      SymbolTable symbolTable0 = new SymbolTable(598);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2. t=y-F>bR5H8jQ2");
      jSONReaderScanner0.scanDecimal('');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = '#';
      charArray0[2] = 'q';
      charArray0[3] = '%';
      charArray0[4] = 'a';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("D2fyr~OTI{1Vp/u");
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanStringArray((Collection<String>) null, ':');
      jSONReaderScanner0.getCalendar();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      char char0 = '}';
      charArray0[1] = '}';
      charArray0[2] = '8';
      int int0 = 589;
      int int1 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 589, 0);
      Locale locale0 = Locale.GERMAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      jSONReaderScanner0.scanStringArray(set0, '}');
      jSONReaderScanner0.tokenName();
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-1));
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanFloat('}');
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanDecimal('0');
      int int2 = 2433;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(842, charArray0, 2433, 94);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TQAER|K'Fr7ie", 123);
      Locale locale0 = Locale.KOREAN;
      jSONReaderScanner0.bytesValue();
      int int0 = jSONReaderScanner0.scanType("null");
      assertEquals((-2), int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(123, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" 5xHS>[Q/j0I$N");
      jSONReaderScanner0.nextToken();
      assertEquals('x', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 'Y');
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('Y');
      assertEquals(89, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8X");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.nextToken();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = 'j';
      charArray0[2] = 'J';
      charArray0[3] = '0';
      charArray0[4] = '&';
      charArray0[5] = 'g';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 50);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("tl");
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", property ");
      jSONReaderScanner0.nextToken();
      assertEquals(16, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanDecimal('');
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertFalse(boolean0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal identifier : ");
      jSONScanner0.info();
      jSONScanner0.info();
      PipedReader pipedReader0 = new PipedReader(701);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0, 701);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2. t=y-F>bR5H8jQ2");
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDouble((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanType("");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      float float0 = jSONReaderScanner0.scanFloat('A');
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.util.IOUtils$1";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 433);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2. t=y-F?bR5H8jQ2");
      jSONReaderScanner0.close();
      jSONReaderScanner0.getLocale();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 2
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2. t=y-F?bR5H8jQ2");
      jSONReaderScanner0.getLocale();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      jSONScanner0.scanStringArray(set0, 'U');
      jSONScanner0.getTimeZone();
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      jSONScanner0.sbuf = charArray0;
      int int0 = 68;
      SymbolTable symbolTable0 = new SymbolTable(4);
      Locale locale0 = Locale.ENGLISH;
      jSONScanner0.locale = locale0;
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(68, 68, 68, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan false error");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      int int0 = 433;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 433);
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.token();
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloat((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONLexerBase.isWhitespace('r');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("U^B_9}6}Mv()u4");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.bytesValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("EOF error");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("EOF error");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONLexerBase.isWhitespace('T');
      char[] charArray0 = new char[4];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'E';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 92);
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2. t=y-F>bR5H8jQ2");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '+';
      charArray0[1] = ')';
      charArray0[2] = 'J';
      charArray0[3] = 'D';
      charArray0[4] = 'q';
      charArray0[5] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4066);
      jSONReaderScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      charArray0[1] = 'w';
      charArray0[2] = '>';
      charArray0[3] = ':';
      charArray0[4] = 'R';
      charArray0[5] = 'Z';
      charArray0[6] = '*';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 168);
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2. t=y-F>bR5H8jQ2");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 2, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("org.springframework.aop.");
      jSONReaderScanner0.nextToken((-1766));
      jSONReaderScanner0.nextToken();
      assertEquals('g', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2.=t=y-F?bR5H8jQ2");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal(']');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.util.IOUtils$1";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 432);
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = '9';
      charArray0[2] = '*';
      charArray0[3] = 'V';
      charArray0[4] = 'c';
      charArray0[5] = '6';
      charArray0[6] = 'H';
      charArray0[7] = 'N';
      SymbolTable symbolTable0 = new SymbolTable(542);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 432, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2.=t=y-F?bR5H8jQ2");
      jSONReaderScanner0.scanNumber();
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 2.
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("treeset");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("false");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse null");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONReaderScanner0.scanStringArray(linkedList0, '|');
      jSONReaderScanner0.nextToken(8);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      SymbolTable symbolTable0 = new SymbolTable(45);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '>');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, '\\');
      jSONReaderScanner0.nextIdent();
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!~]ERs0jsTT8@");
      jSONReaderScanner0.hasSpecial = false;
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.scanDouble('+');
      jSONReaderScanner0.getLocale();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WriteBigDecimalAsPlain", (-3778));
      JSONScanner jSONScanner1 = new JSONScanner("WriteBigDecimalAsPlain");
      jSONScanner1.isBlankInput();
      // Undeclared exception!
      try { 
        jSONScanner1.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com", 1237);
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'w';
      charArray0[1] = 'K';
      charArray0[2] = 'D';
      charArray0[3] = '<';
      charArray0[4] = 'C';
      charArray0[5] = 'C';
      charArray0[6] = 'u';
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.putChar('D');
      assertEquals(1237, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 433);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("40nUD.@R/:Of5'i'|(");
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. n
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(";Eyn7<${}J3~bD");
      jSONReaderScanner0.nextToken();
      assertEquals('E', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-51));
      jSONReaderScanner0.scanStringArray((Collection<String>) null, 'd');
      jSONReaderScanner0.nextToken();
      assertEquals(20, jSONReaderScanner0.token());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.util.IOUtils$1";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 433);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextIdent();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2. t=y-F>bR5H8jQ2");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!~]ERsjTT8@");
      jSONReaderScanner0.nextToken();
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals('~', char0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("dalvik");
      jSONReaderScanner0.getLocale();
      int int0 = jSONReaderScanner0.pos();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse new");
      jSONReaderScanner0.scanNumber();
      char[] charArray0 = new char[3];
      char char0 = ',';
      charArray0[0] = ',';
      jSONReaderScanner0.ch = ',';
      charArray0[1] = '+';
      charArray0[2] = 'Q';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 120);
      int int0 = (-2510);
      SymbolTable symbolTable0 = new SymbolTable(62);
      TimeZone timeZone0 = TimeZone.getTimeZone("error parse new");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      jSONScanner0.calendar = calendar0;
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 1115, 24, 22);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~]EsgTy@");
      SymbolTable symbolTable0 = new SymbolTable(1530);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'M');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1");
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('1');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 1 - o, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = ", property ";
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", property ", 0);
      char[] charArray0 = new char[5];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      charArray0[0] = '#';
      jSONReaderScanner0.scanUUID('|');
      charArray0[1] = 'e';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2. t=y-F>bR5H8jQ2");
      BigDecimal bigDecimal0 = new BigDecimal((int) '\u008E');
      char[] charArray0 = new char[0];
      int int0 = (-1665);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-1665));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 433);
      jSONReaderScanner0.info();
      jSONReaderScanner0.bytesValue();
      assertEquals(433, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1", 1758);
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = 'f';
      charArray0[2] = '.';
      charArray0[3] = 'D';
      charArray0[4] = 'n';
      jSONReaderScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(2543);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - c, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("org.springframework.aop.");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 851);
      char[] charArray0 = new char[7];
      charArray0[0] = '?';
      charArray0[1] = 'v';
      charArray0[2] = '?';
      charArray0[3] = '+';
      charArray0[4] = '{';
      charArray0[5] = '>';
      charArray0[6] = '2';
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanBoolean('n');
      Locale locale0 = Locale.JAPAN;
      jSONReaderScanner0.bytesValue();
      assertEquals(3, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2.=t=y-F?bR5H8jQ2");
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[4];
      charArray0[0] = '_';
      charArray0[1] = 'G';
      charArray0[2] = ':';
      charArray0[3] = 'y';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-2934));
      jSONScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.decimalValue(true);
      assertEquals('=', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AllowUnQuotedFieldNames");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.tokenName();
      char[] charArray0 = new char[8];
      jSONReaderScanner0.scanBoolean('v');
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      charArray0[0] = 'g';
      jSONReaderScanner0.bytesValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!~]ERsjTT8@");
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.nextToken();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      char char0 = 'p';
      JSONLexerBase.isWhitespace('p');
      JSONScanner jSONScanner0 = new JSONScanner("+s!f$Oh^JFeW]TS");
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : +pos 0, json : +s!f$Oh^JFeW]TS
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8X");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L7");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. L
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("H4Z>_*pWc\"", (-1987));
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.close();
      SymbolTable symbolTable0 = new SymbolTable(103);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanLong('v');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibab'.fastjson.util.IOUtilsf1", 401);
      jSONReaderScanner0.bytesValue();
      boolean boolean0 = jSONReaderScanner0.isEnabled((-673), (-1843330870));
      assertEquals(401, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5BBxR(FE9(nG");
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = 'G';
      charArray0[2] = ',';
      charArray0[3] = 'K';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.nextToken();
      assertEquals('B', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fatjson.t<l.IUtils$1");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.isBlankInput();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 436);
      jSONReaderScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("u$");
      jSONScanner0.longValue();
      jSONScanner0.scanDouble('1');
      char char0 = 'G';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('G');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match G - u, info : pos 0, json : u$
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("string");
      SymbolTable symbolTable0 = new SymbolTable(48);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray((char[]) null, (-1130), symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-2420));
      jSONScanner0.scanDate('f');
      jSONScanner0.token = (-2420);
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      jSONScanner0.scanFieldIntArray(charArray0);
      Class<String> class0 = String.class;
      jSONScanner0.token = (-2420);
      assertEquals((-2), jSONScanner0.matchStat());
      
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanFieldString(charArray0);
      JSONLexerBase.isWhitespace('?');
      jSONScanner0.scanInt('z');
      assertEquals((-2420), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      JSONLexerBase.isWhitespace('K');
      JSONScanner jSONScanner0 = new JSONScanner("_2>9OGQ", (-3390));
      jSONScanner0.next();
      String string0 = jSONScanner0.stringDefaultValue();
      assertEquals((-3390), jSONScanner0.getFeatures());
      assertNotNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = 'f';
      charArray0[2] = 'K';
      charArray0[3] = '2';
      charArray0[4] = '2';
      charArray0[5] = 'K';
      charArray0[6] = '2';
      charArray0[7] = 'K';
      charArray0[8] = '2';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.isEOF();
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.nextIdent();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONLexerBase.isWhitespace('w');
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = 'w';
      charArray0[4] = 'w';
      charArray0[5] = 'w';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 4);
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      jSONScanner0.scanStringArray(set0, 'w');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.nextToken();
      assertEquals(20, jSONReaderScanner0.token());
      
      jSONReaderScanner0.scanInt('u');
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nzll");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. n
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" t=");
      char char0 = '<';
      jSONReaderScanner0.scanString('<');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("qgx");
      jSONScanner0.matchStat = (-4495);
      char[] charArray0 = new char[6];
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONScanner0.scanStringArray(arrayList0, 'S');
      jSONScanner0.scanNumber();
      charArray0[0] = '?';
      charArray0[1] = 'C';
      jSONScanner0.eofPos = 118;
      charArray0[2] = '@';
      jSONScanner0.isRef();
      charArray0[3] = 'q';
      charArray0[4] = '&';
      charArray0[5] = 't';
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanInt('C');
      jSONScanner0.longValue();
      jSONScanner0.isEOF();
      jSONScanner0.isEnabled((-4495));
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.info();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2. t=y-F>bR5H8jQ2");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.compatibleWithJavaBean");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Q{~");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = 'i';
      charArray0[2] = 's';
      charArray0[3] = 'R';
      charArray0[4] = '1';
      charArray0[5] = 'u';
      charArray0[6] = 'v';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 275, 275);
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6");
      jSONReaderScanner0.bytesValue();
      int int0 = jSONReaderScanner0.scanType("co.alibaba.fastjson.util.IOUtils1");
      assertEquals((-2), int0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      char[] charArray0 = new char[7];
      char char0 = '(';
      charArray0[0] = '(';
      charArray0[1] = '`';
      char char1 = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = 'N';
      charArray0[4] = 'E';
      char char2 = '%';
      charArray0[5] = '%';
      char char3 = '@';
      charArray0[6] = '@';
      int int0 = 0;
      JSONLexerBase.readString(charArray0, 0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      int int1 = 2;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      float float0 = jSONReaderScanner1.scanFloat('x');
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0.0F, float0, 0.01F);
      
      JSONScanner jSONScanner0 = new JSONScanner("'.+f13pHdS");
      char[] charArray0 = new char[7];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'J';
      charArray0[4] = 'x';
      charArray0[5] = 'x';
      charArray0[6] = 'x';
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.scanDecimal('J');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8X");
      int int0 = jSONReaderScanner0.scanInt('8');
      assertEquals(8, int0);
      
      JSONScanner jSONScanner0 = new JSONScanner("&G@d[w&2R<bS162c", 115);
      jSONScanner0.scanDouble('g');
      assertEquals(115, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{1z;J&v");
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = ']';
      charArray0[2] = 'U';
      charArray0[3] = 'e';
      charArray0[4] = 'N';
      charArray0[5] = 'a';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 40);
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      jSONReaderScanner0.tokenName();
      assertEquals('1', jSONReaderScanner0.getCurrent());
  }
}
