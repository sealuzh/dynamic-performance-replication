/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:28:20 GMT 2018
 */

package com.google.gson.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.internal.LinkedHashTreeMap;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.ToDoubleFunction;
import java.util.function.ToIntFunction;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinkedHashTreeMap_ESTest extends LinkedHashTreeMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.putIfAbsent((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Object, Object>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 4);
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<Object, Object>[]) linkedHashTreeMap_NodeArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>(comparator0);
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.findByEntry(linkedHashTreeMap_NodeArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Integer>(comparator0);
      Integer integer0 = new Integer(2502);
      linkedHashTreeMap0.size = 2502;
      Integer integer1 = new Integer(2619);
      Integer.compare(2008, 2619);
      linkedHashTreeMap0.putIfAbsent(integer0, integer1);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      assertEquals(2503, linkedHashTreeMap_EntrySet0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      LinkedHashTreeMap.Node<String, Integer>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, Integer>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 8);
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Integer>();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node0;
      linkedHashTreeMap_Node0.last();
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>();
      LinkedHashTreeMap.Node<String, Integer>[] linkedHashTreeMap_NodeArray1 = LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, Integer>[]) linkedHashTreeMap_NodeArray0);
      assertNotNull(linkedHashTreeMap_NodeArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      linkedHashTreeMap0.find((Object) null, false);
      LinkedHashTreeMap.AvlIterator<Object, Integer> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, Integer>();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Integer>();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      assertNotNull(linkedHashTreeMap_Node1);
      
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Integer>(linkedHashTreeMap_Node1, linkedHashTreeMap0, 1638, linkedHashTreeMap_Node1, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.last();
      linkedHashTreeMap_AvlIterator0.reset(linkedHashTreeMap_Node3);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node4 = linkedHashTreeMap_AvlIterator0.next();
      assertFalse(linkedHashTreeMap_Node4.equals((Object)linkedHashTreeMap_Node1));
      assertNotSame(linkedHashTreeMap_Node4, linkedHashTreeMap_Node1);
      assertNotNull(linkedHashTreeMap_Node4);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>();
      Integer integer0 = new Integer(510);
      Integer integer1 = Integer.getInteger("", 510);
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>(comparator0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = linkedHashTreeMap1.header;
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>(linkedHashTreeMap_Node0, integer1, (-2079), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      assertNotNull(linkedHashTreeMap_Node2);
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node2);
      assertEquals(0, linkedHashTreeMap1.size());
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node3 = linkedHashTreeMap_AvlBuilder0.root();
      assertNotSame(linkedHashTreeMap_Node3, linkedHashTreeMap_Node0);
      assertFalse(linkedHashTreeMap_Node3.equals((Object)linkedHashTreeMap_Node0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>("yQr5m0Stk2cO;A~", "yQr5m0Stk2cO;A~");
      linkedHashTreeMap0.findByEntry(abstractMap_SimpleImmutableEntry0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      int int0 = linkedHashTreeMap_KeySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Integer>();
      boolean boolean0 = linkedHashTreeMap_Node0.equals(linkedHashTreeMap_Node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Integer>();
      linkedHashTreeMap_Node0.toString();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      assertNotNull(linkedHashTreeMap_Node1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      linkedHashTreeMap_AvlBuilder0.reset(3202);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      LinkedHashTreeMap.AvlIterator<Object, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, String>();
      linkedHashTreeMap_AvlIterator0.next();
      LinkedHashTreeMap.AvlBuilder<Object, String> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<Object, String>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder1.add((LinkedHashTreeMap.Node<Object, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>();
      LinkedHashTreeMap.AvlBuilder<String, Integer> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, Integer>();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Integer>();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node1 = linkedHashTreeMap0.header;
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node2);
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      int int0 = linkedHashTreeMap_EntrySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      linkedHashTreeMap0.isEmpty();
      linkedHashTreeMap0.clear();
      assertEquals(0, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      boolean boolean0 = linkedHashTreeMap_KeySet0.remove(linkedHashTreeMap0);
      assertFalse(boolean0);
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.find((Object) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Integer>();
      linkedHashTreeMap_Node0.equals("");
      Integer integer0 = linkedHashTreeMap_Node0.setValue((Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>(linkedHashTreeMap_Node0, linkedHashTreeMap_Node0, 0, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      linkedHashTreeMap_Node1.left = linkedHashTreeMap_Node0;
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node0.first();
      assertNotNull(linkedHashTreeMap_Node2);
      
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      linkedHashTreeMap0.find("", false);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.AvlBuilder<String, Integer> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, Integer>();
      linkedHashTreeMap_AvlBuilder0.reset(20);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>(comparator0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap_Node1.left);
      assertEquals(0, linkedHashTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>(comparator0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.clear();
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_Node0.first();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node0, (String) null, 892, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node1, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      assertNotNull(linkedHashTreeMap_Node1);
      
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>((Comparator<? super Object>) null);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      boolean boolean0 = linkedHashTreeMap_EntrySet0.contains(linkedHashTreeMap_Node0);
      assertFalse(boolean0);
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap0.header;
      linkedHashTreeMap_Node0.toString();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator0);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.last();
      linkedHashTreeMap_Node2.right = linkedHashTreeMap_Node3;
      linkedHashTreeMap1.put("null=null", "null=null");
      linkedHashTreeMap1.find("null=null", true);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      Integer.getInteger((String) null, 0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(923).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>(comparator0);
      int int0 = 14;
      Integer integer0 = new Integer(14);
      int int1 = 4215;
      linkedHashTreeMap0.putIfAbsent(integer0, "buY");
      linkedHashTreeMap0.remove((Object) integer0, (Object) integer0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      Integer.max(4215, 923);
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>(comparator0);
      linkedHashTreeMap0.entrySet();
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      linkedHashTreeMap_AvlBuilder0.reset((-1));
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Integer>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(comparator1).compare(any() , any());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator1);
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap2 = new LinkedHashTreeMap<String, Integer>();
      linkedHashTreeMap1.put(linkedHashTreeMap0, "E@w");
      linkedHashTreeMap1.find(linkedHashTreeMap0, false);
      LinkedHashTreeMap.AvlBuilder<String, Integer> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<String, Integer>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder1.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      int int0 = 3009;
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Integer>();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, Integer>(linkedHashTreeMap_Node0, "", 3009, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, Integer>();
      linkedHashTreeMap_Node2.equals(linkedHashTreeMap_Node1);
      LinkedHashTreeMap.Node<String, Integer>[] linkedHashTreeMap_NodeArray0 = null;
      // Undeclared exception!
      try { 
        LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      int int0 = 3009;
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Integer>();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, Integer>();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, Integer>(linkedHashTreeMap_Node1, "", 3009, linkedHashTreeMap_Node1, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.last();
      linkedHashTreeMap_Node3.equals(linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<String, Integer>[] linkedHashTreeMap_NodeArray0 = null;
      // Undeclared exception!
      try { 
        LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator0 = Comparator.comparingInt((ToIntFunction<? super String>) toIntFunction0);
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator1 = comparator0.thenComparingDouble(toDoubleFunction0);
      comparator1.thenComparing(comparator0);
      ToIntFunction<Object> toIntFunction1 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>(comparator0);
      LinkedHashTreeMap.AvlIterator<String, Integer> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, Integer>();
      linkedHashTreeMap_AvlIterator0.next();
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.removeInternal((LinkedHashTreeMap.Node<String, Integer>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<Object, Integer> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Integer>();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Integer>();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, String>();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, String>(linkedHashTreeMap_Node2, linkedHashTreeMap_Node0, (-2251), linkedHashTreeMap_Node1, linkedHashTreeMap_Node1);
      linkedHashTreeMap_Node3.equals(linkedHashTreeMap_Node1);
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap.AvlBuilder<String, Object> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<String, Object>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder1.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>();
      linkedHashTreeMap0.values();
      linkedHashTreeMap0.keySet();
      linkedHashTreeMap0.keySet();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      linkedHashTreeMap0.putAll(hashMap0);
      linkedHashTreeMap0.size = (-1666);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("", "com.google.gson.internal.LinkedHashTreeMap");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
      Map.Entry.comparingByKey();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_KeySet0.add(abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      linkedHashTreeMap0.put("", "");
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.clear();
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = linkedHashTreeMap1.header;
      Object object0 = linkedHashTreeMap_Node0.setValue((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap0.header;
      linkedHashTreeMap_Node0.toString();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_Node2.height = 9;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator0);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.last();
      linkedHashTreeMap_Node2.right = linkedHashTreeMap_Node3;
      linkedHashTreeMap1.put("null=null", "null=null");
      linkedHashTreeMap1.find("null=null", true);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      Integer.getInteger((String) null, 9);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator2 = Comparator.nullsFirst((Comparator<? super Object>) comparator1);
      assertFalse(comparator2.equals((Object)comparator1));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      Object object0 = new Object();
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node0, (String) null, 892, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      linkedHashTreeMap_Node0.right = linkedHashTreeMap_Node1;
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node1, false);
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.computeIfPresent("key == null", (BiFunction<? super String, ? super String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      Object object0 = new Object();
      Object object1 = new Object();
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_Node0.left = linkedHashTreeMap_Node0;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node0, "key ==ull", 848, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      Map.Entry.comparingByKey();
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      linkedHashTreeMap_Node0.right = linkedHashTreeMap_Node1;
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(linkedHashTreeMap_Node0);
      linkedHashTreeMap_Node1.next = linkedHashTreeMap_Node0.left;
      linkedHashTreeMap_AvlBuilder1.reset(848);
      linkedHashTreeMap_AvlBuilder1.reset(848);
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node0, false);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, Object>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.add((LinkedHashTreeMap.Node<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      linkedHashTreeMap_Node0.toString();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>();
      linkedHashTreeMap1.put("null=null", "null=null");
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node1 = linkedHashTreeMap1.header;
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, Integer>();
      linkedHashTreeMap_Node2.toString();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap1.new KeySet();
      linkedHashTreeMap_KeySet0.remove("null=null");
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap1.new EntrySet();
      linkedHashTreeMap_EntrySet1.iterator();
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, Integer>();
      linkedHashTreeMap2.entrySet();
      LinkedHashTreeMap.AvlBuilder<String, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, Object>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>((Comparator<? super String>) null);
      LinkedHashTreeMap.Node<String, Object>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, Object>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 1);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Object>();
      linkedHashTreeMap_Node0.toString();
      String string0 = null;
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, Object>(linkedHashTreeMap_Node0, (String) null, (-2541), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node1;
      linkedHashTreeMap0.table = linkedHashTreeMap_NodeArray0;
      linkedHashTreeMap_Node0.right = linkedHashTreeMap_Node1;
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.find("key == null", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      linkedHashTreeMap_Node0.parent = linkedHashTreeMap_Node1;
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      linkedHashTreeMap_Node1.right = linkedHashTreeMap_Node0;
      LinkedHashTreeMap.AvlIterator<Object, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, String>();
      linkedHashTreeMap_Node1.left = linkedHashTreeMap_Node0;
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, Integer>();
      linkedHashTreeMap_Node1.next = linkedHashTreeMap_Node1.right;
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.first();
      linkedHashTreeMap_Node4.last();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap_AvlBuilder1.reset((-27));
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      // Undeclared exception!
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node1.next, false);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      Object object0 = new Object();
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      linkedHashTreeMap_Node0.right = linkedHashTreeMap_Node1;
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node1, false);
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.computeIfPresent("key == null", (BiFunction<? super String, ? super String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>(linkedHashTreeMap_Node0, linkedHashTreeMap_Node0, (-1516), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      linkedHashTreeMap_Node0.parent = linkedHashTreeMap_Node2;
      linkedHashTreeMap_Node1.left = linkedHashTreeMap_Node0;
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.first();
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>((Comparator<? super String>) null);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.computeIfPresent((String) null, biFunction0);
      LinkedHashTreeMap.Node<Object, Object>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Object, Object>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 4);
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node2;
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node0.parent;
      linkedHashTreeMap_NodeArray0[2] = linkedHashTreeMap_Node0;
      linkedHashTreeMap_NodeArray0[3] = linkedHashTreeMap_Node3;
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<Object, Object>[]) linkedHashTreeMap_NodeArray0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.contains(linkedHashTreeMap_Node1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.AvlIterator<Object, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, String>();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, Integer>();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, Integer>();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.last();
      linkedHashTreeMap_Node1.left = linkedHashTreeMap_Node3;
      linkedHashTreeMap_Node1.last();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node1.last();
      LinkedHashTreeMap.Node<String, Integer>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, Integer>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 8);
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node4;
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, Integer>[]) linkedHashTreeMap_NodeArray0);
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.AvlIterator<Object, Integer> linkedHashTreeMap_AvlIterator1 = new LinkedHashTreeMap.AvlIterator<Object, Integer>();
      LinkedHashTreeMap.AvlBuilder<String, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<String, Object>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(linkedHashTreeMap_Node3);
      // Undeclared exception!
      try { 
        linkedHashTreeMap_EntrySet0.add(abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.put("gKKr1g8", "gKKr1g8");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Object>(comparator0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap1.getOrDefault(linkedHashTreeMap0, linkedHashTreeMap0);
      linkedHashTreeMap0.forEach(biConsumer0);
      BiFunction<Object, Object, Object> biFunction1 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.merge("gKKr1g8", linkedHashTreeMap1, biFunction1);
      linkedHashTreeMap0.computeIfPresent("gKKr1g8", biFunction0);
      linkedHashTreeMap0.keySet();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, String>();
      linkedHashTreeMap_Node0.height = 1158;
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.prev;
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      linkedHashTreeMap_Node2.first();
      linkedHashTreeMap_Node0.setValue("gKKr1g8");
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      linkedHashTreeMap0.entrySet();
      linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap_Node1);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet1.contains((Object) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, Integer>(comparator0);
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      Integer integer0 = new Integer((-2151));
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, Integer>(linkedHashTreeMap_Node0, integer0, (-2151), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      linkedHashTreeMap_Node0.left = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node0.first();
      linkedHashTreeMap1.removeInternal(linkedHashTreeMap_Node2, false);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap0.header;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-599), (-19), 0).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator0);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap1.put(linkedHashTreeMap_Node0, " is not Comparable");
      Map.Entry.comparingByKey();
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node4 = linkedHashTreeMap1.find(linkedHashTreeMap_Node0, true);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, String>();
      Integer integer0 = new Integer((-2437));
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap1.new EntrySet();
      Map.Entry.comparingByKey();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet2 = linkedHashTreeMap1.new EntrySet();
      linkedHashTreeMap_EntrySet2.containsAll(linkedHashTreeMap_EntrySet0);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_EntrySet2.contains(linkedHashTreeMap_Node5);
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node6 = new LinkedHashTreeMap.Node<String, Integer>();
      Integer integer1 = new Integer((-2437));
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node7 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_Node0.first();
      linkedHashTreeMap_Node4.getValue();
      LinkedHashTreeMap<String, String> linkedHashTreeMap3 = new LinkedHashTreeMap<String, String>();
      linkedHashTreeMap3.clear();
      LinkedHashTreeMap.AvlIterator<String, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, String>();
      linkedHashTreeMap_Node5.setValue(" is not Comparable");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>(comparator0);
      Integer integer0 = new Integer(14);
      linkedHashTreeMap0.putIfAbsent(integer0, "buY");
      linkedHashTreeMap0.remove((Object) integer0, (Object) integer0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      linkedHashTreeMap_AvlBuilder0.reset(14);
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Integer>();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Integer>(linkedHashTreeMap_Node1, linkedHashTreeMap0, 4215, linkedHashTreeMap_Node1, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.first();
      linkedHashTreeMap_Node3.getValue();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_Node0.first();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_Node1.left = linkedHashTreeMap_Node1;
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node1, true);
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_AvlBuilder0.reset((-2487));
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      linkedHashTreeMap_Node1.height = (-2487);
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      LinkedHashTreeMap.AvlIterator<Object, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, String>();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, Integer>();
      linkedHashTreeMap_Node1.next = linkedHashTreeMap_Node0;
      Integer integer0 = new Integer((-2487));
      Integer integer1 = new Integer((-2487));
      linkedHashTreeMap_Node2.value = integer1;
      linkedHashTreeMap_Node2.equals(linkedHashTreeMap_Node0);
      Integer integer2 = new Integer(2);
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, Integer>(linkedHashTreeMap_Node2, "y3UY&@c_", 2, linkedHashTreeMap_Node2, linkedHashTreeMap_Node2);
      linkedHashTreeMap_Node2.left = linkedHashTreeMap_Node3;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer.compare(2073, 2);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator1);
      linkedHashTreeMap0.entrySet();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 2485;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, Integer>();
      linkedHashTreeMap_Node1.next = linkedHashTreeMap_Node0;
      Integer integer0 = new Integer(2485);
      Integer integer1 = new Integer((int) integer0);
      linkedHashTreeMap_Node2.value = integer1;
      linkedHashTreeMap_Node2.right = linkedHashTreeMap_Node2;
      linkedHashTreeMap_Node2.equals(linkedHashTreeMap_Node0);
      Integer integer2 = new Integer(843);
      linkedHashTreeMap_Node2.value = integer2;
      linkedHashTreeMap_Node0.toString();
      Object object0 = new Object();
      try { 
        Integer.parseUnsignedInt("null=null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"null=null\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      linkedHashTreeMap_Node1.right = linkedHashTreeMap_Node0;
      LinkedHashTreeMap.AvlIterator<Object, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, String>();
      linkedHashTreeMap_Node1.left = linkedHashTreeMap_Node0;
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, Integer>();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>(comparator0);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, String>();
      Integer integer0 = new Integer((-1743));
      Integer integer1 = new Integer(1871);
      linkedHashTreeMap0.put(integer1, "");
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Integer>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      Map.Entry.comparingByKey();
      Set<Object> set0 = linkedHashTreeMap0.keySet();
      linkedHashTreeMap_EntrySet0.containsAll(set0);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(linkedHashTreeMap_Node1, "com.google.gson.internal.LinkedHashTreeMap");
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Integer>();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, Integer>();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, Integer>();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node1.last();
      Integer integer0 = new Integer((-2743));
      linkedHashTreeMap_Node2.setValue(integer0);
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<String, Integer>();
      linkedHashTreeMap_Node3.equals(linkedHashTreeMap_Node2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, String>();
      Map.Entry.comparingByValue();
      linkedHashTreeMap_Node2.right = linkedHashTreeMap_Node1;
      linkedHashTreeMap_Node2.left = linkedHashTreeMap_Node2;
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node2, true);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.iterator();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      Comparator<Object> comparator0 = null;
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      linkedHashTreeMap0.keySet();
      Object object0 = new Object();
      Object object1 = new Object();
      LinkedHashTreeMap<String, String> linkedHashTreeMap1 = new LinkedHashTreeMap<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      linkedHashTreeMap0.computeIfAbsent("key == null", unaryOperator0);
      linkedHashTreeMap_Node0.height = 20;
      linkedHashTreeMap1.size = 20;
      linkedHashTreeMap_Node0.left = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node0, (String) null, 892, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      linkedHashTreeMap_Node0.right = linkedHashTreeMap_Node2;
      linkedHashTreeMap_AvlBuilder1.reset(892);
      // Undeclared exception!
      try { 
        linkedHashTreeMap1.removeInternal(linkedHashTreeMap_Node2, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      linkedHashTreeMap_AvlBuilder0.reset(20);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      linkedHashTreeMap_Node1.right = linkedHashTreeMap_Node0;
      LinkedHashTreeMap.AvlIterator<Object, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, String>();
      linkedHashTreeMap_Node1.next = linkedHashTreeMap_Node1.right;
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      Map.Entry.comparingByValue();
      Object object0 = new Object();
      linkedHashTreeMap0.get(object0);
      linkedHashTreeMap_Node3.right = linkedHashTreeMap_Node2;
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<String, Integer>();
      Integer integer0 = new Integer(20);
      Integer integer1 = Integer.getInteger((String) null, integer0);
      linkedHashTreeMap_Node0.equals(integer1);
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1.next);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      Integer integer2 = new Integer(20);
      linkedHashTreeMap_EntrySet0.remove(integer1);
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node1.next, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      linkedHashTreeMap_Node1.right = linkedHashTreeMap_Node0;
      LinkedHashTreeMap.AvlIterator<Object, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, String>();
      linkedHashTreeMap_Node1.next = linkedHashTreeMap_Node1.right;
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      Map.Entry.comparingByValue();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>();
      linkedHashTreeMap1.removeInternalByKey("I!CiE`_I");
      linkedHashTreeMap_Node2.right = null;
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, Integer>();
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      linkedHashTreeMap_AvlBuilder1.reset((-55));
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1.right);
      LinkedHashTreeMap.AvlIterator<Object, String> linkedHashTreeMap_AvlIterator1 = new LinkedHashTreeMap.AvlIterator<Object, String>();
      Map.Entry.comparingByValue();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap_Node2);
      Integer integer0 = new Integer((-55));
      linkedHashTreeMap_Node2.value = (Object) integer0;
      linkedHashTreeMap_Node0.next = linkedHashTreeMap_Node1;
      linkedHashTreeMap_Node2.toString();
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node1, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      linkedHashTreeMap_AvlBuilder0.reset(791);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      LinkedHashTreeMap.AvlIterator<Object, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, String>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      Map.Entry.comparingByValue();
      Object object0 = new Object();
      linkedHashTreeMap0.get((Object) null);
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<String, Integer>();
      Integer integer0 = new Integer(52);
      Integer integer1 = new Integer((-2892));
      Integer.getInteger((String) null, integer1);
      linkedHashTreeMap_Node0.equals("");
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      Integer integer2 = new Integer(361);
      linkedHashTreeMap_EntrySet0.remove((Object) null);
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node1, true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap0.header;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-599), 0, 0).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator0);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap1.put(linkedHashTreeMap_Node0, " is not ZComparable");
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node5 = linkedHashTreeMap1.find(linkedHashTreeMap_Node0, true);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap1.new EntrySet();
      Map.Entry.comparingByKey();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet2 = linkedHashTreeMap1.new EntrySet();
      linkedHashTreeMap_EntrySet2.containsAll(linkedHashTreeMap_EntrySet0);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node6 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_EntrySet2.contains(linkedHashTreeMap_Node6);
      linkedHashTreeMap1.get((Object) null);
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node7 = new LinkedHashTreeMap.Node<String, Integer>();
      Integer integer0 = new Integer((-2437));
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node8 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_Node5.getValue();
      LinkedHashTreeMap<String, String> linkedHashTreeMap2 = new LinkedHashTreeMap<String, String>();
      linkedHashTreeMap2.clear();
      LinkedHashTreeMap.AvlIterator<String, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, String>();
      linkedHashTreeMap_Node0.toString();
      LinkedHashTreeMap.Node<Object, Object>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Object, Object>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 8);
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node0;
      linkedHashTreeMap_NodeArray0[3] = linkedHashTreeMap_Node2;
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node9 = linkedHashTreeMap_Node0.left;
      linkedHashTreeMap_NodeArray0[4] = null;
      // Undeclared exception!
      try { 
        LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<Object, Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      linkedHashTreeMap_Node1.right = linkedHashTreeMap_Node0;
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>(comparator0);
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node2 = linkedHashTreeMap0.find("CVQh'o9}*/d5", true);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      Object object0 = new Object();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>();
      linkedHashTreeMap1.removeInternal(linkedHashTreeMap_Node2, false);
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.retainAll(linkedHashTreeMap_EntrySet0);
      Object object1 = new Object();
      linkedHashTreeMap_KeySet0.contains(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.AvlBuilder<Integer, String> linkedHashTreeMap_AvlBuilder2 = new LinkedHashTreeMap.AvlBuilder<Integer, String>();
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Integer, String>();
      Integer integer0 = new Integer(2);
      LinkedHashTreeMap.AvlBuilder<Object, String> linkedHashTreeMap_AvlBuilder3 = new LinkedHashTreeMap.AvlBuilder<Object, String>();
      linkedHashTreeMap_AvlBuilder3.add(linkedHashTreeMap_Node2);
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap2 = new LinkedHashTreeMap<String, Integer>();
      linkedHashTreeMap2.remove((Object) linkedHashTreeMap_AvlBuilder2);
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder4 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node5 = linkedHashTreeMap_Node4.first();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node6 = linkedHashTreeMap_Node5.last();
      linkedHashTreeMap_AvlBuilder4.add(linkedHashTreeMap_Node6);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_AvlBuilder0.reset((-2472));
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_Node1.height = (-2472);
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>(comparator0);
      Object object0 = new Object();
      linkedHashTreeMap0.put(object0, (String) null);
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node2 = linkedHashTreeMap0.find((Object) null, true);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, String>();
      Object object1 = new Object();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>();
      linkedHashTreeMap1.removeInternal(linkedHashTreeMap_Node2, false);
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedHashTreeMap_KeySet0.retainAll(linkedList0);
      Object object2 = new Object();
      linkedHashTreeMap_KeySet0.contains(linkedList0);
      LinkedHashTreeMap.AvlBuilder<Integer, String> linkedHashTreeMap_AvlBuilder2 = new LinkedHashTreeMap.AvlBuilder<Integer, String>();
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<Integer, String>();
      LinkedHashTreeMap.AvlBuilder<String, Integer> linkedHashTreeMap_AvlBuilder3 = new LinkedHashTreeMap.AvlBuilder<String, Integer>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet2 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap<String, String> linkedHashTreeMap2 = new LinkedHashTreeMap<String, String>();
      Object object3 = new Object();
      linkedHashTreeMap2.removeInternalByKey((Object) null);
      linkedHashTreeMap2.removeInternal(linkedHashTreeMap_Node0, true);
  }
}
