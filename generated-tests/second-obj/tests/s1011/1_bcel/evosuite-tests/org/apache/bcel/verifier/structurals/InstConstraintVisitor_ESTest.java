/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:42:30 GMT 2018
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedOutputStream;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.ACONST_NULL;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ARRAYLENGTH;
import org.apache.bcel.generic.ASTORE;
import org.apache.bcel.generic.ATHROW;
import org.apache.bcel.generic.BASTORE;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.BREAKPOINT;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CALOAD;
import org.apache.bcel.generic.CASTORE;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.D2I;
import org.apache.bcel.generic.D2L;
import org.apache.bcel.generic.DADD;
import org.apache.bcel.generic.DALOAD;
import org.apache.bcel.generic.DASTORE;
import org.apache.bcel.generic.DCMPG;
import org.apache.bcel.generic.DCMPL;
import org.apache.bcel.generic.DCONST;
import org.apache.bcel.generic.DDIV;
import org.apache.bcel.generic.DLOAD;
import org.apache.bcel.generic.DMUL;
import org.apache.bcel.generic.DNEG;
import org.apache.bcel.generic.DREM;
import org.apache.bcel.generic.DRETURN;
import org.apache.bcel.generic.DSTORE;
import org.apache.bcel.generic.DSUB;
import org.apache.bcel.generic.DUP;
import org.apache.bcel.generic.DUP2;
import org.apache.bcel.generic.DUP2_X1;
import org.apache.bcel.generic.DUP2_X2;
import org.apache.bcel.generic.DUP_X1;
import org.apache.bcel.generic.DUP_X2;
import org.apache.bcel.generic.F2D;
import org.apache.bcel.generic.F2I;
import org.apache.bcel.generic.F2L;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FALOAD;
import org.apache.bcel.generic.FASTORE;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FCMPL;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.FDIV;
import org.apache.bcel.generic.FLOAD;
import org.apache.bcel.generic.FMUL;
import org.apache.bcel.generic.FNEG;
import org.apache.bcel.generic.FRETURN;
import org.apache.bcel.generic.FSTORE;
import org.apache.bcel.generic.FSUB;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.GETSTATIC;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.I2B;
import org.apache.bcel.generic.I2C;
import org.apache.bcel.generic.I2D;
import org.apache.bcel.generic.I2F;
import org.apache.bcel.generic.I2L;
import org.apache.bcel.generic.I2S;
import org.apache.bcel.generic.IADD;
import org.apache.bcel.generic.IALOAD;
import org.apache.bcel.generic.IAND;
import org.apache.bcel.generic.IASTORE;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IDIV;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.IFLE;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IFNONNULL;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.IF_ICMPLE;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.IMPDEP1;
import org.apache.bcel.generic.IMPDEP2;
import org.apache.bcel.generic.IMUL;
import org.apache.bcel.generic.INEG;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.INVOKEINTERFACE;
import org.apache.bcel.generic.INVOKESPECIAL;
import org.apache.bcel.generic.INVOKESTATIC;
import org.apache.bcel.generic.INVOKEVIRTUAL;
import org.apache.bcel.generic.IOR;
import org.apache.bcel.generic.IREM;
import org.apache.bcel.generic.IRETURN;
import org.apache.bcel.generic.ISHL;
import org.apache.bcel.generic.ISHR;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.ISUB;
import org.apache.bcel.generic.IUSHR;
import org.apache.bcel.generic.IXOR;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.InvokeInstruction;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.L2D;
import org.apache.bcel.generic.L2I;
import org.apache.bcel.generic.LADD;
import org.apache.bcel.generic.LALOAD;
import org.apache.bcel.generic.LAND;
import org.apache.bcel.generic.LASTORE;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.LDC2_W;
import org.apache.bcel.generic.LDC_W;
import org.apache.bcel.generic.LLOAD;
import org.apache.bcel.generic.LMUL;
import org.apache.bcel.generic.LNEG;
import org.apache.bcel.generic.LOR;
import org.apache.bcel.generic.LREM;
import org.apache.bcel.generic.LRETURN;
import org.apache.bcel.generic.LSHL;
import org.apache.bcel.generic.LSHR;
import org.apache.bcel.generic.LSTORE;
import org.apache.bcel.generic.LSUB;
import org.apache.bcel.generic.LUSHR;
import org.apache.bcel.generic.LXOR;
import org.apache.bcel.generic.MONITORENTER;
import org.apache.bcel.generic.MONITOREXIT;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.NEW;
import org.apache.bcel.generic.NEWARRAY;
import org.apache.bcel.generic.NOP;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.POP;
import org.apache.bcel.generic.POP2;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.PUTFIELD;
import org.apache.bcel.generic.RETURN;
import org.apache.bcel.generic.SALOAD;
import org.apache.bcel.generic.SASTORE;
import org.apache.bcel.generic.SIPUSH;
import org.apache.bcel.generic.SWAP;
import org.apache.bcel.generic.TABLESWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.apache.bcel.verifier.structurals.OperandStack;
import org.apache.bcel.verifier.structurals.UninitializedObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstConstraintVisitor_ESTest extends InstConstraintVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(1, 1);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEINTERFACE(iNVOKEINTERFACE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DUP_X1 dUP_X1_0 = new DUP_X1();
      // Undeclared exception!
      try { 
        dUP_X1_0.accept(instConstraintVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DSTORE dSTORE0 = new DSTORE(179);
      instConstraintVisitor0.visitDSTORE(dSTORE0);
      assertEquals(179, dSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP1((IMPDEP1) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP1.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ARETURN aRETURN0 = new ARETURN();
      // Undeclared exception!
      try { 
        aRETURN0.accept(instConstraintVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      I2C i2C0 = new I2C();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitBREAKPOINT(bREAKPOINT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as BREAKPOINT.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      instConstraintVisitor0.visitACONST_NULL(aCONST_NULL0);
      assertEquals("aconst_null", aCONST_NULL0.getName());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      NOP nOP0 = new NOP();
      instConstraintVisitor0.visitNOP(nOP0);
      assertEquals("nop", nOP0.getName());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FCONST fCONST0 = new FCONST(0.0F);
      instConstraintVisitor0.visitFCONST(fCONST0);
      assertEquals(1, fCONST0.getLength());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BIPUSH bIPUSH0 = new BIPUSH((byte)1);
      instConstraintVisitor0.visitBIPUSH(bIPUSH0);
      assertEquals(2, bIPUSH0.getLength());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP2(iMPDEP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP2.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(1, 101);
      ICONST iCONST0 = new ICONST(1);
      instConstraintVisitor0.visitICONST(iCONST0);
      assertEquals(1, iCONST0.getLength());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitLSTORE((LSTORE) null);
      FDIV fDIV0 = new FDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFDIV(fDIV0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(4463);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEDYNAMIC(iNVOKEDYNAMIC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INVOKEDYNAMIC instruction is not supported at this time
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      InstructionList instructionList0 = new InstructionList();
      DREM dREM0 = new DREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitTABLESWITCH((TABLESWITCH) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSHL lSHL0 = new LSHL();
      DLOAD dLOAD0 = new DLOAD(1847);
      instConstraintVisitor0.visitDLOAD(dLOAD0);
      assertEquals("dload", dLOAD0.getName());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ALOAD aLOAD0 = new ALOAD(2757);
      aLOAD0.toString(false);
      instConstraintVisitor0.visitALOAD(aLOAD0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      instConstraintVisitor0.visitLCONST((LCONST) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      DREM dREM0 = new DREM();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LASTORE lASTORE0 = new LASTORE();
      JSR_W jSR_W0 = new JSR_W((InstructionHandle) null);
      instConstraintVisitor0.visitJSR_W(jSR_W0);
      assertEquals(5, jSR_W0.getLength());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ISTORE iSTORE0 = new ISTORE(2733);
      instConstraintVisitor0.visitISTORE(iSTORE0);
      assertEquals(4, iSTORE0.getLength());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCALOAD((CALOAD) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GETSTATIC gETSTATIC0 = new GETSTATIC(798);
      instConstraintVisitor0.visitGETSTATIC(gETSTATIC0);
      assertEquals(798, gETSTATIC0.getIndex());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ILOAD iLOAD0 = new ILOAD(5);
      instConstraintVisitor0.visitILOAD(iLOAD0);
      assertEquals((short)21, iLOAD0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitGOTO((GOTO) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCONST dCONST0 = new DCONST(0.0);
      instConstraintVisitor0.visitDCONST(dCONST0);
      assertEquals(1, dCONST0.getLength());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LNEG lNEG0 = new LNEG();
      IDIV iDIV0 = new IDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      JSR jSR0 = new JSR((InstructionHandle) null);
      instConstraintVisitor0.visitJSR(jSR0);
      String string0 = Constants.ILLEGAL_TYPE;
      IMUL iMUL0 = new IMUL();
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList((CompoundInstruction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FLOAD fLOAD0 = new FLOAD(1163);
      instConstraintVisitor0.visitFLOAD(fLOAD0);
      assertEquals(4, fLOAD0.getLength());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setMethodGen((MethodGen) null);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame0 = new Frame(230, 3599);
      instConstraintVisitor0.setFrame(frame0);
      IINC iINC0 = new IINC(3599, 3599);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ASTORE aSTORE0 = new ASTORE(0);
      LocalVariables localVariables0 = new LocalVariables(1129);
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = localVariables1.getClone();
      localVariables1.merge(localVariables2);
      OperandStack operandStack0 = new OperandStack(98);
      operandStack0.pop((-162));
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IINC iINC0 = new IINC(1961, (-299));
      // Undeclared exception!
      try { 
        iINC0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InstructionList instructionList0 = new InstructionList();
      LocalVariables localVariables0 = new LocalVariables(61);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.merge(localVariables1);
      OperandStack operandStack0 = new OperandStack(98);
      Frame frame0 = new Frame(localVariables0, (OperandStack) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IINC iINC0 = new IINC(1, 324);
      // Undeclared exception!
      try { 
        iINC0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not of type int but of type <unknown object>.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GOTO_W gOTO_W0 = new GOTO_W((InstructionHandle) null);
      instConstraintVisitor0.visitGOTO_W(gOTO_W0);
      assertEquals((short)200, gOTO_W0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame0 = new Frame(230, 230);
      instConstraintVisitor0.setFrame(frame0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      pipedOutputStream0.flush();
      F2D f2D0 = new F2D();
      IXOR iXOR0 = new IXOR();
      iXOR0.toString(false);
      iXOR0.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IXOR iXOR1 = new IXOR();
      // Undeclared exception!
      try { 
        iXOR1.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IXOR constraint violated: Cannot consume 2 stack slots: only 0 slot(s) left on stack!
         // Stack:
         // Slots used: 0 MaxStack: 230.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(60);
      ObjectType objectType0 = new ObjectType("(name_index = ");
      OperandStack operandStack0 = new OperandStack(60, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(2326);
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      LMUL lMUL0 = new LMUL();
      lMUL0.consumeStack((ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLMUL(lMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LMUL constraint violated: The value at the stack top is not of type 'long', but of type '(name_index = '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack((byte)53, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2);
      operandStack0.pop();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.getClone();
      Frame frame1 = frame0.getClone();
      frame1.clone();
      instConstraintVisitor0.setFrame(frame1);
      IAND iAND0 = new IAND();
      byte byte0 = (byte) (-41);
      ASTORE aSTORE0 = new ASTORE(145);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(aSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ASTORE constraint violated: Cannot STORE: Stack to read from is empty.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = new ObjectType("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      LocalVariables localVariables0 = new LocalVariables(32);
      operandStack0.clear();
      operandStack0.push(objectType0);
      localVariables0.toString();
      localVariables0.clone();
      Frame frame0 = new Frame(32, 32);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      frame0.clone();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      UninitializedObjectType uninitializedObjectType1 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType1);
      instConstraintVisitor0.setFrame(frame1);
      FRETURN fRETURN0 = new FRETURN();
      DADD dADD0 = new DADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDADD(dADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DADD constraint violated: The value at the stack top is not of type 'double', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      DREM dREM0 = new DREM();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ISHL iSHL0 = new ISHL();
      iSHL0.consumeStack(constantPoolGen0);
      iSHL0.toString();
      ObjectType objectType0 = new ObjectType("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(44, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      IFGT iFGT0 = new IFGT((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGT(iFGT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFGT constraint violated: The value at the stack top is not of type 'int', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ISHL iSHL0 = new ISHL();
      int int0 = Pattern.LITERAL;
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(16, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      IAND iAND0 = new IAND();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIAND(iAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IAND constraint violated: The value at the stack top is not of type 'int', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      DREM dREM0 = new DREM();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ISHL iSHL0 = new ISHL();
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(51, objectType0);
      LocalVariables localVariables0 = new LocalVariables(51);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LLOAD lLOAD0 = new LLOAD(51);
      lLOAD0.copy();
      instConstraintVisitor0.visitLLOAD(lLOAD0);
      DADD dADD0 = new DADD();
      FDIV fDIV0 = new FDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFDIV(fDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FDIV constraint violated: The value at the stack top is not of type 'float', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = new ObjectType("aueR^75p(wv0GGj`[vB");
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      LocalVariables localVariables0 = new LocalVariables(32);
      OperandStack operandStack1 = new OperandStack(32, objectType0);
      localVariables0.clone();
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.clone();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      IOR iOR0 = new IOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIOR(iOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IOR constraint violated: The value at the stack top is not of type 'int', but of type 'aueR^75p(wv0GGj`[vB'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      DREM dREM0 = new DREM();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ISHL iSHL0 = new ISHL();
      iSHL0.consumeStack(constantPoolGen0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(44, objectType0);
      LocalVariables localVariables0 = new LocalVariables(44);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FSTORE fSTORE0 = new FSTORE(228);
      instConstraintVisitor0.visitFSTORE(fSTORE0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPG(dCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPG constraint violated: The value at the stack top is not of type 'double', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      DREM dREM0 = new DREM();
      Boolean boolean0 = new Boolean(true);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ISHL iSHL0 = new ISHL();
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(168, objectType0);
      LocalVariables localVariables0 = new LocalVariables(168);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame1 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      IAND iAND0 = new IAND();
      IREM iREM0 = new IREM();
      IMUL iMUL0 = new IMUL();
      IMUL iMUL1 = new IMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMUL(iMUL1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IMUL constraint violated: The value at the stack top is not of type 'int', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ISHL iSHL0 = new ISHL();
      ObjectType objectType0 = new ObjectType("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(44, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      LLOAD lLOAD0 = new LLOAD((byte)49);
      LSHL lSHL0 = new LSHL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHL(lSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHL constraint violated: The value at the stack top is not of type 'int', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ISHL iSHL0 = new ISHL();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(44, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      LDC2_W lDC2_W0 = new LDC2_W(2);
      // Undeclared exception!
      try { 
        lDC2_W0.accept(instConstraintVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = new ObjectType("aueR^75p(wv0GGj`[vB");
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      LocalVariables localVariables0 = new LocalVariables(32);
      OperandStack operandStack1 = new OperandStack(32, objectType0);
      localVariables0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.clone();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      FCMPG fCMPG0 = new FCMPG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPG(fCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPG constraint violated: The value at the stack top is not of type 'float', but of type 'aueR^75p(wv0GGj`[vB'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      ObjectType.getInstance("gi+fN! A");
      OperandStack operandStack1 = new OperandStack(32, objectType0);
      LocalVariables localVariables0 = new LocalVariables(32);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LLOAD lLOAD0 = new LLOAD(214);
      instConstraintVisitor0.visitLLOAD(lLOAD0);
      DADD dADD0 = new DADD();
      DNEG dNEG0 = new DNEG();
      LAND lAND0 = new LAND();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLAND(lAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LAND constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(32);
      LocalVariables localVariables0 = new LocalVariables(32);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = new OperandStack(32, objectType0);
      localVariables0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      frame1.clone();
      instConstraintVisitor0.setFrame(frame1);
      localVariables0.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LLOAD lLOAD0 = new LLOAD(3119);
      L2I l2I0 = new L2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2I(l2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2I constraint violated: The value at the stack top is not of type 'long', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Float.MAX_EXPONENT;
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(127, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LDC2_W lDC2_W0 = new LDC2_W(2);
      ISUB iSUB0 = new ISUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISUB(iSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISUB constraint violated: The value at the stack top is not of type 'int', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      DREM dREM0 = new DREM();
      Boolean boolean0 = new Boolean(true);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ISHL iSHL0 = new ISHL();
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ObjectType.getInstance("If stack top's size is 2 and stack-next-to-top's size is 1, then stack next-to-next-to-top's size must also be 1. But it is '");
      OperandStack operandStack0 = new OperandStack(53, objectType0);
      LocalVariables localVariables0 = new LocalVariables(53);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIASTORE((IASTORE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ISHL iSHL0 = new ISHL();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("Stack next-to-top must be of type double[] but is '");
      OperandStack operandStack0 = new OperandStack(44, objectType0);
      LocalVariables localVariables0 = new LocalVariables(216);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      IAND iAND0 = new IAND();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLNEG((LNEG) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack((byte)53, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      LSUB lSUB0 = new LSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSUB(lSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSUB constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      DREM dREM0 = new DREM();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ISHL iSHL0 = new ISHL();
      iSHL0.consumeStack((ConstantPoolGen) null);
      ObjectType objectType0 = new ObjectType("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      GETFIELD gETFIELD0 = new GETFIELD(813);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitGETFIELD(gETFIELD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ISHL iSHL0 = new ISHL();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      int int1 = Pattern.DOTALL;
      ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(44, objectType0);
      LocalVariables localVariables0 = new LocalVariables(32);
      Frame.getThis();
      operandStack0.initializeObject((UninitializedObjectType) null);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      DDIV dDIV0 = new DDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDDIV(dDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DDIV constraint violated: The value at the stack top is not of type 'double', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      DREM dREM0 = new DREM();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      ObjectType.getInstance("If stack top's size is 2 and stack-next-to-top's size is 1, then stack next-to-next-to-top's size must also be 1. But it is '");
      OperandStack operandStack0 = new OperandStack(53, objectType0);
      LocalVariables localVariables0 = new LocalVariables(53);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      FASTORE fASTORE0 = new FASTORE();
      FASTORE fASTORE1 = new FASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFASTORE(fASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FASTORE constraint violated: The value at the stack top is not of type 'float', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      DREM dREM0 = new DREM();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      ObjectType.getInstance("If stack top's size is 2 and stack-next-to-top's size is 1, then stack next-to-next-to-top's size must also be 1. But it is '");
      OperandStack operandStack0 = new OperandStack(53, objectType0);
      LocalVariables localVariables0 = new LocalVariables(53);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      I2F i2F0 = new I2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2F(i2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2F constraint violated: The value at the stack top is not of type 'int', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack((byte)53, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)53);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.getClone();
      Frame frame1 = frame0.getClone();
      frame1.clone();
      instConstraintVisitor0.setFrame(frame1);
      IAND iAND0 = new IAND();
      ASTORE aSTORE0 = new ASTORE(145);
      instConstraintVisitor0.visitStoreInstruction(aSTORE0);
      DCONST dCONST0 = null;
      try {
        dCONST0 = new DCONST((byte) (-41));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DCONST can be used only for 0.0 and 1.0: -41.0
         //
         verifyException("org.apache.bcel.generic.DCONST", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack((byte)36, objectType0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      LocalVariables localVariables0 = new LocalVariables((byte)36);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Frame frame1 = new Frame(8, (byte)0);
      frame1.getClone();
      frame1.clone();
      instConstraintVisitor0.setFrame(frame0);
      LLOAD lLOAD0 = new LLOAD(200);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FNEG fNEG0 = new FNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFNEG(fNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FNEG constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("The opera8d sizes on the stack do not match Nny of the four forms of use of this instruction.");
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      LDC2_W lDC2_W0 = new LDC2_W(2);
      ISUB iSUB0 = new ISUB();
      DASTORE dASTORE0 = new DASTORE();
      SIPUSH sIPUSH0 = new SIPUSH((short)863);
      instConstraintVisitor0.visitSIPUSH(sIPUSH0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDASTORE(dASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DASTORE constraint violated: The value at the stack top is not of type 'double', but of type 'The opera8d sizes on the stack do not match Nny of the four forms of use of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = new ObjectType("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(32);
      LocalVariables localVariables0 = new LocalVariables(32);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = new OperandStack(32, objectType0);
      int int1 = Constants.MAX_SHORT;
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = (Frame)frame0.clone();
      Frame frame2 = new Frame(localVariables1, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      INEG iNEG0 = new INEG();
      CHECKCAST cHECKCAST0 = new CHECKCAST(1391);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCHECKCAST(cHECKCAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      ObjectType.getInstance("gi+fN! A");
      OperandStack operandStack1 = new OperandStack(32, objectType0);
      LocalVariables localVariables0 = new LocalVariables(32);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LLOAD lLOAD0 = new LLOAD(214);
      instConstraintVisitor0.visitLLOAD(lLOAD0);
      DADD dADD0 = new DADD();
      DNEG dNEG0 = new DNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDNEG(dNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DNEG constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstructionList instructionList0 = new InstructionList();
      DREM dREM0 = new DREM();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ISHL iSHL0 = new ISHL();
      int int0 = Double.BYTES;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P-Q8K");
      ObjectType objectType0 = ObjectType.getInstance("P-Q8K");
      OperandStack operandStack0 = new OperandStack(44, objectType0);
      LocalVariables localVariables0 = new LocalVariables(8);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ALOAD aLOAD0 = new ALOAD(44);
      instConstraintVisitor0.visitALOAD(aLOAD0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLE((IFLE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.getClone();
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      ISHR iSHR0 = new ISHR();
      iSHR0.copy();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHR(iSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHR constraint violated: The value at the stack top is not of type 'int', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ISHR iSHR0 = new ISHR();
      DALOAD dALOAD0 = new DALOAD();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      INVOKESTATIC iNVOKESTATIC0 = new INVOKESTATIC(256);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCPInstruction(iNVOKESTATIC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Huh?! Constant pool index of instruction 'invokestatic[184](3) 256' illegal? Pass 3a should have checked this!
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      DREM dREM0 = new DREM();
      Boolean boolean0 = new Boolean(true);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ISHL iSHL0 = new ISHL();
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ObjectType.getInstance("If stack top's size is 2 and stack-next-to-top's size is 1, then stack next-to-next-to-top's size must also be 1. But it is '");
      OperandStack operandStack0 = new OperandStack(53, objectType0);
      LocalVariables localVariables0 = new LocalVariables(53);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      D2F d2F0 = new D2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2F(d2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2F constraint violated: The value at the stack top is not of type 'double', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      DREM dREM0 = new DREM();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ISHL iSHL0 = new ISHL();
      iSHL0.consumeStack(constantPoolGen0);
      ObjectType objectType0 = new ObjectType("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(44, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(2, 44);
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.initializeObject((UninitializedObjectType) null);
      LLOAD lLOAD0 = new LLOAD(2);
      ObjectType objectType1 = ObjectType.getInstance("");
      OperandStack operandStack1 = new OperandStack(3, objectType1);
      LocalVariables localVariables1 = new LocalVariables(2);
      Frame.getThis();
      operandStack0.initializeObject((UninitializedObjectType) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Stack top size should be 2 but stack top is '");
      instructionList0.getStart();
      IFEQ iFEQ0 = new IFEQ((InstructionHandle) null);
      IFNE iFNE0 = new IFNE((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFEQ(iFEQ0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFEQ constraint violated: The value at the stack top is not of type 'int', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      DREM dREM0 = new DREM();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ISHL iSHL0 = new ISHL();
      iSHL0.consumeStack(constantPoolGen0);
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      ObjectType objectType1 = new ObjectType("If stack top's size is 2 and stack-next-to-top's size is 1, then stack next-to-next-to-top's size must also be 1. But it is '");
      OperandStack operandStack0 = new OperandStack(53, objectType0);
      LocalVariables localVariables0 = new LocalVariables(53);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      LLOAD lLOAD0 = new LLOAD(668);
      LLOAD lLOAD1 = new LLOAD(2);
      LSHL lSHL0 = new LSHL();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      ATHROW aTHROW0 = new ATHROW();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitATHROW(aTHROW0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Missing class: java.lang.ClassNotFoundException: Exception while looking for class The operand sizes on the stack do not match any of the four forms of usage of this instruction.: org.evosuite.runtime.mock.java.lang.MockThrowable: Couldn't find: The operand sizes on the stack do not match any of the four forms of usage of this instruction/.class
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ISHL iSHL0 = new ISHL();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(168, objectType0);
      objectType0.toString();
      LocalVariables localVariables0 = new LocalVariables(168);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.merge(localVariables1);
      LocalVariables localVariables2 = localVariables0.getClone();
      LocalVariables localVariables3 = localVariables2.getClone();
      Frame frame0 = new Frame(localVariables3, operandStack0);
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame0);
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(37, (byte)119);
      MULTIANEWARRAY mULTIANEWARRAY1 = new MULTIANEWARRAY(37, (short)58);
      frame0.getClone();
      NOP nOP0 = new NOP();
      String string0 = Constants.ILLEGAL_OPCODE;
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      SIPUSH sIPUSH0 = new SIPUSH((short) (-201));
      instConstraintVisitor0.visitSIPUSH(sIPUSH0);
      assertEquals("sipush", sIPUSH0.getName());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ISHL iSHL0 = new ISHL();
      iSHL0.consumeStack(constantPoolGen0);
      LASTORE lASTORE0 = new LASTORE();
      LocalVariables localVariables0 = new LocalVariables(2);
      ObjectType objectType0 = ObjectType.getInstance("/K");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LDC2_W lDC2_W0 = new LDC2_W(2);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      F2I f2I0 = new F2I();
      F2I f2I1 = new F2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2I(f2I1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2I constraint violated: The value at the stack top is not of type 'float', but of type '.K'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      LocalVariables localVariables0 = new LocalVariables(24);
      operandStack0.push(objectType0);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables1.getClone();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      IUSHR iUSHR0 = new IUSHR();
      frame0.equals(iUSHR0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      I2D i2D0 = new I2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2D(i2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2D constraint violated: The value at the stack top is not of type 'int', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      LocalVariables localVariables0 = new LocalVariables(32);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = new OperandStack(32, objectType0);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      frame1.toString();
      Frame frame2 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame1);
      LLOAD lLOAD0 = new LLOAD(3084);
      byte byte0 = (byte)29;
      ISHL iSHL0 = new ISHL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHL(iSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHL constraint violated: The value at the stack top is not of type 'int', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      DREM dREM0 = new DREM();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ISHL iSHL0 = new ISHL();
      iSHL0.consumeStack(constantPoolGen0);
      ObjectType objectType0 = new ObjectType("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(44, objectType0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      operandStack0.initializeObject(uninitializedObjectType0);
      LocalVariables localVariables0 = new LocalVariables(44);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      LLOAD lLOAD0 = new LLOAD(44);
      D2L d2L0 = new D2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2L(d2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2L constraint violated: The value at the stack top is not of type 'double', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ISHL iSHL0 = new ISHL();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      int int1 = Pattern.DOTALL;
      ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(80, objectType0);
      LocalVariables localVariables0 = new LocalVariables(32);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      POP2 pOP2_0 = new POP2();
      LRETURN lRETURN0 = new LRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLRETURN(lRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LRETURN constraint violated: The value at the stack top is not of type 'long', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      LocalVariables localVariables0 = new LocalVariables(192);
      operandStack0.push(objectType0);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      IUSHR iUSHR0 = new IUSHR();
      instConstraintVisitor0.setFrame(frame0);
      LDC2_W lDC2_W0 = new LDC2_W(192);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      I2D i2D0 = new I2D();
      DUP_X2 dUP_X2_0 = new DUP_X2();
      dUP_X2_0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP_X2(dUP_X2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ISHL iSHL0 = new ISHL();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 44;
      String string0 = "The operand sizes on the stack do not match any of the four forms of usage of this instruction.";
      ObjectType objectType0 = new ObjectType("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(44, objectType0);
      LocalVariables localVariables0 = new LocalVariables(44);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IADD iADD0 = new IADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIADD(iADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IADD constraint violated: The value at the stack top is not of type 'int', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = new ObjectType("aueR^75p(wv0GGj`[vB");
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      LocalVariables localVariables0 = new LocalVariables(32);
      OperandStack operandStack1 = new OperandStack(32, objectType0);
      localVariables0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.clone();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      LDC2_W lDC2_W0 = new LDC2_W(1492);
      DMUL dMUL0 = new DMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDMUL(dMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DMUL constraint violated: The value at the stack top is not of type 'double', but of type 'aueR^75p(wv0GGj`[vB'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      DREM dREM0 = new DREM();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ISHL iSHL0 = new ISHL();
      iSHL0.consumeStack(constantPoolGen0);
      ObjectType objectType0 = new ObjectType("The operand sizs on the stack do not match any of th four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(2180, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2180);
      LocalVariables localVariables1 = new LocalVariables(2180);
      localVariables1.merge(localVariables0);
      localVariables1.set(2, objectType0);
      localVariables0.merge(localVariables1);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      F2L f2L0 = new F2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2L(f2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2L constraint violated: The value at the stack top is not of type 'float', but of type 'The operand sizs on the stack do not match any of th four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      DREM dREM0 = new DREM();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      instructionList0.update();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ISHL iSHL0 = new ISHL();
      iSHL0.consumeStack(constantPoolGen0);
      ObjectType objectType0 = new ObjectType("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(51, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      instConstraintVisitor0.visitIFNONNULL((IFNONNULL) null);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (long) 2);
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      IFLE iFLE0 = new IFLE(instructionHandle0);
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X1(dUP2_X1_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LXOR lXOR0 = new LXOR();
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      OperandStack operandStack0 = new OperandStack(315, uninitializedObjectType0.THROWABLE);
      LocalVariables localVariables0 = new LocalVariables(315);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      INEG iNEG0 = new INEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINEG(iNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction INEG constraint violated: The value at the stack top is not of type 'int', but of type 'java.lang.Throwable'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      Boolean boolean0 = new Boolean(true);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ISHL iSHL0 = new ISHL();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(168, objectType0);
      LocalVariables localVariables0 = new LocalVariables(168);
      localVariables0.getClone();
      LocalVariables localVariables1 = new LocalVariables(168);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame0);
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(37, (byte)119);
      MULTIANEWARRAY mULTIANEWARRAY1 = new MULTIANEWARRAY(37, (short)46);
      mULTIANEWARRAY0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMULTIANEWARRAY(mULTIANEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction MULTIANEWARRAY constraint violated: The '119' upper stack types should be 'int' but aren't.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IREM iREM0 = new IREM();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      D2L d2L0 = new D2L();
      LocalVariables localVariables0 = new LocalVariables(154);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("Iw");
      OperandStack operandStack0 = new OperandStack(1129, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables0.getClone();
      Frame.getThis();
      IUSHR iUSHR0 = new IUSHR();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      F2I f2I0 = new F2I();
      frame1.equals(f2I0);
      frame1.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LDC2_W lDC2_W0 = new LDC2_W(46);
      I2D i2D0 = new I2D();
      FMUL fMUL0 = new FMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFMUL(fMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FMUL constraint violated: The value at the stack top is not of type 'float', but of type 'Iw'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2);
      operandStack0.push(objectType0);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables1.getClone();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      IUSHR iUSHR0 = new IUSHR();
      frame0.equals(iUSHR0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      FRETURN fRETURN0 = new FRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFRETURN(fRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FRETURN constraint violated: The value at the stack top is not of type 'float', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      ObjectType objectType1 = ObjectType.getInstance("gi+fN! A");
      OperandStack operandStack1 = new OperandStack(32, objectType0);
      LocalVariables localVariables0 = new LocalVariables(32);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LLOAD lLOAD0 = new LLOAD(214);
      instConstraintVisitor0.visitLLOAD(lLOAD0);
      DADD dADD0 = new DADD();
      DNEG dNEG0 = new DNEG();
      NEWARRAY nEWARRAY0 = new NEWARRAY(objectType1.INT);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEWARRAY(nEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction NEWARRAY constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      LocalVariables localVariables0 = new LocalVariables(32);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = new OperandStack(32, objectType0);
      localVariables0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      frame1.clone();
      instConstraintVisitor0.setFrame(frame1);
      LLOAD lLOAD0 = new LLOAD(3089);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("Illegal opcode detected: ");
      POP2 pOP2_0 = new POP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPOP2(pOP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction POP2 constraint violated: Stack top size should be 2 but stack top is 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.' of size '1'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("The operandAsizes on t4e snack do not match any of the four forms of usage of this instruction.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = new OperandStack(17);
      LocalVariables localVariables0 = new LocalVariables(32);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      constantPoolGen0.lookupInterfaceMethodref("The operandAsizes on t4e snack do not match any of the four forms of usage of this instruction.", "The operandAsizes on t4e snack do not match any of the four forms of usage of this instruction.", "The operandAsizes on t4e snack do not match any of the four forms of usage of this instruction.");
      LRETURN lRETURN0 = new LRETURN();
      frame0.equals(lRETURN0);
      frame0.toString();
      frame0.getClone();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      LLOAD lLOAD0 = new LLOAD(17);
      instConstraintVisitor0.visitLLOAD(lLOAD0);
      DADD dADD0 = new DADD();
      DNEG dNEG0 = new DNEG();
      LAND lAND0 = new LAND();
      I2S i2S0 = new I2S();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2S(i2S0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2S constraint violated: The value at the stack top is not of type 'int', but of type 'The operandAsizes on t4e snack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      DREM dREM0 = new DREM();
      Boolean boolean0 = new Boolean(false);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ISHL iSHL0 = new ISHL();
      ObjectType objectType0 = ObjectType.getInstance("w:I_I#J\" '/");
      OperandStack operandStack0 = new OperandStack(168, objectType0);
      LocalVariables localVariables0 = new LocalVariables(168);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.toString();
      operandStack0.push(objectType0);
      OperandStack operandStack1 = new OperandStack(1413);
      Frame frame1 = new Frame(localVariables1, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("!>yVF`{:");
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitARRAYLENGTH((ARRAYLENGTH) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.MULTILINE;
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(8, objectType0);
      ObjectType.getInstance("gi+fN! A");
      OperandStack operandStack1 = new OperandStack(8, objectType0);
      LocalVariables localVariables0 = new LocalVariables(8);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2B((I2B) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      LocalVariables localVariables0 = new LocalVariables(32);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = new OperandStack(32, objectType0);
      localVariables0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      LLOAD lLOAD0 = new LLOAD(3089);
      instConstraintVisitor0.visitLLOAD((LLOAD) null);
      IOR iOR0 = new IOR();
      LASTORE lASTORE0 = new LASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLASTORE(lASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LASTORE constraint violated: The value at the stack top is not of type 'long', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      LocalVariables localVariables0 = new LocalVariables(3541);
      OperandStack operandStack0 = new OperandStack(1681, objectType0);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = new OperandStack(3541);
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      OperandStack operandStack2 = new OperandStack((-3591));
      Class<I2D> class0 = I2D.class;
      Type.getType(class0);
      UninitializedObjectType uninitializedObjectType1 = new UninitializedObjectType(uninitializedObjectType0.STRING);
      operandStack1.initializeObject(uninitializedObjectType1);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      instConstraintVisitor0.visitDUP_X1((DUP_X1) null);
      DLOAD dLOAD0 = null;
      try {
        dLOAD0 = new DLOAD((-3591));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal value: -3591
         //
         verifyException("org.apache.bcel.generic.LocalVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      LocalVariables localVariables0 = new LocalVariables(32);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = new OperandStack(32, objectType0);
      localVariables0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      frame1.toString();
      instConstraintVisitor0.setFrame(frame1);
      EvoSuiteFile evoSuiteFile0 = null;
      DSUB dSUB0 = new DSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDSUB(dSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSUB constraint violated: The value at the stack top is not of type 'double', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(32);
      LocalVariables localVariables0 = new LocalVariables(32);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      frame0.equals(localVariables0);
      frame1.clone();
      instConstraintVisitor0.setFrame(frame1);
      LLOAD lLOAD0 = new LLOAD(3119);
      OperandStack operandStack1 = new OperandStack(32);
      operandStack0.push(objectType0);
      LocalVariables localVariables1 = new LocalVariables(3119);
      operandStack0.push(objectType0);
      OperandStack operandStack2 = new OperandStack(4096);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LXOR lXOR0 = new LXOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLXOR(lXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LXOR constraint violated: The value at the stack top is not of type 'long', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.MULTILINE;
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(8);
      ObjectType.getInstance("gi+fN! A");
      OperandStack operandStack1 = new OperandStack(8, objectType0);
      LocalVariables localVariables0 = new LocalVariables(8);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      SASTORE sASTORE0 = new SASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSASTORE(sASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction SASTORE constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BIPUSH bIPUSH0 = new BIPUSH((byte)77);
      LocalVariables localVariables0 = new LocalVariables(46);
      OperandStack operandStack0 = new OperandStack(3);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(3, (byte)77);
      frame1.getClone();
      frame0.toString();
      localVariables0.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      LDC2_W lDC2_W0 = new LDC2_W((byte)77);
      LLOAD lLOAD0 = new LLOAD(46);
      // Undeclared exception!
      try { 
        lLOAD0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LLOAD constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = new OperandStack(17);
      LocalVariables localVariables0 = new LocalVariables(1);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.pop();
      constantPoolGen0.lookupInterfaceMethodref("The operand sizes on the stack do not match any of the four forms of usage of this instruction.", "The operand sizes on the stack do not match any of the four forms of usage of this instruction.", "The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      frame0.toString();
      frame0.getClone();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      LLOAD lLOAD0 = new LLOAD(3089);
      DCONST dCONST0 = new DCONST(0.0);
      dCONST0.produceStack(constantPoolGen0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IAND iAND0 = new IAND();
      IAND iAND1 = new IAND();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHR((LSHR) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      LocalVariables localVariables0 = new LocalVariables(4);
      operandStack0.push(objectType0);
      constantPoolGen0.getConstantPool();
      LocalVariables localVariables1 = new LocalVariables(1);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      ObjectType objectType1 = new ObjectType("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      constantPoolGen0.lookupInterfaceMethodref("", "", "The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      instConstraintVisitor0.setFrame(frame0);
      LDC2_W lDC2_W0 = new LDC2_W(3494);
      I2L i2L0 = new I2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2L(i2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2L constraint violated: The value at the stack top is not of type 'int', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      DREM dREM0 = new DREM();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "The operand sizes on the stack do not match any of the four forms of usage of this instruction.";
      constantPoolGen0.addDouble(44);
      ObjectType objectType0 = new ObjectType("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      constantPoolGen0.lookupMethodref("The operand sizes on the stack do not match any of the four forms of usage of this instruction.", "The operand sizes on the stack do not match any of the four forms of usage of this instruction.", "SJ'<L$LsleZ]OcT<wp");
      OperandStack operandStack0 = new OperandStack(44, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      UninitializedObjectType uninitializedObjectType0 = null;
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) dREM0);
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ACMPEQ(iF_ACMPEQ0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      LocalVariables localVariables0 = new LocalVariables(4);
      operandStack0.push(objectType0);
      operandStack0.clone();
      OperandStack operandStack1 = new OperandStack(4);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.pop();
      frame0.toString();
      frame0.getClone();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      LLOAD lLOAD0 = new LLOAD(3089);
      DCONST dCONST0 = new DCONST(0.0);
      IRETURN iRETURN0 = new IRETURN();
      instConstraintVisitor0.visitPOP((POP) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIRETURN(iRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IRETURN constraint violated: The value at the stack top is not of type 'int', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(44, objectType0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(2);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.equals("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      instConstraintVisitor0.setFrame(frame0);
      IAND iAND0 = new IAND();
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(230);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitANEWARRAY(aNEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ANEWARRAY constraint violated: The 'count' at the stack top is not of type 'int' but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      DREM dREM0 = new DREM();
      Boolean boolean0 = new Boolean(true);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ISHL iSHL0 = new ISHL();
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Total of ");
      OperandStack operandStack0 = new OperandStack(168, objectType0);
      LocalVariables localVariables0 = new LocalVariables(168);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.toString();
      frame0.clone();
      operandStack0.push(objectType0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DUP dUP0 = new DUP();
      instConstraintVisitor0.visitDUP(dUP0);
      INVOKEVIRTUAL iNVOKEVIRTUAL0 = new INVOKEVIRTUAL(168);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEVIRTUAL(iNVOKEVIRTUAL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      Boolean boolean0 = new Boolean(true);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ISHL iSHL0 = new ISHL();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(168, objectType0);
      LocalVariables localVariables0 = new LocalVariables(168);
      localVariables0.toString();
      localVariables0.getClone();
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(37, (short)46);
      InstructionList instructionList1 = new InstructionList();
      instructionList0.insert(instructionList1);
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE((InstructionHandle) null);
      FCMPL fCMPL0 = new FCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPL(fCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPL constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      int int1 = 2;
      LocalVariables localVariables0 = new LocalVariables(2);
      operandStack0.push(objectType0);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables1.getClone();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      IUSHR iUSHR0 = new IUSHR();
      frame0.equals(iUSHR0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      LDC2_W lDC2_W0 = new LDC2_W(2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)61;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X1((DUP2_X1) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = new ObjectType("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(44, objectType0);
      LocalVariables localVariables0 = new LocalVariables(37);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LLOAD lLOAD0 = new LLOAD(968);
      instConstraintVisitor0.visitLLOAD(lLOAD0);
      DADD dADD0 = new DADD();
      DNEG dNEG0 = new DNEG();
      LADD lADD0 = new LADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLADD(lADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LADD constraint violated: The value at the stack top is not of type 'long', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = new ObjectType("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      LocalVariables localVariables0 = new LocalVariables(32);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      LocalVariables localVariables1 = new LocalVariables(32);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      LDC2_W lDC2_W0 = new LDC2_W(32);
      ISUB iSUB0 = new ISUB();
      instConstraintVisitor0.visitDUP2((DUP2) null);
      SIPUSH sIPUSH0 = new SIPUSH((short)2949);
      instConstraintVisitor0.visitSIPUSH(sIPUSH0);
      ARETURN aRETURN0 = new ARETURN();
      instConstraintVisitor0.visitARETURN(aRETURN0);
      IREM iREM0 = new IREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIREM(iREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IREM constraint violated: The value at the stack top is not of type 'int', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      DREM dREM0 = new DREM();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ISHL iSHL0 = new ISHL();
      iSHL0.consumeStack(constantPoolGen0);
      ObjectType objectType0 = new ObjectType("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(68, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      instConstraintVisitor0.visitIFNONNULL((IFNONNULL) null);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (long) 2);
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      IFLE iFLE0 = new IFLE(instructionHandle0);
      LOR lOR0 = new LOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOR(lOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LOR constraint violated: The value at the stack top is not of type 'long', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("7KY*");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2);
      operandStack0.push(objectType0);
      operandStack0.clone();
      OperandStack operandStack1 = new OperandStack(2);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables1.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      localVariables1.clone();
      ObjectType objectType1 = (ObjectType)operandStack0.pop();
      constantPoolGen0.lookupInterfaceMethodref("", "", "7KY*");
      frame0.toString();
      frame0.getClone();
      Frame frame1 = frame0.getClone();
      ObjectType.getInstance("7KY*");
      instConstraintVisitor0.setFrame(frame1);
      LLOAD lLOAD0 = new LLOAD(32);
      OperandStack operandStack2 = new OperandStack(2, objectType1);
      Frame frame2 = new Frame(localVariables0, operandStack2);
      instConstraintVisitor0.setFrame(frame2);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("!>yVF`{:");
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.getEnd();
      IFGE iFGE0 = new IFGE((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGE(iFGE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFGE constraint violated: The value at the stack top is not of type 'int', but of type '7KY*'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = Pattern.DOTALL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("Read-Access on local variable ");
      OperandStack operandStack0 = new OperandStack(32);
      LocalVariables localVariables0 = new LocalVariables(32);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = new OperandStack(44, objectType0);
      localVariables0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      frame1.clone();
      instConstraintVisitor0.setFrame(frame1);
      LLOAD lLOAD0 = new LLOAD(32);
      F2I f2I0 = new F2I();
      instructionList0.copy();
      JSR_W jSR_W0 = new JSR_W((InstructionHandle) null);
      L2D l2D0 = new L2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2D(l2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2D constraint violated: The value at the stack top is not of type 'long', but of type 'Read-Access on local variable '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("The operandAsizes on t4e snack do not match any of the four forms of usage of this instruction.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = new OperandStack(17);
      LocalVariables localVariables0 = new LocalVariables(1);
      objectType0.isAssignmentCompatibleWith((Type) null);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.pop();
      constantPoolGen0.lookupInterfaceMethodref("The operandAsizes on t4e snack do not match any of the four forms of usage of this instruction.", "The operandAsizes on t4e snack do not match any of the four forms of usage of this instruction.", "The operandAsizes on t4e snack do not match any of the four forms of usage of this instruction.");
      frame0.toString();
      frame0.getClone();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      LLOAD lLOAD0 = new LLOAD(3089);
      DCONST dCONST0 = new DCONST(0.0);
      dCONST0.produceStack(constantPoolGen0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IAND iAND0 = new IAND();
      IAND iAND1 = new IAND();
      LREM lREM0 = new LREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLREM(lREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LREM constraint violated: The value at the stack top is not of type 'long', but of type 'The operandAsizes on t4e snack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack((byte)53, objectType0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)53;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      LocalVariables localVariables0 = new LocalVariables((byte)53);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Frame frame1 = new Frame(8, (byte)53);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      frame1.getClone();
      frame1.clone();
      instConstraintVisitor0.setFrame(frame0);
      LLOAD lLOAD0 = new LLOAD(200);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FALOAD fALOAD0 = new FALOAD();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The value at the stack top is not of size '1', but of size '");
      FNEG fNEG0 = new FNEG();
      FSUB fSUB0 = new FSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFSUB(fSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FSUB constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      Boolean boolean0 = new Boolean(true);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ISHL iSHL0 = new ISHL();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(168, objectType0);
      LocalVariables localVariables0 = new LocalVariables(168);
      localVariables0.toString();
      localVariables0.getClone();
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(37, (short)46);
      InstructionList instructionList1 = new InstructionList();
      instructionList0.insert(instructionList1);
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLE(iF_ICMPLE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPLE constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ISHL iSHL0 = new ISHL();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      int int1 = Pattern.DOTALL;
      ObjectType.getInstance("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(80, objectType0);
      LocalVariables localVariables0 = new LocalVariables(32);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      POP2 pOP2_0 = new POP2();
      LDC_W lDC_W0 = new LDC_W(220);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPGT((IF_ICMPGT) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      DCMPG dCMPG0 = new DCMPG();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DCMPG dCMPG1 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ISHL iSHL0 = new ISHL();
      iSHL0.consumeStack(constantPoolGen0);
      ObjectType objectType0 = new ObjectType("'void' is an illegal argument type for a method");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      LocalVariables localVariables0 = new LocalVariables(702);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      instConstraintVisitor0.visitIFNONNULL((IFNONNULL) null);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (long) 702);
      LUSHR lUSHR0 = new LUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLUSHR(lUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LUSHR constraint violated: The value at the stack top is not of type 'int', but of type ''void' is an illegal argument type for a method'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = Pattern.DOTALL;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int1 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(50, objectType0);
      LocalVariables localVariables0 = new LocalVariables(50);
      BasicType basicType0 = Type.LONG;
      operandStack0.push(basicType0);
      OperandStack operandStack1 = new OperandStack(32, basicType0.OBJECT);
      localVariables0.clone();
      LocalVariables localVariables1 = new LocalVariables(6);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame1);
      LLOAD lLOAD0 = new LLOAD(1279);
      instConstraintVisitor0.visitLLOAD(lLOAD0);
      IOR iOR0 = new IOR();
      LASTORE lASTORE0 = new LASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLASTORE(lASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LASTORE constraint violated: The 'index' is not of type int but of type .
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("The operandAsizes on t4e snack do not match any of the four forms of usage of this instruction.");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The operandAsizes on t4e snack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = new OperandStack(17);
      LocalVariables localVariables0 = new LocalVariables(1);
      objectType0.isAssignmentCompatibleWith((Type) null);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      constantPoolGen0.lookupInterfaceMethodref("The operandAsizes on t4e snack do not match any of the four forms of usage of this instruction.", "The operandAsizes on t4e snack do not match any of the four forms of usage of this instruction.", "The operandAsizes on t4e snack do not match any of the four forms of usage of this instruction.");
      frame0.toString();
      frame0.getClone();
      Frame frame1 = frame0.getClone();
      IADD iADD0 = new IADD();
      frame1.equals(iADD0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame1);
      LLOAD lLOAD0 = new LLOAD(3089);
      DUP2 dUP2_0 = new DUP2();
      instConstraintVisitor0.visitDUP2(dUP2_0);
      AALOAD aALOAD0 = new AALOAD();
      DSTORE dSTORE0 = new DSTORE(3089);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(dSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSTORE constraint violated: Stack top type and STOREing Instruction type mismatch: Stack top: 'The operandAsizes on t4e snack do not match any of the four forms of usage of this instruction.'; Instruction type: 'double'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("The operandAsizes on t4e snack do not match any of the four forms of usage of this instruction.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = new OperandStack(17);
      LocalVariables localVariables0 = new LocalVariables(1);
      objectType0.isAssignmentCompatibleWith((Type) null);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      constantPoolGen0.lookupInterfaceMethodref("The operandAsizes on t4e snack do not match any of the four forms of usage of this instruction.", "The operandAsizes on t4e snack do not match any of the four forms of usage of this instruction.", "The operandAsizes on t4e snack do not match any of the four forms of usage of this instruction.");
      frame0.toString();
      frame0.getClone();
      Frame frame1 = frame0.getClone();
      IADD iADD0 = new IADD();
      frame1.equals(iADD0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame1);
      LLOAD lLOAD0 = new LLOAD(3089);
      DUP2 dUP2_0 = new DUP2();
      instConstraintVisitor0.visitDUP2(dUP2_0);
      IDIV iDIV0 = new IDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIDIV(iDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IDIV constraint violated: The value at the stack top is not of type 'int', but of type 'The operandAsizes on t4e snack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.UNIX_LINES;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(1);
      LocalVariables localVariables0 = new LocalVariables(1);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = new OperandStack(1, objectType0);
      constantPoolGen0.addMethodref("LbFe\"O", "The operand sizes on the stack do not match any of the four forms of usage of this instruction.", "LbFe\"O");
      localVariables0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      DADD dADD0 = new DADD();
      I2C i2C0 = new I2C();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2C(i2C0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2C constraint violated: The value at the stack top is not of type 'int', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.UNIX_LINES;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(1);
      LocalVariables localVariables0 = new LocalVariables(1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = new OperandStack(1, objectType0);
      constantPoolGen0.addMethodref("LbFe\"O", "The operand sizes on the stack do not match any of the four forms of usage of this instruction.", "LbFe\"O");
      localVariables0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      Frame.getThis();
      frame1.equals((Object) null);
      frame1.clone();
      instConstraintVisitor0.setFrame(frame1);
      LLOAD lLOAD0 = new LLOAD(3094);
      F2I f2I0 = new F2I();
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(1);
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(5);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINSTANCEOF(iNSTANCEOF0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      LDC_W lDC_W0 = new LDC_W(2175);
      LALOAD lALOAD0 = new LALOAD();
      ISHL iSHL0 = new ISHL();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      LocalVariables localVariables0 = new LocalVariables(2175);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance(".*0(<noe/,'s");
      OperandStack operandStack0 = new OperandStack(2175, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack1);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      FASTORE fASTORE0 = new FASTORE();
      FASTORE fASTORE1 = new FASTORE();
      L2I l2I0 = new L2I();
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY((short)247, (short)1212);
      MULTIANEWARRAY mULTIANEWARRAY1 = new MULTIANEWARRAY(2175, (short)1212);
      D2I d2I0 = new D2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2I(d2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L/*0(<noe/,'s;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack((byte)53, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LSUB lSUB0 = new LSUB();
      LCMP lCMP0 = new LCMP();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLCMP(lCMP0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LCMP constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      Boolean boolean0 = new Boolean(false);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ISHL iSHL0 = new ISHL();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(168, objectType0);
      ObjectType objectType1 = ObjectType.getInstance("");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType1);
      operandStack0.initializeObject(uninitializedObjectType0);
      objectType0.toString();
      LocalVariables localVariables0 = new LocalVariables(168);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.merge(localVariables1);
      LocalVariables localVariables2 = localVariables0.getClone();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      Type.getType(class0);
      Frame frame0 = new Frame(localVariables2, operandStack0);
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(168, (byte)119);
      FADD fADD0 = new FADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFADD(fADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FADD constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.LITERAL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("The operand Jizes on the stack d/Znot match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(16);
      LocalVariables localVariables0 = new LocalVariables(16);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = new OperandStack(16, objectType0);
      constantPoolGen0.addMethodref("LbFe\"O", "The operand Jizes on the stack d/Znot match any of the four forms of usage of this instruction.", "LbFe\"O");
      localVariables0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame.getThis();
      frame0.equals(objectType0);
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      LLOAD lLOAD0 = new LLOAD(3094);
      F2I f2I0 = new F2I();
      byte[] byteArray0 = new byte[6];
      operandStack1.getClone();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUTF();
      Instruction.readInstruction(byteSequence1);
      instConstraintVisitor0.visitInvokeInstruction((InvokeInstruction) null);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSWAP((SWAP) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.DOTALL;
      ObjectType objectType0 = ObjectType.getInstance("The operandAsizes on t4e snack do not match any of the four forms of usage of this instruction.");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The operandAsizes on t4e snack do not match any of the four forms of usage of this instruction.");
      OperandStack operandStack0 = new OperandStack(32, objectType0);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = new OperandStack(17);
      LocalVariables localVariables0 = new LocalVariables(1);
      objectType0.isAssignmentCompatibleWith((Type) null);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      frame0.getClone();
      Frame frame1 = frame0.getClone();
      IADD iADD0 = new IADD();
      frame1.equals(iADD0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame1);
      LLOAD lLOAD0 = new LLOAD(3089);
      DUP2 dUP2_0 = new DUP2();
      instConstraintVisitor0.visitDUP2(dUP2_0);
      IDIV iDIV0 = new IDIV();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      DCMPL dCMPL0 = new DCMPL();
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLT(iF_ICMPLT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPLT constraint violated: The value at the stack top is not of type 'int', but of type 'The operandAsizes on t4e snack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack((byte)36, objectType0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      LocalVariables localVariables0 = new LocalVariables((byte)36);
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = (LocalVariables)localVariables1.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Frame frame1 = new Frame(8, (byte)0);
      Frame frame2 = new Frame(localVariables2, operandStack0);
      frame1.clone();
      instConstraintVisitor0.setFrame(frame0);
      LLOAD lLOAD0 = new LLOAD(200);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FNEG fNEG0 = new FNEG();
      DCMPL dCMPL0 = new DCMPL();
      dCMPL0.consumeStack(constantPoolGen0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPL(dCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPL constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ISHL iSHL0 = new ISHL();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(168, objectType0);
      LocalVariables localVariables0 = new LocalVariables(168);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.merge(localVariables1);
      LocalVariables localVariables2 = localVariables0.getClone();
      LocalVariables localVariables3 = localVariables2.getClone();
      Frame frame0 = new Frame(localVariables3, operandStack0);
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame0);
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(37, (byte)119);
      MULTIANEWARRAY mULTIANEWARRAY1 = new MULTIANEWARRAY(37, (short)58);
      frame0.getClone();
      NOP nOP0 = new NOP();
      String string0 = Constants.ILLEGAL_OPCODE;
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFNE((IFNE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      LocalVariables localVariables0 = new LocalVariables(3541);
      OperandStack operandStack0 = new OperandStack(1681, objectType0);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = new OperandStack((-1277));
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      OperandStack operandStack2 = new OperandStack((-3591));
      UninitializedObjectType uninitializedObjectType1 = new UninitializedObjectType(uninitializedObjectType0.STRING);
      operandStack1.initializeObject(uninitializedObjectType1);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = new ARETURN();
      instConstraintVisitor0.visitARETURN(aRETURN0);
      F2D f2D0 = new F2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2D(f2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2D constraint violated: The value at the stack top is not of type 'float', but of type 'The operand sizes on the stack do not match any of the four forms of usage of this instruction.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }
}
