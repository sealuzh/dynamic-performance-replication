/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:43:30 GMT 2018
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.lang.reflect.Array;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.generic.AASTORE;
import org.apache.bcel.generic.ACONST_NULL;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ARRAYLENGTH;
import org.apache.bcel.generic.ASTORE;
import org.apache.bcel.generic.ATHROW;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.BREAKPOINT;
import org.apache.bcel.generic.CALOAD;
import org.apache.bcel.generic.CASTORE;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.D2I;
import org.apache.bcel.generic.D2L;
import org.apache.bcel.generic.DADD;
import org.apache.bcel.generic.DALOAD;
import org.apache.bcel.generic.DASTORE;
import org.apache.bcel.generic.DCMPG;
import org.apache.bcel.generic.DCMPL;
import org.apache.bcel.generic.DCONST;
import org.apache.bcel.generic.DDIV;
import org.apache.bcel.generic.DLOAD;
import org.apache.bcel.generic.DMUL;
import org.apache.bcel.generic.DNEG;
import org.apache.bcel.generic.DREM;
import org.apache.bcel.generic.DRETURN;
import org.apache.bcel.generic.DSTORE;
import org.apache.bcel.generic.DSUB;
import org.apache.bcel.generic.DUP;
import org.apache.bcel.generic.DUP2;
import org.apache.bcel.generic.DUP2_X1;
import org.apache.bcel.generic.DUP2_X2;
import org.apache.bcel.generic.DUP_X1;
import org.apache.bcel.generic.DUP_X2;
import org.apache.bcel.generic.F2D;
import org.apache.bcel.generic.F2I;
import org.apache.bcel.generic.F2L;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FALOAD;
import org.apache.bcel.generic.FASTORE;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FCMPL;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.FDIV;
import org.apache.bcel.generic.FLOAD;
import org.apache.bcel.generic.FMUL;
import org.apache.bcel.generic.FNEG;
import org.apache.bcel.generic.FREM;
import org.apache.bcel.generic.FRETURN;
import org.apache.bcel.generic.FSTORE;
import org.apache.bcel.generic.FSUB;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.GETSTATIC;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.I2B;
import org.apache.bcel.generic.I2C;
import org.apache.bcel.generic.I2D;
import org.apache.bcel.generic.I2F;
import org.apache.bcel.generic.I2L;
import org.apache.bcel.generic.I2S;
import org.apache.bcel.generic.IADD;
import org.apache.bcel.generic.IAND;
import org.apache.bcel.generic.IASTORE;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IDIV;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IFNULL;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ACMPNE;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.IMPDEP1;
import org.apache.bcel.generic.IMPDEP2;
import org.apache.bcel.generic.IMUL;
import org.apache.bcel.generic.INEG;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.INVOKEINTERFACE;
import org.apache.bcel.generic.INVOKESPECIAL;
import org.apache.bcel.generic.INVOKESTATIC;
import org.apache.bcel.generic.INVOKEVIRTUAL;
import org.apache.bcel.generic.IOR;
import org.apache.bcel.generic.IREM;
import org.apache.bcel.generic.IRETURN;
import org.apache.bcel.generic.ISHL;
import org.apache.bcel.generic.ISHR;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.ISUB;
import org.apache.bcel.generic.IUSHR;
import org.apache.bcel.generic.IXOR;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.InstructionListObserver;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.L2D;
import org.apache.bcel.generic.L2F;
import org.apache.bcel.generic.L2I;
import org.apache.bcel.generic.LADD;
import org.apache.bcel.generic.LALOAD;
import org.apache.bcel.generic.LAND;
import org.apache.bcel.generic.LASTORE;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.LDC;
import org.apache.bcel.generic.LDC2_W;
import org.apache.bcel.generic.LDIV;
import org.apache.bcel.generic.LLOAD;
import org.apache.bcel.generic.LMUL;
import org.apache.bcel.generic.LNEG;
import org.apache.bcel.generic.LOR;
import org.apache.bcel.generic.LREM;
import org.apache.bcel.generic.LRETURN;
import org.apache.bcel.generic.LSHL;
import org.apache.bcel.generic.LSHR;
import org.apache.bcel.generic.LSTORE;
import org.apache.bcel.generic.LSUB;
import org.apache.bcel.generic.LUSHR;
import org.apache.bcel.generic.LXOR;
import org.apache.bcel.generic.LocalVariableInstruction;
import org.apache.bcel.generic.MONITORENTER;
import org.apache.bcel.generic.MONITOREXIT;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.NEW;
import org.apache.bcel.generic.NEWARRAY;
import org.apache.bcel.generic.NOP;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.POP;
import org.apache.bcel.generic.POP2;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.PUTFIELD;
import org.apache.bcel.generic.PUTSTATIC;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.RETURN;
import org.apache.bcel.generic.SALOAD;
import org.apache.bcel.generic.SASTORE;
import org.apache.bcel.generic.SIPUSH;
import org.apache.bcel.generic.SWAP;
import org.apache.bcel.generic.TABLESWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.apache.bcel.verifier.structurals.OperandStack;
import org.apache.bcel.verifier.structurals.UninitializedObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstConstraintVisitor_ESTest extends InstConstraintVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      NOP nOP0 = new NOP();
      instConstraintVisitor0.visitNOP(nOP0);
      assertEquals("nop", nOP0.getName());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitDSTORE((DSTORE) null);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(245, 245);
      instConstraintVisitor0.visitInvokeInstruction(iNVOKEINTERFACE0);
      LCMP lCMP0 = new LCMP();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLCMP(lCMP0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      SIPUSH sIPUSH0 = new SIPUSH((short)2);
      instConstraintVisitor0.visitSIPUSH(sIPUSH0);
      assertEquals(3, sIPUSH0.getLength());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      NEW nEW0 = new NEW(3);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCPInstruction(nEW0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DUP_X1 dUP_X1_0 = new DUP_X1();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(195);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEDYNAMIC(iNVOKEDYNAMIC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INVOKEDYNAMIC instruction is not supported at this time
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP1((IMPDEP1) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP1.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(17, 17);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEINTERFACE(iNVOKEINTERFACE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BIPUSH bIPUSH0 = new BIPUSH((byte)0);
      instConstraintVisitor0.visitBIPUSH(bIPUSH0);
      assertEquals("bipush", bIPUSH0.getName());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CALOAD cALOAD0 = new CALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCALOAD(cALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSTORE lSTORE0 = new LSTORE(3940);
      instConstraintVisitor0.visitLSTORE(lSTORE0);
      assertEquals("lstore", lSTORE0.getName());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitBREAKPOINT(bREAKPOINT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as BREAKPOINT.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      I2L i2L0 = new I2L();
      instConstraintVisitor0.visitISTORE((ISTORE) null);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setMethodGen((MethodGen) null);
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      assertEquals((short)94, dUP2_X2_0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCONST dCONST0 = new DCONST(0.0);
      instConstraintVisitor0.visitDCONST(dCONST0);
      assertEquals(1, dCONST0.getLength());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitGOTO_W((GOTO_W) null);
      I2D i2D0 = new I2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2D(i2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ILOAD iLOAD0 = new ILOAD(776);
      instConstraintVisitor0.visitILOAD(iLOAD0);
      assertEquals((short)21, iLOAD0.getCanonicalTag());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DUP_X1 dUP_X1_0 = new DUP_X1();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackInstruction(dUP_X1_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FLOAD fLOAD0 = new FLOAD(196);
      instConstraintVisitor0.visitFLOAD(fLOAD0);
      LDIV lDIV0 = new LDIV();
      IADD iADD0 = new IADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIADD(iADD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP2(iMPDEP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP2.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitFCONST((FCONST) null);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitJSR((JSR) null);
      Frame frame0 = new Frame(1122, 112);
      instConstraintVisitor0.setFrame(frame0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(791);
      ObjectType objectType0 = ObjectType.getInstance("wD8r_{>nlxf");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OperandStack operandStack0 = new OperandStack(1010, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      frame1.toString();
      instConstraintVisitor0.setFrame(frame1);
      D2F d2F0 = new D2F();
      DNEG dNEG0 = new DNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDNEG(dNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DNEG constraint violated: The value at the stack top is not of type 'double', but of type 'wD8r_{>nlxf'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = (-1216);
      Frame frame0 = new Frame(1003, (-1216));
      instConstraintVisitor0.setFrame(frame0);
      FRETURN fRETURN0 = (FRETURN)InstructionConstants.FRETURN;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackConsumer(fRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FRETURN constraint violated: Cannot consume 1 stack slots: only 0 slot(s) left on stack!
         // Stack:
         // Slots used: 0 MaxStack: -1216.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GETSTATIC gETSTATIC0 = new GETSTATIC(405);
      instConstraintVisitor0.visitGETSTATIC(gETSTATIC0);
      assertEquals("getstatic", gETSTATIC0.getName());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      F2D f2D0 = new F2D();
      InstructionList instructionList0 = new InstructionList(f2D0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionList instructionList1 = instructionList0.copy();
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      mONITORENTER0.toString((ConstantPool) null);
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      D2L d2L0 = new D2L();
      L2I l2I0 = new L2I();
      GOTO gOTO0 = new GOTO(instructionHandle0);
      instConstraintVisitor0.visitGOTO(gOTO0);
      assertEquals("goto", gOTO0.getName());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      instConstraintVisitor0.visitACONST_NULL(aCONST_NULL0);
      assertEquals(1, aCONST_NULL0.getLength());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ICONST iCONST0 = new ICONST(3);
      instConstraintVisitor0.visitICONST(iCONST0);
      assertEquals(1, iCONST0.getLength());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitTABLESWITCH((TABLESWITCH) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ALOAD aLOAD0 = new ALOAD(3);
      instConstraintVisitor0.visitALOAD(aLOAD0);
      assertEquals((short)45, aLOAD0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FSTORE fSTORE0 = new FSTORE(18);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      fSTORE0.produceStack(constantPoolGen0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      instConstraintVisitor0.visitFSTORE(fSTORE0);
      FNEG fNEG0 = new FNEG();
      fNEG0.toString((ConstantPool) null);
      fNEG0.getType(constantPoolGen1);
      RETURN rETURN0 = new RETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitRETURN(rETURN0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      LCONST lCONST0 = new LCONST(0L);
      instConstraintVisitor0.visitLCONST(lCONST0);
      POP pOP0 = new POP();
      boolean boolean0 = true;
      I2D i2D0 = new I2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2D(i2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LDC2_W lDC2_W0 = new LDC2_W(763);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AASTORE aASTORE0 = new AASTORE();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(1828);
      ObjectType objectType0 = new ObjectType("wD,8zr_{>+xf");
      OperandStack operandStack0 = new OperandStack(763, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      SWAP sWAP0 = new SWAP();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSWAP(sWAP0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      AASTORE aASTORE0 = new AASTORE();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables((byte)0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("wx,8]r_{>+xf");
      OperandStack operandStack0 = new OperandStack(18, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Character character0 = new Character('\"');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) aASTORE0);
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ACMPNE(iF_ACMPNE0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("f");
      OperandStack operandStack0 = new OperandStack(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType1 = new ObjectType("f");
      OperandStack operandStack1 = new OperandStack(2, objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean0 = new Boolean(false);
      DREM dREM0 = new DREM();
      Frame frame0 = new Frame(2, 317);
      Frame frame1 = frame0.getClone();
      frame1.toString();
      operandStack0.push(objectType1);
      Frame frame2 = frame1.getClone();
      LocalVariables localVariables0 = new LocalVariables(317);
      instConstraintVisitor0.setFrame(frame2);
      LREM lREM0 = new LREM();
      DREM dREM1 = new DREM();
      ALOAD aLOAD0 = (ALOAD)InstructionConstants.ALOAD_2;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLocalVariableInstruction(aLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ALOAD constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      I2S i2S0 = new I2S();
      LDC2_W lDC2_W0 = new LDC2_W(1003);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AASTORE aASTORE0 = new AASTORE();
      LocalVariables localVariables0 = new LocalVariables(103);
      ObjectType objectType0 = new ObjectType("wD,8zr_{>+xf");
      OperandStack operandStack0 = new OperandStack(103, objectType0);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.merge(localVariables1);
      OperandStack operandStack1 = new OperandStack(1003);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      LREM lREM0 = new LREM();
      DLOAD dLOAD0 = new DLOAD(306);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLocalVariableInstruction(dLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DLOAD constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LDC2_W lDC2_W0 = new LDC2_W(776);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AASTORE aASTORE0 = new AASTORE();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#@G;c");
      LocalVariables localVariables0 = new LocalVariables(776);
      ObjectType objectType0 = ObjectType.getInstance("P%$/=H187(]u/-7-");
      OperandStack operandStack0 = new OperandStack(776, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = new IRETURN();
      FASTORE fASTORE0 = new FASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFASTORE(fASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FASTORE constraint violated: The value at the stack top is not of type 'float', but of type 'P%$.=H187(]u.-7-'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LADD lADD0 = new LADD();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SIPUSH sIPUSH0 = new SIPUSH((short)2190);
      ObjectType objectType0 = ObjectType.getInstance("f");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      LocalVariables localVariables0 = new LocalVariables((short)2190);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      CHECKCAST cHECKCAST0 = new CHECKCAST(99);
      DCMPL dCMPL0 = new DCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPL(dCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPL constraint violated: The value at the stack top is not of type 'double', but of type 'f'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      I2S i2S0 = new I2S();
      LDC2_W lDC2_W0 = new LDC2_W(1003);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      AASTORE aASTORE0 = new AASTORE();
      LocalVariables localVariables0 = new LocalVariables(103);
      ObjectType objectType0 = new ObjectType("wD,8zr_{>+xf");
      OperandStack operandStack0 = new OperandStack(103, objectType0);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.merge(localVariables1);
      OperandStack operandStack1 = new OperandStack(1003);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      LREM lREM0 = new LREM();
      lREM0.produceStack((ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLREM(lREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LREM constraint violated: The value at the stack top is not of type 'long', but of type 'wD,8zr_{>+xf'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = 763;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(763);
      ObjectType objectType0 = ObjectType.getInstance("wD,8r_{>+xf");
      OperandStack operandStack0 = new OperandStack(763, objectType0);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      IRETURN iRETURN0 = new IRETURN();
      DMUL dMUL0 = new DMUL();
      CHECKCAST cHECKCAST0 = new CHECKCAST(763);
      FSUB fSUB0 = new FSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFSUB(fSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FSUB constraint violated: The value at the stack top is not of type 'float', but of type 'wD,8r_{>+xf'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(776);
      ObjectType objectType0 = new ObjectType("(9");
      OperandStack operandStack0 = new OperandStack(776, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(9");
      Frame frame0 = new Frame(localVariables0, operandStack1);
      operandStack0.clear();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      Boolean boolean0 = Boolean.TRUE;
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = new IRETURN();
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      frame0.getClone();
      FRETURN fRETURN0 = new FRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFRETURN(fRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FRETURN constraint violated: The value at the stack top is not of type 'float', but of type '(9'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = ObjectType.getInstance("U^Yu*88<");
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(2277);
      OperandStack operandStack0 = new OperandStack(2277, objectType0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      operandStack0.initializeObject(uninitializedObjectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean0 = new Boolean("U^Yu*88<");
      operandStack0.initializeObject(uninitializedObjectType0);
      IRETURN iRETURN0 = new IRETURN();
      localVariables0.getClone();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(1422);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      POP2 pOP2_0 = new POP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPOP2(pOP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LU^Yu*88<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("U^Yu*88<");
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(2277);
      OperandStack operandStack0 = new OperandStack(2277, objectType0);
      localVariables0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      IASTORE iASTORE0 = new IASTORE();
      INEG iNEG0 = new INEG();
      LADD lADD0 = new LADD();
      NEWARRAY nEWARRAY0 = new NEWARRAY((byte) (-78));
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEWARRAY(nEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LU^Yu*88<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LREM lREM0 = new LREM();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      OperandStack operandStack1 = new OperandStack(872, objectType0);
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      POP2 pOP2_0 = new POP2();
      PUTFIELD pUTFIELD0 = new PUTFIELD(872);
      DSUB dSUB0 = new DSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDSUB(dSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSUB constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(758);
      ObjectType objectType0 = new ObjectType("wD,8zr_{>+xf");
      OperandStack operandStack0 = new OperandStack(758, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      ASTORE aSTORE0 = new ASTORE(2894);
      SWAP sWAP0 = new SWAP();
      sWAP0.consumeStack(constantPoolGen0);
      iRETURN0.toString();
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE((InstructionHandle) null);
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPGT(iF_ICMPGT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPGT constraint violated: The value at the stack top is not of type 'int', but of type 'wD,8zr_{>+xf'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(776);
      ObjectType objectType0 = new ObjectType("wD,8zr_{>uxf");
      OperandStack operandStack0 = new OperandStack(776, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Frame.getThis();
      Boolean boolean0 = Boolean.TRUE;
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = new IRETURN();
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      frame0.getClone();
      localVariables0.toString();
      FLOAD fLOAD0 = new FLOAD(48);
      LNEG lNEG0 = new LNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLNEG(lNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LNEG constraint violated: The value at the stack top is not of type 'long', but of type 'wD,8zr_{>uxf'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LREM lREM0 = new LREM();
      ObjectType objectType0 = ObjectType.getInstance("Sj Lms#q9yh6~hS");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(22);
      ObjectType objectType1 = ObjectType.getInstance("Sj Lms#q9yh6~hS");
      ObjectType objectType2 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1, objectType0);
      OperandStack operandStack1 = new OperandStack(22);
      localVariables0.getClone();
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      lREM0.produceStack(constantPoolGen0);
      NEWARRAY nEWARRAY0 = new NEWARRAY(objectType1.BYTE);
      ALOAD aLOAD0 = (ALOAD)InstructionConstants.ALOAD_1;
      LRETURN lRETURN0 = new LRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLRETURN(lRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LRETURN constraint violated: The value at the stack top is not of type 'long', but of type 'Sj Lms#q9yh6~hS'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      AASTORE aASTORE0 = new AASTORE();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(763);
      ObjectType objectType0 = ObjectType.getInstance("2Q");
      OperandStack operandStack0 = new OperandStack(1861, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      frame0.toString();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      INVOKEVIRTUAL iNVOKEVIRTUAL0 = new INVOKEVIRTUAL(1861);
      DCMPL dCMPL0 = new DCMPL();
      IREM iREM0 = new IREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIREM(iREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IREM constraint violated: The value at the stack top is not of type 'int', but of type '2Q'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(1824);
      ObjectType objectType0 = ObjectType.getInstance(">");
      OperandStack operandStack0 = new OperandStack(1824, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      OperandStack operandStack2 = operandStack1.getClone();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OperandStack operandStack3 = new OperandStack((-492));
      ALOAD aLOAD0 = new ALOAD(367);
      operandStack1.equals(localVariables0);
      operandStack2.toString();
      Frame frame0 = new Frame(localVariables0, operandStack2);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ASTORE aSTORE0 = new ASTORE(1824);
      POP pOP0 = new POP();
      POP pOP1 = new POP();
      instConstraintVisitor0.visitPOP(pOP1);
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      assertEquals("breakpoint", bREAKPOINT0.getName());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LADD lADD0 = new LADD();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      SIPUSH sIPUSH0 = new SIPUSH((short)2190);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack((short)2190, objectType0);
      operandStack0.getClone();
      LocalVariables localVariables0 = new LocalVariables((short)2190);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      frame0.toString();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      frame0.clone();
      IRETURN iRETURN0 = new IRETURN();
      instConstraintVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP_X2((DUP_X2) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LREM lREM0 = new LREM();
      ObjectType objectType0 = ObjectType.getInstance("");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(24);
      ObjectType objectType1 = new ObjectType("P%$/=H187(]u/-7-");
      ObjectType objectType2 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(24, objectType0);
      operandStack0.getClone();
      OperandStack operandStack1 = operandStack0.getClone();
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      LREM lREM1 = new LREM();
      lREM1.produceStack(constantPoolGen0);
      NEWARRAY nEWARRAY0 = new NEWARRAY(objectType1.BYTE);
      ALOAD aLOAD0 = (ALOAD)InstructionConstants.ALOAD_1;
      instConstraintVisitor0.visitLocalVariableInstruction(aLOAD0);
      assertEquals("aload_1", aLOAD0.getName());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = 740;
      LocalVariables localVariables0 = new LocalVariables(740);
      ObjectType objectType0 = new ObjectType("wD,8zr_{>nuxf");
      OperandStack operandStack0 = new OperandStack(740, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      frame1.equals(localVariables0);
      localVariables0.getClone();
      Boolean boolean0 = new Boolean("wD,8zr_{>nuxf");
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = new IRETURN();
      IRETURN iRETURN1 = (IRETURN)InstructionConstants.IRETURN;
      L2F l2F0 = new L2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2F(l2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2F constraint violated: The value at the stack top is not of type 'long', but of type 'wD,8zr_{>nuxf'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LREM lREM0 = new LREM();
      ObjectType objectType0 = ObjectType.getInstance("0iejh!{c");
      OperandStack operandStack0 = new OperandStack(13, objectType0);
      LocalVariables localVariables0 = new LocalVariables(94);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(94);
      String string0 = Constants.CONSTRUCTOR_NAME;
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      frame0.clone();
      localVariables0.clone();
      IRETURN iRETURN0 = new IRETURN();
      instConstraintVisitor0.setFrame(frame0);
      IAND iAND0 = new IAND();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIAND(iAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IAND constraint violated: The value at the stack top is not of type 'int', but of type '0iejh!{c'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LDC2_W lDC2_W0 = new LDC2_W(760);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RET rET0 = new RET(760);
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.copy();
      Boolean boolean0 = new Boolean(false);
      LocalVariables localVariables0 = new LocalVariables(760);
      ObjectType objectType0 = ObjectType.getInstance("wD,8zr_{>+xf");
      OperandStack operandStack0 = new OperandStack(760, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      operandStack0.toString();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Pattern.quote("wD,8zr_{>+xf");
      operandStack1.initializeObject(uninitializedObjectType0);
      operandStack0.push(uninitializedObjectType0);
      Frame frame1 = new Frame(760, 760);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "cu\"Azm#,0F");
      NEWARRAY nEWARRAY0 = new NEWARRAY(objectType0.VOID);
      ALOAD aLOAD0 = (ALOAD)InstructionConstants.ALOAD_1;
      LXOR lXOR0 = new LXOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLXOR(lXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LXOR constraint violated: The value at the stack top is not of type 'long', but of type 'wD,8zr_{>+xf'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LDC2_W lDC2_W0 = new LDC2_W(763);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RET rET0 = new RET(763);
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstructionList instructionList0 = new InstructionList();
      InstructionList instructionList1 = instructionList0.copy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(763);
      ObjectType objectType0 = new ObjectType("wD,8zr_{>+xf");
      localVariables0.set(2, objectType0);
      OperandStack operandStack0 = new OperandStack(763, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      LREM lREM0 = new LREM();
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      pUSH0.toString();
      instructionList0.insert((CompoundInstruction) pUSH0);
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList1);
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, instructionList1);
      IFEQ iFEQ0 = new IFEQ(instructionHandle1);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFEQ((IFEQ) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LADD lADD0 = new LADD();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("[f");
      OperandStack operandStack0 = new OperandStack(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType1 = new ObjectType("[f");
      OperandStack operandStack1 = new OperandStack(2, objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean0 = new Boolean(false);
      DREM dREM0 = new DREM();
      Frame frame0 = new Frame(2, 317);
      Frame frame1 = frame0.getClone();
      frame1.toString();
      operandStack0.push(objectType1);
      frame1.getClone();
      LocalVariables localVariables0 = new LocalVariables(317);
      Frame frame2 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame2);
      LREM lREM0 = new LREM();
      DREM dREM1 = new DREM();
      ALOAD aLOAD0 = (ALOAD)InstructionConstants.ALOAD_2;
      instConstraintVisitor0.visitLocalVariableInstruction(aLOAD0);
      DDIV dDIV0 = new DDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDDIV(dDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DDIV constraint violated: The value at the stack top is not of type 'double', but of type '[f'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("U^Yu*88<");
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.copy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(2277);
      OperandStack operandStack0 = new OperandStack(2277, objectType0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      RET rET0 = new RET(5);
      RET rET1 = new RET(5);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitRET(rET0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction RET constraint violated: Expecting a ReturnaddressType in local variable 5.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("U^Yu*88<");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      localVariables0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      operandStack0.getClone();
      frame1.clone();
      instConstraintVisitor0.setFrame(frame1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      frame1.equals(frame0);
      I2L i2L0 = new I2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2L(i2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LU^Yu*88<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = 763;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RET rET0 = new RET(763);
      InstructionList instructionList0 = new InstructionList();
      instructionList0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(763);
      ObjectType objectType0 = ObjectType.getInstance("wD,8zr_{>+xf");
      OperandStack operandStack0 = new OperandStack(763, objectType0);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables1.clone();
      instConstraintVisitor0.setFrame(frame0);
      LMUL lMUL0 = new LMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLMUL(lMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LMUL constraint violated: The value at the stack top is not of type 'long', but of type 'wD,8zr_{>+xf'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LREM lREM0 = new LREM();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectType objectType0 = ObjectType.getInstance("");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(17);
      OperandStack operandStack0 = new OperandStack(2198, objectType0);
      String string0 = Constants.ILLEGAL_TYPE;
      Frame frame0 = new Frame(2198, 2198);
      String string1 = frame0.toString();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean0 = new Boolean(string1);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      operandStack0.initializeObject(uninitializedObjectType0);
      IRETURN iRETURN0 = new IRETURN();
      localVariables0.getClone();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(2198);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      LSUB lSUB0 = new LSUB();
      LADD lADD0 = new LADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLADD(lADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LADD constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LDC2_W lDC2_W0 = new LDC2_W(757);
      RET rET0 = new RET(757);
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(757);
      ObjectType objectType0 = ObjectType.getInstance("wD,8zr_{>+xf");
      constantPoolGen0.addDouble(757);
      localVariables0.set(1, objectType0);
      OperandStack operandStack0 = new OperandStack(757, objectType0);
      String string0 = Constants.ILLEGAL_OPCODE;
      OperandStack operandStack1 = operandStack0.getClone();
      LocalVariables localVariables1 = new LocalVariables(757);
      operandStack1.merge(operandStack0);
      Frame frame0 = new Frame(localVariables1, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      LLOAD lLOAD0 = new LLOAD(757);
      D2F d2F0 = new D2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2F(d2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2F constraint violated: The value at the stack top is not of type 'double', but of type 'wD,8zr_{>+xf'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("f");
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType1 = new ObjectType("f");
      OperandStack operandStack0 = new OperandStack(2498, objectType0);
      operandStack0.getClone();
      OperandStack operandStack1 = new OperandStack(2, objectType0);
      DLOAD dLOAD0 = new DLOAD(2498);
      operandStack0.getClone();
      LocalVariables localVariables0 = new LocalVariables(214);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      LREM lREM0 = new LREM();
      INVOKESTATIC iNVOKESTATIC0 = new INVOKESTATIC(2);
      instConstraintVisitor0.visitInvokeInstruction(iNVOKESTATIC0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2D((F2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(776);
      ObjectType objectType0 = ObjectType.getInstance("wD,8zr_{>uxf");
      OperandStack operandStack0 = new OperandStack(776, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack1.equals(instConstraintVisitor0);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      OperandStack operandStack2 = new OperandStack(776, uninitializedObjectType0.STRINGBUFFER);
      LocalVariables localVariables1 = new LocalVariables(1233);
      ConstantClass constantClass0 = new ConstantClass(947);
      frame0.clone();
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      DREM dREM0 = new DREM();
      ATHROW aTHROW0 = new ATHROW();
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X1(dUP2_X1_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LADD lADD0 = new LADD();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      SIPUSH sIPUSH0 = new SIPUSH((short)2190);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      DLOAD dLOAD0 = new DLOAD((short)2190);
      LocalVariables localVariables0 = new LocalVariables(2);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      frame0.toString();
      FASTORE fASTORE0 = new FASTORE();
      frame0.equals(fASTORE0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      IRETURN iRETURN0 = new IRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2((DUP2) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(776);
      ObjectType objectType0 = new ObjectType("wD,8zr_{>uxf");
      OperandStack operandStack0 = new OperandStack(776, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Frame.getThis();
      Boolean boolean0 = Boolean.TRUE;
      instConstraintVisitor0.setFrame(frame0);
      IAND iAND0 = new IAND();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      LALOAD lALOAD0 = new LALOAD();
      LALOAD lALOAD1 = new LALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLALOAD(lALOAD1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LALOAD constraint violated: The 'index' is not of type int but of type wD,8zr_{>uxf.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("U^Yu*88<");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      operandStack0.getClone();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      frame1.clone();
      instConstraintVisitor0.setFrame(frame1);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      D2F d2F0 = new D2F();
      DNEG dNEG0 = new DNEG();
      DNEG dNEG1 = new DNEG();
      DREM dREM0 = new DREM();
      dREM0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDREM(dREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LU^Yu*88<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LDC2_W lDC2_W0 = new LDC2_W(776);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#@G;c");
      LocalVariables localVariables0 = new LocalVariables(776);
      ObjectType objectType0 = ObjectType.getInstance("P%$/=H187(]u/-7-");
      OperandStack operandStack0 = new OperandStack(776, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack1.pop((-1424));
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = new IRETURN();
      FASTORE fASTORE0 = new FASTORE();
      byte[] byteArray0 = new byte[3];
      SIPUSH sIPUSH0 = new SIPUSH((byte)46);
      instConstraintVisitor0.visitSIPUSH(sIPUSH0);
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      assertEquals((short)194, mONITORENTER0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("U^Yu*88<");
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.copy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(2277);
      OperandStack operandStack0 = new OperandStack(2277, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IASTORE iASTORE0 = new IASTORE();
      INEG iNEG0 = new INEG();
      L2I l2I0 = new L2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2I(l2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LU^Yu*88<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(776);
      ObjectType objectType0 = new ObjectType("wD,8zr_{>uxf");
      OperandStack operandStack0 = new OperandStack(776, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      Boolean boolean0 = Boolean.TRUE;
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = new IRETURN();
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      frame0.getClone();
      CHECKCAST cHECKCAST0 = new CHECKCAST(48);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCHECKCAST(cHECKCAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("U^Yu*88<");
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      OperandStack operandStack0 = new OperandStack(1656, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1947);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.clone();
      localVariables0.getClone();
      localVariables0.merge(localVariables0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      IRETURN iRETURN1 = (IRETURN)InstructionConstants.IRETURN;
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      ISHR iSHR0 = new ISHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHR(iSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LU^Yu*88<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType(";c#8%O[");
      LocalVariables localVariables0 = new LocalVariables(69);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.set(2, objectType0);
      OperandStack operandStack0 = new OperandStack(2204, objectType0);
      localVariables1.toString();
      Frame.getThis();
      operandStack0.initializeObject((UninitializedObjectType) null);
      objectType0.isAssignmentCompatibleWith((Type) null);
      operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLCMP((LCMP) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("c# Iz6^Pi");
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.copy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(2277);
      OperandStack operandStack0 = new OperandStack(2277, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IASTORE iASTORE0 = new IASTORE();
      IRETURN iRETURN0 = new IRETURN();
      OperandStack operandStack1 = new OperandStack(6, objectType0);
      OperandStack operandStack2 = new OperandStack(2277);
      I2D i2D0 = new I2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2D(i2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2D constraint violated: The value at the stack top is not of type 'int', but of type 'c# Iz6^Pi'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LASTORE lASTORE0 = new LASTORE();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(46);
      ObjectType objectType0 = new ObjectType("Vhp3vKBIDs/+8y,qr");
      OperandStack operandStack0 = new OperandStack(46, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      LocalVariables localVariables1 = new LocalVariables(46);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      CHECKCAST cHECKCAST0 = new CHECKCAST(3404);
      DCMPL dCMPL0 = new DCMPL();
      CHECKCAST cHECKCAST1 = new CHECKCAST(1);
      DCMPL dCMPL1 = new DCMPL();
      ALOAD aLOAD0 = new ALOAD(2);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLoadInstruction(aLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ALOAD constraint violated: Read-Access on local variable 2 with unknown content.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LADD lADD0 = new LADD();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      SIPUSH sIPUSH0 = new SIPUSH((short)2190);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack((short)2190, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      DLOAD dLOAD0 = new DLOAD((short)2190);
      dLOAD0.copy();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      operandStack1.equals(dLOAD0);
      LocalVariables localVariables0 = new LocalVariables((short)2190);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      DUP dUP0 = new DUP();
      instConstraintVisitor0.visitDUP(dUP0);
      LSHR lSHR0 = new LSHR();
      LSHR lSHR1 = new LSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHR(lSHR1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHR constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(776);
      ObjectType objectType0 = ObjectType.getInstance("wD,8zr_{>uxf");
      OperandStack operandStack0 = new OperandStack(776, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Class<DUP_X1> class0 = DUP_X1.class;
      Type.getType(class0);
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FREM fREM0 = new FREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFREM(fREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FREM constraint violated: The value at the stack top is not of type 'float', but of type 'wD,8zr_{>uxf'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("U^Yu*88<");
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.copy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(2277);
      OperandStack operandStack0 = new OperandStack(2277, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IASTORE iASTORE0 = new IASTORE();
      INEG iNEG0 = new INEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINEG(iNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LU^Yu*88<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LREM lREM0 = new LREM();
      ObjectType objectType0 = new ObjectType("~_");
      OperandStack operandStack0 = new OperandStack(13, objectType0);
      LocalVariables localVariables0 = new LocalVariables(13);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      OperandStack operandStack1 = new OperandStack(872);
      localVariables0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      GETFIELD gETFIELD0 = new GETFIELD(13);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIUSHR((IUSHR) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LREM lREM0 = new LREM();
      ObjectType objectType0 = new ObjectType("~_");
      OperandStack operandStack0 = new OperandStack(13, objectType0);
      LocalVariables localVariables0 = new LocalVariables(13);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      OperandStack operandStack1 = new OperandStack(872);
      localVariables0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      GETFIELD gETFIELD0 = new GETFIELD(13);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitGETFIELD(gETFIELD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = 763;
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(763);
      LocalVariables localVariables1 = new LocalVariables(763);
      localVariables1.merge(localVariables0);
      ObjectType objectType0 = new ObjectType("@[(3]0;QI@z\"");
      OperandStack operandStack0 = new OperandStack(763, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack1.merge(operandStack0);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      F2I f2I0 = new F2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2I(f2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2I constraint violated: The value at the stack top is not of type 'float', but of type '@[(3]0'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = ObjectType.getInstance("U^Yu*88<");
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 2277;
      LocalVariables localVariables0 = new LocalVariables(2277);
      OperandStack operandStack0 = new OperandStack(2277, objectType0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      operandStack0.initializeObject(uninitializedObjectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean0 = new Boolean("U^Yu*88<");
      operandStack0.initializeObject(uninitializedObjectType0);
      IRETURN iRETURN0 = new IRETURN();
      localVariables0.getClone();
      int int1 = 1422;
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(1422);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LSUB lSUB0 = new LSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSUB(lSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LU^Yu*88<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LREM lREM0 = new LREM();
      ObjectType objectType0 = ObjectType.getInstance("~_");
      OperandStack operandStack0 = new OperandStack(13, objectType0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      operandStack0.equals(fileSystemHandling0);
      LocalVariables localVariables0 = new LocalVariables(13);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      OperandStack operandStack1 = new OperandStack(872, objectType0);
      OperandStack operandStack2 = new OperandStack(872, objectType0);
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = new LocalVariables(13);
      localVariables1.getClone();
      localVariables2.merge(localVariables1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      LDC lDC0 = new LDC(872);
      DADD dADD0 = new DADD();
      DSTORE dSTORE0 = new DSTORE(872);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(dSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSTORE constraint violated: Stack top type and STOREing Instruction type mismatch: Stack top: '~_'; Instruction type: 'double'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LREM lREM0 = new LREM();
      ObjectType objectType0 = ObjectType.getInstance("~_");
      OperandStack operandStack0 = new OperandStack(13, objectType0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      operandStack0.equals(fileSystemHandling0);
      LocalVariables localVariables0 = new LocalVariables(13);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      OperandStack operandStack1 = new OperandStack(872, objectType0);
      OperandStack operandStack2 = new OperandStack(872, objectType0);
      operandStack1.getClone();
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = localVariables0.getClone();
      localVariables2.merge(localVariables1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      LDC lDC0 = new LDC(785);
      DADD dADD0 = new DADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDADD(dADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DADD constraint violated: The value at the stack top is not of type 'double', but of type '~_'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LDC2_W lDC2_W0 = new LDC2_W(776);
      AASTORE aASTORE0 = new AASTORE();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(1812);
      ObjectType objectType0 = ObjectType.getInstance("wD,8zr_{>+xf");
      OperandStack operandStack0 = new OperandStack(776, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      frame0.toString();
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      FRETURN fRETURN0 = new FRETURN();
      int int0 = Double.BYTES;
      IRETURN iRETURN1 = (IRETURN)InstructionConstants.IRETURN;
      NEWARRAY nEWARRAY0 = new NEWARRAY(objectType0.BYTE);
      ALOAD aLOAD0 = (ALOAD)InstructionConstants.ALOAD_1;
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      MONITOREXIT mONITOREXIT1 = new MONITOREXIT();
      ARETURN aRETURN0 = new ARETURN();
      IRETURN iRETURN2 = new IRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIRETURN(iRETURN1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IRETURN constraint violated: The value at the stack top is not of type 'int', but of type 'wD,8zr_{>+xf'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(781);
      ObjectType objectType0 = ObjectType.getInstance("wD,8zr_{>uxf");
      OperandStack operandStack0 = new OperandStack(781, objectType0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      Boolean boolean0 = new Boolean("wD,8zr_{>uxf");
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      CHECKCAST cHECKCAST0 = new CHECKCAST(781);
      FSUB fSUB0 = new FSUB();
      IASTORE iASTORE0 = new IASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIASTORE(iASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IASTORE constraint violated: The value at the stack top is not of type 'int', but of type 'wD,8zr_{>uxf'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(776);
      ObjectType objectType0 = new ObjectType("wD,8zr_{>uxf");
      OperandStack operandStack0 = new OperandStack(776, objectType0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      Frame.getThis();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wD,8zr_{>uxf");
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X2((DUP2_X2) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(776);
      ObjectType objectType0 = ObjectType.getInstance("wD,8zr_{>uxf");
      OperandStack operandStack0 = new OperandStack(776, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      instConstraintVisitor0.visitStackConsumer(iRETURN0);
      ASTORE aSTORE0 = new ASTORE(2894);
      instConstraintVisitor0.visitASTORE(aSTORE0);
      SWAP sWAP0 = new SWAP();
      I2C i2C0 = new I2C();
      LAND lAND0 = new LAND();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLAND(lAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LAND constraint violated: The value at the stack top is not of type 'long', but of type 'wD,8zr_{>uxf'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      AASTORE aASTORE0 = new AASTORE();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables((byte)0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = ObjectType.getInstance("H");
      OperandStack operandStack0 = new OperandStack(257, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      frame0.toString();
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      FRETURN fRETURN0 = new FRETURN();
      int int0 = Double.BYTES;
      IRETURN iRETURN1 = (IRETURN)InstructionConstants.IRETURN;
      NEWARRAY nEWARRAY0 = new NEWARRAY(objectType0.INT);
      ALOAD aLOAD0 = (ALOAD)InstructionConstants.ALOAD_1;
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      MONITOREXIT mONITOREXIT1 = new MONITOREXIT();
      ARETURN aRETURN0 = new ARETURN();
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      ATHROW aTHROW0 = new ATHROW();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitATHROW(aTHROW0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Missing class: java.lang.ClassNotFoundException: Exception while looking for class H: org.evosuite.runtime.mock.java.lang.MockThrowable: Couldn't find: H.class
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RET rET0 = new RET(760);
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.copy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(760);
      ObjectType objectType0 = ObjectType.getInstance("wD,8zr_{>+xf");
      OperandStack operandStack0 = new OperandStack(760, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      frame0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      operandStack1.initializeObject(uninitializedObjectType0);
      Frame frame1 = new Frame(760, 760);
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      I2B i2B0 = new I2B();
      I2B i2B1 = new I2B();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2B(i2B0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2B constraint violated: The value at the stack top is not of type 'int', but of type 'wD,8zr_{>+xf'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("U^Yu*88<");
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.copy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(2277);
      OperandStack operandStack0 = new OperandStack(2277, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      IASTORE iASTORE0 = new IASTORE();
      INEG iNEG0 = new INEG();
      LRETURN lRETURN0 = new LRETURN();
      lRETURN0.toString(true);
      ConstantLong constantLong0 = new ConstantLong(2812L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitARRAYLENGTH(aRRAYLENGTH0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LU^Yu*88<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LDC2_W lDC2_W0 = new LDC2_W(763);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RET rET0 = new RET(763);
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(763);
      ObjectType objectType0 = ObjectType.getInstance("wD,8zr_{>+xf");
      localVariables0.set(2, objectType0);
      OperandStack operandStack0 = new OperandStack(763, objectType0);
      constantPoolGen0.toString();
      LocalVariables localVariables1 = localVariables0.getClone();
      operandStack0.merge(operandStack0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      LLOAD lLOAD0 = new LLOAD(763);
      instConstraintVisitor0.visitLLOAD(lLOAD0);
      D2F d2F0 = new D2F();
      DLOAD dLOAD0 = new DLOAD(2);
      instConstraintVisitor0.visitDLOAD(dLOAD0);
      ISHL iSHL0 = new ISHL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHL(iSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHL constraint violated: The value at the stack top is not of type 'int', but of type 'wD,8zr_{>+xf'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LDC2_W lDC2_W0 = new LDC2_W(763);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(1828);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.merge(localVariables1);
      ObjectType objectType0 = new ObjectType("wD,8zr_{>+xf");
      OperandStack operandStack0 = new OperandStack(763, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      ARETURN aRETURN0 = new ARETURN();
      instConstraintVisitor0.visitARETURN(aRETURN0);
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      LCMP lCMP0 = new LCMP();
      LCMP lCMP1 = new LCMP();
      LCMP lCMP2 = new LCMP();
      LSHL lSHL0 = new LSHL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHL(lSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHL constraint violated: The value at the stack top is not of type 'int', but of type 'wD,8zr_{>+xf'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      instructionList0.copy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(1947);
      ObjectType objectType0 = ObjectType.getInstance("The value at the stack top is not of type 'float', but of type '");
      OperandStack operandStack0 = new OperandStack(1947, objectType0);
      operandStack0.getClone();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame frame2 = new Frame(1947, 1947);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      IASTORE iASTORE0 = new IASTORE();
      INEG iNEG0 = new INEG();
      LADD lADD0 = new LADD();
      LDC2_W lDC2_W0 = new LDC2_W(1947);
      IFLT iFLT0 = new IFLT((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLT(iFLT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFLT constraint violated: The value at the stack top is not of type 'int', but of type 'The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(776);
      ObjectType objectType0 = ObjectType.getInstance("wD,8zr_{>uxf");
      OperandStack operandStack0 = new OperandStack(776, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      Boolean boolean0 = new Boolean("wD,8zr_{>uxf");
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      IRETURN iRETURN1 = (IRETURN)InstructionConstants.IRETURN;
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      Frame frame1 = new Frame(776, 776);
      ISUB iSUB0 = new ISUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISUB(iSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISUB constraint violated: The value at the stack top is not of type 'int', but of type 'wD,8zr_{>uxf'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LREM lREM0 = new LREM();
      ObjectType objectType0 = ObjectType.getInstance("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(24);
      ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(1, objectType0);
      OperandStack operandStack1 = new OperandStack(24);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      F2L f2L0 = new F2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2L(f2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2L constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      instructionList0.copy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(2312);
      ObjectType objectType0 = ObjectType.getInstance("The value at the stack top is not of type 'float', but of type '");
      OperandStack operandStack0 = new OperandStack(2312, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      operandStack1.initializeObject(uninitializedObjectType0);
      Frame frame2 = new Frame(2312, 2312);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      IASTORE iASTORE0 = new IASTORE();
      L2F l2F0 = new L2F();
      I2C i2C0 = new I2C();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2C(i2C0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2C constraint violated: The value at the stack top is not of type 'int', but of type 'The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LADD lADD0 = new LADD();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      SIPUSH sIPUSH0 = new SIPUSH((short)2190);
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack((short)2190, objectType0);
      RET rET0 = new RET((short)2190);
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.copy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(1894);
      ObjectType objectType1 = ObjectType.getInstance("");
      OperandStack operandStack1 = new OperandStack(123, objectType1);
      OperandStack operandStack2 = operandStack0.getClone();
      LocalVariables localVariables1 = new LocalVariables(123);
      Frame frame0 = new Frame(localVariables1, operandStack2);
      frame0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType1);
      operandStack1.initializeObject(uninitializedObjectType0);
      Frame frame1 = new Frame(1894, 123);
      instConstraintVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIDIV((IDIV) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("c# Iz6^Pi");
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.copy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 2277;
      LocalVariables localVariables0 = new LocalVariables(2277);
      OperandStack operandStack0 = new OperandStack(2277, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IASTORE iASTORE0 = new IASTORE();
      IRETURN iRETURN0 = new IRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPL((FCMPL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectType.getInstance("U^Yu*88<");
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.copy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(2312);
      ObjectType objectType0 = ObjectType.getInstance("The value at the stack top is not of type 'float', but of type '");
      OperandStack operandStack0 = new OperandStack(2312, objectType0);
      operandStack0.getClone();
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame frame2 = new Frame(2312, 2312);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      IASTORE iASTORE0 = new IASTORE();
      LDIV lDIV0 = new LDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDIV(lDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LDIV constraint violated: The value at the stack top is not of type 'long', but of type 'The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("U^Yu*88<");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "U^Yu*88<");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      localVariables0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      operandStack0.getClone();
      frame1.clone();
      instConstraintVisitor0.setFrame(frame1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 5;
      LASTORE lASTORE0 = new LASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLASTORE(lASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LU^Yu*88<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("U^Yu*88<");
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstructionList instructionList0 = new InstructionList();
      Boolean boolean0 = new Boolean("U^Yu*88<");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(2261);
      OperandStack operandStack0 = new OperandStack(2261, objectType0);
      OperandStack operandStack1 = new OperandStack(2261, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      ARETURN aRETURN0 = new ARETURN();
      Type type0 = aRETURN0.getType(constantPoolGen0);
      operandStack0.push(type0);
      Frame frame1 = frame0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      INEG iNEG0 = new INEG();
      LRETURN lRETURN0 = new LRETURN();
      IASTORE iASTORE0 = new IASTORE();
      L2D l2D0 = new L2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2D(l2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2D constraint violated: The value at the stack top is not of type 'long', but of type 'java.lang.Object'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LADD lADD0 = new LADD();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      SIPUSH sIPUSH0 = new SIPUSH((short)2190);
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack((short)2224, objectType0);
      operandStack0.getClone();
      operandStack0.getClone();
      LocalVariables localVariables0 = new LocalVariables((short)2224);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      RETURN rETURN0 = new RETURN();
      localVariables0.set(930, objectType0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      INVOKESPECIAL iNVOKESPECIAL0 = new INVOKESPECIAL((short)2190);
      IMUL iMUL0 = new IMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMUL(iMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IMUL constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(1824);
      ObjectType objectType0 = ObjectType.getInstance(">");
      OperandStack operandStack0 = new OperandStack(1824, objectType0);
      LocalVariables localVariables1 = new LocalVariables(372);
      ObjectType objectType1 = new ObjectType(">");
      OperandStack operandStack1 = new OperandStack(67, objectType0);
      OperandStack operandStack2 = operandStack0.getClone();
      operandStack2.getClone();
      ALOAD aLOAD0 = new ALOAD(372);
      Frame frame0 = new Frame(localVariables0, operandStack2);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(3014);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitANEWARRAY(aNEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ANEWARRAY constraint violated: The 'count' at the stack top is not of type 'int' but of type '>'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LREM lREM0 = new LREM();
      ObjectType objectType0 = ObjectType.getInstance("");
      LocalVariables localVariables0 = new LocalVariables(2);
      OperandStack operandStack0 = new OperandStack(872, objectType0);
      OperandStack operandStack1 = new OperandStack(872, objectType0);
      operandStack0.getClone();
      localVariables0.getClone();
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      LREM lREM1 = new LREM();
      lREM0.produceStack((ConstantPoolGen) null);
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      FDIV fDIV0 = new FDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFDIV(fDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FDIV constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LDC2_W lDC2_W0 = new LDC2_W(757);
      RET rET0 = new RET(757);
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(757);
      ObjectType objectType0 = ObjectType.getInstance("wD,8zr_{>+xf");
      constantPoolGen0.lookupNameAndType("wD,8zr_{>+xf", "wD,8zr_{>+xf");
      constantPoolGen0.addDouble(757);
      localVariables0.set(1, objectType0);
      OperandStack operandStack0 = new OperandStack(757, objectType0);
      String string0 = Constants.ILLEGAL_OPCODE;
      OperandStack operandStack1 = new OperandStack(757, objectType0);
      operandStack1.clone();
      LocalVariables localVariables1 = new LocalVariables(757);
      operandStack1.merge(operandStack0);
      Frame frame0 = new Frame(localVariables1, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      LLOAD lLOAD0 = new LLOAD(757);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2I((D2I) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AASTORE aASTORE0 = new AASTORE();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables((byte)0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("wD,8zr_{>+xf");
      OperandStack operandStack0 = new OperandStack(18, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FNEG fNEG0 = new FNEG();
      fNEG0.toString(false);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFNEG(fNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FNEG constraint violated: The value at the stack top is not of type 'float', but of type 'wD,8zr_{>+xf'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("U^Yu*88<");
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      OperandStack operandStack0 = new OperandStack(1656, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1947);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.clone();
      localVariables0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      instConstraintVisitor0.setFrame(frame0);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      EvoSuiteFile evoSuiteFile0 = null;
      DRETURN dRETURN0 = new DRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDRETURN(dRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LU^Yu*88<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("U^Yu*88<");
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.copy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(2234);
      OperandStack operandStack0 = new OperandStack(2234, objectType0);
      OperandStack operandStack1 = new OperandStack(2234);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      frame1.equals(operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      FCMPG fCMPG0 = new FCMPG();
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFMUL((FMUL) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LU^Yu*88<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LADD lADD0 = new LADD();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      SIPUSH sIPUSH0 = new SIPUSH((short)2190);
      ObjectType objectType0 = new ObjectType("f");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      OperandStack operandStack1 = new OperandStack(2, objectType0);
      LocalVariables localVariables0 = new LocalVariables((short)2190);
      ConstantClass constantClass0 = new ConstantClass(947);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DREM dREM0 = new DREM();
      ATHROW aTHROW0 = new ATHROW();
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLT(iF_ICMPLT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPLT constraint violated: The value at the stack top is not of type 'int', but of type 'f'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstructionList instructionList0 = new InstructionList();
      InstructionList instructionList1 = instructionList0.copy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(763);
      ObjectType objectType0 = ObjectType.getInstance("wD,8zr_{>+xf");
      LREM lREM0 = new LREM();
      lREM0.produceStack((ConstantPoolGen) null);
      OperandStack operandStack0 = new OperandStack(763, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      ALOAD aLOAD0 = (ALOAD)InstructionConstants.ALOAD_1;
      InstructionHandle instructionHandle0 = instructionList1.insert((Instruction) aLOAD0);
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (Instruction) aCONST_NULL0);
      IFGE iFGE0 = new IFGE(instructionHandle1);
      IFGE iFGE1 = new IFGE(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGE(iFGE1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFGE constraint violated: The value at the stack top is not of type 'int', but of type 'wD,8zr_{>+xf'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LADD lADD0 = new LADD();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      SIPUSH sIPUSH0 = new SIPUSH((short)2190);
      ObjectType objectType0 = new ObjectType("f");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      operandStack0.getClone();
      operandStack0.getClone();
      operandStack0.clone();
      LocalVariables localVariables0 = new LocalVariables(2);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      RETURN rETURN0 = new RETURN();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CHECKCAST cHECKCAST0 = new CHECKCAST((short)2190);
      FSUB fSUB0 = new FSUB();
      IADD iADD0 = new IADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIADD(iADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IADD constraint violated: The value at the stack top is not of type 'int', but of type 'f'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(1824);
      ObjectType objectType0 = new ObjectType(">");
      OperandStack operandStack0 = new OperandStack(1824, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      OperandStack operandStack2 = operandStack1.getClone();
      ALOAD aLOAD0 = new ALOAD(367);
      Frame frame0 = new Frame(localVariables0, operandStack2);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      POP pOP0 = new POP();
      FMUL fMUL0 = new FMUL();
      ICONST iCONST0 = new ICONST(2);
      IOR iOR0 = new IOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIOR(iOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IOR constraint violated: The value at the stack top is not of type 'int', but of type '>'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = 776;
      EvoSuiteFile evoSuiteFile0 = null;
      LocalVariables localVariables0 = new LocalVariables(776);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectType objectType0 = new ObjectType("wD,8zr_{>nuxf");
      OperandStack operandStack0 = new OperandStack(776, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame(776, 776);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      frame1.equals(localVariables0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      UninitializedObjectType uninitializedObjectType1 = Frame.getThis();
      Frame.setThis(uninitializedObjectType1);
      Boolean boolean0 = new Boolean(false);
      instConstraintVisitor0.setFrame(frame1);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      InstructionList instructionList0 = new InstructionList(iRETURN0);
      InstructionList instructionList1 = instructionList0.copy();
      InstructionHandle instructionHandle0 = instructionList1.insert((Instruction) iRETURN0, (Instruction) iRETURN0);
      instructionList0.append((Instruction) iRETURN0, instructionList1);
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPNE(iF_ICMPNE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPNE constraint violated: The value at the stack top is not of type 'int', but of type 'wD,8zr_{>nuxf'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LDC2_W lDC2_W0 = new LDC2_W(760);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)3;
      RET rET0 = new RET(760);
      InstructionList instructionList0 = new InstructionList();
      Frame frame0 = new Frame((byte)45, 0);
      instConstraintVisitor0.setFrame(frame0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      I2D i2D0 = (I2D)InstructionConstants.I2D;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackProducer(lDC2_W0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LDC2_W constraint violated: Cannot produce 2 stack slots: only 0 free stack slot(s) left.
         // Stack:
         // Slots used: 0 MaxStack: 0.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LREM lREM0 = new LREM();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectType objectType0 = ObjectType.getInstance("");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(17);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      LocalVariables localVariables1 = new LocalVariables(17);
      ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(17, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = new IRETURN();
      LocalVariables localVariables2 = new LocalVariables(98);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DCMPL dCMPL0 = new DCMPL();
      InstructionList instructionList0 = new InstructionList();
      DCMPL dCMPL1 = new DCMPL();
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      IINC iINC0 = new IINC(857, 17);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(770);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("wD,8zr_{>nuxf");
      OperandStack operandStack0 = new OperandStack(770, objectType0);
      localVariables0.set(215, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      boolean boolean0 = new Boolean(true);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      Frame.setThis((UninitializedObjectType) null);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      L2I l2I0 = new L2I();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      dataOutputStream0.close();
      DMUL dMUL0 = new DMUL();
      dMUL0.dump(dataOutputStream0);
      dMUL0.copy();
      DMUL dMUL1 = new DMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDMUL(dMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DMUL constraint violated: The value at the stack top is not of type 'double', but of type 'wD,8zr_{>nuxf'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("U^Yu*88<");
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstructionList instructionList0 = new InstructionList();
      Boolean boolean0 = new Boolean("U^Yu*88<");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(2261);
      OperandStack operandStack0 = new OperandStack(2261, objectType0);
      OperandStack operandStack1 = new OperandStack(2261, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      ARETURN aRETURN0 = new ARETURN();
      Type type0 = aRETURN0.getType(constantPoolGen0);
      operandStack0.push(type0);
      Frame frame1 = frame0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      IASTORE iASTORE0 = new IASTORE();
      INEG iNEG0 = new INEG();
      LRETURN lRETURN0 = new LRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOR((LOR) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(769);
      ObjectType objectType0 = ObjectType.getInstance("wD,8zr_{>uxf");
      OperandStack operandStack0 = new OperandStack(769, objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      Frame.setThis((UninitializedObjectType) null);
      frame0.toString();
      Boolean boolean0 = new Boolean("wD,8zr_{>uxf");
      frame0.equals(instConstraintVisitor0);
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      InstructionList instructionList0 = new InstructionList();
      Frame frame1 = frame0.getClone();
      frame1.getClone();
      UninitializedObjectType uninitializedObjectType1 = new UninitializedObjectType(uninitializedObjectType0.STRING);
      Frame.setThis(uninitializedObjectType1);
      DADD dADD0 = new DADD();
      DUP dUP0 = new DUP();
      DUP dUP1 = new DUP();
      DUP dUP2 = new DUP();
      DUP dUP3 = new DUP();
      instConstraintVisitor0.visitDUP(dUP3);
      DLOAD dLOAD0 = new DLOAD(1280);
      instConstraintVisitor0.visitDLOAD(dLOAD0);
      assertEquals(1280, dLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LDC2_W lDC2_W0 = new LDC2_W(776);
      LDC2_W lDC2_W1 = new LDC2_W(776);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      AASTORE aASTORE0 = new AASTORE();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(776);
      ObjectType objectType0 = ObjectType.getInstance("P%H!=H187(]u$/-7=");
      OperandStack operandStack0 = new OperandStack(776, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = new IRETURN();
      LocalVariables localVariables1 = new LocalVariables(776);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DCMPL dCMPL0 = new DCMPL();
      InstructionList instructionList0 = new InstructionList();
      DCMPL dCMPL1 = new DCMPL();
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      IINC iINC0 = new IINC(0, 857);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not of type int but of type <unknown object>.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("f");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      OperandStack operandStack1 = new OperandStack(2, objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean0 = new Boolean(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DREM dREM0 = new DREM();
      operandStack0.merge(operandStack1);
      operandStack1.merge(operandStack0);
      LocalVariables localVariables0 = new LocalVariables(2);
      Class<D2I>[] classArray0 = (Class<D2I>[]) Array.newInstance(Class.class, 7);
      Class<D2I> class0 = D2I.class;
      classArray0[0] = class0;
      Class<D2I> class1 = D2I.class;
      classArray0[1] = class1;
      Class<D2I> class2 = D2I.class;
      classArray0[2] = class2;
      Class<D2I> class3 = D2I.class;
      classArray0[3] = class3;
      localVariables0.getClone();
      Class<D2I> class4 = D2I.class;
      classArray0[4] = class4;
      Class<D2I> class5 = D2I.class;
      classArray0[5] = class5;
      Class<D2I> class6 = D2I.class;
      classArray0[6] = class6;
      Type.getTypes(classArray0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      I2S i2S0 = new I2S();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2S(i2S0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2S constraint violated: The value at the stack top is not of type 'int', but of type 'f'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(763);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.merge(localVariables0);
      ObjectType objectType0 = new ObjectType("@[(3]0;QI@z\"");
      OperandStack operandStack0 = new OperandStack(763, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack1.merge(operandStack0);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      Frame.getThis();
      operandStack0.initializeObject((UninitializedObjectType) null);
      IRETURN iRETURN1 = new IRETURN();
      localVariables1.getClone();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(1422);
      D2L d2L0 = new D2L();
      d2L0.copy();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2L(d2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2L constraint violated: The value at the stack top is not of type 'double', but of type '@[(3]0'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(770);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectType objectType0 = new ObjectType("wD,8zr_{>nuxf");
      OperandStack operandStack0 = new OperandStack(770, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame(770, 770);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      frame1.equals(localVariables0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      UninitializedObjectType uninitializedObjectType1 = Frame.getThis();
      Class<FCONST> class0 = FCONST.class;
      Type.getType(class0);
      Frame.setThis(uninitializedObjectType1);
      Boolean boolean0 = new Boolean(false);
      instConstraintVisitor0.setFrame(frame1);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      InstructionList instructionList0 = new InstructionList(iRETURN0);
      instructionList0.copy();
      LocalVariables localVariables1 = new LocalVariables(770);
      Frame frame2 = new Frame(localVariables1, operandStack0);
      LAND lAND0 = new LAND();
      FSTORE fSTORE0 = new FSTORE(326);
      FSTORE fSTORE1 = new FSTORE(326);
      ASTORE aSTORE0 = new ASTORE(1798);
      instConstraintVisitor0.visitStoreInstruction(aSTORE0);
      assertEquals((short)58, aSTORE0.getCanonicalTag());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = 776;
      LocalVariables localVariables0 = new LocalVariables(776);
      ObjectType objectType0 = ObjectType.getInstance("wD,8zr_{>uxf");
      OperandStack operandStack0 = new OperandStack(776, objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      I2D i2D0 = new I2D();
      FCMPG fCMPG0 = new FCMPG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPG(fCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPG constraint violated: The value at the stack top is not of type 'float', but of type 'wD,8zr_{>uxf'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LREM lREM0 = new LREM();
      ObjectType objectType0 = ObjectType.getInstance("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(24);
      ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(1, objectType0);
      OperandStack operandStack1 = new OperandStack(24);
      localVariables0.getClone();
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "re");
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(1, (short)2277);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMULTIANEWARRAY(mULTIANEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction MULTIANEWARRAY constraint violated: The '2277' upper stack types should be 'int' but aren't.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LREM lREM0 = new LREM();
      ObjectType objectType0 = ObjectType.getInstance("");
      int int0 = 13;
      OperandStack operandStack0 = new OperandStack(13, objectType0);
      LocalVariables localVariables0 = new LocalVariables(13);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack1.clone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      operandStack1.initializeObject(uninitializedObjectType0);
      frame0.getClone();
      OperandStack operandStack2 = new OperandStack(872);
      localVariables0.getClone();
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      InstructionList instructionList0 = new InstructionList();
      InstructionList instructionList1 = instructionList0.copy();
      InstructionHandle instructionHandle0 = instructionList1.insert((Instruction) lREM0);
      IFNE iFNE0 = new IFNE(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFNE(iFNE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFNE constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(776);
      ObjectType objectType0 = ObjectType.getInstance("wD,8zr_{>uxf");
      OperandStack operandStack0 = new OperandStack(776, objectType0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      Frame.getThis();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wD,8zr_{>uxf");
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      Frame frame1 = new Frame(localVariables0, operandStack1);
      DUP_X1 dUP_X1_0 = new DUP_X1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP_X1(dUP_X1_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(770);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectType objectType0 = new ObjectType("wD,8zr_{>nuxf");
      OperandStack operandStack0 = new OperandStack(770, objectType0);
      localVariables0.set(215, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame(770, 770);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      frame1.equals(localVariables0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      UninitializedObjectType uninitializedObjectType1 = Frame.getThis();
      Frame.setThis(uninitializedObjectType1);
      Boolean boolean0 = new Boolean(false);
      instConstraintVisitor0.setFrame(frame1);
      IRETURN iRETURN0 = new IRETURN();
      InstructionList instructionList0 = new InstructionList();
      LRETURN lRETURN0 = new LRETURN();
      lRETURN0.toString(false);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2F((I2F) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "o5_Koc-5{[plRyrc");
      LDC2_W lDC2_W0 = new LDC2_W(776);
      LDC2_W lDC2_W1 = new LDC2_W(776);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "o5_Koc-5{[plRyrc");
      AASTORE aASTORE0 = new AASTORE();
      LocalVariables localVariables0 = new LocalVariables(776);
      ObjectType objectType0 = ObjectType.getInstance("o5_Koc-5{[plRyrc");
      OperandStack operandStack0 = new OperandStack(776, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack1.getClone();
      localVariables0.getClone();
      Frame frame0 = new Frame(776, 776);
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = new IRETURN();
      LocalVariables localVariables1 = new LocalVariables(776);
      ASTORE aSTORE0 = new ASTORE(776);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(aSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ASTORE constraint violated: Cannot STORE: Stack to read from is empty.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(740);
      ObjectType objectType0 = new ObjectType("wD,8zr_{>nuxf");
      OperandStack operandStack0 = new OperandStack(740, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame(740, 740);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      frame1.equals(localVariables0);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame2 = new Frame(740, 249);
      frame2.getClone();
      localVariables1.getClone();
      Frame frame3 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame3);
      ARETURN aRETURN0 = new ARETURN();
      instConstraintVisitor0.visitARETURN((ARETURN) null);
      InstructionList instructionList0 = new InstructionList();
      DCMPG dCMPG0 = new DCMPG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPG(dCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPG constraint violated: The value at the stack top is not of type 'double', but of type 'wD,8zr_{>nuxf'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("U^Yu*88<");
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(46);
      OperandStack operandStack0 = new OperandStack(46, objectType0);
      Frame.getThis();
      operandStack0.initializeObject((UninitializedObjectType) null);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IASTORE iASTORE0 = new IASTORE();
      DUP_X1 dUP_X1_0 = new DUP_X1();
      operandStack0.initializeObject((UninitializedObjectType) null);
      Frame.setThis((UninitializedObjectType) null);
      IRETURN iRETURN0 = new IRETURN();
      short short0 = Constants.ACC_VOLATILE;
      CHECKCAST cHECKCAST0 = new CHECKCAST((short)64);
      FSUB fSUB0 = new FSUB();
      IXOR iXOR0 = new IXOR();
      IXOR iXOR1 = new IXOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIXOR(iXOR1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LU^Yu*88<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      instructionList0.copy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(1947);
      ObjectType objectType0 = ObjectType.getInstance("Invalid number of dimensions: ");
      ObjectType objectType1 = ObjectType.getInstance("Invalid number of dimensions: ");
      OperandStack operandStack0 = new OperandStack(1947, objectType0);
      OperandStack operandStack1 = new OperandStack(1947, objectType1);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      operandStack1.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FLOAD fLOAD0 = new FLOAD(98);
      DMUL dMUL0 = new DMUL();
      L2I l2I0 = new L2I();
      l2I0.copy();
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(3);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINSTANCEOF(iNSTANCEOF0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("U^Yu*88<");
      ObjectType objectType1 = new ObjectType("U^Yu*88<");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SIPUSH sIPUSH0 = new SIPUSH((short)587);
      ObjectType objectType2 = new ObjectType("U^Yu*88<");
      OperandStack operandStack0 = new OperandStack((short)46, objectType0);
      LocalVariables localVariables0 = new LocalVariables((short)587);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Frame.setThis((UninitializedObjectType) null);
      String string0 = Constants.CONSTRUCTOR_NAME;
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      localVariables0.clone();
      instConstraintVisitor0.setFrame(frame0);
      frame1.clone();
      localVariables1.clone();
      ALOAD aLOAD0 = (ALOAD)InstructionConstants.ALOAD_1;
      LSHR lSHR0 = new LSHR();
      short short0 = (short)1941;
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY((short)46, (short)46);
      InstructionHandle instructionHandle0 = null;
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ACMPEQ(iF_ACMPEQ0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = 791;
      LocalVariables localVariables0 = new LocalVariables(791);
      ObjectType objectType0 = ObjectType.getInstance("wD8r_{>nlxf");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OperandStack operandStack0 = new OperandStack(1010, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      frame1.toString();
      instConstraintVisitor0.setFrame(frame1);
      D2F d2F0 = new D2F();
      DNEG dNEG0 = new DNEG();
      Constant[] constantArray0 = new Constant[0];
      DASTORE dASTORE0 = new DASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDASTORE(dASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DASTORE constraint violated: The value at the stack top is not of type 'double', but of type 'wD8r_{>nlxf'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LDC2_W lDC2_W0 = new LDC2_W(760);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RET rET0 = new RET(760);
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.copy();
      Boolean boolean0 = new Boolean(false);
      LocalVariables localVariables0 = new LocalVariables(760);
      ObjectType objectType0 = ObjectType.getInstance("wD,8zr_{>+xf");
      OperandStack operandStack0 = new OperandStack(760, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      operandStack0.toString();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Pattern.quote("wD,8zr_{>+xf");
      operandStack1.initializeObject(uninitializedObjectType0);
      Frame.setThis(uninitializedObjectType0);
      operandStack0.push(uninitializedObjectType0);
      Frame frame1 = new Frame(760, 760);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "cu\"Azm#,0F");
      ASTORE aSTORE0 = new ASTORE(2);
      instConstraintVisitor0.visitASTORE(aSTORE0);
      LREM lREM0 = new LREM();
      DNEG dNEG0 = new DNEG();
      InstructionList instructionList1 = new InstructionList();
      instructionList1.getStart();
      IFNULL iFNULL0 = new IFNULL((InstructionHandle) null);
      instConstraintVisitor0.visitIFNULL(iFNULL0);
      LUSHR lUSHR0 = new LUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLUSHR(lUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LUSHR constraint violated: The value at the stack top is not of type 'int', but of type 'wD,8zr_{>+xf'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("0iejh!{c");
      OperandStack operandStack0 = new OperandStack(13, objectType0);
      LocalVariables localVariables0 = new LocalVariables(13);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.toString();
      localVariables0.getClone();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      Frame.getThis();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FADD fADD0 = new FADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFADD(fADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FADD constraint violated: The value at the stack top is not of type 'float', but of type '0iejh!{c'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LREM lREM0 = new LREM();
      LocalVariables localVariables0 = new LocalVariables(13);
      localVariables0.getClone();
      Frame.getThis();
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      PUTSTATIC pUTSTATIC0 = new PUTSTATIC(13);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFieldInstruction(pUTSTATIC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction PUTSTATIC constraint violated: Index '13' should refer to a CONSTANT_Fieldref_info structure, but refers to 'null'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LREM lREM0 = new LREM();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(2897);
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(3723, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ASTORE aSTORE0 = new ASTORE(3723);
      SASTORE sASTORE0 = new SASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSASTORE(sASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction SASTORE constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Character character0 = Character.valueOf('*');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      JSR_W jSR_W0 = new JSR_W(instructionHandle0);
      instConstraintVisitor0.visitJSR_W(jSR_W0);
      DREM dREM0 = new DREM();
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1097);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1308), 1097);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantLong constantLong0 = new ConstantLong((-1308));
      constantArray0[2] = (Constant) constantLong0;
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[3] = (Constant) constantLong1;
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[4] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      dREM0.toString(constantPool0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDREM(dREM0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LDC2_W lDC2_W0 = new LDC2_W(776);
      LDC2_W lDC2_W1 = new LDC2_W(776);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "o5_Koc-5{[plRyrc");
      AASTORE aASTORE0 = new AASTORE();
      LocalVariables localVariables0 = new LocalVariables(776);
      ObjectType objectType0 = ObjectType.getInstance("o5_Koc-5{[plRyrc");
      OperandStack operandStack0 = new OperandStack(776, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ((InstructionHandle) null);
      IF_ICMPEQ iF_ICMPEQ1 = new IF_ICMPEQ((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPEQ(iF_ICMPEQ1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPEQ constraint violated: The value at the stack top is not of type 'int', but of type 'o5_Koc-5{[plRyrc'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }
}
